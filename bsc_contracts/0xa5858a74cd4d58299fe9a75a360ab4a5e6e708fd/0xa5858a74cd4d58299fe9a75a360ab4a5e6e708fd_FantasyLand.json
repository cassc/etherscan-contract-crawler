{"SourceCode": "/**\r\n *  Created By: MsgSender.io & HK MSG Limited\r\n *  Website: https://msgsender.io\r\n *  Telegram: https://t.me/MsgSender_AP\r\n *  msgsender.io, An Easy Acess to Dex\r\n **/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint256);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract FantasyLand is IERC20, Ownable {\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _swapPairList;\r\n    mapping(address => uint256) private holderIndex;\r\n    mapping(address => bool) private excludeHolder;\r\n    mapping(address => uint256) private partnerIndex;\r\n    mapping(address => bool) private excludePartner;\r\n    \r\n    address public _mainPair;\r\n    address public fundAddress;\r\n    address public currency;\r\n    address public initialAddress;\r\n    address[] public rewardPath;\r\n    address[] private holders;\r\n    address[] private partners;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint256 private _decimals;\r\n    uint256 private _tTotal;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public startTradeBlock = 60000000;\r\n    uint256 public kb = 3;\r\n    uint256 public opertationCount = 0;\r\n    uint256 public _buyPartnerFee;\r\n    uint256 public _buyRewardFee;\r\n    uint256 public _sellPartnerFee;\r\n    uint256 public _sellBurnFee;\r\n    uint256 public rewardHat;\r\n    uint256 public partnerRewardAmount;\r\n    uint256 public totalPartnerNumber;\r\n    uint256 public lpRewardPeriod;\r\n    uint256 public partnerPeriod;\r\n    uint256 private currentIndex;\r\n    uint256 private currentPartnerIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 public partnerRewardCondition;\r\n    uint256 public SwapRewardCondition;\r\n    uint256 private progressRewardBlock;\r\n    uint256 private progressPartnerBlock;\r\n\r\n    bool private inSwap;\r\n    bool public enableKillBlock;\r\n    bool currencyIsEth;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    TokenDistributor public _partnerRewardDistributor;\r\n    TokenDistributor public _rewardTokenDistributor;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n\r\n        _name = \"MSG Fantasy Land\";\r\n        _symbol = \"FAN\";\r\n        _decimals = 18;\r\n        _tTotal = 10**14 * 10**18;\r\n\r\n        fundAddress = address(0x0054bcE25929CdB7c4dda4FD362C850E589853B1);\r\n        currency = address(0x55d398326f99059fF775485246999027B3197955);\r\n        ISwapRouter swapRouter = ISwapRouter(address(0x10ED43C718714eb63d5aA57B78B54704E256024E));\r\n        initialAddress = address(0x95D2d3f05f876FEdE29408C32d286c00ad2A6d06);\r\n\r\n        enableKillBlock = true;\r\n        rewardPath = [address(this), currency];\r\n        IERC20(currency).approve(address(swapRouter), MAX);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), currency);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        _buyPartnerFee = 100;\r\n        _buyRewardFee = 100;\r\n        _sellPartnerFee = 100;\r\n        _sellBurnFee = 100;\r\n\r\n        _balances[initialAddress] = _tTotal;\r\n        emit Transfer(address(0), initialAddress, _tTotal);\r\n\r\n        _feeWhiteList[fundAddress] = true;\r\n        _feeWhiteList[initialAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        totalPartnerNumber = 0;\r\n        holderRewardCondition = 100 * 10**18;\r\n        partnerRewardCondition = 1000 * 10**18;\r\n        rewardHat = 100 * 10**18;\r\n        partnerRewardAmount = 10 * 10**18;\r\n        SwapRewardCondition = 10000000 * 10**18;\r\n\r\n        _partnerRewardDistributor = new TokenDistributor(currency);\r\n        _rewardTokenDistributor = new TokenDistributor(currency);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setkb(uint256 a) public onlyOwner {\r\n        kb = a;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        \r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        bool takeFee;\r\n        bool isSell;\r\n        if (block.number < startTradeBlock) {\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require((!_swapPairList[from] && !_swapPairList[to]), \"trade not started\");\r\n                _interTransfer(from, to, amount, 5, address(0xdead));\r\n            } else {\r\n                _launchTransfer(from, to, amount, takeFee, isSell);\r\n            }\r\n        } else {\r\n            if (_swapPairList[from] || _swapPairList[to]) {\r\n                if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                    if (enableKillBlock && block.number < startTradeBlock + kb) {\r\n                        _interTransfer(from, to, amount, 80, fundAddress);\r\n                        return;\r\n                    }\r\n                    takeFee = true;\r\n                    if (_swapPairList[to]) {\r\n                        isSell = true;\r\n                    }\r\n                    _launchTransfer(from, to, amount, takeFee, isSell);\r\n                    if (from != address(this)) {\r\n                        if (isSell) {\r\n                            addHolder(from);\r\n                        }\r\n                    }\r\n                } else {\r\n                    _launchTransfer(from, to, amount, takeFee, isSell);\r\n                }\r\n            } else {\r\n                _launchTransfer(from, to, amount, takeFee, isSell);\r\n                if (opertationCount == 0) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance > SwapRewardCondition) {\r\n                        uint256 swapFee = 300;\r\n                        swapTokenForFund(contractTokenBalance, swapFee);\r\n                    }\r\n                } else if (opertationCount == 1) {\r\n                    processReward(250000);\r\n                } else if (opertationCount == 2) {\r\n                    processPartnerReward(250000);\r\n                }\r\n                opertationCount++;\r\n                if (opertationCount >=3){\r\n                    opertationCount = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _interTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 feeRate,\r\n        address feeAddress\r\n    ) private {\r\n        require(feeRate <= 100, \"feeRate too high\");\r\n        uint256 feeAmount = (tAmount * feeRate) / 100;\r\n        _baseTransfer(sender, feeAddress, feeAmount);\r\n        _baseTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _launchTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private {\r\n\r\n        uint256 feeAmount = 0;\r\n\r\n        if (isSell) {\r\n            if (takeFee) {\r\n                uint256 burnAmount = (tAmount * _sellBurnFee) / 10000;\r\n                uint256 sellPartnerAmount = (tAmount * _sellPartnerFee) / 10000;\r\n                feeAmount = burnAmount + sellPartnerAmount;\r\n                _baseTransfer(sender, address(0xdead), burnAmount);\r\n                _baseTransfer(sender, address(this), sellPartnerAmount);\r\n            }   \r\n            _baseTransfer(sender, recipient, tAmount - feeAmount);\r\n        } else {\r\n            if (takeFee) {\r\n                uint256 buyPartnerAmount = (tAmount * _buyPartnerFee) / 10000;\r\n                uint256 buyRewardAmount = (tAmount * _buyRewardFee) / 10000;\r\n                feeAmount = buyPartnerAmount + buyRewardAmount;\r\n                _baseTransfer(sender, address(this), feeAmount);\r\n            }                    \r\n            _baseTransfer(sender, recipient, tAmount - feeAmount);\r\n        }        \r\n    }\r\n\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 value\r\n    );\r\n    event Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\r\n    event Failed_addLiquidityETH();\r\n    event Failed_addLiquidity();\r\n\r\n    function swapTokenForFund(\r\n        uint256 tokenAmount,\r\n        uint256 swapFee\r\n    ) private lockTheSwap {\r\n\r\n        uint256 holderAmount = (tokenAmount * _buyRewardFee) / swapFee;\r\n        try\r\n            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                holderAmount,\r\n                0,\r\n                rewardPath,\r\n                address(_rewardTokenDistributor),\r\n                block.timestamp\r\n            )\r\n        {} catch {\r\n            emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                0\r\n            );\r\n        }\r\n\r\n        uint256 partnerFee = _sellPartnerFee + _buyPartnerFee;\r\n        uint256 partnerAmount = (tokenAmount * partnerFee) / swapFee;\r\n        try\r\n            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                partnerAmount,\r\n                0,\r\n                rewardPath,\r\n                address(_partnerRewardDistributor),\r\n                block.timestamp\r\n            )\r\n        {} catch {\r\n            emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                0\r\n            );\r\n        }\r\n    }\r\n\r\n    function _baseTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function launch() external onlyOwner {\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setWhiteList(\r\n        address[] calldata addr,\r\n        bool enable\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setCurrency(address _currency) public onlyOwner {\r\n        currency = _currency;\r\n        if (_currency == _swapRouter.WETH()) {\r\n            currencyIsEth = true;\r\n        } else {\r\n            currencyIsEth = false;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(\r\n        address token,\r\n        uint256 amount,\r\n        address to\r\n    ) external onlyFunder {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || fundAddress == msg.sender, \"!Funder\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addPartner(address adr) public onlyOwner {\r\n        if (0 == partnerIndex[adr]) {\r\n            if (0 == partners.length || partners[0] != adr) {\r\n                partnerIndex[adr] = partners.length;\r\n                partners.push(adr);\r\n            }\r\n        }\r\n        totalPartnerNumber = totalPartnerNumber + 1;\r\n    }\r\n\r\n    function excluedPartner(address adr) public onlyOwner {\r\n        excludePartner[adr] = true;\r\n    }\r\n\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + 600 > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 REWARD_COIN = IERC20(currency);\r\n\r\n        uint256 balance = REWARD_COIN.balanceOf(\r\n            address(_rewardTokenDistributor)\r\n        );\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        if (balance > rewardHat) {\r\n            balance = rewardHat;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint256 holdTokenTotal = holdToken.totalSupply();\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n        uint256 shareholderCount = holders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n                lpRewardPeriod++;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = (balance * tokenBalance) / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    REWARD_COIN.transferFrom(\r\n                        address(_rewardTokenDistributor),\r\n                        shareHolder,\r\n                        amount\r\n                    );\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function processPartnerReward(uint256 gas) private {\r\n\r\n\r\n        if (progressPartnerBlock + 600 > block.number) {\r\n            return;\r\n        }\r\n        IERC20 REWARD_COIN = IERC20(currency);\r\n        uint256 partnerTotalBalance = REWARD_COIN.balanceOf(address(_partnerRewardDistributor));\r\n        if (partnerTotalBalance < partnerRewardCondition) {\r\n            return;\r\n        }\r\n\r\n\r\n        address partnerAddress;\r\n        uint256 partnerCount = partners.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n\r\n\r\n        while (gasUsed < gas && iterations < partnerCount) {\r\n\r\n            if (currentPartnerIndex >= partnerCount) {\r\n                currentPartnerIndex = 0;\r\n                partnerPeriod++;\r\n            }\r\n            partnerAddress = partners[currentPartnerIndex];\r\n            if (!excludePartner[partnerAddress]) {\r\n                \r\n                REWARD_COIN.transferFrom(\r\n                    address(_partnerRewardDistributor),\r\n                    partnerAddress,\r\n                    partnerRewardAmount\r\n                );\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentPartnerIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressPartnerBlock = block.number;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setSwapRewardCondition(uint256 amount) external onlyOwner {\r\n        SwapRewardCondition = amount;\r\n    }\r\n\r\n    function setPartnerRewardCondition(uint256 amount) external onlyOwner {\r\n        partnerRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setRewardHat(uint256 amount) external onlyOwner {\r\n        rewardHat = amount;\r\n    }\r\n    \r\n    function HolderCount() public view returns (uint256) {\r\n        return holders.length;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_addLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_addLiquidityETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForETHSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HolderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyPartnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_partnerRewardDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardTokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellPartnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableKillBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"excluedPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opertationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"setCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPartnerRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRewardHat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"setkb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPartnerNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FantasyLand", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9ee1014fda8b4f555b0707e27b28b3c2eb65b0c5929b0c1d0f4adb364033a93"}