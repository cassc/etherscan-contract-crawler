{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Governance/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Governance contract\\n * @author dlabs.hu\\n * @dev This contract is for handling governance and configuration changes\\n */\\n\\nimport \\\"../Interfaces/IVault.sol\\\";\\nimport \\\"../Interfaces/IAffiliate.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ncontract Governance {\\n\\nmapping(address => uint256) public curator_proportions;                             // Proportions of the curators\\naddress[] public governedContracts;                                                 // The governed addresses\\n\\n/* ConfManager system mappings and vars */\\nmapping(string => config_struct) public Configuration;\\nmapping(string => config_struct) public invoteConfiguration;\\nmapping(uint256 => string) public ID_to_name;\\n\\nmapping(address => uint256) public conf_curator_timer;                           // Last action time by curator for locking\\nmapping(uint256 => uint256) public conf_votes;                                   // ID to see if threshold is passed\\nmapping(uint256 => uint256) public conf_time_limit;                              // Actions needs to be triggered in time\\nuint256 public conf_counter = 6;                                                 // Starting from 6+1, 0-6 are reserved for global config\\n\\nstruct config_struct {\\n  string name;\\n  bool Running;\\n  address govaddr;\\n  address[] managers;\\n  bool[] boolslot;\\n  address[] address_slot;\\n  uint256[] uint256_slot;\\n  bytes32[] bytes32_slot;\\n}\\n\\nmapping(uint256 => bool) public triggered;                                          // If true, it was triggered before and will be blocked\\nstring constant Core = \\\"Main\\\";                                                               // Core string for consistency\\n\\n/* Action manager system mappings */\\nmapping(address => uint256) public action_curator_timer;                            // Last action time by curator for locking\\nmapping(uint256 => uint256) public action_id_to_vote;                               // ID to see if threshold is passed\\nmapping(uint256 => uint256) public action_time_limit;                               // Actions needs to be triggered in time\\nmapping(uint256 => address) public action_can_be_triggered_by;                      // Address which can trigger the action after threshold is passed\\n\\n/* This is used to store calldata and make it takeable from external contracts.\\n@dev be careful with this, low level calls can be tricky. */\\nmapping(uint256 => bytes) public action_id_to_calldata;                             // Mapping actions to relevant calldata.\\n\\n// Action threshold and time limit, so the community can react to changes\\nuint256 public action_threshold;                                                    // This threshold needs to be passed for action to happen\\nuint256 public vote_time_threshold;                                                 // You can only vote once per timer - this is for security and gas optimization\\nuint256 public vote_conf_time_threshold;                                            // Config\\n\\nevent Transfer_Proportion(uint256 beneficiary_proportion);\\nevent Action_Proposed(uint256 id);\\nevent Action_Support(uint256 id);\\nevent Action_Trigger(uint256 id);\\nevent Config_Proposed(string name);\\nevent Config_Supported(string name);\\n\\nmodifier onlyCurators(){\\n  require(curator_proportions[msg.sender] > 0, \\\"Not a curator\\\");\\n  _;\\n}\\n\\n// The Governance contract needs to be deployed first, before all\\n// Max proportions are 100, shared among curators\\n constructor(\\n    address[] memory _curators,\\n    uint256[] memory _curator_proportions,\\n    address[] memory _managers\\n) {\\n    action_threshold = 30;                                        // Threshold -> from this, configs and actions can be triggered\\n    vote_time_threshold = 600;                                    // Onc conf change per 10 mins, in v2 we can make it longer\\n    vote_conf_time_threshold = 0;\\n\\n    require(_curators.length == _curator_proportions.length, \\\"Curators and proportions length mismatch\\\");\\n\\n    uint totalProp;\\n    for (uint256 i = 0; i < _curators.length; i++) {\\n        curator_proportions[_curators[i]] = _curator_proportions[i];\\n        totalProp += _curator_proportions[i];\\n    }\\n\\n    require(totalProp == 100, \\\"Total proportions must be 100\\\");\\n\\n    ID_to_name[0] = Core;                                         // Core config init\\n    core_govAddr_conf(address(this));                             // Global governance address\\n    core_emergency_conf();                                        // Emergency stop value is enforced to be Running==true from start.\\n    core_managers_conf(_managers);\\n}\\n\\n// Core functions, only used during init\\nfunction core_govAddr_conf(address _address) private {\\n    Configuration[Core].name = Core;\\n    Configuration[Core].govaddr = _address;}\\n\\nfunction core_emergency_conf() private {\\n    Configuration[Core].Running = true;}\\n\\nfunction core_managers_conf(address[] memory _addresses) private {\\n    Configuration[Core].managers = _addresses;\\n    address[] storage addGovAddr = Configuration[Core].managers; // Constructor memory -> Storage\\n    addGovAddr.push(address(this));\\n    Configuration[Core].managers = addGovAddr;\\n    }\\n\\n// Only the addresses on the manager list are allowed to execute\\nfunction onlyManagers() internal view {\\n      bool ok;\\n          address [] memory tempman =  read_core_managers();\\n          for (uint i=0; i < tempman.length; i++) {\\n              if (tempman[i] == msg.sender) {ok = true;}\\n          }\\n          if (ok == true){} else {revert(\\\"0\\\");} //Not manager*/\\n}\\n\\nbool public deployed = false;\\nfunction setToDeployed() public returns (bool) {\\n  onlyManagers();\\n  deployed = true;\\n  return deployed;\\n}\\n\\nfunction ActivateDeployedMosaic(\\n    address _userProfile,\\n    address _affiliate,\\n    address _fees,\\n    address _register,\\n    address _poolFactory,\\n    address _feeTo,\\n    address _swapsContract,\\n    address _oracle,\\n    address _deposit,\\n    address _burner,\\n    address _booster\\n) public {\\n    onlyManagers();\\n    require(deployed == false, \\\"It is done.\\\");\\n\\n        Configuration[Core].address_slot.push(msg.sender); //0 owner\\n        Configuration[Core].address_slot.push(_userProfile); //1\\n        Configuration[Core].address_slot.push(_affiliate); //2\\n        Configuration[Core].address_slot.push(_fees); //3\\n        Configuration[Core].address_slot.push(_register); //4\\n        Configuration[Core].address_slot.push(_poolFactory); //5\\n        Configuration[Core].address_slot.push(_feeTo); //6 - duplicate? fees and feeToo are same?\\n        Configuration[Core].address_slot.push(_swapsContract); //7\\n        Configuration[Core].address_slot.push(_oracle); //8\\n        Configuration[Core].address_slot.push(_deposit); //9\\n        Configuration[Core].address_slot.push(_burner); //10\\n        Configuration[Core].address_slot.push(_booster); //11\\n\\n        IAffiliate(_affiliate).selfManageMe();\\n}\\n\\n/* Transfer proportion */\\nfunction transfer_proportion(address _address, uint256 _amount) external returns (uint256) {\\n    require(curator_proportions[msg.sender] >= _amount, \\\"Not enough proportions\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet, your votes need to conclude\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    curator_proportions[msg.sender] = curator_proportions[msg.sender] - _amount;\\n    curator_proportions[_address] = curator_proportions[_address] + _amount;\\n    emit Transfer_Proportion(curator_proportions[_address]);\\n    return curator_proportions[_address];\\n  }\\n\\n/* Configuration manager */\\n\\n// Add or update config.\\nfunction update_config(string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n  ) internal returns (string memory){\\n  Configuration[_name].name = _name;\\n  Configuration[_name].Running = _Running;\\n  Configuration[_name].govaddr = _govaddr;\\n  Configuration[_name].managers = _managers;\\n  Configuration[_name].boolslot = _boolslot;\\n  Configuration[_name].address_slot = _address_slot;\\n  Configuration[_name].uint256_slot = _uint256_slot;\\n  Configuration[_name].bytes32_slot = _bytes32_slot;\\n  return _name;\\n}\\n\\n// Create temp configuration\\nfunction votein_config(string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n) internal returns (string memory){\\n  invoteConfiguration[_name].name = _name;\\n  invoteConfiguration[_name].Running = _Running;\\n  invoteConfiguration[_name].govaddr = _govaddr;\\n  invoteConfiguration[_name].managers = _managers;\\n  invoteConfiguration[_name].boolslot = _boolslot;\\n  invoteConfiguration[_name].address_slot = _address_slot;\\n  invoteConfiguration[_name].uint256_slot = _uint256_slot;\\n  invoteConfiguration[_name].bytes32_slot = _bytes32_slot;\\n  return _name;\\n}\\n\\n// Propose config\\nfunction propose_config(\\n  string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n    conf_counter = conf_counter + 1;\\n    require(conf_time_limit[conf_counter] == 0, \\\"In progress\\\");\\n    conf_curator_timer[msg.sender] = block.timestamp;\\n    conf_time_limit[conf_counter] = block.timestamp + vote_time_threshold;\\n    conf_votes[conf_counter] = curator_proportions[msg.sender];\\n    ID_to_name[conf_counter] = _name;\\n    triggered[conf_counter] = false; // It keep rising, so can't be overwritten from true in past value\\n    votein_config(\\n        _name,\\n        _Running,\\n        _govaddr,\\n        _managers,\\n        _boolslot,\\n        _address_slot,\\n        _uint256_slot,\\n        _bytes32_slot\\n    );\\n    emit Config_Proposed(_name);\\n    return conf_counter;\\n  }\\n\\n// Use this with caution!\\nfunction propose_core_change(address _govaddr, bool _Running, address[] memory _managers, address[] memory _owners) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n    require(conf_time_limit[conf_counter] == 0, \\\"In progress\\\");\\n    conf_curator_timer[msg.sender] = block.timestamp;\\n    conf_time_limit[conf_counter] = block.timestamp + vote_time_threshold;\\n    conf_votes[conf_counter] = curator_proportions[msg.sender];\\n    ID_to_name[conf_counter] = Core;\\n    triggered[conf_counter] = false; // It keep rising, so can't be overwritten from true in past value\\n\\n    invoteConfiguration[Core].name = Core;\\n    invoteConfiguration[Core].govaddr = _govaddr;\\n    invoteConfiguration[Core].Running = _Running;\\n    invoteConfiguration[Core].managers = _managers;\\n    invoteConfiguration[Core].address_slot = _owners;\\n    return conf_counter;\\n}\\n\\n// ID and name are requested together for supporting a config because of awareness.\\nfunction support_config_proposal(uint256 _confCount, string memory _name) external returns (string memory) {\\n  require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n  require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n  require(conf_time_limit[_confCount] > block.timestamp, \\\"Timed out\\\");\\n  require(conf_time_limit[_confCount] != 0, \\\"Not started\\\");\\n  require(keccak256(abi.encodePacked(ID_to_name[_confCount])) == keccak256(abi.encodePacked(_name)), \\\"You are not aware, Neo.\\\");\\n  conf_curator_timer[msg.sender] = block.timestamp;\\n  conf_votes[_confCount] = conf_votes[_confCount] + curator_proportions[msg.sender];\\n  if (conf_votes[_confCount] >= action_threshold && triggered[_confCount] == false) {\\n    triggered[_confCount] = true;\\n    string memory name = ID_to_name[_confCount];\\n    update_config(\\n    invoteConfiguration[name].name,\\n    invoteConfiguration[name].Running,\\n    invoteConfiguration[name].govaddr,\\n    invoteConfiguration[name].managers,\\n    invoteConfiguration[name].boolslot,\\n    invoteConfiguration[name].address_slot,\\n    invoteConfiguration[name].uint256_slot,\\n    invoteConfiguration[name].bytes32_slot\\n    );\\n\\n    delete invoteConfiguration[name].name;\\n    delete invoteConfiguration[name].Running;\\n    delete invoteConfiguration[name].govaddr;\\n    delete invoteConfiguration[name].managers;\\n    delete invoteConfiguration[name].boolslot;\\n    delete invoteConfiguration[name].address_slot;\\n    delete invoteConfiguration[name].uint256_slot;\\n    delete invoteConfiguration[name].bytes32_slot;\\n\\n    conf_votes[_confCount] = 0;\\n  }\\n  emit Config_Supported(_name);\\n  return Configuration[_name].name = _name;\\n}\\n\\n/* Read configurations */\\n\\nfunction read_core_Running() public view returns (bool) {return Configuration[Core].Running;}\\nfunction read_core_govAddr() public view returns (address) {return Configuration[Core].govaddr;}\\nfunction read_core_managers() public view returns (address[] memory) {return Configuration[Core].managers;}\\nfunction read_core_owners() public view returns (address[] memory) {return Configuration[Core].address_slot;}\\n\\nfunction read_config_Main_addressN(uint256 _n) public view returns (address) {\\n  return Configuration[\\\"Main\\\"].address_slot[_n];\\n}\\n\\n// Can't read full because of stack too deep limit\\nfunction read_config_core(string memory _name) public view returns (\\n  string memory,\\n  bool,\\n  address,\\n  address[] memory){\\n  return (\\n  Configuration[_name].name,\\n  Configuration[_name].Running,\\n  Configuration[_name].govaddr,\\n  Configuration[_name].managers);}\\nfunction read_config_name(string memory _name) public view returns (string memory) {return Configuration[_name].name;}\\nfunction read_config_emergencyStatus(string memory _name) public view returns (bool) {return Configuration[_name].Running;}\\nfunction read_config_governAddress(string memory _name) public view returns (address) {return Configuration[_name].govaddr;}\\nfunction read_config_Managers(string memory _name) public view returns (address[] memory) {return Configuration[_name].managers;}\\n\\nfunction read_config_bool_slot(string memory _name) public view returns (bool[] memory) {return Configuration[_name].boolslot;}\\nfunction read_config_address_slot(string memory _name) public view returns (address[] memory) {return Configuration[_name].address_slot;}\\nfunction read_config_uint256_slot(string memory _name) public view returns (uint256[] memory) {return Configuration[_name].uint256_slot;}\\nfunction read_config_bytes32_slot(string memory _name) public view returns (bytes32[] memory) {return Configuration[_name].bytes32_slot;}\\n\\nfunction read_config_Managers_batched(string memory _name, uint256[] memory _ids) public view returns (address[] memory) {\\n    address[] memory result = new address[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].managers[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_bool_slot_batched(string memory _name, uint256[] memory _ids) public view returns (bool[] memory) {\\n    bool[] memory result = new bool[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].boolslot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_address_slot_batched(string memory _name, uint256[] memory _ids) public view returns (address[] memory) {\\n    address[] memory result = new address[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].address_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_uint256_slot_batched(string memory _name, uint256[] memory _ids) public view returns (uint256[] memory) {\\n    uint256[] memory result = new uint256[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].uint256_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_bytes32_slot_batched(string memory _name, uint256[] memory _ids) public view returns (bytes32[] memory) {\\n    bytes32[] memory result = new bytes32[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].bytes32_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\n\\n// Read invote configuration\\n// Can't read full because of stack too deep limit\\nfunction read_invoteConfig_core(string calldata _name) public view returns (\\n  string memory,\\n  bool,\\n  address,\\n  address[] memory){\\n  return (\\n  invoteConfiguration[_name].name,\\n  invoteConfiguration[_name].Running,\\n  invoteConfiguration[_name].govaddr,\\n  invoteConfiguration[_name].managers);}\\nfunction read_invoteConfig_name(string memory _name) public view returns (string memory) {return invoteConfiguration[_name].name;}\\nfunction read_invoteConfig_emergencyStatus(string memory _name) public view returns (bool) {return invoteConfiguration[_name].Running;}\\nfunction read_invoteConfig_governAddress(string memory _name) public view returns (address) {return invoteConfiguration[_name].govaddr;}\\nfunction read_invoteConfig_Managers(string memory _name) public view returns (address[] memory) {return invoteConfiguration[_name].managers;}\\nfunction read_invoteConfig_boolslot(string memory _name) public view returns (bool[] memory) {return invoteConfiguration[_name].boolslot;}\\nfunction read_invoteConfig_address_slot(string memory _name) public view returns (address[] memory) {return invoteConfiguration[_name].address_slot;}\\nfunction read_invoteConfig_uint256_slot(string memory _name) public view returns (uint256[] memory) {return invoteConfiguration[_name].uint256_slot;}\\nfunction read_invoteConfig_bytes32_slot(string memory _name) public view returns (bytes32[] memory) {return invoteConfiguration[_name].bytes32_slot;}\\n\\n\\n/* Action manager system */\\n\\n// Propose an action, regardless of which contract/address it resides in\\nfunction propose_action(uint256 _id, address _trigger_address, bytes memory _calldata) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(action_id_to_calldata[_id].length == 0, \\\"Calldata already set\\\");\\n    require(action_time_limit[_id] == 0, \\\"Create a new one\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    action_time_limit[_id] = block.timestamp + vote_time_threshold;\\n    action_can_be_triggered_by[_id] = _trigger_address;\\n    action_id_to_vote[_id] = curator_proportions[msg.sender];\\n    action_id_to_calldata[_id] = _calldata;\\n    triggered[_id] = false;\\n    emit Action_Proposed(_id);\\n    return _id;\\n  }\\n\\n// Support an already submitted action\\nfunction support_actions(uint256 _id) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet\\\");\\n    require(action_time_limit[_id] > block.timestamp, \\\"Action timed out\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    action_id_to_vote[_id] = action_id_to_vote[_id] + curator_proportions[msg.sender];\\n    emit Action_Support(_id);\\n    return _id;\\n  }\\n\\n// Trigger action by allowed smart contract address\\n// Only returns calldata, does not guarantee execution success! Triggerer is responsible, choose wisely.\\nfunction trigger_action(uint256 _id) external returns (bytes memory) {\\n    require(action_id_to_vote[_id] >= action_threshold, \\\"Threshold not passed\\\");\\n    require(action_time_limit[_id] > block.timestamp, \\\"Action timed out\\\");\\n    require(action_can_be_triggered_by[_id] == msg.sender, \\\"You are not the triggerer\\\");\\n    require(triggered[_id] == false, \\\"Already triggered\\\");\\n    triggered[_id] = true;\\n    action_id_to_vote[_id] = 0;\\n    emit Action_Trigger(_id);\\n    return action_id_to_calldata[_id];\\n}\\n\\n/* Pure function for generating signatures */\\nfunction generator(string memory _func) public pure returns (bytes memory) {\\n        return abi.encodeWithSignature(_func);\\n    }\\n\\n/* Execution and mass config updates */\\n\\n/* Update contracts address list */\\nfunction update_All(address [] memory _addresses) external onlyCurators returns (address [] memory) {\\n  governedContracts = _addresses;\\n  return governedContracts;\\n}\\n\\n/* Update all contracts from address list */\\nfunction selfManageMe_All() external onlyCurators {\\n  for (uint256 i = 0; i < governedContracts.length; i++) {\\n    _execute_Manage(governedContracts[i]);\\n  }\\n}\\n\\n/* Execute external contract call: selfManageMe() */\\nfunction execute_Manage(address _contractA) external onlyCurators {\\n    _execute_Manage(_contractA);\\n}\\n\\nfunction _execute_Manage(address _contractA) internal {\\n    require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n    IGoverned(_contractA).selfManageMe();\\n}\\n\\n/* Execute external contract call: selfManageMe() */\\nfunction execute_batch_Manage(address[] calldata _contracts) external onlyCurators {\\n  for (uint i; i < _contracts.length; i++) {\\n    _execute_Manage(_contracts[i]);\\n  }\\n}\\n\\n/* Execute external contract calls with any string */\\nfunction execute_ManageBytes(address _contractA, string calldata _call, bytes calldata _data) external onlyCurators {\\n  _execute_ManageBytes(_contractA, _call, _data);\\n}\\n\\nfunction execute_batch_ManageBytes(address[] calldata _contracts, string[] calldata _calls, bytes[] calldata _datas) external onlyCurators {\\n  require(_contracts.length == _calls.length, \\\"Governance: _conracts and _calls length does not match\\\");\\n  require(_calls.length == _datas.length, \\\"Governance: _calls and _datas length does not match\\\");\\n  for (uint i; i < _contracts.length; i++) {\\n    _execute_ManageBytes(_contracts[i], _calls[i], _datas[i]);\\n  }\\n}\\n\\nfunction _execute_ManageBytes(address _contractA, string calldata _call, bytes calldata _data) internal {\\n  require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n  require(bytes(_call).length == 0 || bytes(_call).length >=3, \\\"provide a valid function specification\\\");\\n\\n  for (uint256 i = 0; i < bytes(_call).length; i++) {\\n    require(bytes(_call)[i] != 0x20, \\\"No spaces in fun please\\\");\\n  }\\n\\n  bytes4 signature;\\n  if (bytes(_call).length != 0) {\\n      signature = (bytes4(keccak256(bytes(_call))));\\n  } else {\\n      signature = \\\"\\\";\\n  }\\n\\n  (bool success, bytes memory retData) = _contractA.call(abi.encodePacked(signature, _data));\\n  _evaluateCallReturn(success, retData);\\n}\\n\\n/* Execute external contract calls with address array */\\nfunction execute_ManageList(address _contractA, string calldata _funcName, address[] calldata address_array) external onlyCurators {\\n  require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n  (bool success, bytes memory retData) = _contractA.call(abi.encodeWithSignature(_funcName, address_array));\\n  _evaluateCallReturn(success, retData);\\n}\\n\\n/* Update Vault values */\\nfunction execute_Vault_update(address _vaultAddress) external onlyCurators {\\n  IVault(_vaultAddress).selfManageMe();\\n}\\n\\nfunction _evaluateCallReturn(bool success, bytes memory retData) internal pure {\\n    if (!success) {\\n      if (retData.length >= 68) {\\n          bytes memory reason = new bytes(retData.length - 68);\\n          for (uint i = 0; i < reason.length; i++) {\\n              reason[i] = retData[i + 68];\\n          }\\n          revert(string(reason));\\n      } else revert(\\\"Governance: FAILX\\\");\\n  }\\n}\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Governance/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Governed base contract\\n * @author dlabs.hu\\n * @dev This contract is base for contracts governed by Governance\\n */\\n\\nimport \\\"./Governance.sol\\\";\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\nabstract contract Governed is IGoverned {\\n    GovernanceState internal governanceState;\\n\\n    constructor() {\\n      governanceState.running = true;\\n      governanceState.governanceAddress = address(this);\\n    }\\n\\n    function getGovernanceState() public view returns (GovernanceState memory govState) {\\n      return governanceState;\\n    }\\n\\n    // Modifier responsible for checking if emergency stop was triggered, default is Running == true\\n    modifier Live {\\n        LiveFun();\\n        _;\\n    }\\n\\n    modifier notLive {\\n        notLiveFun();\\n        _;\\n    }\\n\\n\\n    error Governed__EmergencyStopped();\\n    function LiveFun() internal virtual view {\\n        if (!governanceState.running) revert Governed__EmergencyStopped();\\n    }\\n\\n    error Governed__NotStopped();\\n    function notLiveFun() internal virtual view {\\n        if (governanceState.running) revert Governed__NotStopped();\\n    }\\n\\n    modifier onlyManagers() {\\n        onlyManagersFun();\\n        _;\\n    }\\n\\n    error Governed__NotManager(address caller);\\n    function onlyManagersFun() internal virtual view {\\n        if (!isManagerFun(msg.sender)) revert Governed__NotManager(msg.sender);\\n    }\\n\\n\\n    function isManagerFun(address a) internal virtual view returns (bool) {\\n        if (a == governanceState.governanceAddress) {\\n            return true;\\n        }\\n        for (uint i=0; i < governanceState.managers.length; i++) {\\n            if (governanceState.managers[i] == a) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function selfManageMe() external virtual {\\n        onlyManagersFun();\\n        LiveFun();\\n        _selfManageMeBefore();\\n        address governAddress = governanceState.governanceAddress;\\n        bool nextRunning = IGovernance(governAddress).read_core_Running();\\n        if (governanceState.running != nextRunning) _onBeforeEmergencyChange(nextRunning);\\n        governanceState.running = nextRunning;\\n        governanceState.managers = IGovernance(governAddress).read_core_managers();               // List of managers\\n        governanceState.governanceAddress = IGovernance(governAddress).read_core_govAddr();\\n        _selfManageMeAfter();\\n    }\\n\\n    function _selfManageMeBefore() internal virtual;\\n    function _selfManageMeAfter() internal virtual;\\n    function _onBeforeEmergencyChange(bool nextRunning) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/helpers/pancake/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n\\npragma solidity >=0.6.2;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/helpers/pancake/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IPancakeRouter01.sol\\\";\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IAffiliate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Interfaces/IUserProfile.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IAffiliate is IGoverned {\\n    struct AffiliateLevel {\\n        uint8 rank;\\n        uint8 commissionLevels; // eligibility for how many levels affiliate comission\\n        uint16 referralBuyFeeDiscount; // buy fee disccount for the referrals refistering for the user - 10000 = 100%\\n        uint16 referralCountThreshold; // minimum amount of direct referrals needed for level\\n        uint16 stakingBonus;\\n        uint16 conversionRatio;\\n        uint32 claimLimit; // max comission per month claimable - in usd value, not xe18!\\n        uint256 kdxStakeThreshold; // minimum amount of kdx stake needed\\n        uint256 purchaseThreshold; // minimum amount of self basket purchase needed\\n        uint256 referralPurchaseThreshold; // minimum amount of referral basket purchase needed\\n        uint256 traderPurchaseThreshold; // minimum amount of user basket purchase (for traders) needed\\n\\n        string rankName;\\n    }\\n\\n    struct AffiliateUserData {\\n        uint32 affiliateRevision;\\n        uint32 activeReferralCount;\\n        uint256 userPurchase;\\n        uint256 referralPurchase;\\n        uint256 traderPurchase;\\n        uint256 kdxStake;\\n    }\\n\\n    struct AffiliateConfig {\\n        uint16 level1RewardShare; // 0..10000. 6000 -> 60% of affiliate rewards go to level 1, 40% to level2\\n        uint240 activeReferralPurchaseThreshold; // the min amount of (usdt) purchase in wei to consider a referral active\\n    }\\n\\n    function getCommissionLevelsForRanks(uint8 rank, uint8 rank2) external view returns (uint8 commissionLevels, uint8 commissionLevels2);\\n\\n    function getLevelsAndConversionAndClaimLimitForRank(uint8 rank) external view returns (uint8 commissionLevels, uint16 conversionRatio, uint32 claimLimit);\\n\\n    function getConfig() external view returns (AffiliateConfig memory config);\\n\\n    // get the number of affiliate levels\\n    function getLevelCount() external view returns (uint256 count);\\n\\n    function getLevelDetails(uint256 _idx) external view returns (AffiliateLevel memory level);\\n\\n    function getAllLevelDetails() external view returns (AffiliateLevel[] memory levels);\\n\\n    function getAffiliateUserData(address user) external view returns (AffiliateUserData memory data);\\n\\n    function getUserPurchaseAmount(address user) external view returns (uint256 amount);\\n\\n    function getReferralPurchaseAmount(address user) external view returns (uint256 amount);\\n\\n    function userStakeChanged(address user, address referredBy, uint256 kdxAmount) external;\\n\\n    function registerUserPurchase(address user, address referredBy, address trader, uint256 usdAmount) external;\\n    function registerUserPurchaseAsTokens(address user, address referredBy, address trader, address[] memory tokens, uint256[] memory tokenAmounts) external;\\n\\n    event AffiliateConfigUpdated(AffiliateConfig _newConfig, AffiliateConfig config);\\n\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IFees is IGoverned {\\n    struct MosaicFeeRanges {\\n        uint16 buyFeeMin;          // 10000 = 100%\\n        uint16 buyFeeMax;\\n        uint16 trailingFeeMin;\\n        uint16 trailingFeeMax;\\n        uint16 performanceFeeMin;\\n        uint16 performanceFeeMax;\\n    }\\n\\n    struct MosaicFeeDistribution {\\n        uint16 userBuyFeeDiscountMax;\\n        uint16 userTrailingFeeDiscountMax;\\n        uint16 userPerformanceFeeDiscountMax;\\n        uint16 traderBuyFeeShareMin;          // 10000 = 100%\\n        uint16 traderBuyFeeShareMax;\\n        uint16 traderTrailingFeeShareMin;\\n        uint16 traderTrailingFeeShareMax;\\n        uint16 traderPerformanceFeeShareMin;\\n        uint16 traderPerformanceFeeShareMax;\\n        uint16 affiliateBuyFeeShare;\\n        uint16 affiliateTrailingFeeShare;\\n        uint16 affiliatePerformanceFeeShare;\\n        uint16 affiliateTraderFeeShare;\\n        uint16 affiliateLevel1RewardShare; // 0..10000. 6000 -> 60% of affiliate rewards go to level 1, 40% to level2\\n    }\\n\\n    struct MosaicPlatformFeeShares {\\n        uint8 executorShare;\\n        uint8 traderExecutorShare;\\n        uint8 userExecutorShare;\\n    }\\n\\n    struct MosaicUserFeeLevels {\\n        //slot1\\n        bool parentsCached;\\n        uint8 levels;\\n        uint16 conversionRatio;\\n        uint32 traderRevenueShareLevel; // 10 ** 9 = 100%\\n        uint32 userFeeDiscountLevel; // 10 ** 9 = 100%\\n        address parent;\\n        // slot2\\n        address parent2;\\n        uint32 lastTime;\\n        uint32 level1xTime;\\n        uint32 level2xTime;\\n        // slot3\\n        uint64 userFeeDiscountLevelxTime;\\n        uint32 claimLimit;\\n        uint64 claimLimitxTime;\\n\\n        //uint48 conversionRatioxTime;\\n    }\\n\\n    struct BuyFeeDistribution {\\n        uint userRebateAmount;\\n        uint traderAmount;\\n        uint affiliateAmount;\\n        // remaining is system fee\\n    }\\n\\n    struct TraderFeeDistribution {\\n        uint traderAmount;\\n        uint affiliateAmount;\\n        // remaining is system fee\\n    }\\n\\n    struct MosaicPoolFees {\\n        uint16 buyFee;\\n        uint16 trailingFee;\\n        uint16 performanceFee;\\n    }\\n\\n    struct PoolFeeStatus {\\n        uint256 claimableUserFeePerLp;\\n        uint256 claimableAffiliateL1FeePerLp;\\n        uint256 claimableAffiliateL2FeePerLp;\\n        uint128 claimableTotalFixedTraderFee;\\n        uint128 claimableTotalVariableTraderFee;\\n        uint128 feesContractSelfBalance;\\n    }\\n\\n    struct UserPoolFeeStatus {\\n        uint32 lastClaimTime;\\n        uint32 lastLevel1xTime;\\n        uint32 lastLevel2xTime;\\n        //uint48 lastConversionRatioxTime;\\n        uint64 lastUserFeeDiscountLevelxTime;\\n        uint128 userDirectlyClaimableFee;\\n       // uint128 userAffiliateClaimableFee;\\n        uint128 userClaimableFee;\\n        uint128 userClaimableL1Fee;\\n        uint128 userClaimableL2Fee;\\n        uint128 traderClaimableFee;\\n        // uint128 balance;\\n        uint128 l1Balance;\\n        uint128 l2Balance;\\n        uint256 lastClaimableUserFeePerLp;\\n        uint256 lastClaimableAffiliateL1FeePerLp;\\n        uint256 lastClaimableAffiliateL2FeePerLp;\\n    }\\n\\n    struct OnBeforeTransferPayload {\\n        uint128 feesContractBalanceBefore;\\n        uint128 trailingLpToMint;\\n        uint128 performanceLpToMint;\\n    }\\n\\n    /** HOOKS **/\\n    /** UserProfile **/\\n    function userRankChanged(address _user, uint8 _level) external;\\n\\n    /** Staking **/\\n    function userStakeChanged(address _user, uint256 _amount) external;\\n\\n    /** Pool **/\\n    function allocateBuyFee(address _pool, address _buyer, address _trader, uint _buyFeeAmount) external;\\n    function allocateTrailingFee(address _pool, address _trader, uint _feeAmount, uint _totalSupplyBefore, address _executor) external;\\n    function allocatePerformanceFee(address _pool, address _trader, uint _feeAmount, uint _totalSupplyBefore, address _executor) external;\\n    function onBeforeTransfer(address _pool, address _from, address _to, uint _fromBalanceBefore, uint _toBalanceBefore, uint256 _amount, uint256 _totalSupplyBefore, address _trader, OnBeforeTransferPayload memory payload) external;\\n    function getFeeRanges() external view returns (MosaicFeeRanges memory fees);\\n    function getFeeDistribution() external view returns (MosaicFeeDistribution memory fees);\\n    function getUserFeeLevels(address user) external view returns (MosaicUserFeeLevels memory userFeeLevels);\\n    function isValidFeeRanges(MosaicFeeRanges calldata ranges) external view returns (bool valid);\\n    function isValidFeeDistribution(MosaicFeeDistribution calldata distribution) external view returns (bool valid);\\n    function isValidPoolFees(MosaicPoolFees calldata poolFees) external view returns (bool valid);\\n    function isValidBuyFee(uint16 fee) external view returns (bool valid);\\n    function isValidTrailingFee(uint16 fee) external view returns (bool valid);\\n    function isValidPerformanceFee(uint16 fee) external view returns (bool valid);\\n\\n    function calculateBuyFeeDistribution(address user, address trader, uint feeAmount, uint16 buyFeeDiscount) external view returns (BuyFeeDistribution memory distribution);\\n    function calculateTraderFeeDistribution(uint amount) external view returns (TraderFeeDistribution memory distribution);\\n    function calculateTrailingFeeTraderDistribution(address trader, uint feeAmount) external view returns (uint amount);\\n    /** GETTERS **/\\n    // get the fee reduction percentage the user has achieved. 100% = 10 ** 9\\n    function getUserFeeDiscountLevel(address user) external view returns (uint32 level);\\n\\n    // get the fee reduction percentage the user has achieved. 100% = 10 ** 9\\n    function getTraderRevenueShareLevel(address user) external view returns (uint32 level);\\n\\n    event FeeRangesUpdated(MosaicFeeRanges newRanges, MosaicFeeRanges oldRanges);\\n    event FeeDistributionUpdated(MosaicFeeDistribution newRanges, MosaicFeeDistribution oldRanges);\\n    event PlatformFeeSharesUpdated(MosaicPlatformFeeShares newShares, MosaicPlatformFeeShares oldShares);\\n    event UserFeeLevelsChanged(address indexed user, MosaicUserFeeLevels newLevels);\\n    event PerformanceFeeAllocated(address pool, uint256 performanceExp);\\n    event TrailingFeeAllocated(address pool, uint256 trailingExp);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.17;\\n\\ninterface IGovernance {\\n    function propose_action(uint256 _id, address _trigger_address, bytes memory _calldata) external returns (uint256) ;\\n    function support_actions(uint256 _id) external returns (uint256) ;\\n    function trigger_action(uint256 _id) external returns (bytes memory) ;\\n    function transfer_proportion(address _address, uint256 _amount) external returns (uint256) ;\\n\\n    function read_core_Running() external view returns (bool);\\n    function read_core_govAddr() external view returns (address);\\n    function read_core_managers() external view returns (address[] memory);\\n    function read_core_owners() external view returns (address[] memory);\\n\\n    function read_config_core(string memory _name) external view returns (string memory);\\n    function read_config_emergencyStatus(string memory _name) external view returns (bool);\\n    function read_config_governAddress(string memory _name) external view returns (address);\\n    function read_config_Managers(string memory _name) external view returns (address [] memory);\\n\\n    function read_config_bool_slot(string memory _name) external view returns (bool[] memory);\\n    function read_config_address_slot(string memory _name) external view returns (address[] memory);\\n    function read_config_uint256_slot(string memory _name) external view returns (uint256[] memory);\\n    function read_config_bytes32_slot(string memory _name) external view returns (bytes32[] memory);\\n\\n    function read_invoteConfig_core(string memory _name) external view returns (string memory);\\n    function read_invoteConfig_name(string memory _name) external view returns (string memory);\\n    function read_invoteConfig_emergencyStatus(string memory _name) external view returns (bool);\\n    function read_invoteConfig_governAddress(string memory _name) external view returns (address);\\n    function read_invoteConfig_Managers(string memory _name) external view returns (address[] memory);\\n    function read_invoteConfig_boolslot(string memory _name) external view returns (bool[] memory);\\n    function read_invoteConfig_address_slot(string memory _name) external view returns (address[] memory);\\n    function read_invoteConfig_uint256_slot(string memory _name) external view returns (uint256[] memory);\\n    function read_invoteConfig_bytes32_slot(string memory _name) external view returns (bytes32[] memory);\\n\\n    function propose_config(string memory _name, bool _bool_val, address _address_val, address[] memory _address_list, uint256 _uint256_val, bytes32 _bytes32_val) external returns (uint256);\\n    function support_config_proposal(uint256 _confCount, string memory _name) external returns (string memory);\\n    function generator() external pure returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IGoverned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.17;\\n\\ninterface IGoverned {\\n    struct GovernanceState {\\n      bool running;\\n      address governanceAddress;\\n      address[] managers;\\n    }\\n\\n    function selfManageMe() external;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IFees.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPool {\\n    // Versioning\\n    function VERSION() external view returns (uint256 version);\\n\\n    // Ownable\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    function owner() external view returns (address);\\n    function creator() external view returns (address);\\n\\n    // Only Vault address should be allowed to call\\n    // hook for notifying the pool about the initial library being added\\n    function initialLiquidityProvided(address[] calldata _tokens, uint[] calldata _liquidity) external returns (uint lpTokens, uint dust);\\n\\n    // function to set managers\\n    function setManagers(address[] calldata _managers) external;\\n\\n    // ERC20 stuff\\n    // Pool name\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function getTrailingFeeAmount(IVault.TotalSupplyBase memory ts) external view returns (uint256);\\n    function updatePerfFeePricePerLp(IVault.TotalSupplyBase calldata ts, uint256 pricePerLp) external returns (uint128);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function safeTransfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function safeTransferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    event Minted(address indexed sender, uint liquidity, uint feeLiquidity);\\n    event Burned(address indexed sender, uint liquidity);\\n\\n    event WeightsChanged(address[] affectedTokens, uint32[] weights, uint32[] newWeights, uint weightChangeStart, uint weightChangeEnd);\\n\\n    event LockingChanged(bool locked);\\n\\n    // Callback from vault to raise ERC20 event\\n    function emitTransfer(address _from, address _to, uint256 _value) external;\\n\\n    // Custom stuff\\n    // Returns pool type:\\n    // 0: REBALANCING: (30% ETH, 30% BTC, 40% MKR). Weight changes gradually in time.\\n    // 1: NON_REBALANCING: (100 ETH, 5 BTC, 200 MKR). Weight changes gradually in time.\\n    // 2: DAYTRADE: Non rebalancing pool. Weight changes immediately.\\n    function poolType() external view returns (uint8 poolType);\\n\\n    function vaultAddress() external view returns (address vaultAddress);\\n\\n    function isUnlocked() external view returns (bool isUnlocked);\\n\\n    // Pool Id registered in the Vault\\n    function poolId() external view returns (uint32 poolId);\\n\\n    // Fees associated with the pool\\n    function getPoolFees() external view returns (IFees.MosaicPoolFees memory poolFees);\\n\\n    // Get pool token list\\n    function getTokens() external view returns (address[] memory _tokens);\\n\\n    // Add new token to the pool. Only pool admin can call\\n    function addToken(address _token) external returns (address[] memory _tokenList);\\n\\n    // Remove token from the pool. Anyone can call. Reverts if token weight is greater than 0\\n    function removeToken(uint _index) external returns (address[] memory _tokenList);\\n\\n    // Change buy fee. Only poo16 newBuyFee) external;\\n\\n    // Start a Dutch auction. Only pool admin can call\\n    function dutchAuction(address tokenToSell, uint amountToSell, address tokenToBuy, uint32 duration, uint32 expiration, uint endingPrice) external returns (uint auctionId);\\n\\n    // Mint function. Called by the Vault.\\n    function _mint(uint LPTokens, IVault.TotalSupplyBase calldata ts) external returns (uint[] memory requestedAmounts, uint FeeLPTokens, uint expansion);\\n\\n    // Burn function. Called by the Vault.\\n    function _burn(uint LPTokens, IVault.TotalSupplyBase calldata ts) external returns (uint[] memory amountsToBeReturned, uint expansion);\\n\\n    // Calculate the amount of each tokens to be sent in order to get LPTokensToMint amount of LP tokens\\n    function calcMintAmounts(uint LPTokensToMint) external view returns (uint[] memory amountsToSend, uint FeeLPTokens);\\n\\n    // Calculates the number of tokens to be received upon burning LP tokens\\n    function calcBurnAmounts(uint LPTokensToBurn) external view returns (uint[] memory amountsToGet);\\n\\n    // get amount out\\n    function getAmountOut(address tokenA, address tokenB, uint256 amountIn, uint16 swapFee) external view returns (uint256 amountOut);\\n\\n    // get amount in\\n    function getAmountIn(address tokenA, address tokenB, uint256 amountOut, uint16 swapFee) external view returns (uint256 amountIn);\\n\\n    // Calculates the maximum number of tokens that can be withdrawn from the pool by sending a specified amountIn, taking into account the current balances and weights.\\n    function queryExactTokensForTokens(address tokenIn, address tokenOut, uint balanceIn, uint balanceOut, uint amountIn, uint16 swapFee) external view returns (uint _amountOut, uint _fees);\\n\\n    // Calculates the minimum number of tokens required to be sent to the pool to withdraw a specified amountOut, based on the current balances and weights.\\n    function queryTokensForExactTokens(address tokenIn, address tokenOut,  uint balanceIn, uint balanceOut, uint amountOut, uint16 swapFee) external view returns (uint _amountIn, uint _fees);\\n\\n    // Returns the current weights\\n    function getWeights() external view returns (uint32[] memory _weights);\\n\\n    // Gradually changes the weights. Only pool admin can call\\n    function updateWeights(uint32 duration, uint32[] memory _newWeights) external;\\n\\n    // Update buy fee. Only pool admin can call\\n    function updateBuyFee(uint16 newFee) external;\\n\\n    // Returns reserves of each token stored in the Vault\\n    function getReserves() external view returns (uint256[] memory reserves);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/ISwaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface ISwaps {\\n\\n    // Get price from Pancakeswap\\n    function getPrice(address tokenToSell, uint amountToSell, address tokenToBuy) external view returns (uint);\\n\\n    // Returns the USDT amount to spend for a fix amount of LP tokens. Default routing: Token - USDT\\n    function quickQuoteMint(address _poolAddr, address usdAddr, uint LPTokensRequested) external view returns (uint usdtToSpend);\\n\\n    function quickQuoteBurn(address _poolAddr, address usdAddr, uint LPTokensToBurn) external view returns (uint usdtToReceive);\\n\\n    // Returns the USDT amount to spend for a fix amount of LP tokens. Requires routing.\\n    // If the pool has USDT token, simply provide an empty address[] for its routing\\n    // Example: KDX-USDT pool\\n    // _routing = [ [USDT_ADDRESS, KDX_ADDRESS], [] ]\\n    function quoteMint(address _poolAddr, address[][] memory _routing, uint LPTokensRequested) external view returns (uint usdtToSpend);\\n\\n    function quoteBurn(address _poolAddr, address[][] memory _routing, uint LPTokensToBurn) external view returns (uint usdtToReceive);\\n\\n    // Mint fixed amount of LP tokens from poolId pool. If usdtMaxSpend smaller than the requested amount, reverts\\n    function mint(address _poolAddr, address usdAddr, address[][] memory _routing, uint LPTokensRequested, uint usdMaxSpend, address referredBy, uint deadline) external returns (uint amountsSpent);\\n\\n    // Burn fixed amount of LP tokens from poolId pool. If usdMinReceive smaller than the requested amount, reverts\\n    function burn(address _poolAddr, address usdAddr, address[][] memory _routing, uint LPTokens, uint usdMinReceive, uint deadline) external returns (uint amountsReceived);\\n\\n    // Mint with default routing\\n    function quickMint(address _poolAddr, address usdAddr, uint LPTokensRequested, uint usdMaxSpend, address referredBy, uint deadline) external returns (uint amountsSpent);\\n\\n    // Burn with default routing\\n    function quickBurn(address _poolAddr, address usdAddr, uint LPTokens, uint usdMinReceive, uint deadline) external returns (uint amountReceived);\\n\\n    // Get a quote to swap on a given pool.\\n    // If givenInOrOut == 1 (i.e., the number of tokens to be sent to the Pool is specified),\\n    // it returns the amount of tokens taken from the Pool, and the fees to pay\\n    // If givenInOrOut == 0 parameter (i.e., the number of tokens to be taken from the Pool is specified),\\n    // it returns the amount of tokens sent to the Pool, and the fees to pay\\n    function swapQuote(address poolAddress, bool givenInOrOut, address tokenIn, address tokenOut, uint amount) external view returns (uint _amount, uint _fees);\\n\\n    function addTokens(address[] calldata _tokens) external;\\n    function removeTokens(address[] calldata _tokens) external;\\n\\n    event tokenAdded(address indexed token);\\n    event tokenRemoved(address indexed token);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IUserProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface IUserProfile {\\n\\n    struct UserProfile {                           /// Storage - We map the affiliated person to the affiliated_by person\\n        bool exists;\\n        uint8 rank;\\n        uint8 referredByRank;                       /// Rank of referrer at transaction time\\n        uint16 buyFeeDiscount;                            /// buy discount - 10000 = 100%\\n        uint32 referralCount;                          /// Number of referred by referee\\n        uint32 activeReferralCount;                    /// Number of active users referred by referee\\n        address referredBy;                            /// Address is referred by this user\\n        address referredByBefore;                     /// We store the 2nd step here to save gas (no interation needed)\\n    }\\n\\n    struct Parent {\\n        uint8 rank;\\n        address user;\\n    }\\n\\n    // returns the parent of the address\\n    function getParent(address _user) external view returns (address parent);\\n    // returns the parent and the parent of the parent of the address\\n    function getParents(address _user) external view returns (address parent, address parentOfParent);\\n\\n\\n    // returns user's parents and ranks of parents in 1 call\\n    function getParentsAndParentRanks(address _user) external view returns (Parent memory parent, Parent memory parent2);\\n    // returns user's parents and ranks of parents and use rbuy fee discount in 1 call\\n    function getParentsAndBuyFeeDiscount(address _user) external view returns (Parent memory parent, Parent memory parent2, uint16 discount);\\n    // returns number of referrals of address\\n    function getReferralCount(address _user) external view returns (uint32 count);\\n    // returns number of active referrals of address\\n    function getActiveReferralCount(address _user) external view returns (uint32 count);\\n\\n    // returns up to _count referrals of _user\\n    function getAllReferrals(address _user) external view returns (address[] memory referrals);\\n\\n    // returns up to _count referrals of _user starting from _index\\n    function getReferrals(address _user, uint256 _index, uint256 _count) external view returns (address[] memory referrals);\\n\\n    function getDefaultReferral() external view returns (address defaultReferral);\\n\\n    // get user information of _user\\n    function getUser(address _user) external view returns (UserProfile memory user);\\n\\n    function getUserRank(address _user) external view returns (uint8 rank);\\n\\n    // returns the total number of registered users\\n    function getUserCount() external view returns (uint256 count);\\n\\n    // return true if user exists\\n    function userExists(address _user) external view returns (bool exists);\\n\\n    function registerUser(address _user) external;\\n\\n    function increaseActiveReferralCount(address _user) external;\\n\\n    function registerUser(address _user, address _referredBy) external;\\n\\n    function registerUserWoBooster(address _user) external;\\n\\n    function setUserRank(address _user, uint8 _rank) external;\\n\\n    // function setDefaultReferral(address _referral) external;\\n\\n    // events\\n    event UserRegistered(address user, address referredBy, uint8 referredByRank, uint16 buyFeeDiscount);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IVault is IGoverned {\\n\\n    struct VaultState {\\n        bool userPoolTrackingDisabled;\\n        // bool paused;\\n        bool emergencyMode;\\n        bool whitelistingEnabled;\\n        bool flashEnabled;\\n        uint8 maxPoolTokenCount;\\n        uint8 feeToProtocol;\\n        uint8 bidMultiplier;\\n        uint16 flashFee;\\n        uint16 swapFee;\\n        uint16 bidMinDuration;\\n        uint16 rebalancingMinDuration;\\n        uint32 emergencyModeTimestamp;\\n        address feeTo;\\n    }\\n\\n    struct PoolState {\\n        bool poolInitialized;\\n        bool poolEmergencyMode;\\n        bool feeless;\\n        bool boosted;\\n        uint8 poolTokenCount;\\n        uint32 emergencyModeTime;\\n        uint48 lastTrailingTimestamp;\\n        uint48 lastPerformanceTimestamp;\\n        uint216 emergencyModeLPs;\\n        TotalSupplyBase totalSupplyBase;\\n    }\\n\\n    function getVaultState() external view returns (VaultState memory _vaultState);\\n\\n\\n    /************************************************************************************/\\n    /* Admin functions                                                                  */\\n    /************************************************************************************/\\n    // Check if given address is admin or not\\n    function isAdmin(address _address) external view returns (bool _isAdmin);\\n\\n    // Add or remove vault admin. Only admin can call this function\\n    function AddRemoveAdmin(address _address, bool _ShouldBeAdmin) external;// returns (address, bool);\\n\\n    // Boost or unboost pool. Boosted pools get 100% of their swap fees.\\n    // For non boosted pools, a part of the swap fees go to the platform.\\n    // Only admin can call this function\\n    function AddRemoveBoostedPool(address _address, bool _ShouldBeBoosted) external;// returns (address, bool);\\n\\n\\n    /************************************************************************************/\\n    /* Token whitelist                                                                  */\\n    /************************************************************************************/\\n\\n    // Only admin can call this function. Only the whitelisted tokens can be added to a Pool\\n    // If empty: No whitelist, all tokens are allowed\\n    function setWhitelistedTokens(address[] calldata _tokens, bool[] calldata _whitelisted) external;\\n\\n    function isTokenWhitelisted(address token) external view returns (bool whitelisted);\\n    event TokenWhitelistChanged(address indexed token, bool isWhitelisted);\\n\\n    /************************************************************************************/\\n    /* Internal Balances                                                                */\\n    /************************************************************************************/\\n\\n    // Users can deposit tokens into the Vault to have an internal balance in the Mosaic platform.\\n    // This internal balance can be used to deposit tokens into a Pool (Mint), withdraw tokens from\\n    // a Pool (Burn), or perform a swap. The internal balance can also be transferred or withdrawn.\\n\\n    // Get a specific user's internal balance for one given token\\n    function getInternalBalance(address user, address token) external view returns (uint balance);\\n\\n    // Get a specific user's internal balances for the given token array\\n    function getInternalBalances(address user, address[] memory tokens) external view returns (uint[] memory balances);\\n\\n    // Deposit tokens to the msg.sender's  internal balance\\n    function depositToInternalBalance(address token, uint amount) external;\\n\\n    // Deposit tokens to the recipient internal balance\\n    function depositToInternalBalanceToAddress(address token, address to, uint amount) external;\\n\\n    // ERC20 token transfer from the message sender's internal balance to their address\\n    function withdrawFromInternalBalance(address token, uint amount) external;\\n\\n    // ERC20 token transfer from the message sender's internal balance to the given address\\n    function withdrawFromInternalBalanceToAddress(address token, address to, uint amount) external;\\n\\n    // Transfer tokens from the message sender's internal balance to another user's internal balance\\n    function transferInternalBalance(address token, address to, uint amount) external;\\n\\n    // Event emitted when user's internal balance changes by delta amount. Positive delta means internal balance increase\\n    event InternalBalanceChanged(address indexed user, address indexed token, int256 delta);\\n\\n    /************************************************************************************/\\n    /* Pool ERC20 helper                                                                */\\n    /************************************************************************************/\\n\\n    function transferFromAsTokenContract(address from, address to, uint amount) external returns (bool success);\\n    function mintAsTokenContract(address to, uint amount) external returns (bool success);\\n    function burnAsTokenContract(address from, uint amount) external returns (bool success);\\n\\n    /************************************************************************************/\\n    /* Pool                                                                             */\\n    /************************************************************************************/\\n\\n    struct TotalSupplyBase {\\n        uint32 timestamp;\\n        uint224 amount;\\n    }\\n\\n    event TotalSupplyBaseChanged(address indexed poolAddr, TotalSupplyBase supplyBase);\\n    // Each pool should be one of the following based on poolType:\\n    // 0: REBALANCING: (30% ETH, 30% BTC, 40% MKR). Weight changes gradually in time.\\n    // 1: NON_REBALANCING: (100 ETH, 5 BTC, 200 MKR). Weight changes gradually in time.\\n    // 2: DAYTRADE: Non rebalancing pool. Weight changes immediately.\\n\\n    function tokenInPool(address pool, address token) external view returns (bool inPool);\\n\\n    function poolIdToAddress(uint32 poolId) external view returns (address poolAddr);\\n\\n    function poolAddressToId(address poolAddr) external view returns (uint32 poolId);\\n\\n    // pool calls this to move the pool to zerofee status\\n    function disableFees() external;\\n\\n    // Returns the total pool count\\n    function poolCount() external view returns (uint32 count);\\n\\n    // Returns a list of pool IDs where the user has assets\\n    function userJoinedPools(address user) external view returns (uint32[] memory poolIDs);\\n\\n    // Returns a list of pool the user owns\\n    function userOwnedPools(address user) external view returns (uint32[] memory poolIDs);\\n\\n    //Get pool tokens and their balances\\n    function getPoolTokens(uint32 poolId) external view returns (address[] memory tokens, uint[] memory balances);\\n\\n    function getPoolTokensByAddr(address poolAddr) external view returns (address[] memory tokens, uint[] memory balances);\\n\\n    function getPoolTotalSupplyBase(uint32 poolId) external view returns (TotalSupplyBase memory totalSupplyBase);\\n\\n    function getPoolTotalSupplyBaseByAddr(address poolAddr) external view returns (TotalSupplyBase memory totalSupplyBase);\\n\\n    // Register a new pool. Pool type can not be changed after the creation. Emits a PoolRegistered event.\\n    function registerPool(address _poolAddr, address _user, address _referredBy) external returns (uint32 poolId);\\n    event PoolRegistered(uint32 indexed poolId, address indexed poolAddress);\\n\\n    // Registers tokens for the Pool. Must be called by the Pool's contract. Emits a TokensRegistered event.\\n    function registerTokens(address[] memory _tokenList, bool onlyWhitelisted) external;\\n    event TokensRegistered(uint32 indexed poolId, address[] newTokens);\\n\\n    // Adds initial liquidity to the pool\\n    function addInitialLiquidity(uint32 _poolId, address[] memory _tokens, uint[] memory _liquidity, address tokensTo, bool fromInternalBalance) external;\\n    event InitialLiquidityAdded(uint32 indexed poolId, address user, uint lpTokens, address[] tokens, uint[] amounts);\\n\\n    // Deegisters tokens for the poolId Pool. Must be called by the Pool's contract.\\n    // Tokens to be deregistered should have 0 balance. Emits a TokensDeregistered event.\\n    function deregisterToken(address _tokenAddress, uint _remainingAmount) external;\\n    event TokensDeregistered(uint32 indexed poolId, address tokenAddress);\\n\\n    // This function is called when a liquidity provider adds liquidity to the pool.\\n    // It mints additional liquidity tokens as a reward.\\n    // If fromInternalBalance is true, the amounts will be deducted from user's internal balance\\n    function Mint(uint32 poolId, uint LPTokensRequested, uint[] memory amountsMax, address to, address referredBy, bool fromInternalBalance, uint deadline, uint usdValue) external returns (uint[] memory amountsSpent);\\n    event Minted(uint32 indexed poolId, address txFrom, address user, uint lpTokens, address[] tokens, uint[] amounts, bool fromInternalBalance);\\n\\n    // This function is called when a liquidity provider removes liquidity from the pool.\\n    // It burns the liquidity tokens and sends back the tokens as ERC20 transfer.\\n    // If toInternalBalance is true, the tokens will be deposited to user's internal balance\\n    function Burn(uint32 poolId, uint LPTokensToBurn, uint[] memory amountsMin, bool toInternalBalance, uint deadline, address from) external returns (uint[] memory amountsReceived);\\n    event Burned(uint32 indexed poolId, address txFrom, address user, uint lpTokens, address[] tokens, uint[] amounts, bool fromInternalBalance);\\n\\n    /************************************************************************************/\\n    /* Swap                                                                             */\\n    /************************************************************************************/\\n\\n    // Executes a swap operation on a single Pool. Called by the user\\n    // If the swap is initiated with givenInOrOut == 1 (i.e., the number of tokens to be sent to the Pool is specified),\\n    // it returns the amount of tokens taken from the Pool, which should not be less than limit.\\n    // If the swap is initiated with givenInOrOut == 0 parameter (i.e., the number of tokens to be taken from the Pool is specified),\\n    // it returns the amount of tokens sent to the Pool, which should not exceed limit.\\n    // Emits a Swap event\\n    function swap(address poolAddress, bool givenInOrOut, address tokenIn, address tokenOut, uint amount, bool fromInternalBalance, uint limit, uint64 deadline) external returns (uint calculatedAmount);\\n    event Swap(uint32 indexed poolId, address indexed tokenIn, address indexed tokenOut, uint amountIn, uint amountOut, address user);\\n\\n    // Execute a multi-hop token swap between multiple pairs of tokens on their corresponding pools\\n    // Example: 100 tokenA -> tokenB -> tokenC\\n    // pools = [pool1, pool2], tokens = [tokenA, tokenB, tokenC], amountIn = 100\\n    // The returned amount of tokenC should not be less than limit\\n    function multiSwap(address[] memory pools, address[] memory tokens, uint amountIn, bool fromInternalBalance, uint limit, uint64 deadline) external returns (uint calculatedAmount);\\n\\n    /************************************************************************************/\\n    /* Dutch Auction                                                                    */\\n    /************************************************************************************/\\n    // Non rebalancing pools (where poolId is not 0) can use Dutch auction to change their\\n    // balance sheet. A Dutch auction (also called a descending price auction) refers to a\\n    // type of auction in which an auctioneer starts with a very high price, incrementally\\n    // lowering the price. User can bid for the entire amount, or just a fraction of that.\\n\\n    struct AuctionInfo {\\n        address poolAddress;\\n        uint32 startsAt;\\n        uint32 duration;\\n        uint32 expiration;\\n        address tokenToSell;\\n        address tokenToBuy;\\n        uint startingAmount;\\n        uint remainingAmount;\\n        uint startingPrice;\\n        uint endingPrice;\\n    }\\n\\n    // Get total (lifetime) auction count\\n    function getAuctionCount() external view returns (uint256 auctionCount);\\n\\n    // Get all information of the given auction\\n    function getAuctionInfo(uint auctionId) external view returns (AuctionInfo memory);\\n\\n    // Returns 'true' if the auction is still running and there are tokens available for purchase\\n    // Returns 'false' if the auction has expired or if all tokens have been sold.\\n    function isRunning(uint auctionId) external view returns (bool);\\n\\n    // Called by pool owner. Emits an auctionStarted event\\n    function startAuction(address tokenToSell, uint amountToSell, address tokenToBuy, uint32 duration, uint32 expiration, uint endingPrice) external returns (uint auctionId);\\n    event AuctionStarted(uint32 poolId, uint auctionId, AuctionInfo _info);\\n\\n    // Called by pool owner. Emits an auctionStopped event\\n    function stopAuction(uint auctionId) external;\\n    event AuctionStopped(uint auctionId);\\n\\n    // Get the current price for 'remainingAmount' number of tokens\\n    function getBidPrice(uint auctionId) external view returns (uint currentPrice, uint remainingAmount);\\n\\n    // Place a bid for the specified 'auctionId'. Fractional bids are supported, with the 'amount'\\n    // representing the number of tokens to purchase. The amounts are deducted from and credited to the\\n    // user's internal balance. If there are insufficient tokens in the user's internal balance, the function reverts.\\n    // If there are fewer tokens available for the auction than the specified 'amount' and enableLessAmount == 1,\\n    // the function purchases all remaining tokens (which may be less than the specified amount).\\n    // If enableLessAmount is set to 0, the function reverts. Emits a 'newBid' event\\n    function bid(uint auctionId, uint amount, bool enableLessAmount, bool fromInternalBalance, uint deadline) external returns (uint spent);\\n    event NewBid(uint auctionId, address buyer, uint tokensBought, uint paid, address tokenToBuy, address tokenToSell, uint remainingAmount);\\n\\n    /************************************************************************************/\\n    /* Emergency                                                                        */\\n    /************************************************************************************/\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    // Only an admin can call this function.\\n    function setEmergencyMode() external;\\n\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    function setPoolEmergencyMode(address poolAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Vault/Swaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Swaps contract\\n * @author dlabs.hu\\n * @dev This contract is for handling pool purchase/sale exchanges from/for USDT\\n */\\n\\nimport \\\"../Interfaces/IVault.sol\\\";\\nimport \\\"../Interfaces/IPool.sol\\\";\\nimport \\\"../Interfaces/ISwaps.sol\\\";\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../helpers/pancake/interfaces/IPancakeRouter02.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../Governance/Governed.sol\\\";\\n\\ncontract Swaps is ISwaps, Governed {\\n    using SafeERC20 for IERC20;\\n\\n    address public pancakeRouterAddress;\\n    address public vaultAddress;\\n    address public usdtAddress;\\n    address[] public managers;\\n    mapping(address => bool) public tokens;\\n \\n    \\n    function _approveToken(address _token, uint _amount) internal {\\n        IERC20(_token).approve(vaultAddress, _amount);\\n        IERC20(_token).approve(pancakeRouterAddress, _amount);\\n    }\\n\\n    function addTokens(address[] calldata _tokens) external {\\n        for (uint i; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (!tokens[token]) {\\n                _approveToken(token, type(uint256).max);\\n                tokens[token] = true;\\n                emit tokenAdded(token);\\n            }\\n        }\\n    }\\n\\n    function removeTokens(address[] calldata _tokens) external {\\n        for (uint i; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (tokens[token]) {\\n                _approveToken(token, 0);\\n                tokens[token] = false;\\n                emit tokenRemoved(token);\\n            }\\n        }\\n    }\\n\\n    constructor(address _pancakeRouter, address _usdtAddress, address _vaultAddress, address _governAddress) {\\n        pancakeRouterAddress = _pancakeRouter;\\n        vaultAddress = _vaultAddress;\\n        usdtAddress = _usdtAddress;\\n        governanceState.governanceAddress = _governAddress;\\n    }\\n\\n    function _selfManageMeBefore() internal override {}\\n    function _selfManageMeAfter() internal override {}\\n    function _onBeforeEmergencyChange(bool nexRunning) internal override {}\\n\\n    function getPrice(address tokenToSell, uint amountToSell, address tokenToBuy) external view returns (uint) {\\n        address[] memory path = new address[](2);\\n        path[0] = tokenToSell;\\n        path[1] = tokenToBuy;\\n        return IPancakeRouter02(pancakeRouterAddress).getAmountsOut(amountToSell, path)[1];\\n    }\\n\\n    // Pancakeswap quick quote. Token - USDT pair\\n    function quickQuoteMint(address _poolAddr, address usdAddr, uint LPTokensRequested) external view returns (uint usdToSpend) {\\n        (uint[] memory _requestedAmounts,) = IPool(_poolAddr).calcMintAmounts(LPTokensRequested);\\n        address[] memory _tokens = IPool(_poolAddr).getTokens();\\n        uint _usdNeeded;\\n\\n        for (uint i = 0; i < _requestedAmounts.length; i++) {\\n            address[] memory path = new address[](2);\\n            path[0] = usdAddr;\\n            if (_tokens[i] != usdAddr) {\\n                path[1] = _tokens[i];\\n                _usdNeeded += IPancakeRouter02(pancakeRouterAddress).getAmountsIn(_requestedAmounts[i], path)[0];\\n            }\\n            else {\\n                // If token is USDT\\n                _usdNeeded += _requestedAmounts[i];\\n            }\\n        }\\n        return _usdNeeded;\\n    }\\n\\n    // Pancakeswap quick quote. Token - USDT pair\\n    function quickQuoteBurn(address _poolAddr, address usdAddr, uint LPTokensToBurn) external view returns (uint usdToReceive) {\\n        uint[] memory _amounts = IPool(_poolAddr).calcBurnAmounts(LPTokensToBurn);\\n        address[] memory _tokens = IPool(_poolAddr).getTokens();\\n\\n        for (uint i = 0; i < _amounts.length; i++) {\\n            address[] memory path = new address[](2);\\n            path[1] = usdAddr;\\n            if (_tokens[i] != usdAddr) {\\n                path[0] = _tokens[i];\\n                usdToReceive += IPancakeRouter02(pancakeRouterAddress).getAmountsOut(_amounts[i], path)[1];\\n            }\\n            else {\\n                // If token is USDT\\n                usdToReceive += _amounts[i];\\n            }\\n        }\\n        return usdToReceive;\\n    }\\n\\n    function quoteMint(address _poolAddr, address[][] memory _routing, uint LPTokensRequested) external view returns (uint usdToSpend) {\\n        (uint[] memory _requestedAmounts,) = IPool(_poolAddr).calcMintAmounts(LPTokensRequested);\\n        uint _usdNeeded;\\n\\n        for (uint i = 0; i < _requestedAmounts.length; i++) {\\n            if (_routing[i].length > 1) {\\n                // If length of the routing is greater than 1: Do the swap\\n                _usdNeeded += IPancakeRouter02(pancakeRouterAddress).getAmountsIn(_requestedAmounts[i], _routing[i])[0];\\n            }\\n            else {\\n                // If length of the routing is not greater than 1: No swap needed\\n                _usdNeeded += _requestedAmounts[i];\\n            }\\n        }\\n        return _usdNeeded;\\n    }\\n\\n    function quoteBurn(address _poolAddr, address[][] memory _routing, uint LPTokensToBurn) external view returns (uint usdToReceive) {\\n        uint[] memory _amounts = IPool(_poolAddr).calcBurnAmounts(LPTokensToBurn);\\n        uint _usdReceived;\\n\\n        for (uint i = 0; i < _amounts.length; i++) {\\n            if (_routing[i].length > 1) {\\n                // If length of the routing is greater than 1: Do the swap\\n                _usdReceived += IPancakeRouter02(pancakeRouterAddress).getAmountsOut(_amounts[i], _routing[i])[_routing[i].length - 1];\\n            } else {\\n                // If length of the routing is not greater than 1: No swap needed\\n                _usdReceived += _amounts[i];\\n            }\\n        }\\n        return _usdReceived;\\n    }\\n\\n    // IMPORTANT: Before calling this function, user needs to set allowance for at least usdtMaxSpend amount of USDT\\n    function mint(address _poolAddr, address usdAddr, address[][] memory _routing, uint lpTokensRequested, uint usdMaxSpend, address referredBy, uint deadline/*, bool fromInternalBalance*/) external Live returns (uint amountsSpent) {\\n        require(lpTokensRequested > 0, \\\"TRYING TO MINT 0\\\");\\n        (uint[] memory _requestedAmounts,) = IPool(_poolAddr).calcMintAmounts(lpTokensRequested);\\n        require(_routing.length == _requestedAmounts.length, \\\"assset count mismatch\\\");\\n\\n        // Before swapping, the Swap smart contract needs to be in control of the required USDT\\n        require(IERC20(usdAddr).transferFrom(msg.sender, address(this), usdMaxSpend), 'transferFrom failed.');\\n\\n        for (uint i = 0; i < _requestedAmounts.length; i++) {\\n            if (_routing[i].length > 1) {\\n                // If length of the routing is greater than 1: Do the swap\\n                address[] memory path = _routing[i];\\n                require(path[0] == usdAddr, \\\"Invalid path in routing\\\");\\n                uint lastIndex = _routing[i].length - 1;\\n                // Contract has the required token, deposit to Vault internal balance\\n                address token = _routing[i][lastIndex];\\n                uint amountOut = _requestedAmounts[i];\\n                if (amountOut > 0) {\\n                    if (path[0] != token) {\\n                        uint amountInMax = IPancakeRouter02(pancakeRouterAddress).getAmountsIn(amountOut, path)[0];\\n                        address to = address(this);\\n                        IPancakeRouter02(pancakeRouterAddress).swapTokensForExactTokens(amountOut, amountInMax, path, to, deadline);\\n                    }\\n                    IVault(vaultAddress).depositToInternalBalance(token, amountOut);\\n                }\\n            }\\n            else if (_requestedAmounts[i] > 0) {\\n                // If length of the routing is not greater than 1: No swap needed\\n                IVault(vaultAddress).depositToInternalBalance(usdAddr, _requestedAmounts[i]);\\n\\n            }\\n        }\\n        // Now all tokens are at the Swap contract's internal balance. Let's mint!\\n        // LP tokens are credited towards the user (msg.sender)\\n        uint32 poolId = IPool(_poolAddr).poolId();\\n        uint remainingUSDT = IERC20(usdAddr).balanceOf(address(this));\\n\\n        IVault(vaultAddress).Mint(poolId, lpTokensRequested, _requestedAmounts, msg.sender, referredBy, true, deadline, (usdAddr == usdtAddress) ? (usdMaxSpend - remainingUSDT) : 0);\\n        // return excess USDT to user\\n\\n        IERC20(usdAddr).safeTransfer(msg.sender, remainingUSDT);\\n\\n        return usdMaxSpend - remainingUSDT;\\n    }\\n\\n    function burn(address _poolAddr, address usdAddr, address[][] memory _routing, uint lpTokensToBurn, uint usdMinReceive, uint deadline/*, bool fromInternalBalance*/) external Live returns (uint amountsReceived) {\\n        require(lpTokensToBurn > 0, \\\"TRYING TO BURN 0\\\");\\n        require(IERC20(_poolAddr).transferFrom(msg.sender, address(this), lpTokensToBurn), 'transferFrom failed.');\\n        uint[] memory _amountsToGet = IPool(_poolAddr).calcBurnAmounts(lpTokensToBurn);\\n        require(_routing.length == _amountsToGet.length, \\\"assset count mismatch\\\");\\n\\n        uint32 poolId = IPool(_poolAddr).poolId();\\n        uint[] memory amountsToReceive = IVault(vaultAddress).Burn(poolId, lpTokensToBurn, _amountsToGet, false, deadline, msg.sender);\\n        address[] memory path;\\n\\n        for (uint i = 0; i < amountsToReceive.length; i++) {\\n            uint amountIn = amountsToReceive[i];\\n            if (amountIn > 0) {\\n                path = _routing[i];\\n                require(path[path.length - 1] == usdAddr, \\\"Invalid path in routing\\\");\\n                if (path[0] != usdAddr) {\\n\\n                    uint amountOutMin = IPancakeRouter02(pancakeRouterAddress).getAmountsOut(amountsToReceive[i], path)[path.length - 1];\\n                    IPancakeRouter02(pancakeRouterAddress).swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), deadline);\\n                }\\n            }\\n        }\\n\\n        uint transferUSD = IERC20(usdAddr).balanceOf(address(this));\\n        require(transferUSD >= usdMinReceive, \\\"MAX SLIPPAGE EXCEEDED\\\");\\n        require(IERC20(usdAddr).transfer(msg.sender, transferUSD), \\\"transfer failed.\\\");\\n\\n        return transferUSD;\\n    }\\n\\n    function quickMint(address _poolAddr, address usdAddr, uint lpTokensRequested, uint usdMaxSpend, address referredBy, uint deadline) external Live returns (uint amountsSpent) {\\n        require(lpTokensRequested > 0, \\\"TRYING TO MINT 0\\\");\\n        (uint[] memory _requestedAmounts,) = IPool(_poolAddr).calcMintAmounts(lpTokensRequested);\\n        address[] memory _tokens = IPool(_poolAddr).getTokens();\\n        require(IERC20(usdAddr).transferFrom(msg.sender, address(this), usdMaxSpend), \\\"transferFrom failed.\\\");\\n   \\n        address swapAddr = address(this);\\n        address[] memory path = new address[](2);\\n        path[0] = usdAddr;\\n\\n        for (uint i = 0; i < _requestedAmounts.length; i++) {\\n            uint amountOut = _requestedAmounts[i];\\n            if (amountOut > 0) {\\n                if (_tokens[i] != usdAddr) {\\n                    path[1] = _tokens[i];\\n                    uint amountInMax = IPancakeRouter02(pancakeRouterAddress).getAmountsIn(_requestedAmounts[i], path)[0];\\n                    require(amountInMax <= IERC20(usdAddr).balanceOf(address(this)), \\\"MAX SLIPPAGE EXCEEDED\\\");\\n                    IPancakeRouter02(pancakeRouterAddress).swapTokensForExactTokens(amountOut, amountInMax, path, swapAddr, deadline);\\n                }\\n                IVault(vaultAddress).depositToInternalBalance(_tokens[i], amountOut);\\n            }\\n        }\\n\\n        uint32 poolId = IPool(_poolAddr).poolId();\\n        uint remainingUSD = IERC20(usdAddr).balanceOf(address(this));\\n\\n        IVault(vaultAddress).Mint(poolId, lpTokensRequested, _requestedAmounts, msg.sender, referredBy, true, deadline, (usdAddr == usdtAddress) ? (usdMaxSpend - remainingUSD) : 0);\\n\\n        IERC20(usdAddr).safeTransfer(msg.sender, remainingUSD);\\n\\n        return usdMaxSpend - remainingUSD;\\n    }\\n\\n    function quickBurn(address _poolAddr, address usdAddr, uint lpTokensToBurn, uint usdMinReceive, uint deadline) external Live returns (uint amountReceived)\\n    {\\n        require(lpTokensToBurn > 0, \\\"TRYING TO BURN 0\\\");\\n        require(IERC20(_poolAddr).transferFrom(msg.sender, address(this), lpTokensToBurn), 'transferFrom failed.');\\n        uint[] memory _amountsToGet = IPool(_poolAddr).calcBurnAmounts(lpTokensToBurn);\\n        address[] memory _tokens = IPool(_poolAddr).getTokens();\\n        address[] memory path = new address[](2);\\n        path[1] = usdAddr;\\n        uint32 poolId = IPool(_poolAddr).poolId();\\n        uint[] memory amountsToReceive = IVault(vaultAddress).Burn(poolId, lpTokensToBurn, _amountsToGet, false, deadline, msg.sender);\\n        for (uint i = 0; i < amountsToReceive.length; i++) {\\n            uint amountIn = amountsToReceive[i];\\n            if (amountIn > 0 && _tokens[i] != usdAddr) {\\n                path[0] = _tokens[i];\\n                uint amountOutMin = IPancakeRouter02(pancakeRouterAddress).getAmountsOut(amountsToReceive[i], path)[1];\\n                IPancakeRouter02(pancakeRouterAddress).swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), deadline);\\n            }\\n        }\\n        uint transferUSD = IERC20(usdAddr).balanceOf(address(this));\\n        require(transferUSD >= usdMinReceive, \\\"MAX SLIPPAGE EXCEEDED\\\");\\n        require(IERC20(usdAddr).transfer(msg.sender, transferUSD), \\\"transfer failed.\\\");\\n\\n        return transferUSD;\\n    }\\n\\n    // Get a quote to swap on a given pool.\\n    // If givenInOrOut == 1 (i.e., the number of tokens to be sent to the Pool is specified),\\n    // it returns the amount of tokens taken from the Pool, and the fees to pay\\n    // If givenInOrOut == 0 parameter (i.e., the number of tokens to be taken from the Pool is specified),\\n    // it returns the amount of tokens sent to the Pool, and the fees to pay\\n    function swapQuote(address poolAddress, bool givenInOrOut, address tokenIn, address tokenOut, uint amount) external view returns (uint _amount, uint _fees) {\\n\\n        uint balanceIn = IVault(vaultAddress).getInternalBalance(poolAddress, tokenIn);\\n        uint balanceOut = IVault(vaultAddress).getInternalBalance(poolAddress, tokenOut);\\n        uint16 swapFee = IVault(vaultAddress).getVaultState().swapFee;\\n\\n        if (givenInOrOut) {\\n           return IPool(poolAddress).queryExactTokensForTokens(tokenIn, tokenOut, balanceIn, balanceOut, amount, swapFee);\\n        }\\n        else {\\n           return IPool(poolAddress).queryTokensForExactTokens(tokenIn, tokenOut, balanceIn, balanceOut, amount, swapFee);\\n        }\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Governed__EmergencyStopped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Governed__NotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Governed__NotStopped\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdAddr\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"_routing\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdMinReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountsReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernanceState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"running\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"}],\"internalType\":\"struct IGoverned.GovernanceState\",\"name\":\"govState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenToBuy\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdAddr\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"_routing\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdMaxSpend\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountsSpent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdMinReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"quickBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdMaxSpend\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"quickMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountsSpent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LPTokensToBurn\",\"type\":\"uint256\"}],\"name\":\"quickQuoteBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdToReceive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LPTokensRequested\",\"type\":\"uint256\"}],\"name\":\"quickQuoteMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdToSpend\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"_routing\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"LPTokensToBurn\",\"type\":\"uint256\"}],\"name\":\"quoteBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdToReceive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddr\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"_routing\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"LPTokensRequested\",\"type\":\"uint256\"}],\"name\":\"quoteMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdToSpend\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfManageMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"givenInOrOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Swaps", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000001cb6cd466f228ee3fa2daa7b8a1d7b43d275e92f000000000000000000000000cdf8a94da58bdadf73f2f1f7f07447f318f0850c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}