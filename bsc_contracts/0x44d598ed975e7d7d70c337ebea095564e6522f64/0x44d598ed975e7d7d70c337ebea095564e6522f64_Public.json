{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returnData,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returnData.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returnData_size := mload(returnData)\\r\\n                    revert(add(32, returnData), returnData_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IDSC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IDSC is IERC20 {\\r\\n    function selectUpNodes(address from) external view returns (address[] memory nodes);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity \\u003e=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @title Multicall interface\\r\\n/// @notice Enables calling multiple methods in a single call to the contract\\r\\ninterface IMulticall {\\r\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\r\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\r\\n    /// @param data The encoded function data for each of the calls to make to this contract\\r\\n    /// @return results The results from each of the calls passed in via data\\r\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\r\\n}\\r\\n\"},\"IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\n/// @title Immutable state\\r\\n/// @notice Functions that return immutable state of the router\\r\\ninterface IPeripheryImmutableState {\\r\\n    /// @return Returns the address of the Uniswap V3 factory\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /// @return Returns the address of WETH9\\r\\n    function WETH9() external view returns (address);\\r\\n}\\r\\n\"},\"IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity \\u003e=0.7.5;\\r\\n\\r\\n/// @title Periphery Payments\\r\\n/// @notice Functions to ease deposits and withdrawals of ETH\\r\\ninterface IPeripheryPayments {\\r\\n    /// @notice Unwraps the contract\\u0027s WETH9 balance and sends it to recipient as ETH.\\r\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\r\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\r\\n    /// @param recipient The address receiving ETH\\r\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\r\\n\\r\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\r\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\r\\n    /// that use ether for the input amount\\r\\n    function refundETH() external payable;\\r\\n\\r\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\r\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\r\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\r\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\r\\n    /// @param recipient The destination address of the token\\r\\n    function sweepToken(\\r\\n        address token,\\r\\n        uint256 amountMinimum,\\r\\n        address recipient\\r\\n    ) external payable;\\r\\n}\\r\\n\"},\"IPeripheryPaymentsWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity \\u003e=0.7.5;\\r\\n\\r\\nimport \\u0027./IPeripheryPayments.sol\\u0027;\\r\\n\\r\\n/// @title Periphery Payments\\r\\n/// @notice Functions to ease deposits and withdrawals of ETH\\r\\ninterface IPeripheryPaymentsWithFee is IPeripheryPayments {\\r\\n    /// @notice Unwraps the contract\\u0027s WETH9 balance and sends it to recipient as ETH, with a percentage between\\r\\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\\r\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\r\\n    function unwrapWETH9WithFee(\\r\\n        uint256 amountMinimum,\\r\\n        address recipient,\\r\\n        uint256 feeBips,\\r\\n        address feeRecipient\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\\r\\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\\r\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\r\\n    function sweepTokenWithFee(\\r\\n        address token,\\r\\n        uint256 amountMinimum,\\r\\n        address recipient,\\r\\n        uint256 feeBips,\\r\\n        address feeRecipient\\r\\n    ) external payable;\\r\\n}\\r\\n\"},\"IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity \\u003e=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @title Quoter Interface\\r\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\r\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\r\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\r\\ninterface IQuoter {\\r\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\r\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\r\\n    /// @param amountIn The amount of the first token to swap\\r\\n    /// @return amountOut The amount of the last token that would be received\\r\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\r\\n    /// @param tokenIn The token being swapped in\\r\\n    /// @param tokenOut The token being swapped out\\r\\n    /// @param fee The fee of the token pool to consider for the pair\\r\\n    /// @param amountIn The desired input amount\\r\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\r\\n    /// @return amountOut The amount of `tokenOut` that would be received\\r\\n    function quoteExactInputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountIn,\\r\\n        uint160 sqrtPriceLimitX96\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\r\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\r\\n    /// @param amountOut The amount of the last token to receive\\r\\n    /// @return amountIn The amount of first token required to be paid\\r\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\r\\n\\r\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\r\\n    /// @param tokenIn The token being swapped in\\r\\n    /// @param tokenOut The token being swapped out\\r\\n    /// @param fee The fee of the token pool to consider for the pair\\r\\n    /// @param amountOut The desired output amount\\r\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\r\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\r\\n    function quoteExactOutputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 fee,\\r\\n        uint256 amountOut,\\r\\n        uint160 sqrtPriceLimitX96\\r\\n    ) external returns (uint256 amountIn);\\r\\n}\\r\\n\"},\"IQuoterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity \\u003e=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @title QuoterV2 Interface\\r\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\\r\\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\\r\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\r\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\r\\ninterface IQuoterV2 {\\r\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\r\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\r\\n    /// @param amountIn The amount of the first token to swap\\r\\n    /// @return amountOut The amount of the last token that would be received\\r\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\r\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\r\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\r\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountOut,\\r\\n            uint160[] memory sqrtPriceX96AfterList,\\r\\n            uint32[] memory initializedTicksCrossedList,\\r\\n            uint256 gasEstimate\\r\\n        );\\r\\n\\r\\n    struct QuoteExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amountIn;\\r\\n        uint24 fee;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\r\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\r\\n    /// tokenIn The token being swapped in\\r\\n    /// tokenOut The token being swapped out\\r\\n    /// fee The fee of the token pool to consider for the pair\\r\\n    /// amountIn The desired input amount\\r\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\r\\n    /// @return amountOut The amount of `tokenOut` that would be received\\r\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\r\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\r\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\r\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountOut,\\r\\n            uint160 sqrtPriceX96After,\\r\\n            uint32 initializedTicksCrossed,\\r\\n            uint256 gasEstimate\\r\\n        );\\r\\n\\r\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\r\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\r\\n    /// @param amountOut The amount of the last token to receive\\r\\n    /// @return amountIn The amount of first token required to be paid\\r\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\r\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\r\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\r\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountIn,\\r\\n            uint160[] memory sqrtPriceX96AfterList,\\r\\n            uint32[] memory initializedTicksCrossedList,\\r\\n            uint256 gasEstimate\\r\\n        );\\r\\n\\r\\n    struct QuoteExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint256 amount;\\r\\n        uint24 fee;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\r\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\r\\n    /// tokenIn The token being swapped in\\r\\n    /// tokenOut The token being swapped out\\r\\n    /// fee The fee of the token pool to consider for the pair\\r\\n    /// amountOut The desired output amount\\r\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\r\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\r\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\r\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\r\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\r\\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountIn,\\r\\n            uint160 sqrtPriceX96After,\\r\\n            uint32 initializedTicksCrossed,\\r\\n            uint256 gasEstimate\\r\\n        );\\r\\n}\\r\\n\"},\"ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity \\u003e=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\r\\nimport \\\"./IMulticall.sol\\\";\\r\\nimport \\\"./IPeripheryPaymentsWithFee.sol\\\";\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via PancakeSwap V3\\r\\ninterface ISwapRouter is IUniswapV3SwapCallback, IMulticall, IPeripheryPaymentsWithFee {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\"},\"IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\"},\"IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\n/// @title Callback for IPancakeV3PoolActions#swap\\r\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\r\\ninterface IUniswapV3SwapCallback {\\r\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\r\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\r\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\r\\n    function pancakeV3SwapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Ownable {\\r\\n    mapping(address =\\u003e bool) public owners;\\r\\n    mapping(address =\\u003e uint) public applyCancelTimes;\\r\\n    constructor() {\\r\\n        owners[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owners[msg.sender], \\\"O1\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function applySetOwner(address owner) public onlyOwner {\\r\\n        require(owners[owner], \\u0027No need apply\\u0027);\\r\\n        applyCancelTimes[owner] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function cancelSetOwner(address owner) external onlyOwner {\\r\\n        require(owners[owner], \\u0027No need cancel\\u0027);\\r\\n        applyCancelTimes[owner] = 0;\\r\\n    }\\r\\n\\r\\n    function setOwner(address owner, bool flag) public onlyOwner {\\r\\n        if (!flag) { // \u5982\u679c\u662f\u64a4\u9500\u7ba1\u7406\u5458\uff0c\u9700\u8981\u5ef6\u8fdf10\u5929\u751f\u6548\\r\\n            require(applyCancelTimes[owner] != 0 \\u0026\\u0026 block.timestamp \\u003e applyCancelTimes[owner] + 10 days,\\r\\n                \\\"Not ready for change receiver\\\");\\r\\n            applyCancelTimes[owner] == 0;\\r\\n        }\\r\\n        owners[owner] = flag;\\r\\n    }\\r\\n}\"},\"Public2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IDSC.sol\\\";\\r\\nimport \\\"./IUniswapV2Router.sol\\\";\\r\\nimport \\\"./ISwapRouter.sol\\\";\\r\\nimport \\\"./IQuoterV2.sol\\\";\\r\\nimport \\\"./IPeripheryImmutableState.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\n\\r\\ncontract Public is Ownable {\\r\\n    using SafeMath for uint;\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n    using Address for address;\\r\\n\\r\\n    struct Lock {\\r\\n        uint256 openDay;\\r\\n        uint256 totalAmount;\\r\\n        uint256 releasedAmount;\\r\\n    }\\r\\n\\r\\n    // ERC20 basic token contract being held\\r\\n    IERC20Metadata public dsc;\\r\\n\\r\\n    IERC20Metadata public usd;\\r\\n\\r\\n    IUniswapV2Router public routerV2 = IUniswapV2Router(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    IQuoterV2 public quoterV2 = IQuoterV2(0xB048Bbc1Ee6b733FFfCFb9e9CeF7375518e25997);\\r\\n    ISwapRouter public routerV3 = ISwapRouter(0x1b81D678ffb9C0263b24A97847620C99d213eB14);\\r\\n\\r\\n    uint24[] public v3Fees = [100, 500];\\r\\n\\r\\n    address public sellPayer;\\r\\n\\r\\n    address public rewardPayer;\\r\\n\\r\\n    address public receiver;\\r\\n\\r\\n    uint256 public sellPrice;\\r\\n\\r\\n    uint256 public immutable priceBase;\\r\\n\\r\\n    uint256 public rewardRank1;\\r\\n\\r\\n    uint256 public rewardRank2;\\r\\n\\r\\n    uint256 public rewardRank3;\\r\\n\\r\\n    uint256 public usdRewardPercent1 = 30;\\r\\n\\r\\n    uint256 public usdRewardPercent2 = 50;\\r\\n\\r\\n    uint256 public usdRewardPercent3 = 80;\\r\\n\\r\\n    uint256 public usdRewardPercent4 = 100;\\r\\n\\r\\n    uint256 public upNodeUSDRewardPercent = 10;\\r\\n\\r\\n    uint256 public dscRewardPercent1 = 30;\\r\\n\\r\\n    uint256 public dscRewardPercent2 = 50;\\r\\n\\r\\n    uint256 public dscRewardPercent3 = 80;\\r\\n\\r\\n    uint256 public dscRewardPercent4 = 100;\\r\\n\\r\\n    uint256 public upNodeDSCRewardPercent = 10;\\r\\n\\r\\n    uint256 public slipThreshold = 300;\\r\\n\\r\\n    uint256 public minUSDCost;\\r\\n\\r\\n    uint256 public minDSCHold;\\r\\n\\r\\n    uint256 public applyChangeTime;\\r\\n\\r\\n    uint256 public immutable directBuyReleasePercent = 50;\\r\\n\\r\\n    uint256 public immutable firstBuyReleasePercent = 50;\\r\\n\\r\\n    uint256 public immutable lineBuyReleasePercent = 30;\\r\\n\\r\\n    uint256 public immutable lineRewardReleasePercent = 84;\\r\\n\\r\\n    uint256 public immutable firstInterval = 30 days;\\r\\n\\r\\n    uint256 public immutable releaseInterval = 30 days;\\r\\n\\r\\n    uint256 public immutable padInterval = 24 hours;\\r\\n\\r\\n    address[] public allUsers;\\r\\n\\r\\n    mapping (address =\\u003e mapping(uint256 =\\u003e Lock)) public buyLocks;\\r\\n    mapping (address =\\u003e uint256) public buyIndexStart;\\r\\n    mapping (address =\\u003e uint256) public buyIndexEnd;\\r\\n\\r\\n    mapping (address =\\u003e uint) public buyTotal;\\r\\n\\r\\n    mapping (address =\\u003e mapping(uint256 =\\u003e Lock)) public rewardLocks;\\r\\n    mapping (address =\\u003e uint256) public rewardIndexStart;\\r\\n    mapping (address =\\u003e uint256) public rewardIndexEnd;\\r\\n    address payable old;\\r\\n\\r\\n    uint8 usdDecimals;\\r\\n    uint8 dscDecimals;\\r\\n\\r\\n    constructor(\\r\\n        address _admin,\\r\\n        address _dsc,\\r\\n        address _usd,\\r\\n        address _sellPayer,\\r\\n        address _rewardPayer,\\r\\n        address _receiver,\\r\\n        address payable _old) {\\r\\n        setOwner(_admin, true);\\r\\n        dsc = IERC20Metadata(_dsc);\\r\\n        usd = IERC20Metadata(_usd);\\r\\n        uint8 _dscDecimals = IERC20Metadata(_dsc).decimals();\\r\\n        priceBase = 10 ** _dscDecimals;\\r\\n        sellPayer = _sellPayer;\\r\\n        rewardPayer = _rewardPayer;\\r\\n        receiver = _receiver;\\r\\n        uint8 _usdDecimals = IERC20Metadata(_usd).decimals();\\r\\n        sellPrice = (2 * 10 ** _usdDecimals) / 100; // 0.02u\\r\\n        rewardRank1 = 10000 * 10 ** _usdDecimals; // 10000u\\r\\n        rewardRank2 = 30000 * 10 ** _usdDecimals; // 30000u\\r\\n        rewardRank3 = 100000 * 10 ** _usdDecimals; // 100000u\\r\\n        minUSDCost = 1000 * 10 ** _usdDecimals; // 1000u\\r\\n        minDSCHold = 1000 * 10 ** _dscDecimals; // 1000dsc\\r\\n        old = _old;\\r\\n        usdDecimals = _usdDecimals;\\r\\n        dscDecimals = _dscDecimals;\\r\\n    }\\r\\n\\r\\n    function migrate(uint start, uint end, bool finish) external onlyOwner {\\r\\n        require(old != address(0), \\u0027Migrate already\\u0027);\\r\\n        Public oldPublic = Public(old);\\r\\n        for (uint i=start; i\\u003c=end; i++) {\\r\\n            if (i == end) {\\r\\n                if (finish) old = payable(address(0));\\r\\n                break;\\r\\n            }\\r\\n            address user = oldPublic.allUsers(i);\\r\\n            allUsers.push(user);\\r\\n\\r\\n            (int indexStart, int indexEnd) = (-1, -1);\\r\\n            uint firstOpenDay = block.timestamp;\\r\\n            for (uint k=0; k\\u003c30; k++) {\\r\\n                (uint256 openDay, uint256 totalAmount, uint256 releasedAmount) = oldPublic.buyLocks(user, k);\\r\\n                if (openDay != 0 \\u0026\\u0026 indexStart == -1) indexStart = int(k);\\r\\n                if (openDay == 0 \\u0026\\u0026 indexStart != -1) {\\r\\n                    indexEnd = int(k);\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                if (openDay != 0) {\\r\\n                    if (firstOpenDay == 0) firstOpenDay = openDay;\\r\\n                    buyLocks[user][k] = Lock(openDay, totalAmount, releasedAmount);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (indexStart \\u003c indexEnd \\u0026\\u0026 indexStart \\u003e= 0) {\\r\\n                buyIndexStart[user] = uint(indexStart);\\r\\n                buyIndexEnd[user] = uint(indexEnd);\\r\\n            }\\r\\n\\r\\n            rewardIndexStart[user] = oldPublic.rewardIndexStart(user);\\r\\n            rewardIndexEnd[user] = oldPublic.rewardIndexEnd(user);\\r\\n            for (uint k = rewardIndexStart[user]; k \\u003c rewardIndexEnd[user]; k++) {\\r\\n                (, uint256 totalAmount, uint256 releasedAmount) = oldPublic.rewardLocks(user, k);\\r\\n                rewardLocks[user][k] = Lock(firstOpenDay+k, totalAmount, releasedAmount);\\r\\n            }\\r\\n\\r\\n            buyTotal[user] = oldPublic.buyTotal(user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRouter(address _routerV2, address _routerV3, address _quoterV2, uint24[] memory _v3Fees) public onlyOwner {\\r\\n        routerV2 = IUniswapV2Router(_routerV2);\\r\\n        routerV3 = ISwapRouter(_routerV3);\\r\\n        quoterV2 = IQuoterV2(_quoterV2);\\r\\n        v3Fees = _v3Fees;\\r\\n    }\\r\\n\\r\\n    function setPayer(address _sellPayer, address _rewardPayer) public onlyOwner {\\r\\n        sellPayer = _sellPayer;\\r\\n        rewardPayer = _rewardPayer;\\r\\n    }\\r\\n\\r\\n    function applySetReceiver() public onlyOwner {\\r\\n        applyChangeTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function cancelSetReceiver() public onlyOwner {\\r\\n        applyChangeTime = 0;\\r\\n    }\\r\\n\\r\\n    function setReceiver(address newReceiver) public onlyOwner {\\r\\n        require(applyChangeTime != 0 \\u0026\\u0026 block.timestamp \\u003e applyChangeTime + 10 days, \\\"Not ready for change receiver\\\");\\r\\n        receiver = newReceiver;\\r\\n        applyChangeTime = 0;\\r\\n    }\\r\\n\\r\\n    function setMinUSDCost(uint newCost) public onlyOwner {\\r\\n        minUSDCost = newCost;\\r\\n    }\\r\\n\\r\\n    function setMinDSCHold(uint newHold) public onlyOwner {\\r\\n        minDSCHold = newHold;\\r\\n    }\\r\\n\\r\\n    function setPrice(uint newPrice) public onlyOwner {\\r\\n        sellPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function setRewardRank(uint newRank1, uint newRank2, uint newRank3) public onlyOwner {\\r\\n        (rewardRank1, rewardRank2, rewardRank3) = (newRank1, newRank2, newRank3);\\r\\n    }\\r\\n\\r\\n    function setUSDRewardPercent(uint newPercent1, uint newPercent2, uint newPercent3, uint newPercent4)\\r\\n    public onlyOwner {\\r\\n        (usdRewardPercent1, usdRewardPercent2, usdRewardPercent3, usdRewardPercent4) =\\r\\n            (newPercent1, newPercent2, newPercent3, newPercent4);\\r\\n    }\\r\\n\\r\\n    function setDSCRewardPercent(uint newPercent1, uint newPercent2, uint newPercent3, uint newPercent4)\\r\\n    public onlyOwner {\\r\\n        (dscRewardPercent1, dscRewardPercent2, dscRewardPercent3, dscRewardPercent4) =\\r\\n            (newPercent1, newPercent2, newPercent3, newPercent4);\\r\\n    }\\r\\n\\r\\n    function buyWithUSDT(uint usdAmount) public {\\r\\n        usd.safeTransferFrom(msg.sender, address(this), usdAmount);\\r\\n        buy(msg.sender, usdAmount);\\r\\n    }\\r\\n\\r\\n    function buy(address user, uint usdAmount) internal {\\r\\n        if (buyTotal[user] == 0) {\\r\\n            allUsers.push(msg.sender);\\r\\n        }\\r\\n\\r\\n        address[] memory upNodes = IDSC(address(dsc)).selectUpNodes(user);\\r\\n\\r\\n        uint dscAmount = getDSCAmountByUSD(usdAmount);\\r\\n\\r\\n        distributeAndLockDSCForUser(user, dscAmount);\\r\\n\\r\\n        distributeAndLockDSCForUpNode(upNodes, dscAmount);\\r\\n\\r\\n        distributeUSD(upNodes, usdAmount);\\r\\n\\r\\n        buyTotal[user] = buyTotal[user] + usdAmount;\\r\\n    }\\r\\n\\r\\n    function claim() public returns (uint256 availableAmount) {\\r\\n        availableAmount += claimForBuy(msg.sender, type(uint).max);\\r\\n        availableAmount += claimForReward(msg.sender, type(uint).max);\\r\\n    }\\r\\n\\r\\n    function getAvailable(address user) public view returns (uint256 availableAmount) {\\r\\n        availableAmount += availableForBuy(user);\\r\\n        availableAmount += availableForReward(user);\\r\\n    }\\r\\n\\r\\n    function getLocked(address user) public view returns (uint256 lockedAmount) {\\r\\n        lockedAmount += lockedForBuy(user);\\r\\n        lockedAmount += lockedForReward(user);\\r\\n    }\\r\\n\\r\\n    function getReleased(address user) public view returns (uint256 releasedAmount) {\\r\\n        releasedAmount += releasedForBuy(user);\\r\\n        releasedAmount += releasedForReward(user);\\r\\n    }\\r\\n\\r\\n    function lockedForBuy(address user) public view returns (uint256 lockAmount) {\\r\\n        uint startIndex = buyIndexStart[user];\\r\\n        uint endIndex = buyIndexEnd[user];\\r\\n        for (uint i=startIndex; i\\u003cendIndex; i++) {\\r\\n            Lock memory lock = buyLocks[user][i];\\r\\n            lockAmount += lock.totalAmount - lock.releasedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function lockedForReward(address user) public view returns (uint256 lockAmount) {\\r\\n        uint startIndex = rewardIndexStart[user];\\r\\n        uint endIndex = rewardIndexEnd[user];\\r\\n        for (uint i=startIndex; i\\u003cendIndex; i++) {\\r\\n            Lock memory lock = rewardLocks[user][i];\\r\\n            lockAmount += lock.totalAmount - lock.releasedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function releasedForBuy(address user) public view returns (uint256 releasedAmount) {\\r\\n        uint startIndex = buyIndexStart[user];\\r\\n        uint endIndex = buyIndexEnd[user];\\r\\n        for (uint i=startIndex; i\\u003cendIndex; i++) {\\r\\n            Lock memory lock = buyLocks[user][i];\\r\\n            releasedAmount += lock.releasedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function releasedForReward(address user) public view returns (uint256 releasedAmount) {\\r\\n        uint startIndex = rewardIndexStart[user];\\r\\n        uint endIndex = rewardIndexEnd[user];\\r\\n        for (uint i=startIndex; i\\u003cendIndex; i++) {\\r\\n            Lock memory lock = rewardLocks[user][i];\\r\\n            releasedAmount += lock.releasedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimForBuy(address user, uint size) public returns (uint256 availableAmount) {\\r\\n        uint startIndex = buyIndexStart[user];\\r\\n        uint nextIndex = startIndex;\\r\\n        uint end = size \\u003e (buyIndexEnd[user] - startIndex) ? buyIndexEnd[user] : startIndex + size;\\r\\n        for (uint i=startIndex; i \\u003c end; i++) {\\r\\n            Lock memory lock = buyLocks[user][i];\\r\\n\\r\\n            if (block.timestamp \\u003c lock.openDay + firstInterval) break;\\r\\n\\r\\n            uint releaseDate = lock.openDay + firstInterval + releaseInterval;\\r\\n            uint firstAmount = lock.totalAmount * firstBuyReleasePercent / 1000;\\r\\n            if (block.timestamp \\u003c releaseDate) {\\r\\n                availableAmount += firstAmount;\\r\\n                buyLocks[user][i].releasedAmount += firstAmount;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint releasedTimes = ((block.timestamp - releaseDate) / releaseInterval) + 1;\\r\\n            uint releasedPercent = directBuyReleasePercent + firstBuyReleasePercent + releasedTimes * lineBuyReleasePercent;\\r\\n            releasedPercent = releasedPercent \\u003e 1000 ? 1000 : releasedPercent;\\r\\n            uint releaseAmount = ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\\r\\n            if (releasedPercent == 1000) {\\r\\n                delete buyLocks[user][i];\\r\\n                nextIndex = i+1;\\r\\n            } else if(releaseAmount \\u003e 0) {\\r\\n                buyLocks[user][i].releasedAmount += releaseAmount;\\r\\n            }\\r\\n\\r\\n            availableAmount += releaseAmount;\\r\\n        }\\r\\n\\r\\n        if (startIndex != nextIndex) buyIndexStart[user] = nextIndex;\\r\\n        if (availableAmount \\u003e 0) dsc.transfer(user, availableAmount);\\r\\n    }\\r\\n\\r\\n    function availableForBuy(address user) public view returns (uint256 availableAmount) {\\r\\n        uint startIndex = buyIndexStart[user];\\r\\n        uint endIndex = buyIndexEnd[user];\\r\\n        (uint directBuyPercent, uint firstBuyPercent, uint lineBuyPercent) =\\r\\n            (directBuyReleasePercent, firstBuyReleasePercent, lineBuyReleasePercent);\\r\\n        for (uint i=startIndex; i\\u003cendIndex; i++) {\\r\\n            Lock memory lock = buyLocks[user][i];\\r\\n\\r\\n            if (block.timestamp \\u003c lock.openDay + firstInterval) break;\\r\\n\\r\\n            uint releaseDate = lock.openDay + firstInterval + releaseInterval;\\r\\n            uint firstAmount = lock.totalAmount * firstBuyPercent / 1000;\\r\\n            if (block.timestamp \\u003c releaseDate) {\\r\\n                availableAmount += firstAmount;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint releasedTimes = ((block.timestamp - releaseDate) / releaseInterval) + 1;\\r\\n            uint releasedPercent = directBuyPercent + firstBuyPercent + releasedTimes * lineBuyPercent;\\r\\n            releasedPercent = releasedPercent \\u003e 1000 ? 1000 : releasedPercent;\\r\\n            availableAmount += ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimForReward(address user, uint size) public returns (uint256 availableAmount) {\\r\\n        uint startIndex = rewardIndexStart[user];\\r\\n        uint nextIndex = startIndex;\\r\\n        uint interval = releaseInterval;\\r\\n        uint end = size \\u003e (rewardIndexEnd[user] - startIndex) ? rewardIndexEnd[user] : startIndex + size;\\r\\n        for (uint i=startIndex; i \\u003c end; i++) {\\r\\n            Lock memory lock = rewardLocks[user][i]; // bug for reward\\r\\n            if (lock.openDay == 0) break;\\r\\n\\r\\n            if (block.timestamp \\u003c lock.openDay + interval) break;\\r\\n\\r\\n            uint releaseDate = lock.openDay + interval;\\r\\n\\r\\n            uint releasedTimes = ((block.timestamp - releaseDate) / interval) + 1;\\r\\n            uint releasedPercent = releasedTimes * lineRewardReleasePercent;\\r\\n            releasedPercent = releasedPercent \\u003e 1000 ? 1000 : releasedPercent;\\r\\n            uint releaseAmount = ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\\r\\n            if (releasedPercent == 1000) {\\r\\n                delete rewardLocks[user][i];\\r\\n                nextIndex = i+1;\\r\\n            } else if(releaseAmount \\u003e 0) {\\r\\n                rewardLocks[user][i].releasedAmount += releaseAmount;\\r\\n            }\\r\\n\\r\\n            availableAmount += releaseAmount;\\r\\n        }\\r\\n\\r\\n        if (startIndex != nextIndex) rewardIndexStart[user] = nextIndex;\\r\\n        if (availableAmount \\u003e 0) dsc.transfer(user, availableAmount);\\r\\n    }\\r\\n\\r\\n    function availableForReward(address user) public view returns (uint256 availableAmount) {\\r\\n        uint startIndex = rewardIndexStart[user];\\r\\n        uint endIndex = rewardIndexEnd[user];\\r\\n        uint interval = releaseInterval;\\r\\n        uint lineReleasePercent = lineRewardReleasePercent;\\r\\n        for (uint i=startIndex; i \\u003c endIndex; i++) {\\r\\n            Lock memory lock = rewardLocks[user][i];\\r\\n\\r\\n            if (block.timestamp \\u003c lock.openDay + interval) break;\\r\\n\\r\\n            uint releaseDate = lock.openDay + interval;\\r\\n\\r\\n            uint releasedTimes = ((block.timestamp - releaseDate) / interval) + 1;\\r\\n            uint releasedPercent = releasedTimes * lineReleasePercent;\\r\\n            releasedPercent = releasedPercent \\u003e 1000 ? 1000 : releasedPercent;\\r\\n            availableAmount += ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkAddress(address addr) internal view returns (bool) {\\r\\n        return buyTotal[addr] \\u003e minUSDCost \\u0026\\u0026 dsc.balanceOf(addr) \\u003e minDSCHold;\\r\\n    }\\r\\n\\r\\n    function distributeUSD(address[] memory upNodes, uint usdAmount) internal {\\r\\n        address father = upNodes[0];\\r\\n        if (address(0) != father \\u0026\\u0026 checkAddress(father)) {\\r\\n            if (buyTotal[father] \\u003c rewardRank1) {\\r\\n                usd.transfer(father, usdAmount.mul(usdRewardPercent1 + upNodeUSDRewardPercent).div(1000));\\r\\n            } else if (buyTotal[father] \\u003c rewardRank2) {\\r\\n                usd.transfer(father, usdAmount.mul(usdRewardPercent2 + upNodeUSDRewardPercent).div(1000));\\r\\n            } else if (buyTotal[father] \\u003c rewardRank3) {\\r\\n                usd.transfer(father, usdAmount.mul(usdRewardPercent3 + upNodeUSDRewardPercent).div(1000));\\r\\n            } else {\\r\\n                usd.transfer(father, usdAmount.mul(usdRewardPercent4 + upNodeUSDRewardPercent).div(1000));\\r\\n            }\\r\\n        } else {\\r\\n            usd.transfer(receiver, usd.balanceOf(address(this)));\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint reward = usdAmount.mul(upNodeUSDRewardPercent).div(1000);\\r\\n        for (uint i=1; i\\u003cupNodes.length; i++) {\\r\\n            address upNode = upNodes[i];\\r\\n            if (address(0) != upNode \\u0026\\u0026 checkAddress(upNode)) {\\r\\n                usd.transfer(upNode, reward);\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        usd.transfer(receiver, usd.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function getDSCAmountByUSD(uint usdAmount) public view returns (uint dscAmount) {\\r\\n        dscAmount = usdAmount.mul(priceBase).div(sellPrice);\\r\\n    }\\r\\n\\r\\n    function getOutputFromPancakeV3(uint bnbAmount, address _weth, address _usd, uint24 _fee)\\r\\n        public returns (uint amountOut) {\\r\\n        try quoterV2.quoteExactInputSingle(IQuoterV2.QuoteExactInputSingleParams({\\r\\n            tokenIn: _weth,\\r\\n            tokenOut: address(_usd),\\r\\n            amountIn: bnbAmount,\\r\\n            fee: _fee,\\r\\n            sqrtPriceLimitX96: 0\\r\\n        })) returns (uint256 r1, uint160, uint32, uint256) {\\r\\n            amountOut = r1;\\r\\n        } catch {\\r\\n            amountOut = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOutputFromPancakeV2(uint bnbAmount, address _weth, address _usd)\\r\\n        internal view returns (uint amountOut) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _weth;\\r\\n        path[1] = _usd;\\r\\n        amountOut = routerV2.getAmountsOut(bnbAmount, path)[1];\\r\\n    }\\r\\n\\r\\n    function getBestOutputFromPancake(uint bnbAmount) public returns (uint usdAmount, uint24 fee, uint slip) {\\r\\n        slip = 10000;\\r\\n        uint poolPrice;\\r\\n        if (address(routerV2) != address(0)) {\\r\\n            address weth = routerV2.WETH();\\r\\n            usdAmount = getOutputFromPancakeV2(bnbAmount, weth, address(usd));\\r\\n            poolPrice = getOutputFromPancakeV2(10 ** 10, weth, address(usd)) * 100000000;\\r\\n        }\\r\\n\\r\\n        if (address(routerV3) != address(0) \\u0026\\u0026 address(quoterV2) != address(0)) {\\r\\n            address weth = IPeripheryImmutableState(address(quoterV2)).WETH9();\\r\\n            for (uint i=0; i\\u003cv3Fees.length; i++) {\\r\\n                uint amountOut = getOutputFromPancakeV3(bnbAmount, weth, address(usd), v3Fees[i]);\\r\\n                if (amountOut \\u003e usdAmount) {\\r\\n                    usdAmount = amountOut;\\r\\n                    fee = v3Fees[i];\\r\\n                    poolPrice = getOutputFromPancakeV3(10 ** 10, weth, address(usd), v3Fees[i]) * 100000000;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint tradePrice = usdAmount * (10 ** 18) / bnbAmount;\\r\\n        if (poolPrice \\u003e 0 \\u0026\\u0026 poolPrice \\u003e tradePrice) slip = (poolPrice - tradePrice) * 10000 / poolPrice;\\r\\n    }\\r\\n\\r\\n    function getDSCAmountByBNB(uint bnbAmount) public view returns (uint dscAmount) {\\r\\n        address weth = routerV2.WETH();\\r\\n        uint usdAmount = getOutputFromPancakeV2(bnbAmount, weth, address(usd));\\r\\n        return getDSCAmountByUSD(usdAmount);\\r\\n    }\\r\\n\\r\\n    function distributeAndLockDSCForUser(address user, uint dscAmount) internal {\\r\\n        uint directRelease = dscAmount.mul(directBuyReleasePercent).div(1000);\\r\\n        Lock memory lock = Lock(block.timestamp, dscAmount, directRelease);\\r\\n        uint indexEnd = buyIndexEnd[user];\\r\\n        buyLocks[user][indexEnd] = lock;\\r\\n        buyIndexEnd[user]++;\\r\\n        dsc.transferFrom(sellPayer, address(this), dscAmount);\\r\\n        dsc.transfer(user, directRelease);\\r\\n    }\\r\\n\\r\\n    function lockDSCForUpNode(address father, uint costAmount) internal {\\r\\n        (uint start, uint end) = (rewardIndexStart[father], rewardIndexEnd[father]);\\r\\n        if (start != end) {\\r\\n            Lock memory last = rewardLocks[father][end - 1];\\r\\n            if (last.openDay == (block.timestamp / padInterval) * padInterval) {\\r\\n                rewardLocks[father][end - 1].totalAmount += costAmount;\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        Lock memory lock = Lock((block.timestamp / padInterval) * padInterval, costAmount, 0);\\r\\n        rewardLocks[father][end] = lock;\\r\\n        rewardIndexEnd[father]++;\\r\\n    }\\r\\n\\r\\n    function distributeAndLockDSCForUpNode(address[] memory upNodes, uint dscAmount) internal {\\r\\n        uint costAmount;\\r\\n        address father = upNodes[0];\\r\\n        if (address(0) != father \\u0026\\u0026 checkAddress(father)) {\\r\\n            if (buyTotal[father] \\u003c rewardRank1) {\\r\\n                costAmount = dscAmount.mul(dscRewardPercent1 + upNodeDSCRewardPercent).div(1000);\\r\\n            } else if (buyTotal[father] \\u003c rewardRank2) {\\r\\n                costAmount = dscAmount.mul(dscRewardPercent2 + upNodeDSCRewardPercent).div(1000);\\r\\n            } else if (buyTotal[father] \\u003c rewardRank3) {\\r\\n                costAmount = dscAmount.mul(dscRewardPercent3 + upNodeDSCRewardPercent).div(1000);\\r\\n            } else {\\r\\n                costAmount = dscAmount.mul(dscRewardPercent4 + upNodeDSCRewardPercent).div(1000);\\r\\n            }\\r\\n\\r\\n            lockDSCForUpNode(father, costAmount);\\r\\n        } else {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint reward = dscAmount.mul(upNodeDSCRewardPercent).div(1000);\\r\\n        for (uint i=1; i\\u003cupNodes.length; i++) {\\r\\n            address upNode = upNodes[i];\\r\\n            if (address(0) != upNode \\u0026\\u0026 checkAddress(upNode)) {\\r\\n                lockDSCForUpNode(upNode, reward);\\r\\n                costAmount += reward;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        dsc.transferFrom(rewardPayer, address(this), costAmount);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        (uint usdAmount, uint24 fee, uint slip) = getBestOutputFromPancake(msg.value);\\r\\n        require(slip \\u003c= slipThreshold, \\\"slip exceed\\\");\\r\\n        if (fee == 0) {\\r\\n            address weth = routerV2.WETH();\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = weth;\\r\\n            path[1] = address(usd);\\r\\n            usdAmount = routerV2.swapExactETHForTokens{value : msg.value}\\r\\n                (1, path, address(this), block.timestamp + 3600)[1];\\r\\n        } else {\\r\\n            address weth = IPeripheryImmutableState(address(routerV3)).WETH9();\\r\\n            usdAmount = routerV3.exactInputSingle{value : msg.value}(ISwapRouter.ExactInputSingleParams({\\r\\n                tokenIn: weth,\\r\\n                tokenOut: address(usd),\\r\\n                fee: fee,\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp + 3600,\\r\\n                amountIn: msg.value,\\r\\n                amountOutMinimum: 1,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            }));\\r\\n        }\\r\\n\\r\\n        buy(msg.sender, usdAmount);\\r\\n    }\\r\\n\\r\\n    function timestamp() public view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function claimStuckTokens(address token) public onlyOwner {\\r\\n        require(token != address(dsc), \\\"Cannot claim DSC tokens\\\");\\r\\n        if (token == address(0x0)) {\\r\\n            (bool success, ) = address(msg.sender).call{ value: address(this).balance }(\\\"\\\");\\r\\n            require(success, \\\"Unable to send value, may have reverted\\\");\\r\\n        } else {\\r\\n            IERC20 ERC20token = IERC20(token);\\r\\n            uint256 balance = ERC20token.balanceOf(address(this));\\r\\n            ERC20token.transfer(msg.sender, balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function a_getAvailable(address user) public view returns (string memory) {\\r\\n        uint availableAmount = getAvailable(user);\\r\\n        return Strings.toString(availableAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getLocked(address user) public view returns (string memory) {\\r\\n        uint256 lockedAmount = getLocked(user);\\r\\n        return Strings.toString(lockedAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getReleased(address user) public view returns (string memory) {\\r\\n        uint256 releasedAmount = getReleased(user);\\r\\n        return Strings.toString(releasedAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getBuyTotal(address user) public view returns (string memory) {\\r\\n        uint256 buyAmount = buyTotal[user];\\r\\n        return Strings.toString(buyAmount, usdDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getLockedForBuy(address user) public view returns (string memory) {\\r\\n        uint256 lockAmount = lockedForBuy(user);\\r\\n        return Strings.toString(lockAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getLockedForReward(address user) public view returns (string memory) {\\r\\n        uint256 lockAmount = lockedForReward(user);\\r\\n        return Strings.toString(lockAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getReleasedForBuy(address user) public view returns (string memory) {\\r\\n        uint256 releasedAmount = releasedForBuy(user);\\r\\n        return Strings.toString(releasedAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getReleasedForReward(address user) public view returns (string memory) {\\r\\n        uint256 releasedAmount = releasedForReward(user);\\r\\n        return Strings.toString(releasedAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getAvailableForBuy(address user) public view returns (string memory) {\\r\\n        uint256 availableAmount = availableForBuy(user);\\r\\n        return Strings.toString(availableAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getAvailableForReward(address user) public view returns (string memory) {\\r\\n        uint256 availableAmount = availableForReward(user);\\r\\n        return Strings.toString(availableAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getDSCAmountByUSD(string memory usdString) public view returns (string memory) {\\r\\n        uint usdAmount = Strings.fromString(usdString, usdDecimals);\\r\\n        uint dscAmount = getDSCAmountByUSD(usdAmount);\\r\\n        return Strings.toString(dscAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getDSCAmountByBNB(string memory bnbString) public view returns (string memory) {\\r\\n        uint bnbAmount = Strings.fromString(bnbString, 18);\\r\\n        uint dscAmount = getDSCAmountByBNB(bnbAmount);\\r\\n        return Strings.toString(dscAmount, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getPrice() public view returns (string memory) {\\r\\n        return Strings.toString(sellPrice, usdDecimals);\\r\\n    }\\r\\n\\r\\n    function a_setPrice(string memory priceString) public onlyOwner {\\r\\n        uint newPrice = Strings.fromString(priceString, usdDecimals);\\r\\n        sellPrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function a_setMinUSDCost(string memory costString) public onlyOwner {\\r\\n        uint newCost = Strings.fromString(costString, usdDecimals);\\r\\n        minUSDCost = newCost;\\r\\n    }\\r\\n\\r\\n    function a_setMinDSCHold(string memory holdString) public onlyOwner {\\r\\n        uint newHold = Strings.fromString(holdString, dscDecimals);\\r\\n        minDSCHold = newHold;\\r\\n    }\\r\\n\\r\\n    function a_getMinUSDCost() public view returns (string memory) {\\r\\n        return Strings.toString(minUSDCost, usdDecimals);\\r\\n    }\\r\\n\\r\\n    function a_getMinDSCHold() public view returns (string memory) {\\r\\n        return Strings.toString(minDSCHold, dscDecimals);\\r\\n    }\\r\\n\\r\\n    function a_buyWithUSDT(string memory usdString) public {\\r\\n        uint usdAmount = Strings.fromString(usdString, usdDecimals);\\r\\n        return buyWithUSDT(usdAmount);\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n    unchecked {\\r\\n        z = x + y;\\r\\n        require(z \\u003e= x, \\u0027ds-math-add-overflow\\u0027);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(x \\u003e= y, \\u0027ds-math-sub-underflow\\u0027);\\r\\n        z = x - y;\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n    unchecked {\\r\\n        z = x * y;\\r\\n        require(y == 0 || z / y == x, \\u0027ds-math-mul-overflow\\u0027);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\u0027ds-math-div-overflow\\u0027);\\r\\n        return a / b;\\r\\n    }\\r\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value, uint8 decimals) internal pure returns (string memory) {\\r\\n        require(decimals \\u003e 0 \\u0026\\u0026 decimals \\u003c= 18, \\\"Invalid Decimals\\\");\\r\\n        string memory str = toString(value);\\r\\n        uint length = bytes(str).length; // 17\\r\\n        uint count;\\r\\n        uint dotIndex;\\r\\n        if (length \\u003c= decimals) {//\u88650\u548c .\\r\\n            count = decimals + 2; // 19\\r\\n            dotIndex = 1;\\r\\n        } else {//\u8865 .\\r\\n            count = length + 1;\\r\\n            dotIndex = length - decimals;\\r\\n        }\\r\\n\\r\\n        bytes memory buffer = new bytes(count);\\r\\n        uint left = length;\\r\\n        uint i = 0; //\u5c0f\u6570\u70b9\u524d\u9762\u7684\u5b57\u7b26\\r\\n        for (; i \\u003c dotIndex; i++) {\\r\\n            if (length \\u003c= decimals) {//dotIndex == 1, \u7b2c\u4e00\u4f4d\u76f4\u63a5\u4e3a0\\r\\n                buffer[i] = bytes1(uint8(48));\\r\\n            } else {\\r\\n                buffer[i] = bytes(str)[i];\\r\\n                left--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // \u5c0f\u6570\u70b9\\r\\n        buffer[i++] = bytes1(uint8(46));\\r\\n\\r\\n        // \u5c0f\u6570\u70b9\u540e\u9762\\r\\n        for (; i \\u003c count; i++) {\\r\\n            if ((count - i) \\u003e left) {\\r\\n                buffer[i] = bytes1(uint8(48));\\r\\n            } else {\\r\\n                buffer[i] = bytes(str)[length - left];\\r\\n                left--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function fromString(string memory str, uint8 decimals) internal pure returns(uint256 value) {\\r\\n        uint dotIndex = bytes(str).length;\\r\\n        for (uint256 i = 0; i \\u003c bytes(str).length; i++) {\\r\\n            if (uint8(bytes(str)[i]) == 46) {//\u627e\u5230\u5c0f\u6570\u70b9\u7684\u4f4d\u7f6e\\r\\n                dotIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(bytes(str).length - dotIndex \\u003c decimals, \\\"Invalid str\\\");\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c dotIndex; i++) {\\r\\n            if ((uint8(bytes(str)[i]) - 48) \\u003c 0 || (uint8(bytes(str)[i]) - 48) \\u003e 9) {\\r\\n                revert(\\\"Invalid number\\\");\\r\\n            }\\r\\n\\r\\n            value += (uint8(bytes(str)[i]) - 48) * 10**(decimals + dotIndex - i - 1);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = dotIndex + 1; i \\u003c bytes(str).length; i++) {\\r\\n            if ((uint8(bytes(str)[i]) - 48) \\u003c 0 || (uint8(bytes(str)[i]) - 48) \\u003e 9) {\\r\\n                revert(\\\"Invalid number\\\");\\r\\n            }\\r\\n\\r\\n            if (uint8(bytes(str)[i]) != 48) {\\r\\n                value += (uint8(bytes(str)[i]) - 48) * 10 ** (decimals - (i - dotIndex));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dsc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellPayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_old\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"usdString\",\"type\":\"string\"}],\"name\":\"a_buyWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getAvailableForBuy\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getAvailableForReward\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getBuyTotal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"bnbString\",\"type\":\"string\"}],\"name\":\"a_getDSCAmountByBNB\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"usdString\",\"type\":\"string\"}],\"name\":\"a_getDSCAmountByUSD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getLocked\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getLockedForBuy\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getLockedForReward\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a_getMinDSCHold\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a_getMinUSDCost\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a_getPrice\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getReleased\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getReleasedForBuy\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getReleasedForReward\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"holdString\",\"type\":\"string\"}],\"name\":\"a_setMinDSCHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"costString\",\"type\":\"string\"}],\"name\":\"a_setMinUSDCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"priceString\",\"type\":\"string\"}],\"name\":\"a_setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"applyCancelTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyChangeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"applySetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applySetReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableForBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyIndexEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyIndexStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"cancelSetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSetReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"claimForBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"claimForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directBuyReleasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dsc\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dscRewardPercent1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dscRewardPercent2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dscRewardPercent3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dscRewardPercent4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstBuyReleasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"getBestOutputFromPancake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"slip\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"getDSCAmountByBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dscAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"getDSCAmountByUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dscAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"getOutputFromPancakeV3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lineBuyReleasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lineRewardReleasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedForBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finish\",\"type\":\"bool\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDSCHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUSDCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"padInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoterV2\",\"outputs\":[{\"internalType\":\"contract IQuoterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"releasedForBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"releasedForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardIndexEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardIndexStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRank1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRank2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRank3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerV3\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPercent2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPercent3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPercent4\",\"type\":\"uint256\"}],\"name\":\"setDSCRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newHold\",\"type\":\"uint256\"}],\"name\":\"setMinDSCHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCost\",\"type\":\"uint256\"}],\"name\":\"setMinUSDCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellPayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPayer\",\"type\":\"address\"}],\"name\":\"setPayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRank1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRank2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRank3\",\"type\":\"uint256\"}],\"name\":\"setRewardRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerV3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoterV2\",\"type\":\"address\"},{\"internalType\":\"uint24[]\",\"name\":\"_v3Fees\",\"type\":\"uint24[]\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPercent2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPercent3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPercent4\",\"type\":\"uint256\"}],\"name\":\"setUSDRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slipThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upNodeDSCRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upNodeUSDRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usd\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRewardPercent1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRewardPercent2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRewardPercent3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRewardPercent4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"v3Fees\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Public", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000625620e8318c7e8907d6261b96cd56cbb00a4525000000000000000000000000a86a86b8acdc55812bec2971a2fc8a989455858c00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000003b7623f61a47d12018e0f7c73af0904842e9ba3d000000000000000000000000f6c36bd50e840e1c4a9d43730ab8c5231bdd5c9f00000000000000000000000001d4f96ee8fca7eb97b0b85fd8125db78899e41e000000000000000000000000e506af95ea3d53ca91ad5990b41923ba4b79f608", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d810c87dcab4a478b40e8248126f692dea6a28d3176aab1cc32fa52f9d7fa32b"}