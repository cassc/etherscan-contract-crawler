{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n\r\n\r\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557    \u2588\u2588\u2557     \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\r\n    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\r\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u255a\u2588\u2588\u2588\u2588\u2554\u255d     \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557   \u255a\u2588\u2588\u2588\u2588\u2554\u255d \r\n    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557  \u255a\u2588\u2588\u2554\u255d      \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u255d    \u255a\u2588\u2588\u2554\u255d  \r\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2551        \u2588\u2588\u2551   \r\n    \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d       \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d     \u255a\u2550\u255d        \u255a\u2550\u255d   \r\n                                                                                   \r\n\r\n    WELCOME TO Baby Luffy COMMUNITY! Now you are a member of the next x500 gem!\r\n\r\n    The gaming landscape is evolving rapidly, and Baby Luffy \r\n    is poised to lead the charge. It marries the thrilling dynamics \r\n    of a combat-oriented PvP and PvE system with the decentralized\r\n    nature of blockchain technology. This whitepaper outlines the \r\n    core features, mechanics, and vision behind Baby Luffy, poised \r\n    to redefine how players interact with blockchain gaming\r\n\r\n    \ud83d\udca5 Get ready for our EXPLOSIVE LAUNCH on PancakeSwap\r\n\r\n    | \ud83d\udfe1 All BSC Trending confirmed \r\n    | \ud83d\udd35 CMC&CG Fast-Track confirmed\r\n\r\n    \ud83e\udd1d Recommend by the BIGGEST CALLERS!\r\n    \ud83e\udd1d Tier 1 Partnerships incoming\r\n    \ud83c\udf89 Dev BASED\r\n    \ud83d\udc8e Experienced Team\r\n    \ud83d\udc8e 140x and 300x Previous\r\n    \ud83d\udc8e Contest and Competitions incoming\r\n\r\n\r\n\r\n    @dev https://bullsprotocol.com/en\r\n\r\n    ______       _ _             ______          _                  _ \r\n    | ___ \\     | | |            | ___ \\        | |                | |\r\n    | |_/ /_   _| | |___         | |_/ / __ ___ | |_ ___   ___ ___ | |\r\n    | ___ \\ | | | | / __|        |  __/ '__/ _ \\| __/ _ \\ / __/ _ \\| |\r\n    | |_/ / |_| | | \\__ \\        | |  | | | (_) | || (_) | (_| (_) | |\r\n    \\____/ \\__,_|_|_|___/        \\_|  |_|  \\___/ \\__\\___/ \\___\\___/|_|\r\n\r\n\r\n*/\r\n\r\n\r\npragma solidity 0.8.18;\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n*/\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n}\r\n\r\n\r\ninterface IERC20Metadata {\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function getAmountsOut(\r\n        uint amountIn, \r\n        address[] calldata path) \r\n        external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 0;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n}\r\n\r\ncontract BuyBLFtokens is ERC20, Ownable, ReentrancyGuard {\r\n\r\n    uint256 public timeDeployContract;\r\n\r\n    uint256 public percent;\r\n    uint256 public priceBNB;\r\n    // uint256 public priceBNB;\r\n    uint256 public priceUSD;\r\n    uint256 public denominatorUSD;\r\n\r\n    //As the sale is in more than one cryptocurrency\r\n    //so there will be a difference due to BNB or to BNB conversion spreeds\r\n    uint256 public errorMargin;\r\n\r\n    //BuyTokens limit\r\n    uint256 public hardCapBuyTokens;\r\n\r\n    uint256 public minBNBbuy;\r\n    uint256 public maxBNBbuy;\r\n\r\n    //Stats here\r\n    //Number of purchases in BuyTokens\r\n    uint256 public count;\r\n    //All BNB purchases are added to this variable\r\n    uint256 public totalBNBpaid;\r\n    //All USD purchases are added to this variable\r\n    uint256 public totalUSDpaid;\r\n\r\n    //All tokens sold in BuyTokens\r\n    //Tokens sold without adding the BuyTokens bonus\r\n    uint256 public totalTokensBLF;\r\n\r\n    //Total amount sold equivalent in BNB\r\n    uint256 public totalSoldInBNB;\r\n    //Total sold amount equivalent in USD\r\n    uint256 public totalSoldInUSD;\r\n\r\n    bool public isOpenBuyTokens;\r\n\r\n    uint256 public restBNBfees;\r\n\r\n    address public uniswapV2Router      = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public addressBUSD          = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address public addressUSDC          = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\r\n    address public addressUSDT          = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public addressWETH          = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public addressBLF           = 0xE3B4F0fa9F7AC0B29B29bf94503C3016Eb56876d;\r\n\r\n    address public addressFundsReceiver   = payable(0x9ffE064F9b4Fa8f89175714572EF9Ef3A9A7099a);\r\n    address public addressFromTokens;\r\n    address public projectWallet;\r\n\r\n    address public authWallet;\r\n\r\n    struct structBuy {\r\n        //All tokens that a uer bought\r\n        uint256 amountTokenPurchased;\r\n        //Only the amounts in BNB that the user has paid\r\n        uint256 amountBNBpaid;\r\n        //Only the amounts in BUSD that the user has paid\r\n        uint256 amountBUSDpaid;\r\n        //Only the values in USDC that the user paid\r\n        uint256 amountUSDCpaid;\r\n        //Only the amounts in USDT that the user paid\r\n        uint256 amountUSDTpaid;\r\n        //Conversion of USD to USD added to the USD paid in this BuyTokens\r\n        uint256 amountBNBPaidConverted;\r\n        //Conversion of USD to USD added to the USD paid in this BuyTokens\r\n        uint256 amountUSDPaidConverted;\r\n    }\r\n\r\n    mapping (address => structBuy) mappingStructBuy;\r\n\r\n    receive(\r\n\r\n    ) external payable {\r\n\r\n        buyBuyTokens_BNB();\r\n\r\n    }\r\n\r\n    constructor() ERC20(\"BLF BuyTokens\", \"BLF\") Ownable(_msgSender()) {\r\n        timeDeployContract = block.timestamp;\r\n        isOpenBuyTokens = true;\r\n\r\n        addressFromTokens = address(this);\r\n\r\n        errorMargin = 110;\r\n\r\n        restBNBfees = 1 * 10 ** 18 / 10000;\r\n\r\n        hardCapBuyTokens = 1000 * 10 ** 18;\r\n\r\n        //Setting to avoid rollback in convert call to getLimitToBuy_USD\r\n        totalSoldInBNB = 1;\r\n\r\n        minBNBbuy = 1 * 10 ** 18 / 1000000;\r\n        maxBNBbuy = 1 * 10 ** 25 / 100;\r\n\r\n        _mint(address(0), 1);\r\n    }\r\n\r\n    modifier onlyAuth() {\r\n        require(msg.sender == authWallet, \"Caller is not Auth Wallet\");\r\n        _;\r\n    }\r\n\r\n    function maxUSDbuy() public view returns (uint256) {\r\n        return convert(addressWETH, addressUSDT, maxBNBbuy);\r\n    }\r\n\r\n    function minUSDbuy() public view returns (uint256) {\r\n        return convert(addressWETH, addressUSDT, minBNBbuy);\r\n    }\r\n\r\n    function getTokensOut_BNB(uint256 amountIn) public view returns (uint256) {\r\n        return amountIn * priceBNB;\r\n    }\r\n\r\n    function getTokensOut_USD(uint256 amountIn) public view returns (uint256) {\r\n        return (amountIn / priceUSD) * denominatorUSD;\r\n    }\r\n\r\n    function getMappingStructBuy(address buyer) public view returns (structBuy memory) {\r\n        return mappingStructBuy[buyer];\r\n    }\r\n\r\n    function getLimitToBuy_BNB(address buyer) public view returns (uint256 limit) {\r\n\r\n        //It is redundant and unnecessary to check, but we do these rechecks\r\n        if (maxBNBbuy >= mappingStructBuy[buyer].amountBNBPaidConverted) {\r\n            limit = maxBNBbuy - mappingStructBuy[buyer].amountBNBPaidConverted;\r\n\r\n        } else {\r\n            limit = 0;\r\n        }\r\n\r\n        if (limit > hardCapBuyTokens - totalSoldInBNB) limit = hardCapBuyTokens - totalSoldInBNB;\r\n\r\n        if (address(buyer).balance > restBNBfees) {\r\n            if (limit > address(buyer).balance - restBNBfees) \r\n                limit = address(buyer).balance - restBNBfees;\r\n        }\r\n\r\n        return limit;\r\n\r\n    }\r\n\r\n    function getLimitToBuy_USD(address buyer) public view returns (uint256 limit) {\r\n\r\n        uint256 maxBNBbuyConverted = convert(addressWETH, addressUSDT, maxBNBbuy);\r\n        uint256 hardCapBuyTokensConverted = convert(addressWETH, addressUSDT, hardCapBuyTokens);\r\n        uint256 totalSoldInBNBConverted = convert(addressWETH, addressUSDT, totalSoldInBNB);\r\n        //It is redundant and unnecessary to check, but we do these rechecks\r\n        if (maxBNBbuyConverted >= mappingStructBuy[buyer].amountUSDPaidConverted) {\r\n            limit = maxBNBbuyConverted - mappingStructBuy[buyer].amountUSDPaidConverted;\r\n\r\n        } else {\r\n            limit = 0;\r\n        }\r\n\r\n        if (limit > hardCapBuyTokensConverted - totalSoldInBNBConverted) \r\n        limit = hardCapBuyTokensConverted - totalSoldInBNBConverted;\r\n\r\n        return limit;\r\n\r\n    }\r\n\r\n    function convert(address addressIn, address addressOut, uint256 amount) public view returns (uint256) {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = addressIn;\r\n        path[1] = addressOut;\r\n\r\n        uint256[] memory amountOutMins = \r\n        IUniswapV2Router02(uniswapV2Router).getAmountsOut(amount, path);\r\n\r\n        return amountOutMins[path.length -1];\r\n    } \r\n\r\n\r\n    function buyBuyTokens_BNB() \r\n        public payable nonReentrant() {\r\n        \r\n        require(isOpenBuyTokens, \"BuyTokens not opened yet\");\r\n        require(totalSoldInBNB <= hardCapBuyTokens, \"Sales limit reached\");\r\n\r\n        uint256 amountBNB = msg.value;\r\n        uint256 amountUSDconverted = convert(addressWETH, addressUSDT, amountBNB);\r\n        uint256 amountBLFconverted = convert(addressWETH, addressBLF, amountBNB);\r\n\r\n        unchecked {\r\n            require(minBNBbuy <= amountBNB, \"Minimum purchase\");\r\n            require(mappingStructBuy[_msgSender()].amountBNBPaidConverted + amountBNB \r\n                    <= maxBNBbuy * errorMargin / 100);\r\n        \r\n            uint256 amountBuy = amountBLFconverted;\r\n\r\n            IERC20(addressBLF).transfer(msg.sender, amountBuy);\r\n\r\n            //amountBNB is in wei\r\n            //The calculation of the number of tokens is offset by the 10 ** 18 decimals of the token itself        \r\n            mappingStructBuy[_msgSender()].amountTokenPurchased += amountBuy;\r\n            mappingStructBuy[_msgSender()].amountBNBpaid += amountBNB;\r\n            mappingStructBuy[_msgSender()].amountBNBPaidConverted += amountBNB;\r\n            mappingStructBuy[_msgSender()].amountUSDPaidConverted += amountUSDconverted;\r\n\r\n            count ++;\r\n            totalBNBpaid += amountBNB;\r\n            totalTokensBLF += amountBuy;\r\n            \r\n            totalSoldInBNB += amountBNB;\r\n            totalSoldInUSD += amountUSDconverted;\r\n\r\n            (bool success1,) = addressFundsReceiver.call{value: amountBNB * (100 - percent) / 100}(\"\");\r\n            require(success1, \"Failed to send BNB\");\r\n        }\r\n    }\r\n\r\n    //You have to approve the token first\r\n    function buyBuyTokens_BUSD(uint256 amountBUSD)\r\n        external nonReentrant() {\r\n        require(isOpenBuyTokens, \"BuyTokens not opened yet\");\r\n        require(totalSoldInBNB <= hardCapBuyTokens, \"Sales limit reached\");\r\n\r\n        uint256 amountBNBconverted = convert(addressBUSD, addressWETH, amountBUSD);\r\n        uint256 amountBLFconverted = convert(addressWETH, addressBLF, amountBNBconverted);\r\n\r\n        unchecked {\r\n            require(minBNBbuy <= amountBNBconverted, \"Minimum purchase\");\r\n            require(mappingStructBuy[_msgSender()].amountBNBPaidConverted + \r\n            amountBNBconverted <= maxBNBbuy * errorMargin / 100);\r\n\r\n            uint256 amountBuy = amountBLFconverted;\r\n\r\n            IERC20(addressBUSD).transferFrom(msg.sender, addressFundsReceiver, amountBUSD * (100 - percent) / 100);\r\n            // IERC20(addressBUSD).transferFrom(msg.sender, projectWallet, amountBUSD * (percent) / 100);\r\n\r\n            //amountBUSD is in wei\r\n            //The calculation of the number of tokens is offset by the 10 ** 18 decimals of the token itself\r\n            IERC20(addressBLF).transfer(msg.sender, amountBuy);\r\n\r\n            mappingStructBuy[_msgSender()].amountTokenPurchased += amountBuy;\r\n            mappingStructBuy[_msgSender()].amountBUSDpaid += amountBUSD;\r\n            mappingStructBuy[_msgSender()].amountBNBPaidConverted += amountBNBconverted;\r\n            mappingStructBuy[_msgSender()].amountUSDPaidConverted += amountBUSD;\r\n\r\n            count ++;\r\n            totalUSDpaid += amountBUSD;\r\n            totalTokensBLF += amountBuy;\r\n\r\n            totalSoldInBNB += amountBNBconverted;\r\n            totalSoldInUSD += amountBUSD;\r\n        }\r\n    }\r\n\r\n    //You have to approve the token first\r\n    function buyBuyTokens_USDC(uint256 amountUSDC)\r\n        external nonReentrant() {\r\n        require(isOpenBuyTokens, \"BuyTokens not opened yet\");\r\n        require(totalSoldInBNB <= hardCapBuyTokens, \"Sales limit reached\");\r\n\r\n        uint256 amountBNBconverted = convert(addressUSDC, addressWETH, amountUSDC);\r\n        uint256 amountBLFconverted = convert(addressWETH, addressBLF, amountBNBconverted);\r\n\r\n        unchecked {\r\n            require(minBNBbuy <= amountBNBconverted, \"Minimum purchase\");\r\n            require(mappingStructBuy[_msgSender()].amountBNBPaidConverted + \r\n            amountBNBconverted <= maxBNBbuy * errorMargin / 100);\r\n\r\n            uint256 amountBuy = amountBLFconverted;\r\n\r\n            IERC20(addressUSDC).transferFrom(msg.sender, addressFundsReceiver, amountUSDC * (100 - percent) / 100);\r\n            // IERC20(addressUSDC).transferFrom(msg.sender, projectWallet, amountUSDC * (percent) / 100);\r\n\r\n            //amountUSDC is in wei\r\n            //The calculation of the number of tokens is offset by the 10 ** 18 decimals of the token itself\r\n            IERC20(addressBLF).transfer(msg.sender, amountBuy);\r\n\r\n            mappingStructBuy[_msgSender()].amountTokenPurchased += amountBuy;\r\n            mappingStructBuy[_msgSender()].amountUSDCpaid += amountUSDC;\r\n            mappingStructBuy[_msgSender()].amountBNBPaidConverted += amountBNBconverted;\r\n            mappingStructBuy[_msgSender()].amountUSDPaidConverted += amountUSDC;\r\n\r\n            count ++;\r\n            totalUSDpaid += amountUSDC;\r\n            totalTokensBLF += amountBuy;\r\n\r\n            totalSoldInBNB += amountBNBconverted;\r\n            totalSoldInUSD += amountUSDC;\r\n        }\r\n    }\r\n\r\n    //You have to approve the token first\r\n    function buyBuyTokens_USDT(uint256 amountUSDT)\r\n        external nonReentrant() {\r\n        require(isOpenBuyTokens, \"BuyTokens not opened yet\");\r\n        require(totalSoldInBNB <= hardCapBuyTokens, \"Sales limit reached\");\r\n\r\n        uint256 amountBNBconverted = convert(addressUSDT, addressWETH, amountUSDT);\r\n        uint256 amountBLFconverted = convert(addressWETH, addressBLF, amountBNBconverted);\r\n\r\n        unchecked {\r\n            require(minBNBbuy <= amountBNBconverted, \"Minimum purchase\");\r\n            require(mappingStructBuy[_msgSender()].amountBNBPaidConverted + \r\n            amountBNBconverted <= maxBNBbuy * errorMargin / 100);\r\n\r\n            uint256 amountBuy = amountBLFconverted;\r\n\r\n            IERC20(addressUSDT).transferFrom(msg.sender, addressFundsReceiver, amountUSDT * (100 - percent) / 100);\r\n            // IERC20(addressUSDT).transferFrom(msg.sender, projectWallet, amountUSDT * (percent) / 100);\r\n\r\n            //addressUSDT is in wei\r\n            //The calculation of the number of tokens is offset by the 10 ** 18 decimals of the token itself\r\n            IERC20(addressBLF).transfer(msg.sender, amountBuy);\r\n\r\n            mappingStructBuy[_msgSender()].amountTokenPurchased += amountBuy;\r\n            mappingStructBuy[_msgSender()].amountUSDTpaid += amountUSDT;\r\n            mappingStructBuy[_msgSender()].amountBNBPaidConverted += amountBNBconverted;\r\n            mappingStructBuy[_msgSender()].amountUSDPaidConverted += amountUSDT;\r\n\r\n            count ++;\r\n            totalUSDpaid += amountUSDT;\r\n            totalTokensBLF += amountBuy;\r\n\r\n            totalSoldInBNB += amountBNBconverted;\r\n            totalSoldInUSD += amountUSDT;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function balanceBNB () external onlyOwner(){\r\n        uint256 amount = address(this).balance;\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    function balanceERC20 (address token, address to) external onlyOwner(){\r\n        IERC20(token).transfer(to, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function setPercent (uint256 _percent) external onlyOwner(){\r\n        percent = _percent;\r\n    }\r\n\r\n    function setLimits(uint256 _minBNBbuy, uint256 _maxBNBbuy) external onlyOwner(){\r\n        minBNBbuy = _minBNBbuy;\r\n        maxBNBbuy = _maxBNBbuy;\r\n    }\r\n\r\n    function setIsOpenBuyTokens (bool _isOpenBuyTokens) external onlyOwner(){\r\n        isOpenBuyTokens = _isOpenBuyTokens;\r\n    }\r\n\r\n    function setHardCapBuyTokens (uint256 _hardCapBuyTokens) external onlyOwner(){\r\n        hardCapBuyTokens = _hardCapBuyTokens;\r\n    }\r\n\r\n    function setErrorMargin (uint256 _errorMargin) external onlyOwner(){\r\n        errorMargin = _errorMargin;\r\n    }\r\n\r\n    function setRestBNBfees (uint256 _restBNBfees) external onlyOwner(){\r\n        restBNBfees = _restBNBfees;\r\n    }\r\n\r\n    function setPrices (\r\n        uint256 _priceBNB,\r\n        uint256 _priceUSD,\r\n        uint256 _denominatorUSD\r\n        ) external onlyOwner(){\r\n\r\n        priceBNB = _priceBNB;\r\n        priceUSD = _priceUSD;\r\n        denominatorUSD = _denominatorUSD;\r\n    }\r\n\r\n    function setAuthWallet(address _authWallet) external onlyOwner() {\r\n        authWallet = _authWallet;\r\n    }\r\n\r\n    function setAddressBLF(address _addressBLF) external onlyOwner() {\r\n        addressBLF = _addressBLF;\r\n    }\r\n\r\n    function setAddresses(\r\n        address _uniswapV2Router,\r\n        address _addressBUSD,\r\n        address _addressUSDC,\r\n        address _addressUSDT,\r\n        address _addressWETH,\r\n        address _addressBLF\r\n        ) external onlyOwner() {\r\n\r\n        uniswapV2Router     = _uniswapV2Router;\r\n        addressBUSD         = _addressBUSD;\r\n        addressUSDC         = _addressUSDC;\r\n        addressUSDT         = _addressUSDT;\r\n        addressWETH         = _addressWETH;\r\n        addressBLF       = _addressBLF;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressBLF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressBUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressFromTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressFundsReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressUSDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressUSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressWETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"balanceERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBuyTokens_BNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBUSD\",\"type\":\"uint256\"}],\"name\":\"buyBuyTokens_BUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDC\",\"type\":\"uint256\"}],\"name\":\"buyBuyTokens_USDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"buyBuyTokens_USDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominatorUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"errorMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getLimitToBuy_BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getLimitToBuy_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getMappingStructBuy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountTokenPurchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBNBpaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBUSDpaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDCpaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDTpaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBNBPaidConverted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDPaidConverted\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyBLFtokens.structBuy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getTokensOut_BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getTokensOut_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCapBuyTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpenBuyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBNBbuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUSDbuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBNBbuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUSDbuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restBNBfees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressBLF\",\"type\":\"address\"}],\"name\":\"setAddressBLF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressBUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressUSDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressUSDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressWETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressBLF\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authWallet\",\"type\":\"address\"}],\"name\":\"setAuthWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_errorMargin\",\"type\":\"uint256\"}],\"name\":\"setErrorMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardCapBuyTokens\",\"type\":\"uint256\"}],\"name\":\"setHardCapBuyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpenBuyTokens\",\"type\":\"bool\"}],\"name\":\"setIsOpenBuyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBNBbuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBNBbuy\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominatorUSD\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_restBNBfees\",\"type\":\"uint256\"}],\"name\":\"setRestBNBfees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDeployContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBNBpaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSoldInBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSoldInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensBLF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDpaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BuyBLFtokens", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c77c2e61526662be56f1ee3637f0d91c08144db2841124f4e950fd4b75247aac"}