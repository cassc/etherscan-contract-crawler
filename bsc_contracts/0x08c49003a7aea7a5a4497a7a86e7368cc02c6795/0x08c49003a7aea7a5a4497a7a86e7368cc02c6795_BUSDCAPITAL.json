{"SourceCode": "pragma solidity ^ 0.6.2;\r\n\r\n interface IERC20 {\r\n \tfunction totalSupply() external pure returns(uint256);\r\n    function decimals() external view returns (uint8);\r\n \tfunction balanceOf(address account) external view returns(uint256);\r\n \tfunction transfer(address recipient, uint256 amount) external returns(bool);\r\n \tfunction allowance(address owner, address spender) external view returns(uint256);\r\n \tfunction approve(address spender, uint256 amount) external returns(bool);\r\n \tfunction transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n \tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n \tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n }\r\n\r\n library SafeMath {\r\n \tfunction add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n \t\tuint256 c = a + b;\r\n \t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n \t\treturn c;\r\n \t}\r\n\r\n \tfunction sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n \t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n \t}\r\n\r\n \tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n \t\trequire(b <= a, errorMessage);\r\n \t\tuint256 c = a - b;\r\n \t\treturn c;\r\n \t}\r\n\r\n \tfunction mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n \t\t// benefit is lost if 'b' is also tested.\r\n \t\tif (a == 0) {\r\n \t\t\treturn 0;\r\n \t\t}\r\n \t\tuint256 c = a * b;\r\n \t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n \t\treturn c;\r\n \t}\r\n\r\n \tfunction div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n \t\treturn div(a, b, \"SafeMath: division by zero\");\r\n \t}\r\n\r\n \tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n \t\trequire(b > 0, errorMessage);\r\n \t\tuint256 c = a / b;\r\n \t\treturn c;\r\n \t}\r\n\r\n \tfunction mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n \t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n \t}\r\n\r\n \tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n \t\trequire(b != 0, errorMessage);\r\n \t\treturn a % b;\r\n \t}\r\n }\r\n\r\n library Address {\r\n \tfunction isContract(address account) internal view returns(bool) {\r\n \t\tbytes32 codehash;\r\n \t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n \t\tassembly {\r\n \t\t\tcodehash:= extcodehash(account)\r\n \t\t}\r\n \t\treturn (codehash != accountHash && codehash != 0x0);\r\n \t}\r\n\r\n \tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n \t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n \t\t(bool success, ) = recipient.call {\r\n \t\t\tvalue: amount\r\n \t\t}(\"\");\r\n \t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n \t}\r\n\r\n \tfunction functionCall(address target, bytes memory data) internal returns(bytes memory) {\r\n \t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n \t}\r\n\r\n \tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns(bytes memory) {\r\n \t\treturn _functionCallWithValue(target, data, 0, errorMessage);\r\n \t}\r\n\r\n \tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns(bytes memory) {\r\n \t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n \t}\r\n\r\n \tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns(bytes memory) {\r\n \t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n \t\treturn _functionCallWithValue(target, data, value, errorMessage);\r\n \t}\r\n\r\n \tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns(bytes memory) {\r\n \t\trequire(isContract(target), \"Address: call to non-contract\");\r\n \t\t(bool success, bytes memory returndata) = target.call {\r\n \t\t\tvalue: weiValue\r\n \t\t}(data);\r\n \t\tif (success) {\r\n \t\t\treturn returndata;\r\n \t\t} else {\r\n \t\t\tif (returndata.length > 0) {\r\n\r\n \t\t\t\tassembly {\r\n \t\t\t\t\tlet returndata_size:= mload(returndata)\r\n \t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n \t\t\t\t}\r\n \t\t\t} else {\r\n \t\t\t\trevert(errorMessage);\r\n \t\t\t}\r\n \t\t}\r\n \t}\r\n }\r\n\r\n\r\n\r\n abstract contract Context {\r\n \tfunction _msgSender() internal view virtual returns(address payable) {\r\n \t\treturn msg.sender;\r\n \t}\r\n\r\n \tfunction _msgData() internal view virtual returns(bytes memory) {\r\n \t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n \t\treturn msg.data;\r\n \t}\r\n }\r\n\r\n\r\n contract Ownable is Context {\r\n \taddress private _owner;\r\n \tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \tconstructor() internal {\r\n \t\taddress msgSender = _msgSender();\r\n \t\t_owner = msgSender;\r\n \t\temit OwnershipTransferred(address(0), msgSender);\r\n \t}\r\n\r\n \tfunction owner() public view returns(address) {\r\n \t\treturn _owner;\r\n \t}\r\n \tmodifier onlyOwner() {\r\n \t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n \t\t_;\r\n \t}\r\n\r\n \tfunction renounceOwnership() public virtual onlyOwner {\r\n \t\temit OwnershipTransferred(_owner, address(0));\r\n \t\t_owner = address(0);\r\n \t}\r\n\r\n \tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n \t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n \t\temit OwnershipTransferred(_owner, newOwner);\r\n \t\t_owner = newOwner;\r\n \t}\r\n }\r\n\r\n\r\n\r\n contract BUSDCAPITAL is Ownable {\r\n \tusing SafeMath\r\n \tfor uint256;\r\n\r\n  struct UserData {\r\n           uint256 userid;\r\n           uint256 amountdp;\r\n           uint256 amountwd;\r\n           uint256 uplineid;\r\n           uint256 limit;\r\n           address addr;\r\n           uint256 blockdeposit;\r\n       }\r\n\r\n   struct HistoryDp \r\n        {\r\n           address addr ;\r\n           uint256 userid;\r\n           uint256 amount;\r\n           uint  time;\r\n\t\t   uint256 blockdeposit;\r\n        }\r\n\r\n    struct HistoryWd {\r\n          address addr;\r\n          uint256 userid;\r\n          uint256 amount;\r\n          uint  time;\r\n        } \r\n\r\n     struct HistoryWdB {\r\n          address addr;\r\n          uint256 userid;\r\n          uint256 amount;\r\n          uint  time;\r\n        } \r\n\r\n\r\n\tmapping(address => uint256) public UseridByAddr;\r\n    mapping(uint256 => address) public AddrByUserid;\r\n    mapping(uint256 => bool) public UserIdExist;\r\n    \r\n   \r\n \tmapping(address => UserData) public userInfo;\r\n\tmapping(uint256 => HistoryDp) public userDeposit;\r\n\tmapping(uint256 => HistoryWd) public userWithdraw;\r\n    mapping(uint256 => HistoryWdB) public userWithdrawB;\r\n\r\n\tmapping(uint256 => uint256) public UplineIdById;\r\n    address[] public UserList;\r\n\r\n\tuint256 public DepositLength;\r\n\tuint256 public WithdrawLength;\r\n    uint256 public WithdrawbLength;\r\n    uint256 public TotalDeposit;\r\n    uint256 public TotalWithdraw;\r\n\r\n\r\n\taddress BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address SERVER;\r\n    address NETWORK;\r\n\t \r\n\r\n\tconstructor() public {\r\n\t\tSERVER =  address(msg.sender); \r\n        NETWORK =  address(msg.sender); \r\n \t}\r\n\r\n    function updateserver(address server,address network) public onlyOwner {\r\n        if(server!=address(0))SERVER = server;\r\n        if(network!=address(0))NETWORK = network;\r\n    }\r\n\r\n    function deposit(uint256 amount) public {\r\n        if(amount>0){} else return;\r\n\t\taddress useraddress = address(msg.sender);\r\n\t\tif(UseridByAddr[useraddress] == 0)return;\r\n        UserData storage user = userInfo[useraddress];\r\n\t\tHistoryDp storage dp = userDeposit[DepositLength];\r\n        if(user.amountdp.sub(user.amountwd).add(amount)>user.limit) return;\r\n\r\n\t\tIERC20(BUSD).transferFrom(address(msg.sender), SERVER, amount);\r\n\t \r\n\t\t//update data deposit\r\n\t\tdp.addr = useraddress;\r\n        dp.userid = user.userid;\r\n        dp.amount = amount;\r\n        dp.time= now;\r\n\t\tdp.blockdeposit =block.number;\r\n\r\n\t    //add to user data\r\n\t\tuser.amountdp = user.amountdp.add(amount);\r\n        user.blockdeposit =block.number;\r\n\t \r\n\t\t//data\r\n\t\tTotalDeposit = TotalDeposit.add(amount);\r\n\t\tDepositLength++;\r\n\r\n\t}\r\n\r\n    function withdraw(uint256 amount) public {\r\n\t\taddress useraddress = address(msg.sender);\r\n\t\tif(UseridByAddr[useraddress] == 0)return;\r\n\t\tUserData storage user = userInfo[useraddress];\r\n\t\tHistoryWd storage wd = userWithdraw[WithdrawLength];\r\n\t\tif(user.addr != useraddress) return;//not your\r\n\t\tuint256 withdrawable = user.amountdp.sub(user.amountwd);\r\n        if(withdrawable<amount) return;\r\n\t\t \r\n        uint256 amountsend  = amount;\r\n        if(user.blockdeposit>block.number.sub(862590))amountsend = amount.mul(95).div(100);\r\n        wd.addr = useraddress;\r\n        wd.userid = user.userid;\r\n        wd.amount = amountsend;\r\n        wd.time = now;\r\n\t\t\r\n\t\t//data\r\n\t\tuser.amountwd = user.amountwd.add(amount);\r\n        TotalWithdraw = TotalWithdraw.add(amount);\r\n        WithdrawLength++;\r\n\t \t\r\n\t}\r\n\r\n    function withdrawb() public {\r\n\t\taddress useraddress = address(msg.sender);\r\n\t\tif(UseridByAddr[useraddress] == 0)return;\r\n\t\tUserData storage user = userInfo[useraddress];\r\n\t\tHistoryWdB storage wd = userWithdrawB[WithdrawbLength];\r\n\t\t \r\n        wd.addr   = useraddress;\r\n        wd.userid = user.userid;\r\n        wd.time = now;\r\n\t\t \r\n        WithdrawbLength++;\r\n\t \t\r\n\t}\r\n\r\n    function register(uint256 userid,uint256 upline,uint256 package) public {\r\n        address useraddress = address(msg.sender);\r\n\t\tif(userid==1)AddrByUserid[upline]=useraddress;\r\n        if(UseridByAddr[useraddress]>0)return;\r\n        UserData storage user = userInfo[useraddress];\r\n\t\tif(UserIdExist[upline] == false && upline > 1)return;\r\n        if(UserIdExist[userid] == false)\r\n        if(user.userid==0){\r\n            uint256 amount = 10e18;\r\n            if(package==2)amount =  25e18;\r\n            if(package==3)amount =  50e18;\r\n            if(package==4)amount =  100e18;\r\n            if(package==5)amount =  500e18;\r\n            if(package==6)amount =  1000e18;\r\n            if(package>6)return;\r\n            \r\n            IERC20(BUSD).transferFrom(address(msg.sender), NETWORK, amount);\r\n\r\n            user.userid = userid;\r\n            user.amountdp = 0;\r\n            user.uplineid = upline;\r\n            user.limit = amount.mul(10);\r\n            user.addr  = useraddress;\r\n\r\n            UplineIdById[userid] = upline;\r\n            UserList.push(useraddress);\r\n            UseridByAddr[useraddress] = userid;\r\n            AddrByUserid[userid]=useraddress;\r\n            UserIdExist[userid] = true;\r\n        }\r\n    }\r\n\r\n \r\n }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AddrByUserid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DepositLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UplineIdById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UserIdExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UserList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UseridByAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawbLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"package\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"network\",\"type\":\"address\"}],\"name\":\"updateserver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockdeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountwd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uplineid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockdeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userWithdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userWithdrawB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BUSDCAPITAL", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef52f84b6be7930515a46f4d5de73f9cfd198248ab0847a62847b1e2cd0ee599"}