{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/module/insurance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Insurance is Ownable {\\n    // variable general\\n    address payable private admin;\\n    uint256 public totalInsurance;\\n    uint256 public quantity_nain_eligible_for_incentives;\\n    address public address_nain;\\n    bool public enable_user_nain;\\n    bool public enable_buy_insurance;\\n    IERC20 token_nain;\\n    IERC20 usdt;\\n\\n    constructor(address _addressUSDT) {\\n        admin = payable(msg.sender);\\n        totalInsurance = 0;\\n        usdt = IERC20(_addressUSDT);\\n        quantity_nain_eligible_for_incentives = 99 * 10**18;\\n        enable_user_nain = false;\\n        enable_buy_insurance = true;\\n    }\\n\\n    // insurance struct\\n    struct InsuranceStruct {\\n        uint256 idInsurance;\\n        address buyer;\\n        string asset;\\n        uint256 margin;\\n        uint256 q_covered;\\n        uint256 p_market;\\n        uint256 p_claim;\\n        string state;\\n        uint256 period;\\n        uint256 recognition_date;\\n        uint256 expired;\\n        bool isUseNain;\\n    }\\n\\n    mapping(uint256 => InsuranceStruct) private insurance;\\n\\n    /*\\n     @event\\n    **/\\n    event EBuyInsurance(\\n        uint256 idInsurance,\\n        address buyer,\\n        string asset,\\n        uint256 margin,\\n        uint256 q_covered,\\n        uint256 p_market,\\n        uint256 p_claim,\\n        string state,\\n        uint256 period,\\n        uint256 recognition_date,\\n        bool isUseNain\\n    );\\n    event EUpdateStateInsurance(uint256 idInsurance);\\n    event EUpdateQuantityNainEligibleForIncentives(\\n        uint256 quantity_nain_eligible_for_incentives\\n    );\\n    event ECancelStateInsurance(uint256 idInsurnace);\\n    event EValidInsurance(uint256 idInsurnace);\\n\\n    // Only owner has permission to perform this function\\n    modifier onlyContractCaller(address _caller) {\\n        require(\\n            msg.sender == _caller,\\n            \\\"Only the person who is calling the contract will be executed\\\"\\n        );\\n        _;\\n    }\\n    modifier checkAllowance(uint256 amount) {\\n        require(\\n            usdt.allowance(msg.sender, address(this)) >= amount,\\n            \\\"Error allowance\\\"\\n        );\\n        _;\\n    }\\n\\n    function configAddressNain(address _address_nain) external onlyOwner {\\n        address_nain = _address_nain;\\n        token_nain = IERC20(_address_nain);\\n        enable_user_nain = true;\\n    }\\n\\n    function renounceNain() external onlyOwner {\\n        enable_user_nain = false;\\n    }\\n\\n    function enableNain() external {\\n        enable_user_nain = true;\\n    }\\n\\n    function updateQuantityNainEligibleForIncentives(uint256 _quantity)\\n        external\\n        onlyOwner\\n    {\\n        quantity_nain_eligible_for_incentives = _quantity;\\n    }\\n\\n    function insuranceState(uint256 _insuranceId)\\n        external\\n        view\\n        returns (InsuranceStruct memory)\\n    {\\n        return insurance[_insuranceId];\\n    }\\n\\n    function createInsurance(\\n        address _buyer,\\n        string memory _asset,\\n        uint256 _margin,\\n        uint256 _q_covered,\\n        uint256 _p_market,\\n        uint256 _p_claim,\\n        uint256 _period,\\n        bool _isUseNain\\n    )\\n        external\\n        payable\\n        onlyContractCaller(_buyer)\\n        checkAllowance(_margin)\\n        returns (InsuranceStruct memory)\\n    {\\n        require(\\n            _period >= 1 && _period <= 15,\\n            \\\"The time must be within the specified range 1 - 15\\\"\\n        );\\n        require(\\n            usdt.balanceOf(address(msg.sender)) >= _margin,\\n            \\\"USDT does't enough\\\"\\n        );\\n\\n        if (!enable_buy_insurance) {\\n            revert(\\\"Feature buy insurance is disabled\\\");\\n        }\\n\\n        if (_isUseNain && !enable_user_nain) {\\n            revert(\\\"Feature use nain is disabled\\\");\\n        }\\n\\n        if (_isUseNain && enable_user_nain) {\\n            require(\\n                token_nain.balanceOf(address(msg.sender)) >=\\n                    quantity_nain_eligible_for_incentives,\\n                \\\"NAIN does't enough, please check again!\\\"\\n            );\\n\\n            // transfer nain\\n            token_nain.transferFrom(\\n                msg.sender,\\n                admin,\\n                quantity_nain_eligible_for_incentives\\n            );\\n        }\\n\\n        InsuranceStruct memory newInsurance = InsuranceStruct(\\n            totalInsurance + 1,\\n            _buyer,\\n            _asset,\\n            _margin,\\n            _q_covered,\\n            _p_market,\\n            _p_claim,\\n            \\\"Available\\\",\\n            _period,\\n            0,\\n            block.timestamp,\\n            _isUseNain\\n        );\\n\\n        usdt.transferFrom(msg.sender, admin, _margin);\\n\\n        insurance[totalInsurance + 1] = newInsurance;\\n\\n        emit EBuyInsurance(\\n            totalInsurance + 1,\\n            _buyer,\\n            _asset,\\n            _margin,\\n            _q_covered,\\n            _p_market,\\n            _p_claim,\\n            \\\"Available\\\",\\n            _period,\\n            0,\\n            _isUseNain\\n        );\\n\\n        totalInsurance++;\\n\\n        return newInsurance;\\n    }\\n\\n    function cancelInsurance(uint256 _idInsurance)\\n        external\\n        onlyOwner\\n        returns (string memory)\\n    {\\n        require(\\n            compareString(insurance[_idInsurance].state, \\\"Available\\\"),\\n            \\\"State cannot be updated\\\"\\n        );\\n\\n        insurance[_idInsurance].state = \\\"Canceled\\\";\\n        insurance[_idInsurance].recognition_date = block.timestamp;\\n\\n        usdt.transferFrom(\\n            msg.sender,\\n            insurance[_idInsurance].buyer,\\n            insurance[_idInsurance].margin\\n        );\\n\\n        emit ECancelStateInsurance(_idInsurance);\\n\\n        return \\\"Update success\\\";\\n    }\\n\\n    function notAceptInsurance(uint256 _idInsurance)\\n        external\\n        onlyOwner\\n        returns (string memory)\\n    {\\n        require(\\n            compareString(insurance[_idInsurance].state, \\\"Available\\\"),\\n            \\\"State cannot be updated\\\"\\n        );\\n\\n        insurance[_idInsurance].state = \\\"Invalid\\\";\\n        insurance[_idInsurance].recognition_date = block.timestamp;\\n\\n        usdt.transferFrom(\\n            msg.sender,\\n            insurance[_idInsurance].buyer,\\n            insurance[_idInsurance].margin\\n        );\\n\\n        emit EValidInsurance(_idInsurance);\\n\\n        return \\\"Update success\\\";\\n    }\\n\\n    function updateStateInsurance(uint256 _idInsurance, string memory _state)\\n        external\\n        onlyOwner\\n        returns (string memory)\\n    {\\n        // validate state\\n        require(\\n            compareString(_state, \\\"Claim_waiting\\\") ||\\n                compareString(_state, \\\"Claimed\\\") ||\\n                compareString(_state, \\\"Refunded\\\") ||\\n                compareString(_state, \\\"Liquidated\\\") ||\\n                compareString(_state, \\\"Expired\\\"),\\n            \\\"State does not exist\\\"\\n        );\\n\\n        if (\\n            compareString(insurance[_idInsurance].state, \\\"Claimed\\\") ||\\n            compareString(insurance[_idInsurance].state, \\\"Refunded\\\") ||\\n            compareString(insurance[_idInsurance].state, \\\"Liquidated\\\") ||\\n            compareString(insurance[_idInsurance].state, \\\"Expired\\\") ||\\n            compareString(insurance[_idInsurance].state, \\\"Canceled\\\")\\n        ) {\\n            revert(\\\"State has been update\\\");\\n        }\\n        insurance[_idInsurance].state = _state;\\n        insurance[_idInsurance].recognition_date = block.timestamp;\\n\\n        emit EUpdateStateInsurance(_idInsurance);\\n\\n        return \\\"success\\\";\\n    }\\n\\n    function configInsurance(bool _mode) external onlyOwner {\\n        enable_buy_insurance = _mode;\\n    }\\n\\n    /*\\n     @helper\\n    **/\\n    function compareString(string memory a, string memory b)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressUSDT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idInsurance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"q_covered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"p_market\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"p_claim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"state\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recognition_date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUseNain\",\"type\":\"bool\"}],\"name\":\"EBuyInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idInsurnace\",\"type\":\"uint256\"}],\"name\":\"ECancelStateInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity_nain_eligible_for_incentives\",\"type\":\"uint256\"}],\"name\":\"EUpdateQuantityNainEligibleForIncentives\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idInsurance\",\"type\":\"uint256\"}],\"name\":\"EUpdateStateInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idInsurnace\",\"type\":\"uint256\"}],\"name\":\"EValidInsurance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"address_nain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idInsurance\",\"type\":\"uint256\"}],\"name\":\"cancelInsurance\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_nain\",\"type\":\"address\"}],\"name\":\"configAddressNain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_mode\",\"type\":\"bool\"}],\"name\":\"configInsurance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_asset\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_q_covered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_p_market\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_p_claim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isUseNain\",\"type\":\"bool\"}],\"name\":\"createInsurance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"idInsurance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"q_covered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p_market\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p_claim\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"state\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recognition_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expired\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUseNain\",\"type\":\"bool\"}],\"internalType\":\"struct Insurance.InsuranceStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableNain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enable_buy_insurance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enable_user_nain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_insuranceId\",\"type\":\"uint256\"}],\"name\":\"insuranceState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"idInsurance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"q_covered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p_market\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p_claim\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"state\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recognition_date\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expired\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUseNain\",\"type\":\"bool\"}],\"internalType\":\"struct Insurance.InsuranceStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idInsurance\",\"type\":\"uint256\"}],\"name\":\"notAceptInsurance\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quantity_nain_eligible_for_incentives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceNain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInsurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"updateQuantityNainEligibleForIncentives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idInsurance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_state\",\"type\":\"string\"}],\"name\":\"updateStateInsurance\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Insurance", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}