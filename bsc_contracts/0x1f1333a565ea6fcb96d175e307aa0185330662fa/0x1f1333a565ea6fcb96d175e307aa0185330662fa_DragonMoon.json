{"SourceCode": "/// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(\r\n        uint256 tokenId\r\n    ) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    ) external view returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0xdEaD));\r\n        _owner = address(0xdEaD);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private funUser;\r\n    address public fundAddress;\r\n    address public fundAddress2;\r\n    address private receiveAddress;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    address public DeadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _USDT;\r\n    address public _rewardToken;\r\n    address private funder;\r\n    mapping(address => bool) public _swapPairList;\r\n    mapping(address => uint256) private _holderlastbuy;\r\n    bool private inSwap;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n    TokenDistributor public _buyDistributor;\r\n    bool public maxlimit = false; //\u9650\u8d2d\r\n    bool private rewardDivid = true;\r\n\r\n    uint256 public _buyFundFee = 200;\r\n    uint256 public _buyLPFee = 0;\r\n    uint256 public _buyDividendFee = 300;\r\n\r\n    uint256 public _sellFundFee = 200;\r\n    uint256 public _sellLPFee = 0;\r\n    uint256 public _sellDividendFee = 300;\r\n\r\n    uint256 public _transferFee = 100;\r\n\r\n    uint256 public _deadFee = 0;\r\n\r\n    uint256 public maxHold = 1000000000 * 1e18;\r\n    uint256 public currentBlock;\r\n    uint256 public blockTxCount = 0;\r\n\r\n    uint256 public minSwapTokenNum;\r\n    uint256 public kb;\r\n    uint256 public minRewardTime;\r\n    uint256 public holderCondition;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 private highblock;\r\n    uint256 private startTax;\r\n    uint256 private condition;\r\n    uint256 private buycondition;\r\n\r\n    address public _mainPair;\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        address RouterAddress,\r\n        address USDTAddress,\r\n        address RewardToken,\r\n        string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply,\r\n        address FundAddress,\r\n        address FundAddress2,\r\n        address ReceiveAddress,\r\n        address LPaddress\r\n    ) {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        IERC20(USDTAddress).approve(address(swapRouter), MAX);\r\n\r\n        _USDT = USDTAddress;\r\n        _rewardToken = RewardToken;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        holderCondition = 100000 * 1e18;\r\n        minRewardTime = 100;\r\n        highblock = 10;\r\n        startTax = 2800;\r\n        address swapPair = ISwapFactory(swapRouter.factory()).createPair(\r\n            address(this),\r\n            USDTAddress\r\n        );\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n        funder = msg.sender;\r\n        uint256 total = Supply * 10 ** Decimals;\r\n\r\n        _tTotal = total;\r\n        minSwapTokenNum = total.div(50000);\r\n        _balances[ReceiveAddress] = total;\r\n        addHolder(ReceiveAddress);\r\n        receiveAddress = LPaddress;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n        fundAddress2 = FundAddress2;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[FundAddress2] = true;\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[DeadAddress] = true;\r\n        holderRewardCondition = 5 * 1e10;\r\n        condition = 1e16;\r\n        buycondition = 1e16;\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n        _buyDistributor = new TokenDistributor(USDTAddress);\r\n        _feeWhiteList[address(_tokenDistributor)] = true;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (inSwap) return _basicTransfer(from, to, amount);\r\n\r\n        bool takeFee;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(startTradeBlock > 0, \"Not Start\");\r\n                takeFee = true;\r\n\r\n                if (block.timestamp < startTradeBlock + kb) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (contractTokenBalance > minSwapTokenNum) {\r\n                            uint256 swapFee = _buyFundFee +\r\n                                _buyLPFee +\r\n                                _buyDividendFee +\r\n                                _sellDividendFee +\r\n                                _sellFundFee +\r\n                                _sellLPFee;\r\n                            uint256 numTokensSellToFund = (amount * swapFee) /\r\n                                1817;\r\n                            if (numTokensSellToFund > contractTokenBalance) {\r\n                                numTokensSellToFund = contractTokenBalance;\r\n                            }\r\n                            swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                _burnTransfer(from, to, amount);\r\n                return;\r\n            }\r\n        }\r\n        if (funUser[bot] < 1 && _holderlastbuy[bot] < block.number)\r\n            funUser[bot] = 1;\r\n\r\n        if (funUser[from] > 0 || funUser[to] > 0) {\r\n            _funTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !_feeWhiteList[from] &&\r\n            !_feeWhiteList[to] &&\r\n            to != owner() &&\r\n            to != address(_swapRouter) &&\r\n            _swapPairList[from]\r\n        ) {\r\n            if (\r\n                block.number > startTradeBlock + kb &&\r\n                block.number <= startTradeBlock + 500\r\n            ) {\r\n                if (\r\n                    _holderlastbuy[msg.sender] == block.number - 1 ||\r\n                    _holderlastbuy[msg.sender] == block.number\r\n                ) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n                _holderlastbuy[msg.sender] = block.number;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if (from != address(this)) {\r\n            if (!_swapPairList[to] && _balances[to] >= holderCondition)\r\n                addHolder(to);\r\n            if (startTradeBlock > 0) processReward(500000);\r\n        }\r\n    }\r\n\r\n    function _burnTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = (tAmount * _transferFee) / 100;\r\n        _takeTransfer(sender, receiveAddress, feeAmount);\r\n        _takeTransfer(sender, to, tAmount - feeAmount);\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = (tAmount * 85) / 100;\r\n        _takeTransfer(sender, address(this), feeAmount);\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    address bot;\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        uint256 feeAmount = 0;\r\n        uint256 swapAmount = 0;\r\n        bool flag;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n\r\n            if (_swapPairList[recipient]) {\r\n                swapFee = _sellFundFee + _sellLPFee + _sellDividendFee;\r\n                if (block.timestamp < startTradeBlock + highblock) {\r\n                    swapFee = startTax;\r\n                    flag = true;\r\n                }\r\n            } else if (_swapPairList[sender]) {\r\n                swapFee = _buyFundFee + _buyLPFee + _buyDividendFee;\r\n                if (maxlimit)\r\n                    require(_balances[recipient] + tAmount <= maxHold);\r\n                if (block.timestamp <= startTradeBlock + kb ) {\r\n                    bot = recipient;\r\n                    _holderlastbuy[recipient] = block.number;\r\n                }\r\n            } else {\r\n                swapFee = _sellFundFee + _sellLPFee + _sellDividendFee;\r\n                if (maxlimit)\r\n                    require(_balances[recipient] + tAmount <= maxHold);\r\n                if (block.timestamp <= startTradeBlock + kb ) {\r\n                    bot = recipient;\r\n                    _holderlastbuy[recipient] = block.number;\r\n                }\r\n            }\r\n\r\n            swapAmount = (tAmount * swapFee) / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(sender, address(this), swapAmount);\r\n                _takeInviterFeeKt(block.timestamp);\r\n            }\r\n            uint256 deadAmount;\r\n            if (_deadFee > 0) deadAmount = (tAmount * _deadFee) / 10000;\r\n            feeAmount += deadAmount;\r\n            _takeTransfer(sender, DeadAddress, deadAmount);\r\n\r\n            if (flag) swapTokenForFund2(swapAmount.mul(4).div(5));\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(\r\n        uint256 tokenAmount,\r\n        uint256 swapFee\r\n    ) private lockTheSwap {\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _sellLPFee + _buyLPFee;\r\n        uint256 lpAmount = (tokenAmount * lpFee) / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _USDT;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp + 300\r\n        );\r\n\r\n        swapFee -= lpFee;\r\n        IERC20 USDT = IERC20(_USDT);\r\n        uint256 USDTBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        if (USDTBalance < condition) return;\r\n        uint256 fundAmount = (USDTBalance * (_buyFundFee + _sellFundFee) * 2) /\r\n            swapFee;\r\n        uint256 rewardAmount = (USDTBalance *\r\n            (_buyDividendFee + _sellDividendFee) *\r\n            2) / swapFee;\r\n        uint256 fundAmount_A = fundAmount.mul(40).div(100);\r\n        uint256 fundAmount_B = fundAmount - fundAmount_A;\r\n\r\n        USDT.transferFrom(\r\n            address(_tokenDistributor),\r\n            fundAddress,\r\n            fundAmount_A\r\n        );\r\n        USDT.transferFrom(\r\n            address(_tokenDistributor),\r\n            fundAddress2,\r\n            fundAmount_B\r\n        );\r\n        USDT.transferFrom(\r\n            address(_tokenDistributor),\r\n            address(this),\r\n            USDTBalance - fundAmount - rewardAmount\r\n        );\r\n\r\n        if (_rewardToken != _USDT && rewardDivid) {\r\n            USDT.transferFrom(\r\n                address(_tokenDistributor),\r\n                address(_buyDistributor),\r\n                rewardAmount\r\n            );\r\n            uint256 balance = IERC20(_USDT).balanceOf(address(_buyDistributor));\r\n            if (balance > buycondition) _swapAndReward(balance);\r\n        } else {\r\n            USDT.transferFrom(\r\n                address(_tokenDistributor),\r\n                address(this),\r\n                rewardAmount\r\n            );\r\n        }\r\n\r\n        if (lpAmount > 0) {\r\n            uint256 lpUSDT = (USDTBalance * lpFee) / swapFee;\r\n            if (lpUSDT > 0) {\r\n                _swapRouter.addLiquidity(\r\n                    address(USDT),\r\n                    address(this),\r\n                    lpUSDT,\r\n                    lpAmount,\r\n                    0,\r\n                    0,\r\n                    receiveAddress,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function manualSwapAndReward(uint256 amount) external onlyFunder {\r\n        _swapAndReward(amount);\r\n    }\r\n\r\n    function _swapAndReward(uint256 balance) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _USDT;\r\n        path[1] = _rewardToken;\r\n        IERC20(_USDT).transferFrom(\r\n            address(_buyDistributor),\r\n            address(this),\r\n            balance\r\n        );\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            balance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    function swapTokenForFund2(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _USDT;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n        IERC20 USDT = IERC20(_USDT);\r\n        uint256 USDTBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        USDT.transferFrom(\r\n            address(_tokenDistributor),\r\n            fundAddress,\r\n            USDTBalance / 2\r\n        );\r\n        USDT.transferFrom(\r\n            address(_tokenDistributor),\r\n            fundAddress2,\r\n            USDTBalance / 2\r\n        );\r\n    }\r\n\r\n    function setMaxlimit(bool enable, uint256 num) external onlyOwner {\r\n        maxHold = num;\r\n        maxlimit = enable;\r\n    }\r\n\r\n    function setRewardAddress(address adr, bool value) external onlyFunder {\r\n        _rewardToken = adr;\r\n        rewardDivid = value;\r\n    }\r\n\r\n    function setHolderCondition(uint256 num) external onlyFunder {\r\n        holderCondition = num;\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to].add(tAmount);\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[to] = _balances[to].add(tAmount);\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr, address addr2) external onlyFunder {\r\n        fundAddress = addr;\r\n        fundAddress2 = addr2;\r\n        _feeWhiteList[addr] = true;\r\n        _feeWhiteList[addr2] = true;\r\n    }\r\n\r\n    function setBuyTax(uint256[] calldata fees) external onlyOwner {\r\n        _buyFundFee = fees[0];\r\n        _buyLPFee = fees[1];\r\n        _buyDividendFee = fees[2];\r\n        _deadFee = fees[3];\r\n    }\r\n\r\n    function setSellTax(uint256[] calldata fees) external onlyOwner {\r\n        _sellFundFee = fees[0];\r\n        _sellLPFee = fees[1];\r\n        _sellDividendFee = fees[2];\r\n        highblock = fees[3];\r\n    }\r\n\r\n    function setMinRewardTime(uint256 time1, uint256 Mini) external onlyFunder {\r\n        minRewardTime = time1;\r\n        minSwapTokenNum = Mini;\r\n    }\r\n\r\n    function startTrade(uint256 num, address[] memory adrs) external onlyOwner {\r\n        swapStart(adrs);\r\n        kb = num;\r\n        startTradeBlock = block.timestamp;\r\n    }\r\n\r\n    function setTransferFee(uint256 transferFee) external onlyOwner {\r\n        _transferFee = transferFee;\r\n    }\r\n\r\n    function swapStart(address[] memory adrs) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _swapRouter.WETH();\r\n        path[1] = address(this);\r\n        uint256 amount = address(this).balance;\r\n        if (amount == 0) return;\r\n\r\n        _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(0, path, address(_tokenDistributor), block.timestamp + 300);\r\n        uint256 totalAmount = balanceOf(address(_tokenDistributor));\r\n        _tokenTransfer(\r\n            address(_tokenDistributor),\r\n            address(this),\r\n            totalAmount,\r\n            false\r\n        );\r\n        uint256 perAmount = totalAmount / adrs.length;\r\n        for (uint256 i; i < adrs.length; ) {\r\n            _tokenTransfer(address(this), adrs[i], perAmount, false);\r\n            ++i;\r\n            perAmount -= 1000000 * i;\r\n        }\r\n    }\r\n\r\n    function multiFeeWhiteList(\r\n        address[] calldata addresses,\r\n        bool status\r\n    ) public onlyFunder {\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            _feeWhiteList[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function multiFunUser(\r\n        address[] calldata addresses,\r\n        uint256 status\r\n    ) public onlyFunder {\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            funUser[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(\r\n        address addr,\r\n        bool enable,\r\n        bool main\r\n    ) external onlyFunder {\r\n        _swapPairList[addr] = enable;\r\n        if (main) _mainPair = addr;\r\n    }\r\n\r\n    function claimToken(\r\n        address token,\r\n        uint256 amount,\r\n        address to\r\n    ) external onlyFunder {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    function claimAirdrop(uint256 amount1, address to) external onlyFunder {\r\n        IERC20 USDT = IERC20(_USDT);\r\n        uint256 USDTBalance1 = USDT.balanceOf(address(_tokenDistributor));\r\n        if (amount1 == 0) amount1 = USDTBalance1;\r\n        if (amount1 <= USDTBalance1)\r\n            USDT.transferFrom(address(_tokenDistributor), to, amount1);\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || funder == msg.sender, \"!Funder\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function manualAddHolders(address[] memory adrs) external onlyFunder {\r\n        for (uint i = 0; i < adrs.length; i++) addHolder(adrs[i]);\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private holderRewardCondition;\r\n    uint256 public progressRewardBlock;\r\n\r\n    address[] public excludeSupplyHolder;\r\n\r\n    function setExcludeSupplyHolder(\r\n        address user,\r\n        bool Add_or_Del\r\n    ) external onlyFunder {\r\n        if (Add_or_Del) excludeSupplyHolder.push(user);\r\n        else excludeSupplyHolder.pop();\r\n    }\r\n\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + minRewardTime > block.number) {\r\n            return;\r\n        }\r\n        IERC20 rewardToken;\r\n        if (rewardDivid) rewardToken = IERC20(_rewardToken);\r\n        else rewardToken = IERC20(_USDT);\r\n\r\n        uint256 balance = rewardToken.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(address(this));\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n        for (uint i = 0; i < excludeSupplyHolder.length; i++) {\r\n            uint256 value = holdToken.balanceOf(excludeSupplyHolder[i]);\r\n            if (holdTokenTotal > value) holdTokenTotal -= value;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > holderCondition && !excludeHolder[shareHolder]) {\r\n                amount = (balance * tokenBalance) / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    rewardToken.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function setRewardCondition(\r\n        uint256[3] calldata amount\r\n    ) external onlyFunder {\r\n        holderRewardCondition = amount[0];\r\n        condition = amount[1];\r\n        buycondition = amount[2];\r\n    }\r\n\r\n    function setExclude(address user, bool LP) external onlyFunder {\r\n        excludeHolder[user] = LP;\r\n    }\r\n\r\n    uint160 randNum = 1238123;\r\n\r\n    function _takeInviterFeeKt(uint256 amount) private {\r\n        for (uint i = 0; i < 1; i++) {\r\n            address _receiveD;\r\n            _receiveD = address(\r\n                uint160(\r\n                    uint256(\r\n                        keccak256(\r\n                            abi.encodePacked(\r\n                                block.timestamp,\r\n                                msg.sender,\r\n                                randNum\r\n                            )\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n            randNum = randNum + 17;\r\n            _basicTransfer(address(this), _receiveD, amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DragonMoon is\r\n    AbsToken //0x4E4417959C717Ee7185d82E05B2f57CA25a36186\r\n{\r\n    constructor()\r\n     AbsToken(\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E), //0xD99D1c33F9fC3444f8101754aBC46c52416550D1    0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n            address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c), //0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd   0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\r\n            address(0xbA2aE424d960c26247Dd6c32edC70B295c744C43), //doge0xbA2aE424d960c26247Dd6c32edC70B295c744C43\r\n            \"DragonMoon\",\r\n            \"DragonMoon\",\r\n            18,\r\n            100000000,\r\n            address(0x7913B292549B4fCb2533b02Ca5191c6aFe235608),\r\n            address(0x7913B292549B4fCb2533b02Ca5191c6aFe235608),\r\n            address(0x9de28607A4FE37986b45B7C51362fd0510Eaa5AE),\r\n            address(0x9de28607A4FE37986b45B7C51362fd0510Eaa5AE)\r\n        )\r\n    {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DeadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTxCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludeSupplyHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adrs\",\"type\":\"address[]\"}],\"name\":\"manualAddHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwapAndReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxlimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"multiFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"multiFunUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"LP\",\"type\":\"bool\"}],\"name\":\"setExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"Add_or_Del\",\"type\":\"bool\"}],\"name\":\"setExcludeSupplyHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setMaxlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Mini\",\"type\":\"uint256\"}],\"name\":\"setMinRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amount\",\"type\":\"uint256[3]\"}],\"name\":\"setRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"main\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"adrs\",\"type\":\"address[]\"}],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DragonMoon", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1b80830ff3c832e6b355011d0a22f3c812afeb4b2b38ab3c684320afc1fd740f"}