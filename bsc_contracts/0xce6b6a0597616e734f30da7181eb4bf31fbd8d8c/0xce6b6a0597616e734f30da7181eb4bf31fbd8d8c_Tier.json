{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/data/StructData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary StructData {\\n    // struct to store staked NFT information\\n    struct StakedNFT {\\n        address stakerAddress;\\n        uint256 lastClaimedTime;\\n        uint256 unlockTime;\\n        uint256 totalValueStakeUsdWithDecimal;\\n        uint256 totalClaimedAmountTokenWithDecimal;\\n        bool isUnstaked;\\n    }\\n\\n    struct ChildListData {\\n        address[] childList;\\n        uint256 memberCounter;\\n    }\\n\\n    struct ListBuyData {\\n        StructData.InfoBuyData[] childList;\\n    }\\n\\n    struct InfoBuyData {\\n        uint256 timeBuy;\\n        uint256 valueUsd;\\n    }\\n\\n    struct ListSwapData {\\n        StructData.InfoSwapData[] childList;\\n    }\\n\\n    struct InfoSwapData {\\n        uint256 timeSwap;\\n        uint256 valueSwap;\\n    }\\n\\n    struct ListMaintenance {\\n        StructData.InfoMaintenanceNft[] childList;\\n    }\\n\\n    struct InfoMaintenanceNft {\\n        uint256 startTimeRepair;\\n        uint256 endTimeRepair;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tier/ITier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface ITier {\\n    function setNftTierEarnPerDay(uint32 _nftTier, uint256 _nftTierEarnPerDay) external;\\n    \\n    function setNftTierExactly(uint32 _nftTier, uint256[] calldata _startTime, uint256[] calldata _endTime, uint256[] calldata _tokenEarn) external;\\n\\n    function getStartTime(uint32 _nftTier) external view returns (uint256[] memory);\\n\\n    function getEndTime(uint32 _nftTier) external view returns (uint256[] memory);\\n\\n    function getTokenEarn(uint32 _nftTier) external view returns (uint256[] memory);\\n\\n    function getMaxIndex(uint32 _nftTier) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tier/Tier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"./ITier.sol\\\";\\nimport \\\"../data/StructData.sol\\\";\\n\\ncontract Tier is ITier, Ownable, ERC721Holder {\\n    // mapping to store reward NFT Tier ean per day\\n    mapping(uint32 => uint256[]) public startTime;\\n\\n    mapping(uint32 => uint256[]) public endTime;\\n\\n    mapping(uint32 => uint256[]) public tokenEarn;\\n\\n    constructor() {\\n        initNftTierEarnPerDay();\\n    }\\n\\n    /**\\n     * @dev init stake apr for each NFT ID\\n     */\\n    function initNftTierEarnPerDay() internal {\\n        startTime[7] = [0, 1699105860];\\n        endTime[7] = [1699105860, 0];\\n        tokenEarn[7] = [567, 633];\\n        startTime[6] = [0, 1699105860];\\n        endTime[6] = [1699105860, 0];\\n        tokenEarn[6] = [1653, 1847];\\n        startTime[5] = [0, 1699105860];\\n        endTime[5] = [1699105860, 0];\\n        tokenEarn[5] = [3778, 4222];\\n        startTime[4] = [0, 1699105860];\\n        endTime[4] = [1699105860, 0];\\n        tokenEarn[4] = [12750, 14250];\\n        startTime[3] = [0, 1699105860];\\n        endTime[3] = [1699105860, 0];\\n        tokenEarn[3] = [23611, 26389];\\n        startTime[2] = [0, 1699105860];\\n        endTime[2] = [1699105860, 0];\\n        tokenEarn[2] = [51944, 58056];\\n        startTime[1] = [0, 1699105860];\\n        endTime[1] = [1699105860, 0];\\n        tokenEarn[1] = [170000, 190000];\\n    }\\n\\n    function getStartTime(uint32 _nftTier) external view override returns (uint256[] memory) {\\n        return startTime[_nftTier];\\n    }\\n\\n    function getEndTime(uint32 _nftTier) external view override returns (uint256[] memory) {\\n        return startTime[_nftTier];\\n    }\\n\\n    function getTokenEarn(uint32 _nftTier) external view override returns (uint256[] memory) {\\n        return tokenEarn[_nftTier];\\n    }\\n\\n    function getMaxIndex(uint32 _nftTier) external view override returns (uint256) {\\n        return tokenEarn[_nftTier].length;\\n    }\\n\\n    /**\\n     * @dev function to set stake apr for NFT ID\\n     * @param _nftTier NFT ID\\n     * @param _nftTierEarnPerDay number of token earn per day * 10000\\n     */\\n    function setNftTierEarnPerDay(uint32 _nftTier, uint256 _nftTierEarnPerDay) external override onlyOwner {\\n        startTime[_nftTier].push(block.timestamp);\\n        endTime[_nftTier].pop();\\n        endTime[_nftTier].push(block.timestamp);\\n        endTime[_nftTier].push(0);\\n        tokenEarn[_nftTier].push(_nftTierEarnPerDay);\\n    }\\n\\n    function setNftTierExactly(uint32 _nftTier, uint256[] calldata _startTime, uint256[] calldata _endTime, uint256[] calldata _tokenEarn) external override onlyOwner {\\n        startTime[_nftTier] = _startTime;\\n        endTime[_nftTier] = _endTime;\\n        tokenEarn[_nftTier] = _tokenEarn;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_nftTier\",\"type\":\"uint32\"}],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_nftTier\",\"type\":\"uint32\"}],\"name\":\"getMaxIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_nftTier\",\"type\":\"uint32\"}],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_nftTier\",\"type\":\"uint32\"}],\"name\":\"getTokenEarn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_nftTier\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_nftTierEarnPerDay\",\"type\":\"uint256\"}],\"name\":\"setNftTierEarnPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_nftTier\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenEarn\",\"type\":\"uint256[]\"}],\"name\":\"setNftTierExactly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Tier", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}