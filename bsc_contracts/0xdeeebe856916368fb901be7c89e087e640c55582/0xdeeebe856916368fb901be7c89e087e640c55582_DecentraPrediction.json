{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PredictionBNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IAggregatorV3Interface.sol\\\";\\nimport \\\"./interfaces/Ownable.sol\\\";\\nimport \\\"./interfaces/Pausable.sol\\\";\\nimport \\\"./interfaces/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IBank.sol\\\";\\n\\n/**\\n * @title DecentraPrediction\\n */\\ncontract DecentraPrediction is Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    AggregatorV3Interface public oracle;\\n    IBank public bank;\\n\\n    bool public genesisLockOnce = false;\\n    bool public genesisStartOnce = false;\\n\\n    uint256 public bufferSeconds; // number of seconds for valid execution of a prediction round\\n    uint256 public intervalSeconds; // interval in seconds between two prediction rounds\\n\\n    uint256 public minBetAmount; // minimum betting amount (denominated in wei)\\n\\n    uint256 public currentEpoch; // current epoch for prediction round\\n\\n    uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\\n    uint256 public oracleUpdateAllowance; // seconds\\n\\n    mapping(uint256 => mapping(address => BetInfo)) public ledger;\\n    mapping(uint256 => Round) public rounds;\\n    mapping(address => uint256[]) public userRounds;\\n\\n    enum Position {\\n        Bull,\\n        Bear\\n    }\\n\\n    struct RoundTimestamps {\\n        uint256 startTimestamp;\\n        uint256 lockTimestamp;\\n        uint256 closeTimestamp;\\n    }\\n\\n    struct Round {\\n        uint256 epoch;\\n        RoundTimestamps timestamps;\\n        int256 lockPrice;\\n        int256 closePrice;\\n        uint256 lockOracleId;\\n        uint256 closeOracleId;\\n        uint256 totalAmount;\\n        uint256 bullAmount;\\n        uint256 bearAmount;\\n        uint256 rewardBaseCalAmount;\\n        uint256 rewardAmount;\\n        bool oracleCalled;\\n        address[] users;\\n        uint256 lastProcessedIndex;\\n    }\\n\\n    struct BetInfo {\\n        Position position;\\n        uint256 amount;\\n        bool claimed; // default false\\n    }\\n\\n    struct FeeInfo {\\n        uint256 rewardAmount;\\n        uint256 marketingFee;\\n        uint256 marketingAmount;\\n        uint256 stakingFee;\\n        uint256 stakingAmount;\\n\\n    }\\n\\n    struct WalletInfo {\\n        address adminAddress;\\n        address operatorAddress;\\n        address bankAddress;\\n        address marketingAddress;\\n        address stakingAddress;\\n    }\\n\\n    WalletInfo public walletInfo;\\n    FeeInfo public feeInfo;\\n\\n    event BetBear(address indexed sender, uint256 indexed epoch, uint256 amount);\\n    event BetBull(address indexed sender, uint256 indexed epoch, uint256 amount);\\n    event Claim(address indexed sender, uint256 indexed epoch, uint256 amount);\\n    event EndRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\\n    event LockRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\\n\\n    event NewAdminAddress(address admin);\\n    event NewBankAddress(address bank);\\n    event NewMarketingAddress(address marketingAddress);\\n    event NewStakingAddress(address stakingAddress);\\n    event NewBufferAndIntervalSeconds(uint256 bufferSeconds, uint256 intervalSeconds);\\n    event NewMinBetAmount(uint256 indexed epoch, uint256 minBetAmount);\\n    event NewMarketingFee(uint256 indexed epoch, uint256 marketingFee);\\n    event NewStakingFee(uint256 indexed epoch, uint256 stakingFee);\\n    event NewOperatorAddress(address operator);\\n    event NewOracle(address oracle);\\n    event NewOracleUpdateAllowance(uint256 oracleUpdateAllowance);\\n\\n    event Pause(uint256 indexed epoch);\\n    event RewardsCalculated(\\n        uint256 indexed epoch,\\n        uint256 rewardBaseCalAmount,\\n        uint256 rewardAmount,\\n        uint256 marketingAmount,\\n        uint256 stakingAmount\\n    );\\n\\n    event StartRound(uint256 indexed epoch);\\n    event TokenRecovery(address indexed token, uint256 amount);\\n    event MarketingClaim(uint256 amount);\\n    event StakingClaim(uint256 amount);\\n    event Unpause(uint256 indexed epoch);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == walletInfo.adminAddress, \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOperator() {\\n        require(msg.sender == walletInfo.adminAddress || msg.sender == walletInfo.operatorAddress, \\\"Not operator/admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == walletInfo.operatorAddress, \\\"Not operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyBank() {\\n        require(msg.sender == walletInfo.bankAddress, \\\"Not bank\\\");\\n        _;\\n    }\\n\\n    struct Args {\\n        address oracleAddress;\\n        WalletInfo walletInfo;\\n        uint256 intervalSeconds;\\n        uint256 bufferSeconds;\\n        uint256 minBetAmount;\\n        uint256 oracleUpdateAllowance;\\n        uint256 marketingFee;\\n        uint256 stakingFee;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _args: struct of params to be passed around\\n     */\\n    constructor(\\n        Args memory _args\\n    ) {\\n        require(_args.marketingFee <= 500, \\\"Marketing fee must not be more than 5%\\\");\\n        require(_args.stakingFee <= 500, \\\"Staking fee must not be more than 5%\\\");\\n\\n        oracle = AggregatorV3Interface(_args.oracleAddress);\\n        bank = IBank(_args.walletInfo.bankAddress);\\n        walletInfo = _args.walletInfo;\\n        intervalSeconds = _args.intervalSeconds;\\n        bufferSeconds = _args.bufferSeconds;\\n        minBetAmount = _args.minBetAmount;\\n        oracleUpdateAllowance = _args.oracleUpdateAllowance;\\n        feeInfo.marketingFee = _args.marketingFee;\\n        feeInfo.stakingFee = _args.stakingFee;\\n    }\\n        \\n\\n    /**\\n     * @notice Bet bear position\\n     * @param epoch: epoch\\n     */\\n    function betBear(uint256 epoch, address _user) external payable whenNotPaused nonReentrant onlyBank {\\n        require(epoch == currentEpoch, \\\"Bet is too early/late\\\");\\n        require(_bettable(epoch), \\\"Round not bettable\\\");\\n        require(msg.value >= minBetAmount, \\\"Bet amount must be greater than minBetAmount\\\");\\n        require(ledger[epoch][_user].amount == 0, \\\"Can only bet once per round\\\");\\n\\n        // Update round data\\n        uint256 amount = msg.value;\\n        Round storage round = rounds[epoch];\\n        round.totalAmount = round.totalAmount + amount;\\n        round.bearAmount = round.bearAmount + amount;\\n        round.users.push(_user);\\n\\n        // Update user data\\n        BetInfo storage betInfo = ledger[epoch][_user];\\n        betInfo.position = Position.Bear;\\n        betInfo.amount = amount;\\n        userRounds[_user].push(epoch);\\n\\n        emit BetBear(_user, epoch, amount);\\n    }\\n\\n    /**\\n     * @notice Bet bull position\\n     * @param epoch: epoch\\n     */\\n    function betBull(uint256 epoch, address _user) external payable whenNotPaused nonReentrant onlyBank {\\n        require(epoch == currentEpoch, \\\"Bet is too early/late\\\");\\n        require(_bettable(epoch), \\\"Round not bettable\\\");\\n        require(msg.value >= minBetAmount, \\\"Bet amount must be greater than minBetAmount\\\");\\n        require(ledger[epoch][_user].amount == 0, \\\"Can only bet once per round\\\");\\n\\n        // Update round data\\n        uint256 amount = msg.value;\\n        Round storage round = rounds[epoch];\\n        round.totalAmount = round.totalAmount + amount;\\n        round.bullAmount = round.bullAmount + amount;\\n        round.users.push(_user);\\n\\n        // Update user data\\n        BetInfo storage betInfo = ledger[epoch][_user];\\n        betInfo.position = Position.Bull;\\n        betInfo.amount = amount;\\n        userRounds[_user].push(epoch);\\n\\n        emit BetBull(_user, epoch, amount);\\n    }\\n\\n    /**\\n     * @notice Claim reward for an array of epochs\\n     * @param epochs: array of epochs\\n     */\\n    function claim(uint256[] calldata epochs, address _user) external nonReentrant onlyBank{\\n        uint256 reward; // Initializes reward\\n\\n        for (uint256 i = 0; i < epochs.length; i++) {\\n            require(rounds[epochs[i]].timestamps.startTimestamp != 0, \\\"Round has not started\\\");\\n            require(block.timestamp > rounds[epochs[i]].timestamps.closeTimestamp, \\\"Round has not ended\\\");\\n\\n            uint256 addedReward = 0;\\n\\n            // Round valid, claim rewards\\n            if (rounds[epochs[i]].oracleCalled) {\\n                require(claimable(epochs[i], _user), \\\"Not eligible for claim\\\");\\n                Round memory round = rounds[epochs[i]];\\n                addedReward = (ledger[epochs[i]][_user].amount * round.rewardAmount) / round.rewardBaseCalAmount;\\n            }\\n            // Round invalid, refund bet amount\\n            else {\\n                require(refundable(epochs[i], _user), \\\"Not eligible for refund\\\");\\n                addedReward = ledger[epochs[i]][_user].amount;\\n            }\\n\\n            ledger[epochs[i]][_user].claimed = true;\\n            reward += addedReward;\\n\\n            emit Claim(_user, epochs[i], addedReward);\\n        }\\n\\n        if (reward > 0) {\\n            //_safeTransferBNB(address(_user), reward);\\n            bank.depositOperator{value: reward}(reward, address(_user));\\n        }\\n    }\\n\\n    /**\\n     * @notice Airdrop reward to users for an epoch\\n     * @param epoch: epoch\\n    */\\n    function airdrop(uint256 epoch) external nonReentrant onlyAdminOrOperator {\\n        require(rounds[epoch].timestamps.startTimestamp != 0, \\\"Round has not started\\\");\\n        require(block.timestamp > rounds[epoch].timestamps.closeTimestamp, \\\"Round has not ended\\\");\\n        require(rounds[epoch].totalAmount > 0, \\\"Round has no totalAmount\\\");\\n        require(rounds[epoch].users.length > 0, \\\"Round has no users\\\");\\n\\n        uint256 reward = 0;\\n        uint256 totalUsers = rounds[epoch].users.length;\\n\\n        for (uint256 i = 0; i < totalUsers; i++) {\\n            address user = rounds[epoch].users[i];\\n            \\n            // Round valid, claim rewards\\n            if (rounds[epoch].oracleCalled) {\\n                if (claimable(epoch, user)) {\\n                    Round memory round = rounds[epoch];\\n                    reward = (ledger[epoch][user].amount * round.rewardAmount) / round.rewardBaseCalAmount;\\n                }\\n            }\\n            // Round invalid, refund bet amount\\n            else {\\n                if (refundable(epoch, user)) {\\n                    reward = ledger[epoch][user].amount;\\n                }\\n            }\\n\\n            ledger[epoch][user].claimed = true;\\n\\n            if (reward > 0) {\\n                //_safeTransferBNB(address(user), reward);\\n                bank.depositOperator{value: reward}(reward, address(user));\\n                reward = 0;\\n                emit Claim(user, epoch, reward);\\n            }  \\n            rounds[epoch].lastProcessedIndex = i;\\n        }\\n    }\\n\\n    /**\\n     * @notice Airdrop reward to users starting from lastProcessedIndex and ending at endIndex\\n     * @param epoch: epoch\\n     * @param endIndex: end index\\n     */\\n    function airdropBatch(uint256 epoch, uint256 endIndex) external nonReentrant onlyAdminOrOperator {\\n        require(rounds[epoch].timestamps.startTimestamp != 0, \\\"Round has not started\\\");\\n        require(block.timestamp > rounds[epoch].timestamps.closeTimestamp, \\\"Round has not ended\\\");\\n        require(rounds[epoch].totalAmount > 0, \\\"Round has no totalAmount\\\");\\n        require(rounds[epoch].users.length > 0, \\\"Round has no users\\\");\\n        require(rounds[epoch].lastProcessedIndex < endIndex, \\\"Already processed until endIndex\\\");\\n        require(endIndex <= rounds[epoch].users.length, \\\"endIndex out of bounds\\\");\\n        \\n        uint256 reward = 0;\\n\\n        for (uint256 i = rounds[epoch].lastProcessedIndex; i < endIndex; i++) {\\n            address user = rounds[epoch].users[i];\\n            \\n            // Round valid, claim rewards\\n            if (rounds[epoch].oracleCalled) {\\n                if (claimable(epoch, user)) {\\n                    Round memory round = rounds[epoch];\\n                    reward = (ledger[epoch][user].amount * round.rewardAmount) / round.rewardBaseCalAmount;\\n                }\\n            }\\n            // Round invalid, refund bet amount\\n            else {\\n                if (refundable(epoch, user)) {\\n                    reward = ledger[epoch][user].amount;\\n                }\\n            }\\n\\n            ledger[epoch][user].claimed = true;\\n\\n            if (reward > 0) {\\n                //_safeTransferBNB(address(user), reward);\\n                bank.depositOperator{value: reward}(reward, address(user));\\n                reward = 0;\\n                emit Claim(user, epoch, reward);\\n            }  \\n            rounds[epoch].lastProcessedIndex = i;\\n        }\\n    }\\n\\n\\n    /**\\n     * @notice Start the next round n, lock price for round n-1, end round n-2\\n     * @dev Callable by operator\\n     */\\n    function executeRound() external whenNotPaused onlyOperator {\\n        require(\\n            genesisStartOnce && genesisLockOnce,\\n            \\\"Can only run after genesisStartRound and genesisLockRound is triggered\\\"\\n        );\\n\\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\\n\\n        oracleLatestRoundId = uint256(currentRoundId);\\n\\n        // CurrentEpoch refers to previous round (n-1)\\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\\n        _safeEndRound(currentEpoch - 1, currentRoundId, currentPrice);\\n        _calculateRewards(currentEpoch - 1);\\n\\n        // Increment currentEpoch to current round (n)\\n        currentEpoch = currentEpoch + 1;\\n        _safeStartRound(currentEpoch);\\n    }\\n\\n    /**\\n     * @notice Lock genesis round\\n     * @dev Callable by operator\\n     */\\n    function genesisLockRound() external whenNotPaused onlyOperator {\\n        require(genesisStartOnce, \\\"Can only run after genesisStartRound is triggered\\\");\\n        require(!genesisLockOnce, \\\"Can only run genesisLockRound once\\\");\\n\\n        (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\\n\\n        oracleLatestRoundId = uint256(currentRoundId);\\n\\n        _safeLockRound(currentEpoch, currentRoundId, currentPrice);\\n\\n        currentEpoch = currentEpoch + 1;\\n        _startRound(currentEpoch);\\n        genesisLockOnce = true;\\n    }\\n\\n    /**\\n     * @notice Start genesis round\\n     * @dev Callable by admin or operator\\n     */\\n    function genesisStartRound() external whenNotPaused onlyOperator {\\n        require(!genesisStartOnce, \\\"Can only run genesisStartRound once\\\");\\n\\n        currentEpoch = currentEpoch + 1;\\n        _startRound(currentEpoch);\\n        genesisStartOnce = true;\\n    }\\n\\n    /**\\n     * @notice called by the admin to pause, triggers stopped state\\n     * @dev Callable by admin or operator\\n     */\\n    function pause() external whenNotPaused onlyAdminOrOperator {\\n        _pause();\\n\\n        emit Pause(currentEpoch);\\n    }\\n\\n    /**\\n     * @notice Claim all rewards in marketing\\n     * @dev Callable by admin\\n     */\\n    function claimMarketing() external nonReentrant onlyAdmin {\\n        uint256 currentMarketingAmount = feeInfo.marketingAmount;\\n        feeInfo.marketingAmount = 0;\\n        _safeTransferBNB(walletInfo.marketingAddress, currentMarketingAmount);\\n\\n        emit MarketingClaim(currentMarketingAmount);\\n    }\\n\\n    /**\\n     * @notice Claim all rewards in staking\\n     * @dev Callable by admin\\n     */\\n    function claimStaking() external nonReentrant onlyAdmin {\\n        uint256 currentStakingAmount = feeInfo.stakingAmount;\\n        feeInfo.stakingAmount = 0;\\n        _safeTransferBNB(walletInfo.stakingAddress, currentStakingAmount);\\n\\n        emit StakingClaim(currentStakingAmount);\\n    }\\n\\n    /**\\n     * @notice called by the admin to unpause, returns to normal state\\n     * Reset genesis state. Once paused, the rounds would need to be kickstarted by genesis\\n     */\\n    function unpause() external whenPaused onlyAdmin {\\n        genesisStartOnce = false;\\n        genesisLockOnce = false;\\n        _unpause();\\n\\n        emit Unpause(currentEpoch);\\n    }\\n\\n    /**\\n     * @notice Set buffer and interval (in seconds)\\n     * @dev Callable by admin\\n     */\\n    function setBufferAndIntervalSeconds(uint256 _bufferSeconds, uint256 _intervalSeconds)\\n        external\\n        whenPaused\\n        onlyAdmin\\n    {\\n        require(_bufferSeconds < _intervalSeconds, \\\"bufferSeconds must be inferior to intervalSeconds\\\");\\n        bufferSeconds = _bufferSeconds;\\n        intervalSeconds = _intervalSeconds;\\n\\n        emit NewBufferAndIntervalSeconds(_bufferSeconds, _intervalSeconds);\\n    }\\n\\n    /**\\n     * @notice Set minBetAmount\\n     * @dev Callable by admin\\n     */\\n    function setMinBetAmount(uint256 _minBetAmount) external whenPaused onlyAdmin {\\n        require(_minBetAmount != 0, \\\"Must be superior to 0\\\");\\n        minBetAmount = _minBetAmount;\\n\\n        emit NewMinBetAmount(currentEpoch, minBetAmount);\\n    }\\n\\n    /**\\n     * @notice Set operator address\\n     * @dev Callable by admin\\n     */\\n    function setOperator(address _operatorAddress) external onlyAdmin {\\n        require(_operatorAddress != address(0), \\\"Cannot be zero address\\\");\\n        walletInfo.operatorAddress = _operatorAddress;\\n\\n        emit NewOperatorAddress(_operatorAddress);\\n    }\\n\\n    /**\\n     * @notice Set bank address\\n     * @dev Callable by admin\\n     */\\n    function setBank(address _bankAddress) external onlyAdmin {\\n        require(_bankAddress != address(0), \\\"Cannot be zero address\\\");\\n        walletInfo.bankAddress = _bankAddress;\\n\\n        emit NewBankAddress(_bankAddress);\\n    }   \\n\\n    /**\\n     * @notice Set marketing address\\n     * @dev Callable by admin\\n     */\\n    function setMarketingAddress(address _marketingAddress) external onlyAdmin {\\n        require(_marketingAddress != address(0), \\\"Cannot be zero address\\\");\\n        walletInfo.marketingAddress = _marketingAddress;\\n\\n        emit NewMarketingAddress(_marketingAddress);\\n    }\\n\\n    /**\\n     * @notice Set staking address\\n     * @dev Callable by admin\\n     */\\n    function setStakingAddress(address _stakingAddress) external onlyAdmin {\\n        require(_stakingAddress != address(0), \\\"Cannot be zero address\\\");\\n        walletInfo.stakingAddress = _stakingAddress;\\n\\n        emit NewStakingAddress(_stakingAddress);\\n    }\\n\\n    /**\\n     * @notice Set Oracle address\\n     * @dev Callable by admin\\n     */\\n    function setOracle(address _oracle) external whenPaused onlyAdmin {\\n        require(_oracle != address(0), \\\"Cannot be zero address\\\");\\n        oracleLatestRoundId = 0;\\n        oracle = AggregatorV3Interface(_oracle);\\n\\n        // Dummy check to make sure the interface implements this function properly\\n        oracle.latestRoundData();\\n\\n        emit NewOracle(_oracle);\\n    }\\n\\n    /**\\n     * @notice Set oracle update allowance\\n     * @dev Callable by admin\\n     */\\n    function setOracleUpdateAllowance(uint256 _oracleUpdateAllowance) external whenPaused onlyAdmin {\\n        oracleUpdateAllowance = _oracleUpdateAllowance;\\n\\n        emit NewOracleUpdateAllowance(_oracleUpdateAllowance);\\n    }\\n\\n    /**\\n     * @notice Set marketing fee\\n     * @dev Callable by admin\\n     */\\n    function setMarketingFee(uint256 _marketingFee) external whenPaused onlyAdmin {\\n        require(_marketingFee <= 500, \\\"Marketing fee too high\\\");\\n        feeInfo.marketingFee = _marketingFee;\\n\\n        emit NewMarketingFee(currentEpoch, feeInfo.marketingFee);\\n    }\\n\\n    /**\\n     * @notice Set staking fee\\n     * @dev Callable by admin\\n     */\\n    function setStakingFee(uint256 _stakingFee) external whenPaused onlyAdmin {\\n        require(_stakingFee <= 500, \\\"Staking fee too high\\\");\\n        feeInfo.stakingFee = _stakingFee;\\n\\n        emit NewStakingFee(currentEpoch, feeInfo.stakingFee);\\n    }\\n\\n    /**\\n     * @notice It allows the owner to recover tokens sent to the contract by mistake\\n     * @param _token: token address\\n     * @param _amount: token amount\\n     * @dev Callable by owner\\n     */\\n    function recoverToken(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(address(msg.sender), _amount);\\n\\n        emit TokenRecovery(_token, _amount);\\n    }\\n\\n    /**\\n     * @notice Set admin address\\n     * @dev Callable by owner\\n     */\\n    function setAdmin(address _adminAddress) external onlyOwner {\\n        require(_adminAddress != address(0), \\\"Cannot be zero address\\\");\\n        walletInfo.adminAddress = _adminAddress;\\n\\n        emit NewAdminAddress(_adminAddress);\\n    }\\n\\n    /**\\n     * @notice Returns round epochs and bet information for a user that has participated\\n     * @param user: user address\\n     * @param cursor: cursor\\n     * @param size: size\\n     */\\n    function getUserRounds(\\n        address user,\\n        uint256 cursor,\\n        uint256 size\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory,\\n            BetInfo[] memory,\\n            uint256\\n        )\\n    {\\n        uint256 length = size;\\n\\n        if (length > userRounds[user].length - cursor) {\\n            length = userRounds[user].length - cursor;\\n        }\\n\\n        uint256[] memory values = new uint256[](length);\\n        BetInfo[] memory betInfo = new BetInfo[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            values[i] = userRounds[user][cursor + i];\\n            betInfo[i] = ledger[values[i]][user];\\n        }\\n\\n        return (values, betInfo, cursor + length);\\n    }\\n\\n    /**\\n     * @notice Returns round epochs length\\n     * @param user: user address\\n     */\\n    function getUserRoundsLength(address user) external view returns (uint256) {\\n        return userRounds[user].length;\\n    }\\n\\n    /**\\n     * @notice Get the user length of specific epoch\\n     * @param epoch: epoch\\n     */\\n    function getRoundUsersLength(uint256 epoch) external view returns (uint256) {\\n        return rounds[epoch].users.length;\\n    }\\n\\n    /**\\n     * @notice Get the claimable stats of specific epoch and user account\\n     * @param epoch: epoch\\n     * @param user: user address\\n     */\\n    function claimable(uint256 epoch, address user) public view returns (bool) {\\n        BetInfo memory betInfo = ledger[epoch][user];\\n        Round memory round = rounds[epoch];\\n        if (round.lockPrice == round.closePrice) {\\n            return false;\\n        }\\n        return\\n            round.oracleCalled &&\\n            betInfo.amount != 0 &&\\n            !betInfo.claimed &&\\n            ((round.closePrice > round.lockPrice && betInfo.position == Position.Bull) ||\\n                (round.closePrice < round.lockPrice && betInfo.position == Position.Bear));\\n    }\\n\\n    /**\\n     * @notice Get the refundable stats of specific epoch and user account\\n     * @param epoch: epoch\\n     * @param user: user address\\n     */\\n    function refundable(uint256 epoch, address user) public view returns (bool) {\\n        BetInfo memory betInfo = ledger[epoch][user];\\n        Round memory round = rounds[epoch];\\n        return\\n            !round.oracleCalled &&\\n            !betInfo.claimed &&\\n            block.timestamp > round.timestamps.closeTimestamp + bufferSeconds &&\\n            betInfo.amount != 0;\\n    }\\n\\n\\n    /**\\n     * @notice Calculate rewards for round\\n     * @param epoch: epoch\\n     */\\n    function _calculateRewards(uint256 epoch) internal \\n    {\\n        require(rounds[epoch].rewardBaseCalAmount == 0 && rounds[epoch].rewardAmount == 0, \\\"Rewards calculated\\\");\\n        Round storage round = rounds[epoch];\\n        FeeInfo memory _localVars;\\n        uint256 rewardBaseCalAmount;\\n        \\n        // Bull wins\\n        if (round.closePrice > round.lockPrice) {\\n            rewardBaseCalAmount = round.bullAmount;\\n            // no winner , house win\\n            if (rewardBaseCalAmount == 0) {\\n                _localVars.marketingAmount = round.totalAmount / 2;\\n                _localVars.stakingAmount = round.totalAmount - _localVars.marketingAmount;\\n            } else {\\n                _localVars.marketingAmount = (round.totalAmount * feeInfo.marketingFee) / 10000;\\n                _localVars.stakingAmount = (round.totalAmount * feeInfo.stakingFee) / 10000;\\n            }\\n            _localVars.rewardAmount = round.totalAmount - _localVars.marketingAmount - _localVars.stakingAmount;\\n        }\\n        // Bear wins\\n        else if (round.closePrice < round.lockPrice) {\\n            rewardBaseCalAmount = round.bearAmount;\\n            // no winner , house win\\n            if (rewardBaseCalAmount == 0) {\\n                _localVars.marketingAmount = round.totalAmount / 2;\\n                _localVars.stakingAmount = round.totalAmount - _localVars.marketingAmount;\\n            } else {\\n                _localVars.marketingAmount = (round.totalAmount * feeInfo.marketingFee) / 10000;\\n                _localVars.stakingAmount = (round.totalAmount * feeInfo.stakingFee) / 10000;\\n            }\\n            _localVars.rewardAmount = round.totalAmount - _localVars.marketingAmount - _localVars.stakingAmount;\\n        }\\n        // House wins\\n        else {\\n            rewardBaseCalAmount = 0;\\n            _localVars.rewardAmount = 0;\\n            _localVars.marketingAmount = round.totalAmount / 2;\\n            _localVars.stakingAmount = round.totalAmount - _localVars.marketingAmount;\\n\\n        }\\n        round.rewardBaseCalAmount = rewardBaseCalAmount;\\n        round.rewardAmount = _localVars.rewardAmount;\\n\\n        // Add to marketing\\n        feeInfo.marketingAmount += _localVars.marketingAmount;\\n        // Add to staking pool\\n        feeInfo.stakingAmount += _localVars.stakingAmount;\\n\\n        emit RewardsCalculated(epoch, rewardBaseCalAmount, feeInfo.rewardAmount, feeInfo.marketingAmount, feeInfo.stakingAmount);\\n    }\\n\\n    /**\\n     * @notice End round\\n     * @param epoch: epoch\\n     * @param roundId: roundId\\n     * @param price: price of the round\\n     */\\n    function _safeEndRound(\\n        uint256 epoch,\\n        uint256 roundId,\\n        int256 price\\n    ) internal {\\n        require(rounds[epoch].timestamps.lockTimestamp != 0, \\\"Can only end round after round has locked\\\");\\n        require(block.timestamp >= rounds[epoch].timestamps.closeTimestamp, \\\"Can only end round after timestamps.closeTimestamp\\\");\\n        require(\\n            block.timestamp <= rounds[epoch].timestamps.closeTimestamp + bufferSeconds,\\n            \\\"Can only end round within bufferSeconds\\\"\\n        );\\n        Round storage round = rounds[epoch];\\n        round.closePrice = price;\\n        round.closeOracleId = roundId;\\n        round.oracleCalled = true;\\n\\n        emit EndRound(epoch, roundId, round.closePrice);\\n    }\\n\\n    /**\\n     * @notice Lock round\\n     * @param epoch: epoch\\n     * @param roundId: roundId\\n     * @param price: price of the round\\n     */\\n    function _safeLockRound(\\n        uint256 epoch,\\n        uint256 roundId,\\n        int256 price\\n    ) internal {\\n        require(rounds[epoch].timestamps.startTimestamp != 0, \\\"Can only lock round after round has started\\\");\\n        require(block.timestamp >= rounds[epoch].timestamps.lockTimestamp, \\\"Can only lock round after timestamps.lockTimestamp\\\");\\n        require(\\n            block.timestamp <= rounds[epoch].timestamps.lockTimestamp + bufferSeconds,\\n            \\\"Can only lock round within bufferSeconds\\\"\\n        );\\n        Round storage round = rounds[epoch];\\n        round.timestamps.closeTimestamp = block.timestamp + intervalSeconds;\\n        round.lockPrice = price;\\n        round.lockOracleId = roundId;\\n\\n        emit LockRound(epoch, roundId, round.lockPrice);\\n    }\\n\\n    /**\\n     * @notice Start round\\n     * Previous round n-2 must end\\n     * @param epoch: epoch\\n     */\\n    function _safeStartRound(uint256 epoch) internal {\\n        require(genesisStartOnce, \\\"Can only run after genesisStartRound is triggered\\\");\\n        require(rounds[epoch - 2].timestamps.closeTimestamp != 0, \\\"Can only start round after round n-2 has ended\\\");\\n        require(\\n            block.timestamp >= rounds[epoch - 2].timestamps.closeTimestamp,\\n            \\\"Can only start new round after round n-2 timestamps.closeTimestamp\\\"\\n        );\\n        _startRound(epoch);\\n    }\\n\\n    /**\\n     * @notice Transfer BNB in a safe way\\n     * @param to: address to transfer BNB to\\n     * @param value: BNB amount to transfer (in wei)\\n     */\\n    function _safeTransferBNB(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"TransferHelper: BNB_TRANSFER_FAILED\\\");\\n    }\\n\\n    /**\\n     * @notice Start round\\n     * Previous round n-2 must end\\n     * @param epoch: epoch\\n     */\\n    function _startRound(uint256 epoch) internal {\\n        Round storage round = rounds[epoch];\\n        round.timestamps.startTimestamp = block.timestamp;\\n        round.timestamps.lockTimestamp = block.timestamp + intervalSeconds;\\n        round.timestamps.closeTimestamp = block.timestamp + (2 * intervalSeconds);\\n        round.epoch = epoch;\\n        round.totalAmount = 0;\\n\\n        emit StartRound(epoch);\\n    }\\n\\n    /**\\n     * @notice Determine if a round is valid for receiving bets\\n     * Round must have started and locked\\n     * Current timestamp must be within startTimestamp and closeTimestamp\\n     */\\n    function _bettable(uint256 epoch) internal view returns (bool) {\\n        return\\n            rounds[epoch].timestamps.startTimestamp != 0 &&\\n            rounds[epoch].timestamps.lockTimestamp != 0 &&\\n            block.timestamp > rounds[epoch].timestamps.startTimestamp &&\\n            block.timestamp < rounds[epoch].timestamps.lockTimestamp;\\n    }\\n\\n    /**\\n     * @notice Get latest recorded price from oracle\\n     * If it falls below allowed buffer or has not updated, it would be invalid.\\n     */\\n    function _getPriceFromOracle() public view returns (uint80, int256) {\\n        uint256 leastAllowedTimestamp = block.timestamp + oracleUpdateAllowance;\\n        (uint80 roundId, int256 price, , uint256 timestamp, ) = oracle.latestRoundData();\\n        require(timestamp <= leastAllowedTimestamp, \\\"Oracle update exceeded max timestamp allowance\\\");\\n        require(\\n            uint256(roundId) > oracleLatestRoundId,\\n            \\\"Oracle update roundId must be larger than oracleLatestRoundId\\\"\\n        );\\n        return (roundId, price);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAggregatorV3Interface.sol\": {\r\n      \"content\": \"\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"./Address.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBank.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\ninterface IBank {\\n    function depositOperator(uint256, address) external payable;\\n}\"\r\n    },\r\n    \"contracts/interfaces/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ReentrancyGuard.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bankAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"}],\"internalType\":\"struct DecentraPrediction.WalletInfo\",\"name\":\"walletInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"intervalSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleUpdateAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"}],\"internalType\":\"struct DecentraPrediction.Args\",\"name\":\"_args\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BetBull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"EndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"LockRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketingClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NewAdminAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"NewBankAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bufferSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intervalSeconds\",\"type\":\"uint256\"}],\"name\":\"NewBufferAndIntervalSeconds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"NewMarketingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"NewMarketingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"NewMinBetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleUpdateAllowance\",\"type\":\"uint256\"}],\"name\":\"NewOracleUpdateAllowance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"}],\"name\":\"NewStakingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"}],\"name\":\"NewStakingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"StartRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_getPriceFromOracle\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"airdropBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"contract IBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"betBear\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"betBull\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"epochs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisLockOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisLockRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisStartOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisStartRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getRoundUsersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getUserRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"enum DecentraPrediction.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct DecentraPrediction.BetInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRoundsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"enum DecentraPrediction.Position\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleLatestRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUpdateAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refundable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DecentraPrediction.RoundTimestamps\",\"name\":\"timestamps\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"lockPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"closePrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lockOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bullAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bearAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBaseCalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"oracleCalled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bankAddress\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bufferSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSeconds\",\"type\":\"uint256\"}],\"name\":\"setBufferAndIntervalSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBetAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleUpdateAllowance\",\"type\":\"uint256\"}],\"name\":\"setOracleUpdateAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"}],\"name\":\"setStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bankAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DecentraPrediction", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000264990fbd0a4796a3e3d8e37c4d5f87a3aca5ebf0000000000000000000000003240eace507addc964618786ab17fb3a585a93440000000000000000000000003240eace507addc964618786ab17fb3a585a93440000000000000000000000001bee86619ced88a6845bb7190c818c92fab6cfbc0000000000000000000000003240eace507addc964618786ab17fb3a585a93440000000000000000000000003240eace507addc964618786ab17fb3a585a9344000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000012c000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}