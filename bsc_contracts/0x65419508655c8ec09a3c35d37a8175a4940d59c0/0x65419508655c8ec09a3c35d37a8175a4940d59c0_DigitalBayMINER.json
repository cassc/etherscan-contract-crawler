{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7; // solhint-disable-line\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract DigitalBayMINER {\r\n    \r\n    address asc = 0x48C684C5c0510A0F0B18b08dcdfDc44adBb0348d; \r\n    uint256 public GOLD_TO_CATCH_1=2592000;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    address public ceoAddress1;\r\n    address public ceoAddress2;\r\n    mapping (address => uint256) public catchGold;\r\n    mapping (address => uint256) public claimedGold;\r\n    mapping (address => uint256) public lastClaim;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketApes;\r\n    \r\n    constructor() {\r\n        ceoAddress=address(0x1BbbFeC1e13F4EDbD61795c547D859E54e692a19);\r\n        ceoAddress1=address(0x5bE8aacCf538Bd4886cE4022F18a79C6a86cE77a);\r\n        ceoAddress2=address(0x15F7FFF4f3322358BC6FE79Cc17Aa5733F39E82a);\r\n    }\r\n    \r\n    function hireMoreApes(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = address(0);\r\n        }\r\n        if(referrals[msg.sender]==address(0) && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 printerUsed=getMyGold();\r\n        uint256 newPrinters=SafeMath.div(printerUsed,GOLD_TO_CATCH_1);\r\n        catchGold[msg.sender]=SafeMath.add(catchGold[msg.sender],newPrinters);\r\n        claimedGold[msg.sender]=0;\r\n        lastClaim[msg.sender]=block.timestamp;\r\n        \r\n        claimedGold[referrals[msg.sender]]=SafeMath.add(claimedGold[referrals[msg.sender]],SafeMath.div(printerUsed,6));\r\n\r\n        marketApes=SafeMath.add(marketApes,SafeMath.div(printerUsed,5));\r\n    }\r\n\r\n    function sellApes() public {\r\n        require(initialized);\r\n        uint256 hasFish=getMyGold();\r\n        uint256 fishValue=calculateGoldClaim(hasFish);\r\n        uint256 fee=devFee(fishValue);\r\n        uint256 fee2=fee/3;\r\n        claimedGold[msg.sender]=0;\r\n        lastClaim[msg.sender]=block.timestamp;\r\n        marketApes=SafeMath.add(marketApes,hasFish);\r\n        IERC20(asc).transfer(ceoAddress, fee2);\r\n        IERC20(asc).transfer(ceoAddress1, fee2);\r\n        IERC20(asc).transfer(ceoAddress2, fee2);\r\n        IERC20(asc).transfer(address(msg.sender), SafeMath.sub(fishValue,fee));\r\n    }\r\n\r\n    function buyApes(address ref, uint256 amount) public {\r\n        require(initialized);\r\n    \r\n        IERC20(asc).transferFrom(address(msg.sender), address(this), amount);\r\n        \r\n        uint256 balance = IERC20(asc).balanceOf(address(this));\r\n        uint256 fishermanBought=calculateApeBuy(amount,SafeMath.sub(balance,amount));\r\n        fishermanBought=SafeMath.sub(fishermanBought,devFee(fishermanBought));\r\n        uint256 fee=devFee(amount);\r\n        uint256 fee2=fee/3;\r\n        IERC20(asc).transfer(ceoAddress, fee2);\r\n        IERC20(asc).transfer(ceoAddress1, fee2);\r\n        IERC20(asc).transfer(ceoAddress2, fee2);\r\n        claimedGold[msg.sender]=SafeMath.add(claimedGold[msg.sender],fishermanBought);\r\n        hireMoreApes(ref);\r\n    }\r\n\r\n    //magic happens here\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    function calculateGoldClaim(uint256 apes) public view returns(uint256) {\r\n        return calculateTrade(apes,marketApes,IERC20(asc).balanceOf(address(this)));\r\n    }\r\n\r\n    function calculateApeBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketApes);\r\n    }\r\n    \r\n    function calculateApeBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateApeBuy(eth,IERC20(asc).balanceOf(address(this)));\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,5),100);\r\n    }\r\n\r\n    function seedMarket(uint256 amount) public {\r\n        require(msg.sender == ceoAddress);\r\n        IERC20(asc).transferFrom(address(msg.sender), address(this), amount);\r\n        require(marketApes==0);\r\n        initialized=true;\r\n        marketApes=259200000000;\r\n    }\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return IERC20(asc).balanceOf(address(this));\r\n    }\r\n\r\n    function getMyGolds() public view returns(uint256) {\r\n        return catchGold[msg.sender];\r\n    }\r\n\r\n    function getMyGold() public view returns(uint256) {\r\n        return SafeMath.add(claimedGold[msg.sender],getGoldSinceLastSell(msg.sender));\r\n    }\r\n\r\n    function getGoldSinceLastSell(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(GOLD_TO_CATCH_1,SafeMath.sub(block.timestamp,lastClaim[adr]));\r\n        return SafeMath.mul(secondsPassed,catchGold[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GOLD_TO_CATCH_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyApes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateApeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateApeBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apes\",\"type\":\"uint256\"}],\"name\":\"calculateGoldClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"catchGold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedGold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getGoldSinceLastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyGold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyGolds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hireMoreApes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketApes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellApes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DigitalBayMINER", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://65f3ee693a8edaf4a621de25fa099a70cfb881f6113f1a6b9539e66bbc1c943d"}