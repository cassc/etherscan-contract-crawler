{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"ImpToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ISwapRouter.sol\\\";\\r\\nimport \\\"./ISwapFactory.sol\\\";\\r\\nimport \\\"./SMCWarp.sol\\\";\\r\\nimport \\\"./ISwapPair.sol\\\";\\r\\n\\r\\nabstract contract ImpToken is IERC20, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n    mapping(address =\\u003e bool) private _feeWhiteList;\\r\\n    mapping(address =\\u003e bool) private _blackList;\\r\\n    mapping(address =\\u003e bool) private _swapPairList;\\r\\n    mapping(address =\\u003e address) public inviter;\\r\\n\\r\\n    address private fundAddress;\\r\\n    address private marketingAddress;\\r\\n    address private devAddress;\\r\\n    address private _fist;\\r\\n    address private _mainPair;\\r\\n    address private platform;\\r\\n    address public DEAD = address(0x000000000000000000000000000000000000dEaD);\\r\\n    address public ZERO = address(0);\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n    uint256 private _tTotal;\\r\\n\\r\\n    ISwapRouter public _swapRouter;\\r\\n    SMCWarp warp;\\r\\n\\r\\n    bool private inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled = false;\\r\\n    bool public liquifyEnabled = false;\\r\\n\\r\\n    uint256 public _buyBurnFee = 100;\\r\\n    uint256 public _sellBurnFee = 100;\\r\\n    uint256 public _buyFundFee = 100;\\r\\n    uint256 public _sellFundFee = 100;\\r\\n    uint256 public _buyMarketingFee = 100;\\r\\n    uint256 public _sellMarketingFee = 100;\\r\\n    uint256 public _buyLPDividendFee = 100;\\r\\n    uint256 public _sellLPDividendFee = 100;\\r\\n    uint256 public _buyLPFee = 100;\\r\\n    uint256 public _sellLPFee = 100;\\r\\n    uint256 public _removeLPFee = 100;\\r\\n    uint256 public _addLPFee = 100;\\r\\n    uint256 public _transferFee = 100;\\r\\n    uint256 public _inviterRewardRate = 500;\\r\\n    uint256 public _inviterRewardDec = 100;\\r\\n    uint256 public _inviterRewardLevel = 20;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private numTokensSellToAddToLiquidity;\\r\\n\\r\\n    uint256 public startTradeBlock;\\r\\n    uint256 public startAddLPBlock;\\r\\n    uint256 private holderRewardCondition;\\r\\n\\r\\n    address[] private holders;\\r\\n    mapping(address =\\u003e uint256) holderIndex;\\r\\n    mapping(address =\\u003e bool) excludeHolder;\\r\\n    uint256 private currentIndex;\\r\\n    uint256 private progressRewardBlock;\\r\\n    uint256 private holderCondition = 1;\\r\\n    uint256 private inviterCondition = 1;\\r\\n    uint256 private progressRewardBlockDebt = 200;\\r\\n\\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    modifier lockTheSwap {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    constructor (\\r\\n        address RouterAddress, address FISTAddress,\\r\\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply, uint256 minNum,\\r\\n        address FundAddress, address MarketingAddress, address ReceiveAddress\\r\\n    ){\\r\\n        _name = Name;\\r\\n        _symbol = Symbol;\\r\\n        _decimals = Decimals;\\r\\n        numTokensSellToAddToLiquidity = minNum * 10 ** uint256(_decimals);\\r\\n\\r\\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\\r\\n        IERC20(FISTAddress).approve(address(swapRouter), MAX);\\r\\n\\r\\n        _fist = FISTAddress;\\r\\n        _swapRouter = swapRouter;\\r\\n        _allowances[address(this)][address(swapRouter)] = MAX;\\r\\n\\r\\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\\r\\n        address swapPair = swapFactory.createPair(address(this), FISTAddress);\\r\\n        _mainPair = swapPair;\\r\\n        _swapPairList[swapPair] = true;\\r\\n\\r\\n        uint256 total = Supply * 10 ** Decimals;\\r\\n        _tTotal = total;\\r\\n\\r\\n        _balances[ReceiveAddress] = total;\\r\\n        emit Transfer(address(0), ReceiveAddress, total);\\r\\n\\r\\n        fundAddress = FundAddress;\\r\\n        marketingAddress = MarketingAddress;\\r\\n        platform = owner();\\r\\n        devAddress = msg.sender;\\r\\n\\r\\n        _feeWhiteList[FundAddress] = true;\\r\\n        _feeWhiteList[MarketingAddress] = true;\\r\\n        _feeWhiteList[ReceiveAddress] = true;\\r\\n        _feeWhiteList[address(this)] = true;\\r\\n        _feeWhiteList[address(swapRouter)] = true;\\r\\n        _feeWhiteList[msg.sender] = true;\\r\\n\\r\\n        excludeHolder[address(0)] = true;\\r\\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\\r\\n\\r\\n        holderRewardCondition = 5 * 10 ** IERC20(FISTAddress).decimals();\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function symbol() external view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function name() external view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function decimals() external view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        if (_allowances[sender][msg.sender] != MAX) {\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n\\r\\n        bool takeFee;\\r\\n        bool isSell;\\r\\n\\r\\n        require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n        require(!_blackList[from] \\u0026\\u0026 !_blackList[to], \\\"BEP20: sender or recipient in blackList\\\");\\r\\n\\r\\n        uint256 fromBalance = balanceOf(from);\\r\\n        require(fromBalance \\u003e= amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n\\r\\n        if (!_feeWhiteList[from] \\u0026\\u0026 !_feeWhiteList[to]) {\\r\\n            uint256 maxSellAmount = fromBalance.mul(9999).div(10000);\\r\\n            if (amount \\u003e maxSellAmount) {\\r\\n                amount = maxSellAmount;\\r\\n            }\\r\\n            takeFee = true;\\r\\n        }\\r\\n\\r\\n        bool isRemoveLP;\\r\\n        bool isAddLP;\\r\\n        bool shouldSetInviter = balanceOf(to) == 0 \\u0026\\u0026 inviter[to] == address(0) \\u0026\\u0026 \\r\\n                                !isContract(from) \\u0026\\u0026 !isContract(to) \\u0026\\u0026\\r\\n                                from != devAddress \\u0026\\u0026 to != devAddress \\u0026\\u0026\\r\\n                                from != DEAD \\u0026\\u0026 to != DEAD;\\r\\n\\r\\n        if (_swapPairList[from] || _swapPairList[to]) {\\r\\n            if (!_feeWhiteList[from] \\u0026\\u0026 !_feeWhiteList[to]) {\\r\\n                if (_swapPairList[from]) {\\r\\n                    isRemoveLP = _isRemoveLiquidity();\\r\\n                } else {\\r\\n                    isAddLP = _isAddLiquidity();\\r\\n                }\\r\\n                if (0 == startTradeBlock) {\\r\\n                    require(0 \\u003c startAddLPBlock \\u0026\\u0026 _swapPairList[to], \\\"BEP20:operater action is not AddLiquidity\\\");\\r\\n                }\\r\\n                if (block.number \\u003c startTradeBlock.add(4)) {\\r\\n                    _funTransfer(from, to, amount);\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                uint256 swapFee = _buyFundFee.add(_sellFundFee).add(_buyLPDividendFee).add(_sellLPDividendFee).add(_buyLPFee).add(_sellLPFee);\\r\\n\\r\\n                // also, don\\u0027t swap \\u0026 liquify if sender is uniswap pair.\\r\\n                uint256 contractTokenBalance = balanceOf(address(this));\\r\\n                bool overMinTokenBalance = contractTokenBalance \\u003e= numTokensSellToAddToLiquidity;\\r\\n                if (\\r\\n                    overMinTokenBalance \\u0026\\u0026\\r\\n                    !inSwapAndLiquify \\u0026\\u0026\\r\\n                    _swapPairList[to] \\u0026\\u0026\\r\\n                    swapAndLiquifyEnabled\\r\\n                ) {\\r\\n                    contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n                    //add liquidity\\r\\n                    swapTokenForFund(contractTokenBalance, swapFee);\\r\\n                }\\r\\n            }\\r\\n            if (_swapPairList[to]) {\\r\\n                isSell = true;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP, isAddLP);\\r\\n\\r\\n        if (shouldSetInviter) {\\r\\n            inviter[to] = from;\\r\\n        }\\r\\n\\r\\n        if (from != address(this)) {\\r\\n            if (isSell) {\\r\\n                addHolder(from);\\r\\n            }\\r\\n            processReward(500000);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _funTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[sender] = _balances[sender].sub(tAmount);\\r\\n        uint256 feeAmount = tAmount.mul(75).div(100);\\r\\n        _takeTransfer(\\r\\n            sender,\\r\\n            fundAddress,\\r\\n            feeAmount\\r\\n        );\\r\\n        _takeTransfer(sender, recipient, tAmount.sub(feeAmount));\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount,\\r\\n        bool takeFee,\\r\\n        bool isSell\\r\\n    ) private {\\r\\n        \\r\\n        uint256 feeAmount;\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(tAmount);\\r\\n\\r\\n        if (takeFee) {\\r\\n            uint256 swapFee;\\r\\n            uint256 marketingAmount;\\r\\n            uint256 burnAmount;\\r\\n            if (isSell) {\\r\\n                swapFee = _sellFundFee.add(_sellLPDividendFee).add(_sellLPFee);\\r\\n                marketingAmount = tAmount.mul(_sellMarketingFee).div(10000);\\r\\n                burnAmount = tAmount.mul(_sellBurnFee).div(10000);\\r\\n            } else {\\r\\n                swapFee = _buyFundFee.add(_buyLPDividendFee).add(_buyLPFee);\\r\\n                marketingAmount = tAmount.mul(_buyMarketingFee).div(10000);\\r\\n                burnAmount = tAmount.mul(_buyBurnFee).div(10000);\\r\\n            }\\r\\n            uint256 swapAmount = tAmount.mul(swapFee).div(10000);\\r\\n            if (swapAmount \\u003e 0) {\\r\\n                feeAmount += swapAmount;\\r\\n                _takeTransfer(\\r\\n                    sender,\\r\\n                    address(this),\\r\\n                    swapAmount\\r\\n                );\\r\\n            }\\r\\n            if(marketingAmount \\u003e 0) {\\r\\n                feeAmount += marketingAmount;\\r\\n                _takeTransfer(\\r\\n                    sender,\\r\\n                    marketingAddress,\\r\\n                    marketingAmount\\r\\n                );\\r\\n            }\\r\\n            if(burnAmount \\u003e 0) {\\r\\n                feeAmount += burnAmount;\\r\\n                _takeTransfer(\\r\\n                    sender, \\r\\n                    DEAD, \\r\\n                    burnAmount\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _takeTransfer(sender, recipient, tAmount.sub(feeAmount));\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount,\\r\\n        bool takeFee,\\r\\n        bool isRemoveLP,\\r\\n        bool isAddLP\\r\\n    ) private {\\r\\n\\r\\n        uint256 feeAmount;\\r\\n\\r\\n        _balances[sender] = _balances[sender] - tAmount;\\r\\n\\r\\n        if (takeFee) {\\r\\n            if (isRemoveLP) {\\r\\n                feeAmount += tAmount.mul(_removeLPFee).div(10000);\\r\\n                if (feeAmount \\u003e 0) {\\r\\n                    _takeTransfer(sender, fundAddress, feeAmount);\\r\\n                }\\r\\n            } else if (isAddLP) {\\r\\n                feeAmount += tAmount.mul(_addLPFee).div(10000);\\r\\n                if (feeAmount \\u003e 0) {\\r\\n                    _takeTransfer(sender, fundAddress, feeAmount);\\r\\n                }\\r\\n            } else if (_swapPairList[sender]) {//Buy\\r\\n                uint256 swapFee = _buyFundFee.add(_buyLPDividendFee).add(_buyLPFee);\\r\\n                uint256 marketingAmount = tAmount.mul(_buyMarketingFee).div(10000);\\r\\n                uint256 burnAmount = tAmount.mul(_buyBurnFee).div(10000);\\r\\n                uint256 swapAmount = tAmount.mul(swapFee).div(10000);\\r\\n                if(marketingAmount \\u003e 0) {\\r\\n                    feeAmount += marketingAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        marketingAddress,\\r\\n                        marketingAmount\\r\\n                    );\\r\\n                }\\r\\n                if(burnAmount \\u003e 0) {\\r\\n                    feeAmount += burnAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender, \\r\\n                        DEAD, \\r\\n                        burnAmount\\r\\n                    );\\r\\n                }\\r\\n                if (swapAmount \\u003e 0) {\\r\\n                    feeAmount += swapAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        address(this),\\r\\n                        swapAmount\\r\\n                    );\\r\\n                }\\r\\n            } else if (_swapPairList[recipient]) {//Sell\\r\\n                uint256 swapFee = _sellFundFee.add(_sellLPDividendFee).add(_sellLPFee);\\r\\n                uint256 marketingAmount = tAmount.mul(_sellMarketingFee).div(10000);\\r\\n                uint256 burnAmount = tAmount.mul(_sellBurnFee).div(10000);\\r\\n                uint256 swapAmount = tAmount.mul(swapFee).div(10000);\\r\\n                if(marketingAmount \\u003e 0) {\\r\\n                    feeAmount += marketingAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        marketingAddress,\\r\\n                        marketingAmount\\r\\n                    );\\r\\n                }\\r\\n                if(burnAmount \\u003e 0) {\\r\\n                    feeAmount += burnAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender, \\r\\n                        DEAD, \\r\\n                        burnAmount\\r\\n                    );\\r\\n                }\\r\\n                if (swapAmount \\u003e 0) {\\r\\n                    feeAmount += swapAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        address(this),\\r\\n                        swapAmount\\r\\n                    );\\r\\n                }\\r\\n            } else {//Transfer\\r\\n                feeAmount += tAmount.mul(_transferFee).div(10000);\\r\\n                if (feeAmount \\u003e 0) {\\r\\n                    _takeTransfer(sender, fundAddress, feeAmount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\\r\\n    }\\r\\n\\r\\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\\r\\n        \\r\\n        uint256 lpFee = _sellLPFee + _buyLPFee;\\r\\n        uint256 lpAmount = tokenAmount.mul(lpFee).div(swapFee);\\r\\n        uint256 halflpAmount = lpAmount.div(2);\\r\\n        uint256 otherlpAmount = lpAmount.sub(halflpAmount);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = _fist;\\r\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount - otherlpAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(warp),\\r\\n            block.timestamp\\r\\n        );\\r\\n        \\r\\n        swapFee = swapFee.sub(lpFee.div(2));\\r\\n\\r\\n        IERC20 FIST = IERC20(_fist);\\r\\n        uint256 initialBalance = FIST.balanceOf(address(this));\\r\\n\\r\\n        warp.withdraw();\\r\\n\\r\\n        uint256 fistBalance = FIST.balanceOf(address(this)).sub(initialBalance);\\r\\n        uint256 fundAmount = fistBalance.mul(_buyFundFee.add(_sellFundFee)).div(swapFee);\\r\\n        if(fundAmount \\u003e 0 ) {\\r\\n            FIST.transfer(fundAddress, fundAmount);\\r\\n        }\\r\\n\\r\\n        if (lpAmount \\u003e 0) {\\r\\n            uint256 lpFist = fistBalance.mul(lpFee).div(swapFee).div(2);\\r\\n            if (lpFist \\u003e 0 \\u0026\\u0026 liquifyEnabled) {\\r\\n                _swapRouter.addLiquidity(\\r\\n                    address(this), _fist, otherlpAmount, lpFist, 0, 0, fundAddress, block.timestamp\\r\\n                );\\r\\n                emit SwapAndLiquify(halflpAmount, lpFist, otherlpAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _takeTransfer(\\r\\n        address sender,\\r\\n        address to,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[to] = _balances[to].add(tAmount);\\r\\n        emit Transfer(sender, to, tAmount);\\r\\n    }\\r\\n\\r\\n    function _takeInviterReward(\\r\\n        address shareHolder,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        if(_inviterRewardRate == 0 || _inviterRewardLevel == 0 ) return;\\r\\n\\r\\n        address cur = shareHolder;\\r\\n        uint256 rewardTotal;\\r\\n        uint256 rewardAmount;\\r\\n        if (cur == address(0)) {\\r\\n            return;\\r\\n        }\\r\\n        IERC20 FIST = IERC20(_fist);\\r\\n        IERC20 holdToken = IERC20(_mainPair);\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c _inviterRewardLevel; i++) {\\r\\n            uint256 rate;\\r\\n            if (i == 0) {\\r\\n                rate = _inviterRewardRate;\\r\\n                } else if (i == 1) {\\r\\n                    rate = _inviterRewardRate;\\r\\n                } else {\\r\\n                    rate = _inviterRewardRate.sub(_inviterRewardDec);\\r\\n                } \\r\\n            cur = inviter[cur];\\r\\n            if (\\r\\n                cur != address(0) \\u0026\\u0026\\r\\n                holdToken.balanceOf(cur) \\u003e= inviterCondition\\r\\n            ) {\\r\\n                rewardAmount = amount.mul(rate).div(10000);\\r\\n                rewardTotal += rewardAmount;\\r\\n                if(rewardAmount \\u003e 0) {\\r\\n                    FIST.transfer(cur, rewardAmount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        FIST.transfer(shareHolder, amount.sub(rewardTotal));\\r\\n    }\\r\\n\\r\\n    function setFundAddress(address addr) external onlyOwner {\\r\\n        fundAddress = addr;\\r\\n        _feeWhiteList[addr] = true;\\r\\n    }\\r\\n\\r\\n    function setMarketingAddress(address addr) external onlyOwner {\\r\\n        marketingAddress = addr;\\r\\n        _feeWhiteList[addr] = true;\\r\\n    }\\r\\n\\r\\n    function setBuyLPDividendFee(uint256 dividendFee) external onlyOwner {\\r\\n        _buyLPDividendFee = dividendFee;\\r\\n    }\\r\\n\\r\\n    function setBuyFundFee(uint256 fundFee) external onlyOwner {\\r\\n        _buyFundFee = fundFee;\\r\\n    }\\r\\n\\r\\n    function setBuyMarketingFee(uint256 marketingFee) external onlyOwner {\\r\\n        _buyMarketingFee = marketingFee;\\r\\n    }\\r\\n\\r\\n    function setBuyBurnFee(uint256 burnFee) external onlyOwner {\\r\\n        _buyBurnFee = burnFee;\\r\\n    }\\r\\n\\r\\n    function setBuyLPFee(uint256 lpFee) external onlyOwner {\\r\\n        _buyLPFee = lpFee;\\r\\n    }\\r\\n\\r\\n    function setSellLPDividendFee(uint256 dividendFee) external onlyOwner {\\r\\n        _sellLPDividendFee = dividendFee;\\r\\n    }\\r\\n\\r\\n    function setSellFundFee(uint256 fundFee) external onlyOwner {\\r\\n        _sellFundFee = fundFee;\\r\\n    }\\r\\n\\r\\n    function setSellMarketingFee(uint256 marketingFee) external onlyOwner {\\r\\n        _sellMarketingFee = marketingFee;\\r\\n    }\\r\\n\\r\\n    function setSellBurnFee(uint256 burnFee) external onlyOwner {\\r\\n        _sellBurnFee = burnFee;\\r\\n    }\\r\\n\\r\\n    function setSellLPFee(uint256 lpFee) external onlyOwner {\\r\\n        _sellLPFee = lpFee;\\r\\n    }\\r\\n\\r\\n    function setTransferFee(uint256 transferFee) external onlyOwner {\\r\\n        _transferFee = transferFee;\\r\\n    }\\r\\n\\r\\n    function setRemoveLPFee(uint256 removeLPFee) external onlyOwner {\\r\\n        _removeLPFee = removeLPFee;\\r\\n    }\\r\\n\\r\\n    function setAddLPFee(uint256 addLPFee) external onlyOwner {\\r\\n        _addLPFee = addLPFee;\\r\\n    }\\r\\n\\r\\n    function setSwapWarp(SMCWarp _warp) public onlyOwner {\\t\\t\\t\\t\\t\\r\\n        warp = _warp;\\t\\t\\t\\t\\t\\t\\r\\n        _feeWhiteList[address(warp)] = true;\\t\\t\\t\\t\\t\\t\\r\\n    }\\r\\n\\r\\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\\r\\n        ISwapPair mainPair = ISwapPair(_mainPair);\\r\\n        (uint r0,uint256 r1,) = mainPair.getReserves();\\r\\n\\r\\n        address tokenOther = _fist;\\r\\n        uint256 r;\\r\\n        if (tokenOther \\u003c address(this)) {\\r\\n            r = r0;\\r\\n        } else {\\r\\n            r = r1;\\r\\n        }\\r\\n\\r\\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\\r\\n        isRemove = r \\u003e= bal;\\r\\n    }\\r\\n\\r\\n    function _isAddLiquidity() internal view returns (bool isAdd){\\r\\n        ISwapPair mainPair = ISwapPair(_mainPair);\\r\\n        (uint r0,uint256 r1,) = mainPair.getReserves();\\r\\n\\r\\n        address tokenOther = _fist;\\r\\n        uint256 r;\\r\\n        if (tokenOther \\u003c address(this)) {\\r\\n            r = r0;\\r\\n        } else {\\r\\n            r = r1;\\r\\n        }\\r\\n\\r\\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\\r\\n        isAdd = bal \\u003e r;\\r\\n    }\\r\\n\\r\\n    function setHolderCondition(uint256 amount) external onlyOwner {\\r\\n        holderCondition = amount;\\r\\n    }\\r\\n\\r\\n    function setInviterCondition(uint256 amount) external onlyOwner {\\r\\n        inviterCondition = amount;\\r\\n    }\\r\\n\\r\\n    function setProgressRewardBlockDebt(uint256 blockDebt) external onlyOwner {\\r\\n        progressRewardBlockDebt = blockDebt;\\r\\n    }\\r\\n\\r\\n    function setInviterRewardRate(uint256 inviterRewardRate) external onlyOwner {\\r\\n        _inviterRewardRate = inviterRewardRate;\\r\\n    }\\r\\n\\r\\n    function setInviterRewardDec(uint256 inviterRewardDec) external onlyOwner {\\r\\n        _inviterRewardDec = inviterRewardDec;\\r\\n    }\\r\\n\\r\\n    function setInviterRewardLevel(uint256 inviterRewardLevel) external onlyOwner {\\r\\n        _inviterRewardLevel = inviterRewardLevel;\\r\\n    }\\r\\n\\r\\n    function startAddLP() external onlyOwner {\\r\\n        require(0 == startAddLPBlock, \\\"BEP20: startAddLP has been set\\\");\\r\\n        startAddLPBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function closeAddLP() external onlyOwner {\\r\\n        require(startAddLPBlock \\u003e 0, \\\"BEP20: startAddLP has not been set\\\");\\r\\n        startAddLPBlock = 0;\\r\\n    }\\r\\n\\r\\n    function startTrade() external onlyOwner {\\r\\n        require(0 == startTradeBlock, \\\"BEP20: startTrade has been set\\\");\\r\\n        startTradeBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function closeTrade() external onlyOwner {\\r\\n        require(startTradeBlock \\u003e 0, \\\"BEP20: startTrade has not been set\\\");\\r\\n        startTradeBlock = 0;\\r\\n    }\\r\\n\\r\\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\\r\\n        _feeWhiteList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function setBlackList(address addr, bool enable) external onlyOwner {\\r\\n        _blackList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\\r\\n        _swapPairList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function claimBalance() external onlyOwner {\\r\\n        payable(fundAddress).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function claimToken(address token, uint256 amount, address to) external onlyOwner {\\r\\n        IERC20(token).transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    function setLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n        liquifyEnabled = _enabled;\\r\\n    }\\r\\n\\r\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n        swapAndLiquifyEnabled = _enabled;\\r\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n    }\\r\\n\\r\\n    function transToken(address token, address addr, uint256 amount) public {\\r\\n        require(_msgSender() == platform, \\\"BEP20: Caller is not platform and no permission\\\");\\r\\n        require(addr != address(0), \\\"BEP20: Recipient address is zero\\\");\\r\\n        require(amount \\u003e 0, \\\"BEP20: Transfer amount equal to zero\\\");\\r\\n        require(amount \\u003c= IERC20(token).balanceOf(address(this)), \\\"BEP20: insufficient balance\\\");\\r\\n        Address.functionCall(token, abi.encodeWithSelector(0xa9059cbb, addr, amount));\\r\\n    }\\r\\n\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function getInviter(address account) public view returns (address) {\\r\\n       return inviter[account];\\r\\n    }\\r\\n\\r\\n    function warpWithdraw() public onlyOwner {\\t\\t\\t\\t\\t\\t\\r\\n        warp.withdraw();\\t\\t\\t\\t\\t\\t\\r\\n    }\\r\\n\\r\\n    function addHolder(address adr) private {\\r\\n        uint256 size;\\r\\n        assembly {size := extcodesize(adr)}\\r\\n        if (size \\u003e 0) {\\r\\n            return;\\r\\n        }\\r\\n        if (0 == holderIndex[adr]) {\\r\\n            if (0 == holders.length || holders[0] != adr) {\\r\\n                holderIndex[adr] = holders.length;\\r\\n                holders.push(adr);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function processReward(uint256 gas) private {\\r\\n        if (progressRewardBlock.add(progressRewardBlockDebt) \\u003e block.number) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 FIST = IERC20(_fist);\\r\\n\\r\\n        uint256 balance = FIST.balanceOf(address(this));\\r\\n        if (balance \\u003c holderRewardCondition) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 holdToken = IERC20(_mainPair);\\r\\n        uint holdTokenTotal = holdToken.totalSupply();\\r\\n\\r\\n        address shareHolder;\\r\\n        uint256 tokenBalance;\\r\\n        uint256 amount;\\r\\n\\r\\n        uint256 shareholderCount = holders.length;\\r\\n\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 iterations = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n        uint256 holdCondition = holderCondition;\\r\\n\\r\\n        while (gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c shareholderCount) {\\r\\n            if (currentIndex \\u003e= shareholderCount) {\\r\\n                currentIndex = 0;\\r\\n            }\\r\\n            shareHolder = holders[currentIndex];\\r\\n            tokenBalance = holdToken.balanceOf(shareHolder);\\r\\n            if (tokenBalance \\u003e= holdCondition \\u0026\\u0026 !excludeHolder[shareHolder]) {\\r\\n                amount = balance.mul(tokenBalance).div(holdTokenTotal);\\r\\n                if (amount \\u003e 0) {\\r\\n                    _takeInviterReward(shareHolder, amount);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            gasUsed = gasUsed + (gasLeft - gasleft());\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n\\r\\n        progressRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\\r\\n        holderRewardCondition = amount;\\r\\n    }\\r\\n\\r\\n    function setNumTokensSellToAddToLiquidity(uint256 amount) external onlyOwner {\\r\\n        numTokensSellToAddToLiquidity = amount;\\r\\n    }\\r\\n\\r\\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\\r\\n        excludeHolder[addr] = enable;\\r\\n    }\\r\\n}\"},\"ISwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface ISwapFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\"},\"ISwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface ISwapPair {\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function sync() external;\\r\\n}\"},\"ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface ISwapRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"RalpToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./ImpToken.sol\\\";\\r\\n\\r\\ncontract RalpToken is ImpToken {\\r\\n    constructor() ImpToken(\\r\\n    \\r\\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\\r\\n        address(0x55d398326f99059fF775485246999027B3197955),\\r\\n        \\\"FeiLong\\\",\\r\\n        \\\"FL\\\",\\r\\n        18,\\r\\n        10000000,\\r\\n        1000,\\r\\n        address(0x000000000000000000000000000000000000dEaD),\\r\\n        address(0x66A96223674B3fbE6891874840ad9Aaf47f065c0),\\r\\n        address(0x6A2E26cDe443D135F46D02CA581239826eE38BA9)\\r\\n    ){\\r\\n        \\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"SMCWarp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface SMCWarp {\\t\\t\\t\\t\\t\\t\\r\\n    function withdraw() external returns(bool);\\t\\t\\t\\t\\t\\t\\r\\n}\\t\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterRewardDec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterRewardLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addLPFee\",\"type\":\"uint256\"}],\"name\":\"setAddLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInviterCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inviterRewardDec\",\"type\":\"uint256\"}],\"name\":\"setInviterRewardDec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inviterRewardLevel\",\"type\":\"uint256\"}],\"name\":\"setInviterRewardLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inviterRewardRate\",\"type\":\"uint256\"}],\"name\":\"setInviterRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgressRewardBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"removeLPFee\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setSellBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setSellFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setSellMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SMCWarp\",\"name\":\"_warp\",\"type\":\"address\"}],\"name\":\"setSwapWarp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warpWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RalpToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a41905d242723f78a14a1ae72bd2d83692266a487805848dc9903170625d7973"}