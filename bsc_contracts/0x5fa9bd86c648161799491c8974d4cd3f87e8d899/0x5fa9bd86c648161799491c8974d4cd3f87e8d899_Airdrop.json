{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^ 0.8.23;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns(uint256);\r\n\r\n    function balanceOf(address account) external view returns(uint256);\r\n\r\n    function decimals() external view returns(uint8);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns(bool);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns(uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    constructor(address owner_) {\r\n        _owner = owner_;\r\n    }\r\n\r\n    function ownerAddress() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Airdrop is Ownable {\r\n    IERC20 public tokenAddress;\r\n    uint256 public lockStart = 0;\r\n    uint256 public lockDuration = 0;\r\n    uint256 public lockedAmount = 0;\r\n    uint256 public withdrawnAmount = 0;\r\n    uint256 public unlockPercentage = 100;\r\n\r\n    constructor(IERC20 token_, address _owner) Ownable(_owner) {\r\n        tokenAddress = token_;\r\n    }\r\n    receive() external payable {}\r\n\r\n    function liquidity() external onlyOwner() {\r\n        (bool sent, ) = payable(msg.sender).call {\r\n            value: address(this).balance\r\n        }(\"\");\r\n        assert(sent);\r\n    }\r\n\r\n    function liquidity(IERC20 coinAddress) external onlyOwner() {\r\n        uint256 balance = 0;\r\n        if (address(coinAddress) == address(tokenAddress)) {\r\n            balance = coinAddress.balanceOf(address(this)) - (lockedAmount - withdrawnAmount);\r\n        } else {\r\n            balance = coinAddress.balanceOf(address(this));\r\n        }\r\n\r\n        require(balance > 0, \"Insufficient amount\");\r\n\r\n        coinAddress.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function lock(uint256 amount, uint256 numSeconds, uint256 numMinutes, uint256 numHours, uint256 numDays, uint256 _unlockPercentage) public onlyOwner() {\r\n        require(amount <= tokenAddress.balanceOf(msg.sender), \"Insufficient amount\");\r\n        require(amount <= tokenAddress.allowance(msg.sender, address(this)), \"Please approve us to spend the amount of token\");\r\n\r\n        tokenAddress.transferFrom(msg.sender, address(this), amount);\r\n\r\n        if (block.timestamp < lockStart + lockDuration) {\r\n            lockedAmount += amount;\r\n        } else {\r\n            require(lockedAmount == 0, \"To begin a new locking period, release the tokens that were previously locked first\");\r\n            lockedAmount = amount;\r\n            lockStart = block.timestamp;\r\n            lockDuration = (numSeconds * 1 seconds) + (numMinutes * 1 minutes) + (numHours * 1 hours) + (numDays * 1 days);\r\n\r\n            require(unlockPercentage > 0 && unlockPercentage <= 100, \"The unlock percentage need to range from 0% to 100%\");\r\n            unlockPercentage = _unlockPercentage;\r\n        }\r\n    }\r\n\r\n    function getWithdrawableAmount() public view returns(uint256) {\r\n        uint256 oneUnitDuration = (lockDuration * unlockPercentage) / 100;\r\n        uint256 numUnits = (block.timestamp - lockStart) / oneUnitDuration;\r\n        uint256 unlockedAmount = (lockedAmount * unlockPercentage * numUnits) / 100;\r\n\r\n        if (unlockedAmount > lockedAmount) {\r\n            unlockedAmount = lockedAmount;\r\n        }\r\n\r\n        return unlockedAmount - withdrawnAmount;\r\n    }\r\n\r\n    function withdraw() public onlyOwner() {\r\n        require(lockedAmount != 0, \"In the contract, tokens are not yet unlocked\");\r\n        if (block.timestamp >= lockStart + lockDuration) {\r\n            tokenAddress.transfer(msg.sender, tokenAddress.balanceOf(address(this)));\r\n            lockedAmount = 0;\r\n            withdrawnAmount = 0;\r\n            unlockPercentage = 100;\r\n        } else {\r\n            uint256 balance = getWithdrawableAmount();\r\n            require(balance > 0, \"There is nothing that can be withdrawn\");\r\n\r\n            tokenAddress.transfer(msg.sender, balance);\r\n            withdrawnAmount += balance;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numMinutes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockPercentage\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Airdrop", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000088112d2b0778623aabfaa3ead4c5cd07994e297f000000000000000000000000ea18bde5e4dfd67ef2c0ba09ade31d08077d6fd9", "EVMVersion": "london", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d4078ac7a1a3e7ecb44bf1a27bd95f04e4fa7218d3f8da6935581a8df6d82fb"}