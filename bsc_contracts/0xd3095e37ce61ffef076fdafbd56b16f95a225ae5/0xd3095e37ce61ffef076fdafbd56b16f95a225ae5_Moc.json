{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Moc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\r\\nimport \\\"./library/PancakeLibrary.sol\\\";\\r\\nimport \\\"./interface/IPancakeRouter.sol\\\";\\r\\nimport \\\"./interface/IPancakePair.sol\\\";\\r\\nimport \\\"./interface/IMocDAO.sol\\\";\\r\\n\\r\\ncontract Moc is IERC20, IERC20Metadata, Ownable {\\r\\n    using Address for address;\\r\\n    using BitMaps for BitMaps.BitMap;\\r\\n\\r\\n    event Rebase(\\r\\n        uint24 indexed period,\\r\\n        uint256 hasInterest,\\r\\n        uint256 noInterest,\\r\\n        uint256 total\\r\\n    );\\r\\n\\r\\n    event Fee(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    address private constant ROUTER_ADDRESS =\\r\\n        0x10ED43C718714eb63d5aA57B78B54704E256024E;\\r\\n\\r\\n    address private constant USDT_ADDRESS =\\r\\n        0x55d398326f99059fF775485246999027B3197955;\\r\\n\\r\\n    uint256 public constant PERIOD = 12 hours;\\r\\n\\r\\n    uint256 public constant RATE = 1017;\\r\\n\\r\\n    uint256 public constant THRESHOLD = 1000 * 1e6;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    address public sellExiAddress = address(2);\\r\\n\\r\\n    address public sellEaiAddress = address(3);\\r\\n\\r\\n    address public sellTreaturyAddress = address(4);\\r\\n\\r\\n    address public buyExiAddress = address(5);\\r\\n\\r\\n    address public buyMocAddress = address(6);\\r\\n\\r\\n    uint256 public initTimestamp;\\r\\n\\r\\n    IMocDAO public mocDAO;\\r\\n\\r\\n    address public ex;\\r\\n\\r\\n    address public pair;\\r\\n\\r\\n    address public receiver;\\r\\n\\r\\n    uint256 public lastNoInterest;\\r\\n\\r\\n    uint24 public lastRebasePeriod;\\r\\n\\r\\n    mapping(address => uint24) public lastPeriodPerAccount;\\r\\n\\r\\n    BitMaps.BitMap private sellWhitelist;\\r\\n\\r\\n    BitMaps.BitMap private buyWhitelist;\\r\\n\\r\\n    constructor(address _receiver, address mocDAOAddress) {\\r\\n        _name = \\\"macroeconomics\\\";\\r\\n        _symbol = \\\"MOC\\\";\\r\\n        initTimestamp = block.timestamp;\\r\\n        mocDAO = IMocDAO(mocDAOAddress);\\r\\n        pair = PancakeLibrary.pairFor(\\r\\n            IPancakeRouter(ROUTER_ADDRESS).factory(),\\r\\n            address(this),\\r\\n            USDT_ADDRESS\\r\\n        );\\r\\n        uint256 amount = 59900000 * 10**decimals();\\r\\n        receiver = _receiver;\\r\\n        _mint(receiver, amount);\\r\\n        addBuyWhitelist(receiver);\\r\\n        addSellWhitelist(receiver);\\r\\n    }\\r\\n\\r\\n    function addSellWhitelist(address adr) public onlyOwner {\\r\\n        sellWhitelist.set(uint256(uint160(adr)));\\r\\n    }\\r\\n\\r\\n    function removeSellWhitelist(address adr) public onlyOwner {\\r\\n        sellWhitelist.unset(uint256(uint160(adr)));\\r\\n    }\\r\\n\\r\\n    function getSellWhitelist(address adr) public view returns (bool) {\\r\\n        return sellWhitelist.get(uint256(uint160(adr)));\\r\\n    }\\r\\n\\r\\n    function addBuyWhitelist(address adr) public onlyOwner {\\r\\n        buyWhitelist.set(uint256(uint160(adr)));\\r\\n    }\\r\\n\\r\\n    function removeBuyWhitelist(address adr) public onlyOwner {\\r\\n        buyWhitelist.unset(uint256(uint160(adr)));\\r\\n    }\\r\\n\\r\\n    function getBuyWhitelist(address adr) public view returns (bool) {\\r\\n        return buyWhitelist.get(uint256(uint160(adr)));\\r\\n    }\\r\\n\\r\\n    function setEx(address _ex) external onlyOwner {\\r\\n        ex = _ex;\\r\\n    }\\r\\n\\r\\n    function setSellExiAddress(address adr) external onlyOwner {\\r\\n        sellExiAddress = adr;\\r\\n        addBuyWhitelist(adr);\\r\\n        addSellWhitelist(adr);\\r\\n    }\\r\\n\\r\\n    function setSellEaiAddress(address adr) external onlyOwner {\\r\\n        sellEaiAddress = adr;\\r\\n        addBuyWhitelist(adr);\\r\\n        addSellWhitelist(adr);\\r\\n    }\\r\\n\\r\\n    function setSellTreaturyAddress(address adr) external onlyOwner {\\r\\n        sellTreaturyAddress = adr;\\r\\n        addBuyWhitelist(adr);\\r\\n        addSellWhitelist(adr);\\r\\n    }\\r\\n\\r\\n    function setBuyExiAddress(address adr) external onlyOwner {\\r\\n        buyExiAddress = adr;\\r\\n        addBuyWhitelist(adr);\\r\\n        addSellWhitelist(adr);\\r\\n    }\\r\\n\\r\\n    function setBuyMocAddress(address adr) external onlyOwner {\\r\\n        buyMocAddress = adr;\\r\\n        addBuyWhitelist(adr);\\r\\n        addSellWhitelist(adr);\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 6;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return getTotalSupply(getCurrentPriold());\\r\\n    }\\r\\n\\r\\n    function calc(uint256 balance, uint24 n) private pure returns (uint256) {\\r\\n        for (uint24 i = 0; i < n; ++i) {\\r\\n            balance = (balance * RATE) / 1000;\\r\\n        }\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function getCurrentPriold() private view returns (uint24) {\\r\\n        return uint24((block.timestamp - initTimestamp) / PERIOD);\\r\\n    }\\r\\n\\r\\n    function canInterest(address adr) private view returns (bool) {\\r\\n        if (adr.isContract() || adr == address(0) || adr == receiver) {\\r\\n            return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 balance = _balances[account];\\r\\n        if (\\r\\n            canInterest(account) &&\\r\\n            balance >= THRESHOLD &&\\r\\n            mocDAO.balanceOf(account) >= 1e6\\r\\n        ) {\\r\\n            return\\r\\n                calc(\\r\\n                    balance,\\r\\n                    getCurrentPriold() - lastPeriodPerAccount[account]\\r\\n                );\\r\\n        }\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateAccount(\\r\\n        uint24 currentPeriod,\\r\\n        uint24 lastPeriod,\\r\\n        address user,\\r\\n        uint256 oldBalance,\\r\\n        uint256 newBalance\\r\\n    ) private {\\r\\n        if (currentPeriod > lastPeriod) {\\r\\n            lastPeriodPerAccount[user] = currentPeriod;\\r\\n        }\\r\\n        if (canInterest(user)) {\\r\\n            if (newBalance < THRESHOLD || mocDAO.balanceOf(user) < 1e6) {\\r\\n                if (oldBalance < THRESHOLD || mocDAO.balanceOf(user) < 1e6) {\\r\\n                    lastNoInterest = lastNoInterest - oldBalance + newBalance;\\r\\n                } else {\\r\\n                    lastNoInterest += newBalance;\\r\\n                }\\r\\n            } else if (oldBalance < THRESHOLD) {\\r\\n                lastNoInterest -= oldBalance;\\r\\n            }\\r\\n        } else {\\r\\n            lastNoInterest = lastNoInterest - oldBalance + newBalance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateDAOAccount(\\r\\n        address user,\\r\\n        uint256 oldBalance,\\r\\n        uint256 newBalance,\\r\\n        uint256 mocBalance\\r\\n    ) external {\\r\\n        require(msg.sender == address(mocDAO), \\\"not allowed call\\\");\\r\\n        if (canInterest(user)) {\\r\\n            if (mocBalance >= THRESHOLD) {\\r\\n                if (oldBalance < 1e6 && newBalance >= 1e6) {\\r\\n                    uint24 currentPeriod = rebase();\\r\\n                    _balances[user] = mocBalance;\\r\\n                    uint24 lastPeriod = lastPeriodPerAccount[user];\\r\\n                    if (currentPeriod > lastPeriod) {\\r\\n                        lastPeriodPerAccount[user] = currentPeriod;\\r\\n                    }\\r\\n                    lastNoInterest -= mocBalance;\\r\\n                } else if (oldBalance >= 1e6 && newBalance < 1e6) {\\r\\n                    uint24 currentPeriod = rebase();\\r\\n                    _balances[user] = mocBalance;\\r\\n                    uint24 lastPeriod = lastPeriodPerAccount[user];\\r\\n                    if (currentPeriod > lastPeriod) {\\r\\n                        lastPeriodPerAccount[user] = currentPeriod;\\r\\n                    }\\r\\n                    lastNoInterest += mocBalance;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        uint24 currentPeriod = rebase();\\r\\n        uint256 oldB = _balances[from];\\r\\n        uint256 fromBalance = balanceOf(from);\\r\\n        require(\\r\\n            fromBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        uint256 newB;\\r\\n        unchecked {\\r\\n            newB = fromBalance - amount;\\r\\n            _balances[from] = newB;\\r\\n        }\\r\\n        updateAccount(\\r\\n            currentPeriod,\\r\\n            lastPeriodPerAccount[from],\\r\\n            from,\\r\\n            oldB,\\r\\n            newB\\r\\n        );\\r\\n\\r\\n        uint256 subAmount;\\r\\n        if (from != pair && to != pair && from != ex && to != ex) {\\r\\n            subAmount = (amount * 15) / 100;\\r\\n            _balances[address(0)] += subAmount;\\r\\n            lastNoInterest += subAmount;\\r\\n            emit Transfer(from, address(0), subAmount);\\r\\n        }\\r\\n        if (to == pair && !sellWhitelist.get(uint256(uint160(from)))) {\\r\\n            (uint112 r0, uint112 r1, ) = IPancakePair(pair).getReserves();\\r\\n            uint256 amountA;\\r\\n            if (r0 > 0 && r1 > 0) {\\r\\n                amountA = IPancakeRouter(ROUTER_ADDRESS).quote(amount, r1, r0);\\r\\n            }\\r\\n            uint256 balanceA = IERC20(USDT_ADDRESS).balanceOf(pair);\\r\\n            if (balanceA < r0 + amountA) {\\r\\n                uint256 amount50 = (amount * 50) / 1000;\\r\\n\\r\\n                oldB = _balances[sellExiAddress];\\r\\n                newB = balanceOf(sellExiAddress) + amount50;\\r\\n                _balances[sellExiAddress] = newB;\\r\\n                updateAccount(\\r\\n                    currentPeriod,\\r\\n                    lastPeriodPerAccount[sellExiAddress],\\r\\n                    sellExiAddress,\\r\\n                    oldB,\\r\\n                    newB\\r\\n                );\\r\\n                emit Fee(from, sellExiAddress, amount50);\\r\\n\\r\\n                oldB = _balances[sellEaiAddress];\\r\\n                newB = balanceOf(sellEaiAddress) + amount50;\\r\\n                _balances[sellEaiAddress] = newB;\\r\\n                updateAccount(\\r\\n                    currentPeriod,\\r\\n                    lastPeriodPerAccount[sellEaiAddress],\\r\\n                    sellEaiAddress,\\r\\n                    oldB,\\r\\n                    newB\\r\\n                );\\r\\n                emit Fee(from, sellEaiAddress, amount50);\\r\\n                uint256 amount25 = (amount * 25) / 1000;\\r\\n\\r\\n                _balances[address(0)] += amount25;\\r\\n                lastNoInterest += amount25;\\r\\n                emit Fee(from, address(0), amount25);\\r\\n\\r\\n                oldB = _balances[sellTreaturyAddress];\\r\\n                newB = balanceOf(sellTreaturyAddress) + amount25;\\r\\n                _balances[sellTreaturyAddress] = newB;\\r\\n                updateAccount(\\r\\n                    currentPeriod,\\r\\n                    lastPeriodPerAccount[sellTreaturyAddress],\\r\\n                    sellTreaturyAddress,\\r\\n                    oldB,\\r\\n                    newB\\r\\n                );\\r\\n                emit Fee(from, sellTreaturyAddress, amount25);\\r\\n                subAmount = amount50 + amount50 + amount25 + amount25;\\r\\n            }\\r\\n        }\\r\\n        if (from == pair && !buyWhitelist.get(uint256(uint160(to)))) {\\r\\n            (uint112 r0, uint112 r1, ) = IPancakePair(pair).getReserves();\\r\\n            uint256 amountA;\\r\\n            if (r0 > 0 && r1 > 0) {\\r\\n                amountA = IPancakeRouter(ROUTER_ADDRESS).getAmountIn(\\r\\n                    amount,\\r\\n                    r0,\\r\\n                    r1\\r\\n                );\\r\\n            }\\r\\n            uint256 balanceA = IERC20(USDT_ADDRESS).balanceOf(pair);\\r\\n            if (balanceA >= r0 + amountA) {\\r\\n                uint256 amount50 = (amount * 50) / 1000;\\r\\n\\r\\n                oldB = _balances[buyExiAddress];\\r\\n                newB = balanceOf(buyExiAddress) + amount50;\\r\\n                _balances[buyExiAddress] = newB;\\r\\n                updateAccount(\\r\\n                    currentPeriod,\\r\\n                    lastPeriodPerAccount[buyExiAddress],\\r\\n                    buyExiAddress,\\r\\n                    oldB,\\r\\n                    newB\\r\\n                );\\r\\n                emit Fee(from, buyExiAddress, amount50);\\r\\n\\r\\n                marketReward(from, to, currentPeriod, amount, amount50);\\r\\n\\r\\n                oldB = _balances[buyMocAddress];\\r\\n                newB = balanceOf(buyMocAddress) + amount50;\\r\\n                _balances[buyMocAddress] = newB;\\r\\n                updateAccount(\\r\\n                    currentPeriod,\\r\\n                    lastPeriodPerAccount[buyMocAddress],\\r\\n                    buyMocAddress,\\r\\n                    oldB,\\r\\n                    newB\\r\\n                );\\r\\n                emit Fee(from, buyMocAddress, amount50);\\r\\n                subAmount = amount50 + amount50 + amount50;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        oldB = _balances[to];\\r\\n        uint256 toAmount = amount - subAmount;\\r\\n        newB = balanceOf(to) + toAmount;\\r\\n        _balances[to] = newB;\\r\\n        updateAccount(currentPeriod, lastPeriodPerAccount[to], to, oldB, newB);\\r\\n\\r\\n        emit Transfer(from, to, toAmount);\\r\\n    }\\r\\n\\r\\n    function marketReward(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint24 currentPeriod,\\r\\n        uint256 amount,\\r\\n        uint256 restAmount\\r\\n    ) private {\\r\\n        address p = mocDAO.parents(to);\\r\\n        uint256 oldB;\\r\\n        uint256 newB;\\r\\n        for (uint256 i = 1; i <= 10 && p != address(0); ++i) {\\r\\n            uint256 pAmount;\\r\\n            if (i == 1) {\\r\\n                pAmount = (amount * 9) / 1000;\\r\\n            } else if (i == 2) {\\r\\n                pAmount = (amount * 7) / 1000;\\r\\n            } else if (i == 3) {\\r\\n                pAmount = (amount * 5) / 1000;\\r\\n            } else if (i == 4) {\\r\\n                pAmount = (amount * 3) / 1000;\\r\\n            } else if (i == 5) {\\r\\n                pAmount = amount / 1000;\\r\\n            } else if (i == 6) {\\r\\n                pAmount = amount / 1000;\\r\\n            } else if (i == 7) {\\r\\n                pAmount = (amount * 3) / 1000;\\r\\n            } else if (i == 8) {\\r\\n                pAmount = (amount * 5) / 1000;\\r\\n            } else if (i == 9) {\\r\\n                pAmount = (amount * 7) / 1000;\\r\\n            } else {\\r\\n                pAmount = restAmount;\\r\\n            }\\r\\n            oldB = _balances[p];\\r\\n            newB = balanceOf(p) + pAmount;\\r\\n            _balances[p] = newB;\\r\\n            updateAccount(\\r\\n                currentPeriod,\\r\\n                lastPeriodPerAccount[p],\\r\\n                p,\\r\\n                oldB,\\r\\n                newB\\r\\n            );\\r\\n            emit Fee(from, p, pAmount);\\r\\n            restAmount -= pAmount;\\r\\n            p = mocDAO.parents(p);\\r\\n        }\\r\\n        if (restAmount > 0) {\\r\\n            _balances[address(0)] += restAmount;\\r\\n            lastNoInterest += restAmount;\\r\\n            emit Fee(from, address(0), restAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalSupply(uint24 currentPeriod)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 total = _totalSupply;\\r\\n        uint256 noInterest = lastNoInterest;\\r\\n        for (uint24 i = lastRebasePeriod; i < currentPeriod; ++i) {\\r\\n            total = ((total - noInterest) * RATE) / 1000 + noInterest;\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function rebase() public returns (uint24) {\\r\\n        uint24 currentPeriod = getCurrentPriold();\\r\\n        if (currentPeriod <= lastRebasePeriod) {\\r\\n            return currentPeriod;\\r\\n        }\\r\\n        uint256 total = _totalSupply;\\r\\n        uint256 noInterest = lastNoInterest;\\r\\n        for (uint24 i = lastRebasePeriod; i < currentPeriod; ++i) {\\r\\n            uint256 hasInterest = total - noInterest;\\r\\n            total = (hasInterest * RATE) / 1000 + noInterest;\\r\\n            emit Rebase(i, hasInterest, noInterest, total);\\r\\n        }\\r\\n        _totalSupply = total;\\r\\n        lastRebasePeriod = currentPeriod;\\r\\n        return currentPeriod;\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        uint24 currentPeriod = rebase();\\r\\n        _totalSupply += amount;\\r\\n        uint256 balance = balanceOf(account);\\r\\n        uint256 newBalance = balance + amount;\\r\\n        _balances[account] = newBalance;\\r\\n        updateAccount(\\r\\n            currentPeriod,\\r\\n            lastPeriodPerAccount[account],\\r\\n            account,\\r\\n            balance,\\r\\n            newBalance\\r\\n        );\\r\\n\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance >= amount,\\r\\n                \\\"ERC20: insufficient allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/BitMaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/PancakeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary PancakeLibrary {\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\\r\\n                hex\\\"ff\\\",\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'   //mainnet\\r\\n            )))));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IPancakeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPancakeRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IMocDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMocDAO is IERC20 {\\r\\n    function parents(address user) external view returns(address);\\r\\n    function root() external view returns(address);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mocDAOAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"period\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hasInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addBuyWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addSellWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMocAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBuyWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getSellWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNoInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPeriodPerAccount\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebasePeriod\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mocDAO\",\"outputs\":[{\"internalType\":\"contract IMocDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"removeBuyWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"removeSellWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreaturyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setBuyExiAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setBuyMocAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ex\",\"type\":\"address\"}],\"name\":\"setEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setSellEaiAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setSellExiAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setSellTreaturyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mocBalance\",\"type\":\"uint256\"}],\"name\":\"updateDAOAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Moc", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000004f56300126d50f5c8634bb544d7f52e7a3f21704000000000000000000000000317f2ce484065542921074c9f5d31252e494869d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}