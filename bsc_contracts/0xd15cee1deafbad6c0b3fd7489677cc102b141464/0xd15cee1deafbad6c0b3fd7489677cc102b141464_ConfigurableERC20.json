{"SourceCode": "/*\r\n   _____             __ _                       _     _      \r\n  / ____|           / _(_)                     | |   | |     v2 -> Matic Compatible\r\n | |     ___  _ __ | |_ _  __ _ _   _ _ __ __ _| |__ | | ___ \r\n | |    / _ \\| '_ \\|  _| |/ _` | | | | '__/ _` | '_ \\| |/ _ \\\r\n | |___| (_) | | | | | | | (_| | |_| | | | (_| | |_) | |  __/\r\n  \\_____\\___/|_| |_|_| |_|\\__, |\\__,_|_|  \\__,_|_.__/|_|\\___|\r\n                           __/ |                             \r\n  ______ _____   _____ ___|___/_                             \r\n |  ____|  __ \\ / ____|__ \\ / _ \\                            \r\n | |__  | |__) | |       ) | | | |                           \r\n |  __| |  _  /| |      / /| | | |                           \r\n | |____| | \\ \\| |____ / /_| |_| |                           \r\n |______|_|  \\_\\\\_____|____|\\___/ \r\n \r\n By the team that brought you:\r\n  --- > Circuits of Value (http://circuitsofvalue.com)\r\n  --- > Emblem Vault (https://emblem.finance)\r\n  \r\n Documentation:\r\n  --- > Github (https://github.com/EmblemLabs/ConfigurableERC20)\r\n  \r\n UI:\r\n  --- > (https://emblemlabs.github.io/ConfigurableERC20/)\r\n*/\r\n\r\n//  SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Configurable is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n    uint256 internal _totalSupply;\r\n    address public resolver;\r\n    address private governance;\r\n    bool private _transferable = true;\r\n    bool private _burnable = true;\r\n    bool private _visible = true;\r\n    bool private _allowPrivateTransactions = false;\r\n    bool private _locked = false;\r\n    bool private _forever = false;\r\n    uint256 private _lockBlock = 0;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    mapping(address => bool) public minters;\r\n    mapping(address => bool) public viewers;\r\n    mapping(address => bool) public depositers;\r\n\r\n    function _isGoverner() internal view returns (bool) {\r\n        return _msgSender() == governance;\r\n    }\r\n\r\n    function _isViewer() internal view returns (bool) {\r\n        return viewers[_msgSender()];\r\n    }\r\n\r\n    function _isMinter() internal view returns (bool) {\r\n        return minters[_msgSender()];\r\n    }\r\n    \r\n    function _isDepositer() internal view returns (bool) {\r\n        return depositers[_msgSender()];\r\n    }\r\n\r\n\r\n    function transferable() public view returns (bool) {\r\n        return _transferable;\r\n    }\r\n\r\n    function burnable() public view returns (bool) {\r\n        return _burnable;\r\n    }\r\n\r\n    function visible() public view returns (bool) {\r\n        return _visible;\r\n    }\r\n\r\n    function visibleOrAdmin() public view returns (bool) {\r\n        return _visible || _isGoverner();\r\n    }\r\n\r\n    function allowPrivateTransactions() public view returns (bool) {\r\n        return _allowPrivateTransactions;\r\n    }\r\n\r\n    function blockNumberLocked() public view returns (bool) {\r\n        return _lockBlock != 0 && block.number < _lockBlock;\r\n    }\r\n\r\n    function locked() public view returns (bool) {\r\n        return _locked || blockNumberLocked();\r\n    }\r\n\r\n    function lockedPermenantly() public view returns (bool) {\r\n        return locked() && _forever;\r\n    }\r\n\r\n    function blocksTillUnlock() public view returns (uint256) {\r\n        if (_lockBlock > block.number) {\r\n            return _lockBlock.sub(block.number);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    modifier isTransferable() {\r\n        require(_transferable, \"Contract does not allow transfering\");\r\n        _;\r\n    }\r\n\r\n    modifier isBurnable() {\r\n        require(_burnable, \"Contract does not allow burning\");\r\n        _;\r\n    }\r\n\r\n    modifier isVisibleOrCanView() {\r\n        require(\r\n            _visible || _isViewer() || _isGoverner(),\r\n            \"Contract is private and you are not Governer or on viewers list\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canSendPrivateOrGoverner() {\r\n        require(\r\n            _allowPrivateTransactions || _isGoverner(),\r\n            \"Contract cannot send private transactions\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_isGoverner(), \"Sender is not Governer\");\r\n        _;\r\n    }\r\n\r\n    modifier notLocked() {\r\n        require(!locked(), \"Contract is locked to governance changes\");\r\n        _;\r\n    }\r\n\r\n    modifier canMint() {\r\n        require(_isMinter(), \"No Minting Privilages\");\r\n        _;\r\n    }\r\n    \r\n    modifier canDeposit() {\r\n        require(_isDepositer(), \"No Depositing Privilages\");\r\n        _;\r\n    }\r\n\r\n    function unLock() public onlyOwner {\r\n        require(\r\n            !lockedPermenantly(),\r\n            \"Contract locked forever to governance changes\"\r\n        );\r\n        require(\r\n            !blockNumberLocked(),\r\n            \"Contract has been locked until a blocknumber\"\r\n        );\r\n        require(locked(), \"Contract not locked\");\r\n        _locked = false;\r\n    }\r\n\r\n    function lockForever() public onlyOwner {\r\n        require(\r\n            !lockedPermenantly(),\r\n            \"Contract locked forever to governance changes\"\r\n        );\r\n        require(\r\n            !blockNumberLocked(),\r\n            \"Contract has been locked until a blocknumber\"\r\n        );\r\n        _locked = true;\r\n        _forever = true;\r\n    }\r\n\r\n    function lockTemporarily() public onlyOwner notLocked {\r\n        _locked = true;\r\n    }\r\n\r\n    function lockTemporarilyTillBlock(uint256 blockNumber)\r\n        public\r\n        onlyOwner\r\n        notLocked\r\n    {\r\n        require(\r\n            block.number < blockNumber,\r\n            \"Provided Block numbner is in the past\"\r\n        );\r\n        _lockBlock = blockNumber;\r\n    }\r\n\r\n    function toggleBurnable() public onlyOwner notLocked {\r\n        _burnable = !_burnable;\r\n    }\r\n\r\n    function toggleTransferable() public onlyOwner notLocked {\r\n        _transferable = !_transferable;\r\n    }\r\n\r\n    function toggleVisibility() public onlyOwner notLocked {\r\n        _visible = !_visible;\r\n    }\r\n\r\n    function togglePrivateTransferability() public onlyOwner notLocked {\r\n        _allowPrivateTransactions = !_allowPrivateTransactions;\r\n    }\r\n\r\n    function setGovernance(address _governance) public onlyOwner notLocked {\r\n        _setGovernance(_governance);\r\n    }\r\n    \r\n    /* For compatibility with Ownable */\r\n    function transferOwnership(address _governance) public onlyOwner notLocked {\r\n        _setGovernance(_governance);\r\n    }\r\n\r\n    function _setGovernance(address _governance) internal {\r\n        minters[governance] = false; // Remove old owner from minters list\r\n        viewers[governance] = false; // Remove old owner from viewers list\r\n        depositers[governance] = false; //Remove old owner from depositer list\r\n        minters[_governance] = true; // Add new owner to minters list\r\n        viewers[_governance] = true; // Add new owner to viewers list\r\n        depositers[_governance] = true; //Add new owner from depositer list\r\n        governance = _governance; // Set new owner\r\n    }\r\n}\r\n\r\ncontract ERC20 is IERC20, Configurable {\r\n    using SafeMath for uint256;\r\n\r\n    function totalSupply()\r\n        public\r\n        override\r\n        view\r\n        isVisibleOrCanView\r\n        returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        override\r\n        view\r\n        isVisibleOrCanView\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override isTransferable returns (bool) {\r\n        _transferFromPrivate(sender, recipient, amount, visible());\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n    \r\n    function withdraw(uint256 amount) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n    \r\n    function deposit(address user, bytes calldata depositData)\r\n        external\r\n        canDeposit\r\n    {\r\n        uint256 amount = abi.decode(depositData, (uint256));\r\n        _mint(user, amount);\r\n    }\r\n\r\n    function _transferFromPrivate(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool _private\r\n    ) internal isTransferable returns (bool) {\r\n        _transferPrivate(sender, recipient, amount, _private);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        isTransferable\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal isTransferable {\r\n        _transferPrivate(sender, recipient, amount, !visible());\r\n    }\r\n\r\n    function _transferPrivate(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool _private\r\n    ) internal isTransferable {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        if (!_private) {\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        if (visible()) {\r\n            emit Transfer(address(0), account, amount);\r\n        }\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        if (visible()) {\r\n            emit Transfer(account, address(0), amount);\r\n        }\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        if (visible()) {\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ncontract ConfigurableERC20 is ERC20 {\r\n    \r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    bool initialized = false;\r\n\r\n    constructor() public {\r\n        require(!initialized, 'Already initialized');\r\n        name = \"Circuits of Value V2\";\r\n        symbol = \"COVAL\";\r\n        decimals = 8;\r\n        _setGovernance(msg.sender);\r\n        initialized = true;\r\n    }\r\n    \r\n    function init() public {\r\n        // require(!initialized, 'Already initialized');\r\n        // name = \"ChangeMe\";\r\n        // symbol = \"CHANGE\";\r\n        // decimals = 18;\r\n        // _setGovernance(msg.sender);\r\n        // initialized = true;\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount,\r\n        bool _private\r\n    ) public isTransferable canSendPrivateOrGoverner {\r\n        _transferPrivate(_msgSender(), to, amount, _private);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bool _private\r\n    ) public isTransferable canSendPrivateOrGoverner {\r\n        _transferPrivate(from, to, amount, _private);\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public canMint notLocked {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public isBurnable {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function changeContractDetails(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        uint8 _decimals\r\n    ) public onlyOwner notLocked {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function addMinter(address _minter) public onlyOwner notLocked {\r\n        minters[_minter] = true;\r\n    }\r\n\r\n    function removeMinter(address _minter) public onlyOwner notLocked {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    function addViewer(address _viewer) public onlyOwner notLocked {\r\n        viewers[_viewer] = true;\r\n    }\r\n\r\n    function removeViewer(address _viewer) public onlyOwner notLocked {\r\n        viewers[_viewer] = false;\r\n    }\r\n    \r\n    function addDepositer(address _depositer) public onlyOwner notLocked {\r\n        depositers[_depositer] = true;\r\n    }\r\n\r\n    function removeDepositer(address _depositer) public onlyOwner notLocked {\r\n        depositers[_depositer] = false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"}],\"name\":\"addDepositer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_viewer\",\"type\":\"address\"}],\"name\":\"addViewer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowPrivateTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumberLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksTillUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"changeContractDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockForever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTemporarily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"lockTemporarilyTillBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPermenantly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"}],\"name\":\"removeDepositer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_viewer\",\"type\":\"address\"}],\"name\":\"removeViewer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePrivateTransferability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTransferable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleVisibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_private\",\"type\":\"bool\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_private\",\"type\":\"bool\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"viewers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"visible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"visibleOrAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConfigurableERC20", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dbb11a83bf8b1a9495cdf61292cd2f1bab8a639383d0e14c3dfac1ab7996769a"}