{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lock.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at testnet.bscscan.com on 2023-10-25\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        require(denominator > prod1);\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        unchecked {\\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n}\\n\\ncontract TokenLock {\\n    using Address for address payable;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeERC20 for IERC20;\\n\\n    address public _owner;\\n    uint256 public serviceFee;\\n    address public serviceFeeReceiver;\\n\\n    struct Lock {\\n        uint256 id;\\n        address token;\\n        address owner;\\n        uint256 amount;\\n        uint256 lockDate;\\n        uint256 tgeDate; // TGE date for vesting locks, unlock date for normal locks\\n        uint256 tgeBps; // In bips. Is 0 for normal locks\\n        uint256 cycle; // Is 0 for normal locks\\n        uint256 cycleBps; // In bips. Is 0 for normal locks\\n        uint256 unlockedAmount;\\n        string description;\\n    }\\n\\n    struct CumulativeLockInfo {\\n        address token;\\n        address factory;\\n        uint256 amount;\\n    }\\n\\n    // ID padding from PinkLock v1, as there is a lack of a pausing mechanism\\n    // as of now the lastest id from v1 is about 22K, so this is probably a safe padding value.\\n    uint256 private constant ID_PADDING = 1_000_000;\\n\\n    Lock[] private _locks;\\n    mapping(address => EnumerableSet.UintSet) private _userNormalLockIds;\\n\\n    EnumerableSet.AddressSet private _normalLockedTokens;\\n    mapping(address => CumulativeLockInfo) public cumulativeLockInfo;\\n    mapping(address => EnumerableSet.UintSet) private _tokenToLockIds;\\n\\n    event LockAdded(\\n        uint256 indexed id,\\n        address token,\\n        address owner,\\n        uint256 amount,\\n        uint256 unlockDate\\n    );\\n    event LockUpdated(\\n        uint256 indexed id,\\n        address token,\\n        address owner,\\n        uint256 newAmount,\\n        uint256 newUnlockDate\\n    );\\n    event LockRemoved(\\n        uint256 indexed id,\\n        address token,\\n        address owner,\\n        uint256 amount,\\n        uint256 unlockedAt\\n    );\\n    event LockVested(\\n        uint256 indexed id,\\n        address token,\\n        address owner,\\n        uint256 amount,\\n        uint256 remaining,\\n        uint256 timestamp\\n    );\\n    event LockDescriptionChanged(uint256 lockId);\\n    event LockOwnerChanged(uint256 lockId, address owner, address newOwner);\\n\\n    modifier validLock(uint256 lockId) {\\n        _getActualIndex(lockId);\\n        _;\\n    }\\n\\n    constructor(uint256 fee, address feeReceiver) {\\n        serviceFee = fee;\\n        serviceFeeReceiver = feeReceiver;\\n        _owner = msg.sender;\\n    }\\n\\n    function setServiceFee(uint256 fee) external {\\n        require(msg.sender == _owner, \\\"Not authorized\\\");\\n        serviceFee = fee;\\n    }\\n\\n    function setServiceFeeReceiver(address receiver) external {\\n        require(msg.sender == _owner, \\\"Not authorized\\\");\\n        serviceFeeReceiver = receiver;\\n    }\\n\\n    function transferOwnership(address newOwner) external {\\n        require(msg.sender == _owner, \\\"Not authorized\\\");\\n        _owner = newOwner;\\n    }\\n\\n    function lock(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 unlockDate,\\n        string memory description\\n    ) external payable returns (uint256 id) {\\n        require(token != address(0), \\\"Invalid token\\\");\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        require(\\n            unlockDate > block.timestamp,\\n            \\\"Unlock date should be in the future\\\"\\n        );\\n        require(msg.value >= serviceFee, \\\"Insufficient fee\\\");\\n\\n        id = _createLock(\\n            owner,\\n            token,\\n            amount,\\n            unlockDate,\\n            0,\\n            0,\\n            0,\\n            description\\n        );\\n        _safeTransferFromEnsureExactAmount(\\n            token,\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        if (msg.value > 0) {\\n            payable(serviceFeeReceiver).sendValue(msg.value);\\n        }\\n\\n        emit LockAdded(id, token, owner, amount, unlockDate);\\n        return id;\\n    }\\n\\n    function vestingLock(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 tgeDate,\\n        uint256 tgeBps,\\n        uint256 cycle,\\n        uint256 cycleBps,\\n        string memory description\\n    ) external payable returns (uint256 id) {\\n        require(token != address(0), \\\"Invalid token\\\");\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        require(tgeDate > block.timestamp, \\\"TGE date should be in the future\\\");\\n        require(cycle > 0, \\\"Invalid cycle\\\");\\n        require(tgeBps > 0 && tgeBps < 10_000, \\\"Invalid bips for TGE\\\");\\n        require(cycleBps > 0 && cycleBps < 10_000, \\\"Invalid bips for cycle\\\");\\n        require(\\n            tgeBps + cycleBps <= 10_000,\\n            \\\"Sum of TGE bps and cycle should be less than 10000\\\"\\n        );\\n        require(msg.value >= serviceFee, \\\"Insufficient fee\\\");\\n\\n        id = _createLock(\\n            owner,\\n            token,\\n            amount,\\n            tgeDate,\\n            tgeBps,\\n            cycle,\\n            cycleBps,\\n            description\\n        );\\n        _safeTransferFromEnsureExactAmount(\\n            token,\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        if (msg.value > 0) {\\n            payable(serviceFeeReceiver).sendValue(msg.value);\\n        }\\n\\n        emit LockAdded(id, token, owner, amount, tgeDate);\\n        return id;\\n    }\\n\\n    function _createLock(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 tgeDate,\\n        uint256 tgeBps,\\n        uint256 cycle,\\n        uint256 cycleBps,\\n        string memory description\\n    ) internal returns (uint256 id) {\\n        id = _lockNormalToken(\\n            owner,\\n            token,\\n            amount,\\n            tgeDate,\\n            tgeBps,\\n            cycle,\\n            cycleBps,\\n            description\\n        );\\n        return id;\\n    }\\n\\n    function _lockNormalToken(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 tgeDate,\\n        uint256 tgeBps,\\n        uint256 cycle,\\n        uint256 cycleBps,\\n        string memory description\\n    ) private returns (uint256 id) {\\n        id = _registerLock(\\n            owner,\\n            token,\\n            amount,\\n            tgeDate,\\n            tgeBps,\\n            cycle,\\n            cycleBps,\\n            description\\n        );\\n        _userNormalLockIds[owner].add(id);\\n        _normalLockedTokens.add(token);\\n\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[token];\\n        if (tokenInfo.token == address(0)) {\\n            tokenInfo.token = token;\\n            tokenInfo.factory = address(0);\\n        }\\n        tokenInfo.amount = tokenInfo.amount + amount;\\n\\n        _tokenToLockIds[token].add(id);\\n    }\\n\\n    function _registerLock(\\n        address owner,\\n        address token,\\n        uint256 amount,\\n        uint256 tgeDate,\\n        uint256 tgeBps,\\n        uint256 cycle,\\n        uint256 cycleBps,\\n        string memory description\\n    ) private returns (uint256 id) {\\n        id = _locks.length + ID_PADDING;\\n        Lock memory newLock = Lock({\\n            id: id,\\n            token: token,\\n            owner: owner,\\n            amount: amount,\\n            lockDate: block.timestamp,\\n            tgeDate: tgeDate,\\n            tgeBps: tgeBps,\\n            cycle: cycle,\\n            cycleBps: cycleBps,\\n            unlockedAmount: 0,\\n            description: description\\n        });\\n        _locks.push(newLock);\\n    }\\n\\n    function unlock(uint256 lockId) external validLock(lockId) {\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\n        require(\\n            userLock.owner == msg.sender,\\n            \\\"You are not the owner of this lock\\\"\\n        );\\n\\n        if (userLock.tgeBps > 0) {\\n            _vestingUnlock(userLock);\\n        } else {\\n            _normalUnlock(userLock);\\n        }\\n    }\\n\\n    function _normalUnlock(Lock storage userLock) internal {\\n        require(\\n            block.timestamp >= userLock.tgeDate,\\n            \\\"It is not time to unlock\\\"\\n        );\\n        require(userLock.unlockedAmount == 0, \\\"Nothing to unlock\\\");\\n\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\n            userLock.token\\n        ];\\n\\n        _userNormalLockIds[msg.sender].remove(userLock.id);\\n\\n        uint256 unlockAmount = userLock.amount;\\n\\n        if (tokenInfo.amount <= unlockAmount) {\\n            tokenInfo.amount = 0;\\n        } else {\\n            tokenInfo.amount = tokenInfo.amount - unlockAmount;\\n        }\\n\\n        if (tokenInfo.amount == 0) {\\n            _normalLockedTokens.remove(userLock.token);\\n        }\\n        userLock.unlockedAmount = unlockAmount;\\n\\n        _tokenToLockIds[userLock.token].remove(userLock.id);\\n\\n        IERC20(userLock.token).safeTransfer(msg.sender, unlockAmount);\\n\\n        emit LockRemoved(\\n            userLock.id,\\n            userLock.token,\\n            msg.sender,\\n            unlockAmount,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _vestingUnlock(Lock storage userLock) internal {\\n        uint256 withdrawable = _withdrawableTokens(userLock);\\n        uint256 newTotalUnlockAmount = userLock.unlockedAmount + withdrawable;\\n        require(\\n            withdrawable > 0 && newTotalUnlockAmount <= userLock.amount,\\n            \\\"Nothing to unlock\\\"\\n        );\\n\\n        CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\n            userLock.token\\n        ];\\n\\n        if (newTotalUnlockAmount == userLock.amount) {\\n            _userNormalLockIds[msg.sender].remove(userLock.id);\\n            _tokenToLockIds[userLock.token].remove(userLock.id);\\n            emit LockRemoved(\\n                userLock.id,\\n                userLock.token,\\n                msg.sender,\\n                newTotalUnlockAmount,\\n                block.timestamp\\n            );\\n        }\\n\\n        if (tokenInfo.amount <= withdrawable) {\\n            tokenInfo.amount = 0;\\n        } else {\\n            tokenInfo.amount = tokenInfo.amount - withdrawable;\\n        }\\n\\n        if (tokenInfo.amount == 0) {\\n            _normalLockedTokens.remove(userLock.token);\\n        }\\n        userLock.unlockedAmount = newTotalUnlockAmount;\\n\\n        IERC20(userLock.token).safeTransfer(userLock.owner, withdrawable);\\n\\n        emit LockVested(\\n            userLock.id,\\n            userLock.token,\\n            msg.sender,\\n            withdrawable,\\n            userLock.amount - userLock.unlockedAmount,\\n            block.timestamp\\n        );\\n    }\\n\\n    function withdrawableTokens(\\n        uint256 lockId\\n    ) external view returns (uint256) {\\n        Lock memory userLock = getLockById(lockId);\\n        return _withdrawableTokens(userLock);\\n    }\\n\\n    function _withdrawableTokens(\\n        Lock memory userLock\\n    ) internal view returns (uint256) {\\n        if (userLock.amount == 0) return 0;\\n        if (userLock.unlockedAmount >= userLock.amount) return 0;\\n        if (block.timestamp < userLock.tgeDate) return 0;\\n        if (userLock.cycle == 0) return 0;\\n\\n        uint256 tgeReleaseAmount = FullMath.mulDiv(\\n            userLock.amount,\\n            userLock.tgeBps,\\n            10_000\\n        );\\n        uint256 cycleReleaseAmount = FullMath.mulDiv(\\n            userLock.amount,\\n            userLock.cycleBps,\\n            10_000\\n        );\\n        uint256 currentTotal = 0;\\n        if (block.timestamp >= userLock.tgeDate) {\\n            currentTotal =\\n                (((block.timestamp - userLock.tgeDate) / userLock.cycle) *\\n                    cycleReleaseAmount) +\\n                tgeReleaseAmount; // Truncation is expected here\\n        }\\n        uint256 withdrawable = 0;\\n        if (currentTotal > userLock.amount) {\\n            withdrawable = userLock.amount - userLock.unlockedAmount;\\n        } else {\\n            withdrawable = currentTotal - userLock.unlockedAmount;\\n        }\\n        return withdrawable;\\n    }\\n\\n    function editLock(\\n        uint256 lockId,\\n        uint256 newAmount,\\n        uint256 newUnlockDate\\n    ) external validLock(lockId) {\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\n        require(\\n            userLock.owner == msg.sender,\\n            \\\"You are not the owner of this lock\\\"\\n        );\\n        require(userLock.unlockedAmount == 0, \\\"Lock was unlocked\\\");\\n\\n        if (newUnlockDate > 0) {\\n            require(\\n                newUnlockDate >= userLock.tgeDate &&\\n                    newUnlockDate > block.timestamp,\\n                \\\"New unlock time should not be before old unlock time or current time\\\"\\n            );\\n            userLock.tgeDate = newUnlockDate;\\n        }\\n\\n        if (newAmount > 0) {\\n            require(\\n                newAmount >= userLock.amount,\\n                \\\"New amount should not be less than current amount\\\"\\n            );\\n\\n            uint256 diff = newAmount - userLock.amount;\\n\\n            if (diff > 0) {\\n                userLock.amount = newAmount;\\n                CumulativeLockInfo storage tokenInfo = cumulativeLockInfo[\\n                    userLock.token\\n                ];\\n                tokenInfo.amount = tokenInfo.amount + diff;\\n                _safeTransferFromEnsureExactAmount(\\n                    userLock.token,\\n                    msg.sender,\\n                    address(this),\\n                    diff\\n                );\\n            }\\n        }\\n\\n        emit LockUpdated(\\n            userLock.id,\\n            userLock.token,\\n            userLock.owner,\\n            userLock.amount,\\n            userLock.tgeDate\\n        );\\n    }\\n\\n    function editLockDescription(\\n        uint256 lockId,\\n        string memory description\\n    ) external validLock(lockId) {\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\n        require(\\n            userLock.owner == msg.sender,\\n            \\\"You are not the owner of this lock\\\"\\n        );\\n        userLock.description = description;\\n        emit LockDescriptionChanged(lockId);\\n    }\\n\\n    function transferLockOwnership(\\n        uint256 lockId,\\n        address newOwner\\n    ) public validLock(lockId) {\\n        Lock storage userLock = _locks[_getActualIndex(lockId)];\\n        address currentOwner = userLock.owner;\\n        require(\\n            currentOwner == msg.sender,\\n            \\\"You are not the owner of this lock\\\"\\n        );\\n\\n        userLock.owner = newOwner;\\n\\n        _userNormalLockIds[currentOwner].remove(lockId);\\n        _userNormalLockIds[newOwner].add(lockId);\\n\\n        emit LockOwnerChanged(lockId, currentOwner, newOwner);\\n    }\\n\\n    function renounceLockOwnership(uint256 lockId) external {\\n        transferLockOwnership(lockId, address(0));\\n    }\\n\\n    function _safeTransferFromEnsureExactAmount(\\n        address token,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 oldRecipientBalance = IERC20(token).balanceOf(recipient);\\n        IERC20(token).safeTransferFrom(sender, recipient, amount);\\n        uint256 newRecipientBalance = IERC20(token).balanceOf(recipient);\\n        require(\\n            newRecipientBalance - oldRecipientBalance == amount,\\n            \\\"Not enough token was transfered\\\"\\n        );\\n    }\\n\\n    function getTotalLockCount() external view returns (uint256) {\\n        // Returns total lock count, regardless of whether it has been unlocked or not\\n        return _locks.length;\\n    }\\n\\n    function getLockAt(uint256 index) external view returns (Lock memory) {\\n        return _locks[index];\\n    }\\n\\n    function getLockById(uint256 lockId) public view returns (Lock memory) {\\n        return _locks[_getActualIndex(lockId)];\\n    }\\n\\n    function allNormalTokenLockedCount() public view returns (uint256) {\\n        return _normalLockedTokens.length();\\n    }\\n\\n    function getCumulativeNormalTokenLockInfoAt(\\n        uint256 index\\n    ) external view returns (CumulativeLockInfo memory) {\\n        return cumulativeLockInfo[_normalLockedTokens.at(index)];\\n    }\\n\\n    function getCumulativeNormalTokenLockInfo(\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (CumulativeLockInfo[] memory) {\\n        if (end >= _normalLockedTokens.length()) {\\n            end = _normalLockedTokens.length() - 1;\\n        }\\n        uint256 length = end - start + 1;\\n        CumulativeLockInfo[] memory lockInfo = new CumulativeLockInfo[](length);\\n        uint256 currentIndex = 0;\\n        for (uint256 i = start; i <= end; i++) {\\n            lockInfo[currentIndex] = cumulativeLockInfo[\\n                _normalLockedTokens.at(i)\\n            ];\\n            currentIndex++;\\n        }\\n        return lockInfo;\\n    }\\n\\n    function totalTokenLockedCount() external view returns (uint256) {\\n        return allNormalTokenLockedCount();\\n    }\\n\\n    function normalLockCountForUser(\\n        address user\\n    ) public view returns (uint256) {\\n        return _userNormalLockIds[user].length();\\n    }\\n\\n    function normalLocksForUser(\\n        address user\\n    ) external view returns (Lock[] memory) {\\n        uint256 length = _userNormalLockIds[user].length();\\n        Lock[] memory userLocks = new Lock[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            userLocks[i] = getLockById(_userNormalLockIds[user].at(i));\\n        }\\n        return userLocks;\\n    }\\n\\n    function normalLockForUserAtIndex(\\n        address user,\\n        uint256 index\\n    ) external view returns (Lock memory) {\\n        require(normalLockCountForUser(user) > index, \\\"Invalid index\\\");\\n        return getLockById(_userNormalLockIds[user].at(index));\\n    }\\n\\n    function totalLockCountForUser(\\n        address user\\n    ) external view returns (uint256) {\\n        return normalLockCountForUser(user);\\n    }\\n\\n    function totalLockCountForToken(\\n        address token\\n    ) external view returns (uint256) {\\n        return _tokenToLockIds[token].length();\\n    }\\n\\n    function getLocksForToken(\\n        address token,\\n        uint256 start,\\n        uint256 end\\n    ) public view returns (Lock[] memory) {\\n        if (end >= _tokenToLockIds[token].length()) {\\n            end = _tokenToLockIds[token].length() - 1;\\n        }\\n        uint256 length = end - start + 1;\\n        Lock[] memory locks = new Lock[](length);\\n        uint256 currentIndex = 0;\\n        for (uint256 i = start; i <= end; i++) {\\n            locks[currentIndex] = getLockById(_tokenToLockIds[token].at(i));\\n            currentIndex++;\\n        }\\n        return locks;\\n    }\\n\\n    function _getActualIndex(uint256 lockId) internal view returns (uint256) {\\n        if (lockId < ID_PADDING) {\\n            revert(\\\"Invalid lock id\\\");\\n        }\\n        uint256 actualIndex = lockId - ID_PADDING;\\n        require(actualIndex < _locks.length, \\\"Invalid lock id\\\");\\n        return actualIndex;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"LockAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"LockDescriptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LockOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"}],\"name\":\"LockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"LockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LockVested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allNormalTokenLockedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeLockInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"editLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"editLockDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getCumulativeNormalTokenLockInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenLock.CumulativeLockInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCumulativeNormalTokenLockInfoAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenLock.CumulativeLockInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLockAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLock.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"getLockById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLock.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getLocksForToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLock.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"normalLockCountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"normalLockForUserAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLock.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"normalLocksForUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TokenLock.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"renounceLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"setServiceFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalLockCountForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalLockCountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenLockedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleBps\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"vestingLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenLock", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000007e9da0832bdb880a2663203c212d933f4c3668c6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7032b20c764f64997aafc5a452d4ca7cc0f4f3cd7b15fc0ea360a6cf6c776756"}