{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Snap/marketplace/robofi-contracts-core/contracts/common/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Errors {\\r\\n    /// Common error\\r\\n    string constant CM_CONTRACT_HAS_BEEN_INITIALIZED = \\\"CM-01\\\"; \\r\\n    string constant CM_FACTORY_ADDRESS_IS_NOT_CONFIGURED = \\\"CM-02\\\";\\r\\n    string constant CM_VICS_ADDRESS_IS_NOT_CONFIGURED = \\\"CM-03\\\";\\r\\n    string constant CM_VICS_EXCHANGE_IS_NOT_CONFIGURED = \\\"CM-04\\\";\\r\\n    string constant CM_CEX_FUND_MANAGER_IS_NOT_CONFIGURED = \\\"CM-05\\\";\\r\\n    string constant CM_TREASURY_MANAGER_IS_NOT_CONFIGURED = \\\"CM-06\\\";\\r\\n    string constant CM_CEX_DEFAULT_MASTER_ACCOUNT_IS_NOT_CONFIGURED = \\\"CM-07\\\";\\r\\n    string constant CM_ADDRESS_IS_NOT_ICEXDABOTCERTTOKEN = \\\"CM-08\\\";\\r\\n    \\r\\n\\r\\n    /// IBCertToken error  (Bot Certificate Token)\\r\\n    string constant BCT_CALLER_IS_NOT_OWNER = \\\"BCT-01\\\"; \\r\\n    string constant BCT_REQUIRE_ALL_TOKENS_BURNT = \\\"BCT-02\\\";\\r\\n    string constant BCT_UNLOCK_AMOUNT_EXCEEDS_TOTAL_LOCKED = \\\"BCT-03\\\";\\r\\n    string constant BCT_INSUFFICIENT_LIQUID_FOR_UNLOCKING = \\\"BCT-04a\\\";\\r\\n    string constant BCT_INSUFFICIENT_LIQUID_FOR_LOCKING = \\\"BCT-04b\\\";\\r\\n    string constant BCT_AMOUNT_EXCEEDS_TOTAL_STAKE = \\\"BCT-05\\\";\\r\\n    string constant BCT_CANNOT_MINT_TO_ZERO_ADDRESS = \\\"BCT-06\\\";\\r\\n    string constant BCT_INSUFFICIENT_LIQUID_FOR_BURN = \\\"BCT-07\\\";\\r\\n    string constant BCT_INSUFFICIENT_ACCOUNT_FUND = \\\"BCT-08\\\";\\r\\n    string constant BCT_CALLER_IS_NEITHER_BOT_NOR_CERTLOCKER = \\\"BCT-09\\\";\\r\\n\\r\\n    /// IBCEXCertToken error (Cex Bot Certificate Token)\\r\\n    string constant CBCT_CALLER_IS_NOT_FUND_MANAGER = \\\"CBCT-01\\\";\\r\\n\\r\\n    /// GovernToken error (Bot Governance Token)\\r\\n    string constant BGT_CALLER_IS_NOT_OWNED_BOT = \\\"BGT-01\\\";\\r\\n    string constant BGT_CANNOT_MINT_TO_ZERO_ADDRESS = \\\"BGT-02\\\";\\r\\n    string constant BGT_CALLER_IS_NOT_GOVERNANCE = \\\"BGT-03\\\";\\r\\n\\r\\n    // VaultBase error (VB)\\r\\n    string constant VB_CALLER_IS_NOT_DABOT = \\\"VB-01a\\\";\\r\\n    string constant VB_CALLER_IS_NOT_OWNER_BOT = \\\"VB-01b\\\";\\r\\n    string constant VB_INVALID_VAULT_ID = \\\"VB-02\\\";\\r\\n    string constant VB_INVALID_VAULT_TYPE = \\\"VB-03\\\";\\r\\n    string constant VB_INVALID_SNAPSHOT_ID = \\\"VB-04\\\";\\r\\n\\r\\n    // RegularVault Error (RV)\\r\\n    string constant RV_VAULT_IS_RESTRICTED = \\\"RV-01\\\";\\r\\n    string constant RV_DEPOSIT_LOCKED = \\\"RV-02\\\";\\r\\n    string constant RV_WITHDRAWL_AMOUNT_EXCEED_DEPOSIT = \\\"RV-03\\\";\\r\\n\\r\\n    // BotVaultManager (VM)\\r\\n    string constant VM_VAULT_EXISTS = \\\"VM-01\\\";\\r\\n\\r\\n    // BotManager (BM)\\r\\n    string constant BM_DOES_NOT_SUPPORT_IDABOT = \\\"BM-01\\\";\\r\\n    string constant BM_DUPLICATED_BOT_QUALIFIED_NAME = \\\"BM-02\\\";\\r\\n    string constant BM_TEMPLATE_IS_NOT_REGISTERED = \\\"BM-03\\\";\\r\\n    string constant BM_GOVERNANCE_TOKEN_IS_NOT_DEPLOYED = \\\"BM-04\\\";\\r\\n    string constant BM_BOT_IS_NOT_REGISTERED = \\\"BM-05\\\";\\r\\n\\r\\n    // DABotModule (BMOD)\\r\\n    string constant BMOD_CALLER_IS_NOT_OWNER = \\\"BMOD-01\\\";\\r\\n    string constant BMOD_CALLER_IS_NOT_BOT_MANAGER = \\\"BMOD-02\\\";\\r\\n    string constant BMOD_BOT_IS_ABANDONED = \\\"BMOD-03\\\";\\r\\n\\r\\n    // DABotControllerLib (BCL)\\r\\n    string constant BCL_DUPLICATED_MODULE = \\\"BCL-01\\\";\\r\\n    string constant BCL_CERT_TOKEN_IS_NOT_CONFIGURED = \\\"BCL-02\\\";\\r\\n    string constant BCL_GOVERN_TOKEN_IS_NOT_CONFIGURED = \\\"BCL-03\\\";\\r\\n    string constant BCL_GOVERN_TOKEN_IS_NOT_DEPLOYED = \\\"BCL-04\\\";\\r\\n    string constant BCL_WARMUP_LOCKER_IS_NOT_CONFIGURED = \\\"BCL-05\\\";\\r\\n    string constant BCL_COOLDOWN_LOCKER_IS_NOT_CONFIGURED = \\\"BCL-06\\\";\\r\\n    string constant BCL_UKNOWN_MODULE_ID = \\\"BCL-07\\\";\\r\\n    string constant BCL_BOT_MANAGER_IS_NOT_CONFIGURED = \\\"BCL-08\\\";\\r\\n\\r\\n    // DABotController (BCMOD)\\r\\n    string constant BCMOD_CANNOT_CALL_TEMPLATE_METHOD_ON_BOT_INSTANCE = \\\"BCMOD-01\\\";\\r\\n    string constant BCMOD_CALLER_IS_NOT_OWNER = \\\"BCMOD-02\\\";\\r\\n    string constant BCMOD_MODULE_HANDLER_NOT_FOUND_FOR_METHOD_SIG = \\\"BCMOD-03\\\";\\r\\n    string constant BCMOD_NEW_OWNER_IS_ZERO = \\\"BCMOD-04\\\";\\r\\n\\r\\n    // CEXFundManagerModule (CFMOD)\\r\\n    string constant CFMOD_DUPLICATED_BENEFITCIARY = \\\"CFMOD-01\\\";\\r\\n    string constant CFMOD_INVALID_CERTIFICATE_OF_ASSET = \\\"CFMOD-02\\\";\\r\\n    string constant CFMOD_CALLER_IS_NOT_FUND_MANAGER = \\\"CFMOD-03\\\";\\r\\n\\r\\n    // DABotSettingLib (BSL)\\r\\n    string constant BSL_CALLER_IS_NOT_OWNER = \\\"BSL-01\\\";\\r\\n    string constant BSL_CALLER_IS_NOT_GOVERNANCE_EXECUTOR = \\\"BSL-02\\\";\\r\\n    string constant BSL_IBO_ENDTIME_IS_SOONER_THAN_IBO_STARTTIME = \\\"BSL-03\\\";\\r\\n    string constant BSL_BOT_IS_ABANDONED = \\\"BSL-04\\\";\\r\\n\\r\\n    // DABotSettingModule (BSMOD)\\r\\n    string constant BSMOD_IBO_ENDTIME_IS_SOONER_THAN_IBO_STARTTIME =  \\\"BSMOD-01\\\";\\r\\n    string constant BSMOD_INIT_DEPOSIT_IS_LESS_THAN_CONFIGURED_THRESHOLD = \\\"BSMOD-02\\\";\\r\\n    string constant BSMOD_FOUNDER_SHARE_IS_ZERO = \\\"BSMOD-03\\\";\\r\\n    string constant BSMOD_INSUFFICIENT_MAX_SHARE = \\\"BSMOD-04\\\";\\r\\n    string constant BSMOD_FOUNDER_SHARE_IS_GREATER_THAN_IBO_SHARE = \\\"BSMOD-05\\\";\\r\\n\\r\\n    // DABotCertLocker (LOCKER)\\r\\n    string constant LOCKER_CALLER_IS_NOT_OWNER_BOT = \\\"LOCKER-01\\\";\\r\\n\\r\\n    // DABotStakingModule (BSTMOD)\\r\\n    string constant BSTMOD_PRE_IBO_REQUIRED = \\\"BSTMOD-01\\\";\\r\\n    string constant BSTMOD_AFTER_IBO_REQUIRED = \\\"BSTMOD-02\\\";\\r\\n    string constant BSTMOD_INVALID_PORTFOLIO_ASSET = \\\"BSTMOD-03\\\";\\r\\n    string constant BSTMOD_PORTFOLIO_FULL = \\\"BSTMOD-04\\\";\\r\\n    string constant BSTMOD_INVALID_CERTIFICATE_ASSET = \\\"BSTMOD-05\\\";\\r\\n    string constant BSTMOD_PORTFOLIO_ASSET_NOT_FOUND = \\\"BSTMOD-06\\\";\\r\\n    string constant BSTMOD_ASSET_IS_ZERO = \\\"BSTMOD-07\\\";\\r\\n    string constant BSTMOD_INVALID_STAKING_CAP = \\\"BSTMOD-08\\\";\\r\\n    string constant BSTMOD_INSUFFICIENT_FUND = \\\"BSTMOD-09\\\";\\r\\n    string constant BSTMOD_CAP_IS_ZERO = \\\"BSTMOD-10\\\";\\r\\n    string constant BSTMOD_CAP_IS_LESS_THAN_STAKED_AND_IBO_CAP = \\\"BSTMOD-11\\\";\\r\\n    string constant BSTMOD_WERIGHT_IS_ZERO = \\\"BSTMOD-12\\\";\\r\\n\\r\\n    // CEX FundManager (CFM)\\r\\n    string constant CFM_REQ_TYPE_IS_MISMATCHED = \\\"CFM-01\\\";\\r\\n    string constant CFM_INVALID_REQUEST_ID = \\\"CFM-02\\\";\\r\\n    string constant CFM_CALLER_IS_NOT_BOT_TOKEN = \\\"CFM-03\\\";\\r\\n    string constant CFM_CLOSE_TYPE_VALUE_IS_NOT_SUPPORTED = \\\"CFM-04\\\";\\r\\n    string constant CFM_UNKNOWN_REQUEST_TYPE = \\\"CFM-05\\\";\\r\\n    string constant CFM_CALLER_IS_NOT_REQUESTER = \\\"CFM-06\\\";\\r\\n    string constant CFM_CALLER_IS_NOT_APPROVER = \\\"CFM-07\\\";\\r\\n    string constant CFM_CEX_CERTIFICATE_IS_REQUIRED = \\\"CFM-08\\\";\\r\\n    string constant CFM_TREASURY_ASSET_CERTIFICATE_IS_REQUIRED = \\\"CFM-09\\\";\\r\\n    string constant CFM_FAIL_TO_TRANSFER_VALUE = \\\"CFM-10\\\";\\r\\n    string constant CFM_AWARDED_ASSET_IS_NOT_TREASURY = \\\"CFM-11\\\";\\r\\n    string constant CFM_INSUFFIENT_ASSET_TO_MINT_STOKEN = \\\"CFM-12\\\";\\r\\n\\r\\n    // TreasuryAsset (TA)\\r\\n    string constant TA_MINT_ZERO_AMOUNT = \\\"TA-01\\\";\\r\\n    string constant TA_LOCK_AMOUNT_EXCEED_BALANCE = \\\"TA-02\\\";\\r\\n    string constant TA_UNLOCK_AMOUNT_AND_PASSED_VALUE_IS_MISMATCHED = \\\"TA-03\\\";\\r\\n    string constant TA_AMOUNT_EXCEED_AVAILABLE_BALANCE = \\\"TA-04\\\";\\r\\n    string constant TA_AMOUNT_EXCEED_VALUE_BALANCE = \\\"TA-05\\\";\\r\\n    string constant TA_FUND_MANAGER_IS_NOT_SET = \\\"TA-06\\\";\\r\\n    string constant TA_FAIL_TO_TRANSFER_VALUE = \\\"TA-07\\\";\\r\\n\\r\\n    // Governance (GOV)\\r\\n    string constant GOV_DEFAULT_STRATEGY_IS_NOT_SET = \\\"GOV-01\\\";\\r\\n    string constant GOV_INSUFFICIENT_POWER_TO_CREATE_PROPOSAL = \\\"GOV-02\\\";\\r\\n    string constant GOV_INSUFFICIENT_VICS_TO_CREATE_PROPOSAL = \\\"GOV-03\\\";\\r\\n    string constant GOV_INVALID_PROPOSAL_ID = \\\"GOV-04\\\";\\r\\n    string constant GOV_REQUIRED_PROPOSER_OR_GUARDIAN = \\\"GOV-05\\\";\\r\\n    string constant GOV_TARGET_SHOULD_BE_ZERO_OR_REGISTERED_BOT = \\\"GOV-06\\\";\\r\\n    string constant GOV_INSUFFICIENT_POWER_TO_VOTE = \\\"GOV-07\\\";\\r\\n    string constant GOV_INVALID_NEW_STATE = \\\"GOV-08\\\";\\r\\n    string constant GOV_CANNOT_CHANGE_STATE_OF_CLOSED_PROPOSAL = \\\"GOV-08\\\";\\r\\n    string constant GOV_INVALID_CREATION_DATA = \\\"GOV-09\\\";\\r\\n    string constant GOV_CANNOT_CHANGE_STATE_OF_ON_CHAIN_PROPOSAL = \\\"GOV-10\\\";\\r\\n    string constant GOV_PROPOSAL_DONT_ACCEPT_VOTE = \\\"GOV-11\\\";\\r\\n    string constant GOV_DUPLICATED_VOTE = \\\"GOV-12\\\";\\r\\n    string constant GOV_CAN_ONLY_QUEUE_PASSED_PROPOSAL = \\\"GOV-13\\\";\\r\\n    string constant GOV_DUPLICATED_ACTION = \\\"GOV-14\\\";\\r\\n    string constant GOV_INVALID_VICS_ADDRESS = \\\"GOV-15\\\";\\r\\n\\r\\n    // Timelock Executor (TLE)\\r\\n    string constant TLE_DELAY_SHORTER_THAN_MINIMUM = \\\"TLE-01\\\";\\r\\n    string constant TLE_DELAY_LONGER_THAN_MAXIMUM = \\\"TLE-02\\\";\\r\\n    string constant TLE_ONLY_BY_ADMIN = \\\"TLE-03\\\";\\r\\n    string constant TLE_ONLY_BY_PENDING_ADMIN = \\\"TLE-04\\\";\\r\\n    string constant TLE_ONLY_BY_THIS_TIMELOCK = \\\"TLE-05\\\";\\r\\n    string constant TLE_EXECUTION_TIME_UNDERESTIMATED = \\\"TLE-06\\\";\\r\\n    string constant TLE_ACTION_NOT_QUEUED = \\\"TLE-07\\\";\\r\\n    string constant TLE_TIMELOCK_NOT_FINISHED = \\\"TLE-08\\\";\\r\\n    string constant TLE_GRACE_PERIOD_FINISHED = \\\"TLE-09\\\";\\r\\n    string constant TLE_NOT_ENOUGH_MSG_VALUE = \\\"TLE-10\\\";\\r\\n\\r\\n    // DABotVoteStrategy (BVS) string constant BVS_ = \\\"BVS-\\\";\\r\\n    string constant BVS_NOT_A_REGISTERED_DABOT = \\\"BVS-01\\\";\\r\\n\\r\\n    // DABotWhiteList (BWL) string constant BWL_ = \\\"BWL-\\\";\\r\\n    string constant BWL_ACCOUNT_IS_ZERO = \\\"BWL-01\\\";\\r\\n    string constant BWL_ACCOUNT_IS_NOT_WHITELISTED = \\\"BWL-02\\\";\\r\\n}\"\r\n    },\r\n    \"/D/Snap/marketplace/robofi-contracts-core/contracts/common/IInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IInitializable {\\r\\n    function init(bytes calldata data) external payable;\\r\\n}\"\r\n    },\r\n    \"/D/Snap/marketplace/robofi-contracts-core/contracts/common/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor()  {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/D/Snap/marketplace/robofi-contracts-core/contracts/token/IRoboFiERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IRoboFiERC20 is IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function name() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"\r\n    },\r\n    \"/D/Snap/marketplace/robofi-contracts-core/contracts/token/RoboFiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"../common/IInitializable.sol\\\";\\r\\nimport \\\"./IRoboFiERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract RoboFiToken is Context, IRoboFiERC20, IInitializable {\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The defaut value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_, uint256 initAmount_, address holder_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        if (holder_ != address(0))\\r\\n            _mint(holder_, initAmount_);\\r\\n    }\\r\\n\\r\\n    /// @notice Serves as the constructor for clones, as clones can't have a regular constructor\\r\\n    /// @dev `data` is abi encoded in the format: (string name, string symbol, uint256 initSupply address holder)\\r\\n    function init(bytes calldata data) external virtual payable override {\\r\\n        require(_totalSupply == 0, \\\"RT: contract is already initialized\\\");\\r\\n        uint256 _initSupply;\\r\\n        address _holder;\\r\\n        (_name, _symbol, _initSupply, _holder) = abi.decode(data, (string, string, uint256, address));\\r\\n        if (_initSupply > 0)\\r\\n            _mint(_holder, _initSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overloaded;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"RT: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"RT: decreased allowance below zero\\\");\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"RT: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"RT: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"RT: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"RT: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"RT: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _internalBurn(account, amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _internalBurn(address account, uint256 amount) internal {\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"RT: burn amount exceeds balance\\\");\\r\\n        _balances[account] = accountBalance - amount;\\r\\n        _totalSupply -= amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"RT: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"RT: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n\\r\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Snap/marketplace/robofi-contracts-core/contracts/treasury/ITreasuryAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../token/IRoboFiERC20.sol\\\";\\r\\n\\r\\ninterface ITreasuryAssetEvent {\\r\\n    event Lock(address indexed account, uint256 amount);\\r\\n    event Unlock(address indexed caller, uint256 amount, address indexed account);\\r\\n    event Slash(address indexed bot, uint256 amount);\\r\\n    event FundManagerChanged(address indexed fundmanager);\\r\\n}\\r\\n\\r\\ninterface ITreasuryAsset is IRoboFiERC20, ITreasuryAssetEvent {\\r\\n\\r\\n    /**\\r\\n    @dev Gets the total locked amount.\\r\\n     */\\r\\n    function totalLocked() external view returns(uint);\\r\\n\\r\\n    /**\\r\\n    @dev Gets the address of the underlying asset.\\r\\n     */\\r\\n    function asset() external view returns(IRoboFiERC20);\\r\\n\\r\\n    /**\\r\\n    @dev Deposits `amount` of original asset, and gets back an equivalent amount of token.\\r\\n    **/\\r\\n    function mint(address to, uint256 amount) external payable;\\r\\n\\r\\n    /**\\r\\n    @dev Burns `amount` of sToken to get back original  tokens\\r\\n     */\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n    @dev Burns `amount` of sToken WITHOUT get back the original tokens (this is for trading loss). \\r\\n    Only accept calls from registred DABot.\\r\\n     */\\r\\n    function slash(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n    @dev Locks `amount` of token from the caller's account. An equivalent amount of \\r\\n    original asset will be transferred to the fund manager.\\r\\n\\r\\n    Return the locked balanced of the caller's account.\\r\\n    **/    \\r\\n    function lock(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n    @dev Get the locked amounts of sToken for `user`\\r\\n    **/\\r\\n    function lockedBalanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n    @dev Gets `amount` of tocken from the caller account, and decrease the locked balance of `user`. \\r\\n    **/\\r\\n    function unlock(address user, uint256 amount) external payable;\\r\\n\\r\\n    /**\\r\\n    @dev Determines if the underlying asset is native token or not.\\r\\n     */\\r\\n    function isNativeAsset() external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"/D/Snap/marketplace/robofi-contracts-core/contracts/treasury/ITreasuryManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct TreasuryInfo {\\r\\n    address asset;\\r\\n    address token;\\r\\n    address fundManager;\\r\\n    bool active;\\r\\n    uint totalMinted;\\r\\n    uint totalLocked;\\r\\n    uint liquidity;\\r\\n}\\r\\n\\r\\ninterface ITreasuryManager {\\r\\n\\r\\n    event FundManager(address indexed treasuryToken, address account);\\r\\n    event AddTreasury(address indexed asset, address indexed treasuryToken);\\r\\n    event RemoveTreasury(address indexed treasuryToken);\\r\\n\\r\\n    /**\\r\\n    @dev Determines a contract address is a treasury token contract or not\\r\\n    @param treasuryToken the token contract address to check.\\r\\n    @return true if the given address is a treasury token contract.\\r\\n     */\\r\\n    function isTreasury(address treasuryToken) external view returns(bool);\\r\\n\\r\\n    /**\\r\\n    @dev Gets the treasury token for a given crypto asset.\\r\\n    @param asset the asset to query.\\r\\n    @return the address of the corresponding treasury token.\\r\\n     */\\r\\n    function treasuryOf(address asset) external view returns(address);\\r\\n\\r\\n    /**\\r\\n    @dev Gets the address of the fund manager for the given treasury token.\\r\\n    Fund manager is the account that receives underlying assets when a treasury token is locked.\\r\\n    @param treasuryToken the treasury asset to query.\\r\\n     */\\r\\n    function fundManager(address treasuryToken) external view returns(address);\\r\\n\\r\\n    /**\\r\\n    @dev Adds a treasury token to this manager.\\r\\n    @param treasuryToken the treasury token to add.\\r\\n     */\\r\\n    function addTreasury(address treasuryToken) external;\\r\\n\\r\\n    /**\\r\\n    @dev Removes a treasury token from this mananger.\\r\\n    @param treasuryToken the treasury token to remove.\\r\\n     */\\r\\n    function removeTreasury(address treasuryToken) external;\\r\\n}\"\r\n    },\r\n    \"/D/Snap/marketplace/robofi-contracts-core/contracts/treasury/TreasuryAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"../common/Ownable.sol\\\";\\r\\nimport \\\"../common/Errors.sol\\\";\\r\\nimport \\\"../token/RoboFiToken.sol\\\";\\r\\nimport \\\"./ITreasuryAsset.sol\\\";\\r\\nimport \\\"./ITreasuryManager.sol\\\";\\r\\n\\r\\ncontract TreasuryAsset is ITreasuryAssetEvent, RoboFiToken, Ownable, Initializable, IERC165 {  \\r\\n\\r\\n    using SafeERC20 for IRoboFiERC20;\\r\\n\\r\\n    address constant BNB_ADDRESS = address(0x1E1e1E1E1e1e1e1e1e1E1E1E1E1e1e1E1e1e1E1E);\\r\\n\\r\\n    IRoboFiERC20 public asset; \\r\\n\\r\\n    mapping(address => uint256) private _lockedBalance;\\r\\n    uint public totalLocked;\\r\\n\\r\\n    constructor() RoboFiToken(\\\"\\\", \\\"\\\", 0, address(0)) {\\r\\n    }\\r\\n\\r\\n    function initialize(IRoboFiERC20 asset_, ITreasuryManager owner_) external payable initializer {\\r\\n        asset = asset_;\\r\\n        _transferOwnership(address(owner_));\\r\\n    }\\r\\n\\r\\n    function symbol() public view override returns(string memory) {\\r\\n        if (isNativeAsset())\\r\\n            return \\\"sBNB\\\";\\r\\n        return string(abi.encodePacked(\\\"s\\\", asset.symbol()));\\r\\n    }\\r\\n\\r\\n    function name() public view override returns(string memory) {\\r\\n        if (isNativeAsset())\\r\\n            return \\\"RoboFi Stakable Binance Coin\\\";\\r\\n        return string(abi.encodePacked(\\\"RoboFi Stakable \\\", asset.name()));\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        if (isNativeAsset())\\r\\n            return 18;\\r\\n        return asset.decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Deposits `amount` of original asset, and gets back an equivalent amount of token.\\r\\n    **/\\r\\n    function mint(address to, uint256 amount) public payable virtual {\\r\\n        if (isNativeAsset()) {\\r\\n            amount = msg.value;\\r\\n        }\\r\\n        require(amount > 0, Errors.TA_MINT_ZERO_AMOUNT);\\r\\n\\r\\n        _assetSafeTransferFrom(_msgSender(), address(this), amount);\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Burns `amount` of sToken WITHOUT get back the original tokens (this is for trading loss). \\r\\n    This function should only called from the bot token. Calling from an external account will\\r\\n    cause fund loss.\\r\\n     */\\r\\n    function slash(uint256 amount) external {\\r\\n        address account = _msgSender();\\r\\n        _internalBurn(account, amount); \\r\\n        emit Slash(account, amount); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Locks `amount` of token from the caller's account (caller). An equivalent amount of \\r\\n    original asset will transfer to the fund manager.\\r\\n    **/    \\r\\n    function lock(uint256 amount) public virtual {\\r\\n        if (amount == 0) return;\\r\\n        \\r\\n        address _caller = _msgSender();\\r\\n        require(_lockedBalance[_caller] + amount <= balanceOf(_caller), Errors.TA_LOCK_AMOUNT_EXCEED_BALANCE);\\r\\n\\r\\n        _lockedBalance[_caller] += amount;\\r\\n        totalLocked += amount;\\r\\n        address fundManager = ITreasuryManager(owner()).fundManager(address(this));\\r\\n        require(fundManager != address(0), Errors.TA_FUND_MANAGER_IS_NOT_SET); \\r\\n\\r\\n        _assetSafeTransfer(payable(fundManager), amount);\\r\\n\\r\\n        emit Lock(_caller, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Get the locked amounts of sToken for `user`\\r\\n    **/\\r\\n    function lockedBalanceOf(address account) public view virtual returns (uint256) {\\r\\n        return _lockedBalance[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Gets `amount` of tocken from the caller account, and decrease the locked balance of `receipient`. \\r\\n    **/\\r\\n    function unlock(address receipient, uint256 amount) public payable virtual { \\r\\n        if (isNativeAsset()) {\\r\\n            require(amount == msg.value, Errors.TA_UNLOCK_AMOUNT_AND_PASSED_VALUE_IS_MISMATCHED);\\r\\n        }\\r\\n        uint256 _amount = _lockedBalance[receipient] > amount ? amount : _lockedBalance[receipient];\\r\\n\\r\\n        _lockedBalance[receipient] -= _amount;\\r\\n        totalLocked -= _amount;\\r\\n        _assetSafeTransferFrom(_msgSender(), address(this), _amount);\\r\\n\\r\\n        emit Unlock(_msgSender(), _amount, receipient);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Burns `amount` of sToken to get back original  tokens\\r\\n     */\\r\\n    function burn(uint256 amount) public virtual {\\r\\n        address _caller = _msgSender();\\r\\n        _burn(_caller, amount);\\r\\n        _assetSafeTransfer(payable(_caller), amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address, uint256 amount) internal virtual override {\\r\\n        if (from == address(0)) // do nothing for minting\\r\\n            return;\\r\\n        uint256 _available = balanceOf(from) - _lockedBalance[from];\\r\\n        require(_available >= amount, Errors.TA_AMOUNT_EXCEED_AVAILABLE_BALANCE);\\r\\n    }\\r\\n\\r\\n\\r\\n    function isNativeAsset() public view returns(bool) {\\r\\n        return (address(asset) == BNB_ADDRESS);\\r\\n    }\\r\\n\\r\\n    function _assetSafeTransfer(address payable receiver, uint amount) private {\\r\\n        if (isNativeAsset()) {\\r\\n            require(address(this).balance >= amount, Errors.TA_AMOUNT_EXCEED_VALUE_BALANCE);\\r\\n            require(receiver.send(amount), Errors.TA_FAIL_TO_TRANSFER_VALUE); \\r\\n            return;\\r\\n        }\\r\\n        asset.safeTransfer(receiver, amount);\\r\\n    }\\r\\n\\r\\n    function _assetSafeTransferFrom(address from, address to, uint amount) private {\\r\\n        if (isNativeAsset())\\r\\n            return;\\r\\n        asset.safeTransferFrom(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\r\\n        return (interfaceId == type(IERC165).interfaceId) ||\\r\\n                (interfaceId == type(ITreasuryAsset).interfaceId)\\r\\n        ;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundmanager\",\"type\":\"address\"}],\"name\":\"FundManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Slash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IRoboFiERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoboFiERC20\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"contract ITreasuryManager\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNativeAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "TreasuryAsset", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}