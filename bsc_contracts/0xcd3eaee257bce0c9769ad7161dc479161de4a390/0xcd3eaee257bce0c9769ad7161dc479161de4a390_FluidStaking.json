{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/FluidStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./lib/SafeBEP20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Address.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\n\\n/**\\n * @author JumpTask (https://www.jumptask.io)\\n * @title A fluid staking contract for JumpToken.\\n *\\n * @dev This contract is used in order to provide fluid staking functionality for JumpToken users.\\n * While staking, the needed amount of token should be approved for this contract beforehand.\\n */\\ncontract FluidStaking is Ownable {\\n    using SafeBEP20 for IBEP20;\\n    using Address for address;\\n\\n    /**\\n     * @dev BEP20 basic token contract being held\\n     */\\n    IBEP20 public immutable _token;\\n\\n    /**\\n     * @dev The campaign identifier being sent with each Stake event\\n     */\\n    string public _campaignId;\\n\\n    /**\\n     * @dev A map holding staked balances for participating wallets\\n     */\\n    mapping(address => uint256) public _stakedBalances;\\n\\n    /**\\n     * @dev Total staked balance from all the wallets\\n     */\\n    uint256 public _totalStaked;\\n\\n    /**\\n     * @dev Minimum amount accepted for each stake\\n     */\\n    uint256 public _minStake = 1;\\n\\n    /**\\n     * @dev Maximum amount accepted for each stake\\n     */\\n    uint256 public _maxStake = 0;\\n\\n    /**\\n     * @dev Maximum amount that can be staked in this contract in total\\n     */\\n    uint256 public _stakeLimit = 0;\\n\\n    /**\\n     * @dev A map of wallets that are blacklisted.\\n     */\\n    mapping(address => bool) public _blacklistWallets;\\n\\n    /**\\n     * @dev Unix timestamp when the staking campaign becomes active. It won't\\n     * accept any stakes before this timestamp.\\n     */\\n    uint256 public _startAt;\\n\\n    /**\\n     * @dev Unix timestamp when the staking campaign becomes expired (inactive).\\n     * It won't accept any new stakes after this timestamp.\\n     */\\n    uint256 public _expireAt;\\n\\n    /**\\n     * @dev How many tokens should be distributed for the stakers each minute.\\n     */\\n    uint256 public _mBudgetTokens;\\n\\n    /**\\n     * @dev Minimum MPR that can be calculated.\\n     */\\n    uint256 public _minMpr;\\n\\n    /**\\n     * @dev Maximum MPR that can be calculated\\n     */\\n    uint256 public _maxMpr;\\n\\n    /**\\n     * @dev Minutely percentage rate decimals count. It is used instead of float\\n     * variables while calculating MPR.\\n     */\\n    uint256 public _mprDecimals = 18;\\n\\n    /**\\n     * @dev Event index which is incremented by 1 for each successful stake and withdrawal.\\n     * It is sent together with each event in case consumer needs to verify the consistency\\n     * of events sequence.\\n     */\\n    uint256 public _eventIndex = 1;\\n\\n    /**\\n     * @dev Allows to temporary hold staking activity.\\n     */\\n    bool public _hold = false;\\n\\n    /**\\n     * @dev Event which is emitted during each successful stake and withdrawal.\\n     */\\n    event Stake(\\n        string campaignId, // campaign identifier being sent with each event\\n        address indexed staker, // transaction sender (staker wallet)\\n        int256 amount, // amount of stake (can be negative for withdrawals)\\n        uint256 stakedBalance, // balance of staker after performed action\\n        uint256 totalStaked, // total campaign staked amount\\n        uint256 mpr, // calculated MPR after performed action\\n        uint256 mprDecimals, // MPR decimals count\\n        uint256 txIndex, // incremental index of the transaction (increases after each event)\\n        uint256 timestamp // block timestamp of the action\\n    );\\n\\n    /**\\n     * @dev Validates integrity of the contract balance and total staked amount.\\n     */\\n    modifier validIntegrity {\\n        _;\\n        require(_token.balanceOf(address(this)) >= _totalStaked, \\\"FluidStaking: contract balance is incorrect compared to total staked amount\\\");\\n    }\\n\\n    modifier checkHold {\\n        require(!_hold, \\\"FluidStaking: staking activity is temporary on hold\\\");\\n        _;\\n    }\\n\\n    modifier checkBlacklist {\\n        require(!isBlacklisted(_msgSender()), \\\"FluidStaking: address is blacklisted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Token address (immutable), campaign id and initial budget tokens should\\n     * be provided for contract initialization.\\n     */\\n    constructor(address tokenAddress_, string memory campaignId_, uint256 budgetTokens_) {\\n        _token = IBEP20(tokenAddress_);\\n        _campaignId = campaignId_;\\n        _mBudgetTokens = budgetTokens_;\\n    }\\n\\n    /**\\n     * @dev Set new campaign id.\\n     */\\n    function setCampaignId(string memory campaignId_) public onlyOwner {\\n        _campaignId = campaignId_;\\n    }\\n\\n    /**\\n     * @dev Sets minimal amount of token for a single stake.\\n     */\\n    function setMinStake(uint256 min_) public onlyOwner {\\n        require(min_ > 0, \\\"FluidStaking: minimal stake should be positive number\\\");\\n        _minStake = min_;\\n    }\\n\\n    /**\\n     * @dev Sets maximum amount of token for a single stake.\\n     */\\n    function setMaxStake(uint256 max_) public onlyOwner {\\n        require(max_ == 0 || max_ >= _minStake, \\\"FluidStaking: max stake should be either 0 or higher than minimum stake\\\");\\n        _maxStake = max_;\\n    }\\n\\n    /**\\n     * @dev Sets maximum amount of token that can be staked in this contract. After\\n     * this limit is hit, no new stakes are accepted.\\n     * 0 - for infinite.\\n     */\\n    function setStakeLimit(uint256 stakeLimit_) public onlyOwner {\\n        _stakeLimit = stakeLimit_;\\n    }\\n\\n    /**\\n     * @dev Sets start timestamp. No stakes will be accepted before this timestamp.\\n     * 0 - for infinite.\\n     */\\n    function setStartAt(uint256 ts_) public onlyOwner {\\n        require(ts_ >= 0, \\\"FluidStaking: start at should be positive unix timestamp number or 0\\\");\\n        _startAt = ts_;\\n    }\\n\\n    /**\\n     * @dev Sets expire timestamp. No stakes will be accepted after this timestamp.\\n     * 0 - for infinite.\\n     */\\n    function setExpireAt(uint256 expireAt_) public onlyOwner {\\n        require(expireAt_ >= 0 && expireAt_ >= _startAt, \\\"FluidStaking: end at should be 0 or positive unix timestamp number and be greater than start at timestamp\\\");\\n        _expireAt = expireAt_;\\n    }\\n\\n    /**\\n     * @dev Sets minutely budget token, which is used for calculating MPR.\\n     */\\n    function setMBudgetTokens(uint256 mBudgetTokens_) public onlyOwner {\\n        _mBudgetTokens = mBudgetTokens_;\\n    }\\n\\n    /**\\n     * @dev Sets maximum MPR for campaign.\\n     */\\n    function setMaxMpr(uint256 maxMpr_) public onlyOwner {\\n        _maxMpr = maxMpr_;\\n    }\\n\\n    /**\\n     * @dev Sets maximum MPR for campaign.\\n     */\\n    function setMinMpr(uint256 minMpr_) public onlyOwner {\\n        _minMpr = minMpr_;\\n    }\\n\\n    /**\\n     * @dev Sets current eventIndex for further events.\\n     */\\n    function setEventIndex(uint256 eventIndex_) public onlyOwner {\\n        _eventIndex = eventIndex_;\\n    }\\n\\n    /**\\n     * @dev Set total staked amount to exact amount.\\n     */\\n    function setTotalStaked(uint256 totalStaked_) public onlyOwner {\\n        _totalStaked = totalStaked_;\\n    }\\n\\n    /**\\n     * @dev Set hold value in order to temporary hold staking activity (e.g.\\n     * in case of maintenance or migrations).\\n     */\\n    function setHold(bool hold_) public onlyOwner {\\n        _hold = hold_;\\n    }\\n\\n    /**\\n     * @dev Set staked balance.\\n     */\\n    function setStakedBalance(address address_, uint256 amount_) public onlyOwner {\\n        _stakedBalances[address_] = amount_;\\n    }\\n\\n    /**\\n     * @dev Set staked balances in bulk.\\n     */\\n    function setStakedBalances(address[] calldata addresses_, uint256[] calldata amounts_, bool syncTotalStaked_) external onlyOwner {\\n        uint256 length = addresses_.length;\\n        require(length == amounts_.length, 'FluidStaking: arrays length should be identical for setting staked balances in bulk.');\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            if (syncTotalStaked_)\\n                _totalStaked -= _stakedBalances[addresses_[i]];\\n\\n            _stakedBalances[addresses_[i]] = amounts_[i];\\n\\n            if (syncTotalStaked_)\\n                _totalStaked += amounts_[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Add wallet to blacklist.\\n     */\\n    function addToBlacklist(address address_) public onlyOwner {\\n        _blacklistWallets[address_] = true;\\n    }\\n\\n    /**\\n     * @dev Remove wallet from blacklist.\\n     */\\n    function removeFromBlacklist(address address_) public onlyOwner {\\n        delete _blacklistWallets[address_];\\n    }\\n\\n    /**\\n     * @dev Check if wallet is currently blacklisted.\\n     */\\n    function isBlacklisted(address address_) public view returns (bool) {\\n        return _blacklistWallets[address_];\\n    }\\n\\n    /**\\n     * @dev Returns total amount of all the staked tokens.\\n     */\\n    function totalStaked() public view returns (uint256) {\\n        return _totalStaked;\\n    }\\n\\n    /**\\n     * @dev Performs the stake operation and transfers sender's tokens to\\n     * the contract address.\\n     */\\n    function stake(uint256 amount_) public validIntegrity checkHold checkBlacklist {\\n        address sender = _msgSender();\\n\\n        uint256 stakedBalance = _stakedBalances[sender] + amount_;\\n\\n        require(block.timestamp >= _startAt, \\\"FluidStaking: campaign is not started yet\\\");\\n        require(_expireAt == 0 || block.timestamp < _expireAt, \\\"FluidStaking: campaign is already expired\\\");\\n        require(stakedBalance >= _minStake, \\\"FluidStaking: stake amount is too small\\\");\\n        require(_maxStake == 0 || stakedBalance <= _maxStake, \\\"FluidStaking: stake amount is too big\\\");\\n        require(_stakeLimit == 0 || _stakeLimit >= _totalStaked + amount_, \\\"FluidStaking: stake limit is reached for this campaign\\\");\\n        require(_token.allowance(sender, address(this)) >= amount_, \\\"FluidStaking: not enough allowance of token\\\");\\n        require(_token.transferFrom(sender, address(this), amount_), \\\"FluidStaking: could not transfer tokens from sender to staking contract\\\");\\n\\n        _stakedBalances[sender] += amount_;\\n        _totalStaked += amount_;\\n\\n        emitStakeEvent(sender, int256(amount_));\\n    }\\n\\n    /**\\n     * @dev A helper method for emitting Stake event.\\n     */\\n    function emitStakeEvent(address sender, int256 amount_) internal {\\n        emit Stake(\\n            _campaignId,\\n            sender,\\n            amount_,\\n            getStaked(sender),\\n            totalStaked(),\\n            mpr(),\\n            mprDecimals(),\\n            _eventIndex++,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Calculates MPR for currently staked token amount.\\n     * Note that result is multiplied by _mprDecimals in order not to lose precision.\\n     */\\n    function mpr() public view returns (uint256) {\\n        if (totalStaked() < 1) {\\n            return 0;\\n        }\\n\\n        uint256 mpr_ = _mBudgetTokens * 10 ** _mprDecimals / totalStaked();\\n\\n        if (_maxMpr > 0 && mpr_ > _maxMpr) {\\n            mpr_ = _maxMpr;\\n        }\\n\\n        if (_minMpr > 0 && mpr_ < _minMpr) {\\n            mpr_ = _minMpr;\\n        }\\n\\n        return mpr_;\\n    }\\n\\n    /**\\n     * @dev Returns amount of decimals for MPR.\\n     */\\n    function mprDecimals() public view returns(uint256) {\\n        return _mprDecimals;\\n    }\\n\\n    /**\\n     * @dev Triggers withdrawal process. It withdraws all the\\n     * staked amount for sender.\\n     */\\n    function withdraw() public {\\n        withdrawAmount(_stakedBalances[_msgSender()]);\\n    }\\n\\n    /**\\n     * @dev Withdraws particular amount of token for sender.\\n     */\\n    function withdrawAmount(uint256 amount_) public validIntegrity checkHold checkBlacklist {\\n        address sender = _msgSender();\\n        uint256 staked = getStaked(sender);\\n\\n        require(amount_ > 0, \\\"FluidStaking: withdraw amount should be positive number\\\");\\n        require(amount_ <= staked, \\\"FluidStaking: withdraw amount is higher than staked amount\\\");\\n\\n        uint256 leftOver = staked - amount_;\\n        require(leftOver >= 0, \\\"FluidStaking: stake amount should be positive\\\");\\n        require(leftOver == 0 || leftOver >= _minStake, \\\"FluidStaking: left-over amount is less than minimal stake after withdraw\\\");\\n\\n        _stakedBalances[sender] -= amount_;\\n        _totalStaked -= amount_;\\n\\n        _token.transfer(sender, amount_);\\n\\n        emitStakeEvent(sender, -1 * int256(amount_));\\n    }\\n\\n    function reimburse(address to_, uint256 amount_) public onlyOwner {\\n        _token.transfer(to_, amount_);\\n    }\\n\\n    /**\\n     * @dev Returns a staked balance for address.\\n     */\\n    function getStaked(address addr_) public view returns (uint256) {\\n        return _stakedBalances[addr_];\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/SafeBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport '../IBEP20.sol';\\nimport './Address.sol';\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeBEP20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.9;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 10000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"campaignId_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"budgetTokens_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaignId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mpr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mprDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blacklistWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_campaignId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_eventIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expireAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mBudgetTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxMpr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minMpr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mprDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mprDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"reimburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"campaignId_\",\"type\":\"string\"}],\"name\":\"setCampaignId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventIndex_\",\"type\":\"uint256\"}],\"name\":\"setEventIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expireAt_\",\"type\":\"uint256\"}],\"name\":\"setExpireAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"hold_\",\"type\":\"bool\"}],\"name\":\"setHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mBudgetTokens_\",\"type\":\"uint256\"}],\"name\":\"setMBudgetTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMpr_\",\"type\":\"uint256\"}],\"name\":\"setMaxMpr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max_\",\"type\":\"uint256\"}],\"name\":\"setMaxStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minMpr_\",\"type\":\"uint256\"}],\"name\":\"setMinMpr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min_\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeLimit_\",\"type\":\"uint256\"}],\"name\":\"setStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setStakedBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"syncTotalStaked_\",\"type\":\"bool\"}],\"name\":\"setStakedBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ts_\",\"type\":\"uint256\"}],\"name\":\"setStartAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked_\",\"type\":\"uint256\"}],\"name\":\"setTotalStaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FluidStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "10000", "ConstructorArguments": "00000000000000000000000088d7e9b65dc24cf54f5edef929225fc3e1580c25000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000364a3745f953df00000000000000000000000000000000000000000000000000000000000000084445617852386535000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}