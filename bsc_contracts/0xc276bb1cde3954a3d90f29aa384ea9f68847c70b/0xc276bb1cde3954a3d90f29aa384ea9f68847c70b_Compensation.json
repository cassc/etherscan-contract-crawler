{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    // function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        if (_status == _ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract Compensation is ReentrancyGuard, Ownable {\r\n    address owner1;\r\n    address owner2;\r\n    address owner3;\r\n\r\n    uint256 public Beps = 10000;\r\n\r\n    uint256 private constant rewardLevels = 10;\r\n    uint256 public tokenMintPercent = 20_00;\r\n    uint256[rewardLevels] levelReward = [\r\n        100,\r\n        200,\r\n        300,\r\n        400,\r\n        500,\r\n        600,\r\n        700,\r\n        800,\r\n        900,\r\n        1000\r\n    ];\r\n    uint256[3] childrReward = [500, 1000, 15000];\r\n    uint256[4] public JoiningFee = [1e17, 25e16, 5e17, 1e18];\r\n    // 0.1 BNB, 0.25 BNB, 0.5 BNB, 1 BNB\r\n\r\n    IUniswapV2Router public swapRouter;\r\n    address public TokenContract;\r\n\r\n    struct reg {\r\n        address user;\r\n        string username;\r\n        address referer;\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n\r\n    mapping(uint256 => mapping(address => reg)) public UserData;\r\n    mapping(uint256 => mapping(address => bool)) public isReferralLink;\r\n    mapping(string => bool) public isUsernameTaken;\r\n    mapping(uint256 => mapping(address => address[])) private directReferals;\r\n    mapping(uint256 => mapping(address => reg[])) private DIRECTS;\r\n    mapping(uint256 => mapping(address => address[rewardLevels]))\r\n        private parentReferals;\r\n\r\n    // Events\r\n    event joined(address user, address referer, uint256 amount, uint256 time);\r\n    event message(string data, uint256 index, address user, uint256 amount);\r\n\r\n    constructor(address _router, address _tokenAddress) {\r\n        for (uint256 i = 0; i < 4; i++) {\r\n            isReferralLink[i][address(this)] = true;\r\n        }\r\n        TokenContract = _tokenAddress;\r\n        swapRouter = IUniswapV2Router(_router);\r\n        IERC20(_tokenAddress).approve(address(swapRouter), type(uint256).max);\r\n        owner1 = msg.sender;\r\n        owner2 = 0x6405d3683e3909977908408ff6Ab5A4AC2a4d680;\r\n        owner3 = 0xcE0006b1Be83829031d889451e89276366c06dD9;\r\n    }\r\n\r\n    function join(\r\n        uint256 _joinningPlan,\r\n        string memory _username,\r\n        address _referer\r\n    ) external payable nonReentrant {\r\n        require(!isUsernameTaken[_username], \"Username Already taken\");\r\n        require(_joinningPlan < 4, \"Invalid Plan\");\r\n        uint256 joiningFee = JoiningFee[_joinningPlan];\r\n        require(msg.value == joiningFee, \"Invalid value send\");\r\n        require(!isReferralLink[_joinningPlan][msg.sender], \"Already Register\");\r\n        require(_referer != address(0), \"Zero address referer\");\r\n        require(!isContract(msg.sender), \"Joinner can't be contract address\");\r\n        require(\r\n            isReferralLink[_joinningPlan][_referer],\r\n            \"Invalid Referer Address\"\r\n        );\r\n        // set refer\r\n        isReferralLink[_joinningPlan][msg.sender] = true;\r\n        // add direct referer\r\n        // addDirectRefer(_joinningPlan, _referer);\r\n        directReferals[_joinningPlan][_referer].push(msg.sender);\r\n        // add parent referer\r\n        address[rewardLevels] storage _parentList = parentReferals[\r\n            _joinningPlan\r\n        ][_referer];\r\n        parentReferals[_joinningPlan][msg.sender] = _parentList;\r\n        addParentRefer(_joinningPlan, _referer, msg.sender);\r\n        // set data for the user\r\n\r\n        reg memory newJoiner = reg(\r\n            msg.sender,\r\n            _username,\r\n            _referer,\r\n            joiningFee,\r\n            block.timestamp\r\n        );\r\n        UserData[_joinningPlan][msg.sender] = newJoiner;\r\n        // DIRECT REFERAL STRUCT ARRAY MAP\r\n        DIRECTS[_joinningPlan][_referer].push(newJoiner);\r\n\r\n        // Deposit Fund\r\n        payable(address(this)).transfer(joiningFee);\r\n        address[] memory _directReferers = getDirectRefer(\r\n            _joinningPlan,\r\n            _referer\r\n        );\r\n        _fundDistribute(_referer, _directReferers.length, _joinningPlan);\r\n        _buy((msg.value * tokenMintPercent) / Beps, msg.sender);\r\n        isUsernameTaken[_username] = true;\r\n        emit joined(msg.sender, _referer, 10 * 1 ether, block.timestamp);\r\n    }\r\n\r\n    function _fundDistribute(\r\n        address _referer,\r\n        uint256 _directRefererNumber,\r\n        uint256 _joinningPlan\r\n    ) private {\r\n        uint256 joiningFee = JoiningFee[_joinningPlan];\r\n        address[rewardLevels] memory _parentList = getParentRefer(\r\n            _joinningPlan,\r\n            _referer\r\n        );\r\n        uint256 remainder = (_directRefererNumber - 1) % 3;\r\n        // Distribute to Direct Referal\r\n        if (remainder == 0) {\r\n            payable(_referer).transfer((joiningFee * childrReward[0]) / Beps);\r\n            emit message(\r\n                \"5% For the 1st\",\r\n                1,\r\n                _referer,\r\n                (joiningFee * childrReward[0]) / Beps\r\n            );\r\n        } else if (remainder == 1) {\r\n            payable(_referer).transfer((joiningFee * childrReward[1]) / Beps);\r\n            emit message(\r\n                \"10% For the 2nd\",\r\n                2,\r\n                _referer,\r\n                (joiningFee * childrReward[1]) / Beps\r\n            );\r\n        } else {\r\n            payable(_referer).transfer((joiningFee * childrReward[2]) / Beps);\r\n            emit message(\r\n                \"150% to upline\",\r\n                3,\r\n                _referer,\r\n                (joiningFee * childrReward[2]) / Beps\r\n            );\r\n\r\n            for (uint256 i = 0; i < rewardLevels; i++) {\r\n                if (_parentList[i] != address(0)) {\r\n                    uint256 _fundToUpline = (joiningFee * levelReward[i]) /\r\n                        Beps;\r\n                    payable(_parentList[i]).transfer(_fundToUpline);\r\n                    emit message(\"To Upline\", i, _parentList[i], _fundToUpline);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function addParentRefer(\r\n        uint256 _joinningPlan,\r\n        address _parent,\r\n        address _user\r\n    ) private {\r\n        address[rewardLevels] storage _parentList = parentReferals[\r\n            _joinningPlan\r\n        ][_user];\r\n        for (uint256 i = 0; i < rewardLevels - 1; i++) {\r\n            _parentList[i] = _parentList[i + 1];\r\n        }\r\n        _parentList[rewardLevels - 1] = _parent;\r\n        parentReferals[_joinningPlan][_user] = _parentList;\r\n    }\r\n\r\n    function getParentRefer(uint256 _joinningPlan, address _address)\r\n        public\r\n        view\r\n        returns (address[rewardLevels] memory)\r\n    {\r\n        return parentReferals[_joinningPlan][_address];\r\n    }\r\n\r\n\r\n\r\n    function getDirectRefer(uint256 _joinningPlan, address _address)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return directReferals[_joinningPlan][_address];\r\n    }\r\n\r\n    function getDirects(uint256 _joinningPlan, address _address)\r\n        public\r\n        view\r\n        returns (reg[] memory)\r\n    {\r\n        return DIRECTS[_joinningPlan][_address];\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _buy(uint256 _ethAmount, address _user) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = swapRouter.WETH();\r\n        path[1] = TokenContract;\r\n        swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: _ethAmount\r\n        }(0, path, _user, (block.timestamp) + 600);\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function adminCommission() public onlyOwner {\r\n        uint256 balance = (address(this).balance * 30) / 100;\r\n        payable(owner1).transfer(balance / 3);\r\n        payable(owner2).transfer(balance / 3);\r\n        payable(owner3).transfer(balance / 3);\r\n    }\r\n\r\n    function rescueAIMX(address _token) public onlyOwner {\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner1, balance / 3);\r\n        IERC20(_token).transfer(owner2, balance / 3);\r\n        IERC20(_token).transfer(owner3, balance / 3);\r\n    }\r\n\r\n    function adminJoin(\r\n        uint256 _joinningPlan,\r\n        string memory _username,\r\n        address _userWallet,\r\n        address _referer\r\n    ) public onlyOwner {\r\n        require(!isUsernameTaken[_username], \"Username Already taken\");\r\n        require(_joinningPlan < 4, \"Invalid Plan\");\r\n        uint256 joiningFee = JoiningFee[_joinningPlan];\r\n        require(\r\n            !isReferralLink[_joinningPlan][_userWallet],\r\n            \"Already Register\"\r\n        );\r\n        require(_referer != address(0), \"Zero address referer\");\r\n        require(!isContract(_userWallet), \"Joinner can't be contract address\");\r\n        require(\r\n            isReferralLink[_joinningPlan][_referer],\r\n            \"Invalid Referer Address\"\r\n        );\r\n        // set refer\r\n        isReferralLink[_joinningPlan][_userWallet] = true;\r\n        // add direct referer\r\n        directReferals[_joinningPlan][_referer].push(_userWallet);\r\n        // add parent referer\r\n        address[rewardLevels] storage _parentList = parentReferals[\r\n            _joinningPlan\r\n        ][_referer];\r\n        parentReferals[_joinningPlan][_userWallet] = _parentList;\r\n        addParentRefer(_joinningPlan, _referer, _userWallet);\r\n        // set data for the user\r\n\r\n        reg memory newJoiner = reg(\r\n            _userWallet,\r\n            _username,\r\n            _referer,\r\n            joiningFee,\r\n            block.timestamp\r\n        );\r\n        UserData[_joinningPlan][_userWallet] = newJoiner;\r\n        // DIRECT REFERAL STRUCT ARRAY MAP\r\n        DIRECTS[_joinningPlan][_referer].push(newJoiner);\r\n\r\n        isUsernameTaken[_username] = true;\r\n        emit joined(_userWallet, _referer, 10 * 1 ether, block.timestamp);\r\n    }\r\n\r\n    \r\n\r\n    function updateLevelReward(\r\n        uint256 _rw1,\r\n        uint256 _rw2,\r\n        uint256 _rw3,\r\n        uint256 _rw4,\r\n        uint256 _rw5,\r\n        uint256 _rw6,\r\n        uint256 _rw7,\r\n        uint256 _rw8,\r\n        uint256 _rw9,\r\n        uint256 _rw10\r\n    ) public onlyOwner {\r\n        levelReward = [\r\n            _rw1,\r\n            _rw2,\r\n            _rw3,\r\n            _rw4,\r\n            _rw5,\r\n            _rw6,\r\n            _rw7,\r\n            _rw8,\r\n            _rw9,\r\n            _rw10\r\n        ];\r\n    }\r\n\r\n    function updateTokenMintPercent(uint256 _tokenMintPercent) public onlyOwner {\r\n        tokenMintPercent = _tokenMintPercent;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"message\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Beps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"JoiningFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joinningPlan\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_userWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"adminJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joinningPlan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDirectRefer\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joinningPlan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDirects\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct Compensation.reg[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joinningPlan\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getParentRefer\",\"outputs\":[{\"internalType\":\"address[10]\",\"name\":\"\",\"type\":\"address[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReferralLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isUsernameTaken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joinningPlan\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueAIMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMintPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rw1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rw2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rw3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rw4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rw5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rw6\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rw7\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rw8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rw9\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rw10\",\"type\":\"uint256\"}],\"name\":\"updateLevelReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenMintPercent\",\"type\":\"uint256\"}],\"name\":\"updateTokenMintPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Compensation", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000001a2925e13c382ebdb9e2367587dbbe43d98ed1be", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c4045e60ba74e11f4ce0f9fd39621a71e0f520bf54a2ca75ad2ee68516cfa9be"}