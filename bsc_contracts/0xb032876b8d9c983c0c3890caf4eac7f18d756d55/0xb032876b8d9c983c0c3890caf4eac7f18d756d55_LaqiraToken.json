{"SourceCode": "{\"BasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./BEP20Basic.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Basic Token\\r\\n * @dev Basic version of BEP20 Standard Token, without transfer approvals.\\r\\n */\\r\\n\\r\\n\\r\\ncontract BasicToken is Context, BEP20Basic {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) internal _balances;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20Basic-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20Basic-balanceOf}.\\r\\n     */\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {BEP20Basic-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] = senderBalance.sub(amount);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        \\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n}\"},\"BEP20Basic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title BEP20Basic\\r\\n * @dev Simpler version of BEP20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\r\\n */\\r\\n\\r\\ninterface BEP20Basic {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./BEP20Basic.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IBEP20 is BEP20Basic {\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IBEP677.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IBEP677 Token interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/677\\r\\n */\\r\\n\\r\\ninterface IBEP677 is IBEP20 {\\r\\n    function transferAndCall(address receiver, uint value, bytes memory data) external returns (bool success);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\r\\n}\"},\"IBEP677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IBEP677 Receiving Contract interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/677\\r\\n */\\r\\n\\r\\ninterface IBEP677Receiver {\\r\\n    function onTokenTransfer(address _sender, uint _value, bytes memory _data) external;\\r\\n}\"},\"LaqiraToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./VotingToken.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract LaqiraToken is VotingToken, Ownable, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address =\\u003e uint256) private frosted;\\r\\n\\r\\n    event Frost(address indexed from, address indexed to, uint256 value);\\r\\n    \\r\\n    event Defrost(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the frosted balance of a specified address.\\r\\n     * @param _owner is the address to query the frosted balance of. \\r\\n     * @return uint256 representing the amount owned by the address which is frosted.\\r\\n     */\\r\\n\\r\\n    function frostedOf(address _owner) public view returns (uint256) {\\r\\n        return frosted[_owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the available balance of a specified address which is not frosted.\\r\\n     * @param _owner is the address to query the available balance of. \\r\\n     * @return uint256 representing the amount owned by the address which is not frosted.\\r\\n     */\\r\\n\\r\\n    function availableBalance(address _owner) public view returns (uint256) {\\r\\n        return _balances[_owner].sub(frosted[_owner]);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n        require(!paused(), \\\"BEP20Pausable: token transfer while paused\\\");\\r\\n        require(_balances[from].sub(frosted[from]) \\u003e= amount, \\\"LQR: not avaiable balance\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name}, {symbol}, {totalsupply} and {deciamls}.\\r\\n     *\\r\\n     * {name}, {symbol} and {decimals} are immutable: they can only be set once during\\r\\n     * construction. {totalsupply} may be changed by using mint and burn functions. \\r\\n     */\\r\\n    constructor(uint256 totalSupply_) {\\r\\n        _name = \\\"Laqira Token\\\";\\r\\n        _symbol = \\\"LQR\\\";\\r\\n        _decimals = 18;\\r\\n        _transferOwnership(_msgSender());\\r\\n        _mint(_msgSender(), totalSupply_);\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) public onlyOwner returns (bool) {\\r\\n        _mint(account, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public returns (bool) {\\r\\n        _burn(_msgSender(), amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function pause() public onlyOwner returns (bool) {\\r\\n        _pause();\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function unpause() public onlyOwner returns (bool) {\\r\\n        _unpause();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev transfer frosted tokens to a specified address\\r\\n     * @param to is the address to which frosted tokens are transferred.\\r\\n     * @param amount is the frosted amount which is transferred.\\r\\n     */\\r\\n    function frost(address to, uint256 amount) public onlyOwner returns (bool) {\\r\\n        _frost(_msgSender(), to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev defrost frosted tokens of specified address\\r\\n     * @param to is the address from which frosted tokens are defrosted.\\r\\n     * @param amount is the frosted amount which is defrosted.\\r\\n     */\\r\\n    \\r\\n    function defrost(address to, uint256 amount) public onlyOwner returns (bool) {\\r\\n        _defrost(_msgSender(), to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _frost(address from, address to, uint256 amount) private {\\r\\n        frosted[to] = frosted[to].add(amount);\\r\\n        _transfer(from, to, amount);\\r\\n        emit Frost(from ,to, amount);\\r\\n    }\\r\\n\\r\\n    function _defrost(address onBehalfOf, address to, uint256 amount) private {\\r\\n        require(frosted[to] \\u003e= amount);\\r\\n        frosted[to] = frosted[to].sub(amount);\\r\\n        emit Defrost(onBehalfOf, to, amount);\\r\\n    }\\r\\n\\r\\n    function transferAnyBEP20(address _tokenAddress, address _to, uint256 _amount) public onlyOwner returns (bool) {\\r\\n        IBEP20(_tokenAddress).transfer(_to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\n\\r\\n\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003e= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a \\u0026 b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a / b + (a % b == 0 ? 0 : 1);\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler\\u0027s built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c \\u003c a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b \\u003e a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"SmartToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\nimport \\\"./IBEP677.sol\\\";\\r\\nimport \\\"./IBEP677Receiver.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Smart Token\\r\\n * @dev Enhanced Standard Token, with \\\"transfer and call\\\" possibility.\\r\\n */\\r\\n\\r\\n\\r\\ncontract SmartToken is StandardToken, IBEP677 {\\r\\n    /**\\r\\n     * @dev Current token cannot be transferred to the token contract based on follwing override modification.\\r\\n     */\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n        require(validRecipient(to), \\\"LQR: recipient cannot be Laqira token address\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev transfer token to a contract address with additional data if the recipient is a contract.\\r\\n     * @param _to address to transfer to.\\r\\n     * @param _value amount to be transferred.\\r\\n     * @param _data extra data to be passed to the receiving contract.\\r\\n     */\\r\\n\\r\\n    function transferAndCall(address _to, uint256 _value, bytes memory _data) public override returns (bool success) {\\r\\n        _transfer(_msgSender(), _to, _value);\\r\\n        emit Transfer(_msgSender(), _to, _value, _data);\\r\\n        if (isContract(_to)) {\\r\\n            contractFallback(_to, _value, _data);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function validRecipient(address _recipient) internal view returns (bool) {\\r\\n        return _recipient != address(this);\\r\\n    }\\r\\n\\r\\n    function contractFallback(address _to, uint _value, bytes memory _data) private {\\r\\n        IBEP677Receiver receiver = IBEP677Receiver(_to);\\r\\n        receiver.onTokenTransfer(_msgSender(), _value, _data);\\r\\n    }\\r\\n}\"},\"StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./BasicToken.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract StandardToken is BasicToken, IBEP20 {\\r\\n    /**\\r\\n     * Libraries can be seen as implicit base contracts of the contracts that use them.\\r\\n     * They will not be explicitly visible in the inheritance hierarchy.\\r\\n     */\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {BEP20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"BEP20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, _msgSender(), currentAllowance.sub(amount));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IBEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IBEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"BEP20: decreased allowance below zero\\\");\\r\\n        _approve(_msgSender(), spender, currentAllowance.sub(subtractedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"BEP20: burn amount exceeds balance\\\");\\r\\n        _balances[account] = accountBalance.sub(amount);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n}\"},\"VotingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./SmartToken.sol\\\";\\r\\nimport \\\"./Math.sol\\\"; \\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n/**\\r\\n * @dev Extension of BEP20 to support voting and delegation. This version supports token supply up to 2 ** 96 - 1.\\r\\n *\\r\\n * This extension keeps a history (checkpoints) of each account\\u0027s vote power. Vote power can be delegated either\\r\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\r\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\r\\n *\\r\\n * By default, token balance does not account for voting power. This makes transfers cheaper. Acquiring vote power \\r\\n * requires token holders to delegate to themselves in order to activate checkpoints and have their voting power\\r\\n * tracked.\\r\\n */\\r\\n\\r\\n\\r\\ncontract VotingToken is SmartToken {\\r\\n    using SafeMath for uint256;\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n    \\r\\n    struct Delegatee {\\r\\n        address _delegatee;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract\\u0027s domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping (address =\\u003e uint) public nonces;\\r\\n\\r\\n    mapping(address =\\u003e Delegatee) private _delegates;\\r\\n    mapping(address =\\u003e Checkpoint[]) private _checkpoints;\\r\\n    Checkpoint[] private _totalSupplyCheckpoints;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when an account changes their delegate.\\r\\n     */\\r\\n    event DelegateeChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account\\u0027s voting power.\\r\\n     */\\r\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Get the `pos`-th checkpoint for `account`.\\r\\n     */\\r\\n    function checkpoints(address account, uint32 pos) public view returns (Checkpoint memory) {\\r\\n        return _checkpoints[account][pos];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get number of checkpoints for `account`.\\r\\n     */\\r\\n    function numCheckpoints(address account) public view returns (uint256) {\\r\\n        return _checkpoints[account].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the address `account` is currently delegating to.\\r\\n     */\\r\\n    function delegates(address account) public view returns (address) {\\r\\n        return _delegates[account]._delegatee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the current votes balance for `account`\\r\\n     */\\r\\n    function getVotes(address account) public view returns (uint96) {\\r\\n        uint256 pos = _checkpoints[account].length;\\r\\n        return pos == 0 ? 0 : _checkpoints[account][pos.sub(1)].votes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `blockNumber` must have been already mined\\r\\n     */\\r\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint96) {\\r\\n        require(blockNumber \\u003c block.number, \\\"BEP20Votes: block not yet mined\\\");\\r\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\r\\n     * It is but NOT the sum of all the delegated votes!\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `blockNumber` must have been already mined\\r\\n     */\\r\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint96) {\\r\\n        require(blockNumber \\u003c block.number, \\\"BEP20Votes: block not yet mined\\\");\\r\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\r\\n     */\\r\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint96) {\\r\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\r\\n        //\\r\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\r\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\r\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\r\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\r\\n        // Once we reach a single value (when low == high), we\\u0027ve found the right checkpoint at the index high-1, if not\\r\\n        // out of bounds (in which case we\\u0027re looking too far in the past and the result is 0).\\r\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\r\\n        // past the end of the array, so we technically don\\u0027t find a checkpoint after `blockNumber`, but it works out\\r\\n        // the same.\\r\\n        uint256 high = ckpts.length;\\r\\n        uint256 low = 0;\\r\\n        while (low \\u003c high) {\\r\\n            uint256 mid = Math.average(low, high);\\r\\n            if (ckpts[mid].fromBlock \\u003e blockNumber) {\\r\\n                high = mid;\\r\\n            } else {\\r\\n                low = mid.add(1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return high == 0 ? 0 : ckpts[high.sub(1)].votes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegate votes from the sender to `delegatee`.\\r\\n     */\\r\\n    function delegate(address delegatee) public {\\r\\n        _delegate(_msgSender(), delegatee);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Remove previous delegatee and set it to zero address. After receiving more tokens, token owner needs to\\r\\n     * delegates once more to update voting powers. If source and destination delegatee be the same (means token owner\\r\\n     * wants to delegate the same address and update vote powers of the same address), voting powers will not be updated.\\r\\n     * In such case, token owner should call resetDelegate function and then delegate to the address again.\\r\\n     */\\r\\n    function resetDelegate() public {\\r\\n        _delegate(_msgSender(), address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates votes from signer to `delegatee`\\r\\n     * @notice Delegates votes from signer to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint nonce,\\r\\n        uint expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        public\\r\\n    {\\r\\n        require(block.timestamp \\u003c= expiry, \\\"BEP20Votes: signature expired\\\");\\r\\n        bytes32 domainSeparator = keccak256(\\r\\n            abi.encode(\\r\\n                DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name())),\\r\\n                getChainId(),\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 structHash = keccak256(\\r\\n            abi.encode(\\r\\n                DELEGATION_TYPEHASH,\\r\\n                delegatee,\\r\\n                nonce,\\r\\n                expiry\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 digest = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                domainSeparator,\\r\\n                structHash\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address signer = ecrecover(digest, v, r, s);\\r\\n        require(signer != address(0), \\\"LQR::delegateBySig: invalid signature\\\");\\r\\n        require(nonce == nonces[signer]++, \\\"LQR::delegateBySig: invalid nonce\\\");\\r\\n        return _delegate(signer, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Maximum token supply is limited to 10 ** 10 units in order to avoid inflation and overflow in voting mechanism.\\r\\n     */\\r\\n    function _maxSupply() internal pure returns (uint96) {\\r\\n        return 10 ** 28;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Snapshots the totalSupply after it has been increased.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal override {\\r\\n        super._mint(account, amount);\\r\\n        require(totalSupply() \\u003c= _maxSupply(), \\\"BEP20Votes: total supply risks overflowing votes\\\");\\r\\n\\r\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Snapshots the totalSupply after it has been decreased.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal override {\\r\\n        super._burn(account, amount);\\r\\n        if (delegates(account) != address(0)) {\\r\\n            uint256 currentBalance = balanceOf(account);\\r\\n            uint96 delegateeVotePower = _delegates[account].votes;\\r\\n            if (currentBalance \\u003c delegateeVotePower) {\\r\\n                uint256 diff = castTo256(delegateeVotePower).sub(currentBalance);\\r\\n                _moveVotingPower(delegates(account), address(0), diff, currentBalance);\\r\\n                _delegates[account].votes = safeCastTo96(currentBalance, \\\"LQR::_writeCheckpoint: number exceeds 96 bits\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Move voting power when tokens are transferred.\\r\\n    *\\r\\n    * Emits a {DelegateVotesChanged} event.\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        super._afterTokenTransfer(from, to, amount);\\r\\n        if (delegates(from) != address(0)) {\\r\\n            uint256 currentBalance = balanceOf(from);\\r\\n            uint96 delegateeVotePower = _delegates[from].votes;\\r\\n            if (currentBalance \\u003c delegateeVotePower) {\\r\\n                uint256 diff = castTo256(delegateeVotePower).sub(currentBalance);\\r\\n                _moveVotingPower(delegates(from), address(0), diff, currentBalance);\\r\\n                _delegates[from].votes = safeCastTo96(currentBalance, \\\"LQR::_writeCheckpoint: number exceeds 96 bits\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change delegation for `delegator` to `delegatee`.\\r\\n     *\\r\\n     * Emits events {DelegateeChanged} and {DelegateVotesChanged}.\\r\\n     */\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = delegates(delegator);\\r\\n        uint256 currentVotePower = castTo256(_delegates[delegator].votes);\\r\\n        uint256 delegatorBalance = balanceOf(delegator);\\r\\n        if (currentDelegate != delegatee) {\\r\\n            _delegates[delegator]._delegatee = delegatee;\\r\\n            _delegates[delegator].votes = delegatee == address(0) ? 0 : safeCastTo96(delegatorBalance, \\\"LQR::_writeCheckpoint: number exceeds 96 bits\\\");\\r\\n            emit DelegateeChanged(delegator, currentDelegate, delegatee);\\r\\n        }\\r\\n        \\r\\n        _moveVotingPower(currentDelegate, delegatee, currentVotePower, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev The function returns the chain id in which token contract \\r\\n     */ \\r\\n    function getChainId() internal view returns (uint) {\\r\\n        uint256 chainId;\\r\\n        assembly { chainId := chainid() }\\r\\n        return chainId;\\r\\n    }\\r\\n\\r\\n    function safeCastTo96(uint n, string memory errorMessage) internal pure returns (uint96) {\\r\\n        require(n \\u003c 2**96, errorMessage);\\r\\n        return uint96(n);\\r\\n    }\\r\\n\\r\\n    function safeCastTo32(uint n, string memory errorMessage) internal pure returns (uint32) {\\r\\n        require(n \\u003c 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function castTo256(uint96 n) internal pure returns (uint256) {\\r\\n        return uint256(n);\\r\\n    }\\r\\n\\r\\n    function _moveVotingPower(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 transferredVote,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        if (src != dst \\u0026\\u0026 amount \\u003e 0) {\\r\\n            if (src != address(0)) {\\r\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, transferredVote);\\r\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\r\\n            }\\r\\n\\r\\n            if (dst != address(0)) {\\r\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\r\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        Checkpoint[] storage ckpts,\\r\\n        function(uint256, uint256) view returns (uint256) op,\\r\\n        uint256 delta\\r\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\r\\n        uint256 pos = ckpts.length;\\r\\n        oldWeight = pos == 0 ? 0 : castTo256(ckpts[pos.sub(1)].votes);\\r\\n        newWeight = op(oldWeight, delta);\\r\\n\\r\\n        uint32 blockNumber = safeCastTo32(block.number, \\\"LQR::_writeCheckpoint: block number exceeds 32 bits\\\");\\r\\n        if (pos \\u003e 0 \\u0026\\u0026 ckpts[pos.sub(1)].fromBlock == blockNumber) {\\r\\n            ckpts[pos.sub(1)].votes = safeCastTo96(newWeight, \\\"LQR::_writeCheckpoint: number exceeds 96 bits\\\");\\r\\n        } else {\\r\\n            ckpts.push(Checkpoint({fromBlock: blockNumber, votes: safeCastTo96(newWeight, \\\"LQR::_writeCheckpoint: number exceeds 96 bits\\\")}));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Defrost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Frost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct VotingToken.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"defrost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"frost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"frostedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyBEP20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LaqiraToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000204fce5e3e25026110000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ff743ecce2f4c2a8c04947fb7d9a0e28d3879135132c8d28fbd6d34826aa2ee"}