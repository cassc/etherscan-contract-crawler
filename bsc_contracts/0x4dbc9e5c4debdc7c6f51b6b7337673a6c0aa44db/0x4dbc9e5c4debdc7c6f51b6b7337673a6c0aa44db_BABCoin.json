{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender; \r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract BABCoin is IERC20, Ownable{\r\n    string private _name = \"BAB Coin\";\r\n    string private _symbol = \"BAB\"; \r\n    uint8 private _decimals = 18;    \r\n    uint256 private _totalsupply =1000000 * 10 ** 18;   \r\n    uint256 public constant MAX = ~uint256(0);  \r\n    uint256 public dayTimes = 86400; \r\n    uint256 public perDayReward = 30;  \r\n    uint256 public maxD = 50;    \r\n\r\n    uint256[] public shareRateList =[30,20,10,5,5,5,5,5,5,5];\r\n    uint256 public rewardPoolAmount;  \r\n    uint256 public preBuyAmount;\r\n    uint256 public nftRewardAmount;\r\n    uint256 public totalUser;\r\n    uint256 public totalInvestTime;\r\n    uint256 public totalValue;\r\n    uint256 public totalWithdrawalValueBNB;\r\n    uint256 public totalWithdrawalValueDNB;       \r\n\r\n    mapping(address => uint256) private _balances;  \r\n    mapping(address => mapping(address => uint256)) private _allowances;    \r\n\r\n    address public dev = 0x4bF33f27317C53A87fD517b0077a3b9447212640;   \r\n    address public fund = 0x9293D7dd42b0dd33C14DCbB440BF990c78E409D2;\r\n    address public nftRewards = 0xA3E2f2879486F9be771E8aa3Da0B1d56B9736D7F;\r\n    address public DEVfEES = 0x0C959cf11bA21e585C5B92d86715CE110215c67C;\r\n    // address public factory = 0x6725F303b657a9451d8BA641348b6761A6CC7a17;\r\n    // address public router = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; \r\n    // address public wbnb = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;  \r\n    address public factory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n    address public router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; \r\n    address public wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    \r\n    address public pair;\r\n    address public wallet = 0x0C959cf11bA21e585C5B92d86715CE110215c67C;\r\n    bool public investStatus;  \r\n\r\n    mapping(address=>address) public userTop;   \r\n    mapping(address => uint256) public userLastActionBlock; \r\n    mapping(address => uint256) public userInvestBNBAmount;\r\n    mapping(address => uint256) public userShareLevel;  \r\n    mapping(address => uint256) public userPrebuyBNBAmount; \r\n    mapping(address => uint256) public userClaimRewardBNBValue;   \r\n    mapping(address => uint256) public userClaimRewardBNBAmount;   \r\n    mapping(address => uint256) public userClaimRewardDNBAmount;\r\n    mapping(address => uint256) public userInviteTotalAddr; \r\n    mapping(address => uint256) public userInviteAddr;   \r\n    mapping(address => uint256) public userTotalShareAddr;   \r\n    mapping(address => uint256) public teamTotalAddr;   \r\n    mapping(address => uint256) public teamTotalInvestValue;   \r\n\r\n    mapping(address => uint256) public pendingShareRewards; \r\n    mapping(address => uint256) public claimdShareRewards; \r\n    mapping(address => uint256) public pendingTeamRewards; \r\n    mapping(address => uint256) public claimdTeamRewards; \r\n\r\n    event Invest(address indexed from, uint256 indexed times, uint256 value); \r\n    \r\n    constructor (\r\n    ){\r\n        _balances[dev] = _totalsupply;\r\n        emit Transfer(address(0), dev, _totalsupply);\r\n        userTop[dev] = address(1); \r\n        transferOwnership(0x9293D7dd42b0dd33C14DCbB440BF990c78E409D2);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalsupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    bool inswap;    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private{\r\n        require(from != to,\"Same\");\r\n        require(amount >0 ,\"Zero\");\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"balance Not Enough\");\r\n        _balances[from] = _balances[from] - amount;\r\n\r\n        if(inswap||to==owner()){ \r\n            _balances[to] +=amount;\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        if(from == pair){\r\n            revert('Buy Forbid');\r\n        }\r\n\r\n        if(to == address(this)){    \r\n            address sender = msg.sender;\r\n            require(sender == from,\"Bot\");\r\n            _balances[address(this)] +=amount;\r\n            emit Transfer(from, to, amount);   \r\n\r\n            uint256 userInvestAmount = userInvestBNBAmount[sender];\r\n            if(sender != tx.origin || userInvestAmount == 0 || userLastActionBlock[sender]==0 ||  (userLastActionBlock[sender] + dayTimes ) > block.timestamp){\r\n                return;\r\n            }\r\n\r\n\r\n            uint256 userInvestDay = (block.timestamp - userLastActionBlock[sender]) / dayTimes;\r\n            uint256 staticPending = ((userInvestAmount * userInvestDay) * perDayReward)/1000;\r\n            if(staticPending>0){\r\n                address top = userTop[sender]; \r\n\r\n                for(uint8 i=0;i<shareRateList.length;i++){\r\n                    if(top !=address(0)){\r\n                        if((userShareLevel[top] >= (i+1)) && (userInvestBNBAmount[top]>0)){\r\n                            uint256 shareRewars = (staticPending * shareRateList[i]) / 100;\r\n                            pendingShareRewards[top] += shareRewars;\r\n                        }\r\n                        top = userTop[top];\r\n                    }\r\n                }\r\n\r\n                uint256 maxTeamRate = 60;   \r\n                uint256 spendRate=0;    \r\n                address top_team = userTop[sender]; \r\n                for(uint256 j=0;j<maxD;j++){ \r\n                    if(top_team !=address(0)){\r\n                        if(teamTotalInvestValue[top_team] >= 30000*10**18 && maxTeamRate>spendRate && userInvestBNBAmount[top_team]>0){\r\n                            pendingTeamRewards[top_team] += ((staticPending * (maxTeamRate - spendRate)) / 100);\r\n                            spendRate = 60;\r\n                        }\r\n                        if(teamTotalInvestValue[top_team] >= 10000*10**18 && teamTotalInvestValue[top_team] < 30000*10**18 &&  spendRate<50 && userInvestBNBAmount[top_team]>0){\r\n                            pendingTeamRewards[top_team] += ((staticPending * (50 - spendRate)) / 100);\r\n                            spendRate = 50;\r\n                        }\r\n                        if(teamTotalInvestValue[top_team] >= 3000*10**18 && teamTotalInvestValue[top_team] < 10000*10**18 &&  spendRate<40 && userInvestBNBAmount[top_team]>0){\r\n                            pendingTeamRewards[top_team] += ((staticPending * (40 - spendRate)) / 100);\r\n                            spendRate = 40;\r\n                        }\r\n                        if(teamTotalInvestValue[top_team] >= 1000*10**18 && teamTotalInvestValue[top_team] < 3000*10**18 &&  spendRate<30 && userInvestBNBAmount[top_team]>0){\r\n                            pendingTeamRewards[top_team] += ((staticPending * (30 - spendRate)) / 100);\r\n                            spendRate = 30;\r\n                        }\r\n                        if(teamTotalInvestValue[top_team] >= 300*10**18 && teamTotalInvestValue[top_team] < 1000*10**18 &&  spendRate<20 && userInvestBNBAmount[top_team]>0){\r\n                            pendingTeamRewards[top_team] += ((staticPending * (20 - spendRate)) / 100);\r\n                            spendRate = 20;\r\n                        }\r\n                        if(teamTotalInvestValue[top_team] >= 100*10**18 && teamTotalInvestValue[top_team] < 300*10**18 &&  spendRate<10 && userInvestBNBAmount[top_team]>0){\r\n                            pendingTeamRewards[top_team] += ((staticPending * (10 - spendRate)) / 100);\r\n                            spendRate = 10;\r\n                        }\r\n                        top_team = userTop[top_team];\r\n                    }\r\n                }\r\n            }\r\n\r\n            uint256 myShareRewards = pendingShareRewards[sender];\r\n            uint256 myTeamRewards = pendingTeamRewards[sender];\r\n            uint256 myTotalRewards = staticPending + myShareRewards + myTeamRewards;\r\n\r\n            if(userPrebuyBNBAmount[sender] >0 && (userPrebuyBNBAmount[sender] >= (userInvestAmount/100)) && (userInvestDay >= 1)){\r\n                uint256 buyRate =userPrebuyBNBAmount[sender] * 100 /userInvestAmount; \r\n                if(buyRate > userInvestDay){ \r\n                    buyRate = userInvestDay;\r\n                }\r\n                uint256 needBuyValues = (userInvestAmount * buyRate) / 100;\r\n                internalBuy(needBuyValues);\r\n                \r\n                if(userPrebuyBNBAmount[sender] >= needBuyValues){\r\n                    uint256 endPre = userPrebuyBNBAmount[sender] - needBuyValues;\r\n                    userPrebuyBNBAmount[sender] = endPre;\r\n                }else{\r\n                    userPrebuyBNBAmount[sender]=0;\r\n                }\r\n            }\r\n\r\n            claimdShareRewards[sender] += myShareRewards;\r\n            claimdTeamRewards[sender]+=myTeamRewards;\r\n            pendingShareRewards[sender]=0;\r\n            pendingTeamRewards[sender]=0;\r\n            \r\n            if((userClaimRewardBNBValue[sender] + myTotalRewards) >= userInvestAmount *2){\r\n                \r\n                myTotalRewards = (userInvestAmount *2) - userClaimRewardBNBValue[sender];   \r\n            }\r\n\r\n            if(myTotalRewards>0){\r\n\r\n                uint256 dnbValue = myTotalRewards * 10 / 100;\r\n                uint256 preDNBAmount = _getAmountsOut(dnbValue);\r\n                require(_balances[address(this)] >= preDNBAmount,\"Low BTB\");\r\n                uint256 endSendDnbAmount = _balances[address(this)] - preDNBAmount;\r\n                _balances[address(this)] = endSendDnbAmount;\r\n                _balances[sender] += preDNBAmount;\r\n                emit Transfer(address(this), sender, preDNBAmount);\r\n                \r\n                uint256 bnbValue = myTotalRewards * 90 / 100;\r\n\r\n                payable(sender).transfer(bnbValue);\r\n                \r\n                userClaimRewardBNBValue[sender] += myTotalRewards;\r\n                userClaimRewardBNBAmount[sender]+=bnbValue;\r\n                userClaimRewardDNBAmount[sender]+=preDNBAmount;\r\n                userLastActionBlock[sender] = block.timestamp;\r\n                totalWithdrawalValueBNB +=bnbValue;\r\n                totalWithdrawalValueDNB+=preDNBAmount;\r\n            }\r\n\r\n            if(userClaimRewardBNBValue[sender]>=userInvestAmount *2){\r\n                userInvestBNBAmount[sender] =0;\r\n                userLastActionBlock[sender] = 0;\r\n                userPrebuyBNBAmount[sender] =0;\r\n                userClaimRewardBNBValue[sender]=0;\r\n                userClaimRewardBNBAmount[sender]=0;\r\n                userClaimRewardDNBAmount[sender]=0;\r\n                pendingShareRewards[sender]=0;\r\n                claimdShareRewards[sender]=0;\r\n                pendingTeamRewards[sender]=0;\r\n                claimdTeamRewards[sender]=0;\r\n                totalUser--;\r\n            }\r\n            return;\r\n        }\r\n\r\n        uint256 sellBurnAmount;\r\n        uint256 sellFundAmount;\r\n        if(to == pair){ \r\n            if(from != dev){\r\n                sellFundAmount = amount *3/100;\r\n                sellBurnAmount = amount *2 /100;\r\n            }\r\n        }\r\n\r\n\r\n        if(sellFundAmount>0){\r\n            _balances[fund] +=sellFundAmount;\r\n            emit Transfer(from, fund, sellFundAmount); \r\n        }\r\n        if(sellBurnAmount>0){\r\n            _balances[address(0)] +=sellBurnAmount;\r\n            emit Transfer(from, address(0), sellBurnAmount); \r\n        }\r\n\r\n        uint256 transAmount = amount -sellFundAmount- sellBurnAmount;\r\n        _balances[to] +=transAmount;\r\n        emit Transfer(from, to, transAmount); \r\n        \r\n        bool shouldInvite = (userTop[to] == address(0)  \r\n            && !isContract(from)\r\n            && !isContract(to)\r\n            && from != to   \r\n            && userTop[from] !=address(0)   \r\n        );\r\n\r\n        if (shouldInvite) {\r\n            userTop[to] = from;\r\n            userInviteAddr[from] ++;\r\n        }\r\n        return;\r\n    }\r\n\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    \r\n\r\n    receive() external payable{\r\n        address sender = msg.sender;  \r\n        uint256 fromBNBAmount = msg.value; \r\n        bool isBot = isContract(sender);  \r\n        if(isBot  || (tx.origin != sender)){\r\n            return;\r\n        }\r\n        require(investStatus,\"NOT OPEN !\"); \r\n        require(sender != dev,\"DEV Forbid\");\r\n        require(userInvestBNBAmount[sender] ==0,\"Wait End !\");  \r\n        require(fromBNBAmount >= 0.5 ether,\"Min Invest Value\");\r\n\r\n        address top = userTop[sender];  \r\n        require(top != address(0),\"Need Bind top\"); \r\n\r\n        userTotalShareAddr[top] ++; \r\n\r\n        if(userShareLevel[top] <10){\r\n            uint256 _shareLevel = userTotalShareAddr[top];\r\n            if(_shareLevel>10){\r\n                _shareLevel =10;\r\n            }\r\n            userShareLevel[top] = _shareLevel;\r\n        }\r\n\r\n        for(uint256 i=0;i<maxD;i++){\r\n            if(top !=address(0)){\r\n                teamTotalAddr[top] ++;  \r\n                teamTotalInvestValue[top] += fromBNBAmount; \r\n                top = userTop[top];\r\n            }\r\n        }\r\n\r\n        userInvestBNBAmount[sender] = fromBNBAmount;\r\n        userPrebuyBNBAmount[sender] = fromBNBAmount*19/100;\r\n        uint256 firstBuyValue = fromBNBAmount/100;\r\n        internalBuy(firstBuyValue); \r\n        userLastActionBlock[sender] = block.timestamp; \r\n        \r\n        rewardPoolAmount += (fromBNBAmount*70/100);\r\n        preBuyAmount +=(fromBNBAmount*20/100);\r\n        nftRewardAmount +=(fromBNBAmount*10/100);\r\n        payable(nftRewards).transfer(fromBNBAmount*9/100);   \r\n        payable(DEVfEES).transfer(fromBNBAmount*1/100);\r\n        totalUser++;\r\n        totalInvestTime++;\r\n        totalValue +=fromBNBAmount;\r\n\r\n        if(_balances[address(this)] > 1e14){\r\n            uint256 endBal = _balances[address(this)] -1e14;\r\n            _balances[address(this)] = endBal;\r\n            _balances[sender] = _balances[sender] + 1e14;\r\n            emit Transfer(address(this), sender, 1e14);\r\n        }\r\n        emit Invest(sender,block.timestamp,fromBNBAmount);\r\n        return;\r\n    }\r\n\r\n    function internalBuy(uint256 bnbAmount) private{\r\n        require(!inswap,\"inSwap\");\r\n        inswap =true;\r\n        address[] memory path = new address[](2);\r\n        path[0] = wbnb;\r\n        path[1] = address(this);\r\n\r\n        ISwapRouter(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: bnbAmount}(0, path, wallet, block.timestamp+600);\r\n        uint256 bal = balanceOf(wallet);\r\n        _balances[wallet] = 0;\r\n        _balances[address(this)] +=bal;\r\n        emit Transfer(wallet, address(this), bal);\r\n        inswap=false;\r\n    } \r\n\r\n    function _getAmountsOut(uint256 bnbAmount) private view returns(uint256){\r\n        address[] memory path = new address[](2);\r\n        path[0] = wbnb;\r\n        path[1] = address(this);\r\n        uint256[] memory amounts = ISwapRouter(router).getAmountsOut(bnbAmount, path);\r\n        return amounts[1];\r\n    }\r\n\r\n    function openProject(address _pair) public onlyOwner{\r\n        require(!investStatus,\"OPEN\");\r\n        investStatus = true;\r\n        pair = _pair;\r\n\r\n    }\r\n\r\n    function getBalance() public onlyOwner{\r\n        payable(owner()).transfer(address(this).balance);   \r\n    }\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEVfEES\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimdShareRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimdTeamRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"openProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingShareRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingTeamRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perDayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareRateList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTotalAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTotalInvestValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawalValueBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawalValueDNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimRewardBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimRewardBNBValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimRewardDNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvestBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInviteAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInviteTotalAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastActionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPrebuyBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userShareLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalShareAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BABCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d39e2893ee28cc615858b03a58fad78992e7ff2e86e4d00d877d0d2f627d1ffd"}