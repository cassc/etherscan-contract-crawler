{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BurgerAggregatorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport './modules/Configable.sol';\\nimport './modules/Multicall.sol';\\nimport './modules/Common.sol';\\nimport \\\"./interfaces/IBurgerDexManager.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IBurgerSwapReward.sol\\\";\\nimport \\\"./interfaces/IBurgerAggregatorV2.sol\\\";\\nimport \\\"./interfaces/IDexProtocolV2.sol\\\";\\nimport \\\"./libraries/UniversalERC20.sol\\\";\\nimport \\\"./libraries/BalancerLib.sol\\\";\\nimport \\\"./libraries/DisableFlags.sol\\\";\\nimport \\\"./libraries/Distribution.sol\\\";\\n\\ncontract BurgerAggregatorV2 is Common, Configable, Multicall, IBurgerAggregatorV2 {\\n    using SafeMath for uint256;\\n    using DisableFlags for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    IBurgerDexManager public dexManager;\\n    IBurgerSwapReward public swapReward;\\n\\n    event Swap(address swaper, address fromToken, address destToken, uint256 amount, uint256 returnAmount);\\n\\n    constructor(address _weth) public {\\n        owner = msg.sender;\\n        weth = _weth;\\n    }\\n\\n    function configure(IBurgerDexManager _burgerDexManager, IBurgerSwapReward _swapReward, address _burgerPlatform, uint256 _fee) external onlyDev {\\n        dexManager = _burgerDexManager;\\n        swapReward = _swapReward;\\n        burgerPlatform = _burgerPlatform;\\n        fee = _fee;\\n    }\\n\\n    receive() external payable {\\n    }\\n\\n    function setSwapReward(IBurgerSwapReward _swapReward) external onlyDev {\\n        swapReward = _swapReward;\\n    }\\n\\n    function setFee(uint256 _fee) external onlyDev {\\n        fee = _fee;\\n    }\\n\\n    function addReward(address _user, address _tokenIn, address _tokenOut, uint _amountIn, uint _amountOut) internal returns (uint) {\\n        if(address(swapReward) != address(0)) {\\n            return swapReward.addReward(_user, _tokenIn, _tokenOut, _amountIn, _amountOut);\\n        }\\n        return 0;\\n    }\\n\\n    function getAllReserves(uint256 flags, uint dexsCount) public override view returns (Dex[] memory reserves) {\\n        reserves = new Dex[](dexsCount);\\n        for (uint256 i = 0; i < dexsCount; i++) {\\n            (address protocol, address dex, uint256 disFlag,) = dexManager.dexs(i);\\n            if (flags.check(disFlag)) {\\n                reserves[i] = Dex({\\n                    protocol: address(0),\\n                    dex: address(0),\\n                    skip: true\\n                });\\n            } else {\\n               reserves[i] = Dex({\\n                    protocol: protocol,\\n                    dex: dex,\\n                    skip: false\\n                });\\n            }\\n        }\\n    }\\n\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags\\n    ) public override returns (uint256 returnAmount, uint256[] memory distribution) {\\n        (returnAmount, , distribution) = _getExpectedReturnWithGas(\\n            fromToken,\\n            destToken,\\n            amount,\\n            parts,\\n            flags,\\n            0\\n        );\\n    }\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags,\\n        uint256 destTokenEthPriceTimesGasPrice\\n    ) public override returns (uint256 returnAmount, uint256 feeAmount, uint256 estimateGasAmount, uint256[] memory distribution){\\n        if (fromToken == destToken || (fromToken.isETH() && destToken.isETH())) {\\n            return (returnAmount, feeAmount, estimateGasAmount, new uint256[](dexManager.dexLength()));\\n        }\\n        (returnAmount, estimateGasAmount, distribution) = _getExpectedReturnWithGas(fromToken, destToken, amount, parts, flags, destTokenEthPriceTimesGasPrice);\\n        feeAmount = returnAmount.mul(fee).div(1e4);\\n        returnAmount = returnAmount.sub(feeAmount);\\n    }\\n\\n    function getExpectedReturnWithGasMulti(\\n        IERC20[] calldata tokens,\\n        uint256 amount,\\n        uint256[] calldata parts,\\n        uint256[] calldata flags,\\n        uint256[] calldata destTokenEthPriceTimesGasPrices\\n    ) public override returns(\\n        uint256[] memory returnAmounts,\\n        uint256 feeAmount,\\n        uint256 estimateGasAmount,\\n        uint256[] memory distribution\\n    )\\n    {\\n        require(tokens.length - 1 == parts.length && parts.length == flags.length && flags.length == destTokenEthPriceTimesGasPrices.length, 'Invalid args');\\n\\n        GetReturnMutilState memory state = GetReturnMutilState({\\n            tokens: tokens,\\n            amount: amount,\\n            parts: parts,\\n            flags: flags,\\n            destTokenEthPriceTimesGasPrices: destTokenEthPriceTimesGasPrices,\\n            dist: new uint256[](0)\\n        });\\n        if (state.tokens[0] == state.tokens[state.tokens.length - 1] || (state.tokens[0].isETH() && state.tokens[state.tokens.length - 1].isETH())) {\\n            return (new uint256[](state.tokens.length - 1), feeAmount, estimateGasAmount, new uint256[](dexManager.dexLength()));\\n        }\\n\\n        returnAmounts = new uint256[](state.tokens.length - 1);\\n        for (uint i = 1; i < state.tokens.length; i++) {\\n            if (state.tokens[i - 1] == state.tokens[i]) {\\n                returnAmounts[i - 1] = (i == 1) ? state.amount : returnAmounts[i - 2];\\n                // returnAmounts[i - 1] = 0;\\n                continue;\\n            }\\n\\n            (\\n                returnAmounts[i - 1],\\n                state.amount,\\n                state.dist\\n            ) = _getExpectedReturnWithGas(\\n                state.tokens[i - 1],\\n                state.tokens[i],\\n                (i == 1) ? state.amount : returnAmounts[i - 2],\\n                state.parts[i - 1],\\n                state.flags[i - 1],\\n                state.destTokenEthPriceTimesGasPrices[i - 1]\\n            );\\n            estimateGasAmount = estimateGasAmount.add(state.amount);\\n\\n            if (distribution.length == 0) {\\n                distribution = new uint256[](state.dist.length);\\n            }\\n            for (uint j = 0; j < distribution.length; j++) {\\n                distribution[j] = distribution[j].add(state.dist[j] << (8 * (i - 1)));\\n            }\\n        }\\n        feeAmount = returnAmounts[state.tokens.length - 2].mul(fee).div(1e4);\\n        returnAmounts[state.tokens.length - 2] = returnAmounts[state.tokens.length - 2].sub(feeAmount);\\n    }\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256 flags\\n    ) public payable override returns (uint256 returnAmount) {\\n        require(checkPath(fromToken, destToken), \\\"Same token\\\"); \\n\\n        fromToken.universalTransferFrom(msg.sender, address(this), amount);\\n        if (address(destToken) == address(0)) {\\n            returnAmount = _swap(fromToken, IERC20(weth), amount, distribution, flags);\\n        } else {\\n            returnAmount = _swap(fromToken, destToken, amount, distribution, flags);\\n        }\\n    \\n        uint256 feeAmount = returnAmount.mul(fee).div(1e4);\\n        require(returnAmount.sub(feeAmount) >= minReturn, \\\"Less than minReturn\\\");\\n        \\n        if (address(destToken) == address(0)) {\\n            IERC20(weth).universalTransfer(team(), feeAmount);\\n            IWETH(weth).withdraw(returnAmount.sub(feeAmount));\\n            destToken.universalTransfer(msg.sender, returnAmount.sub(feeAmount));\\n        } else {\\n            destToken.universalTransfer(team(), feeAmount);\\n            destToken.universalTransfer(msg.sender, returnAmount.sub(feeAmount));\\n        }\\n\\n        addReward(msg.sender, address(fromToken), address(destToken), amount, returnAmount);\\n        emit Swap(msg.sender, address(fromToken), address(destToken), amount, returnAmount);\\n    }\\n\\n    function checkPath(IERC20 _token1, IERC20 _token2) internal returns (bool) {\\n        if (address(_token1) != address(_token2) && !(_token1.isETH() && _token2.isETH())) return true;\\n        return false;\\n    }\\n\\n    function swapMulti(\\n        IERC20[] calldata tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256[] calldata flags\\n    ) public override payable returns(uint256 returnAmount) {\\n        require(tokens.length - 1 == flags.length, 'Invalid args length');\\n        require(distribution.length == dexManager.dexLength(), 'Invalid distribution');\\n        require(checkPath(tokens[0], tokens[tokens.length - 1]), \\\"Same token\\\");\\n\\n        tokens[0].universalTransferFrom(msg.sender, address(this), amount);\\n\\n        returnAmount = amount;\\n\\n        for (uint i = 1; i < tokens.length; i++) {\\n            if (tokens[i - 1] == tokens[i]) {\\n                continue;\\n            }\\n\\n            uint256[] memory dist = new uint256[](distribution.length);\\n            for (uint j = 0; j < distribution.length; j++) {\\n                dist[j] = (distribution[j] >> (8 * (i - 1))) & 0xFF;\\n            }\\n\\n            if (i == (tokens.length - 1) && address(tokens[tokens.length - 1]) == address(0)) {\\n                _swap(tokens[i - 1], IERC20(weth), returnAmount, dist, flags[i - 1]);\\n                returnAmount = IERC20(weth).universalBalanceOf(address(this));\\n            } else {\\n                _swap(tokens[i - 1], tokens[i], returnAmount, dist, flags[i - 1]);\\n                returnAmount = tokens[i].universalBalanceOf(address(this));\\n            }\\n        }\\n\\n        uint256 feeAmount = returnAmount.mul(fee).div(1e4);\\n        require(returnAmount.sub(feeAmount) >= minReturn, \\\"Less than minReturn\\\");\\n        if (address(tokens[tokens.length - 1]) == address(0)) {\\n            IERC20(weth).universalTransfer(team(), feeAmount);\\n            IWETH(weth).withdraw(returnAmount.sub(feeAmount));\\n            tokens[tokens.length - 1].universalTransfer(msg.sender, returnAmount.sub(feeAmount));\\n        } else {\\n            tokens[tokens.length - 1].universalTransfer(team(), feeAmount);\\n            tokens[tokens.length - 1].universalTransfer(msg.sender, returnAmount.sub(feeAmount));\\n        }\\n\\n        addReward(msg.sender, address(tokens[0]), address(tokens[tokens.length - 1]), amount, returnAmount);\\n        emit Swap(msg.sender, address(tokens[0]), address(tokens[tokens.length - 1]), amount, returnAmount);\\n    }\\n\\n    function _getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags,\\n        uint256 destTokenEthPriceTimesGasPrice\\n    ) internal returns (uint256 returnAmount, uint256 estimateGasAmount, uint256[] memory distribution){\\n\\n        Args memory args;\\n        {\\n            args.fromToken = fromToken;\\n            args.destToken = destToken;\\n            args.amount = amount;\\n            args.parts = parts;\\n            args.flags = flags;\\n            args.destTokenEthPriceTimesGasPrice = destTokenEthPriceTimesGasPrice;\\n            args.dexsCount = dexManager.dexLength();\\n            args.distribution = new uint256[](args.dexsCount);\\n        }\\n        args.reserves = getAllReserves(args.flags, args.dexsCount);\\n        args.matrix = new int256[][](args.dexsCount);\\n        args.gases = new uint256[](args.dexsCount);\\n        bool atLeastOnePositive = false;\\n        \\n        for (uint256 i = 0; i < args.dexsCount; i++) {\\n            uint256[] memory rets;\\n            if (args.reserves[i].skip) {\\n                (rets, args.gases[i]) = (new uint256[](args.parts), 0);\\n            } else {\\n                (rets, args.gases[i]) = IDexProtocolV2(\\n                    args.reserves[i].protocol\\n                ).calculateOnDex(\\n                    args.reserves[i].dex,\\n                    args.fromToken,\\n                    args.destToken,\\n                    Distribution._linearInterpolation(args.amount, args.parts)\\n                );\\n            }\\n            // Prepend zero and sub gas\\n            int256 gas = int256(args.gases[i].mul(args.destTokenEthPriceTimesGasPrice).div(1e18));\\n            args.matrix[i] = new int256[](args.parts + 1);\\n            for (uint256 j = 0; j < rets.length; j++) {\\n                args.matrix[i][j + 1] = int256(rets[j]) - gas;\\n                atLeastOnePositive = atLeastOnePositive || (args.matrix[i][j + 1] > 0);\\n            }\\n        }\\n\\n        if (!atLeastOnePositive) {\\n            for (uint256 i = 0; i < args.dexsCount; i++) {\\n                for (uint256 j = 1; j < args.parts + 1; j++) {\\n                    if (args.matrix[i][j] == 0) {\\n                        args.matrix[i][j] = Distribution.VERY_NEGATIVE_VALUE;\\n                    }\\n                }\\n            }\\n        }\\n\\n        (, distribution) = Distribution._findBestDistribution(args.parts, args.matrix);\\n        args.distribution = distribution;\\n        (returnAmount, estimateGasAmount) = _getReturnAndGasByDistribution(args);\\n        return (returnAmount, estimateGasAmount, distribution);\\n    }\\n\\n    function _getReturnAndGasByDistribution(Args memory args) internal pure returns (uint256 returnAmount, uint256 estimateGasAmount) {\\n        for (uint256 i = 0; i < args.dexsCount; i++) {\\n            if (args.distribution[i] > 0) {\\n                estimateGasAmount = estimateGasAmount.add(args.gases[i]);\\n                int256 value = args.matrix[i][args.distribution[i]];\\n                returnAmount = returnAmount.add(\\n                    uint256((value == Distribution.VERY_NEGATIVE_VALUE ? 0 : value) + int256(args.gases[i].mul(args.destTokenEthPriceTimesGasPrice).div(1e18)))\\n                );\\n            }\\n        }\\n    }\\n\\n    function _swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256[] memory distribution,\\n        uint256 flags\\n    ) internal returns(uint256 returnAmount) {\\n        require(fromToken.universalBalanceOf(address(this)) >= amount, \\\"Wrong of amount\\\");\\n        SwapState memory state = SwapState({\\n            reserves: getAllReserves(flags, dexManager.dexLength()),\\n            parts: 0,\\n            lastNonZeroIndex: 0,\\n            remainingAmount: amount\\n        });\\n        require(distribution.length == state.reserves.length, \\\"ASDRNM\\\");\\n\\n        for (uint256 i = 0; i < distribution.length; i++) {\\n            if (distribution[i] > 0) {\\n                state.parts = state.parts.add(distribution[i]);\\n                state.lastNonZeroIndex = i;\\n            }\\n        }\\n        require(state.parts > 0, \\\"Invalid distribution\\\");\\n        \\n\\n        for (uint256 i = 0; i < distribution.length; i++) {\\n            if (distribution[i] == 0) continue;\\n            uint256 swapAmount = amount.mul(distribution[i]).div(state.parts);\\n            if (i == state.lastNonZeroIndex) swapAmount = state.remainingAmount;\\n            state.remainingAmount -= swapAmount;\\n            // bytes4(keccak256(bytes('swapOnDex(address,address,address,uint256,address)')));\\n            _siglecall(state.reserves[i].protocol, abi.encodeWithSelector(0xf32a1039, state.reserves[i].dex, address(fromToken), address(destToken), swapAmount, address(this)));\\n        }\\n\\n        returnAmount = destToken.universalBalanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/Configable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\n\\ninterface IConfig {\\n    function dev() external view returns (address);\\n    function admin() external view returns (address);\\n    function team() external view returns (address);\\n}\\n\\ncontract Configable {\\n    address public config;\\n    address public owner;\\n\\n    event ConfigChanged(address indexed _user, address indexed _old, address indexed _new);\\n    event OwnerChanged(address indexed _user, address indexed _old, address indexed _new);\\n \\n    function setupConfig(address _config) external onlyOwner {\\n        emit ConfigChanged(msg.sender, config, _config);\\n        config = _config;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, 'OWNER FORBIDDEN');\\n        _;\\n    }\\n\\n    function admin() public view returns(address) {\\n        if(config != address(0)) {\\n            return IConfig(config).admin();\\n        }\\n        return owner;\\n    }\\n\\n    function dev() public view returns(address) {\\n        if(config != address(0)) {\\n            return IConfig(config).dev();\\n        }\\n        return owner;\\n    }\\n\\n    function team() public view returns(address) {\\n        if(config != address(0)) {\\n            return IConfig(config).team();\\n        }\\n        return owner;\\n    }\\n\\n    function changeOwner(address _user) external onlyOwner {\\n        require(owner != _user, 'Owner: NO CHANGE');\\n        emit OwnerChanged(msg.sender, owner, _user);\\n        owner = _user;\\n    }\\n    \\n    modifier onlyDev() {\\n        require(msg.sender == dev() || msg.sender == owner, 'dev FORBIDDEN');\\n        _;\\n    }\\n    \\n    modifier onlyAdmin() {\\n        require(msg.sender == admin() || msg.sender == owner, 'admin FORBIDDEN');\\n        _;\\n    }\\n  \\n    modifier onlyManager() {\\n        require(msg.sender == dev() || msg.sender == admin() || msg.sender == owner, 'manager FORBIDDEN');\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/modules/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract Multicall {\\n    function _siglecall( address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory result) = target.delegatecall(data);\\n        if (!success) {\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n        return result;\\n    }\\n\\n    function _multicall( address[] calldata targets, bytes[] calldata datas) internal returns (bytes[] memory results) {\\n        uint256 len = targets.length;\\n        results = new bytes[](len);\\n        require(datas.length == len, \\\"Error: Array lengths do not match.\\\");\\n        for (uint256 i = 0; i < len; i++) {\\n            results[i] = _siglecall(targets[i], datas[i]);\\n        }\\n    }\\n\\n    function siglecall(bytes memory data) public payable returns (bytes memory) {\\n        return _siglecall(address(this), data);\\n    }\\n\\n    function multicall(bytes[] calldata datas) external payable returns (bytes[] memory results) {\\n        uint256 len = datas.length;\\n        results = new bytes[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            results[i] = siglecall(datas[i]);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/modules/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ncontract Common {\\n    address public weth;\\n    address public burgerPlatform;\\n    uint256 public fee;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'ZERO_ADDRESS');\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBurgerDexManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBurgerDexManager {\\n    function dexLength() external view returns (uint);\\n    function dexs(uint _pid) external view returns (address protocol, address dex, uint256 flag, string memory name);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\n\\ninterface IWETH {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBurgerSwapReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\ninterface IBurgerSwapReward {\\n    function addReward(address _user, address _tokenIn, address _tokenOut, uint _amountIn, uint _amountOut) external returns (uint);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBurgerAggregatorV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport './IBurgerDexManager.sol';\\n\\ninterface IBurgerAggregatorV2 {\\n    struct Dex {\\n        address protocol;\\n        address dex;\\n        bool skip;\\n    }\\n\\n    struct Args {\\n        IERC20 fromToken;\\n        IERC20 destToken;\\n        uint256 amount;\\n        uint256 parts;\\n        uint256 flags;\\n        uint256 destTokenEthPriceTimesGasPrice;\\n        uint256[] distribution;\\n        int256[][] matrix;\\n        uint256[] gases;\\n        uint256 dexsCount;\\n        Dex[] reserves;\\n    }\\n\\n    struct GetReturnMutilState {\\n        IERC20[]  tokens;\\n        uint256 amount;\\n        uint256[]  parts;\\n        uint256[]  flags;\\n        uint256[]  destTokenEthPriceTimesGasPrices;\\n        uint256[]  dist;\\n    }\\n\\n    struct SwapState {\\n        Dex[] reserves;\\n        uint256 parts;\\n        uint256 lastNonZeroIndex;\\n        uint256 remainingAmount;\\n    }\\n\\n    function getAllReserves(uint256 flags, uint dexsCount) external view returns (Dex[] memory reserves);\\n\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags\\n    ) external returns (uint256 returnAmount, uint256[] memory distribution);\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags,\\n        uint256 destTokenEthPriceTimesGasPrice\\n    ) external returns (\\n        uint256 returnAmount,\\n        uint256 feeAmount,\\n        uint256 estimateGasAmount,\\n        uint256[] memory distribution\\n    );\\n\\n    function getExpectedReturnWithGasMulti(\\n        IERC20[] calldata tokens,\\n        uint256 amount,\\n        uint256[] calldata parts,\\n        uint256[] calldata flags,\\n        uint256[] calldata destTokenEthPriceTimesGasPrices\\n    ) external returns (\\n        uint256[] memory returnAmounts,\\n        uint256 feeAmount,\\n        uint256 estimateGasAmount,\\n        uint256[] memory distribution\\n    );\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256 flags\\n    ) external payable returns (uint256 returnAmount);\\n\\n    function swapMulti(\\n        IERC20[] calldata tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256[] calldata flags\\n    ) external payable returns (uint256 returnAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDexProtocolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\n\\nimport './IERC20.sol';\\n\\ninterface IDexProtocolV2 {\\n    function getTokenPrice(\\n        address dexAddr,\\n        IERC20 fromToken,\\n        IERC20 destToken\\n    ) external view returns (uint256 price);\\n\\n    function calculateOnDex(\\n        address dexAddr,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256[] calldata amounts\\n    ) external returns (uint256[] memory rets, uint256 gas);\\n\\n    function swapOnDex(\\n        address dexAddr,\\n        address fromToken,\\n        address destToken,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n\\n    function getLiquidity(\\n        address dexAddr,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        IERC20 connector\\n    ) external view returns (uint256 liquidity);\\n\\n    function getRate(\\n        address dexAddr,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        IERC20 connector\\n    ) external view returns (uint256 rate, uint256 weight);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary UniversalERC20 {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(IERC20 token, address to, uint256 amount) internal returns(bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            address(uint160(to)).transfer(amount);\\n        } else {\\n            token.safeTransfer(to, amount);\\n            return true;\\n        }\\n    }\\n\\n    function universalTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            require(from == msg.sender && msg.value >= amount, \\\"Wrong useage of ETH.universalTransferFrom()\\\");\\n            if (to != address(this)) {\\n                address(uint160(to)).transfer(amount);\\n            }\\n            // if (msg.value > amount) {\\n            //     msg.sender.transfer(msg.value.sub(amount));\\n            // }\\n        } else {\\n            token.safeTransferFrom(from, to, amount);\\n        }\\n    }\\n\\n    function universalTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            if (msg.value > amount) {\\n                // Return remainder if exist\\n                msg.sender.transfer(msg.value.sub(amount));\\n            }\\n        } else {\\n            token.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function universalApprove(IERC20 token, address to, uint256 amount) internal {\\n        if (!isETH(token)) {\\n            if (amount == 0) {\\n                token.safeApprove(to, 0);\\n                return;\\n            }\\n\\n            uint256 allowance = token.allowance(address(this), to);\\n            if (allowance < amount) {\\n                if (allowance > 0) {\\n                    token.safeApprove(to, 0);\\n                }\\n                token.safeApprove(to, amount);\\n            }\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\\n\\n        if (isETH(token)) {\\n            return 18;\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall{gas: 10000}(\\n            abi.encodeWithSignature(\\\"decimals()\\\")\\n        );\\n        if (!success || data.length == 0) {\\n            (success, data) = address(token).staticcall{gas: 10000}(\\n                abi.encodeWithSignature(\\\"DECIMALS()\\\")\\n            );\\n        }\\n\\n        return (success && data.length > 0) ? abi.decode(data, (uint256)) : 18;\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\\n    }\\n\\n    function eq(IERC20 a, IERC20 b) internal pure returns(bool) {\\n        return a == b || (isETH(a) && isETH(b));\\n    }\\n\\n    function notExist(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(-1));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BalancerLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\n\\nlibrary BalancerLib {\\n    uint public constant BONE              = 10**18;\\n\\n    uint public constant MIN_BOUND_TOKENS  = 2;\\n    uint public constant MAX_BOUND_TOKENS  = 8;\\n\\n    uint public constant MIN_FEE           = BONE / 10**6;\\n    uint public constant MAX_FEE           = BONE / 10;\\n    uint public constant EXIT_FEE          = 0;\\n\\n    uint public constant MIN_WEIGHT        = BONE;\\n    uint public constant MAX_WEIGHT        = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT  = BONE * 50;\\n    uint public constant MIN_BALANCE       = BONE / 10**12;\\n\\n    uint public constant INIT_POOL_SUPPLY  = BONE * 100;\\n\\n    uint public constant MIN_BPOW_BASE     = 1 wei;\\n    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\\n    uint public constant BPOW_PRECISION    = BONE / 10**10;\\n\\n    uint public constant MAX_IN_RATIO      = BONE / 2;\\n    uint public constant MAX_OUT_RATIO     = (BONE / 3) + 1 wei;\\n\\n    function btoi(uint a)\\n        internal pure\\n        returns (uint)\\n    {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint a)\\n        internal pure\\n        returns (uint)\\n    {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint a, uint b)\\n        internal pure\\n        returns (uint)\\n    {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint a, uint b)\\n        internal pure\\n        returns (uint)\\n    {\\n        (uint c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint a, uint b)\\n        internal pure\\n        returns (uint, bool)\\n    {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint a, uint b)\\n        internal pure\\n        returns (uint)\\n    {\\n        uint c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint a, uint b)\\n        internal pure\\n        returns (uint)\\n    {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint a, uint n)\\n        internal pure\\n        returns (uint)\\n    {\\n        uint z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint base, uint exp)\\n        internal pure\\n        returns (uint)\\n    {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint whole  = bfloor(exp);\\n        uint remain = bsub(exp, whole);\\n\\n        uint wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(uint base, uint exp, uint precision)\\n        internal pure\\n        returns (uint)\\n    {\\n        // term 0:\\n        uint a     = exp;\\n        (uint x, bool xneg)  = bsubSign(base, BONE);\\n        uint term = BONE;\\n        uint sum   = term;\\n        bool negative = false;\\n\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint i = 1; term >= precision; i++) {\\n            uint bigK = i * BONE;\\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint swapFee\\n    )\\n        internal pure\\n        returns (uint spotPrice)\\n    {\\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint ratio = bdiv(numer, denom);\\n        uint scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return  (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint tokenAmountIn,\\n        uint swapFee\\n    )\\n        internal pure\\n        returns (uint tokenAmountOut)\\n    {\\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        if (y == 0) {\\n            return 0;\\n        }\\n        uint foo = bpow(y, weightRatio);\\n        uint bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint tokenAmountOut,\\n        uint swapFee\\n    )\\n        internal pure\\n        returns (uint tokenAmountIn)\\n    {\\n        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint y = bdiv(tokenBalanceOut, diff);\\n        if (y == 0) {\\n            return 0;\\n        }\\n        uint foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n    function calcPoolOutGivenSingleIn(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountIn,\\n        uint swapFee\\n    )\\n        internal pure\\n        returns (uint poolAmountOut)\\n    {\\n        // Charge the trading fee for the proportion of tokenAi\\n        ///  which is implicitly traded to the other pool tokens.\\n        // That proportion is (1- weightTokenIn)\\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountOut,\\n        uint swapFee\\n    )\\n        internal pure\\n        returns (uint tokenAmountIn)\\n    {\\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint boo = bdiv(BONE, normalizedWeight);\\n        uint tokenInRatio = bpow(poolRatio, boo);\\n        uint newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountIn,\\n        uint swapFee\\n    )\\n        internal pure\\n        returns (uint tokenAmountOut)\\n    {\\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountOut,\\n        uint swapFee\\n    )\\n        internal pure\\n        returns (uint poolAmountIn)\\n    {\\n\\n        // charge swap fee on the output token side\\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint zoo = bsub(BONE, normalizedWeight);\\n        uint zar = bmul(zoo, swapFee);\\n        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DisableFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\n\\nlibrary DisableFlags {\\n    function check(uint256 flags, uint256 flag) internal pure returns(bool) {\\n        return (flags & flag) != 0;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Distribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\n\\nimport \\\"./UniversalERC20.sol\\\";\\n\\nlibrary Distribution {\\n    using SafeMath for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    int256 internal constant VERY_NEGATIVE_VALUE = -1e72;\\n\\n    function _findBestDistribution(\\n        uint256 s,                // parts\\n        int256[][] memory amounts // exchangesReturns\\n    ) internal pure returns(int256 returnAmount, uint256[] memory distribution) {\\n        uint256 n = amounts.length;\\n\\n        int256[][] memory answer = new int256[][](n); // int[n][s+1]\\n        uint256[][] memory parent = new uint256[][](n); // int[n][s+1]\\n\\n        for (uint i = 0; i < n; i++) {\\n            answer[i] = new int256[](s + 1);\\n            parent[i] = new uint256[](s + 1);\\n        }\\n\\n        for (uint j = 0; j <= s; j++) {\\n            answer[0][j] = amounts[0][j];\\n            for (uint i = 1; i < n; i++) {\\n                answer[i][j] = -1e72;\\n            }\\n            parent[0][j] = 0;\\n        }\\n\\n        for (uint i = 1; i < n; i++) {\\n            for (uint j = 0; j <= s; j++) {\\n                answer[i][j] = answer[i - 1][j];\\n                parent[i][j] = j;\\n\\n                for (uint k = 1; k <= j; k++) {\\n                    if (answer[i - 1][j - k] + amounts[i][k] > answer[i][j]) {\\n                        answer[i][j] = answer[i - 1][j - k] + amounts[i][k];\\n                        parent[i][j] = j - k;\\n                    }\\n                }\\n            }\\n        }\\n\\n        distribution = new uint256[](n);\\n\\n        uint256 partsLeft = s;\\n        for (uint curExchange = n - 1; partsLeft > 0; curExchange--) {\\n            distribution[curExchange] = partsLeft - parent[curExchange][partsLeft];\\n            partsLeft = parent[curExchange][partsLeft];\\n        }\\n\\n        returnAmount = (answer[n - 1][s] == VERY_NEGATIVE_VALUE) ? 0 : answer[n - 1][s];\\n    }\\n\\n    function _linearInterpolation(\\n        uint256 value,\\n        uint256 parts\\n    ) internal pure returns(uint256[] memory rets) {\\n        rets = new uint256[](parts);\\n        for (uint i = 0; i < parts; i++) {\\n            rets[i] = value.mul(i + 1).div(parts);\\n        }\\n    }\\n\\n    function _tokensEqual(IERC20 tokenA, IERC20 tokenB) internal pure returns(bool) {\\n        return ((tokenA.isETH() && tokenB.isETH()) || tokenA == tokenB);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.6 <=0.6.12;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swaper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burgerPlatform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBurgerDexManager\",\"name\":\"_burgerDexManager\",\"type\":\"address\"},{\"internalType\":\"contract IBurgerSwapReward\",\"name\":\"_swapReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burgerPlatform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexManager\",\"outputs\":[{\"internalType\":\"contract IBurgerDexManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexsCount\",\"type\":\"uint256\"}],\"name\":\"getAllReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"skip\",\"type\":\"bool\"}],\"internalType\":\"struct IBurgerAggregatorV2.Dex[]\",\"name\":\"reserves\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destTokenEthPriceTimesGasPrice\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturnWithGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"parts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"destTokenEthPriceTimesGasPrices\",\"type\":\"uint256[]\"}],\"name\":\"getExpectedReturnWithGasMulti\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"returnAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBurgerSwapReward\",\"name\":\"_swapReward\",\"type\":\"address\"}],\"name\":\"setSwapReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"setupConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"siglecall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"flags\",\"type\":\"uint256[]\"}],\"name\":\"swapMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReward\",\"outputs\":[{\"internalType\":\"contract IBurgerSwapReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BurgerAggregatorV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}