{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-11-13\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/token/BEP20/lib/IBEP20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the BEP standard.\r\n */\r\ninterface IBEP20 {\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/BEP20/lib/BEP20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Ownable, IBEP20 {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 public _baseSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    address public crowdSale;\r\n    address public preICOSale;\r\n\r\n    mapping(address => uint256) public LockedAmount;\r\n    uint256 public TotalLockedAmount;\r\n\r\n    mapping(address => uint256) public PreICOLockedAmount;\r\n    uint256 public TotalPreICOLockedAmount;\r\n\r\n    mapping(address => uint256) public ICOLockedAmount;\r\n    uint256 public TotalICOLockedAmount;\r\n\r\n    bool public mintingFinished = false;\r\n    uint public mintTotal = 0;\r\n\r\n    bool public burningFinished = false;\r\n    uint public burnTotal = 0;\r\n    \r\n\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event Burn(address indexed to, uint256 amount);\r\n    \r\n    modifier canMint() {\r\n        require(!mintingFinished,'Minting is closed');\r\n        _;\r\n    }\r\n\r\n    modifier canBurn() {\r\n        require(!mintingFinished,'Minting is closed');\r\n        _;\r\n    }\r\n\r\n    modifier hasMintPermission() {\r\n        require(msg.sender == getOwner(),'You do not have the permission to mint');\r\n        _;\r\n    }\r\n\r\n    modifier hasBurnPermission() {\r\n        require(msg.sender == getOwner(),'You do not have the permission to burn');\r\n        _;\r\n    }\r\n\r\n    modifier onlyCrowdSaler {\r\n        require(crowdSale != address(0),'CrowdSale address is not set!');\r\n        require(msg.sender == crowdSale,'Invalid crowdSaler!');\r\n        _;\r\n    }\r\n\r\n    modifier onlyPreSaler {\r\n        require(preICOSale != address(0),'preICOSale address is not set!');\r\n        require(msg.sender == preICOSale,'Not authorized!');\r\n        _;\r\n    } \r\n    modifier onlyAuthorized {\r\n        // require(crowdSale != address(0),'CrowdSale address is not set!');\r\n        // require(preICOSale != address(0),'preICOSale address is not set!');\r\n        require((msg.sender == crowdSale && crowdSale != address(0)) || (msg.sender == preICOSale && preICOSale != address(0)),'Not authorized!');\r\n        _;\r\n        \r\n    }    \r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_,uint256 initialBalance,address _owner) {\r\n       require(initialBalance > 0, \"EPIXBEP20: supply cannot be zero\");\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n        _totalSupply = initialBalance*10**18;\r\n        _baseSupply = initialBalance*10**18;\r\n        \r\n        _balances[_owner] += _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {BEP20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account]+LockedAmount[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-clearedBalanceOf}.\r\n     */\r\n    function clearedBalanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev See {IBEP20-getOwner}.\r\n     */\r\n    function getOwner() public view override returns (address) {\r\n        return owner();\r\n    }\r\n    \r\n     /**\r\n     * @dev See {IBEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function setCrowdSale(address _crowdSale) public onlyOwner virtual returns (bool) {\r\n        crowdSale = _crowdSale;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function setPreICOSale(address _preICOSale) public onlyOwner virtual returns (bool) {\r\n        preICOSale = _preICOSale;\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * @dev See {IBEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev See {IBEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transferByCrowdSaler(address sender,address recipient, uint256 amount) public onlyAuthorized virtual  returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev See {IBEP20-updateLockedAmount}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * -  `userAddress` cannot be the zero address.\r\n     * -  `amount`- which is going added or substracted\r\n     * -  `addOrSub` 1 for addition and 2 for substraction.\r\n     */\r\n    function updateLockedAmount(address userAddress, uint256 amount,uint256 addOrSub) public onlyAuthorized virtual  returns (bool) {\r\n        if(addOrSub == 1){// Addition\r\n            LockedAmount[userAddress] += amount;\r\n            TotalLockedAmount += amount;\r\n            if(msg.sender == preICOSale){\r\n                PreICOLockedAmount[userAddress] += amount;\r\n                TotalPreICOLockedAmount += amount;\r\n            }\r\n            if(msg.sender == crowdSale){\r\n                ICOLockedAmount[userAddress] += amount;\r\n                TotalICOLockedAmount += amount;\r\n            }\r\n        }else{\r\n            LockedAmount[userAddress] -= amount;\r\n            TotalLockedAmount -= amount;\r\n\r\n            if(msg.sender == preICOSale){\r\n                PreICOLockedAmount[userAddress] -= amount;\r\n                TotalPreICOLockedAmount -= amount;\r\n            }\r\n            if(msg.sender == crowdSale){\r\n                ICOLockedAmount[userAddress] -= amount;\r\n                TotalICOLockedAmount -= amount;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        \r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"BEP20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IBEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    \r\n\r\n\r\n    /**\r\n     * @dev See {IBEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IBEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IBEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"BEP20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function mint(\r\n        address _to,\r\n        uint256 _amount\r\n    )\r\n        hasMintPermission\r\n        canMint\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0), \"BEP20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), _to, _amount);\r\n        mintTotal += _amount;\r\n        _balances[_to] += _amount;\r\n        _totalSupply += _amount;\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        require(_baseSupply <=  (_totalSupply-amount),\"Total supply can not below the base supply !\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        burnTotal += amount;\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"BEP20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Burn(account, amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {BEP20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {BEP20-_burn} and {BEP20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = _allowances[account][_msgSender()];\r\n        require(currentAllowance >= amount, \"BEP20: burn amount exceeds allowance\");\r\n        _approve(account, _msgSender(), currentAllowance - amount);\r\n        _burn(account, amount);\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n\r\n\r\n// File: contracts/token/BEP20/EPIXBEP20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title EPIXBEP20\r\n * @dev Implementation of the EPIXBEP20\r\n */\r\n\r\ncontract EPIXBEP20 is BEP20 {   \r\n    constructor (\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialBalance,\r\n        address owneraddress\r\n    )\r\n        BEP20(name, symbol,initialBalance,owneraddress)\r\n        payable\r\n    {\r\n        \r\n    \r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\ncontract PreICOSale {\r\n    EPIXBEP20 public EPIX_Contract;\r\n    address public  PreICOOwner;\r\n    uint256 public LockingLimit = 20;\r\n    mapping(string=>uint256) public LockingIds;\r\n    uint256 public LockingCounter = 0;\r\n    \r\n     /* PRE ICO SALE Locking  data variables */\r\n    enum preICOSalelockStatusType { \r\n        locked,\r\n        staked,\r\n        unLocked,\r\n        resumed\r\n    }\r\n\r\n    struct preICOSaleLockInfo {\r\n        string id;\r\n        uint256 lockedAmount;\r\n        uint256 unlockedAmount;\r\n        uint256 stakingAt;\r\n        uint256 unstakingAt;\r\n        preICOSalelockStatusType status;\r\n        uint256 updatedAt;\r\n    }\r\n    mapping(address => preICOSaleLockInfo[]) public UserPreSalePurchasedInfo;\r\n    \r\n    modifier onlyOwner (){\r\n        require(EPIX_Contract.getOwner() == msg.sender,'Unauthorized !');\r\n        _;\r\n    }\r\n    event UnlockedEvent(address userAddress,uint256 lockedId,string _id);\r\n\r\n    constructor (address _EPIXTokenAddress,address _PreICOOwner)  {\r\n        EPIX_Contract = EPIXBEP20(_EPIXTokenAddress);\r\n        PreICOOwner = _PreICOOwner;\r\n\r\n    }\r\n\r\n    /*\r\n     * @dev makeLocking tokens .\r\n     *     \r\n     * Emits a {LockedEvent} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `useraddress` staker address.\r\n     * - `amount` staking amount.\r\n     * - `stage` staking stage.\r\n     * - `_stakingAt` staking time in seconds. It is optional.\r\n     *- `_unstakingAt` unstaking time in seconds. It is optional.\r\n     * -  function accessable by only EPIX Owner\r\n     */\r\n    function makePreSaleICOLocking(address[] memory  userAddresses,uint256[] memory amounts,uint256[]  memory _stakingsAt,uint256[]  memory _unstakingsAt,uint256 totalAmount,string[] memory ids) public payable onlyOwner {\r\n        require(totalAmount > 0, \"Total amount is zero !\");\r\n        require(userAddresses.length <= LockingLimit,\"addresses list length is more than locking length !\");\r\n        // for(uint256 i = 0; i < userAddresses.length; i++) {\r\n        //     require(LockingIds[ids[i]] == 0 ,'Id already exist!');\r\n        // }\r\n        // check owner has sufficient balance to transfer\r\n        for(uint256 i = 0; i < userAddresses.length; i++) {\r\n            //check record id already exist or not\r\n            if(LockingIds[ids[i]]==0){\r\n                UserPreSalePurchasedInfo[userAddresses[i]].push(preICOSaleLockInfo(ids[i],amounts[i],0,_stakingsAt[i],_unstakingsAt[i],preICOSalelockStatusType.locked,block.timestamp));\r\n                EPIX_Contract.updateLockedAmount(userAddresses[i], amounts[i],1);\r\n                \r\n                LockingCounter++;\r\n                LockingIds[ids[i]] = UserPreSalePurchasedInfo[userAddresses[i]].length;\r\n            }else{\r\n                uint256 lockedId;\r\n                lockedId = LockingIds[ids[i]]-1;\r\n                uint256 lockedAmount = UserPreSalePurchasedInfo[userAddresses[i]][lockedId].lockedAmount;\r\n                uint256 newLockedAmount = amounts[i]+lockedAmount;\r\n                UserPreSalePurchasedInfo[userAddresses[i]][lockedId].lockedAmount = newLockedAmount;\r\n                EPIX_Contract.updateLockedAmount(userAddresses[i], amounts[i],1);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    function changeLockingLimit(uint256 _lockingLimit) public onlyOwner {\r\n        require(_lockingLimit > 0, \"_lockingLimit is zero !\");\r\n        // check owner has sufficient balance to transfer\r\n        LockingLimit = _lockingLimit;\r\n        \r\n    }\r\n\r\n\r\n    /** @dev getUserLockedInvestmentCount .\r\n     * \r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `userAddress` user address.\r\n     * - returns the user total locked stages count\r\n     */\r\n    function getUserLockedInvestmentCount(address userAddress) public view returns(uint256){\r\n        return UserPreSalePurchasedInfo[userAddress].length;\r\n    }\r\n\r\n\r\n    /** @dev makeUnlocking tokens .\r\n     * \r\n     * Emits a {UnstakedEvent} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `lockedId`  user locked id..\r\n     * - `userAddress` user address.\r\n     */\r\n    function makeUnlocking(string memory _id,address userAddress,uint256 toBeUnlockAmount) public payable  {\r\n        \r\n        require(UserPreSalePurchasedInfo[userAddress].length >= 1,\"Investment not exits\");\r\n        uint256 lockedId;\r\n        require(LockingIds[_id] > 0 ,\"Invalid investment id\");\r\n        lockedId = LockingIds[_id]-1;\r\n        //require(msg.sender == userAddress,'Sender and userAddress are not same!');\r\n        \r\n        require(UserPreSalePurchasedInfo[userAddress][lockedId].status == preICOSalelockStatusType.locked || UserPreSalePurchasedInfo[userAddress][lockedId].status == preICOSalelockStatusType.resumed ,\"Amount was not locked !\");\r\n        \r\n        uint256 lockedAmount = UserPreSalePurchasedInfo[userAddress][lockedId].lockedAmount;\r\n        uint256 unlockedAmount = UserPreSalePurchasedInfo[userAddress][lockedId].unlockedAmount;\r\n        \r\n        uint256 availableLockedAmount = lockedAmount-unlockedAmount;\r\n        require(availableLockedAmount >=toBeUnlockAmount, \"toBeUnlockAmount is greater than available locked amount !\");\r\n        \r\n        require(block.timestamp > UserPreSalePurchasedInfo[userAddress][lockedId].unstakingAt ,\"Locking period is not completed !\");\r\n        \r\n        require(EPIX_Contract.balanceOf(PreICOOwner) > lockedAmount ,\"StakeOwner does not have funds!\");\r\n        \r\n        if(unlockedAmount+toBeUnlockAmount == lockedAmount){\r\n            UserPreSalePurchasedInfo[userAddress][lockedId].status = preICOSalelockStatusType.unLocked;\r\n        }\r\n        UserPreSalePurchasedInfo[userAddress][lockedId].unlockedAmount = unlockedAmount+toBeUnlockAmount;\r\n\r\n        UserPreSalePurchasedInfo[userAddress][lockedId].updatedAt = block.timestamp;\r\n        \r\n        EPIX_Contract.updateLockedAmount(userAddress, toBeUnlockAmount,2);\r\n        EPIX_Contract.transferByCrowdSaler(PreICOOwner,userAddress, toBeUnlockAmount);\r\n        \r\n        emit UnlockedEvent(userAddress,lockedId,_id);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owneraddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ICOLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PreICOLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalICOLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalPreICOLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burningFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"clearedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preICOSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdSale\",\"type\":\"address\"}],\"name\":\"setCrowdSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_preICOSale\",\"type\":\"address\"}],\"name\":\"setPreICOSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferByCrowdSaler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addOrSub\",\"type\":\"uint256\"}],\"name\":\"updateLockedAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EPIXBEP20", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000008c1dc9e5052d63b85b9ed634ca9609bc19adfb550000000000000000000000000000000000000000000000000000000000000006427965706978000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044550495800000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://51f57caab24b6a485bc1dd72b5c074a46b63042f5c396396d34acb35bb7dbe58"}