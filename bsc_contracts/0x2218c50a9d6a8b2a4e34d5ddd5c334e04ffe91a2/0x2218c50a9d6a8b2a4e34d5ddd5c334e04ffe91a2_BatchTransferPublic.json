{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface Token {\r\n    function transfer(address _to, uint256 _value) external view returns (bool);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n}\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\nlibrary TransferHelper {\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"STF\");\r\n    }\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ST\");\r\n    }\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"SA\");\r\n    }\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'STE');\r\n    }\r\n}\r\n\r\ncontract BatchTransferPublic {\r\n    address public owner; // \u521b\u5efa\u8005\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    // \u6279\u91cf\u8f6c\u8d26ERC20\u4ee3\u5e01\r\n    function batchTransferErc20(\r\n        address[] memory _to,\r\n        address _token,\r\n        uint256 amount\r\n    ) external payable {\r\n        require(_to.length != 0, \"To address null\");\r\n        uint256 val = amount / _to.length;\r\n        uint256 remaining = amount % _to.length;\r\n\r\n        for (uint256 j = 0; j < _to.length; ++j) {\r\n            address payable to = payable(_to[j]);\r\n\r\n            require(to != address(0), \"Invalid address\"); // \u5730\u5740\u6709\u6548\u6027\u68c0\u67e5\r\n            \r\n            uint256 amountToSend = j == _to.length - 1 ? val + remaining : val;\r\n            TransferHelper.safeTransferFrom(_token, msg.sender, to, amountToSend);\r\n            emit TransferErc20(_token, to, amountToSend); // \u89e6\u53d1\u4e8b\u4ef6\r\n        }\r\n    }\r\n\r\n    // \u6279\u91cf\u8f6c\u8d26ETH\r\n    function batchTransferETH(address[] memory _to) external payable {\r\n        require(_to.length != 0, \"To address null\");\r\n        // \u5c06\u91cd\u590d\u7684\u8ba1\u7b97\u79fb\u5230\u5faa\u73af\u5916\u90e8\uff0c\u4ee5\u51cf\u5c11Gas\u6d88\u8017\u3002\r\n        uint256 val = msg.value / _to.length;\r\n        uint256 remainingETH = msg.value % _to.length;\r\n\r\n        for (uint256 j = 0; j < _to.length; ++j) {\r\n            address payable to = payable(_to[j]);\r\n\r\n            require(to != address(0), \"Invalid address\"); // \u5730\u5740\u6709\u6548\u6027\u68c0\u67e5\r\n\r\n            uint256 amountToSend = j == _to.length - 1 ? val + remainingETH : val;\r\n            TransferHelper.safeTransferETH(to, amountToSend);\r\n            emit TransferEth(to, amountToSend); // \u89e6\u53d1\u4e8b\u4ef6\r\n        }\r\n    }\r\n\r\n    // \u4e3b\u5e01\u8f6c\u51fa\uff08\u8f6c\u51fa\u5730\u5740\uff09\r\n    function baseBack() external payable onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    // \u5408\u7ea6\u8f6c\u51fa\uff08\u8f6c\u51fa\u4ee3\u5e01\uff09\r\n    function tokenBack(address _token) external onlyOwner {\r\n        require(_token != address(0x0), \"Token address null\");\r\n        uint256 amount = Token(_token).balanceOf(address(this));\r\n        address payable to = payable(owner);\r\n        TransferHelper.safeTransfer(_token, address(to), amount);\r\n    }\r\n\r\n    // \u6dfb\u52a0\u4e8b\u4ef6\u65e5\u5fd7\uff0c\u8bb0\u5f55ERC20\u4ee3\u5e01\u548cETH\u7684\u8f6c\u8d26\u64cd\u4f5c\uff0c\u4ee5\u589e\u5f3a\u5408\u7ea6\u7684\u900f\u660e\u5ea6\u3002\r\n    event TransferErc20(address indexed token, address indexed to, uint256 value);\r\n    event TransferEth(address indexed to, uint256 value);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferErc20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferEth\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseBack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"}],\"name\":\"batchTransferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"batchTransferErc20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchTransferPublic", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://67d7cfcf441c60a94f8a3527464f870df0a726d2d8d5a36b507dcfaf40478abe"}