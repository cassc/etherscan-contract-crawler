{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-05-17\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.5.0;\r\ninterface WERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a+b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, 'sub');\r\n        return a-b;\r\n    }   \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        \r\n        return a*b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, 'div');\r\n        return (a - (a % b)) / b;\r\n    }    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, 'mod');\r\n        return a % b;\r\n    }\r\n}\r\ncontract Textract{\r\n    using SafeMath for uint256;    \r\n    address owner;\r\n    address sendAddress;\r\n    WERC20 public outputAddress; \r\n\r\n    mapping (address => uint256) public ToReceive;  \r\n\r\n    constructor() {\r\n        owner = msg.sender; \r\n    }  \r\n    modifier checkOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier checkSend() {\r\n        require(msg.sender == sendAddress);\r\n        _;\r\n    }\r\n    \r\n\r\n    function withdraw(WERC20 erc20address, uint256 num, address _to) checkOwner public {\r\n        (bool success, bytes memory returndata) = address(erc20address).call{ value: 0 }(abi.encodeWithSelector(erc20address.transfer.selector, _to, num));  \r\n        if (!success) {\r\n            if (returndata.length > 0) {               \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert('no error');\r\n            }\r\n        } \r\n    }\r\n\r\n    function updateWaitReceive(address _u,uint _a, uint256 _t) checkSend public {\r\n        if(_t == 1){\r\n            ToReceive[_u] = ToReceive[_u].add(_a);\r\n        }else if(_t == 2){\r\n            ToReceive[_u] = ToReceive[_u].sub(_a);\r\n        }\r\n    }\r\n\r\n    function receiveReward() public {\r\n        uint256 num = ToReceive[msg.sender];\r\n        require(num > 0 ,'no bfs'); \r\n        (bool success, bytes memory returndata) = address(outputAddress).call{ value: 0 }(abi.encodeWithSelector(outputAddress.transfer.selector, msg.sender, num));  \r\n        if (!success) {\r\n            if (returndata.length > 0) {               \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert('no error');\r\n            }\r\n        } \r\n        ToReceive[msg.sender] = 0;\r\n    }\r\n\r\n    function setOwner(address _a) checkOwner public {\r\n        owner = _a;\r\n    }\r\n    function setSendAddress(address _a) checkOwner public {\r\n        sendAddress = _a;\r\n    }\r\n    function setOutputAddress(WERC20 _a) checkOwner public {\r\n        outputAddress = _a;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ToReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputAddress\",\"outputs\":[{\"internalType\":\"contract WERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WERC20\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setOutputAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setSendAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"updateWaitReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WERC20\",\"name\":\"erc20address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Textract", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4f8bab91246a0468a19d5f47f7baaf52b9eb5adbe7e0a13eff81ac658a9c1d4a"}