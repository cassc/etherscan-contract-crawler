{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract CONGStaking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant YEAR = 365 days;\r\n    uint256 public constant PERCENT_DIVIDER = 10000;\r\n\r\n    address public congToken;\r\n    uint256 public flexibleAPR = 900;\r\n\r\n    uint256 public totalStakedUsersInLP;\r\n    uint256 public totalStakedTokensInLP;\r\n    uint256 public totalUnstakedTokensInLP;\r\n    uint256 public totalRewardedTokensInLP;\r\n\r\n    uint256 public totalStakedUsersInFP;\r\n    uint256 public totalStakedTokensInFP;\r\n    uint256 public totalUnstakedTokensInFP;\r\n    uint256 public totalRewardedTokensInFP;\r\n\r\n    uint256[5] public lockedAPR = [1400, 1900, 2200, 3900, 5900];\r\n    uint256[5] public lockDurations = [\r\n        30 days,\r\n        60 days,\r\n        90 days,\r\n        180 days,\r\n        365 days\r\n    ];\r\n\r\n    struct Stake {\r\n        uint256 apr;\r\n        uint256 planId;\r\n        uint256 amount;\r\n        uint256 reward;\r\n        uint256 consumedReward;\r\n        uint256 endTime;\r\n        uint256 startTime;\r\n        uint256 withdrawnAt;\r\n        uint256 lastCompoundedAt;\r\n    }\r\n\r\n    struct User {\r\n        uint256 totalStaked;\r\n        uint256 totalUnstaked;\r\n        uint256 totalRewarded;\r\n        uint256 lockedStakeCount;\r\n        uint256 flexibleStakeCount;\r\n        mapping(uint256 => Stake) lockedStakes;\r\n        mapping(uint256 => Stake) flexibleStakes;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    event STAKE(\r\n        address _user,\r\n        uint256 _amount,\r\n        uint256 _stakeTime,\r\n        bool isLocked\r\n    );\r\n    event UNSTAKE(\r\n        address _user,\r\n        uint256 _index,\r\n        uint256 _reward,\r\n        uint256 _unstakeTime,\r\n        bool isLocked\r\n    );\r\n\r\n    constructor(address _token) {\r\n        congToken = _token;\r\n        _transferOwnership(0x613e4b06a44848D93EAADE56D53B360e49A3303d);\r\n    }\r\n\r\n    function lockedStake(uint256 _amount, uint256 _planID) external {\r\n        require(_amount != 0, \"Amount != 0\");\r\n        require(_planID < lockedAPR.length, \"Invalid Plan\");\r\n\r\n        IERC20(congToken).transferFrom(msg.sender, address(this), _amount);\r\n\r\n        User storage user = users[msg.sender];\r\n        uint256 currentIndex = ++user.lockedStakeCount;\r\n\r\n        Stake storage _currentStake = user.lockedStakes[currentIndex];\r\n        _currentStake.planId = _planID;\r\n        _currentStake.apr = lockedAPR[_planID];\r\n        _currentStake.amount = _amount;\r\n        _currentStake.reward = calculateLockedPlanReward(_planID, _amount);\r\n        _currentStake.startTime = block.timestamp;\r\n        _currentStake.lastCompoundedAt = block.timestamp;\r\n        _currentStake.endTime = block.timestamp + lockDurations[_planID];\r\n\r\n        // update total staked info\r\n        if (currentIndex == 1) {\r\n            totalStakedUsersInLP++;\r\n        }\r\n        user.totalStaked = user.totalStaked.add(_amount);\r\n        totalStakedTokensInLP = totalStakedTokensInLP.add(_amount);\r\n\r\n        emit STAKE(msg.sender, _amount, block.timestamp, true);\r\n    }\r\n\r\n    function lockedUnstake(uint256 _index) external {\r\n        User storage user = users[msg.sender];\r\n        require(_index > 0 && _index <= user.lockedStakeCount, \"Invalid ID\");\r\n\r\n        Stake storage stakeInfo = user.lockedStakes[_index];\r\n        require(block.timestamp > stakeInfo.endTime, \"Time not finished\");\r\n        require(stakeInfo.withdrawnAt == 0, \"Already withdrawn\");\r\n        stakeInfo.withdrawnAt = block.timestamp;\r\n\r\n        uint256 remainingReward = stakeInfo.reward.sub(\r\n            stakeInfo.consumedReward\r\n        );\r\n        if (remainingReward != 0) {\r\n            IERC20(congToken).transfer(msg.sender, remainingReward); // reward\r\n        }\r\n        IERC20(congToken).transfer(msg.sender, stakeInfo.amount); // staked\r\n\r\n        // update total staked info\r\n        user.totalUnstaked = user.totalUnstaked.add(stakeInfo.amount);\r\n        user.totalRewarded = user.totalRewarded.add(remainingReward);\r\n\r\n        totalUnstakedTokensInLP = totalUnstakedTokensInLP.add(stakeInfo.amount);\r\n        totalRewardedTokensInLP = totalRewardedTokensInLP.add(remainingReward);\r\n\r\n        emit UNSTAKE(\r\n            msg.sender,\r\n            _index,\r\n            remainingReward,\r\n            block.timestamp,\r\n            true\r\n        );\r\n    }\r\n\r\n    function compoundLockedStake(uint256 _index) external {\r\n        User storage user = users[msg.sender];\r\n        require(_index > 0 && _index <= user.lockedStakeCount, \"Invalid ID\");\r\n\r\n        Stake storage stakeInfo = user.lockedStakes[_index];\r\n        require(stakeInfo.withdrawnAt == 0, \"Already withdrawn\");\r\n\r\n        uint256 currentIndex = ++user.lockedStakeCount;\r\n        uint256 currentReward = calculateCurrentLockPlanReward(\r\n            msg.sender,\r\n            _index\r\n        );\r\n        require(currentReward != 0, \"Reward=0\");\r\n\r\n        stakeInfo.lastCompoundedAt = block.timestamp;\r\n        stakeInfo.consumedReward = stakeInfo.consumedReward.add(currentReward);\r\n\r\n        Stake storage _currentStake = user.lockedStakes[currentIndex];\r\n        _currentStake.planId = stakeInfo.planId;\r\n        _currentStake.apr = lockedAPR[stakeInfo.planId];\r\n        _currentStake.amount = currentReward;\r\n        _currentStake.reward = calculateLockedPlanReward(\r\n            stakeInfo.planId,\r\n            currentReward\r\n        );\r\n        _currentStake.lastCompoundedAt = block.timestamp;\r\n        _currentStake.startTime = block.timestamp;\r\n        _currentStake.endTime =\r\n            block.timestamp +\r\n            lockDurations[stakeInfo.planId];\r\n\r\n        // update total staked info\r\n        user.totalStaked = user.totalStaked.add(currentReward);\r\n        totalStakedTokensInLP = totalStakedTokensInLP.add(currentReward);\r\n\r\n        user.totalRewarded = user.totalRewarded.add(currentReward);\r\n        totalRewardedTokensInLP = totalRewardedTokensInLP.add(currentReward);\r\n\r\n        emit STAKE(msg.sender, currentReward, block.timestamp, true);\r\n    }\r\n\r\n    function flexibleStake(uint256 _amount) external {\r\n        require(_amount > 0, \"Amount != 0\");\r\n\r\n        IERC20(congToken).transferFrom(msg.sender, address(this), _amount);\r\n\r\n        User storage user = users[msg.sender];\r\n        uint256 currentIndex = ++user.flexibleStakeCount;\r\n\r\n        Stake storage _currentStake = user.flexibleStakes[currentIndex];\r\n        _currentStake.apr = flexibleAPR;\r\n        _currentStake.amount = _amount;\r\n        _currentStake.startTime = block.timestamp;\r\n        _currentStake.lastCompoundedAt = block.timestamp;\r\n        _currentStake.reward = _amount.mul(flexibleAPR).div(PERCENT_DIVIDER);\r\n\r\n        // update total staked info\r\n        if (currentIndex == 1) {\r\n            totalStakedUsersInFP++;\r\n        }\r\n        user.totalStaked = user.totalStaked.add(_amount);\r\n        totalStakedTokensInFP = totalStakedTokensInFP.add(_amount);\r\n\r\n        emit STAKE(msg.sender, _amount, block.timestamp, false);\r\n    }\r\n\r\n    function compoundFlexibleStake(uint256 _index) external {\r\n        User storage user = users[msg.sender];\r\n        require(_index > 0 && _index <= user.flexibleStakeCount, \"Invalid ID\");\r\n\r\n        Stake storage stakeInfo = user.flexibleStakes[_index];\r\n        require(stakeInfo.withdrawnAt == 0, \"Already withdrawn\");\r\n\r\n        uint256 elapsedDuration = block.timestamp - stakeInfo.lastCompoundedAt;\r\n        uint256 currentReward = (stakeInfo.reward.div(YEAR)).mul(\r\n            elapsedDuration\r\n        );\r\n        require(currentReward != 0, \"Reward=0\");\r\n\r\n        stakeInfo.lastCompoundedAt = block.timestamp;\r\n        stakeInfo.consumedReward = stakeInfo.consumedReward.add(currentReward);\r\n\r\n        uint256 currentIndex = ++user.flexibleStakeCount;\r\n\r\n        Stake storage _currentStake = user.flexibleStakes[currentIndex];\r\n        _currentStake.apr = flexibleAPR;\r\n        _currentStake.amount = currentReward;\r\n        _currentStake.reward = currentReward.mul(flexibleAPR).div(\r\n            PERCENT_DIVIDER\r\n        );\r\n        _currentStake.startTime = block.timestamp;\r\n        _currentStake.lastCompoundedAt = block.timestamp;\r\n\r\n        // update total staked info\r\n        user.totalStaked = user.totalStaked.add(currentReward);\r\n        totalStakedTokensInFP = totalStakedTokensInFP.add(currentReward);\r\n\r\n        user.totalRewarded = user.totalRewarded.add(currentReward);\r\n        totalRewardedTokensInFP = totalRewardedTokensInFP.add(currentReward);\r\n\r\n        emit STAKE(msg.sender, currentReward, block.timestamp, false);\r\n    }\r\n\r\n    function flexibleUnstake(uint256 _index) external {\r\n        User storage user = users[msg.sender];\r\n        require(_index > 0 && _index <= user.flexibleStakeCount, \"Invalid ID\");\r\n\r\n        Stake storage stakeInfo = user.flexibleStakes[_index];\r\n        require(stakeInfo.withdrawnAt == 0, \"Already withdrawn\");\r\n        stakeInfo.withdrawnAt = block.timestamp;\r\n\r\n        IERC20(congToken).transfer(msg.sender, stakeInfo.amount); // staked\r\n\r\n        uint256 elapsedDuration = block.timestamp - stakeInfo.lastCompoundedAt;\r\n        uint256 currentReward = (stakeInfo.reward.div(YEAR)).mul(\r\n            elapsedDuration\r\n        );\r\n        if (currentReward != 0) {\r\n            IERC20(congToken).transfer(msg.sender, currentReward); // reward\r\n        }\r\n\r\n        // update total staked info\r\n        user.totalUnstaked = user.totalUnstaked.add(stakeInfo.amount);\r\n        user.totalRewarded = user.totalRewarded.add(currentReward);\r\n\r\n        totalUnstakedTokensInFP = totalUnstakedTokensInFP.add(stakeInfo.amount);\r\n        totalRewardedTokensInFP = totalRewardedTokensInFP.add(currentReward);\r\n\r\n        emit UNSTAKE(msg.sender, _index, currentReward, block.timestamp, false);\r\n    }\r\n\r\n    function calculateLockedPlanReward(\r\n        uint256 _planID,\r\n        uint256 _amount\r\n    ) public view returns (uint256 estimatedReward) {\r\n        require(_planID < lockedAPR.length, \"Invalid Plan\");\r\n        estimatedReward = (_amount.mul(lockedAPR[_planID]).div(PERCENT_DIVIDER))\r\n            .div(YEAR.div(lockDurations[_planID]));\r\n    }\r\n\r\n    function calculateCurrentLockPlanReward(\r\n        address _user,\r\n        uint256 _index\r\n    ) public view returns (uint256 estimatedReward) {\r\n        User storage user = users[_user];\r\n        require(_index > 0 && _index <= user.lockedStakeCount, \"Invalid ID\");\r\n\r\n        Stake storage stakeInfo = user.lockedStakes[_index];\r\n        if (stakeInfo.withdrawnAt != 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 elapsedDur = block.timestamp - stakeInfo.lastCompoundedAt;\r\n        uint256 perSecondReward = stakeInfo.reward.div(\r\n            lockDurations[stakeInfo.planId]\r\n        );\r\n\r\n        estimatedReward = perSecondReward.mul(elapsedDur);\r\n        if (estimatedReward + stakeInfo.consumedReward > stakeInfo.reward) {\r\n            estimatedReward = stakeInfo.reward - stakeInfo.consumedReward;\r\n        }\r\n    }\r\n\r\n    function calculateCurrentFlexiblePlanReward(\r\n        address _user,\r\n        uint256 _index\r\n    ) public view returns (uint256 estimatedReward) {\r\n        User storage user = users[_user];\r\n        require(_index > 0 && _index <= user.flexibleStakeCount, \"Invalid ID\");\r\n\r\n        Stake storage stakeInfo = user.flexibleStakes[_index];\r\n        if (stakeInfo.withdrawnAt != 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 elapsedDur = block.timestamp - stakeInfo.lastCompoundedAt;\r\n        uint256 perSecondReward = stakeInfo.reward.div(YEAR);\r\n\r\n        estimatedReward = perSecondReward.mul(elapsedDur);\r\n        // if (estimatedReward + stakeInfo.consumedReward > stakeInfo.reward) {\r\n        //     estimatedReward = stakeInfo.reward - stakeInfo.consumedReward;\r\n        // }\r\n    }\r\n\r\n    function getLockedStakeInfo(\r\n        address _usr,\r\n        uint256 _index\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 planId,\r\n            uint256 apr,\r\n            uint256 amount,\r\n            uint256 reward,\r\n            uint256 startTime,\r\n            uint256 endTime,\r\n            bool withdrawn\r\n        )\r\n    {\r\n        User storage _user = users[_usr];\r\n        require(_index > 0 && _index <= _user.lockedStakeCount, \"Invalid ID\");\r\n        Stake memory stakeInfo = _user.lockedStakes[_index];\r\n\r\n        return (\r\n            stakeInfo.planId,\r\n            stakeInfo.apr,\r\n            stakeInfo.amount,\r\n            stakeInfo.reward,\r\n            stakeInfo.startTime,\r\n            stakeInfo.endTime,\r\n            stakeInfo.withdrawnAt == 0 ? false : true\r\n        );\r\n    }\r\n\r\n    function getFlexibleStakeInfo(\r\n        address _usr,\r\n        uint256 _index\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256 planId,\r\n            uint256 apr,\r\n            uint256 amount,\r\n            uint256 reward,\r\n            uint256 startTime,\r\n            bool withdrawn\r\n        )\r\n    {\r\n        User storage _user = users[_usr];\r\n        require(_index > 0 && _index <= _user.flexibleStakeCount, \"Invalid ID\");\r\n        Stake memory stakeInfo = _user.flexibleStakes[_index];\r\n\r\n        uint256 elapsedDuration = block.timestamp - stakeInfo.startTime;\r\n        uint256 currentReward = (stakeInfo.reward.div(YEAR)).mul(\r\n            elapsedDuration\r\n        );\r\n\r\n        return (\r\n            stakeInfo.planId,\r\n            stakeInfo.apr,\r\n            stakeInfo.amount,\r\n            currentReward,\r\n            stakeInfo.startTime,\r\n            stakeInfo.withdrawnAt == 0 ? false : true\r\n        );\r\n    }\r\n\r\n    function setToken(address _addr) external onlyOwner {\r\n        congToken = _addr;\r\n    }\r\n\r\n    function setFlexibleStakeAPR(uint256 _apr) external onlyOwner {\r\n        flexibleAPR = _apr;\r\n    }\r\n\r\n    function setLockedStakeAPR(uint256[5] memory _aprs) external onlyOwner {\r\n        lockedAPR = _aprs;\r\n    }\r\n\r\n    function setLockedDurations(\r\n        uint256[5] memory _durations\r\n    ) external onlyOwner {\r\n        lockDurations = _durations;\r\n    }\r\n\r\n    function removeUnstuckTokens(\r\n        address _receipent,\r\n        IERC20 _token,\r\n        uint256 _amnt\r\n    ) external onlyOwner {\r\n        _token.transfer(_receipent, _amnt);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"STAKE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unstakeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"UNSTAKE\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"calculateCurrentFlexiblePlanReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"calculateCurrentLockPlanReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateLockedPlanReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"compoundFlexibleStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"compoundLockedStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"congToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flexibleAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"flexibleStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"flexibleUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFlexibleStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockDurations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"}],\"name\":\"lockedStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"lockedUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receipent\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amnt\",\"type\":\"uint256\"}],\"name\":\"removeUnstuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"setFlexibleStakeAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_durations\",\"type\":\"uint256[5]\"}],\"name\":\"setLockedDurations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_aprs\",\"type\":\"uint256[5]\"}],\"name\":\"setLockedStakeAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardedTokensInFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardedTokensInLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokensInFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokensInLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedUsersInFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedUsersInLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnstakedTokensInFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnstakedTokensInLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedStakeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flexibleStakeCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CONGStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003e691bfd5242a2381df65c56edabd19ed22a9f7a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8537eaeb88e0a0e25d8ee201510ab208ed8005e6cb56871e018d980f6a21f71f"}