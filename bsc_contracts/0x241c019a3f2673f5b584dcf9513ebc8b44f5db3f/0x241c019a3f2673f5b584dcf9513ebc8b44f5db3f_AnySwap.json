{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: contracts/Data.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IData {\r\n    function setString2AddressData(string memory str, address addr) external;\r\n\r\n    function setString2UintData(string memory str, uint256 _uint) external;\r\n\r\n    function setString2BoolData(string memory str, bool _bool) external;\r\n\r\n    function setAddress2UintData(address addr, uint256 _uint) external;\r\n\r\n    function string2addressMapping(string memory str)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function string2uintMapping(string memory str)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function string2boolMapping(string memory str) external view returns (bool);\r\n\r\n    function address2uintMapping(address addr) external view returns (uint256);\r\n\r\n    function isInWhiteList(address _addr) external view returns (bool);\r\n\r\n    function isInBlackList(address _addr) external view returns (bool);\r\n\r\n    function isSwapped(bytes32 _otherChainHash) external view returns (bool);\r\n\r\n    function putOtherChainHash(bytes32 _otherChainHash) external;\r\n}\r\n\r\n// File: contracts/AnySwap.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract AnySwap is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IData data;\r\n\r\n    event SwapUsdt(\r\n        address indexed owner,\r\n        address indexed to,\r\n        uint256 indexed amount,\r\n        uint256 fee,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event SwapUsdtFromOtherChain(\r\n        bytes32 indexed otherChainHash,\r\n        address indexed to,\r\n        uint256 indexed amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    constructor(address _dataAddr) {\r\n        data = IData(_dataAddr);\r\n    }\r\n\r\n    function swapUsdt(address to, uint256 _amount) public {\r\n        uint256 minAmount = data.string2uintMapping(\"minAmount\");\r\n        uint256 maxAmount = data.string2uintMapping(\"maxAmount\");\r\n        require(_amount >= minAmount && _amount <= maxAmount, \"amount limit\");\r\n        IERC20 _token = IERC20(data.string2addressMapping(\"usdt\"));\r\n        require(\r\n            _token.allowance(msg.sender, address(this)) >= _amount,\r\n            \"allowance not enough\"\r\n        );\r\n        require(_token.balanceOf(msg.sender) >= _amount, \"balance not enough\");\r\n\r\n        uint256 _feeAmount = 0;\r\n        if (!data.isInWhiteList(msg.sender)) {\r\n            uint256 fee = data.string2uintMapping(\"crossFee\");\r\n            uint256 feeType = data.string2uintMapping(\"crossFeeType\");\r\n            if (feeType == 0) {\r\n                _feeAmount = _amount.mul(fee).div(1000000).div(100);\r\n            } else {\r\n                _feeAmount = fee;\r\n            }\r\n        }\r\n\r\n        if (_feeAmount > 0) {\r\n            address _crossFeeRecv = data.string2addressMapping(\"crossFeeRecv\");\r\n            require(_crossFeeRecv != address(0), \"crossFeeRecv not configure\");\r\n            _token.transferFrom(msg.sender, _crossFeeRecv, _feeAmount);\r\n        }\r\n\r\n        _amount = _amount.sub(_feeAmount);\r\n\r\n        _token.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        emit SwapUsdt(msg.sender, to, _amount, _feeAmount, block.timestamp);\r\n    }\r\n\r\n    function swapUsdtFromOtherChain(\r\n        bytes32 _otherChainHash,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        require(!data.isSwapped(_otherChainHash), \"this hash swapped\");\r\n        if (data.isInBlackList(_to)) {\r\n            _amount = 0;\r\n        }\r\n        IERC20 _token = IERC20(data.string2addressMapping(\"usdt\"));\r\n        require(\r\n            _token.balanceOf(address(this)) >= _amount,\r\n            \"pool balance not enough\"\r\n        );\r\n\r\n        data.putOtherChainHash(_otherChainHash);\r\n\r\n        _token.transfer(_to, _amount);\r\n\r\n        emit SwapUsdtFromOtherChain(\r\n            _otherChainHash,\r\n            _to,\r\n            _amount,\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dataAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SwapUsdt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"otherChainHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SwapUsdtFromOtherChain\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_otherChainHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapUsdtFromOtherChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnySwap", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000012f1f355b68a787d19b6ed615c43a3149b8408a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a7debf3890ca74700211778174a55a0fa0378cfb93640a603b8bacd4eca2158e"}