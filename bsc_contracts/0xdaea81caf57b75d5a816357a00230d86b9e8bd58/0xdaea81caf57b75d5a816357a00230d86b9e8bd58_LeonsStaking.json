{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Context {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = _msgSender();\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_msgSender() == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title LEONS Locked Staking\r\n */\r\ncontract LeonsStaking is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Stake {\r\n        uint256 amount; //staked amount\r\n        uint256 createdAt; // Timestamp of when stake was created\r\n        uint256 rewardAmount; // Calculated reward amount, will be transfered to stake holder after plan expiry\r\n        uint8 state; // state of the stake, 0 - FREE, 1 - ACTIVE, 2 - 'REMOVING'\r\n        string plan;\r\n    }\r\n\r\n    struct Plan {\r\n        string name; //The name of the plan, should be a single word in lowercase\r\n        uint256 durationInDays; // The duration in days of the plan\r\n        uint256 rewardPercentage; //The total reward percentage of the plan\r\n        uint256 minimumStake; //The minimum amount a stakeholder can stake\r\n        uint256 createdAt; // Timestamp of when plan was created\r\n        uint256 usageCount; // How many stakes are in active on this plan\r\n        uint256 stakedAmount;\r\n        uint8 state; // State of the plan, 0 - Not Created, 1 - Active, 2 - Disabled\r\n    }\r\n\r\n    uint256 public constant MAX_NUM_OF_STAKES_PER_USER = 5;\r\n\r\n    address public leonsToken; /* LEONS Token Contract Address */\r\n    address public rewardAccount; //LEONS account from which reward amount will be sent to Stake holders\r\n    uint256 public totalStakedAmount; // Total staked amount, from all share holders\r\n    uint256 public totalPendingRewardAmount; // Reward Amount pending to be rewarded to all stakeholders\r\n    uint256 public totalRewardAmountClaimed; // Reward amount transfered to all stake holders\r\n    bool public stakingPaused;\r\n\r\n    //The stakes for each stakeholder.\r\n    mapping(address => Stake[MAX_NUM_OF_STAKES_PER_USER]) internal stakes;\r\n\r\n    //The plans\r\n    mapping(string => Plan) internal plans;\r\n\r\n    event PlanCreated(string name, uint256 duration, uint256 rewardPercentage);\r\n    event PlanDeleted(string name);\r\n    event ExcessRewardTransferred(address, uint256);\r\n    event Staked(\r\n        address sender,\r\n        string plan,\r\n        uint256 stakeAmount,\r\n        uint256 duration,\r\n        uint256 rewardAmount\r\n    );\r\n    event StakeRemoved(\r\n        address sender,\r\n        uint256 stakeIndex,\r\n        uint256 stakeamount,\r\n        uint256 rewardAmount\r\n    );\r\n\r\n    constructor(address _leonsToken, address rewardsFrom) public {\r\n        leonsToken = _leonsToken;\r\n        rewardAccount = rewardsFrom;\r\n    }\r\n\r\n    /**\r\n     * @notice A method for a stakeholder to create a stake.\r\n     * @param _stakeAmount The size of the stake to be created.\r\n     * @param _plan The type of stake to be created.\r\n     */\r\n    function enterStaking(uint256 _stakeAmount, string memory _plan)\r\n        external\r\n        returns (uint256 stakeIndex)\r\n    {\r\n        uint256 i;\r\n        uint256 rewardAmount;\r\n\r\n        Plan storage plan = plans[_plan];\r\n\r\n        require(!stakingPaused, \"LeonsStaking: Staking Paused\");\r\n        /* plan must be valid and should not be disabled for further stakes */\r\n        require(\r\n            plan.state == 1,\r\n            \"LeonsStaking: Invalid or disabled staking plan\"\r\n        );\r\n        require(\r\n            _stakeAmount >= plan.minimumStake,\r\n            \"LeonsStaking: Stake is below minimum allowed stake\"\r\n        );\r\n\r\n        // Transfer tokens from stake holders LEONS account to this contract account\r\n        IBEP20(leonsToken).transferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            _stakeAmount\r\n        );\r\n\r\n        if (plan.rewardPercentage > 0) {\r\n            rewardAmount = (_stakeAmount.mul(plan.rewardPercentage).div(10000));\r\n\r\n            IBEP20(leonsToken).transferFrom(\r\n                rewardAccount,\r\n                address(this),\r\n                rewardAmount\r\n            );\r\n        }\r\n        /* A stack holder can stake upto MAX_NUM_OF_STAKES_PER_USER of stakes at any point of time */\r\n        for (i = 0; i < MAX_NUM_OF_STAKES_PER_USER; i++)\r\n            if (stakes[_msgSender()][i].state == 0) break;\r\n\r\n        require(\r\n            i < MAX_NUM_OF_STAKES_PER_USER,\r\n            \"LEONSStacking: Reached maximum stakes per user\"\r\n        );\r\n\r\n        Stake storage stake = stakes[_msgSender()][i];\r\n\r\n        stake.amount = _stakeAmount;\r\n        stake.plan = _plan;\r\n        stake.rewardAmount = rewardAmount;\r\n        stake.createdAt = block.timestamp;\r\n        stake.state = 1; // Set to active statemul\r\n        stakeIndex = i;\r\n\r\n        totalStakedAmount = totalStakedAmount.add(_stakeAmount);\r\n        totalPendingRewardAmount = totalPendingRewardAmount.add(\r\n            stake.rewardAmount\r\n        );\r\n\r\n        plan.stakedAmount = plan.stakedAmount.add(_stakeAmount);\r\n\r\n        /* Increase the usage count of this plan */\r\n        plan.usageCount++;\r\n\r\n        emit Staked(\r\n            _msgSender(),\r\n            _plan,\r\n            _stakeAmount,\r\n            plan.durationInDays,\r\n            _stakeAmount.mul(plan.rewardPercentage).div(10000)\r\n        );\r\n    }\r\n\r\n    function getStakesIndexes(address stakeHolder)\r\n        external\r\n        view\r\n        returns (uint256[] memory stakesIndexes, uint256 numStakes)\r\n    {\r\n        uint256 i;\r\n        uint256 j;\r\n\r\n        for (i = 0; i < MAX_NUM_OF_STAKES_PER_USER; i++)\r\n            if (stakes[stakeHolder][i].state == 1) numStakes++;\r\n\r\n        if (numStakes > 0) {\r\n            stakesIndexes = new uint256[](numStakes);\r\n\r\n            for (i = 0; i < MAX_NUM_OF_STAKES_PER_USER; i++) {\r\n                if (stakes[stakeHolder][i].state == 1) {\r\n                    stakesIndexes[j] = i;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAllStakes(address stakeHolder)\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory stakesIndexes,\r\n            uint256[] memory stakedAmounts,\r\n            uint256[] memory createdAt,\r\n            uint256 numStakes\r\n        )\r\n    {\r\n        uint256 i;\r\n        uint256 j;\r\n\r\n        for (i = 0; i < MAX_NUM_OF_STAKES_PER_USER; i++) {\r\n            if (stakes[stakeHolder][i].state == 1) numStakes++;\r\n        }\r\n\r\n        if (numStakes > 0) {\r\n            stakesIndexes = new uint256[](numStakes);\r\n            stakedAmounts = new uint256[](numStakes);\r\n            createdAt = new uint256[](numStakes);\r\n\r\n            for (i = 0; i < MAX_NUM_OF_STAKES_PER_USER; i++) {\r\n                if (stakes[stakeHolder][i].state == 1) {\r\n                    stakesIndexes[j] = i;\r\n                    stakedAmounts[j] = stakes[stakeHolder][i].amount;\r\n                    createdAt[j] = stakes[stakeHolder][i].createdAt;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getStakeInfo(address stakeHolder, uint256 _stakeIndex)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 stakeAmount,\r\n            uint256 createdAt,\r\n            uint256 rewardAmount,\r\n            string memory plan\r\n        )\r\n    {\r\n        if (\r\n            _stakeIndex < MAX_NUM_OF_STAKES_PER_USER &&\r\n            stakes[stakeHolder][_stakeIndex].state == 1\r\n        ) {\r\n            stakeAmount = stakes[stakeHolder][_stakeIndex].amount;\r\n            createdAt = stakes[stakeHolder][_stakeIndex].createdAt;\r\n            plan = stakes[stakeHolder][_stakeIndex].plan;\r\n            rewardAmount = stakeAmount.mul(plans[plan].rewardPercentage).div(\r\n                10000\r\n            );\r\n        }\r\n    }\r\n\r\n    function getStakedAmountByPlan(string memory _plan)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (uint256)\r\n    {\r\n        if (plans[_plan].state > 0) return plans[_plan].stakedAmount;\r\n\r\n        return 0;\r\n    }\r\n\r\n    /* Withdraw/Remove a stake */\r\n    function withdrawStaking(uint256 _stakeIndex) external {\r\n        uint256 amount;\r\n\r\n        require(\r\n            _stakeIndex < MAX_NUM_OF_STAKES_PER_USER,\r\n            \"LeonsStaking: Invalid stake index\"\r\n        );\r\n\r\n        Stake storage stake = stakes[_msgSender()][_stakeIndex];\r\n        require(stake.state == 1, \"LeonsStaking: Stake is not active\");\r\n        require(\r\n            _isExpired(stake.createdAt, plans[stake.plan].durationInDays),\r\n            \"LeonsStaking: Stake Plan not expired yet\"\r\n        );\r\n\r\n        // set the state to 'removing'\r\n        stake.state = 2;\r\n\r\n        /* transfer stake amount + rewared amount to the stake holder */\r\n        amount = amount.add(stake.amount);\r\n        amount = amount.add(stake.rewardAmount);\r\n\r\n        IBEP20(leonsToken).transfer(_msgSender(), amount);\r\n\r\n        /* Update globals */\r\n        totalStakedAmount = totalStakedAmount.sub(stake.amount);\r\n        totalPendingRewardAmount = totalPendingRewardAmount.sub(\r\n            stake.rewardAmount\r\n        );\r\n        totalRewardAmountClaimed = totalRewardAmountClaimed.add(\r\n            stake.rewardAmount\r\n        );\r\n\r\n        plans[stake.plan].stakedAmount = plans[stake.plan].stakedAmount.sub(\r\n            stake.amount\r\n        );\r\n\r\n        /* reduce plan active count */\r\n        plans[stake.plan].usageCount--;\r\n\r\n        emit StakeRemoved(\r\n            _msgSender(),\r\n            _stakeIndex,\r\n            stake.amount,\r\n            stake.amount.mul(plans[stake.plan].rewardPercentage).div(10000)\r\n        );\r\n        delete stakes[_msgSender()][_stakeIndex]; //Sets state to 0\r\n    }\r\n\r\n    /*\r\n     */\r\n    function transferExcessReward(address _to) external onlyOwner {\r\n        uint256 excessAmount = IBEP20(leonsToken).balanceOf(address(this));\r\n\r\n        if (excessAmount > 0) {\r\n            excessAmount = excessAmount.sub(\r\n                totalStakedAmount.add(totalPendingRewardAmount)\r\n            );\r\n            IBEP20(leonsToken).transfer(_to, excessAmount);\r\n        }\r\n        emit ExcessRewardTransferred(_to, excessAmount);\r\n    }\r\n\r\n    /*\r\n     * @notice A method to pause staking. New stakes are not allowed once paused\r\n     *\r\n     */\r\n    function pauseStaking() external onlyOwner returns (bool) {\r\n        stakingPaused = true;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @notice A method to resume paused staking. New stakes are allowed once resumed\r\n     *\r\n     */\r\n    function resumeStaking() external onlyOwner returns (bool) {\r\n        stakingPaused = false;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * @notice A method to update 'rewaredAccount'\r\n     *\r\n     */\r\n    function updateRewardAccount(address _rewardAccount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _rewardAccount != address(0),\r\n            \"Invalid address for rewardAccount\"\r\n        );\r\n\r\n        rewardAccount = _rewardAccount;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice A method for a contract owner to create a staking plan.\r\n     * @param _name The name of the plan to be created.\r\n     * @param _minimum_stake The minimum a stakeholder can stake.\r\n     * @param _duration The duration in weeks of the plan to be created.\r\n     * @param _reward_percentage The total reward percentage of the plan.\r\n     *        Percentage should be in the degree of '100' (i.e multiply the required percent by 100)\r\n     *        To set 10 percent, _reward_percentage should be 1000, to set 0.1 percent, it shoud be 10.\r\n     */\r\n    function createPlan(\r\n        string memory _name,\r\n        uint256 _minimum_stake,\r\n        uint256 _duration,\r\n        uint256 _reward_percentage\r\n    ) external onlyOwner {\r\n        require(_duration > 0, \"LeonsStaking: Duration in weeks can't be zero\");\r\n        require(_minimum_stake > 0, \"LeonsStaking: Minimum stake can't be zero\");\r\n        require(plans[_name].state == 0, \"LeonsStaking: Plan already exists\");\r\n\r\n        Plan storage plan = plans[_name];\r\n\r\n        plan.name = _name;\r\n        plan.minimumStake = _minimum_stake;\r\n        plan.durationInDays = _duration;\r\n        plan.rewardPercentage = _reward_percentage;\r\n        plan.createdAt = block.timestamp;\r\n        plan.state = 1;\r\n\r\n        emit PlanCreated(plan.name, plan.durationInDays, plan.rewardPercentage);\r\n    }\r\n\r\n    function deletePlan(string memory _name) external onlyOwner {\r\n        require(plans[_name].state > 0, \"LeonsStaking: Plan not found\");\r\n        require(plans[_name].usageCount == 0, \"LeonsStaking: Plan is in use\");\r\n\r\n        delete plans[_name];\r\n\r\n        emit PlanDeleted(_name);\r\n    }\r\n\r\n    /*\r\n     * @notice A method to disable a plan. No more new stakes will be added with this plan.\r\n     * @param _name The plan name to disable\r\n     */\r\n    function disablePlan(string memory _name) external onlyOwner {\r\n        require(plans[_name].state > 0, \"LeonsStaking: Plan doesn't exist\");\r\n        plans[_name].state = 2; //Disable\r\n    }\r\n\r\n    /**\r\n     * @notice A method to retrieve the plan with the name.\r\n     * @param _name The plan to retrieve\r\n     */\r\n    function getPlanInfo(string memory _name)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 minimumStake,\r\n            uint256 duration,\r\n            uint256 rewardPercentage,\r\n            uint256 usageCount,\r\n            uint8 state\r\n        )\r\n    {\r\n        Plan storage plan = plans[_name];\r\n\r\n        if (plan.state > 0) {\r\n            minimumStake = plan.minimumStake;\r\n            duration = plan.durationInDays;\r\n            rewardPercentage = plan.rewardPercentage;\r\n            usageCount = plan.usageCount;\r\n            state = plan.state;\r\n        }\r\n    }\r\n\r\n    function _isExpired(uint256 _time, uint256 _duration)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (block.timestamp >= (_time + _duration * 1 days)) return true;\r\n        else return false;\r\n    }\r\n\r\n    function getUserStakedAmount(address stakeHolder)\r\n        external\r\n        view\r\n        returns (uint256 stakedAmount)\r\n    {\r\n        uint256 i;\r\n\r\n        for (i = 0; i < MAX_NUM_OF_STAKES_PER_USER; i++)\r\n            if (stakes[stakeHolder][i].state == 1) {\r\n                stakedAmount = stakedAmount.add(stakes[stakeHolder][i].amount);\r\n            }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_leonsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsFrom\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ExcessRewardTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"PlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"PlanDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"StakeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"plan\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NUM_OF_STAKES_PER_USER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_minimum_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward_percentage\",\"type\":\"uint256\"}],\"name\":\"createPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"deletePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"disablePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_plan\",\"type\":\"string\"}],\"name\":\"enterStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"}],\"name\":\"getAllStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"createdAt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"numStakes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usageCount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"plan\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_plan\",\"type\":\"string\"}],\"name\":\"getStakedAmountByPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"}],\"name\":\"getStakesIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakesIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"numStakes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeHolder\",\"type\":\"address\"}],\"name\":\"getUserStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leonsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardAmountClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferExcessReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAccount\",\"type\":\"address\"}],\"name\":\"updateRewardAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LeonsStaking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008303a44c770c666b8a45eebab0879c1a880d39e70000000000000000000000008023eb0e6a296d83b4ba8b213c7b891049a17548", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://73686068ed6fc47c8db9f2fe1abd5dfc0992529b306c23168af43c40ae086b51"}