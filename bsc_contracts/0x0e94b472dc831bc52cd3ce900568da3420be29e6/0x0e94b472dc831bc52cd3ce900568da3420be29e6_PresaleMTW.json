{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n// Import ERC20 interface for token transfers\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            uint256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            uint256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract PriceConsumerV3 {\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    function getLatestPrice() public view returns (uint) {\r\n        (, uint price, , , ) = priceFeed.latestRoundData();\r\n\r\n        return uint256(price);\r\n    }\r\n}\r\n\r\ncontract PresaleMTW is PriceConsumerV3 {\r\n    address public owner;\r\n    IERC20 public MTW;\r\n    uint public totalRaisedBNB;\r\n    uint public totalRaisedUSDT;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    struct TokenDetails {\r\n        IERC20 tokenAddress;\r\n        uint256 price;\r\n        uint256 totalSold;\r\n    }\r\n\r\n    TokenDetails[] public tokenList;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint _startTime, uint _endTime) {\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(\r\n            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n        );\r\n        tokenList.push(TokenDetails(IERC20(address(0)), 66, 0));\r\n        tokenList.push(\r\n            TokenDetails(\r\n                IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56),\r\n                66,\r\n                0\r\n            )\r\n        );\r\n        MTW = IERC20(0xAAeB74600F79718508606a8A84E9B151d77de01C);\r\n    }\r\n\r\n    // Function to update the price of a token (for the owner)\r\n    function updateTokenPrice(\r\n        uint256 _tokenIndex,\r\n        uint256 _price\r\n    ) external onlyOwner {\r\n        require(_tokenIndex < tokenList.length, \"Invalid token index\");\r\n        tokenList[_tokenIndex].price = _price;\r\n    }\r\n\r\n    // Function to set the address of the MTW token (for the owner)\r\n    function setMTWAddress(address _newTokenAddress) external onlyOwner {\r\n        MTW = IERC20(_newTokenAddress);\r\n    }\r\n\r\n    // Function to transfer ownership (for the owner)\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"New owner address cannot be zero\");\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function buyTokens(uint256 _tokenIndex, uint256 _amount) external payable {\r\n        require(\r\n            block.timestamp >= startTime && block.timestamp <= endTime,\r\n            \"Presale is not active\"\r\n        );\r\n        uint256 tokenBought;\r\n        require(_tokenIndex < tokenList.length, \"Invalid token index\");\r\n\r\n        if (_tokenIndex == 0) {\r\n            tokenBought = calculateTokens(_tokenIndex, msg.value);\r\n            totalRaisedBNB += msg.value;\r\n        } else {\r\n            tokenBought = calculateTokens(_tokenIndex, _amount);\r\n            totalRaisedUSDT += _amount;\r\n        }\r\n\r\n        tokenList[_tokenIndex].totalSold += tokenBought;\r\n        MTW.transferFrom(owner, msg.sender, tokenBought);\r\n    }\r\n\r\n    function calculateTokens(\r\n        uint256 _tokenIndex,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        require(_tokenIndex < tokenList.length, \"Invalid token index\");\r\n        uint256 tokenPrice = tokenList[_tokenIndex].price;\r\n        uint256 usdtPrice = getLatestPrice(); // Fetch USDT price from Chainlink\r\n        uint256 decimal = 10 ** MTW.decimals();\r\n        uint256 tokenAmount;\r\n\r\n        if (_tokenIndex == 0) {\r\n            uint256 bnbtousdt = _amount * usdtPrice;\r\n            tokenAmount = (bnbtousdt * tokenPrice * decimal) / (1 ether) / 1e8;\r\n        } else {\r\n            tokenAmount = (_amount * tokenPrice * decimal) / (1 ether);\r\n        }\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    function withdrawEther(uint256 amount) external onlyOwner {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Insufficient balance in the contract\"\r\n        );\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(tokenAddress != address(0), \"Token address cannot be zero\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transfer(owner, amount);\r\n    }\r\n\r\n    function getTotalSoldTokens() external view returns (uint256) {\r\n        uint256 totalTokensSold = 0;\r\n        for (uint256 i = 0; i < tokenList.length; i++) {\r\n            totalTokensSold += tokenList[i].totalSold;\r\n        }\r\n        return totalTokensSold;\r\n    }\r\n\r\n    function setPresalePeriod(\r\n        uint256 _newStartTime,\r\n        uint256 _newEndTime\r\n    ) external onlyOwner {\r\n        require(\r\n            _newStartTime > block.timestamp,\r\n            \"Start time must be in the future\"\r\n        );\r\n        require(\r\n            _newEndTime > block.timestamp,\r\n            \"End time must be in the future\"\r\n        );\r\n        require(\r\n            _newEndTime > _newStartTime,\r\n            \"End time must be after the start time\"\r\n        );\r\n\r\n        startTime = _newStartTime;\r\n        endTime = _newEndTime;\r\n    }\r\n\r\n    function updatePriceFeed(address _newPriceFeedAddress) external onlyOwner {\r\n        priceFeed = AggregatorV3Interface(_newPriceFeedAddress);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MTW\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSoldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"setMTWAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"setPresalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaisedBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaisedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PresaleMTW", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000065424bd0000000000000000000000000000000000000000000000000000000006724d0d0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6fe34e7875e79970737fba224a032fad39063f43e1e850d76b509fc84b2dabbd"}