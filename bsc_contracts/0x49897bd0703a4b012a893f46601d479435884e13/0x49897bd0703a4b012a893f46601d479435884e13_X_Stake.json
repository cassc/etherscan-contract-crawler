{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-08-07\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function limitSupply() external view returns (uint256);\r\n\r\n    function availableSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n\r\ncontract X_Stake {\r\n\r\n\tIERC20 private immutable usdt;\r\n\tIERC721 private immutable nftPass;\r\n\taddress private immutable devAddress;\r\n\t\r\n\tuint private constant PRECISION = 1000;\r\n\tuint private constant REF = 50; //5% ref level 1\r\n\tuint private constant FEE = 20; //2% tax\r\n\tuint private constant DAILY = 10; //1% Daily\r\n\tuint private constant NFTBONUS = 10; //disregard\r\n\tuint private constant MINIMUM = 1 ether; //1 X token minimum\r\n    uint private constant COOLDOWN = 1 days;\r\n\t\r\n\tmapping(address => uint) private deposits;\r\n\tmapping(address => uint) private claimCheckpoint;\r\n\tmapping(address => uint) private checkpoint;\r\n\tmapping(address => uint) private claimable;\r\n\t\r\n\tmapping(address => address) private referrals;\r\n\t\r\n\tuint private constant launch = 1691333146;\r\n\t\r\n\tuint private totalDeposits = 0;\r\n\tuint private totalUsers = 0;\r\n\t\r\n\tevent Deposit(address indexed user, uint amount);\r\n\t\r\n\tconstructor(address nftPassAddress, address usdtTokenAddress) {\r\n\t\tusdt = IERC20(usdtTokenAddress);\r\n\t\tnftPass = IERC721(nftPassAddress);\r\n\t\tdevAddress = msg.sender;\r\n\t}\r\n\t\r\n\tmodifier contractOpen() {\r\n\t\trequire(block.timestamp > launch, \"contract not yet open !\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\t\r\n\tfunction deposit(uint amount, address ref) public contractOpen {\r\n\t\trequire(amount >= MINIMUM, \"minimum deposit is 10 X !\");\r\n\t\t\r\n\t\tif(!isActive()) {\r\n\t\t\tif(isActive(ref)) {\r\n\t\t\t\treferrals[msg.sender] = ref;\r\n\t\t\t} else {\r\n\t\t\t\treferrals[msg.sender] = devAddress;\r\n\t\t\t}\r\n\t\t\ttotalUsers = totalUsers + 1;\r\n\t\t}\r\n\t\t\r\n\t\tuint fee = amount * FEE / PRECISION;\r\n\t\tamount = amount - fee;\r\n\t\t\r\n\t\tusdt.transferFrom(msg.sender, devAddress, fee);\r\n\t\tusdt.transferFrom(msg.sender, address(this), amount);\r\n\t\t\r\n\t\tuint bonus = amount * REF / PRECISION;\r\n\t\tclaimable[referrals[msg.sender]] = claimable[referrals[msg.sender]] + bonus;\r\n\t\t\r\n\t\tclaimable[msg.sender] = getUserClaimable();\r\n\t\tcheckpoint[msg.sender] = block.timestamp;\r\n\t\t\r\n\t\tdeposits[msg.sender] = deposits[msg.sender] + amount;\r\n\t\ttotalDeposits = totalDeposits + amount;\r\n\t\temit Deposit(msg.sender, amount);\r\n\t}\r\n\t\r\n\tfunction compound() public contractOpen {\r\n\t\trequire(isActive(), \"user is not active !\");\r\n\t\t\r\n\t\tuint toCompound = getUserClaimable();\r\n\t\t\r\n\t\tclaimable[msg.sender] = 0;\r\n\t\tcheckpoint[msg.sender] = block.timestamp;\r\n\t\tdeposits[msg.sender] = deposits[msg.sender] + toCompound;\r\n\t}\r\n\t\r\n\tfunction claim() public contractOpen {\r\n\t\trequire(isActive(), \"user is not active !\");\r\n\t\trequire(block.timestamp >= claimCheckpoint[msg.sender] + COOLDOWN, \"24 hour cooldown not yet achieved !\");\r\n\t\t\r\n\t\tuint toClaim = getUserClaimable();\r\n\t\t\r\n\t\tclaimable[msg.sender] = 0;\r\n\t\tcheckpoint[msg.sender] = block.timestamp;\r\n\t\tclaimCheckpoint[msg.sender] = block.timestamp;\r\n\t\t\r\n\t\tif(usdt.balanceOf(address(this)) < toClaim) {\r\n\t\t\tusdt.transfer(msg.sender, usdt.balanceOf(address(this)));\r\n\t\t} else {\r\n\t\t\tusdt.transfer(msg.sender, toClaim);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction getUserClaimable() public view returns(uint available) {\r\n\t\tif(isActive()) {\r\n\t\t\tuint passed = block.timestamp - checkpoint[msg.sender];\r\n\t\t\tuint daily = hasPass() ? DAILY + NFTBONUS : DAILY;\r\n\t\t\t\r\n\t\t\tavailable = deposits[msg.sender] * daily * passed / 1 days / PRECISION;\r\n\t\t\tavailable = claimable[msg.sender] + available;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getUserInfo() public view returns(uint totalDeposit, uint lastClaim) {\r\n\t\ttotalDeposit = deposits[msg.sender];\r\n\t\tlastClaim = claimCheckpoint[msg.sender];\r\n\t}\r\n\t\r\n\tfunction getContractInfo() public view returns(uint contractBalance, uint totalUser, uint totalDeposit) {\r\n\t\tcontractBalance = usdt.balanceOf(address(this));\r\n\t\ttotalUser = totalUsers;\r\n\t\ttotalDeposit = totalDeposits;\r\n\t}\r\n\t\r\n\t\r\n\r\n\tfunction hasPass() private view returns(bool) {\r\n        return nftPass.balanceOf(msg.sender) > 0 ? true : false;\r\n    }\r\n\t\r\n\tfunction isActive() private view returns(bool) {\r\n\t\treturn isActive(msg.sender);\r\n\t}\r\n\t\r\n\tfunction isActive(address addr) private view returns(bool) {\r\n\t\treturn deposits[addr] > 0 ? true : false;\r\n\t}\r\n\t\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftPassAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "X_Stake", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001ef3a11fbf098e09b2079ccf1d9476732dfad853000000000000000000000000c258346f4b7d9761b63f7822c586dd0a12cfc489", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ca9d07abaa0ba1309a69f95b33cd7ee0cadf5cddd2b3ecd92181d74b11129ec"}