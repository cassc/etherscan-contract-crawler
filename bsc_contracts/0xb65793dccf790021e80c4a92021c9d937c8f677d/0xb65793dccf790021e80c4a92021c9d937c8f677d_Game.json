{"SourceCode": "// \u6bcf\u670814,28\u53f7\u901a\u8fc7\u9884\u8a00\u673a\u4ea7\u751f\u968f\u673a\u6570\u8fdb\u884c\u5f00\u5956.\r\n// \u968f\u673a\u79cd\u5b50\u6bcf\u6b21\u5f00\u5956\u53ea\u4f1a\u8bf7\u6c42\u4e00\u6b21,\u675c\u7edd\u5f00\u5956\u505a\u5047\r\n// \u4e2d\u5956\u7684\u53f7\u7801\u4f1a\u5199\u5165\u5230\u5408\u7ea6\u91cc. \u901a\u8fc7\u67e5\u8be2\u5f00\u5956\u671f\u6570\u83b7\u5f97\u5f00\u5956\u53f7\u7801,\u5956\u52b1\u4f1a\u53d1\u653e\u5230plant\u5408\u7ea6\u91cc\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\n// ERC20\u4ee3\u5e01\u63a5\u53e3\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n    /**\r\n     * @notice Get configuration relevant for making requests\r\n     * @return minimumRequestConfirmations global min for request confirmations\r\n     * @return maxGasLimit global max for request gas limit\r\n     * @return s_provingKeyHashes list of registered key hashes\r\n     */\r\n    function getRequestConfig()\r\n        external\r\n        view\r\n        returns (uint16, uint32, bytes32[] memory);\r\n\r\n    /**\r\n     * @notice Request a set of random words.\r\n     * @param keyHash - Corresponds to a particular oracle job which uses\r\n     * that key for generating the VRF proof. Different keyHash's have different gas price\r\n     * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n     * @param subId  - The ID of the VRF subscription. Must be funded\r\n     * with the minimum subscription balance required for the selected keyHash.\r\n     * @param minimumRequestConfirmations - How many blocks you'd like the\r\n     * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n     * for why you may want to request more. The acceptable range is\r\n     * [minimumRequestBlockConfirmations, 200].\r\n     * @param callbackGasLimit - How much gas you'd like to receive in your\r\n     * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n     * may be slightly less than this amount because of gas used calling the function\r\n     * (argument decoding etc.), so you may need to request slightly more than you expect\r\n     * to have inside fulfillRandomWords. The acceptable range is\r\n     * [0, maxGasLimit]\r\n     * @param numWords - The number of uint256 random values you'd like to receive\r\n     * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n     * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n     * @return requestId - A unique identifier of the request. Can be used to match\r\n     * a request to a response in fulfillRandomWords.\r\n     */\r\n    function requestRandomWords(\r\n        bytes32 keyHash,\r\n        uint64 subId,\r\n        uint16 minimumRequestConfirmations,\r\n        uint32 callbackGasLimit,\r\n        uint32 numWords\r\n    ) external returns (uint256 requestId);\r\n\r\n    /**\r\n     * @notice Create a VRF subscription.\r\n     * @return subId - A unique subscription id.\r\n     * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n     * @dev Note to fund the subscription, use transferAndCall. For example\r\n     * @dev  LINKTOKEN.transferAndCall(\r\n     * @dev    address(COORDINATOR),\r\n     * @dev    amount,\r\n     * @dev    abi.encode(subId));\r\n     */\r\n    function createSubscription() external returns (uint64 subId);\r\n\r\n    /**\r\n     * @notice Get a VRF subscription.\r\n     * @param subId - ID of the subscription\r\n     * @return balance - LINK balance of the subscription in juels.\r\n     * @return reqCount - number of requests for this subscription, determines fee tier.\r\n     * @return owner - owner of the subscription.\r\n     * @return consumers - list of consumer address which are able to use this subscription.\r\n     */\r\n    function getSubscription(\r\n        uint64 subId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint96 balance,\r\n            uint64 reqCount,\r\n            address owner,\r\n            address[] memory consumers\r\n        );\r\n\r\n    /**\r\n     * @notice Request subscription owner transfer.\r\n     * @param subId - ID of the subscription\r\n     * @param newOwner - proposed new owner of the subscription\r\n     */\r\n    function requestSubscriptionOwnerTransfer(\r\n        uint64 subId,\r\n        address newOwner\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Request subscription owner transfer.\r\n     * @param subId - ID of the subscription\r\n     * @dev will revert if original owner of subId has\r\n     * not requested that msg.sender become the new owner.\r\n     */\r\n    function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n    /**\r\n     * @notice Add a consumer to a VRF subscription.\r\n     * @param subId - ID of the subscription\r\n     * @param consumer - New consumer which can use the subscription\r\n     */\r\n    function addConsumer(uint64 subId, address consumer) external;\r\n\r\n    /**\r\n     * @notice Remove a consumer from a VRF subscription.\r\n     * @param subId - ID of the subscription\r\n     * @param consumer - Consumer to remove from the subscription\r\n     */\r\n    function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n    /**\r\n     * @notice Cancel a subscription\r\n     * @param subId - ID of the subscription\r\n     * @param to - Where to send the remaining LINK to\r\n     */\r\n    function cancelSubscription(uint64 subId, address to) external;\r\n\r\n    /*\r\n     * @notice Check to see if there exists a request commitment consumers\r\n     * for all consumers and keyhashes for a given sub.\r\n     * @param subId - ID of the subscription\r\n     * @return true if there exists at least one unfulfilled request for the subscription, false\r\n     * otherwise.\r\n     */\r\n    function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n    error OnlyCoordinatorCanFulfill(address have, address want);\r\n    address private immutable vrfCoordinator;\r\n\r\n    /**\r\n     * @param _vrfCoordinator address of VRFCoordinator contract\r\n     */\r\n    constructor(address _vrfCoordinator) {\r\n        vrfCoordinator = _vrfCoordinator;\r\n    }\r\n\r\n    /**\r\n     * @notice fulfillRandomness handles the VRF response. Your contract must\r\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n     * @notice principles to keep in mind when implementing your fulfillRandomness\r\n     * @notice method.\r\n     *\r\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n     * @dev signature, and will call it once it has verified the proof\r\n     * @dev associated with the randomness. (It is triggered via a call to\r\n     * @dev rawFulfillRandomness, below.)\r\n     *\r\n     * @param requestId The Id initially returned by requestRandomness\r\n     * @param randomWords the VRF output expanded to the requested number of words\r\n     */\r\n    function fulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) internal virtual;\r\n\r\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n    // the origin of the call\r\n    function rawFulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) external {\r\n        if (msg.sender != vrfCoordinator) {\r\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n        }\r\n        fulfillRandomWords(requestId, randomWords);\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n    address internal _operator;\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        _operator = msgSender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function operator() public view returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(_operator == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOperator(address newOwner) public virtual onlyOwner {\r\n        _operator = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * \u4e3b\u5408\u7ea6\r\n */\r\ncontract Game is VRFConsumerBaseV2, Ownable {\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    struct RequestStatus {\r\n        bool fulfilled; // whether the request has been successfully fulfilled\r\n        bool exists; // whether a requestId exists\r\n        // \u968f\u673a\u79cd\u5b50\r\n        uint256[] randomWords;\r\n        // \u5f00\u5956\u4eba\u6570\r\n        uint256 population;\r\n    }\r\n    mapping(uint256 => RequestStatus)\r\n        public s_requests; /* requestId --> requestStatus */\r\n\r\n    RequestStatus[] public RequestStatusList;\r\n\r\n    // Your subscription ID.\r\n    uint64 s_subscriptionId;\r\n    uint256 public lastRequestId;\r\n\r\n    // The gas lane to use, which specifies the maximum gas price to bump to.\r\n    // For a list of available gas lanes on each network,\r\n    // see https://docs.chain.link/docs/vrf/v2/subscription/supported-networks/#configurations\r\n    bytes32 public keyHash =\r\n        0x114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04;\r\n\r\n    // Depends on the number of requested values that you want sent to the\r\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\r\n    // so 100,000 is a safe default for this example contract. Test and adjust\r\n    // this limit based on the network that you select, the size of the request,\r\n    // and the processing of the callback request in the fulfillRandomWords()\r\n    // function.\r\n    uint32 public callbackGasLimit = 200000;\r\n\r\n    // The default is 3, but you can set this higher.\r\n    uint16 public requestConfirmations = 3;\r\n\r\n    // For this example, retrieve 2 random values in one request.\r\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\r\n    uint32 public numWords = 2;\r\n\r\n    // plant\u63a5\u53e3\r\n    IERC20 plant;\r\n\r\n    // \u521d\u59cb\u5316\u5408\u7ea6\r\n    constructor(\r\n        uint64 subscriptionId\r\n    ) VRFConsumerBaseV2(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE) {\r\n        COORDINATOR = VRFCoordinatorV2Interface(\r\n            0xc587d9053cd1118f25F645F9E08BB98c9712A4EE\r\n        );\r\n        // link\u5b9e\u4f8bID\r\n        s_subscriptionId = subscriptionId;\r\n    }\r\n\r\n    // \u6267\u884clink\r\n    function requestRandomWords(\r\n        // \u5f00\u5956\u4eba\u6570\r\n        uint256 _population\r\n    ) external onlyOwner {\r\n        uint256 requestId = COORDINATOR.requestRandomWords(\r\n            keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            numWords\r\n        );\r\n        s_requests[requestId] = RequestStatus({\r\n            randomWords: new uint256[](0),\r\n            exists: true,\r\n            fulfilled: false,\r\n            population: _population\r\n        });\r\n        lastRequestId = requestId;\r\n    }\r\n\r\n    // link\u56de\u8c03\r\n    function fulfillRandomWords(\r\n        uint256 _requestId,\r\n        uint256[] memory _randomWords\r\n    ) internal override {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        s_requests[_requestId].fulfilled = true;\r\n        s_requests[_requestId].randomWords = _randomWords;\r\n        RequestStatusList.push(s_requests[_requestId]);\r\n    }\r\n\r\n    function getRequestStatus(\r\n        uint256 _requestId\r\n    ) external view returns (bool fulfilled, uint256[] memory randomWords) {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        RequestStatus memory request = s_requests[_requestId];\r\n        return (request.fulfilled, request.randomWords);\r\n    }\r\n\r\n    function getRequestStatusList(\r\n        uint256 _periods\r\n    ) external view returns (uint256, uint256[] memory) {\r\n        RequestStatus memory lotteryInfo = RequestStatusList[_periods];\r\n        return (lotteryInfo.population, lotteryInfo.randomWords);\r\n    }\r\n\r\n    // \u5f00\u5956,\u4f20\u5165\u671f\u6570\u548c\u5956\u7968\u6570\u91cf,\u9a8c\u8bc1\u5f00\u5956\u4fe1\u606f\r\n    function lottery(\r\n        // \u671f\u6570\r\n        uint256 _periods,\r\n        // \u7528\u6237\u5730\u5740\r\n        address[] memory _players\r\n    ) public view returns (address[] memory) {\r\n        uint256 maxPeriods = RequestStatusList.length;\r\n        require(_periods < maxPeriods, \"periods error\");\r\n        RequestStatus memory lotteryInfo = RequestStatusList[_periods];\r\n        require(lotteryInfo.fulfilled, \"is not fulfilled\");\r\n        uint256[] memory randomWords = lotteryInfo.randomWords;\r\n        uint256 n = _players.length;\r\n        uint256 numShuffles = randomWords.length;\r\n        for (uint256 r = 0; r < numShuffles; r++) {\r\n            for (uint256 i = 0; i < n; i++) {\r\n                uint256 j = (\r\n                    uint256(keccak256(abi.encodePacked(randomWords[r], i)))\r\n                ) % (i + 1);\r\n                address temp = _players[i];\r\n                _players[i] = _players[j];\r\n                _players[j] = temp;\r\n            }\r\n        }\r\n\r\n        address[] memory uniquePlayers = getWinners(\r\n            _players,\r\n            lotteryInfo.population\r\n        );\r\n        return uniquePlayers;\r\n    }\r\n\r\n    // \u83b7\u53d6\u5f00\u5956\u73a9\u5bb6,\u56e0\u4e3aplayers\u5df2\u7ecf\u88ab\u968f\u673a,\u6240\u4ee5\u524d\u9762\u7684\u5c31\u662f\u4e2d\u5956\u73a9\u5bb6\r\n    function getWinners(\r\n        address[] memory _players,\r\n        uint256 _population\r\n    ) public pure returns (address[] memory) {\r\n        address[] memory uniquePlayers = new address[](_population);\r\n        uint256 uniqueCount = 0;\r\n        uint256 currentIndex = 0;\r\n\r\n        while (uniqueCount < _population && currentIndex < _players.length) {\r\n            address player = _players[currentIndex];\r\n            bool isDuplicate = false;\r\n\r\n            // \u68c0\u67e5\u5f53\u524d\u73a9\u5bb6\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u4e8e uniquePlayers \u6570\u7ec4\u4e2d\r\n            for (uint256 i = 0; i < uniqueCount; i++) {\r\n                if (uniquePlayers[i] == player) {\r\n                    isDuplicate = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!isDuplicate) {\r\n                uniquePlayers[uniqueCount] = player;\r\n                uniqueCount++;\r\n            }\r\n\r\n            currentIndex++;\r\n        }\r\n\r\n        return uniquePlayers;\r\n    }\r\n\r\n    // \u8bbe\u7f6echainlink\u8bf7\u6c42\u914d\u7f6e\r\n    function setChainConfig(\r\n        bytes32 _keyHash,\r\n        uint32 _callbackGasLimit,\r\n        uint32 _numWords,\r\n        uint16 _requestConfirmations\r\n    ) external onlyOwner {\r\n        keyHash = _keyHash;\r\n        callbackGasLimit = _callbackGasLimit;\r\n        numWords = _numWords;\r\n        requestConfirmations = _requestConfirmations;\r\n    }\r\n\r\n    /**\r\n     * \u5c06\u79cd\u5b50\u751f\u6210hash\u503c\r\n     * \u53c2\u6570: \u7528\u6237\u7684\u968f\u673a\u79cd\u5b50\r\n     * \u8fd4\u56de\u503c: \u79cd\u5b50\u54c8\u5e0c\u540e\u7684\u503c\r\n     */\r\n    function seedToHash(string memory _seeds) public pure returns (uint256) {\r\n        bytes32 hash = bytes32(0);\r\n        hash = keccak256(abi.encodePacked(hash, _seeds));\r\n        return uint256(hash);\r\n    }\r\n\r\n    /**\r\n     * \u6d17\u724c\u7b97\u6cd5\r\n     * \u53c2\u6570: \u7528\u6237\u968f\u673a\u79cd\u5b50\r\n     * \u8fd4\u56de\u503c: \u968f\u673a\u7684\u6570\u5b57\u7684\u7ec4\u5408\r\n     * ====================\r\n     * keccak256 \u54c8\u5e0c\u957f\u5ea6 2^256 - 1 == 1.1579 x 10^77 \u79cd\u53ef\u80fd\r\n     * \u6240\u4ee5\u7406\u8bba\u4e0a,\u6240\u6709\u724c\u5c40\u80fd\u4fdd\u8bc1\u8db3\u591f\u968f\u673a\r\n     * \u5408\u7ea6\u6e90\u7801\u4e0d\u53ef\u66f4\u6539!, \u7528\u6237\u53ef\u4ee5\u81ea\u884c\u6821\u9a8c\r\n     * ====================\r\n     * \u8fd4\u56de \u968f\u673a\u7ec4\u5408\r\n     * 1\u662f\u65b9\u57573, 2\u662f\u7ea2\u68433 ... 53\u662f\u5c0f\u738b, 54\u662f\u5927\u738b\r\n     * \u4e0b\u9762\u987a\u5e8f\u4ece1\u5f00\u59cb\u6570\u523054\r\n     * ====================\r\n     * \u6570\u5b57 1-13  \u4e3a\u65b9\u5757\r\n     * \u6570\u5b57 14-26 \u4e3a\u6885\u82b1\r\n     * \u6570\u5b57 27-39 \u4e3a\u7ea2\u6843\r\n     * \u6570\u5b57 40-52 \u4e3a\u9ed1\u6843\r\n     * \u6570\u5b57 53 \u4e3a\u5c0f\u738b\uff0c\u6570\u5b5754\u4e3a\u5927\u738b\r\n     */\r\n    function shuffle(\r\n        string[] memory _seeds,\r\n        uint256[] memory _cards\r\n    ) public pure returns (uint256[] memory) {\r\n        uint256 cardsleng = _cards.length;\r\n        uint256 seedsLeng = _seeds.length;\r\n        uint256 seedLeng;\r\n\r\n        // \u5c06\u7eb8\u724c\u7528\u54c8\u5e0c\u503c\u6253\u4e71\u987a\u5e8f\r\n        for (uint256 hl = 0; hl < seedsLeng; hl++) {\r\n            bytes memory bytesStr = bytes(_seeds[hl]);\r\n            seedLeng = bytesStr.length;\r\n            for (uint256 sl = 0; sl < seedLeng; sl++) {\r\n                // \u5c06\u79cd\u5b50\u54c8\u5e0c\u8fd0\u7b97\r\n                uint256 hash = seedToHash(_seeds[hl]);\r\n                for (uint256 i = 0; i < cardsleng; i++) {\r\n                    uint256 j = hash % (i + 1);\r\n                    (_cards[i], _cards[j]) = (_cards[j], _cards[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // \u8fd4\u56de\u6253\u4e71\u540e\u7684\u7ec4\u5408\r\n        return _cards;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RequestStatusList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"population\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"}],\"name\":\"getRequestStatusList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_population\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periods\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"}],\"name\":\"lottery\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_population\",\"type\":\"uint256\"}],\"name\":\"requestRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"population\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_seeds\",\"type\":\"string\"}],\"name\":\"seedToHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_requestConfirmations\",\"type\":\"uint16\"}],\"name\":\"setChainConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_seeds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cards\",\"type\":\"uint256[]\"}],\"name\":\"shuffle\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Game", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000316", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://87a6249c8b5c0d1f7447c509046553617832214ca6608b4a98db223ce2479f0e"}