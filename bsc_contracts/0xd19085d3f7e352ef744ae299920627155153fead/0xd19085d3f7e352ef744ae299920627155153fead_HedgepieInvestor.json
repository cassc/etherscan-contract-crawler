{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/HedgepieInvestor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../libraries/HedgepieLibraryBsc.sol\\\";\\nimport \\\"../interfaces/IYBNFT.sol\\\";\\nimport \\\"../interfaces/IAdapter.sol\\\";\\nimport \\\"../interfaces/IHedgepieAuthority.sol\\\";\\n\\nimport \\\"./HedgepieAccessControlled.sol\\\";\\n\\ncontract HedgepieInvestor is ReentrancyGuard, HedgepieAccessControlled {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 userShare; // user share amount\\n        uint256 amount; // user deposit amount\\n        uint256 rewardDebt; // user reward amount\\n    }\\n\\n    struct TokenInfo {\\n        uint256 totalStaked; // total staked in usd\\n        uint256 accRewardShare; // reward share per account\\n    }\\n\\n    // token id => token info\\n    mapping(uint256 => TokenInfo) public tokenInfos;\\n\\n    // address => user info\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfos;\\n\\n    // treasury address\\n    address public treasury;\\n\\n    /// @dev events\\n    event Deposited(address indexed user, address nft, uint256 nftId, uint256 amount);\\n    event Withdrawn(address indexed user, address nft, uint256 nftId, uint256 amount);\\n    event Claimed(address indexed user, uint256 amount);\\n    event TreasuryUpdated(address treasury);\\n\\n    modifier onlyValidNFT(uint256 _tokenId) {\\n        require(IYBNFT(authority.hYBNFT()).exists(_tokenId), \\\"Error: nft tokenId is invalid\\\");\\n        _;\\n    }\\n\\n    modifier onlyYBNft() {\\n        require(msg.sender == authority.hYBNFT(), \\\"Error: YBNFT address mismatch\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Construct\\n     * @param _treasury  address of treasury\\n     * @param _hedgepieAuthority HedgepieAuthority address\\n     */\\n    constructor(\\n        address _treasury,\\n        address _hedgepieAuthority\\n    ) HedgepieAccessControlled(IHedgepieAuthority(_hedgepieAuthority)) {\\n        require(_treasury != address(0), \\\"Error: treasury address missing\\\");\\n\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Deposit with BNB\\n     * @param _tokenId  YBNft token id\\n     */\\n    function deposit(uint256 _tokenId) external payable whenNotPaused nonReentrant onlyValidNFT(_tokenId) {\\n        require(msg.value != 0, \\\"Error: Insufficient BNB\\\");\\n        UserInfo storage userInfo = userInfos[_tokenId][msg.sender];\\n        TokenInfo storage tokenInfo = tokenInfos[_tokenId];\\n\\n        // 1. claim reward from adapters\\n        _calcReward(_tokenId);\\n\\n        // 2. deposit to adapters\\n        IYBNFT.AdapterParam[] memory adapterInfos = IYBNFT(authority.hYBNFT()).getTokenAdapterParams(_tokenId);\\n\\n        for (uint8 i; i < adapterInfos.length; i++) {\\n            IYBNFT.AdapterParam memory adapter = adapterInfos[i];\\n\\n            uint256 amountIn = (msg.value * adapter.allocation) / 1e4;\\n            if (amountIn != 0) IAdapter(adapter.addr).deposit{value: amountIn}(_tokenId);\\n        }\\n\\n        // 3. update user & token info saved in investor\\n        uint256 investedUSDT = (msg.value * HedgepieLibraryBsc.getBNBPrice()) / 1e18;\\n        userInfo.amount += investedUSDT;\\n        tokenInfo.totalStaked += investedUSDT;\\n\\n        // 4. update token info in YBNFT\\n        IYBNFT(authority.hYBNFT()).updateInfo(IYBNFT.UpdateInfo(_tokenId, investedUSDT, msg.sender, true));\\n\\n        // 5. emit events\\n        emit Deposited(msg.sender, authority.hYBNFT(), _tokenId, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraw by BNB\\n     * @param _tokenId  YBNft token id\\n     */\\n    /// #if_succeeds {:msg \\\"Withdraw failed\\\"}  userInfos[_tokenId][msg.sender].amount == 0 && tokenInfos[_tokenId].totalStaked == old(tokenInfos[_tokenId]).totalStaked - old(userInfos[_tokenId][msg.sender]).amount;\\n    function withdraw(uint256 _tokenId) external nonReentrant onlyValidNFT(_tokenId) whenNotPaused {\\n        UserInfo memory userInfo = userInfos[_tokenId][msg.sender];\\n        TokenInfo storage tokenInfo = tokenInfos[_tokenId];\\n\\n        // 1. claim reward from adapters\\n        _calcReward(_tokenId);\\n\\n        // 2. withdraw funds from adapters\\n        IYBNFT.AdapterParam[] memory adapterInfos = IYBNFT(authority.hYBNFT()).getTokenAdapterParams(_tokenId);\\n\\n        uint256 amountOut;\\n        uint256 beforeAmt = address(this).balance;\\n        for (uint8 i; i < adapterInfos.length; i++) {\\n            uint256 tAmount = IAdapter(adapterInfos[i].addr).getUserAmount(_tokenId);\\n            amountOut += IAdapter(adapterInfos[i].addr).withdraw(\\n                _tokenId,\\n                (tAmount * userInfo.amount) / tokenInfo.totalStaked\\n            );\\n        }\\n        require(amountOut == address(this).balance - beforeAmt, \\\"Failed to withdraw\\\");\\n\\n        // 3. withdraw reward from investor\\n        _withdrawReward(_tokenId);\\n\\n        // 4. update token info\\n        tokenInfo.totalStaked -= userInfo.amount;\\n\\n        // 5. update adapter info in YBNFT\\n        IYBNFT(authority.hYBNFT()).updateInfo(IYBNFT.UpdateInfo(_tokenId, userInfo.amount, msg.sender, false));\\n\\n        // 6. delete user info\\n        delete userInfos[_tokenId][msg.sender];\\n\\n        // 7. withdraw funds\\n        if (amountOut != 0) {\\n            (bool success, ) = payable(msg.sender).call{value: amountOut}(\\\"\\\");\\n            require(success, \\\"Failed to withdraw\\\");\\n\\n            // 8. emit events\\n            emit Withdrawn(msg.sender, authority.hYBNFT(), _tokenId, amountOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim\\n     * @param _tokenId  YBNft token id\\n     */\\n    /// #if_succeeds {:msg \\\"Claim failed\\\"}  userInfos[_tokenId][msg.sender].rewardDebt == 0;\\n    function claim(uint256 _tokenId) public nonReentrant whenNotPaused onlyValidNFT(_tokenId) {\\n        TokenInfo storage tokenInfo = tokenInfos[_tokenId];\\n\\n        // 1. claim reward\\n        IYBNFT.AdapterParam[] memory adapterInfos = IYBNFT(authority.hYBNFT()).getTokenAdapterParams(_tokenId);\\n\\n        uint256 pending = address(this).balance;\\n        for (uint8 i; i < adapterInfos.length; i++) IAdapter(adapterInfos[i].addr).claim(_tokenId);\\n        pending = address(this).balance - pending;\\n\\n        if (pending != 0) {\\n            // 2. update profit info in YBNFT\\n            IYBNFT(authority.hYBNFT()).updateProfitInfo(_tokenId, pending);\\n\\n            if (tokenInfo.totalStaked != 0) tokenInfo.accRewardShare += (pending * 1e12) / tokenInfo.totalStaked;\\n        }\\n\\n        // 3. withdraw reward from investor\\n        _withdrawReward(_tokenId);\\n    }\\n\\n    /**\\n     * @notice pendingReward\\n     * @param _tokenId  YBNft token id\\n     * @param _account  user address\\n     */\\n    function pendingReward(\\n        uint256 _tokenId,\\n        address _account\\n    ) public view returns (uint256 amountOut, uint256 withdrawable) {\\n        UserInfo memory userInfo = userInfos[_tokenId][_account];\\n        TokenInfo memory tokenInfo = tokenInfos[_tokenId];\\n\\n        if (!IYBNFT(authority.hYBNFT()).exists(_tokenId)) return (0, 0);\\n\\n        // 1. get pending info from adapters\\n        IYBNFT.AdapterParam[] memory adapterInfos = IYBNFT(authority.hYBNFT()).getTokenAdapterParams(_tokenId);\\n\\n        for (uint8 i; i < adapterInfos.length; i++) {\\n            (uint256 _amountOut, uint256 _withdrawable) = IAdapter(adapterInfos[i].addr).pendingReward(_tokenId);\\n            amountOut += _amountOut;\\n            withdrawable += _withdrawable;\\n        }\\n\\n        // 2. update accRewardShares\\n        uint256 updatedAccRewardShare1 = tokenInfo.accRewardShare;\\n        uint256 updatedAccRewardShare2 = tokenInfo.accRewardShare;\\n        if (tokenInfo.totalStaked != 0) {\\n            updatedAccRewardShare1 += (amountOut * 1e12) / tokenInfo.totalStaked;\\n            updatedAccRewardShare2 += (withdrawable * 1e12) / tokenInfo.totalStaked;\\n        }\\n\\n        return (\\n            (userInfo.amount * (updatedAccRewardShare1 - userInfo.userShare)) / 1e12 + userInfo.rewardDebt,\\n            (userInfo.amount * (updatedAccRewardShare2 - userInfo.userShare)) / 1e12 + userInfo.rewardDebt\\n        );\\n    }\\n\\n    /**\\n     * @notice Set treasury address\\n     * @param _treasury new treasury address\\n     */\\n    /// #if_succeeds {:msg \\\"setTreasury failed\\\"}  treasury == _treasury;\\n    function setTreasury(address _treasury) external onlyGovernor {\\n        require(_treasury != address(0), \\\"Error: Invalid NFT address\\\");\\n\\n        treasury = _treasury;\\n        emit TreasuryUpdated(treasury);\\n    }\\n\\n    /**\\n     * @notice Update funds for token id\\n     * @param _tokenId YBNFT token id\\n     */\\n    /// #if_succeeds {:msg \\\"updateFunds failed\\\"}  tokenInfos[_tokenId].totalStaked == old(tokenInfos[_tokenId]).totalStaked;\\n    function updateFunds(uint256 _tokenId) external whenNotPaused onlyYBNft {\\n        IYBNFT.AdapterParam[] memory adapterInfos = IYBNFT(authority.hYBNFT()).getTokenAdapterParams(_tokenId);\\n\\n        uint256 _amount = address(this).balance;\\n        for (uint8 i; i < adapterInfos.length; i++) {\\n            IYBNFT.AdapterParam memory adapter = adapterInfos[i];\\n            IAdapter(adapter.addr).removeFunds(_tokenId);\\n        }\\n        _amount = address(this).balance - _amount;\\n\\n        if (_amount == 0) return;\\n\\n        for (uint8 i; i < adapterInfos.length; i++) {\\n            IYBNFT.AdapterParam memory adapter = adapterInfos[i];\\n\\n            uint256 amountIn = (_amount * adapter.allocation) / 1e4;\\n            if (amountIn != 0) IAdapter(adapter.addr).updateFunds{value: amountIn}(_tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice internal function for calc reward\\n     * @param _tokenId YBNFT token id\\n     */\\n    /// #if_succeeds {:msg \\\"calcReward failed\\\"}  userInfos[_tokenId][msg.sender].userShare == tokenInfos[_tokenId].accRewardShare;\\n    function _calcReward(uint256 _tokenId) internal {\\n        UserInfo storage userInfo = userInfos[_tokenId][msg.sender];\\n        TokenInfo storage tokenInfo = tokenInfos[_tokenId];\\n\\n        // 1. claim reward from adapters\\n        uint256 pending = address(this).balance;\\n        _claim(_tokenId);\\n        pending = address(this).balance - pending;\\n\\n        if (pending != 0) {\\n            // 2. update profit info in YBNFT\\n            IYBNFT(authority.hYBNFT()).updateProfitInfo(_tokenId, pending);\\n\\n            // 3. update accRewardShare, rewardDebt values\\n            if (tokenInfo.totalStaked != 0) {\\n                tokenInfo.accRewardShare += (pending * 1e12) / tokenInfo.totalStaked;\\n\\n                if (userInfo.amount != 0) {\\n                    userInfo.rewardDebt += (userInfo.amount * (tokenInfo.accRewardShare - userInfo.userShare)) / 1e12;\\n                }\\n            }\\n        }\\n\\n        // 4. update userShare\\n        userInfo.userShare = tokenInfo.accRewardShare;\\n    }\\n\\n    /**\\n     * @notice internal function for withdraw reward\\n     * @param _tokenId YBNFT token id\\n     */\\n    /// #if_succeeds {:msg \\\"withdrawReward failed\\\"}  userInfos[_tokenId][msg.sender].rewardDebt == 0 && userInfos[_tokenId][msg.sender].userShare == tokenInfos[_tokenId].accRewardShare;\\n    function _withdrawReward(uint256 _tokenId) internal {\\n        UserInfo storage userInfo = userInfos[_tokenId][msg.sender];\\n        TokenInfo memory tokenInfo = tokenInfos[_tokenId];\\n\\n        // 1. calc reward amount stored in investor\\n        uint256 rewardAmt = (userInfo.amount * (tokenInfo.accRewardShare - userInfo.userShare)) /\\n            1e12 +\\n            userInfo.rewardDebt;\\n\\n        // 2. update userInfo\\n        userInfo.rewardDebt = 0;\\n        userInfo.userShare = tokenInfo.accRewardShare;\\n\\n        // 3. withdraw rewards\\n        if (rewardAmt != 0) {\\n            (bool success, ) = payable(msg.sender).call{value: rewardAmt}(\\\"\\\");\\n            require(success, \\\"Failed to withdraw reward\\\");\\n\\n            // 4. emit events\\n            emit Claimed(msg.sender, rewardAmt);\\n        }\\n    }\\n\\n    /**\\n     * @notice internal function for claim\\n     * @param _tokenId  YBNft token id\\n     */\\n    function _claim(uint256 _tokenId) internal {\\n        IYBNFT.AdapterParam[] memory adapterInfos = IYBNFT(authority.hYBNFT()).getTokenAdapterParams(_tokenId);\\n\\n        // claim rewards from adapters\\n        for (uint8 i; i < adapterInfos.length; i++) {\\n            IAdapter(adapterInfos[i].addr).claim(_tokenId);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/HedgepieLibraryBsc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IAdapter.sol\\\";\\nimport \\\"../interfaces/IPancakePair.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter.sol\\\";\\nimport \\\"../interfaces/IOffchainOracle.sol\\\";\\n\\nimport \\\"../base/BaseAdapter.sol\\\";\\n\\nlibrary HedgepieLibraryBsc {\\n    using SafeERC20 for IERC20;\\n\\n    // WBNB address\\n    address public constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    // USDT address\\n    address public constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\n\\n    // 1inch oracle address\\n    address public constant ORACLE = 0xfbD61B037C325b959c0F6A7e69D8f37770C2c550;\\n\\n    /**\\n     * @notice Swap tokens\\n     * @param _amountIn  amount of inputToken\\n     * @param _adapter  address of adapter\\n     * @param _outToken  address of targetToken\\n     * @param _router  address of swap router\\n     */\\n    function swapOnRouter(\\n        uint256 _amountIn,\\n        address _adapter,\\n        address _outToken,\\n        address _router\\n    ) public returns (uint256 amountOut) {\\n        address[] memory path = IPathFinder(IHedgepieAuthority(IAdapter(_adapter).authority()).pathFinder()).getPaths(\\n            _router,\\n            WBNB,\\n            _outToken\\n        );\\n        uint256 beforeBalance = IERC20(_outToken).balanceOf(address(this));\\n\\n        IPancakeRouter(_router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: _amountIn}(\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp + 2 hours\\n        );\\n\\n        uint256 afterBalance = IERC20(_outToken).balanceOf(address(this));\\n        amountOut = afterBalance - beforeBalance;\\n    }\\n\\n    /**\\n     * @notice Swap tokens to bnb\\n     * @param _amountIn  amount of swap token\\n     * @param _adapter  address of adapter\\n     * @param _inToken  address of swap token\\n     * @param _router  address of swap router\\n     */\\n    function swapForBnb(\\n        uint256 _amountIn,\\n        address _adapter,\\n        address _inToken,\\n        address _router\\n    ) public returns (uint256 amountOut) {\\n        if (_inToken == WBNB) {\\n            IWrap(WBNB).withdraw(_amountIn);\\n            amountOut = _amountIn;\\n        } else {\\n            address[] memory path = IPathFinder(IHedgepieAuthority(IAdapter(_adapter).authority()).pathFinder())\\n                .getPaths(_router, _inToken, WBNB);\\n            uint256 beforeBalance = address(this).balance;\\n\\n            IERC20(_inToken).safeApprove(_router, 0);\\n            IERC20(_inToken).safeApprove(_router, _amountIn);\\n\\n            IPancakeRouter(_router).swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                _amountIn,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp + 2 hours\\n            );\\n\\n            uint256 afterBalance = address(this).balance;\\n            amountOut = afterBalance - beforeBalance;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the reward amount of user from adapter\\n     * @param _tokenId  tokenID\\n     * @param _adapterAddr  address of adapter\\n     */\\n    function getMRewards(uint256 _tokenId, address _adapterAddr) public view returns (uint256 reward, uint256 reward1) {\\n        BaseAdapter.AdapterInfo memory adapterInfo = IAdapter(_adapterAddr).mAdapter();\\n        BaseAdapter.UserAdapterInfo memory userInfo = IAdapter(_adapterAddr).userAdapterInfos(_tokenId);\\n\\n        if (\\n            IAdapter(_adapterAddr).rewardToken1() != address(0) &&\\n            adapterInfo.totalStaked != 0 &&\\n            adapterInfo.accTokenPerShare1 != 0\\n        ) {\\n            reward =\\n                (userInfo.amount * (adapterInfo.accTokenPerShare1 - userInfo.userShare1)) /\\n                1e12 +\\n                userInfo.rewardDebt1;\\n        }\\n\\n        if (\\n            IAdapter(_adapterAddr).rewardToken2() != address(0) &&\\n            adapterInfo.totalStaked != 0 &&\\n            adapterInfo.accTokenPerShare2 != 0\\n        ) {\\n            reward1 =\\n                (userInfo.amount * (adapterInfo.accTokenPerShare2 - userInfo.userShare2)) /\\n                1e12 +\\n                userInfo.rewardDebt2;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get LP token\\n     * @param _adapter  AdapterInfo\\n     * @param _stakingToken  address of staking token\\n     * @param _amountIn  amount of BNB\\n     */\\n    function getLP(\\n        IYBNFT.AdapterParam memory _adapter,\\n        address _stakingToken,\\n        uint256 _amountIn\\n    ) public returns (uint256 amountOut) {\\n        address[2] memory tokens;\\n        tokens[0] = IPancakePair(_stakingToken).token0();\\n        tokens[1] = IPancakePair(_stakingToken).token1();\\n        address _router = IAdapter(_adapter.addr).router();\\n\\n        uint256[2] memory tokenAmount;\\n        unchecked {\\n            tokenAmount[0] = _amountIn / 2;\\n            tokenAmount[1] = _amountIn - tokenAmount[0];\\n        }\\n\\n        if (tokens[0] != WBNB) {\\n            tokenAmount[0] = swapOnRouter(tokenAmount[0], _adapter.addr, tokens[0], _router);\\n            IERC20(tokens[0]).safeApprove(_router, 0);\\n            IERC20(tokens[0]).safeApprove(_router, tokenAmount[0]);\\n        }\\n\\n        if (tokens[1] != WBNB) {\\n            tokenAmount[1] = swapOnRouter(tokenAmount[1], _adapter.addr, tokens[1], _router);\\n            IERC20(tokens[1]).safeApprove(_router, 0);\\n            IERC20(tokens[1]).safeApprove(_router, tokenAmount[1]);\\n        }\\n\\n        if (tokenAmount[0] != 0 && tokenAmount[1] != 0) {\\n            if (tokens[0] == WBNB || tokens[1] == WBNB) {\\n                (, , amountOut) = IPancakeRouter(_router).addLiquidityETH{\\n                    value: tokens[0] == WBNB ? tokenAmount[0] : tokenAmount[1]\\n                }(\\n                    tokens[0] == WBNB ? tokens[1] : tokens[0],\\n                    tokens[0] == WBNB ? tokenAmount[1] : tokenAmount[0],\\n                    0,\\n                    0,\\n                    address(this),\\n                    block.timestamp + 2 hours\\n                );\\n            } else {\\n                (, , amountOut) = IPancakeRouter(_router).addLiquidity(\\n                    tokens[0],\\n                    tokens[1],\\n                    tokenAmount[0],\\n                    tokenAmount[1],\\n                    0,\\n                    0,\\n                    address(this),\\n                    block.timestamp + 2 hours\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw LP token\\n     * @param _adapter  AdapterInfo\\n     * @param _stakingToken  address of staking token\\n     * @param _amountIn  amount of LP\\n     */\\n    function withdrawLP(\\n        IYBNFT.AdapterParam memory _adapter,\\n        address _stakingToken,\\n        uint256 _amountIn\\n    ) public returns (uint256 amountOut) {\\n        address[2] memory tokens;\\n        tokens[0] = IPancakePair(_stakingToken).token0();\\n        tokens[1] = IPancakePair(_stakingToken).token1();\\n\\n        address _router = IAdapter(_adapter.addr).router();\\n        address swapRouter = IAdapter(_adapter.addr).swapRouter();\\n\\n        IERC20(_stakingToken).safeApprove(_router, 0);\\n        IERC20(_stakingToken).safeApprove(_router, _amountIn);\\n\\n        if (tokens[0] == WBNB || tokens[1] == WBNB) {\\n            address tokenAddr = tokens[0] == WBNB ? tokens[1] : tokens[0];\\n            (uint256 amountToken, uint256 amountETH) = IPancakeRouter(_router).removeLiquidityETH(\\n                tokenAddr,\\n                _amountIn,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 2 hours\\n            );\\n\\n            amountOut = amountETH;\\n            amountOut += swapForBnb(amountToken, _adapter.addr, tokenAddr, swapRouter);\\n        } else {\\n            (uint256 amountA, uint256 amountB) = IPancakeRouter(_router).removeLiquidity(\\n                tokens[0],\\n                tokens[1],\\n                _amountIn,\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp + 2 hours\\n            );\\n\\n            amountOut += swapForBnb(amountA, _adapter.addr, tokens[0], swapRouter);\\n            amountOut += swapForBnb(amountB, _adapter.addr, tokens[1], swapRouter);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get BNB Price from 1inch oracle\\n     */\\n    function getBNBPrice() public view returns (uint256) {\\n        return IOffchainOracle(ORACLE).getRate(WBNB, USDT, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYBNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.4;\\n\\ninterface IYBNFT {\\n    struct AdapterParam {\\n        uint256 allocation;\\n        address addr;\\n    }\\n\\n    struct UpdateInfo {\\n        uint256 tokenId; // YBNFT tokenID\\n        uint256 value; // traded amount\\n        address account; // user address\\n        bool isDeposit; // deposit or withdraw\\n    }\\n\\n    function exists(uint256) external view returns (bool);\\n\\n    function getCurrentTokenId() external view returns (uint256);\\n\\n    function performanceFee(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Get adapter parameters\\n     * @param tokenId  YBNft token id\\n     */\\n    function getTokenAdapterParams(uint256 tokenId) external view returns (AdapterParam[] memory);\\n\\n    /**\\n     * @notice Mint nft\\n     * @param _adapterParams  parameters of adapters\\n     * @param _performanceFee  performance fee\\n     * @param _tokenURI  token URI\\n     */\\n    function mint(AdapterParam[] memory _adapterParams, uint256 _performanceFee, string memory _tokenURI) external;\\n\\n    /**\\n     * @notice Update profit info\\n     * @param _tokenId  YBNFT tokenID\\n     * @param _value  amount of profit\\n     */\\n    function updateProfitInfo(uint256 _tokenId, uint256 _value) external;\\n\\n    /**\\n     * @notice Update TVL, Profit, Participants info\\n     * @param param  update info param\\n     */\\n    function updateInfo(UpdateInfo memory param) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IWrap.sol\\\";\\nimport \\\"../base/BaseAdapter.sol\\\";\\n\\ninterface IAdapter {\\n    function stakingToken() external view returns (address);\\n\\n    function repayToken() external view returns (address);\\n\\n    function strategy() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n\\n    function rewardToken1() external view returns (address);\\n\\n    function rewardToken2() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function swapRouter() external view returns (address);\\n\\n    function authority() external view returns (address);\\n\\n    function userAdapterInfos(uint256 _tokenId) external view returns (BaseAdapter.UserAdapterInfo memory);\\n\\n    function mAdapter() external view returns (BaseAdapter.AdapterInfo memory);\\n\\n    /**\\n     * @notice deposit to strategy\\n     * @param _tokenId YBNFT token id\\n     */\\n    function deposit(uint256 _tokenId) external payable returns (uint256 amountOut);\\n\\n    /**\\n     * @notice withdraw from strategy\\n     * @param _tokenId YBNFT token id\\n     * @param _amount amount of staking tokens to withdraw\\n     */\\n    function withdraw(uint256 _tokenId, uint256 _amount) external payable returns (uint256 amountOut);\\n\\n    /**\\n     * @notice claim reward from strategy\\n     * @param _tokenId YBNFT token id\\n     */\\n    function claim(uint256 _tokenId) external payable returns (uint256 amountOut);\\n\\n    /**\\n     * @notice Get pending token reward\\n     * @param _tokenId YBNFT token id\\n     */\\n    function pendingReward(uint256 _tokenId) external view returns (uint256 amountOut, uint256 withdrawable);\\n\\n    /**\\n     * @notice Remove funds\\n     * @param _tokenId YBNFT token id\\n     */\\n    function removeFunds(uint256 _tokenId) external payable returns (uint256 amount);\\n\\n    /**\\n     * @notice Update funds\\n     * @param _tokenId YBNFT token id\\n     */\\n    function updateFunds(uint256 _tokenId) external payable returns (uint256 amount);\\n\\n    /**\\n     * @notice get user staked amount\\n     */\\n    function getUserAmount(uint256 _tokenId) external view returns (uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHedgepieAuthority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IHedgepieAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PathManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event AdapterManagerPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event PathManagerPulled(address indexed from, address indexed to);\\n    event AdapterManagerPulled(address indexed from, address indexed to);\\n\\n    event HInvestorUpdated(address indexed from, address indexed to);\\n    event HYBNFTUpdated(address indexed from, address indexed to);\\n    event HAdapterListUpdated(address indexed from, address indexed to);\\n    event PathFinderUpdated(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function pathManager() external view returns (address);\\n\\n    function adapterManager() external view returns (address);\\n\\n    function hInvestor() external view returns (address);\\n\\n    function hYBNFT() external view returns (address);\\n\\n    function hAdapterList() external view returns (address);\\n\\n    function pathFinder() external view returns (address);\\n\\n    function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/base/HedgepieAccessControlled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/IHedgepieAuthority.sol\\\";\\n\\nabstract contract HedgepieAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IHedgepieAuthority indexed authority);\\n\\n    // unauthorized error message\\n    string private _unauthorized = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    // paused error message\\n    string private _paused = \\\"PAUSED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IHedgepieAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n    /**\\n     * @notice Constructor\\n     * @param _authority address of authority\\n     */\\n    constructor(IHedgepieAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier whenNotPaused() {\\n        require(!authority.paused(), _paused);\\n        _;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), _unauthorized);\\n        _;\\n    }\\n\\n    modifier onlyPathManager() {\\n        require(msg.sender == authority.pathManager(), _unauthorized);\\n        _;\\n    }\\n\\n    modifier onlyAdapterManager() {\\n        require(msg.sender == authority.adapterManager(), _unauthorized);\\n        _;\\n    }\\n\\n    modifier onlyInvestor() {\\n        require(msg.sender == authority.hInvestor(), _unauthorized);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n    /**\\n     * @notice Set new authority\\n     * @param _newAuthority address of new authority\\n     */\\n    /// #if_succeeds {:msg \\\"setAuthority failed\\\"}  authority == _newAuthority;\\n    function setAuthority(IHedgepieAuthority _newAuthority) external onlyGovernor {\\n        require(address(_newAuthority) != address(0), \\\"Invalid adddress\\\");\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IPancakePair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function fee() external view returns (uint24);\\n\\n    function getReserves() external view returns (uint112, uint112, uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IPancakeRouter {\\n    function getAmountsIn(uint256 amountOut, address[] memory path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n\\n    function factory() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOffchainOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IOffchainOracle {\\n    function getRate(address srcToken, address dstToken, bool) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/IYBNFT.sol\\\";\\nimport \\\"../interfaces/IPathFinder.sol\\\";\\nimport \\\"../interfaces/IHedgepieInvestor.sol\\\";\\nimport \\\"../interfaces/IHedgepieAuthority.sol\\\";\\n\\nimport \\\"./HedgepieAccessControlled.sol\\\";\\n\\nabstract contract BaseAdapter is HedgepieAccessControlled {\\n    struct UserAdapterInfo {\\n        uint256 amount; // Staking token amount\\n        uint256 userShare1; // First rewardTokens' share\\n        uint256 userShare2; // Second rewardTokens' share\\n        uint256 rewardDebt1; // Reward Debt for first reward token\\n        uint256 rewardDebt2; // Reward Debt for second reward token\\n        uint256 invested; // invested lp token amount\\n    }\\n\\n    struct AdapterInfo {\\n        uint256 accTokenPerShare1; // Accumulated per share for first reward token\\n        uint256 accTokenPerShare2; // Accumulated per share for second reward token\\n        uint256 totalStaked; // Total staked staking token\\n    }\\n\\n    // LP pool id - should be 0 when stakingToken is not LP\\n    uint256 public pid;\\n\\n    // staking token\\n    address public stakingToken;\\n\\n    // first reward token\\n    address public rewardToken1;\\n\\n    // second reward token - optional\\n    address public rewardToken2;\\n\\n    // repay token which we will receive after deposit - optional\\n    address public repayToken;\\n\\n    // strategy where we deposit staking token\\n    address public strategy;\\n\\n    // router address for LP token\\n    address public router;\\n\\n    // swap router address for ERC20 token swap\\n    address public swapRouter;\\n\\n    // wbnb address\\n    address public wbnb;\\n\\n    // adapter name\\n    string public name;\\n\\n    // adapter info having totalStaked and 1st, 2nd share info\\n    AdapterInfo public mAdapter;\\n\\n    // adapter info for each nft\\n    // nft id => UserAdapterInfo\\n    mapping(uint256 => UserAdapterInfo) public userAdapterInfos;\\n\\n    /** @notice Constructor\\n     * @param _hedgepieAuthority  address of authority\\n     */\\n    constructor(address _hedgepieAuthority) HedgepieAccessControlled(IHedgepieAuthority(_hedgepieAuthority)) {}\\n\\n    /** @notice get user staked amount */\\n    function getUserAmount(uint256 _tokenId) external view returns (uint256 amount) {\\n        return userAdapterInfos[_tokenId].amount;\\n    }\\n\\n    /**\\n     * @notice deposit to strategy\\n     * @param _tokenId YBNFT token id\\n     */\\n    function deposit(uint256 _tokenId) external payable virtual returns (uint256 amountOut) {}\\n\\n    /**\\n     * @notice withdraw from strategy\\n     * @param _tokenId YBNFT token id\\n     * @param _amount amount of staking tokens to withdraw\\n     */\\n    function withdraw(uint256 _tokenId, uint256 _amount) external payable virtual returns (uint256 amountOut) {}\\n\\n    /**\\n     * @notice claim reward from strategy\\n     * @param _tokenId YBNFT token id\\n     */\\n    function claim(uint256 _tokenId) external payable virtual returns (uint256 amountOut) {}\\n\\n    /**\\n     * @notice Remove funds\\n     * @param _tokenId YBNFT token id\\n     */\\n    function removeFunds(uint256 _tokenId) external payable virtual returns (uint256 amountOut) {}\\n\\n    /**\\n     * @notice Update funds\\n     * @param _tokenId YBNFT token id\\n     */\\n    function updateFunds(uint256 _tokenId) external payable virtual returns (uint256 amountOut) {}\\n\\n    /**\\n     * @notice Get pending token reward\\n     * @param _tokenId YBNFT token id\\n     */\\n    function pendingReward(uint256 _tokenId) external view virtual returns (uint256 reward, uint256 withdrawable) {}\\n\\n    /**\\n     * @notice Charge Fee and send BNB to investor\\n     * @param _tokenId YBNFT token id\\n     */\\n    function _chargeFeeAndSendToInvestor(uint256 _tokenId, uint256 _amount, uint256 _reward) internal {\\n        bool success;\\n        if (_reward != 0) {\\n            _reward = (_reward * IYBNFT(authority.hYBNFT()).performanceFee(_tokenId)) / 1e4;\\n            (success, ) = payable(IHedgepieInvestor(authority.hInvestor()).treasury()).call{value: _reward}(\\\"\\\");\\n            require(success, \\\"Failed to send bnb to Treasury\\\");\\n        }\\n\\n        (success, ) = payable(msg.sender).call{value: _amount - _reward}(\\\"\\\");\\n        require(success, \\\"Failed to send bnb\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IWrap {\\n    // get wrapper token\\n    function deposit(uint256 amount) external;\\n\\n    // get native token\\n    function withdraw(uint256 share) external;\\n\\n    function deposit() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPathFinder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IPathFinder {\\n    /**\\n     * @notice Get Path\\n     * @param _router swap router address\\n     * @param _inToken input token address\\n     * @param _outToken output token address\\n     */\\n    function getPaths(address _router, address _inToken, address _outToken) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHedgepieInvestor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface IHedgepieInvestor {\\n    function treasury() external view returns (address);\\n\\n    /**\\n     * @notice Update funds for token id\\n     * @param _tokenId YBNFT token id\\n     */\\n    function updateFunds(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Deposit with BNB\\n     * @param _tokenId  YBNft token id\\n     */\\n    function deposit(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Withdraw by BNB\\n     * @param _tokenId  YBNft token id\\n     */\\n    function withdraw(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Claim\\n     * @param _tokenId  YBNft token id\\n     */\\n    function claim(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice pendingReward\\n     * @param _tokenId  YBNft token id\\n     * @param _account  user address\\n     */\\n    function pendingReward(\\n        uint256 _tokenId,\\n        address _account\\n    ) external returns (uint256 amountOut, uint256 withdrawable);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/HedgepieLibraryBsc.sol\": {\r\n        \"HedgepieLibraryBsc\": \"0xcd8aa69e83568f5f73ab3c17ce2b3dcd3cfb88ba\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hedgepieAuthority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHedgepieAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IHedgepieAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHedgepieAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HedgepieInvestor", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b34b18b191a2371359762429f9732f73af8ac21100000000000000000000000011e660267f3bdddfeb26418a2bd149e1e1e7fc33", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}