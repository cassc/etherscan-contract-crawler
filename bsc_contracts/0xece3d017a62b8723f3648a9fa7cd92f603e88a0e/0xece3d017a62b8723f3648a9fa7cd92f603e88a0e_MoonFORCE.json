{"SourceCode": "// File: MoonFORCE/MoonFORCE_token/contracts/interfaces/IStakingContract.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface IStakingContract {\r\n    function depositWBNBToStakingContract(uint256 _amount) external;\r\n    function depositMFToStakingContract(uint256 _amountMF) external;\r\n}\r\n// File: MoonFORCE/MoonFORCE_token/contracts/interfaces/IMoonshotMechanism.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\ninterface IMoonshotMechanism {\r\n    function getGoal() external view returns(uint);\r\n    function getMoonshotBalance() external view returns(uint);\r\n    function launchMoonshot() external;\r\n    function shouldLaunchMoon(address from, address to) external view returns (bool);\r\n}\r\n\r\n// File: MoonFORCE/MoonFORCE_token/contracts/interfaces/IPYESwapRouter01.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IPYESwapRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n// File: MoonFORCE/MoonFORCE_token/contracts/interfaces/IPYESwapRouter.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IPYESwapRouter is IPYESwapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function pairFeeAddress(address pair) external view returns (address);\r\n    function adminFee() external view returns (uint256);\r\n    function feeAddressGet() external view returns (address);\r\n}\r\n// File: MoonFORCE/MoonFORCE_token/contracts/interfaces/IPYESwapPair.sol\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPYESwapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function baseToken() external view returns (address);\r\n    function getTotalFee() external view returns (uint);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function updateTotalFee(uint totalFee) external returns (bool);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast, address _baseToken);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, uint amount0Fee, uint amount1Fee, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n    function setBaseToken(address _baseToken) external;\r\n}\r\n// File: MoonFORCE/MoonFORCE_token/contracts/interfaces/IPYESwapFactory.sol\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPYESwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function pairExist(address pair) external view returns (bool);\r\n\r\n    function createPair(address tokenA, address tokenB, bool supportsTokenFee) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function routerInitialize(address) external;\r\n    function routerAddress() external view returns (address);\r\n}\r\n// File: MoonFORCE/MoonFORCE_token/contracts/interfaces/IWETH.sol\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n// File: MoonFORCE/MoonFORCE_token/contracts/interfaces/IPYE.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <=0.8.1;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IPYE {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    //function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    //event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    //event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Arrays.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n    /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (array[mid] > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && array[low - 1] == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Snapshot.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\r\n * total supply at the time are recorded for later access.\r\n *\r\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\r\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\r\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\r\n * used to create an efficient ERC20 forking mechanism.\r\n *\r\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\r\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\r\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\r\n * and the account address.\r\n *\r\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\r\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\r\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\r\n *\r\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\r\n * alternative consider {ERC20Votes}.\r\n *\r\n * ==== Gas Costs\r\n *\r\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\r\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\r\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\r\n *\r\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\r\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\r\n * transfers will have normal cost until the next snapshot, and so on.\r\n */\r\n\r\nabstract contract ERC20Snapshot is ERC20 {\r\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\r\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\r\n\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\r\n    // Snapshot struct, but that would impede usage of functions that work on an array.\r\n    struct Snapshots {\r\n        uint256[] ids;\r\n        uint256[] values;\r\n    }\r\n\r\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\r\n    Snapshots private _totalSupplySnapshots;\r\n\r\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n    /**\r\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\r\n     */\r\n    event Snapshot(uint256 id);\r\n\r\n    /**\r\n     * @dev Creates a new snapshot and returns its snapshot id.\r\n     *\r\n     * Emits a {Snapshot} event that contains the same id.\r\n     *\r\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\r\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\r\n     * you must consider that it can potentially be used by attackers in two ways.\r\n     *\r\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\r\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\r\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\r\n     * section above.\r\n     *\r\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\r\n     * ====\r\n     */\r\n    function _snapshot() internal virtual returns (uint256) {\r\n        _currentSnapshotId.increment();\r\n\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        emit Snapshot(currentId);\r\n        return currentId;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current snapshotId\r\n     */\r\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\r\n        return _currentSnapshotId.current();\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\r\n     */\r\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\r\n\r\n        return snapshotted ? value : balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\r\n     */\r\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\r\n\r\n        return snapshotted ? value : totalSupply();\r\n    }\r\n\r\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\r\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (from == address(0)) {\r\n            // mint\r\n            _updateAccountSnapshot(to);\r\n            _updateTotalSupplySnapshot();\r\n        } else if (to == address(0)) {\r\n            // burn\r\n            _updateAccountSnapshot(from);\r\n            _updateTotalSupplySnapshot();\r\n        } else {\r\n            // transfer\r\n            _updateAccountSnapshot(from);\r\n            _updateAccountSnapshot(to);\r\n        }\r\n    }\r\n\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\r\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\r\n\r\n        // When a valid snapshot is queried, there are three possibilities:\r\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\r\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\r\n        //  to this id is the current one.\r\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\r\n        //  requested id, and its value is the one to return.\r\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\r\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\r\n        //  larger than the requested one.\r\n        //\r\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\r\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\r\n        // exactly this.\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n        if (index == snapshots.ids.length) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, snapshots.values[index]);\r\n        }\r\n    }\r\n\r\n    function _updateAccountSnapshot(address account) private {\r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n    }\r\n\r\n    function _updateTotalSupplySnapshot() private {\r\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n    }\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n            snapshots.ids.push(currentId);\r\n            snapshots.values.push(currentValue);\r\n        }\r\n    }\r\n\r\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\r\n        if (ids.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return ids[ids.length - 1];\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: MoonFORCE/MoonFORCE_token/contracts/MoonshotMechanism.sol\r\n\r\n\r\npragma solidity ^0.8.1;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MoonshotMechanism is IMoonshotMechanism {\r\n    using SafeMath for uint256;\r\n\r\n    address public _token;\r\n    IStakingContract public StakingContract;\r\n    address public stakingContract;\r\n\r\n    struct Moonshot {\r\n        string Name;\r\n        uint Value;\r\n    }\r\n\r\n    bool public initialized = true;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    Moonshot[] internal Moonshots;\r\n    address admin;\r\n    uint public disbursalThreshold;\r\n    uint public lastMoonShot;\r\n    bool public autoMoonshotEnabled;\r\n\r\n    bool private inSwap;\r\n\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    IPYESwapRouter public pyeSwapRouter;\r\n    address public WBNB;\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor() {\r\n        pyeSwapRouter = IPYESwapRouter(0x6Ee6CcD64f61075fb3077CCb4E45A994105C592E);\r\n        WBNB = pyeSwapRouter.WETH();\r\n        _token = msg.sender;\r\n\r\n        admin = 0x5f46913071f854A99FeB5B3cF54851E539CA6D44;\r\n        Moonshots.push(Moonshot(\"Waxing\", 1000));\r\n        Moonshots.push(Moonshot(\"Waning\", 2500));\r\n        Moonshots.push(Moonshot(\"Half Moon\", 3750));\r\n        Moonshots.push(Moonshot(\"Full Moon\", 5000));\r\n        Moonshots.push(Moonshot(\"Blue Moon\", 10000));\r\n        autoMoonshotEnabled = false;\r\n        disbursalThreshold = 1*10**6;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin , \"You are not the admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrToken {\r\n        require(msg.sender == admin || msg.sender == _token);\r\n        _;\r\n    }\r\n    //-------------------------- BEGIN EDITING FUNCTIONS ----------------------------------\r\n\r\n    // Allows admin to create a new moonshot with a corresponding value; pushes new moonshot to end of array and increases array length by 1.\r\n    function createMoonshot(string memory _newName, uint _newValue) public onlyAdmin {\r\n        Moonshots.push(Moonshot(_newName, _newValue));\r\n    }\r\n    // Remove last element from array; this will decrease the array length by 1.\r\n    function popMoonshot() public onlyAdmin {\r\n        Moonshots.pop();\r\n    }\r\n    // User enters the value of the moonshot to delete, not the index. EX: enter 2000 to delete the Blue Moon struct, the array length is then decreased by 1.\r\n        // moves the struct you want to delete to the end of the array, deletes it, and then pops the array to avoid empty arrays being selected by pickMoonshot.\r\n    function deleteMoonshot(uint _value) public onlyAdmin {\r\n        uint moonshotLength = Moonshots.length;\r\n        for(uint i = 0; i < moonshotLength; i++) {\r\n            if (_value == Moonshots[i].Value) {\r\n                if (1 < Moonshots.length && i < moonshotLength-1) {\r\n                    Moonshots[i] = Moonshots[moonshotLength-1]; }\r\n                    delete Moonshots[moonshotLength-1];\r\n                    Moonshots.pop();\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    function updateAdmin(address _newAdmin) public onlyAdmin {\r\n        admin = _newAdmin;\r\n    }\r\n\r\n    function updateRouterAndPair(address _router) public onlyAdmin {\t\r\n        pyeSwapRouter = IPYESwapRouter(_router);\t\r\n    }\r\n\r\n    function getGoal() external view override returns(uint256){\r\n        return disbursalThreshold;\r\n    }\r\n\r\n    function getMoonshotBalance() external view override returns(uint256){\r\n        return IERC20(address(WBNB)).balanceOf(address(this));\r\n    }\r\n\r\n    //-------------------------- BEGIN GETTER FUNCTIONS ----------------------------------\r\n    // Enter an index to return the name and value of the moonshot @ that index in the Moonshots array.\r\n    function getMoonshotNameAndValue(uint _index) public view returns (string memory, uint) {\r\n        return (Moonshots[_index].Name, Moonshots[_index].Value);\r\n    }\r\n    // Returns the value of the contract in BNB.\r\n    function getContractValue() public view onlyAdmin returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n    // Getter fxn to see the disbursal threshold value.\r\n    function getDisbursalValue() public view onlyAdmin returns (uint) {\r\n        return disbursalThreshold;\r\n    }\r\n    //-------------------------- BEGIN MOONSHOT SELECTION FUNCTIONS ----------------------------------\r\n    // Generates a \"random\" number.\r\n    function random() internal view returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(block.difficulty + block.timestamp)));\r\n    }\r\n\r\n    // Allows admin to manually select a new disbursal threshold.\r\n    function overrideDisbursalThreshold(uint newDisbursalThreshold) public onlyAdmin returns (uint) {\r\n        disbursalThreshold = newDisbursalThreshold;\r\n        return disbursalThreshold;\r\n    }\r\n\r\n    function pickMoonshot() internal {\r\n        require(Moonshots.length > 1, \"The Moonshot array has only one moonshot, please create a new Moonshot!\");\r\n        Moonshot storage winningStruct = Moonshots[random() % Moonshots.length];\r\n        uint disbursalValue = winningStruct.Value;\r\n        lastMoonShot = disbursalThreshold;\r\n        \r\n        // @todo update decimals for mainnet\r\n        disbursalThreshold = disbursalValue * 10**13;\r\n    }\r\n  \r\n    function shouldLaunchMoon(address from, address to) external view override returns (bool) {\r\n        return (IERC20(address(WBNB)).balanceOf(address(this)) >= disbursalThreshold \r\n            && disbursalThreshold != 0 \r\n            && from != address(this) \r\n            && to != address(this) \r\n            && autoMoonshotEnabled); \r\n    }\r\n\r\n    // calling pickMoonshot() required becasue upon contract deployment disbursalThreshold is initialized to 0\r\n    function launchMoonshot() external onlyAdminOrToken override {\r\n        if (IERC20(address(WBNB)).balanceOf(address(this)) >= disbursalThreshold && disbursalThreshold != 0) { \r\n            buyReflectTokens(disbursalThreshold, address(this)); \r\n        } \r\n    }\r\n\r\n    function buyReflectTokens(uint256 amount, address to) internal {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = _token;\r\n\r\n        IERC20(WBNB).approve(address(pyeSwapRouter), amount);\r\n\r\n        pyeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp + 10 minutes\r\n        );\r\n\r\n        sendMFToStakingContractAfterBuyReflectTokens(stakingContract, IERC20(_token).balanceOf(address(this)));\r\n        pickMoonshot();\r\n    }\r\n\r\n    function sendMFToStakingContractAfterBuyReflectTokens(address _stakingContract, uint256 _amountMF) internal {\r\n        require(_stakingContract != address(0), \"The staking contract address has not been set yet.\");\r\n        require(_amountMF > 0 , \"You cannot send 0 tokens!\");\r\n        IERC20(_token).transfer(_stakingContract, _amountMF);\r\n        StakingContract.depositMFToStakingContract(_amountMF);\r\n    }\r\n\r\n    function setStakingContractAddress(address _newStakingContractAddress) public onlyAdmin {\r\n        stakingContract = _newStakingContractAddress; \r\n        StakingContract = IStakingContract(_newStakingContractAddress);\r\n    }\r\n\r\n    function swapToWBNB(address token) public onlyAdmin {\r\n        uint256 amount = IERC20(address(token)).balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n            path[0] = token;\r\n            path[1] = WBNB;\r\n\r\n            IERC20(token).approve(address(pyeSwapRouter), amount);\r\n\r\n            pyeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp + 10 minutes\r\n            );\r\n    }\r\n\r\n    function enableAutoMoonshot(bool _enabled) external onlyAdmin {\r\n        autoMoonshotEnabled = _enabled;\r\n    }\r\n\r\n    // Rescue bnb that is sent here by mistake\r\n    function rescueBNB(uint256 amount, address to) external onlyAdmin{\r\n        payable(to).transfer(amount);\r\n      }\r\n\r\n    // Rescue tokens that are sent here by mistake\r\n    function rescueToken(IERC20 token, uint256 amount, address to) external onlyAdmin {\r\n        if( token.balanceOf(address(this)) < amount ) {\r\n            amount = token.balanceOf(address(this));\r\n        }\r\n        token.transfer(to, amount);\r\n    }\r\n}\r\n\r\n// File: MoonFORCE/MoonFORCE_token/contracts/MoonFORCE.sol\r\n\r\n\r\n// requires compiler ver of 0.8.1 or higher to recognize imports\r\npragma solidity =0.8.1;\r\npragma experimental ABIEncoderV2;\r\n\r\n// the most recent ^0.8.0 compatible SafeMath library is implmented to preserve existing logic reliant upon SafeMath syntax.\r\n// erc20 + erc20 snapshot imports to utilize the shapshot functionality to pull balances at any time. Ownable for modifier function call control.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MoonFORCE is IPYE, Context, ERC20, ERC20Snapshot, Ownable {\r\n\r\n    // allows easy determination of actual msg.sender in meta-transactions\r\n    using Address for address;\r\n    // declare SafeMath useage so compiler recognizes SafeMath syntax\r\n    using SafeMath for uint256;\r\n\r\n//--------------------------------------BEGIN FEE INFO---------|\r\n\r\n     // Fees\r\n    struct Fees {\r\n        uint256 reflectionFee;\r\n        uint256 marketingFee;\r\n        uint256 moonshotFee;\r\n        uint256 buybackFee;\r\n        uint256 liquifyFee;\r\n        address marketingAddress;\r\n        address liquifyAddress;\r\n    }\r\n\r\n    // Transaction fee values\r\n    struct FeeValues {\r\n        uint256 transferAmount;\r\n        uint256 reflection;\r\n        uint256 marketing;\r\n        uint256 moonshots;\r\n        uint256 buyBack;\r\n        uint256 liquify;\r\n    }\r\n\r\n    // instantiating new Fees structs (see struct Fees above)\r\n    Fees public _defaultFees;\r\n    Fees public _defaultSellFees;\r\n    Fees private _previousFees;\r\n    Fees private _emptyFees;\r\n    Fees private _sellFees;\r\n    Fees private _outsideBuyFees;\r\n    Fees private _outsideSellFees;\r\n\r\n//--------------------------------------BEGIN MAPPINGS---------|\r\n\r\n    // user mappings for token balances and spending allowances. \r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    // user states governing fee exclusion, blacklist status, Reward exempt (meaning no reflection entitlement)\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isBlacklisted;\r\n\r\n    // Pair Details\r\n    mapping (uint256 => address) private pairs;\r\n    mapping (uint256 => address) private tokens;\r\n    uint256 private pairsLength;\r\n    mapping (address => bool) public _isPairAddress;\r\n    // Outside Swap Pairs\r\n    mapping (address => bool) private _includeSwapFee;\r\n    // Staking Contracts\r\n    mapping (address => bool) isStakingContract;\r\n\r\n//--------------------------------------BEGIN TOKEN PARAMS---------|\r\n\r\n    // token details.\r\n    // tTotal is the total token supply (10 bil with 9 decimals)\r\n    string constant _name = \"MoonForce\";\r\n    string constant _symbol = \"FORCE\";\r\n    uint8 constant _decimals = 9;\r\n    uint256 private constant _tTotal = 10 * 10**9 * 10**9;\r\n\r\n\r\n//--------------------------------------BEGIN TOKEN HOLDER INFO---------|\r\n\r\n    struct Staked {\r\n        uint256 amount;\r\n    }\r\n\r\n    address[] holders;\r\n    mapping (address => uint256) holderIndexes;\r\n    mapping (address => Staked) public staked;\r\n\r\n    uint256 public totalStaked;\r\n\r\n//--------------------------------------BEGIN ROUTER, WBNB, BURN ADDRESS INFO---------|\r\n\r\n    IPYESwapRouter public pyeSwapRouter;\r\n    address public pyeSwapPair;\r\n    address public WBNB;\r\n    address public constant _burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public _maxTxAmount = 5 * 10**8 * 10**9;\r\n\r\n//--------------------------------------BEGIN BUYBACK VARIABLES---------|\r\n\r\n    // auto set buyback to false. additional buyback params. blockPeriod acts as a time delay in the shouldAutoBuyback(). Last uint represents last block for buyback occurance.\r\n    bool public autoBuybackEnabled = false;\r\n    uint256 autoBuybackCap;\r\n    uint256 autoBuybackAccumulator;\r\n    uint256 autoBuybackAmount;\r\n    uint256 autoBuybackBlockPeriod;\r\n    uint256 autoBuybackBlockLast;\r\n    uint256 minimumBuyBackThreshold = _tTotal / 1000000; // 0.0001%\r\n\r\n//--------------------------------------BEGIN MOONSHOT MECH. AND STAKING CONT. INSTANCES---------|\r\n\r\n    // instantiate a moonshot from the Moonshot Mechanism contract, which handles moonshot generation and disbursal value logic.\r\n    MoonshotMechanism moonshot;\r\n    address public moonshotAddress;\r\n\r\n    IStakingContract public StakingContract;\r\n    address public stakingContract;\r\n\r\n    uint256 distributorGas = 500000;\r\n\r\n//--------------------------------------BEGIN SWAP INFO---------|\r\n\r\n    // swap state variables\r\n    bool inSwap;\r\n\r\n    // function modifiers handling swap status\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    modifier onlyExchange() {\r\n        bool isPair = false;\r\n        for(uint i = 0; i < pairsLength; i++) {\r\n            if(pairs[i] == msg.sender) isPair = true;\r\n        }\r\n        require(\r\n            msg.sender == address(pyeSwapRouter)\r\n            || isPair\r\n            , \"PYE: NOT_ALLOWED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n//--------------------------------------BEGIN CONSTRUCTOR AND RECEIVE FUNCITON---------|    \r\n\r\n    constructor() ERC20(\"MoonForce\", \"FORCE\") {\r\n        _balances[_msgSender()] = _tTotal;\r\n\r\n        pyeSwapRouter = IPYESwapRouter(0x6Ee6CcD64f61075fb3077CCb4E45A994105C592E);\r\n        WBNB = pyeSwapRouter.WETH();\r\n        pyeSwapPair = IPYESwapFactory(pyeSwapRouter.factory())\r\n        .createPair(address(this), WBNB, true);\r\n\r\n        moonshot = new MoonshotMechanism();\r\n        moonshotAddress = address(moonshot);\r\n\r\n        tokens[pairsLength] = WBNB;\r\n        pairs[pairsLength] = pyeSwapPair;\r\n        pairsLength += 1;\r\n        _isPairAddress[pyeSwapPair] = true;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[pyeSwapPair] = true;\r\n        _isExcludedFromFee[moonshotAddress] = true;\r\n        _isExcludedFromFee[stakingContract] = true;\r\n\r\n        isTxLimitExempt[_msgSender()] = true;\r\n        isTxLimitExempt[pyeSwapPair] = true;\r\n        isTxLimitExempt[address(pyeSwapRouter)] = true;\r\n        isTxLimitExempt[moonshotAddress] = true;\r\n        isTxLimitExempt[stakingContract] = true;\r\n\r\n        _defaultFees = Fees(\r\n            800,\r\n            300,\r\n            200,\r\n            100,\r\n            0,\r\n            0xdfc2aeD317d8ef2bC90183FD0e365BFE190bFCBD,\r\n            0x8539a0c8D96610527140E97A9ae458F6A5bb1F86\r\n        );\r\n\r\n        _defaultSellFees = Fees(\r\n            800,\r\n            300,\r\n            200,\r\n            100,\r\n            0,\r\n            0xdfc2aeD317d8ef2bC90183FD0e365BFE190bFCBD,\r\n            0x8539a0c8D96610527140E97A9ae458F6A5bb1F86\r\n        );\r\n\r\n        _sellFees = Fees(\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0xdfc2aeD317d8ef2bC90183FD0e365BFE190bFCBD,\r\n            0x8539a0c8D96610527140E97A9ae458F6A5bb1F86\r\n        );\r\n\r\n        _outsideBuyFees = Fees(\r\n            800,\r\n            300,\r\n            200,\r\n            100,\r\n            0,\r\n            0xdfc2aeD317d8ef2bC90183FD0e365BFE190bFCBD,\r\n            0x8539a0c8D96610527140E97A9ae458F6A5bb1F86\r\n        );\r\n\r\n        _outsideSellFees = Fees(\r\n            800,\r\n            300,\r\n            200,\r\n            100,\r\n            0,\r\n            0xdfc2aeD317d8ef2bC90183FD0e365BFE190bFCBD,\r\n            0x8539a0c8D96610527140E97A9ae458F6A5bb1F86\r\n        );\r\n\r\n        IPYESwapPair(pyeSwapPair).updateTotalFee(1400);\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    //to receive BNB from pyeRouter when swapping\r\n    receive() external payable {}\r\n\r\n//--------------------------------------BEGIN SNAPSHOT FUNCTIONS---------|\r\n\r\n    // this function generates a snapshot of the total token supply as well as the balances of all the holders. This is accomplished\r\n    // by the mapping in the ERC20 snapshot contract which links an address to an individual snapshot balance which can be called arbitrarily any time. Calling\r\n    // snapshot() also generates a snapshot ID (a uint) which can be used in the balanceOfAt() fxn in combination with any holder address to get a holders balance at\r\n    // the time the entered shapshotID was generated (i.e. historic balance functionality) \r\n    function snapshot() public onlyOwner {\r\n        _snapshot();\r\n    }\r\n\r\n    // simple getter function which returns the number (or ID) of the most recent snapshot taken. Useful to call if attempting to use totalSupplyAt() or balanceOfAt() and you \r\n    // need to know what the last snapshot ID is to pass it as an argument.\r\n    function getCurrentSnapshot() public view onlyOwner returns (uint256) {\r\n        return _getCurrentSnapshotId();\r\n    }\r\n\r\n    // the original totalSupplyAt() function in ERC20-snapshot only uses totalSupply (in our case, _tTotal) to determine the total supply at a given snapshot. As a result,\r\n    // it won't reflect the token balances of the burn wallet, ..\r\n    function totalSupplyAt(uint256 snapshotId) public view onlyOwner override returns (uint256) {\r\n        return super.totalSupplyAt(snapshotId).sub(balanceOfAt(_burnAddress, snapshotId));\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity. \"super\" provides access directly to the beforeTokenTransfer fxn in ERC20 snapshot. Update balance \r\n    // and/or total supply snapshots before the values are modified. This is implemented\r\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\r\n        internal\r\n        override(ERC20, ERC20Snapshot)\r\n    {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n//--------------------------------------BEGIN BLACKLIST FUNCTIONS---------|\r\n\r\n    // enter an address to blacklist it. This blocks transfers TO that address. Balcklisted members can still sell.\r\n    function blacklistAddress(address addressToBlacklist) public onlyOwner {\r\n        require(!isBlacklisted[addressToBlacklist] , \"Address is already blacklisted!\");\r\n        isBlacklisted[addressToBlacklist] = true;\r\n    }\r\n\r\n    // enter a currently blacklisted address to un-blacklist it.\r\n    function removeFromBlacklist(address addressToRemove) public onlyOwner {\r\n        require(isBlacklisted[addressToRemove] , \"Address has not been blacklisted! Enter an address that is on the blacklist.\");\r\n        isBlacklisted[addressToRemove] = false;\r\n    }\r\n\r\n//--------------------------------------BEGIN TOKEN GETTER FUNCTIONS---------|\r\n\r\n    // decimal return fxn is explicitly stated to override the std. ERC-20 decimals() fxn which is programmed to return uint 18, but\r\n    // MoonForce has 9 decimals.\r\n    function decimals() public pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    // totalSupply return fxn is explicitly stated to override the std. ERC-20 totalSupply() fxn which is programmed to return a uint \"totalSupply\", but\r\n    // MoonForce uses \"_tTotal\" variable to define total token supply, \r\n    function totalSupply() public pure override(ERC20, IPYE) returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    // balanceOf function is identical to ERC-20 balanceOf fxn.\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // returns the owned amount of tokens, including tokens that are staked in main pool. Balance qualifies for tier privileges.\r\n    function getOwnedBalance(address account) public view returns (uint256){\r\n        return staked[account].amount.add(_balances[account]);\r\n    }\r\n\r\n    // returns the circulating token supply minus the balance in the burn address (0x00..dEAD) and the balance in address(0) (0x00...00)\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _tTotal.sub(balanceOf(_burnAddress)).sub(balanceOf(address(0)));\r\n    }\r\n\r\n//--------------------------------------BEGIN TOKEN PAIR FUNCTIONS---------|\r\n\r\n    // returns the index of paired tokens\r\n    function _getTokenIndex(address _token) internal view returns (uint256) {\r\n        uint256 index = pairsLength + 1;\r\n        for(uint256 i = 0; i < pairsLength; i++) {\r\n            if(tokens[i] == _token) index = i;\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    // check if a pair of tokens are paired\r\n    function _checkPairRegistered(address _pair) internal view returns (bool) {\r\n        bool isPair = false;\r\n        for(uint i = 0; i < pairsLength; i++) {\r\n            if(pairs[i] == _pair) isPair = true;\r\n        }\r\n\r\n        return isPair;\r\n    }\r\n\r\n    function addPair(address _pair, address _token) public {\r\n        address factory = pyeSwapRouter.factory();\r\n        require(\r\n            msg.sender == factory\r\n            || msg.sender == address(pyeSwapRouter)\r\n            || msg.sender == address(this)\r\n        , \"PYE: NOT_ALLOWED\"\r\n        );\r\n\r\n        if(!_checkPairRegistered(_pair)) {\r\n            _isExcludedFromFee[_pair] = true;\r\n            _isPairAddress[_pair] = true;\r\n            isTxLimitExempt[_pair] = true;\r\n\r\n            pairs[pairsLength] = _pair;\r\n            tokens[pairsLength] = _token;\r\n\r\n            pairsLength += 1;\r\n\r\n            IPYESwapPair(_pair).updateTotalFee(getTotalFee());\r\n        }\r\n    }\r\n\r\n    function addOutsideSwapPair(address account) public onlyOwner {\r\n        _includeSwapFee[account] = true;\r\n    }\r\n\r\n    function removeOutsideSwapPair(address account) public onlyOwner {\r\n        _includeSwapFee[account] = false;\r\n    }\r\n\r\n    // set an address as a staking contract\r\n    function setIsStakingContract(address account, bool set) external onlyOwner {\r\n        isStakingContract[account] = set;\r\n    }\r\n\r\n//--------------------------------------BEGIN RESCUE FUNCTIONS---------|\r\n\r\n    // Rescue bnb that is sent here by mistake\r\n    function rescueBNB(uint256 amount, address to) external onlyOwner {\r\n        payable(to).transfer(amount);\r\n      }\r\n\r\n    // Rescue tokens that are sent here by mistake\r\n    function rescueToken(IERC20 token, uint256 amount, address to) external onlyOwner {\r\n        if( token.balanceOf(address(this)) < amount ) {\r\n            amount = token.balanceOf(address(this));\r\n        }\r\n        token.transfer(to, amount);\r\n    }\r\n\r\n//--------------------------------------BEGIN APPROVAL & ALLOWANCE FUNCTIONS---------|\r\n\r\n     // allowance fxn is identical to ERC-20 allowance fxn. As per tommy's request, function is still explicity declared.\r\n    function allowance(address owner, address spender) public view override(ERC20, IPYE) returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    // approve fxn overrides std. ERC-20 approve() fxn which declares address owner = _msgSender(), whereas MoonForce approve() fxn does not.\r\n    function approve(address spender, uint256 amount) public override(ERC20, IPYE) returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // added override tag, see same explanation for approve() function above.\r\n    function increaseAllowance(address spender, uint256 addedValue) public override virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    // added override tag, see same explanation for approve() function above.\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    // added override tag for error message clarity (BEP vs ERC), changed visibility from private to internal to avoid compiler errors.\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n//--------------------------------------BEGIN FEE FUNCTIONS---------|\r\n\r\n    // get sum of all fees\r\n    function getTotalFee() internal view returns (uint256) {\r\n        return _defaultFees.reflectionFee\r\n            .add(_defaultFees.marketingFee)\r\n            .add(_defaultFees.moonshotFee)\r\n            .add(_defaultFees.buybackFee)\r\n            .add(_defaultFees.liquifyFee);\r\n    }\r\n\r\n    // takes fees\r\n    function _takeFees(FeeValues memory values) private {\r\n        _takeFee(values.reflection.add(values.moonshots), moonshotAddress);\r\n        _takeFee(values.marketing, _defaultFees.marketingAddress);\r\n        _takeFee(values.buyBack, _burnAddress);\r\n        if(values.liquify > 0) {\r\n             _takeFee(values.liquify, _defaultFees.liquifyAddress);\r\n        }\r\n    }\r\n\r\n    // collects fees\r\n    function _takeFee(uint256 tAmount, address recipient) private {\r\n        if(recipient == address(0)) return;\r\n        if(tAmount == 0) return;\r\n\r\n        _balances[recipient] = _balances[recipient].add(tAmount);\r\n    }\r\n\r\n    // calculates the fee\r\n    function calculateFee(uint256 _amount, uint256 _fee) private pure returns (uint256) {\r\n        if(_fee == 0) return 0;\r\n        return _amount.mul(_fee).div(\r\n            10**4\r\n        );\r\n    }\r\n\r\n    // restores all fees\r\n    function restoreAllFee() private {\r\n        _defaultFees = _previousFees;\r\n    }\r\n\r\n    // removes all fees\r\n    function removeAllFee() private {\r\n        _previousFees = _defaultFees;\r\n        _defaultFees = _emptyFees;\r\n    }\r\n\r\n    function setSellFee() private {\r\n        _previousFees = _defaultFees;\r\n        _defaultFees = _sellFees;\r\n    }\r\n\r\n    function setOutsideBuyFee() private {\r\n        _previousFees = _defaultFees;\r\n        _defaultFees = _outsideBuyFees;\r\n    }\r\n\r\n    function setOutsideSellFee() private {\r\n        _previousFees = _defaultFees;\r\n        _defaultFees = _outsideSellFees;\r\n    }\r\n\r\n    // shows whether or not an account is excluded from fees\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    \r\n    // allows Owner to make an address exempt from fees\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    // allows Owner to make an address incur fees\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    // allows Owner to change max TX percent\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n            10**4\r\n        );\r\n    }\r\n\r\n    // set an address to be tx limit exempt\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    // safety check for set tx limit\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    // returns the specified values\r\n    function _getValues(uint256 tAmount) private view returns (FeeValues memory) {\r\n        FeeValues memory values = FeeValues(\r\n            0,\r\n            calculateFee(tAmount, _defaultFees.reflectionFee),\r\n            calculateFee(tAmount, _defaultFees.marketingFee),\r\n            calculateFee(tAmount, _defaultFees.moonshotFee),\r\n            calculateFee(tAmount, _defaultFees.buybackFee),\r\n            calculateFee(tAmount, _defaultFees.liquifyFee)\r\n        );\r\n\r\n        values.transferAmount = tAmount.sub(values.reflection).sub(values.marketing).sub(values.moonshots).sub(values.buyBack).sub(values.liquify);\r\n        return values;\r\n    }\r\n\r\n    \r\n    function depositLPFee(uint256 amount, address token) public onlyExchange {\r\n        uint256 tokenIndex = _getTokenIndex(token);\r\n        if(tokenIndex < pairsLength) {\r\n            uint256 allowanceT = IERC20(token).allowance(msg.sender, address(this));\r\n            if(allowanceT >= amount) {\r\n                IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n\r\n                if(token != WBNB) {\r\n                    uint256 balanceBefore = IERC20(address(WBNB)).balanceOf(address(this));\r\n                    swapToWBNB(amount, token);\r\n                    uint256 fAmount = IERC20(address(WBNB)).balanceOf(address(this)).sub(balanceBefore);\r\n                    \r\n                    // All fees to be declared here in order to be calculated and sent\r\n                    uint256 totalFee = getTotalFee();\r\n                    uint256 marketingFeeAmount = fAmount.mul(_defaultFees.marketingFee).div(totalFee);\r\n                    uint256 reflectionFeeAmount = fAmount.mul(_defaultFees.reflectionFee).div(totalFee);\r\n                    uint256 moonshotFeeAmount = fAmount.mul(_defaultFees.moonshotFee).div(totalFee);\r\n                    uint256 liquifyFeeAmount = fAmount.mul(_defaultFees.liquifyFee).div(totalFee);\r\n\r\n                    IERC20(WBNB).transfer(_defaultFees.marketingAddress, marketingFeeAmount);\r\n                    if(stakingContract != address(0)) {\r\n                        IERC20(WBNB).transfer(stakingContract, reflectionFeeAmount);\r\n                        try StakingContract.depositWBNBToStakingContract(reflectionFeeAmount) {} catch {}\r\n                    } else {\r\n                        IERC20(WBNB).transfer(_defaultFees.liquifyAddress, reflectionFeeAmount);\r\n                    }\r\n                    IERC20(WBNB).transfer(moonshotAddress, moonshotFeeAmount);\r\n                    if(liquifyFeeAmount > 0) {IERC20(token).transfer(_defaultFees.liquifyAddress, liquifyFeeAmount);}\r\n                } else {\r\n                    // All fees to be declared here in order to be calculated and sent\r\n                    uint256 totalFee = getTotalFee();\r\n                    uint256 marketingFeeAmount = amount.mul(_defaultFees.marketingFee).div(totalFee);\r\n                    uint256 reflectionFeeAmount = amount.mul(_defaultFees.reflectionFee).div(totalFee);\r\n                    uint256 moonshotFeeAmount = amount.mul(_defaultFees.moonshotFee).div(totalFee);\r\n                    uint256 liquifyFeeAmount = amount.mul(_defaultFees.liquifyFee).div(totalFee);\r\n\r\n                    IERC20(token).transfer(_defaultFees.marketingAddress, marketingFeeAmount);\r\n                    if(stakingContract != address(0)) {\r\n                        IERC20(token).transfer(stakingContract, reflectionFeeAmount);\r\n                        try StakingContract.depositWBNBToStakingContract(reflectionFeeAmount) {} catch {}\r\n                    } else {\r\n                        IERC20(token).transfer(_defaultFees.liquifyAddress, reflectionFeeAmount);\r\n                    }\r\n                    IERC20(token).transfer(moonshotAddress, moonshotFeeAmount);\r\n                    if(liquifyFeeAmount > 0) {IERC20(token).transfer(_defaultFees.liquifyAddress, liquifyFeeAmount);}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapToWBNB(uint256 amount, address token) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = WBNB;\r\n\r\n        IERC20(token).approve(address(pyeSwapRouter), amount);\r\n        pyeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _updatePairsFee() internal {\r\n        for (uint j = 0; j < pairsLength; j++) {\r\n            IPYESwapPair(pairs[j]).updateTotalFee(getTotalFee());\r\n        }\r\n    }\r\n\r\n    // set the reflection fee\r\n    function setReflectionPercent(uint256 _reflectionFee) external onlyOwner {\r\n        _defaultFees.reflectionFee = _reflectionFee;\r\n        _defaultSellFees.reflectionFee = _reflectionFee;\r\n        _outsideBuyFees.reflectionFee = _reflectionFee;\r\n        _outsideSellFees.reflectionFee = _reflectionFee;\r\n        _updatePairsFee();\r\n    }\r\n\r\n    // set liquify fee\r\n    function setLiquifyPercent(uint256 _liquifyFee) external onlyOwner {\r\n        _defaultFees.liquifyFee = _liquifyFee;\r\n        _defaultSellFees.liquifyFee = _liquifyFee;\r\n        _outsideBuyFees.liquifyFee = _liquifyFee;\r\n        _outsideSellFees.liquifyFee = _liquifyFee;\r\n        _updatePairsFee();\r\n    }\r\n\r\n    // set moonshot fee\r\n    function setMoonshotPercent(uint256 _moonshotFee) external onlyOwner {\r\n        _defaultFees.moonshotFee = _moonshotFee;\r\n        _defaultSellFees.moonshotFee = _moonshotFee;\r\n        _outsideBuyFees.moonshotFee = _moonshotFee;\r\n        _outsideSellFees.moonshotFee = _moonshotFee;\r\n        _updatePairsFee();\r\n    }\r\n\r\n    // set marketing fee\r\n    function setMarketingPercent(uint256 _marketingFee) external onlyOwner {\r\n        _defaultFees.marketingFee = _marketingFee;\r\n        _defaultSellFees.marketingFee = _marketingFee;\r\n        _outsideBuyFees.marketingFee = _marketingFee;\r\n        _outsideSellFees.marketingFee = _marketingFee;\r\n        _updatePairsFee();\r\n    }\r\n\r\n    // set buyback fee\r\n    function setBuyBackPercent(uint256 _burnFee) external onlyOwner {\r\n        _defaultFees.buybackFee = _burnFee;\r\n        _defaultSellFees.buybackFee = _burnFee;\r\n        _outsideBuyFees.buybackFee = _burnFee;\r\n        _outsideSellFees.buybackFee = _burnFee;\r\n        _updatePairsFee();\r\n    }\r\n\r\n//--------------------------------------BEGIN SET ADDRESS FUNCTIONS---------|\r\n\r\n    // manually set marketing address\r\n    function setMarketingAddress(address _marketing) external onlyOwner {\r\n        require(_marketing != address(0), \"PYE: Address Zero is not allowed\");\r\n        _defaultFees.marketingAddress = _marketing;\r\n        _defaultSellFees.marketingAddress = _marketing;\r\n        _sellFees.marketingAddress = _marketing;\r\n        _outsideBuyFees.marketingAddress = _marketing;\r\n        _outsideSellFees.marketingAddress = _marketing;\r\n    }\r\n\r\n    // manually set liquify address\r\n    function setLiquifyAddress(address _liquify) external onlyOwner {\r\n        require(_liquify != address(0), \"PYE: Address Zero is not allowed\");\r\n        _defaultFees.liquifyAddress = _liquify;\r\n        _defaultSellFees.liquifyAddress = _liquify;\r\n        _sellFees.liquifyAddress = _liquify;\r\n        _outsideBuyFees.liquifyAddress = _liquify;\r\n        _outsideSellFees.liquifyAddress = _liquify;\r\n    }\r\n\r\n    // manually set moonshot mechanism address\r\n    function updateMoonshotAddress(address payable newAddress) public onlyOwner {\r\n        require(newAddress != address(moonshot), \"The moonshot already has that address\");\r\n\r\n        MoonshotMechanism newMoonshot = MoonshotMechanism(newAddress);\r\n        moonshot = newMoonshot;\r\n\r\n        isTxLimitExempt[newAddress] = true;\r\n        _isExcludedFromFee[newAddress] = true;\r\n\r\n        moonshotAddress = newAddress;\r\n    }\r\n\r\n    function setNewStakingContract(address _newStakingContract) external onlyOwner {\r\n        stakingContract = (_newStakingContract);\r\n        StakingContract = IStakingContract(_newStakingContract);\r\n\r\n        isTxLimitExempt[_newStakingContract] = true;\r\n        _isExcludedFromFee[_newStakingContract] = true;\r\n        isStakingContract[_newStakingContract] = true;\r\n    }\r\n\r\n//--------------------------------------BEGIN SHARE FUNCTIONS---------|\r\n\r\n    function setStaked(address holder, uint256 amount) internal  {\r\n        if(amount > 0 && staked[holder].amount == 0){\r\n            addHolder(holder);\r\n        }else if(amount == 0 && staked[holder].amount > 0){\r\n            removeHolder(holder);\r\n        }\r\n\r\n        totalStaked = totalStaked.sub(staked[holder].amount).add(amount);\r\n        staked[holder].amount = amount;\r\n    }\r\n\r\n    function addHolder(address holder) internal {\r\n        holderIndexes[holder] = holders.length;\r\n        holders.push(holder);\r\n    }\r\n\r\n    function removeHolder(address holder) internal {\r\n        holders[holderIndexes[holder]] = holders[holders.length-1];\r\n        holderIndexes[holders[holders.length-1]] = holderIndexes[holder];\r\n        holders.pop();\r\n    }\r\n\r\n//--------------------------------------BEGIN BUYBACK FUNCTIONS---------|\r\n\r\n    // runs check to see if autobuyback should trigger\r\n    function shouldAutoBuyback(uint256 amount) internal view returns (bool) {\r\n        return msg.sender != pyeSwapPair\r\n        && !inSwap\r\n        && autoBuybackEnabled\r\n        && autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number // After N blocks from last buyback\r\n        && IERC20(address(WBNB)).balanceOf(address(this)) >= autoBuybackAmount\r\n        && amount >= minimumBuyBackThreshold;\r\n    }\r\n\r\n    // triggers auto buyback\r\n    function triggerAutoBuyback() internal {\r\n        buyTokens(autoBuybackAmount, _burnAddress);\r\n        autoBuybackBlockLast = block.number;\r\n        autoBuybackAccumulator = autoBuybackAccumulator.add(autoBuybackAmount);\r\n        if(autoBuybackAccumulator > autoBuybackCap){ autoBuybackEnabled = false; }\r\n    }\r\n\r\n    // logic to purchase moonforce tokens\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(this);\r\n\r\n        IERC20(WBNB).approve(address(pyeSwapRouter), amount);\r\n        pyeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // manually adjust the buyback settings to suit your needs\r\n    function setAutoBuybackSettings(bool _enabled, uint256 _cap, uint256 _amount, uint256 _period) external onlyOwner {\r\n        autoBuybackEnabled = _enabled;\r\n        autoBuybackCap = _cap;\r\n        autoBuybackAccumulator = 0;\r\n        autoBuybackAmount = _amount;\r\n        autoBuybackBlockPeriod = _period;\r\n        autoBuybackBlockLast = block.number;\r\n    }\r\n\r\n    // manually adjust minimumBuyBackThreshold Denominator. Threshold will be tTotal divided by Denominator. default 1000000 or .0001%\r\n    function setBuyBackThreshold(uint8 thresholdDenominator) external onlyOwner {\r\n        minimumBuyBackThreshold = _tTotal / thresholdDenominator;\r\n    }\r\n\r\n//--------------------------------------BEGIN ROUTER FUNCTIONS---------|\r\n\r\n    function updateRouterAndPair(address _router, address _pair) public onlyOwner {\r\n        _isExcludedFromFee[address(pyeSwapRouter)] = false;\r\n        _isExcludedFromFee[pyeSwapPair] = false;\r\n        pyeSwapRouter = IPYESwapRouter(_router);\r\n        pyeSwapPair = _pair;\r\n        WBNB = pyeSwapRouter.WETH();\r\n\r\n        _isExcludedFromFee[address(pyeSwapRouter)] = true;\r\n        _isExcludedFromFee[pyeSwapPair] = true;\r\n\r\n        _isPairAddress[pyeSwapPair] = true;\r\n        \r\n\r\n        isTxLimitExempt[pyeSwapPair] = true;\r\n        isTxLimitExempt[address(pyeSwapRouter)] = true;\r\n\r\n        pairs[0] = pyeSwapPair;\r\n        tokens[0] = WBNB;\r\n\r\n        IPYESwapPair(pyeSwapPair).updateTotalFee(getTotalFee());\r\n    }\r\n\r\n//--------------------------------------BEGIN TRANSFER FUNCTIONS---------|\r\n\r\n    // transfer fxn is explicitly stated to override the std. ERC-20 transfer fxn which uses \"to\" param, but\r\n    // MoonForce uses \"recipient\" param.\r\n    function transfer(address recipient, uint256 amount) public override(ERC20, IPYE) returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // transferFrom explicitly stated and overrides ERC-20 std becasue of variable name differences.\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override(ERC20, IPYE) returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n   function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!isBlacklisted[to]);\r\n        _beforeTokenTransfer(from, to, amount);\r\n        \r\n        checkTxLimit(from, amount);\r\n\r\n        if(shouldAutoBuyback(amount)){ triggerAutoBuyback(); }\r\n        if(_isPairAddress[to] && moonshot.shouldLaunchMoon(to, from)){ try moonshot.launchMoonshot() {} catch {} }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        uint8 takeFee = 0;\r\n        if(_isPairAddress[to] && from != address(pyeSwapRouter) && !isExcludedFromFee(from)) {\r\n            takeFee = 1;\r\n        } else if(_includeSwapFee[from] && !isExcludedFromFee(to)) {\r\n            takeFee = 2;\r\n        } else if(_includeSwapFee[to] && !isExcludedFromFee(from)) {\r\n            takeFee = 3;\r\n        }\r\n\r\n        //transfer amount, it will take tax\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, uint8 takeFee) private {\r\n        if(takeFee == 0) {\r\n            removeAllFee();\r\n        } else if(takeFee == 1) {\r\n            setSellFee();\r\n        } else if(takeFee == 2) {\r\n            setOutsideBuyFee();\r\n        } else if(takeFee == 3) {\r\n            setOutsideSellFee();\r\n        }\r\n\r\n        FeeValues memory _values = _getValues(amount);\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(_values.transferAmount);\r\n        _takeFees(_values);\r\n\r\n        if(isStakingContract[recipient]) { \r\n            uint256 newAmountAdd = staked[sender].amount.add(amount);\r\n            setStaked(sender, newAmountAdd);\r\n        }\r\n\r\n        if(isStakingContract[sender]) {\r\n            uint256 newAmountSub = staked[recipient].amount.sub(amount);\r\n            setStaked(recipient, newAmountSub);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, _values.transferAmount);\r\n\r\n        if(takeFee == 0 || takeFee == 1) {\r\n            restoreAllFee();\r\n        } else if(takeFee == 2 || takeFee == 3) {\r\n            restoreAllFee();\r\n            emit Transfer(sender, moonshotAddress, _values.reflection.add(_values.moonshots));\r\n            emit Transfer(sender, _defaultFees.marketingAddress, _values.marketing);\r\n            emit Transfer(sender, _burnAddress, _values.buyBack);\r\n            if(_values.liquify > 0) {\r\n                emit Transfer(sender, _defaultFees.liquifyAddress, _values.liquify);\r\n            }\r\n        }   \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"StakingContract\",\"outputs\":[{\"internalType\":\"contract IStakingContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_defaultFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moonshotFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquifyFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquifyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_defaultSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moonshotFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquifyFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquifyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPairAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOutsideSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToBlacklist\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"depositLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOwnedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moonshotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyeSwapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyeSwapRouter\",\"outputs\":[{\"internalType\":\"contract IPYESwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOutsideSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setAutoBuybackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyBackPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"thresholdDenominator\",\"type\":\"uint8\"}],\"name\":\"setBuyBackThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setIsStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquify\",\"type\":\"address\"}],\"name\":\"setLiquifyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquifyFee\",\"type\":\"uint256\"}],\"name\":\"setLiquifyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_moonshotFee\",\"type\":\"uint256\"}],\"name\":\"setMoonshotPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStakingContract\",\"type\":\"address\"}],\"name\":\"setNewStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"}],\"name\":\"setReflectionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateMoonshotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"updateRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MoonFORCE", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://69f25509296149e81364562cba766c5eeabe7308a12543e39cf927693fc5a7a1"}