{"SourceCode": "// Sources flattened with hardhat v2.16.0 https://hardhat.org\r\n\r\n// File contracts/FreeSpaceStaking.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IBEP20Metadata is IBEP20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract Free_Space_Staking {\r\n    struct PlayerDeposit {\r\n        uint256 amount;\r\n        uint256 totalWithdraw;\r\n        uint256 time;\r\n    }\r\n\r\n    struct Player {\r\n        address referral;\r\n        address[] referrers;\r\n        uint256 firstLevelDeposit;\r\n        uint256 dividends;\r\n        uint256 referral_bonus;\r\n        uint256 last_payout;\r\n        uint256 total_invested;\r\n        uint256 total_withdrawn;\r\n        uint256 total_referral_bonus;\r\n        uint8 reflevel;\r\n        PlayerDeposit[] deposits;\r\n        mapping(uint8 => uint256) referrals_per_level;\r\n        mapping(uint8 => uint256) deposit_per_level;\r\n    }\r\n\r\n    address payable public owner;\r\n    address payable private dev;\r\n\r\n    uint8 public investment_days;\r\n    uint256 public investment_perc;\r\n    uint256 public startRate;\r\n    uint256 public step;\r\n    uint256 public roundDuration;\r\n\r\n    uint256 public saleBalance;\r\n    bool public isActive = false;\r\n\r\n    IBEP20 public token;\r\n    IBEP20 public BUSD;\r\n\r\n    uint256 public total_investors;\r\n    uint256 public total_invested;\r\n    uint256 public total_withdrawn;\r\n    uint256 public total_referral_bonus;\r\n\r\n    uint256 public full_release;\r\n\r\n    uint8[7] private referral1 = [100, 100, 50, 0, 0, 0, 0];\r\n    uint8[7] private referral2 = [150, 150, 100, 50, 50, 0, 0];\r\n    uint8[7] private referral3 = [200, 150, 100, 100, 100, 50, 50];\r\n\r\n    mapping(address => Player) public players;\r\n\r\n    event Deposit(address indexed addr, uint256 amount);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event Reinvest(address indexed addr, uint256 amount);\r\n    event ReferralPayout(address indexed addr, uint256 amount, uint8 level);\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, address _busd) {\r\n        owner = payable(msg.sender);\r\n        dev = payable(0x6Bf78929052Bf6c3dC3e72AC6dBBdCd530a356a0);\r\n        token = IBEP20(_token);\r\n        startRate = 600000000000000000;\r\n        step = 300000000000000000;\r\n        roundDuration = 30 days;\r\n        BUSD = IBEP20(_busd); //busd contract\r\n        investment_days = 90; //Total 90 days\r\n        investment_perc = 1314; //Total 131.4 % for all investment_days\r\n\r\n        full_release = 1685566800;\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(\"BNB deposit not supported\");\r\n    }\r\n\r\n    function getCurrentRate() public view returns (uint256) {\r\n        if (block.timestamp < full_release) {\r\n            return startRate;\r\n        }\r\n        uint256 tdiff = (block.timestamp - full_release) / roundDuration;\r\n        return startRate + (step * tdiff);\r\n    }\r\n\r\n    function updateSaleBalance() external onlyOwner {\r\n        require(!isActive, \"Contract already active!!\");\r\n        saleBalance = token.balanceOf(address(this));\r\n        isActive = true;\r\n    }\r\n\r\n    function setContractState(bool value) external onlyOwner {\r\n        isActive = value;\r\n    }\r\n\r\n    function setStartRate(uint256 value) external onlyOwner {\r\n        startRate = value;\r\n    }\r\n\r\n    function setReleaseDate(uint256 value) external onlyOwner {\r\n        require(value > uint256(block.timestamp), \"invalid timestamp value\");\r\n        full_release = value;\r\n    }\r\n\r\n    function setStep(uint256 value) external onlyOwner {\r\n        step = value;\r\n    }\r\n\r\n    function setRoundDuration(uint256 value) external onlyOwner {\r\n        roundDuration = value;\r\n    }\r\n\r\n    function setInvestmentDays(uint8 value) external onlyOwner {\r\n        investment_days = value;\r\n    }\r\n\r\n    function setInvestmentPct(uint256 value) external onlyOwner {\r\n        investment_perc = value;\r\n    }\r\n\r\n    function setNewOwner(address _owner) external onlyOwner {\r\n        owner = payable(_owner);\r\n    }\r\n\r\n    function buyTokens(address _referral, uint256 _buyAmount) external {\r\n        require(\r\n            BUSD.allowance(msg.sender, address(this)) >= _buyAmount,\r\n            \"BUSD : Set allowance first!\"\r\n        );\r\n        bool success = BUSD.transferFrom(msg.sender, address(this), _buyAmount);\r\n        require(success, \"BUSD : Transfer failed\");\r\n        uint256 busd_dec = uint256(10) **\r\n            uint256(IBEP20Metadata(address(BUSD)).decimals());\r\n        uint256 token_dec = uint256(10) **\r\n            uint256(IBEP20Metadata(address(token)).decimals());\r\n        uint256 tokenAmount = (\r\n            ((_buyAmount * token_dec ** 2) / (busd_dec * getCurrentRate()))\r\n        );\r\n        saleBalance = saleBalance - tokenAmount;\r\n        BUSD.transfer(dev, (_buyAmount * 100000) / 1e6);\r\n        BUSD.transfer(owner, BUSD.balanceOf(address(this)));\r\n        _deposit(msg.sender, _referral, tokenAmount);\r\n    }\r\n\r\n    function deposit(address _referral, uint256 _amount) external {\r\n        require(isActive, \"Contract paused from manual deposit!!\");\r\n        require(\r\n            token.allowance(msg.sender, address(this)) >= _amount,\r\n            \"FRS : Set allowance first!\"\r\n        );\r\n        bool success = token.transferFrom(msg.sender, address(this), _amount);\r\n        require(success, \"FRS : Transfer failed\");\r\n        _deposit(msg.sender, _referral, _amount);\r\n    }\r\n\r\n    function _deposit(\r\n        address sender,\r\n        address _referral,\r\n        uint256 _amount\r\n    ) internal {\r\n        Player storage player = players[sender];\r\n        require(\r\n            _amount >= (1 ether) && _amount <= (100000 ether),\r\n            \"Amount between 1 and 100k only!!\"\r\n        );\r\n        require(player.deposits.length < 150, \"Max 150 deposits per address\");\r\n        require(uint256(block.timestamp) > full_release, \"Not launched\");\r\n        _setReferral(sender, _referral, _amount);\r\n\r\n        player.deposits.push(\r\n            PlayerDeposit({\r\n                amount: _amount,\r\n                totalWithdraw: 0,\r\n                time: uint256(block.timestamp)\r\n            })\r\n        );\r\n\r\n        if (player.total_invested == 0x0) {\r\n            total_investors += 1;\r\n        }\r\n\r\n        player.total_invested += _amount;\r\n        players[player.referral].firstLevelDeposit += _amount;\r\n\r\n        if (player.total_invested > 0 ether) {\r\n            player.reflevel = 1;\r\n        }\r\n        if (player.total_invested > 500 ether) {\r\n            player.reflevel = 2;\r\n        }\r\n        if (player.total_invested > 5000 ether) {\r\n            player.reflevel = 3;\r\n        }\r\n        total_invested += _amount;\r\n\r\n        emit Deposit(sender, _amount);\r\n    }\r\n\r\n    function _setReferral(\r\n        address _addr,\r\n        address _referral,\r\n        uint256 _amount\r\n    ) private {\r\n        if (players[_addr].referral == address(0)) {\r\n            if (_referral == address(0)) {\r\n                _referral = owner;\r\n            }\r\n\r\n            require(\r\n                (_referral != _addr &&\r\n                    players[_referral].total_invested != 0) ||\r\n                    _referral == owner,\r\n                \"Self referral prohibited/Only existing user as referral!!\"\r\n            );\r\n            players[_addr].referral = _referral;\r\n            players[_referral].referrers.push(_addr);\r\n\r\n            for (uint8 i = 0; i < 7; i++) {\r\n                players[_referral].referrals_per_level[i]++;\r\n                players[_referral].deposit_per_level[i] += _amount;\r\n                _referral = players[_referral].referral;\r\n                if (_referral == address(0) || _referral == owner) break;\r\n            }\r\n            return;\r\n        }\r\n        _referral = players[_addr].referral;\r\n        for (uint8 i = 0; i < 7; i++) {\r\n            players[_referral].deposit_per_level[i] += _amount;\r\n            _referral = players[_referral].referral;\r\n            if (_referral == address(0) || _referral == owner) break;\r\n        }\r\n    }\r\n\r\n    function _referralPayout(address _addr, uint256 _amount) private {\r\n        address ref = players[_addr].referral;\r\n\r\n        for (uint8 i = 0; i < 7; i++) {\r\n            if (ref == address(0)) break;\r\n            uint256 bonus;\r\n            if (players[ref].reflevel == 1) {\r\n                bonus = (_amount * referral1[i]) / 1000;\r\n            } else if (players[ref].reflevel == 2) {\r\n                bonus = (_amount * referral2[i]) / 1000;\r\n            } else if (players[ref].reflevel == 3) {\r\n                bonus = (_amount * referral3[i]) / 1000;\r\n            }\r\n\r\n            players[ref].referral_bonus += bonus;\r\n            players[ref].total_referral_bonus += bonus;\r\n            total_referral_bonus += bonus;\r\n\r\n            emit ReferralPayout(ref, bonus, (i + 1));\r\n            ref = players[ref].referral;\r\n        }\r\n    }\r\n\r\n    function withdraw() external {\r\n        require(uint256(block.timestamp) > full_release, \"Not launched\");\r\n        Player storage player = players[msg.sender];\r\n\r\n        _payout(msg.sender);\r\n\r\n        require(\r\n            player.dividends > 0 || player.referral_bonus > 0,\r\n            \"Zero amount\"\r\n        );\r\n\r\n        uint256 amount = player.dividends + player.referral_bonus;\r\n\r\n        player.dividends = 0;\r\n        player.referral_bonus = 0;\r\n        player.total_withdrawn += amount;\r\n        total_withdrawn += amount;\r\n\r\n        _referralPayout(msg.sender, amount);\r\n\r\n        token.transfer(msg.sender, amount);\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function _payout(address _addr) private {\r\n        uint256 payout = this.payoutOf(_addr);\r\n\r\n        if (payout > 0) {\r\n            _updateTotalPayout(_addr);\r\n            players[_addr].last_payout = uint256(block.timestamp);\r\n            players[_addr].dividends += payout;\r\n        }\r\n    }\r\n\r\n    function _updateTotalPayout(address _addr) private {\r\n        Player storage player = players[_addr];\r\n\r\n        for (uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n\r\n            uint256 time_end = dep.time + investment_days * 86400;\r\n            uint256 from = player.last_payout > dep.time\r\n                ? player.last_payout\r\n                : dep.time;\r\n            uint256 to = block.timestamp > time_end\r\n                ? time_end\r\n                : uint256(block.timestamp);\r\n\r\n            if (from < to) {\r\n                player.deposits[i].totalWithdraw +=\r\n                    (dep.amount * (to - from) * investment_perc) /\r\n                    investment_days /\r\n                    86400000;\r\n            }\r\n        }\r\n    }\r\n\r\n    function payoutOf(address _addr) external view returns (uint256 value) {\r\n        Player storage player = players[_addr];\r\n\r\n        for (uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n\r\n            uint256 time_end = dep.time + investment_days * 86400;\r\n            uint256 from = player.last_payout > dep.time\r\n                ? player.last_payout\r\n                : dep.time;\r\n            uint256 to = block.timestamp > time_end\r\n                ? time_end\r\n                : uint256(block.timestamp);\r\n\r\n            if (from < to) {\r\n                value +=\r\n                    (dep.amount * (to - from) * investment_perc) /\r\n                    investment_days /\r\n                    86400000;\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    function contractInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _total_invested,\r\n            uint256 _total_investors,\r\n            uint256 _total_withdrawn,\r\n            uint256 _total_referral_bonus\r\n        )\r\n    {\r\n        return (\r\n            total_invested,\r\n            total_investors,\r\n            total_withdrawn,\r\n            total_referral_bonus\r\n        );\r\n    }\r\n\r\n    function referralInfo(\r\n        address _addr\r\n    ) external view returns (address[] memory referral) {\r\n        Player storage player = players[_addr];\r\n        address[] memory _referral = new address[](player.referrers.length);\r\n        for (uint256 i = 0; i < player.referrers.length; i++) {\r\n            _referral[i] = player.referrers[i];\r\n        }\r\n        return _referral;\r\n    }\r\n\r\n    function displayLines(\r\n        address addr\r\n    )\r\n        external\r\n        view\r\n        returns (uint256[7] memory _addr, uint256[7] memory amount)\r\n    {\r\n        for (uint8 i = 0; i < 7; i++) {\r\n            _addr[i] = players[addr].referrals_per_level[i];\r\n            amount[i] = players[addr].deposit_per_level[i];\r\n        }\r\n\r\n        return (_addr, amount);\r\n    }\r\n\r\n    function userInfo(\r\n        address _addr\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 for_withdraw,\r\n            uint256 withdrawable_referral_bonus,\r\n            uint256 invested,\r\n            uint256 withdrawn,\r\n            uint256 referral_bonus,\r\n            uint256[8] memory referrals\r\n        )\r\n    {\r\n        Player storage player = players[_addr];\r\n        uint256 payout = this.payoutOf(_addr);\r\n\r\n        for (uint8 i = 0; i < 7; i++) {\r\n            referrals[i] = player.referrals_per_level[i];\r\n        }\r\n        return (\r\n            payout + player.dividends + player.referral_bonus,\r\n            player.referral_bonus,\r\n            player.total_invested,\r\n            player.total_withdrawn,\r\n            player.total_referral_bonus,\r\n            referrals\r\n        );\r\n    }\r\n\r\n    function investmentsInfo(\r\n        address _addr\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory endTimes,\r\n            uint256[] memory amounts,\r\n            uint256[] memory totalWithdraws\r\n        )\r\n    {\r\n        Player storage player = players[_addr];\r\n        uint256[] memory _endTimes = new uint256[](player.deposits.length);\r\n        uint256[] memory _amounts = new uint256[](player.deposits.length);\r\n        uint256[] memory _totalWithdraws = new uint256[](\r\n            player.deposits.length\r\n        );\r\n\r\n        for (uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n\r\n            _amounts[i] = dep.amount;\r\n            _totalWithdraws[i] = dep.totalWithdraw;\r\n            _endTimes[i] = dep.time + investment_days * 86400;\r\n        }\r\n        return (_endTimes, _amounts, _totalWithdraws);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"ReferralPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_investors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"displayLines\",\"outputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"_addr\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[7]\",\"name\":\"amount\",\"type\":\"uint256[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"full_release\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investment_days\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investment_perc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"investmentsInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"endTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalWithdraws\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstLevelDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"reflevel\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"referralInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"referral\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setContractState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"setInvestmentDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInvestmentPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setReleaseDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRoundDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStartRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_referral_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSaleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawable_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"referrals\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Free_Space_Staking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000915e6b333e4127406395759380779621f747777c000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://da47ccc841dd34ca9dad72b310edd1f3565987b43ca1875a0889d7b55055482f"}