{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BasicToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// https://ethereum.stackexchange.com/questions/115382/rules-on-choosing-a-solidity-version/115407\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract BasicToken is ERC20, ERC20Burnable, Pausable, Ownable, ReentrancyGuard {\\n\\n    uint256 private constant MAX_NR_FEE_RECIPIENTS = 10;\\n\\n    // All fees in this contract are expressed in basis points, which is 1/10000.\\n    // See https://www.investopedia.com/terms/b/basispoint.asp\\n    uint256 private constant MAX_BASIS_POINTS = 10000;\\n\\n    // A struct to hold data per fee recipient. A fee recipient is a wallet address that is\\n    // entitled to receive a fee for each transaction that occurs with this token.\\n    // uint16 buyFee - fee to apply on buy operations (against pancake)\\n    // uint16 sellFee - fee to apply on sell operations (against pancake)\\n    // bool exists -  Must always be true so we can test for the recipient to exist\\n    // bool swap - Set to true if the user will receive fees in BNB\\n    // uint256 amountToSwapDeposit - fee balance collected for the recipient and not yet swapped to BNB and paid\\n    struct FeeRecipient {\\n        uint16 buyFee;\\n        uint16 sellFee;\\n        bool exists;\\n        bool swap;\\n        uint256 amountToSwapDeposit;\\n    }\\n\\n    // Mapping and array with feeRecipients. Note that the mapping and array must be kept in sync.\\n    mapping(address => FeeRecipient) public feeRecipients;\\n\\n    // Array of feeRecipientAddresses so we can loop through them, that is not possible with the feeRecipients mapping\\n    address[] public feeRecipientAddresses;\\n\\n    // Mapping of nonFeePayers. We don't need to loop through them, therefore we don't need an array.\\n    mapping(address => bool) public nonFeePayers;\\n\\n    uint8 private intDecimals;\\n\\n    // Burn fee in basis points\\n    uint16 public burnFee;\\n\\n    // AutoLP fee (for buy and sell operations)\\n    uint16 public buyLiquidityFee;\\n    uint16 public sellLiquidityFee;\\n\\n    // The amount of tokens withhold by the contract that must be added to the liquidityPool (when higher than or equals to minLPDeposit)\\n    uint256 public liquidityFeeDeposit;\\n\\n    // The pancake router and pair\\n    IPancakeRouter public pancakeRouter;\\n    IPancakePair public pancakePair;\\n\\n    // Amount minted so far\\n    uint256 public mintedAmount;\\n\\n    // Amount burned so far\\n    uint256 public burnedSupply;\\n\\n    // Avoids paying fees recursively\\n    bool private noFeesApplied;\\n\\n    // Does owner pay fees?\\n    bool public ownerPaysFees = false;\\n\\n    // Maximum value for a transaction;\\n    // if higher, the transaction is reverted\\n    uint256 public maxBuyAmount;\\n    uint256 public maxSellAmount;\\n\\n    // Feature flags - can only be set by the constructor\\n    bool canMint;\\n    bool canBurn;\\n\\n    // ======\\n    // Events\\n    // ======\\n    event SetBurnFee(uint16 oldFee, uint16 newFee);\\n    event SetLiquidityFee(string feeType, uint16 newFee);\\n    event SetMinLPDeposit(uint256 minLPDeposit, uint256 newMinLpDeposit);\\n    event SetMinSwappedDeposit(uint256 minSwappedDeposit, uint256 newMinSwappedDeposit);\\n    event AddFeeRecipient(address recipient, uint16 buyFee, uint16 sellFee, bool swap);\\n    event SetMaxBuyAmount(uint256 oldFee, uint256 newFee);\\n    event SetMaxSellAmount(uint256 oldFee, uint256 newFee);\\n    event RemoveFeeRecipient(address recipient);\\n    event AddNonFeePayer(address recipient);\\n    event RemoveNonFeePayer(address recipient);\\n    event PayFeesInBnb(address recipient, uint256 bnbAmount);\\n\\n    // ===========\\n    // Constructor\\n    // ===========\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint256 mintAmount_,\\n        address controller_,\\n        uint16 burnFee_,\\n        uint16 liquidityFee_,\\n        address pancakeRouter_,\\n        bool canMint_,\\n        bool canBurn_\\n    ) ERC20(name_, symbol_) {\\n        // Mint an initial amount of tokens to the controller account\\n        _mint(controller_, mintAmount_);\\n\\n        intDecimals = decimals_;\\n\\n        // Store the amount minted, to be used in tracking burned amount\\n        mintedAmount = mintAmount_;\\n\\n        // Immediately transfer the ownership to the \\\"controller\\\"\\n        transferOwnership(controller_);\\n\\n        // Initialize state variables explicitly\\n        canMint = canMint_;\\n        canBurn = canBurn_;\\n\\n        // If canBurn is false, we set burnFee to 0\\n        burnFee = canBurn ? burnFee_ : 0;\\n\\n        buyLiquidityFee = liquidityFee_;\\n        sellLiquidityFee = liquidityFee_;\\n        maxBuyAmount = 0;\\n        maxSellAmount = 0;\\n        burnedSupply = 0;\\n\\n        // Create the pancake pair and write the address into the immutable contract variable\\n        // The pair created is between this token and the Wrapped Native token (wBnb really) in Pancake\\n        pancakeRouter = IPancakeRouter(pancakeRouter_);\\n        pancakePair = IPancakePair(IPancakeFactory(pancakeRouter.factory()).createPair(address(this), pancakeRouter.WETH()));\\n    }\\n\\n    // Set decimals specified in the constructor\\n    function decimals() public view override returns (uint8) {\\n        return intDecimals;\\n    }\\n\\n    // Receive BNB\\n    // Needed for pancake router to send us BNB when we swapToBNB\\n    receive() external payable {\\n    }\\n\\n    // =================\\n    // Transfer function\\n    // =================\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n    internal override\\n    whenNotPaused\\n    {\\n        // console.log(\\\"---- transfer header\\\");\\n        // console.log(\\\"BasicToken._transfer Sender/Recipient/Amunt\\\", sender, recipient, amount);\\n        // console.log(\\\"BasicToken._transfer Apply fees?\\\", !noFeesApplied);\\n        // console.log(\\\"BasicToken._transfer Balance in TK:\\\", balanceOf(address(this)));\\n        // console.log(\\\"BasicToken._transfer Balance BNB  :\\\", address(this).balance);\\n        // console.log(\\\"----\\\");\\n        \\n        uint256 amountRemaining = amount;\\n\\n        uint16 liquidityFee = getLiquidityFee(recipient);\\n\\n        // Check if limits exceed\\n        if (maxBuyAmount > 0 && isBuy(sender)) {\\n            // Buy transaction\\n            require(amount <= maxBuyAmount, \\\"maxBuyAmount Limit Exceeded\\\");\\n        } else if (maxSellAmount > 0 && isSell(recipient)) {\\n            // Sell transaction\\n            require(amount <= maxSellAmount, \\\"maxSellAmount Limit Exceeded\\\");\\n        }\\n\\n        // Shall we pay fees?\\n        // - Is sender or recipient in the nonFeePayers list?\\n        // - Is sender the contract itself? This could be a fee payment (and block reentrancy)\\n        // - Is sender or recipient the owner, assuming the ownerPaysFees=true ?\\n        // - Is noFeesApplied==false, to block re-entrancy?\\n        if (\\n            !nonFeePayers[sender]\\n            && !nonFeePayers[recipient]\\n            && sender != address(this)\\n            && (ownerPaysFees || (sender != owner() && recipient != owner()))\\n            && !noFeesApplied\\n        ) {\\n            // console.log(\\\"BasicToken._transfer distributing fees!\\\");\\n\\n            // How many tokens are paid in fees (for each fee type)\\n            uint256 fee;\\n            // How many tokens need to be swapped with Uniswap router\\n            uint256 toSwap = 0;\\n            // Whether addLiquidity must be done or not\\n            bool performAddLiquidity = false;\\n\\n            for (uint8 i = 0; i < feeRecipientAddresses.length; i++) {\\n                address feeRecipientAddress = feeRecipientAddresses[i];\\n\\n                FeeRecipient memory feeRecipient = feeRecipients[feeRecipientAddress];\\n                if (feeRecipient.exists) {\\n                    uint16 basisPoints = 0;\\n                    if (isSell(recipient)) {\\n                        basisPoints = feeRecipient.sellFee;\\n                    } else {\\n                        basisPoints = feeRecipient.buyFee;\\n                    }\\n                    fee = (amount * basisPoints) / MAX_BASIS_POINTS;\\n                    if (fee > 0 && fee <= amountRemaining) {\\n                        amountRemaining = amountRemaining - fee;\\n                        // Collect fees for payment in BNB\\n                        if (feeRecipient.swap) {\\n                            feeRecipients[feeRecipientAddress].amountToSwapDeposit += fee;                          \\n                            if (!isBuy(sender)) {\\n                                toSwap += feeRecipients[feeRecipientAddress].amountToSwapDeposit;\\n                            }\\n                            // console.log(\\\"feeRecipient accumulated fees (in token) with payment in BNB\\\", feeRecipientAddress, feeRecipients[feeRecipientAddress].amountToSwapDeposit);\\n                            feeRecipientAddress = address(this);\\n                        }\\n                        // console.log(\\\"Paying feeRecipient\\\");\\n                        super._transfer(sender, feeRecipientAddress, fee);\\n                        // console.log(\\\"BasicToken._transfer - Paying feeRecipient done\\\", feeRecipientAddress, fee);\\n                    }\\n                }\\n            }\\n            // Burn fees\\n            if (burnFee > 0) {\\n                fee = (amount * burnFee) / MAX_BASIS_POINTS;\\n                if (fee > 0 && fee <= amountRemaining) {\\n                    // console.log(\\\"Burning\\\");\\n                    _burn(sender, fee);\\n                    // console.log(\\\"Burning done\\\");\\n                    amountRemaining -= fee;\\n                    burnedSupply += fee;\\n                }\\n            }\\n            // First, transfer tokens into the contract, and update \\n            // liquidityFeeDeposit. Then try to swap and addLiquidity; if pre-flight (amountOut) is 0, tokens will be swapped next time\\n            // Note - swap and addLiquidity are done for any transfer except buy (to avoid uniswap reentrancy guard and failure). But even for buys, tokens are stored in the contract, waiting for a non-buy operation to add it as liquidity to the pool.\\n            if (liquidityFee > 0) {\\n                fee = (amount * liquidityFee) / MAX_BASIS_POINTS;\\n                if (fee > 0 && fee <= amountRemaining) {\\n                    // console.log(\\\"BasicToken._transfer - Sending liquidity fee\\\", fee);\\n                    super._transfer(sender, address(this), fee);\\n                    // console.log(\\\"BasicToken._transfer - Sending liquidity fee done\\\");\\n                    // Send the fee to this contract\\n                    amountRemaining -= fee;\\n                    liquidityFeeDeposit += fee;\\n                }\\n\\n                if (!isBuy(sender) && liquidityFeeDeposit > 0) {\\n                    toSwap += liquidityFeeDeposit / 2;\\n                    performAddLiquidity = true;\\n                    // console.log(\\\"BasicToken._transfer - Set performAddLiquidity=true, with deposit\\\", liquidityFeeDeposit);\\n                }\\n            }\\n\\n            // Swap some tokens to BNB, using the Uniswap Router\\n            // console.log(\\\"BasicToken._transfer - toSwap:\\\", toSwap);\\n            if (toSwap > 0) {\\n                payFeesInBnb(toSwap, performAddLiquidity);\\n            }\\n        }\\n        super._transfer(sender, recipient, amountRemaining);\\n        // console.log(\\\"BasicToken._transfer done\\\");\\n    }\\n\\n    // =========\\n    // Modifiers\\n    // =========\\n\\n    modifier doNotApplyFees {\\n        noFeesApplied = true;\\n        _;\\n        noFeesApplied = false;\\n    }\\n\\n    // ===============\\n    // Owner functions\\n    // ===============\\n\\n    function mint(uint256 mintAmount) external onlyOwner {\\n        require(canMint, \\\"Minting is not available\\\");\\n        require(mintAmount > 0, \\\"mintAmount must be higher than 0\\\");\\n        mintedAmount += mintAmount;\\n        _mint(owner(), mintAmount);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    // Add a new fee recipient with a fee of basisPoints\\n    function addFeeRecipient(address recipient, uint16 buyFee, uint16 sellFee, bool swap) external onlyOwner {\\n        require(recipient != address(0), \\\"Recipient cannot be 0\\\");\\n        require(!feeRecipients[recipient].exists, \\\"Recipient already exists\\\");\\n        require(buyFee != 0, \\\"Buy fee cannot be 0\\\");\\n        require(buyFee <= MAX_BASIS_POINTS, \\\"Buy fee cannot be greater than 10000\\\");\\n        require(sellFee != 0, \\\"Sell fee cannot be 0\\\");\\n        require(sellFee <= MAX_BASIS_POINTS, \\\"Sell fee cannot be greater than 10000\\\");\\n        require(feeRecipientAddresses.length < MAX_NR_FEE_RECIPIENTS, \\\"Max number of recipients reached\\\");\\n\\n        // Check if the total buy fees across all recipients is higher than 100%\\n        uint256 totalFees = buyFee + burnFee + buyLiquidityFee;\\n        for (uint8 i = 0; i < feeRecipientAddresses.length; i++) {\\n            address feeRecipientAddress = feeRecipientAddresses[i];\\n            FeeRecipient memory feeRecipient = feeRecipients[feeRecipientAddress];\\n            totalFees += feeRecipient.buyFee;\\n        }\\n        require(totalFees <= 10000, \\\"Reached 100% of buy fees!\\\");\\n\\n        // Check if the total sell fees across all recipients is higher than 100%\\n        totalFees = sellFee + burnFee + sellLiquidityFee;\\n        for (uint8 i = 0; i < feeRecipientAddresses.length; i++) {\\n            address feeRecipientAddress = feeRecipientAddresses[i];\\n            FeeRecipient memory feeRecipient = feeRecipients[feeRecipientAddress];\\n            totalFees += feeRecipient.sellFee;\\n        }\\n        require(totalFees <= 10000, \\\"Reached 100% of sell fees!\\\");\\n\\n        feeRecipients[recipient] = FeeRecipient(buyFee, sellFee, true, swap, 0);\\n        feeRecipientAddresses.push(recipient);\\n        emit AddFeeRecipient(recipient, buyFee, sellFee, swap);\\n    }\\n\\n    // Remove an existing fee recipient\\n    function removeFeeRecipient(address recipient) external onlyOwner {\\n        require(recipient != address(0), \\\"Recipient cannot be 0\\\");\\n        require(feeRecipients[recipient].exists, \\\"Recipient does not exist\\\");\\n        delete feeRecipients[recipient];\\n        emit RemoveFeeRecipient(recipient);\\n\\n        // Loop the array of addresses so we can remove the _recipient\\n        for (uint256 i = 0; i < feeRecipientAddresses.length; i++) {\\n            if (feeRecipientAddresses[i] != recipient) continue;\\n            if (i != feeRecipientAddresses.length - 1) {\\n                feeRecipientAddresses[i] = feeRecipientAddresses[feeRecipientAddresses.length - 1];\\n            }\\n            feeRecipientAddresses.pop();\\n        }\\n    }\\n\\n    function addNonFeePayer(address nonFeePayer) external onlyOwner {\\n        require(nonFeePayer != address(0), \\\"_nonFeePayer cannot be 0\\\");\\n        require(!nonFeePayers[nonFeePayer], \\\"_nonFeePayer already exists\\\");\\n        nonFeePayers[nonFeePayer] = true;\\n        emit AddNonFeePayer(nonFeePayer);\\n    }\\n\\n    function removeNonFeePayer(address nonFeePayer) external onlyOwner {\\n        require(nonFeePayer != address(0), \\\"_nonFeePayer cannot be 0\\\");\\n        require(nonFeePayers[nonFeePayer], \\\"_nonFeePayer does not exist\\\");\\n        nonFeePayers[nonFeePayer] = false;\\n        emit RemoveNonFeePayer(nonFeePayer);\\n    }\\n\\n    function setBurnFee(uint16 newBurnFee) external onlyOwner {\\n        require(canBurn, \\\"Burning is not available\\\");\\n        require(newBurnFee <= 10000, \\\"_burnFee cannot be greater than 10000\\\");\\n        emit SetBurnFee(burnFee, newBurnFee);\\n        burnFee = newBurnFee;\\n    }\\n\\n    function setLiquidityFee(uint16 newLiquidityFee) external onlyOwner {\\n        require(newLiquidityFee <= 10000, \\\"_liquidityFee cannot be greater than 10000\\\");\\n        emit SetLiquidityFee(\\\"all\\\", newLiquidityFee);\\n        buyLiquidityFee = newLiquidityFee;\\n        sellLiquidityFee = newLiquidityFee;\\n    }\\n\\n    function setBuyLiquidityFee(uint16 newLiquidityFee) external onlyOwner {\\n        require(newLiquidityFee <= 10000, \\\"_liquidityFee cannot be greater than 10000\\\");\\n        emit SetLiquidityFee(\\\"buy\\\", newLiquidityFee);\\n        buyLiquidityFee = newLiquidityFee;\\n    }\\n    function setSellLiquidityFee(uint16 newLiquidityFee) external onlyOwner {\\n        require(newLiquidityFee <= 10000, \\\"_liquidityFee cannot be greater than 10000\\\");\\n        emit SetLiquidityFee(\\\"sell\\\", newLiquidityFee);\\n        sellLiquidityFee = newLiquidityFee;\\n    }\\n\\n    function setMaxBuyAmount(uint256 newMaxBuyAmount) external onlyOwner {\\n        emit SetMaxBuyAmount(maxBuyAmount, newMaxBuyAmount);\\n        maxBuyAmount = newMaxBuyAmount;\\n    }\\n\\n    function setMaxSellAmount(uint256 newMaxSellAmount) external onlyOwner {\\n        emit SetMaxSellAmount(maxSellAmount, newMaxSellAmount);\\n        maxSellAmount = newMaxSellAmount;\\n    }\\n    \\n    function includeOwnerFromFees() external onlyOwner {\\n        ownerPaysFees = true;\\n    }\\n    function excludeOwnerFromFees() external onlyOwner {\\n        ownerPaysFees = false;\\n    }\\n\\n    // ==================\\n    // Internal functions\\n    // ==================\\n\\n    function payFeesInBnb(uint256 toSwap, bool performAddLiquidity) private doNotApplyFees {\\n        uint256 bnbAmount = swapToBNB(toSwap);\\n        // console.log(\\\"BasicToken._transfer - after swapToBNB\\\", bnbAmount);\\n        // console.log(\\\"BasicToken._transfer - BNB in contract\\\", address(this).balance);\\n        // Swap happened\\n        if (bnbAmount > 0) {    \\n            // Now we add liquidity to the pool\\n            if (performAddLiquidity) {\\n                uint256 halfLPFeeDeposit = liquidityFeeDeposit / 2;\\n                // console.log(\\\"BasicToken._transfer - perform addLiquidity\\\", liquidityFeeDeposit);\\n                require(this.approve(address(pancakeRouter), halfLPFeeDeposit), \\\"Approval 1 failed\\\");\\n                // console.log(\\\"BasicToken._transfer - Token in pool:\\\", halfLPFeeDeposit);\\n                uint256 lpBnbs = bnbAmount * halfLPFeeDeposit / toSwap;\\n                // console.log(\\\"BasicToken._transfer - BNBs in pool :\\\", lpBnbs);\\n\\n                // console.log(\\\"BasicToken._transfer - (LP) to pay \\\", lpBnbs);\\n                // console.log(\\\"BasicToken._transfer - (LP) balance\\\", address(this).balance);\\n\\n                pancakeRouter.addLiquidityETH{value: lpBnbs}(\\n                    address(this),          // Token\\n                        halfLPFeeDeposit,   // amountTokenDesired\\n                        0,                  // amountTokenMin\\n                        0,                  // amountETHMin\\n                        owner(),            // to\\n                    block.timestamp         // deadline\\n                );\\n                liquidityFeeDeposit = 0;\\n                // console.log(\\\"addLiquidity exit\\\");\\n            }\\n\\n            // Now we share BNBs with fee recipients\\n            // console.log(\\\"BasicToken.transfer - pay fees in BNB for recipients:\\\", feeRecipientAddresses.length);\\n            for (uint8 i = 0; i < feeRecipientAddresses.length; i++) {\\n                address feeRecipientAddress = feeRecipientAddresses[i];\\n                FeeRecipient memory feeRecipient = feeRecipients[feeRecipientAddress];\\n                if (feeRecipient.amountToSwapDeposit > 0) {\\n                    uint256 feeBnbAmount = bnbAmount * feeRecipient.amountToSwapDeposit / toSwap;\\n                    // console.log(\\\"BasicToken._transfer - Paying fees in BNB!\\\",feeRecipientAddress, feeRecipient.amountToSwapDeposit, feeBnbAmount);\\n                    if (feeBnbAmount > 0) {\\n                        // console.log(\\\"BasicToken._transfer - to pay \\\", feeBnbAmount);\\n                        // console.log(\\\"BasicToken._transfer - balance\\\", address(this).balance);\\n\\n                        (bool ret,) = payable(feeRecipientAddress).call{value: feeBnbAmount}(\\\"\\\");\\n                        require(ret, \\\"BasicToken._transfer - Payment of fees in BNBs failed\\\");\\n                        feeRecipients[feeRecipientAddress].amountToSwapDeposit = 0;\\n                        // console.log(\\\"Paid fees in BNB!\\\",feeRecipientAddress, feeBnbAmount);\\n                        emit PayFeesInBnb(feeRecipientAddress, feeBnbAmount);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    // Swaps an amount of this token to BNB using pancake swap\\n    function swapToBNB(uint256 amount) private returns (uint256 bnbAmount) {\\n        // Approve spending the tokens\\n        require(this.approve(address(pancakeRouter), amount), \\\"Approval 2 failed\\\");\\n        // Create the path variable that the pancake router requires\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = pancakeRouter.WETH();\\n\\n        // Preflight swap, check if the swap is expected to return more than 0 BNB\\n        uint[] memory amounts = pancakeRouter.getAmountsOut(amount, path);\\n\\n        if (amounts[1] > 0) {\\n            // Determine BNB openingBalance before the swap\\n            uint256 openingBalance = address(this).balance;\\n            // Execute the swap\\n            pancakeRouter.swapExactTokensForETH(\\n                amount, 0, path, address(this), block.timestamp\\n            );\\n            // Return the amount of BNB received\\n            return (address(this).balance - openingBalance);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getLiquidityFee(address receiver) private view returns (uint16 liquidityFee) {\\n        if (isSell(receiver)) {\\n            return sellLiquidityFee;\\n        }\\n        return buyLiquidityFee;\\n    }\\n\\n    function isBuy(address sender) internal view returns (bool isBuyFlag) {\\n        return sender == address(pancakePair);\\n    }\\n\\n    function isSell(address receiver) internal view returns (bool isSellFlag) {\\n        return receiver == address(pancakePair);\\n    }\\n\\n\\n}\\n\\n// ========================================================\\n// Pancake (Uniswap V2) Router, Factory and Pair interfaces\\n// ========================================================\\n\\ninterface IPancakeRouter {\\n    function WETH() external pure returns (address);\\n    function factory() external pure returns (address);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IPancakeFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IPancakePair { }\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"burnFee_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFee_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"pancakeRouter_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canMint_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"name\":\"AddFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"AddNonFeePayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"PayFeesInBnb\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"RemoveFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"RemoveNonFeePayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"SetBurnFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"SetLiquidityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"SetMaxBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"SetMaxSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLPDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinLpDeposit\",\"type\":\"uint256\"}],\"name\":\"SetMinLPDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSwappedDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinSwappedDeposit\",\"type\":\"uint256\"}],\"name\":\"SetMinSwappedDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"name\":\"addFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nonFeePayer\",\"type\":\"address\"}],\"name\":\"addNonFeePayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeOwnerFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeRecipientAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeRecipients\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountToSwapDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"includeOwnerFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonFeePayers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerPaysFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nonFeePayer\",\"type\":\"address\"}],\"name\":\"removeNonFeePayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newBurnFee\",\"type\":\"uint16\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"setBuyLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSellAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"setSellLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BasicToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000123a92f1abdbc000000000000000000000000006bf8379058437adca9db36c2022f3399491f071b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001b476c6f62616c20496e6e6f76617469766520536f6c7574696f6e73000000000000000000000000000000000000000000000000000000000000000000000000034753490000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}