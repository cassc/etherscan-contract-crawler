{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ChainEstateToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n \\npragma solidity >=0.8.0 <0.9.0;\\n \\nimport \\\"ERC20.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"Uniswap.sol\\\";\\n\\n/**\\n * @title Chain Estate DAO Token\\n * @dev Main contract for Chain Estate DAO\\n * TODO - Limit how many tokens users can purchase from PancakeSwap\\n * TODO - Will possibly create the BNB to CHES token PankcakeSwap pair in the constructor.\\n */\\ncontract ChainEstateToken is ERC20, Ownable {\\n\\n    // Mapping to exclude some contracts from fees. Transfers are excluded from fees if address in this mapping is recipient or sender.\\n    mapping (address => bool) public excludedFromFees;\\n\\n    // Mapping to determine the timestamp of each address' investment. Earlier average investment = better air drop rewards.\\n    mapping (address => uint256) public airDropInvestTime;\\n\\n    // Blacklist mapping to prevent addresses from trading if necessary (i.e. flagged for malicious activity).\\n    mapping (address => bool) public blacklist;\\n\\n    // Mapping to determine which addresses can mint Chain Estate tokens for bridging.\\n    mapping (address => bool) public minters;\\n\\n    // Address of the contract responsible for the air dropping mechanism.\\n    address public airDropContractAddress;\\n\\n    // Address of the contract for burning CHES tokens.\\n    address public burnWalletAddress;\\n\\n    // Real estate wallet address used to collect funds to purchase real estate.\\n    address payable public realEstateWalletAddress;\\n\\n    // Liquidity wallet address used to hold the 30% of CHES tokens for the liquidity pool.\\n    // After these coins are moved to the DEX, this address will no longer be used.\\n    address public liquidityWalletAddress;\\n\\n    // Marketing wallet address used for funding marketing.\\n    address payable public marketingWalletAddress;\\n\\n    // Developer wallet address used for funding the team.\\n    address payable public developerWalletAddress;\\n\\n    // The PancakeSwap router address for swapping CHES tokens for WBNB.\\n    address public uniswapRouterAddress;\\n\\n    // The initial block timestamp of the token contract.\\n    uint256 public initialTimeStamp;\\n\\n    // Real estate transaction fee - deployed at 3%.\\n    uint256 public realEstateTransactionFeePercent = 3;\\n\\n    // Developer team transaction fee - deployed at 1%.\\n    uint256 public developerFeePercent = 1;\\n\\n    // Marketing transaction fee - deployed at 1%.\\n    uint256 public marketingFeePercent = 1;\\n\\n    // PancakeSwap router interface.\\n    IUniswapV2Router02 private uniswapRouter;\\n\\n    // Address of the WBNB to CHES token pair on PancakeSwap.\\n    address public uniswapPair;\\n\\n    // Address of the token claim contract.\\n    address public tokenClaimContractAddress;\\n\\n    // Determines how many CHES tokens this contract needs before it swaps for WBNB to pay fee wallets.\\n    uint256 public contractCHESDivisor = 1000;\\n\\n    // Events to emit when the transaction fees are updated\\n    event realEstateTransactionFeeUpdated(uint256 indexed transactionFeeAmount);\\n    event marketingTransactionFeeUpdated(uint256 indexed transactionFeeAmount);\\n    event developerTransactionFeeUpdated(uint256 indexed transactionFeeAmount);\\n\\n    // Initial token distribution:\\n    // 35% - Air drop contract\\n    // 30% - Liquidity pool (6 month lockup period)\\n    // 20% - Burn\\n    // 10% - Developer coins (6 month lockup period)\\n    // 5% - Marketing\\n    constructor(\\n        uint256 initialSupply, \\n        address _airDropContractAddress, \\n        address _burnWalletAddress,\\n        address _liquidityWalletAddress,\\n        address payable _realEstateWalletAddress,\\n        address payable _marketingWalletAddress,\\n        address payable _developerWalletAddress,\\n        address _uniswapRouterAddress) ERC20(\\\"ChainEstateTokenV2\\\", \\\"CHES\\\") {\\n            initialTimeStamp = 1645566420;  // Initial timestamp for the CHES v1 token contract\\n            airDropContractAddress = _airDropContractAddress;\\n            realEstateWalletAddress = _realEstateWalletAddress;\\n            burnWalletAddress = _burnWalletAddress;\\n            liquidityWalletAddress = _liquidityWalletAddress;\\n            marketingWalletAddress = _marketingWalletAddress;\\n            developerWalletAddress = _developerWalletAddress;\\n            uniswapRouterAddress = _uniswapRouterAddress;\\n\\n            excludedFromFees[realEstateWalletAddress] = true;\\n            excludedFromFees[developerWalletAddress] = true;\\n            excludedFromFees[marketingWalletAddress] = true;\\n            excludedFromFees[liquidityWalletAddress] = true;\\n            excludedFromFees[airDropContractAddress] = true;    // No transaction fees for claiming air drop rewards\\n\\n            // The number of tokens claimed in the first airdrop for the v1 CHES token\\n            uint256 firstAirdropClaimAmount = 23366791 * 10 ** 18;\\n\\n            _mint(airDropContractAddress, ((initialSupply) * 35 / 100) - firstAirdropClaimAmount);\\n            _mint(liquidityWalletAddress, ((initialSupply) * 3 / 10) + firstAirdropClaimAmount);\\n            _mint(burnWalletAddress, initialSupply / 5);\\n            _mint(marketingWalletAddress, initialSupply * 5 / 100);\\n            _mint(developerWalletAddress, initialSupply / 10);\\n\\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(uniswapRouterAddress);\\n            uniswapRouter = _uniswapV2Router;\\n            _approve(address(this), address(uniswapRouter), initialSupply);\\n            uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n            IERC20(uniswapPair).approve(address(uniswapRouter), type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Returns the contract address\\n     * @return contract address\\n     */\\n    function getContractAddress() public view returns (address){\\n        return address(this);\\n    }\\n\\n    /**\\n    * @dev Adds a user to be excluded from fees.\\n    * @param user address of the user to be excluded from fees.\\n     */\\n    function excludeUserFromFees(address user) public onlyOwner {\\n        excludedFromFees[user] = true;\\n    }\\n\\n    /**\\n    * @dev Gets the current timestamp, used for testing + verification\\n    * @return the the timestamp of the current block\\n     */\\n    function getCurrentTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n    * @dev Removes a user from the fee exclusion.\\n    * @param user address of the user than will now have to pay transaction fees.\\n     */\\n    function includeUsersInFees(address user) public onlyOwner {\\n        excludedFromFees[user] = false;\\n    }\\n\\n    /**\\n     * @dev Overrides the BEP20 transfer function to include transaction fees.\\n     * @param recipient the recipient of the transfer\\n     * @param amount the amount to be transfered\\n     * @return bool representing if the transfer was successful\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        // Ensure the sender isn't blacklisted.\\n        require(!blacklist[_msgSender()], \\\"You have been blacklisted from trading the CHES token. If you think this is an error, please contact the Chain Estate DAO team.\\\");\\n        // Ensure the recipient isn't blacklisted.\\n        require(!blacklist[recipient], \\\"The address you are trying to send CHES to has been blacklisted from trading the CHES token. If you think this is an error, please contact the Chain Estate DAO team.\\\");\\n\\n        // Stops investors from owning more than 2% of the total supply from purchasing CHES from PancakeSwap.\\n        if (_msgSender() == uniswapPair && !excludedFromFees[_msgSender()] && !excludedFromFees[recipient]) {\\n            require((balanceOf(recipient) + amount) < (totalSupply() / 166), \\\"You can't have more than 2% of the total CHES supply after a PancakeSwap swap.\\\");\\n        }\\n\\n        // If the sender or recipient is excluded from fees, perform the default transfer.\\n        if (excludedFromFees[_msgSender()] || excludedFromFees[recipient]) {\\n            _transfer(_msgSender(), recipient, amount);\\n            return true;\\n        }\\n\\n        // Real estate transaction fee.\\n        uint256 realEstateFee = (amount * realEstateTransactionFeePercent) / 100;\\n        // Marketing team transaction fee.\\n        uint256 marketingFee = (amount * marketingFeePercent) / 100;\\n        // Developer team transaction fee.\\n        uint256 developerFee = (amount * developerFeePercent) / 100;\\n\\n        // The total fee to send to the contract address.\\n        uint256 totalFee = realEstateFee + marketingFee + developerFee;\\n \\n        // Sends the transaction fees to the contract address\\n        _transfer(_msgSender(), address(this), totalFee);\\n\\n        uint256 contractCHESBalance = balanceOf(address(this));\\n\\n        if (_msgSender() != uniswapPair) {\\n            if (contractCHESBalance > balanceOf(uniswapPair) / contractCHESDivisor) {\\n                swapCHESForBNB(contractCHESBalance);\\n            }\\n                \\n            uint256 contractBNBBalance = address(this).balance;\\n            if (contractBNBBalance > 0) {\\n                sendFeesToWallets(address(this).balance);\\n            }\\n        }\\n \\n        // Sends [initial amount] - [fees] to the recipient\\n        uint256 valueAfterFees = amount - totalFee;\\n        _transfer(_msgSender(), recipient, valueAfterFees);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Overrides the BEP20 transferFrom function to include transaction fees.\\n     * @param from the address from where the tokens are coming from\\n     * @param to the recipient of the transfer\\n     * @param amount the amount to be transfered\\n     * @return bool representing if the transfer was successful\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\\n        // Ensure the sender isn't blacklisted.\\n        require(!blacklist[_msgSender()], \\\"You have been blacklisted from trading the CHES token. If you think this is an error, please contact the Chain Estate DAO team.\\\");\\n        // Ensure the address where the tokens are coming from isn't blacklisted.\\n        require(!blacklist[from], \\\"The address you're trying to spend the tokens from has been blacklisted from trading the CHES token. If you think this is an error, please contact the Chain Estate DAO team.\\\");\\n        // Ensure the recipient isn't blacklisted.\\n        require(!blacklist[to], \\\"The address you are trying to send tokens to has been blacklisted from trading the CHES token. If you think this is an error, please contact the Chain Estate DAO team.\\\");\\n\\n        // If the from address or to address is excluded from fees, perform the default transferFrom.\\n        if (excludedFromFees[from] || excludedFromFees[to] || excludedFromFees[_msgSender()]) {\\n            _spendAllowance(from, _msgSender(), amount);\\n            _transfer(from, to, amount);\\n            return true;\\n        }\\n\\n        // Real estate transaction fee.\\n        uint256 realEstateFee = (amount * realEstateTransactionFeePercent) / 100;\\n        // Marketing team transaction fee.\\n        uint256 marketingFee = (amount * marketingFeePercent) / 100;\\n        // Developer team transaction fee.\\n        uint256 developerFee = (amount * developerFeePercent) / 100;\\n\\n        // The total fee to send to the contract address.\\n        uint256 totalFee = realEstateFee + marketingFee + developerFee;\\n \\n        // Sends the transaction fees to the contract address\\n        _spendAllowance(from, _msgSender(), amount);\\n        _transfer(from, address(this), totalFee);\\n\\n        uint256 contractCHESBalance = balanceOf(address(this));\\n\\n        if (_msgSender() != uniswapPair) {\\n            if (contractCHESBalance > balanceOf(uniswapPair) / contractCHESDivisor) {\\n                swapCHESForBNB(contractCHESBalance);\\n            }\\n                \\n            uint256 contractBNBBalance = address(this).balance;\\n            if (contractBNBBalance > 0) {\\n                sendFeesToWallets(address(this).balance);\\n            }\\n        }\\n \\n        // Sends [initial amount] - [fees] to the recipient\\n        uint256 valueAfterFees = amount - totalFee;\\n        _transfer(from, to, valueAfterFees);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Swaps CHES tokens from transaction fees to BNB.\\n     * @param amount the amount of CHES tokens to swap\\n     */\\n    function swapCHESForBNB(uint256 amount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapRouter.WETH();\\n        _approve(address(this), address(uniswapRouter), amount);\\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Sends BNB to transaction fee wallets after CHES swaps.\\n     * @param amount the amount to be transfered\\n     */\\n    function sendFeesToWallets(uint256 amount) private {\\n        uint256 totalFee = realEstateTransactionFeePercent + marketingFeePercent + developerFeePercent;\\n        realEstateWalletAddress.transfer((amount * realEstateTransactionFeePercent) / totalFee);\\n        marketingWalletAddress.transfer((amount * marketingFeePercent) / totalFee);\\n        developerWalletAddress.transfer((amount * developerFeePercent) / totalFee);\\n    }\\n\\n    /**\\n     * @dev Sends BNB to transaction fee wallets manually as opposed to happening automatically after a certain level of volume\\n     */\\n    function disperseFeesManually() public onlyOwner {\\n        uint256 contractBNBBalance = address(this).balance;\\n        sendFeesToWallets(contractBNBBalance);\\n    }\\n\\n    /**\\n     * @dev Swaps all CHES tokens in the contract for BNB and then disperses those funds to the transaction fee wallets.\\n     * @param amount the amount of CHES in the contract to swap for BNB\\n     * @param useAmount boolean to determine if the amount sent in is swapped for BNB or if the entire contract balance is swapped.\\n     */\\n    function swapCHESForBNBManually(uint256 amount, bool useAmount) public onlyOwner {\\n        if (useAmount) {\\n            swapCHESForBNB(amount);\\n        }\\n        else {\\n            uint256 contractCHESBalance = balanceOf(address(this));\\n            swapCHESForBNB(contractCHESBalance);\\n        }\\n\\n        uint256 contractBNBBalance = address(this).balance;\\n        sendFeesToWallets(contractBNBBalance);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Sets the value that determines how many CHES tokens need to be in the contract before it's swapped for BNB.\\n     * @param newDivisor the new divisor value to determine the swap threshold\\n     */\\n    function setContractCHESDivisor(uint256 newDivisor) public onlyOwner {\\n        contractCHESDivisor = newDivisor;\\n    }\\n\\n    /**\\n     * @dev After a token transfer, update the recipient address's air drop invest time since they have a later investment now.\\n     * @param from the sender's address\\n     * @param to the recipient's address\\n     * @param value the amount that was transferred\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 value) internal virtual override {\\n        uint256 userBalance = balanceOf(to);\\n        if (to != address(0)) {\\n            airDropInvestTime[to] = (value * block.timestamp + (userBalance - value) * airDropInvestTime[to]) / userBalance;\\n        }\\n\\n        super._afterTokenTransfer(from, to, value);\\n    }\\n\\n    /**\\n    * @dev Updates the blacklist mapping for a given address\\n    * @param user the address that is being added or removed from the blacklist\\n    * @param blacklisted a boolean that determines if the given address is being added or removed from the blacklist\\n    */\\n    function updateBlackList(address user, bool blacklisted) public onlyOwner {\\n        blacklist[user] = blacklisted;\\n    }\\n\\n    /**\\n    * @dev Function to update the real estate transaction fee - can't be more than 20 percent\\n    * @param newRealEstateTransactionFee the new real estate transaction fee\\n    */\\n    function updateRealEstateTransactionFee(uint256 newRealEstateTransactionFee) public onlyOwner {\\n        require(newRealEstateTransactionFee <= 20, \\\"The real estate transaction fee can't be more than 20%.\\\");\\n        realEstateTransactionFeePercent = newRealEstateTransactionFee;\\n        emit realEstateTransactionFeeUpdated(newRealEstateTransactionFee);\\n    }\\n\\n    /**\\n    * @dev Function to update the marketing transaction fee - can't be more than 5 percent\\n    * @param newMarketingTransactionFee the new marketing transaction fee\\n    */\\n    function updateMarketingTransactionFee(uint256 newMarketingTransactionFee) public onlyOwner {\\n        require(newMarketingTransactionFee <= 5, \\\"The marketing transaction fee can't be more than 5%.\\\");\\n        marketingFeePercent = newMarketingTransactionFee;\\n        emit marketingTransactionFeeUpdated(newMarketingTransactionFee);\\n    }\\n\\n    /**\\n    * @dev Function to update the developer transaction fee - can't be more than 5 percent\\n    * @param newDeveloperTransactionFee the new developer transaction fee\\n    */\\n    function updateDeveloperTransactionFee(uint256 newDeveloperTransactionFee) public onlyOwner {\\n        require(newDeveloperTransactionFee <= 5, \\\"The developer transaction fee can't be more than 5%.\\\");\\n        developerFeePercent = newDeveloperTransactionFee;\\n        emit developerTransactionFeeUpdated(newDeveloperTransactionFee);\\n    }\\n\\n    /**\\n    * @dev Function to add or remove a CHES token minter\\n    * @param user the address that will be added or removed as a minter\\n    * @param isMinter boolean representing if the address provided will be added or removed as a minter\\n    */\\n    function updateMinter(address user, bool isMinter) public onlyOwner {\\n        minters[user] = isMinter;\\n    }\\n\\n    /**\\n    * @dev Minter only function to mint new CHES tokens for bridging\\n    * @param user the address that the tokens will be minted to\\n    * @param amount the amount of tokens to be minted to the user\\n    */\\n    function mint(address user, uint256 amount) public {\\n        require(minters[_msgSender()], \\\"You are not authorized to mint CHES tokens.\\\");\\n        _mint(user, amount);\\n    }\\n\\n    /**\\n    * @dev Minter only function to burn CHES tokens for bridging\\n    * @param user the address to burn the tokens from\\n    * @param amount the amount of tokens to be burned\\n    */\\n    function burn(address user, uint256 amount) public {\\n        require(minters[_msgSender()], \\\"You are not authorized to burn CHES tokens.\\\");\\n        _burn(user, amount);\\n    }\\n\\n    /**\\n    * @dev Function that only the token claim contract can call to set the airdrop invest time for a user when claiming their V2 tokens.\\n    * @param user the address to set the airdrop invest time for\\n    * @param airDropInvestTimeVal the airdrop invest time for the user\\n    */\\n    function setAirDropInvestTime(address user, uint256 airDropInvestTimeVal) public {\\n        require(msg.sender == tokenClaimContractAddress, \\\"Only the token claim contract can call this function.\\\");\\n        airDropInvestTime[user] = airDropInvestTimeVal;\\n    }\\n\\n    /**\\n    * @dev Only owner function to set the token claim contract address.\\n    * @param tokenClaimAddress the token claim contract address\\n    */\\n    function setTokenClaimContractAddress(address tokenClaimAddress) public onlyOwner {\\n        tokenClaimContractAddress = tokenClaimAddress;\\n    }\\n}\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Uniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"ChainEstateToken.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_airDropContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_realEstateWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketingWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_developerWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionFeeAmount\",\"type\":\"uint256\"}],\"name\":\"developerTransactionFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionFeeAmount\",\"type\":\"uint256\"}],\"name\":\"marketingTransactionFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionFeeAmount\",\"type\":\"uint256\"}],\"name\":\"realEstateTransactionFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airDropContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airDropInvestTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCHESDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disperseFeesManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"excludeUserFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"includeUsersInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realEstateTransactionFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realEstateWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"airDropInvestTimeVal\",\"type\":\"uint256\"}],\"name\":\"setAirDropInvestTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDivisor\",\"type\":\"uint256\"}],\"name\":\"setContractCHESDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenClaimAddress\",\"type\":\"address\"}],\"name\":\"setTokenClaimContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useAmount\",\"type\":\"bool\"}],\"name\":\"swapCHESForBNBManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenClaimContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"updateBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDeveloperTransactionFee\",\"type\":\"uint256\"}],\"name\":\"updateDeveloperTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingTransactionFee\",\"type\":\"uint256\"}],\"name\":\"updateMarketingTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMinter\",\"type\":\"bool\"}],\"name\":\"updateMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRealEstateTransactionFee\",\"type\":\"uint256\"}],\"name\":\"updateRealEstateTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ChainEstateToken", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce800000000000000000000000000000023deef6e65ca223ae56e1927912d94e1217a27d3000000000000000000000000000000000000000000000000000000000000dead000000000000000000000000b164eb7844f3a05fd3ef01cf05ac4961a74d47ff000000000000000000000000965c421073f0ad56a11b2e3afb80c451038f61780000000000000000000000004abac87eec0ad0932b71037b5d1fc88b7ac2defd0000000000000000000000009406b17de6949ab3f32e7c6044b0b29e1987f9ab00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}