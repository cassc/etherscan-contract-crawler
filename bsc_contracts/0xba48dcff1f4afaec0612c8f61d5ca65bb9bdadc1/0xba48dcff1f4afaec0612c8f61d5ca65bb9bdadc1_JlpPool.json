{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/JlpPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\r\\nimport \\\"../libraries/access/Ownable.sol\\\";\\r\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../libraries/utils/Address.sol\\\";\\r\\nimport \\\"../libraries/utils/Pausable.sol\\\";\\r\\nimport \\\"../libraries/token/IERC20.sol\\\";\\r\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\r\\nimport \\\"../core/interfaces/IJlpManager.sol\\\";\\r\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title JlpPool\\r\\n * @notice Distribute exchange profits among JLP holders.\\r\\n */\\r\\ncontract JlpPool is ReentrancyGuard, Pausable, Ownable {\\r\\n    //---------- Libraries ----------//\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address payable;\\r\\n\\r\\n    //---------- Contracts ----------//\\r\\n    IERC20 public immutable JLP; // JLP token contract.\\r\\n    IJlpManager public immutable jlpManager; // JlpManager token contract.\\r\\n    IWETH public immutable WETH; // JlpManager token contract.\\r\\n\\r\\n    //---------- Variables ----------//\\r\\n    uint256 public constant cooldownDuration = 15 minutes; // Duration to be elapsed beetwen stake and unstake.\\r\\n    uint256 public totalHolders; // Total wallets in pool.\\r\\n    uint256 public totalDistributed; // Total BNB distributed to holders.\\r\\n    uint256 public totalStaked; // Total balance in stake.\\r\\n    uint256 private pointsXtoken; // Shared points per token.\\r\\n    uint256 private unclaimedTokens; // Tokens not claimed.\\r\\n    uint256 private processedTokens; // Store the processed tokens.\\r\\n    uint256 private initialBLock; // Initial block for calculate rewards per block.\\r\\n    uint256 private lastBlock; // Last block distribution for calculate rewards per block.\\r\\n\\r\\n    //---------- Storage -----------//\\r\\n    struct Wallet {\\r\\n        // Tokens amount staked.\\r\\n        uint256 stakedBal;\\r\\n        // Date in timestamp.\\r\\n        uint256 lastAddedAt;\\r\\n        // shared points.\\r\\n        uint256 tokenPoints;\\r\\n        // pending rewards.\\r\\n        uint256 pendingTokenbal;\\r\\n    }\\r\\n\\r\\n    mapping(address => Wallet) private stakeHolders; // Struct map of wallets in pool.\\r\\n    mapping(address => bool) private cooldownExcluded; // Exclusions for cooldown duration.\\r\\n\\r\\n    //---------- Events -----------//\\r\\n    event Deposit(uint256 amount, uint256 totalStaked);\\r\\n    event Withdrawn(address indexed payee, uint256 amount);\\r\\n    event AddedPoints(address indexed wallet, uint256 amount);\\r\\n    event RemovedPoints(address indexed wallet, uint256 amount);\\r\\n\\r\\n    event AddLiquidity(\\r\\n        address account,\\r\\n        address token,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    event RemoveLiquidity(\\r\\n        address account,\\r\\n        address token,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    //---------- Constructor ----------//\\r\\n    constructor(\\r\\n        address weth_,\\r\\n        address jlp_,\\r\\n        address jlpManager_\\r\\n    ) public {\\r\\n        WETH = IWETH(weth_);\\r\\n        JLP = IERC20(jlp_);\\r\\n        jlpManager = IJlpManager(jlpManager_);\\r\\n        initialBLock = block.number;\\r\\n        lastBlock = block.number;\\r\\n    }\\r\\n\\r\\n    //----------- Internal Functions -----------//\\r\\n    /**\\r\\n     * @notice Check the reward amount.\\r\\n     * @param wallet_ Address of the wallet to check.\\r\\n     * @return Amount of reward.\\r\\n     */\\r\\n    function _getRewards(address wallet_) private view returns (uint256) {\\r\\n        uint256 newTokenPoints = pointsXtoken.sub(\\r\\n            stakeHolders[wallet_].tokenPoints\\r\\n        );\\r\\n        return (stakeHolders[wallet_].stakedBal.mul(newTokenPoints)).div(10e18);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Process pending rewards from a wallet.\\r\\n     * @param wallet_ address of the wallet to be processed.\\r\\n     */\\r\\n    function _processRewards(address wallet_) private {\\r\\n        uint256 rewards = _getRewards(wallet_);\\r\\n        if (rewards > 0) {\\r\\n            unclaimedTokens = unclaimedTokens.sub(rewards);\\r\\n            processedTokens = processedTokens.add(rewards);\\r\\n            stakeHolders[wallet_].tokenPoints = pointsXtoken;\\r\\n            stakeHolders[wallet_].pendingTokenbal = stakeHolders[wallet_]\\r\\n                .pendingTokenbal\\r\\n                .add(rewards);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw pending rewards from a wallet.\\r\\n     * @param _wallet address of the wallet to withdraw.\\r\\n     */\\r\\n    function _harvest(address payable _wallet) private {\\r\\n        _processRewards(_wallet);\\r\\n        uint256 amount = stakeHolders[_wallet].pendingTokenbal;\\r\\n        if (amount > 0) {\\r\\n            stakeHolders[_wallet].pendingTokenbal = 0;\\r\\n            processedTokens = processedTokens.sub(amount);\\r\\n            _wallet.sendValue(amount);\\r\\n            emit Withdrawn(_wallet, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compund pending rewards from a wallet.\\r\\n     * @param _wallet address of the wallet to make compound.\\r\\n     */\\r\\n    function _compound(address payable _wallet) private {\\r\\n        _processRewards(_wallet);\\r\\n        uint256 amount = stakeHolders[_wallet].pendingTokenbal;\\r\\n        if (amount > 0) {\\r\\n            stakeHolders[_wallet].pendingTokenbal = 0;\\r\\n            processedTokens = processedTokens.sub(amount);\\r\\n            WETH.deposit{value: amount}();\\r\\n            IERC20(address(WETH)).approve(address(jlpManager), amount);\\r\\n            uint256 jlpAmount = jlpManager.addLiquidityForAccount(\\r\\n                address(this),\\r\\n                address(this),\\r\\n                address(WETH),\\r\\n                amount,\\r\\n                0,\\r\\n                0\\r\\n            );\\r\\n            stakeHolders[_wallet].stakedBal = stakeHolders[_wallet]\\r\\n                .stakedBal\\r\\n                .add(jlpAmount);\\r\\n            totalStaked = totalStaked.add(jlpAmount);\\r\\n            emit AddedPoints(_wallet, jlpAmount);            \\r\\n            emit AddLiquidity(_wallet, address(WETH), amount, jlpAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a wallet to stake for the first time.\\r\\n     * @param wallet_ address of the wallet to add.\\r\\n     * @param amount_ amount to add.\\r\\n     */\\r\\n    function _initStake(address wallet_, uint256 amount_) private {\\r\\n        Wallet storage w = stakeHolders[wallet_];\\r\\n        w.tokenPoints = pointsXtoken;\\r\\n        w.lastAddedAt = block.timestamp;\\r\\n        w.stakedBal = amount_;\\r\\n        totalStaked = totalStaked.add(amount_);\\r\\n        totalHolders = totalHolders.add(1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add more tokens to stake from an existing wallet.\\r\\n     * @param wallet_ address of the wallet.\\r\\n     * @param amount_ amount to add.\\r\\n     */\\r\\n    function _addStake(address wallet_, uint256 amount_) private {\\r\\n        _processRewards(wallet_);\\r\\n        stakeHolders[wallet_].stakedBal = stakeHolders[wallet_].stakedBal.add(\\r\\n            amount_\\r\\n        );\\r\\n        stakeHolders[wallet_].lastAddedAt = block.timestamp;\\r\\n        totalStaked = totalStaked.add(amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check the reward amount of a specific token plus the processed balance.\\r\\n     * @param wallet_ Address of the wallet to check.\\r\\n     * @return Amount of reward plus the processed for that token.\\r\\n     */\\r\\n    function _getPendingBal(address wallet_) private view returns (uint256) {\\r\\n        uint256 newTokenPoints = pointsXtoken.sub(\\r\\n            stakeHolders[wallet_].tokenPoints\\r\\n        );\\r\\n        uint256 pending = stakeHolders[wallet_].pendingTokenbal;\\r\\n        return\\r\\n            (stakeHolders[wallet_].stakedBal.mul(newTokenPoints))\\r\\n                .div(10e18)\\r\\n                .add(pending);\\r\\n    }\\r\\n\\r\\n    function _validateCooldown(address _wallet) private view returns (bool) {\\r\\n        if (cooldownExcluded[_wallet]) {\\r\\n            return true;\\r\\n        }\\r\\n        return\\r\\n            stakeHolders[_wallet].lastAddedAt.add(cooldownDuration) <=\\r\\n            block.timestamp;\\r\\n    }\\r\\n\\r\\n    //----------- External Functions -----------//\\r\\n    /**\\r\\n     * @dev Disallows direct send by setting a default function without the `payable` flag.\\r\\n     */\\r\\n    fallback() external {}\\r\\n\\r\\n    receive() external payable {\\r\\n        require(msg.sender == address(WETH), \\\"JlpPool: invalid sender\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit BNB.\\r\\n     */\\r\\n    function deposit() external payable nonReentrant {\\r\\n        uint256 amount = msg.value;\\r\\n        require(totalStaked > 0 && amount >= 1000000, \\\"Invalid deposit\\\");\\r\\n        pointsXtoken = pointsXtoken.add(amount.mul(10e18).div(totalStaked));\\r\\n        unclaimedTokens = unclaimedTokens.add(amount);\\r\\n        totalDistributed = totalDistributed.add(amount);\\r\\n        lastBlock = block.number;\\r\\n        emit Deposit(amount, totalStaked);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if a wallet address is in stake.\\r\\n     * @return Boolean if in stake or not.\\r\\n     */\\r\\n    function isInPool(address wallet_) public view returns (bool) {\\r\\n        return stakeHolders[wallet_].stakedBal > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check amount of BNB per block for APY calculation.\\r\\n     * @return uint256 amount of BNB per block.\\r\\n     */\\r\\n    function getRewardsXblock() public view returns (uint256) {\\r\\n        if (initialBLock == lastBlock) return 0;\\r\\n        uint256 elapsedBlocks = lastBlock.sub(initialBLock);\\r\\n        return totalDistributed.div(elapsedBlocks);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check the reward amount plus the processed balance.\\r\\n     * @param wallet_ Address of the wallet to check.\\r\\n     * @return Amount of reward plus the processed for that token.\\r\\n     */\\r\\n    function getPendingBal(address wallet_) public view returns (uint256) {\\r\\n        uint256 newTokenPoints = pointsXtoken.sub(\\r\\n            stakeHolders[wallet_].tokenPoints\\r\\n        );\\r\\n        uint256 pending = stakeHolders[wallet_].pendingTokenbal;\\r\\n        return\\r\\n            (stakeHolders[wallet_].stakedBal.mul(newTokenPoints))\\r\\n                .div(10e18)\\r\\n                .add(pending);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check the info of stake for a wallet.\\r\\n     * @param wallet_ Address of the wallet to check.\\r\\n     * @return stakedBal amount of tokens staked.\\r\\n     * @return lastAddedAt date in timestamp of the last deposit.\\r\\n     * @return rewards amount of rewards plus the processed.\\r\\n     */\\r\\n    function getWalletInfo(address wallet_)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 stakedBal,\\r\\n            uint256 lastAddedAt,\\r\\n            uint256 rewards\\r\\n        )\\r\\n    {\\r\\n        Wallet storage w = stakeHolders[wallet_];\\r\\n        return (w.stakedBal, w.lastAddedAt, getPendingBal(wallet_));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake tokens to receive rewards.\\r\\n     * @param _token token to deposit.\\r\\n     * @param _amount Amount of tokens to deposit.\\r\\n     * @param _minUsdj Min value of USDJ.\\r\\n     * @param _minJlp  Min value of JLP.\\r\\n     */\\r\\n    function stake(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _minUsdj,\\r\\n        uint256 _minJlp\\r\\n    ) external whenNotPaused nonReentrant {\\r\\n        require(_amount > 0, \\\"Zero amount\\\");\\r\\n        address account = _msgSender();\\r\\n        uint256 jlpAmount = jlpManager.addLiquidityForAccount(\\r\\n            account,\\r\\n            address(this),\\r\\n            _token,\\r\\n            _amount,\\r\\n            _minUsdj,\\r\\n            _minJlp\\r\\n        );\\r\\n        require(jlpAmount >= 1 gwei, \\\"JLP too low\\\");\\r\\n        if (isInPool(account)) {\\r\\n            _addStake(account, jlpAmount);\\r\\n        } else {\\r\\n            _initStake(account, jlpAmount);\\r\\n        }\\r\\n        emit AddedPoints(account, jlpAmount);\\r\\n        emit AddLiquidity(account, _token, _amount, jlpAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Stake tokens to receive rewards.\\r\\n     * @param _minUsdj Min value of USDJ.\\r\\n     * @param _minJlp  Min value of JLP.\\r\\n     */\\r\\n    function stakeETH(uint256 _minUsdj, uint256 _minJlp)\\r\\n        external\\r\\n        payable\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint256 amount = msg.value;\\r\\n        require(amount > 0, \\\"Zero amount\\\");\\r\\n\\r\\n        WETH.deposit{value: amount}();\\r\\n        IERC20(address(WETH)).approve(address(jlpManager), amount);\\r\\n\\r\\n        address account = _msgSender();\\r\\n        uint256 jlpAmount = jlpManager.addLiquidityForAccount(\\r\\n            address(this),\\r\\n            address(this),\\r\\n            address(WETH),\\r\\n            amount,\\r\\n            _minUsdj,\\r\\n            _minJlp\\r\\n        );\\r\\n        require(jlpAmount >= 1 gwei, \\\"JLP too low\\\");\\r\\n        if (isInPool(account)) {\\r\\n            _addStake(account, jlpAmount);\\r\\n        } else {\\r\\n            _initStake(account, jlpAmount);\\r\\n        }\\r\\n        emit AddedPoints(account, jlpAmount);\\r\\n        emit AddLiquidity(account, address(WETH), amount, jlpAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw rewards.\\r\\n     */\\r\\n    function harvest() external nonReentrant {\\r\\n        require(isInPool(_msgSender()), \\\"Not in pool\\\");\\r\\n        _harvest(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Compound rewards.\\r\\n     */\\r\\n    function compound() external nonReentrant {\\r\\n        require(isInPool(_msgSender()), \\\"Not in pool\\\");\\r\\n        _compound(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw tokens from pool.\\r\\n     */\\r\\n    function withdrawn(\\r\\n        address _tokenOut,\\r\\n        uint256 _flpAmount,\\r\\n        uint256 _minOut,\\r\\n        address _receiver\\r\\n    ) external nonReentrant returns (uint256) {\\r\\n        address payable account = _msgSender();\\r\\n        uint256 amount = _flpAmount;\\r\\n        require(isInPool(account), \\\"Not in pool\\\");\\r\\n        require(amount > 0, \\\"Zero amount\\\");\\r\\n        require(_validateCooldown(account), \\\"Cooldown duration not yet passed\\\");\\r\\n        _harvest(account);\\r\\n        uint256 stakedBal = stakeHolders[account].stakedBal;\\r\\n        bool unStake = amount >= stakedBal;\\r\\n        amount = unStake ? stakedBal : amount;\\r\\n        if (unStake) {\\r\\n            delete stakeHolders[account];\\r\\n            totalHolders = totalHolders.sub(1);\\r\\n        } else {\\r\\n            stakeHolders[account].stakedBal = stakeHolders[account]\\r\\n                .stakedBal\\r\\n                .sub(amount);\\r\\n        }\\r\\n        uint256 amountOut = jlpManager.removeLiquidityForAccount(\\r\\n            address(this),\\r\\n            _tokenOut,\\r\\n            _flpAmount,\\r\\n            _minOut,\\r\\n            _receiver\\r\\n        );\\r\\n        totalStaked = totalStaked.sub(amount);\\r\\n        emit RemovedPoints(account, amount);\\r\\n        emit RemoveLiquidity(account, _tokenOut, amount, amountOut);\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw ETH from pool.\\r\\n     */\\r\\n    function withdrawnETH(\\r\\n        uint256 _jlpAmount,\\r\\n        uint256 _minOut,\\r\\n        address payable _receiver\\r\\n    ) external nonReentrant returns (uint256) {\\r\\n        address payable account = _msgSender();\\r\\n        uint256 amount = _jlpAmount;\\r\\n        require(isInPool(account), \\\"Not in pool\\\");\\r\\n        require(amount > 0, \\\"Zero amount\\\");\\r\\n        require(_validateCooldown(account), \\\"Cooldown duration not yet passed\\\");\\r\\n        _harvest(account);\\r\\n        uint256 stakedBal = stakeHolders[account].stakedBal;\\r\\n        bool unStake = amount >= stakedBal;\\r\\n        amount = unStake ? stakedBal : amount;\\r\\n        if (unStake) {\\r\\n            delete stakeHolders[account];\\r\\n            totalHolders = totalHolders.sub(1);\\r\\n        } else {\\r\\n            stakeHolders[account].stakedBal = stakeHolders[account]\\r\\n                .stakedBal\\r\\n                .sub(amount);\\r\\n        }\\r\\n        totalStaked = totalStaked.sub(amount);\\r\\n        uint256 amountOut = jlpManager.removeLiquidityForAccount(\\r\\n            address(this),\\r\\n            address(WETH),\\r\\n            amount,\\r\\n            _minOut,\\r\\n            address(this)\\r\\n        );\\r\\n        WETH.withdraw(amountOut);\\r\\n        _receiver.sendValue(amountOut);\\r\\n        emit RemovedPoints(account, amount);\\r\\n        emit RemoveLiquidity(account, address(WETH), amount, amountOut);\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw tokens from pool without rewards.\\r\\n     */\\r\\n    function emergencyWithdrawn() external whenPaused nonReentrant {\\r\\n        address payable account = _msgSender();\\r\\n        require(isInPool(account), \\\"Not in pool\\\");\\r\\n        uint256 stakedBal = stakeHolders[account].stakedBal;\\r\\n        delete stakeHolders[account];\\r\\n        totalHolders = totalHolders.sub(1);\\r\\n        JLP.safeTransfer(account, stakedBal);\\r\\n        totalStaked = totalStaked.sub(stakedBal);\\r\\n        emit RemovedPoints(account, stakedBal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get invalid tokens and send to Governor.\\r\\n     * @param token_ address of token to send.\\r\\n     */\\r\\n    function getInvalidTokens(address to_, address token_) external onlyOwner {\\r\\n        require(to_ != address(0x0) && token_ != address(0x0), \\\"Zero address\\\");\\r\\n        require(token_ != address(JLP), \\\"Invalid token\\\");\\r\\n        uint256 balance = IERC20(token_).balanceOf(address(this));\\r\\n        IERC20(token_).safeTransfer(to_, balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function set cooldown exclusions.\\r\\n     */\\r\\n    function setCooldownExclusion(address _wallet, bool _set)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_wallet != address(0), \\\"Invalid address\\\");\\r\\n        cooldownExcluded[_wallet] = _set;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function for pause and unpause the contract.\\r\\n     */\\r\\n    function togglePause() external onlyOwner {\\r\\n        paused() ? _unpause() : _pause();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../GSN/Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\ncontract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor () internal {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../GSN/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() public {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        _requireNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        _requirePaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is paused.\\r\\n     */\\r\\n    function _requireNotPaused() internal view virtual {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the contract is not paused.\\r\\n     */\\r\\n    function _requirePaused() internal view virtual {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../math/SafeMath.sol\\\";\\r\\nimport \\\"../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IJlpManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IJlpManager {\\r\\n    function usdj() external view returns (address);\\r\\n\\r\\n    function cooldownDuration() external returns (uint256);\\r\\n\\r\\n    function getAumInUsdj(bool maximise) external view returns (uint256);\\r\\n\\r\\n    function lastAddedAt(address _account) external returns (uint256);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _minUsdj,\\r\\n        uint256 _minJlp\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function addLiquidityForAccount(\\r\\n        address _fundingAccount,\\r\\n        address _account,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        uint256 _minUsdj,\\r\\n        uint256 _minJlp\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address _tokenOut,\\r\\n        uint256 _jlpAmount,\\r\\n        uint256 _minOut,\\r\\n        address _receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function removeLiquidityForAccount(\\r\\n        address _account,\\r\\n        address _tokenOut,\\r\\n        uint256 _jlpAmount,\\r\\n        uint256 _minOut,\\r\\n        address _receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function setShortsTrackerAveragePriceWeight(\\r\\n        uint256 _shortsTrackerAveragePriceWeight\\r\\n    ) external;\\r\\n\\r\\n    function setCooldownDuration(uint256 _cooldownDuration) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IWETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jlp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jlpManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddedPoints\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemovedPoints\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"JLP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getInvalidTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"}],\"name\":\"getPendingBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsXblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"}],\"name\":\"getWalletInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAddedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet_\",\"type\":\"address\"}],\"name\":\"isInPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jlpManager\",\"outputs\":[{\"internalType\":\"contract IJlpManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setCooldownExclusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minUsdj\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minJlp\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUsdj\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minJlp\",\"type\":\"uint256\"}],\"name\":\"stakeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jlpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawnETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JlpPool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000b833641d5a3ce05be17d80b6197d5c244d659c67000000000000000000000000543fbba54201f25e4cb6cee77b4fdc90ce46551a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}