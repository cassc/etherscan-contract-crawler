{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-04-24\r\n*/\r\n\r\n// Sources flattened with hardhat v2.1.1 https://hardhat.org\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\";\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/Address.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/SafeERC20.sol\";\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity 0.6.12;\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeERC20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helpers/ReentrancyGuard.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\";\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helpers/Context.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helpers/Pausable.sol\r\n\r\npragma solidity 0.6.12;\r\n// \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Pausable.sol\";\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helpers/Ownable.sol\r\n\r\npragma solidity 0.6.12;\r\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/StrategyV2_PCS.sol\r\n\r\npragma solidity 0.6.12;\r\ninterface IXswapFarm {\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function userInfo() external view returns (uint256);\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // View function to see pending CAKEs on frontend.\r\n    // function pendingCake(uint256 _pid, address _user)\r\n    //     external\r\n    //     view\r\n    //     returns (uint256);\r\n\r\n    // Deposit LP tokens to the farm for farm's token allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n}\r\n\r\ninterface IXRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IXRouter02 is IXRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract StrategyParrotVaults is Ownable, ReentrancyGuard, Pausable {\r\n    // Maximises yields in e.g. pancakeswap\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool public isSingleVault;\r\n    bool public isAutoComp;\r\n\r\n    address public farmContractAddress; // address of farm, eg, PCS, Thugs etc.\r\n    uint256 public pid; // pid of pool in farmContractAddress\r\n    address public wantAddress;\r\n    address public token0Address;\r\n    address public token1Address;\r\n    address public earnedAddress;\r\n    address public uniRouterAddress; // uniswap, pancakeswap etc\r\n    address public buybackRouterAddress = 0xcF0feBd3f17CEf5b47b0cD257aCf6025c5BFf3b7; // uniswap, pancakeswap etc\r\n    uint256 public routerDeadlineDuration = 300;  // Set on global level, could be passed to functions via arguments\r\n\r\n    address public wbnbAddress; // should be WBNB or BUSD\r\n    address public constant wbnbAddressConstant = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // is ALWAYS WBNB\r\n    address public nativeFarmAddress;\r\n    address public NATIVEAddress;\r\n    address public govAddress; // timelock contract\r\n    address public feeAddress;\r\n\r\n    uint256 public lastEarnBlock = 0;\r\n    uint256 public wantLockedTotal = 0;\r\n    uint256 public sharesTotal = 0;\r\n\r\n    uint256 public controllerFee = 1600;\r\n    uint256 public constant controllerFeeMax = 10000; // 100 = 1%\r\n    uint256 public constant controllerFeeUL = 300;\r\n\r\n    uint256 public depositFeeFactor = 10000; // 9600 == 4% fee\r\n    uint256 public constant depositFeeFactorMax = 10000; // 100 = 1%\r\n    uint256 public constant depositFeeFactorLL = 9500;\r\n\r\n    uint256 public withdrawFeeFactor = 10000;\r\n    uint256 public constant withdrawFeeFactorMax = 10000;\r\n    uint256 public constant withdrawFeeFactorLL = 9950;\r\n\r\n    uint256 public buyBackRate = 600;\r\n    uint256 public constant buyBackRateMax = 10000; // 100 = 1%\r\n    uint256 public constant buyBackRateUL = 800;\r\n    /* This is vanity address -  For instance an address 0x000000000000000000000000000000000000dEaD for which it's\r\n       absolutely impossible to generate a private key with today's computers. */\r\n    address public constant buyBackAddress = 0x45BCAd5e65f7BCEB5C01C087a093db03A8279786;\r\n    uint256 public entranceFeeFactor = 10000; // < 0.1% entrance fee - goes to pool + prevents front-running\r\n    uint256 public constant entranceFeeFactorMax = 10000;\r\n    uint256 public constant entranceFeeFactorLL = 9950; // 0.5% is the max entrance fee settable. LL = lowerlimit\r\n\r\n    uint256 public exitFeeFactor = 9950; // < 0.1% exit fee - goes to pool\r\n    uint256 public constant exitFeeFactorMax = 10000;\r\n    uint256 public constant exitFeeFactorLL = 9950; // 0.5% is the max exit fee settable. LL = lowerlimit\r\n\r\n    address public goldenPoolAddress = 0x4C913641DD53A3369DAcd15296aFa004570E4850;\r\n    uint256 public goldenPoolFee = 800; \r\n    uint256 public constant goldenPoolMax = 10000;\r\n\r\n    address[] public earnedToNATIVEPath;\r\n    address[] public earnedToToken0Path;\r\n    address[] public earnedToToken1Path;\r\n    address[] public token0ToEarnedPath;\r\n    address[] public token1ToEarnedPath;\r\n    address[] public earnedToWantPath;\r\n    address[] public earnedToWBNBPath;\r\n    address[] public WBNBToNATIVEPath;\r\n    address[] public earnedToWBNBPathConstant;\r\n\r\n    constructor(\r\n        address _nativeFarmAddress,\r\n        address _NATIVEAddress,\r\n        bool _isSingleVault,\r\n        bool _isAutoComp,\r\n        address _farmContractAddress,\r\n        uint256 _pid,\r\n        address _wantAddress,\r\n        address _token0Address,\r\n        address _token1Address,\r\n        address _earnedAddress,\r\n        address _uniRouterAddress,\r\n        address _wbnbAddress,\r\n        uint256 _depositFeeFactor,\r\n        uint256 _exitFeeFactor\r\n    ) public {\r\n        \r\n        govAddress = msg.sender;\r\n        \r\n        feeAddress = 0x45BCAd5e65f7BCEB5C01C087a093db03A8279786;\r\n        \r\n        nativeFarmAddress = _nativeFarmAddress;\r\n        NATIVEAddress = _NATIVEAddress;\r\n\r\n        isSingleVault = _isSingleVault;\r\n        isAutoComp = _isAutoComp;\r\n        wantAddress = _wantAddress;\r\n        wbnbAddress = _wbnbAddress;\r\n\r\n        depositFeeFactor = _depositFeeFactor;\r\n        exitFeeFactor = _exitFeeFactor;\r\n\r\n        if (isAutoComp) {\r\n            if (!isSingleVault) {\r\n                token0Address = _token0Address;\r\n                token1Address = _token1Address;\r\n            }\r\n\r\n            farmContractAddress = _farmContractAddress;\r\n            pid = _pid;\r\n            earnedAddress = _earnedAddress;\r\n\r\n            uniRouterAddress = _uniRouterAddress;\r\n\r\n            earnedToNATIVEPath = [earnedAddress, wbnbAddress, NATIVEAddress];\r\n            if (wbnbAddress == earnedAddress) {\r\n                earnedToNATIVEPath = [wbnbAddress, NATIVEAddress];\r\n            }\r\n\r\n            earnedToToken0Path = [earnedAddress, wbnbAddress, token0Address];\r\n            if (wbnbAddress == token0Address) {\r\n                earnedToToken0Path = [earnedAddress, wbnbAddress];\r\n            }\r\n\r\n            earnedToToken1Path = [earnedAddress, wbnbAddress, token1Address];\r\n            if (wbnbAddress == token1Address) {\r\n                earnedToToken1Path = [earnedAddress, wbnbAddress];\r\n            }\r\n\r\n            token0ToEarnedPath = [token0Address, wbnbAddress, earnedAddress];\r\n            if (wbnbAddress == token0Address) {\r\n                token0ToEarnedPath = [wbnbAddress, earnedAddress];\r\n            }\r\n\r\n            token1ToEarnedPath = [token1Address, wbnbAddress, earnedAddress];\r\n            if (wbnbAddress == token1Address) {\r\n                token1ToEarnedPath = [wbnbAddress, earnedAddress];\r\n            }\r\n\r\n            earnedToWantPath = [earnedAddress, wbnbAddress, wantAddress];\r\n            if (wbnbAddress == wantAddress) {\r\n                earnedToWantPath = [earnedAddress, wantAddress];\r\n            }\r\n\r\n            earnedToWBNBPath = [earnedAddress, wbnbAddress];\r\n            earnedToWBNBPathConstant = [earnedAddress, wbnbAddressConstant];\r\n            WBNBToNATIVEPath = [wbnbAddress, NATIVEAddress];\r\n        }\r\n\r\n        transferOwnership(nativeFarmAddress);\r\n    }\r\n\r\n    modifier onlyAllowGov() {\r\n        require(msg.sender == govAddress, \"Not authorised\");\r\n        _;\r\n    }\r\n\r\n    // Receives new deposits from user\r\n    function deposit(address _userAddress, uint256 _wantAmt)\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n        whenNotPaused\r\n        returns (uint256)\r\n    {\r\n        IERC20(wantAddress).safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _wantAmt\r\n        );\r\n\r\n        // If depositFee in set, than _wantAmt - depositFee\r\n        if (depositFeeFactor < depositFeeFactorMax) {\r\n            uint256 wantAmountOriginal = _wantAmt;\r\n            _wantAmt = _wantAmt.mul(depositFeeFactor).div(depositFeeFactorMax);\r\n            IERC20(wantAddress).safeTransfer(feeAddress, wantAmountOriginal.sub(_wantAmt));\r\n        }\r\n\r\n        uint256 sharesAdded = _wantAmt;\r\n        if (wantLockedTotal > 0) {\r\n            sharesAdded = _wantAmt\r\n                .mul(sharesTotal)\r\n                .mul(entranceFeeFactor)\r\n                .div(wantLockedTotal)\r\n                .div(entranceFeeFactorMax);\r\n\r\n            // Fix if pool stuck\r\n            if (sharesAdded == 0 && sharesTotal == 0) {\r\n                sharesAdded = _wantAmt\r\n                    .mul(entranceFeeFactor)\r\n                    .div(wantLockedTotal)\r\n                    .div(entranceFeeFactorMax);\r\n            }\r\n        }\r\n        sharesTotal = sharesTotal.add(sharesAdded);\r\n\r\n        if (isAutoComp) {\r\n            _farm();\r\n        } else {\r\n            wantLockedTotal = wantLockedTotal.add(_wantAmt);\r\n        }\r\n\r\n        return sharesAdded;\r\n    }\r\n\r\n    function farm() public nonReentrant {\r\n        _farm();\r\n    }\r\n\r\n    function _farm() internal {\r\n        require(isAutoComp, \"!isAutoComp\");\r\n        // reinvest harvested amount\r\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\r\n        wantLockedTotal = wantLockedTotal.add(wantAmt);\r\n        IERC20(wantAddress).safeIncreaseAllowance(farmContractAddress, wantAmt);\r\n\r\n        IXswapFarm(farmContractAddress).deposit(pid, wantAmt);\r\n    }\r\n\r\n    function withdraw(address _userAddress, uint256 _wantAmt)\r\n        public\r\n        onlyOwner\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        require(_wantAmt > 0, \"_wantAmt <= 0\");\r\n\r\n        if (isAutoComp) {\r\n            IXswapFarm(farmContractAddress).withdraw(pid, _wantAmt);\r\n        }\r\n\r\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\r\n        if (_wantAmt > wantAmt) {\r\n            _wantAmt = wantAmt;\r\n        }\r\n\r\n        if (wantLockedTotal < _wantAmt) {\r\n            _wantAmt = wantLockedTotal;\r\n        }\r\n\r\n        uint256 wantAmtWithFee = _wantAmt;\r\n        if (withdrawFeeFactor < withdrawFeeFactorMax) {\r\n            wantAmtWithFee = _wantAmt.mul(withdrawFeeFactorMax).div(withdrawFeeFactor);\r\n        }\r\n\r\n        uint256 sharesRemoved = wantAmtWithFee.mul(sharesTotal).div(wantLockedTotal);\r\n        if (sharesRemoved > sharesTotal) {\r\n            sharesRemoved = sharesTotal;\r\n        }\r\n        sharesTotal = sharesTotal.sub(sharesRemoved);\r\n        wantLockedTotal = wantLockedTotal.sub(_wantAmt);\r\n\r\n        if (exitFeeFactor < exitFeeFactorMax) {\r\n            uint256 wantAmountOriginal = _wantAmt;\r\n            _wantAmt = _wantAmt.mul(exitFeeFactor).div(exitFeeFactorMax);\r\n            IERC20(wantAddress).safeTransfer(feeAddress, wantAmountOriginal.sub(_wantAmt));\r\n        }\r\n\r\n        IERC20(wantAddress).safeTransfer(nativeFarmAddress, _wantAmt);\r\n\r\n        return sharesRemoved;\r\n    }\r\n\r\n    // 1. Harvest farm tokens\r\n    // 2. Converts farm tokens into want tokens\r\n    // 3. Deposits want tokens\r\n\r\n    function earn() public nonReentrant whenNotPaused {\r\n        require(isAutoComp, \"!isAutoComp\");\r\n\r\n        // Harvest farm tokens\r\n        IXswapFarm(farmContractAddress).withdraw(pid, 0);\r\n\r\n        // Converts farm tokens into want tokens\r\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\r\n\r\n        earnedAmt = distributeFees(earnedAmt);\r\n        earnedAmt = buyBack(earnedAmt);\r\n\r\n        if (isSingleVault) {\r\n            if (earnedAddress != wantAddress) {\r\n                IERC20(earnedAddress).safeIncreaseAllowance(\r\n                    uniRouterAddress,\r\n                    earnedAmt\r\n                );\r\n\r\n                // Swap earned to want\r\n                IXRouter02(uniRouterAddress)\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    earnedAmt,\r\n                    0,\r\n                    earnedToWantPath,\r\n                    address(this),\r\n                    now + routerDeadlineDuration\r\n                );\r\n            }\r\n            lastEarnBlock = block.number;\r\n            _farm();\r\n            return;\r\n        }\r\n\r\n        IERC20(earnedAddress).safeIncreaseAllowance(\r\n            uniRouterAddress,\r\n            earnedAmt\r\n        );\r\n\r\n        if (earnedAddress != token0Address) {\r\n            // Swap half earned to token0\r\n            IXRouter02(uniRouterAddress)\r\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                earnedAmt.div(2),\r\n                0,\r\n                earnedToToken0Path,\r\n                address(this),\r\n                now + routerDeadlineDuration\r\n            );\r\n        }\r\n\r\n        if (earnedAddress != token1Address) {\r\n            // Swap half earned to token1\r\n            IXRouter02(uniRouterAddress)\r\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                earnedAmt.div(2),\r\n                0,\r\n                earnedToToken1Path,\r\n                address(this),\r\n                now + routerDeadlineDuration\r\n            );\r\n        }\r\n\r\n        // Get want tokens, ie. add liquidity\r\n        uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\r\n        uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\r\n        if (token0Amt > 0 && token1Amt > 0) {\r\n            IERC20(token0Address).safeIncreaseAllowance(\r\n                uniRouterAddress,\r\n                token0Amt\r\n            );\r\n            IERC20(token1Address).safeIncreaseAllowance(\r\n                uniRouterAddress,\r\n                token1Amt\r\n            );\r\n            IXRouter02(uniRouterAddress).addLiquidity(\r\n                token0Address,\r\n                token1Address,\r\n                token0Amt,\r\n                token1Amt,\r\n                0,\r\n                0,\r\n                address(this),\r\n                now + routerDeadlineDuration\r\n            );\r\n        }\r\n\r\n        lastEarnBlock = block.number;\r\n\r\n        _farm();\r\n    }\r\n\r\n    function buyBack(uint256 _earnedAmt) internal returns (uint256) {\r\n        if (buyBackRate <= 0) {\r\n            return _earnedAmt;\r\n        }\r\n\r\n        uint256 buyBackAmt = _earnedAmt.mul(buyBackRate).div(buyBackRateMax);\r\n\r\n        if (uniRouterAddress != buybackRouterAddress) {\r\n            // Example case: LP token on ApeSwap and NATIVE token on PancakeSwap\r\n\r\n            if (earnedAddress != wbnbAddress) {\r\n                // First convert earn to wbnb\r\n                IERC20(earnedAddress).safeIncreaseAllowance(\r\n                    uniRouterAddress,\r\n                    buyBackAmt\r\n                );\r\n\r\n                IXRouter02(uniRouterAddress)\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    buyBackAmt,\r\n                    0,\r\n                    earnedToWBNBPath,\r\n                    address(this),\r\n                    now + routerDeadlineDuration\r\n                );\r\n            }\r\n\r\n            // convert all wbnb to Native to burn them\r\n            uint256 wbnbAmt = IERC20(wbnbAddress).balanceOf(address(this));\r\n            if (wbnbAmt > 0) {\r\n                IERC20(wbnbAddress).safeIncreaseAllowance(\r\n                    buybackRouterAddress,\r\n                    wbnbAmt\r\n                );\r\n\r\n                IXRouter02(buybackRouterAddress)\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    wbnbAmt,\r\n                    0,\r\n                    WBNBToNATIVEPath,\r\n                    buyBackAddress,\r\n                    now + routerDeadlineDuration\r\n                );\r\n            }\r\n        } else {\r\n            // Both LP and NATIVE token on same swap\r\n\r\n            IERC20(earnedAddress).safeIncreaseAllowance(\r\n                uniRouterAddress,\r\n                buyBackAmt\r\n            );\r\n\r\n            IXRouter02(uniRouterAddress)\r\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                buyBackAmt,\r\n                0,\r\n                earnedToNATIVEPath,\r\n                buyBackAddress,\r\n                now + routerDeadlineDuration\r\n            );\r\n        }\r\n\r\n        return _earnedAmt.sub(buyBackAmt);\r\n    }\r\n\r\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\r\n        if (_earnedAmt > 0) {\r\n            // Performance fee\r\n            if (controllerFee > 0) {\r\n                uint256 fee =\r\n                    _earnedAmt.mul(controllerFee).div(controllerFeeMax);\r\n                IERC20(earnedAddress).safeTransfer(feeAddress, fee);\r\n                _earnedAmt = _earnedAmt.sub(fee);\r\n            }\r\n            // Golden pool fee\r\n            if (goldenPoolAddress != address(0)) {\r\n                if (goldenPoolFee > 0) {\r\n                    uint256 fee =\r\n                        _earnedAmt.mul(goldenPoolFee).div(goldenPoolMax);\r\n                            \r\n                    if (earnedAddress != wbnbAddressConstant) {\r\n                        // First convert earn to wbnb\r\n                        IERC20(earnedAddress).safeIncreaseAllowance(\r\n                            uniRouterAddress,\r\n                            fee\r\n                        );\r\n        \r\n                        IXRouter02(uniRouterAddress)\r\n                            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                            fee,\r\n                            0,\r\n                            earnedToWBNBPathConstant,\r\n                            goldenPoolAddress,\r\n                            now + routerDeadlineDuration\r\n                        );\r\n                    }\r\n                        \r\n                    _earnedAmt = _earnedAmt.sub(fee);\r\n                }\r\n            }\r\n        }\r\n\r\n        return _earnedAmt;\r\n    }\r\n\r\n    function convertDustToEarned() public whenNotPaused {\r\n        require(isAutoComp, \"!isAutoComp\");\r\n        require(!isSingleVault, \"isSingleVault\");\r\n\r\n        // Converts dust tokens into earned tokens, which will be reinvested on the next earn().\r\n\r\n        // Converts token0 dust (if any) to earned tokens\r\n        uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\r\n        if (token0Address != earnedAddress && token0Amt > 0) {\r\n            IERC20(token0Address).safeIncreaseAllowance(\r\n                uniRouterAddress,\r\n                token0Amt\r\n            );\r\n\r\n            // Swap all dust tokens to earned tokens\r\n            IXRouter02(uniRouterAddress)\r\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                token0Amt,\r\n                0,\r\n                token0ToEarnedPath,\r\n                address(this),\r\n                now + routerDeadlineDuration\r\n            );\r\n        }\r\n\r\n        // Converts token1 dust (if any) to earned tokens\r\n        uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\r\n        if (token1Address != earnedAddress && token1Amt > 0) {\r\n            IERC20(token1Address).safeIncreaseAllowance(\r\n                uniRouterAddress,\r\n                token1Amt\r\n            );\r\n\r\n            // Swap all dust tokens to earned tokens\r\n            IXRouter02(uniRouterAddress)\r\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                token1Amt,\r\n                0,\r\n                token1ToEarnedPath,\r\n                address(this),\r\n                now + routerDeadlineDuration\r\n            );\r\n        }\r\n    }\r\n\r\n    function pause() public onlyAllowGov {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyAllowGov {\r\n        _unpause();\r\n    }\r\n\r\n    function setEntranceFeeFactor(uint256 _entranceFeeFactor) public onlyAllowGov {\r\n        require(_entranceFeeFactor > entranceFeeFactorLL, \"!safe - too low\");\r\n        require(_entranceFeeFactor <= entranceFeeFactorMax, \"!safe - too high\");\r\n        entranceFeeFactor = _entranceFeeFactor;\r\n    }\r\n\r\n    function setExitFeeFactor(uint256 _exitFeeFactor) public onlyAllowGov{\r\n        require(_exitFeeFactor > exitFeeFactorLL, \"!safe - too low\");\r\n        require(_exitFeeFactor <= exitFeeFactorMax, \"!safe - too high\");\r\n        exitFeeFactor = _exitFeeFactor;\r\n    }\r\n\r\n    function setControllerFee(uint256 _controllerFee) public onlyAllowGov{\r\n        require(_controllerFee <= controllerFeeUL, \"too high\");\r\n        controllerFee = _controllerFee;\r\n    }\r\n\r\n    function setDepositFeeFactor(uint256 _depositFeeFactor) public onlyAllowGov{\r\n        require(_depositFeeFactor > depositFeeFactorLL, \"!safe - too low\");\r\n        require(_depositFeeFactor <= depositFeeFactorMax, \"!safe - too high\");\r\n        depositFeeFactor = _depositFeeFactor;\r\n    }\r\n\r\n    function setWithdrawFeeFactor(uint256 _withdrawFeeFactor) public onlyAllowGov {\r\n        require(_withdrawFeeFactor > withdrawFeeFactorLL, \"!safe - too low\");\r\n        require(_withdrawFeeFactor <= withdrawFeeFactorMax, \"!safe - too high\");\r\n        withdrawFeeFactor = _withdrawFeeFactor;\r\n    }\r\n\r\n    function setbuyBackRate(uint256 _buyBackRate) public onlyAllowGov {\r\n        require(buyBackRate <= buyBackRateUL, \"too high\");\r\n        buyBackRate = _buyBackRate;\r\n    }\r\n\r\n    function setGov(address _govAddress) public onlyAllowGov {\r\n        govAddress = _govAddress;\r\n    }\r\n    \r\n    function setFeeAddress(address _feeAddress) public onlyAllowGov {\r\n        feeAddress = _feeAddress;\r\n    }\r\n    \r\n    function setGoldenPoolAddress(address _goldenPoolAddress) public onlyAllowGov {\r\n        goldenPoolAddress = _goldenPoolAddress;\r\n    }\r\n    \r\n    function setGoldenPoolFee(uint256 _goldenPoolFee) public onlyAllowGov {\r\n        goldenPoolFee = _goldenPoolFee;\r\n    }\r\n\r\n    function setBuybackRouterAddress(address _buybackRouterAddress) public onlyAllowGov {\r\n        buybackRouterAddress = _buybackRouterAddress;\r\n    }\r\n\r\n    function inCaseTokensGetStuck(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) public onlyAllowGov {\r\n        require(_token != earnedAddress, \"!safe\");\r\n        require(_token != wantAddress, \"!safe\");\r\n        IERC20(_token).safeTransfer(_to, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeFarmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NATIVEAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSingleVault\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isAutoComp\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_farmContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbnbAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeeFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exitFeeFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVEAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WBNBToNATIVEPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackRateUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controllerFeeUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertDustToEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToNATIVEPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken0Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToToken1Path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToWBNBPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToWBNBPathConstant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earnedToWantPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenPoolMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoComp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSingleVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEarnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerDeadlineDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buybackRouterAddress\",\"type\":\"address\"}],\"name\":\"setBuybackRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_controllerFee\",\"type\":\"uint256\"}],\"name\":\"setControllerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFeeFactor\",\"type\":\"uint256\"}],\"name\":\"setDepositFeeFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entranceFeeFactor\",\"type\":\"uint256\"}],\"name\":\"setEntranceFeeFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exitFeeFactor\",\"type\":\"uint256\"}],\"name\":\"setExitFeeFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_goldenPoolAddress\",\"type\":\"address\"}],\"name\":\"setGoldenPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goldenPoolFee\",\"type\":\"uint256\"}],\"name\":\"setGoldenPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFeeFactor\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFeeFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyBackRate\",\"type\":\"uint256\"}],\"name\":\"setbuyBackRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token0ToEarnedPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"token1ToEarnedPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wantLockedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddressConstant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wantAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrategyParrotVaults", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001bee93b82275f3f215411be49f948f8568e5e103000000000000000000000000cd5d75dbe75449a9021b6c570a41959eb571c7510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000073feaa1ee314f8c655e354234017be2193c9e24e00000000000000000000000000000000000000000000000000000000000000fb0000000000000000000000000ed7e52944161450477ee417de9cd3a859b14fd00000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce8200000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000026de", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://95b60d8d233efd128eb2735ec3840bd30902b78b996ec7905143648f894b53ac"}