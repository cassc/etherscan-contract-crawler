{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IFOInitializableV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"profile-nft-gamification/contracts/PancakeProfile.sol\\\";\\n\\nimport \\\"./interfaces/IIFOV5.sol\\\";\\nimport \\\"./utils/WhiteList.sol\\\";\\nimport \\\"./ICake.sol\\\";\\nimport \\\"pancake-cake-vault/contracts/test/CakeToken.sol\\\";\\nimport \\\"pancake-cake-vault/contracts/test/SyrupBar.sol\\\";\\nimport \\\"pancake-cake-vault/contracts/test/MasterChef.sol\\\";\\n\\n/**\\n * @title IFOInitializableV5\\n */\\ncontract IFOInitializableV5 is IIFOV5, ReentrancyGuard, Whitelist {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Number of pools\\n    uint8 public constant NUMBER_POOLS = 2;\\n\\n    // The address of the smart chef factory\\n    address public immutable IFO_FACTORY;\\n\\n    // Max blocks (for sanity checks)\\n    uint256 public MAX_BUFFER_BLOCKS;\\n\\n    // The LP token used\\n    IERC20 public lpToken;\\n\\n    // The offering token\\n    IERC20 public offeringToken;\\n\\n    // PancakeProfile\\n    PancakeProfile public pancakeProfile;\\n\\n    // ICake contract\\n    ICake public iCake;\\n\\n    // Whether it is initialized\\n    bool public isInitialized;\\n\\n    // The block number when IFO starts\\n    uint256 public startBlock;\\n\\n    // The block number when IFO ends\\n    uint256 public endBlock;\\n\\n    // The campaignId for the IFO\\n    uint256 public campaignId;\\n\\n    // The number of points distributed to each person who harvest\\n    uint256 public numberPoints;\\n\\n    // The threshold for points (in LP tokens)\\n    uint256 public thresholdPoints;\\n\\n    // Total tokens distributed across the pools\\n    uint256 public totalTokensOffered;\\n\\n    // The minimum point special sale require\\n    uint256 public pointThreshold;\\n\\n    // The contract of the admission profile\\n    address public admissionProfile;\\n\\n    // Array of PoolCharacteristics of size NUMBER_POOLS\\n    PoolCharacteristics[NUMBER_POOLS] private _poolInformation;\\n\\n    // Checks if user has claimed points\\n    mapping(address => bool) private _hasClaimedPoints;\\n\\n    // It maps the address to pool id to UserInfo\\n    mapping(address => mapping(uint8 => UserInfo)) private _userInfo;\\n\\n    // It maps user address to credit used amount\\n    mapping(address => uint256) public userCreditUsed;\\n\\n    // It maps if nft token id was used\\n    mapping(uint256 => address) public tokenIdUsed;\\n\\n    // Struct that contains each pool characteristics\\n    struct PoolCharacteristics {\\n        uint256 raisingAmountPool; // amount of tokens raised for the pool (in LP tokens)\\n        uint256 offeringAmountPool; // amount of tokens offered for the pool (in offeringTokens)\\n        uint256 limitPerUserInLP; // limit of tokens per user (if 0, it is ignored)\\n        bool hasTax; // tax on the overflow (if any, it works with _calculateTaxOverflow)\\n        uint256 totalAmountPool; // total amount pool deposited (in LP tokens)\\n        uint256 sumTaxesOverflow; // total taxes collected (starts at 0, increases with each harvest if overflow)\\n        bool isSpecialSale;\\n        uint256 vestingPercentage; // 60 means 0.6, rest part such as 100-60=40 means 0.4 is claimingPercentage\\n        uint256 vestingCliff; // Vesting cliff\\n        uint256 vestingDuration; // Vesting duration\\n        uint256 vestingSlicePeriodSeconds; // Vesting slice period seconds\\n    }\\n\\n    // Struct that contains each user information for both pools\\n    struct UserInfo {\\n        uint256 amountPool; // How many tokens the user has provided for pool\\n        bool claimedPool; // Whether the user has claimed (default: false) for pool\\n    }\\n\\n    // vesting startTime, everyone will be started at same timestamp\\n    uint256 public vestingStartTime;\\n    uint256 public hehe;\\n\\n    // A flag for vesting is being revoked\\n    bool public vestingRevoked;\\n\\n    // Struct that contains vesting schedule\\n    struct VestingSchedule {\\n        bool isVestingInitialized;\\n        // beneficiary of tokens after they are released\\n        address beneficiary;\\n        // pool id\\n        uint8 pid;\\n        // total amount of tokens to be released at the end of the vesting\\n        uint256 amountTotal;\\n        // amount of tokens has been released\\n        uint256 released;\\n    }\\n\\n    bytes32[] private vestingSchedulesIds;\\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\\n    uint256 private vestingSchedulesTotalAmount;\\n    mapping(address => uint256) private holdersVestingCount;\\n\\n    // Admin withdraw events\\n    event AdminWithdraw(uint256 amountLP, uint256 amountOfferingToken);\\n\\n    // Admin recovers token\\n    event AdminTokenRecovery(address tokenAddress, uint256 amountTokens);\\n\\n    // Deposit event\\n    event Deposit(address indexed user, uint256 amount, uint8 indexed pid);\\n\\n    // Harvest event\\n    event Harvest(address indexed user, uint256 offeringAmount, uint256 excessAmount, uint8 indexed pid);\\n\\n    // Create VestingSchedule event\\n    event CreateVestingSchedule(address indexed user, uint256 offeringAmount, uint256 excessAmount, uint8 indexed pid);\\n\\n    // Event for new start & end blocks\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n\\n    // Event with point parameters for IFO\\n    event PointParametersSet(uint256 campaignId, uint256 numberPoints, uint256 thresholdPoints);\\n\\n    // Event when parameters are set for one of the pools\\n    event PoolParametersSet(uint256 offeringAmountPool, uint256 raisingAmountPool, uint8 pid);\\n\\n    // Event when released new amount\\n    event Released(address indexed beneficiary, uint256 amount);\\n\\n    // Event when revoked\\n    event Revoked();\\n\\n    // Modifier to prevent contracts to participate\\n    modifier notContract() {\\n        require(!_isContract(msg.sender), \\\"contract not allowed\\\");\\n        require(msg.sender == tx.origin, \\\"proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     */\\n    constructor() public {\\n        IFO_FACTORY = msg.sender;\\n    }\\n\\n    /**\\n     * @notice It initializes the contract\\n     * @dev It can only be called once.\\n     * @param _lpToken: the LP token used\\n     * @param _offeringToken: the token that is offered for the IFO\\n     * @param _pancakeProfileAddress: the address of the PancakeProfile\\n     * @param _iCakeAddress: the address of the ICake\\n     * @param _startBlock: the start block for the IFO\\n     * @param _endBlock: the end block for the IFO\\n     * @param _maxBufferBlocks: maximum buffer of blocks from the current block number\\n     * @param _adminAddress: the admin address for handling tokens\\n     */\\n    function initialize(\\n        address _lpToken,\\n        address _offeringToken,\\n        address _pancakeProfileAddress,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _maxBufferBlocks,\\n        address _adminAddress,\\n        address _iCakeAddress,\\n        uint256 _pointThreshold,\\n        address _admissionProfile\\n    ) public {\\n        require(!isInitialized, \\\"Operations: Already initialized\\\");\\n        require(msg.sender == IFO_FACTORY, \\\"Operations: Not factory\\\");\\n\\n        // Make this contract initialized\\n        isInitialized = true;\\n\\n        lpToken = IERC20(_lpToken);\\n        offeringToken = IERC20(_offeringToken);\\n        pancakeProfile = PancakeProfile(_pancakeProfileAddress);\\n        iCake = ICake(_iCakeAddress);\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        MAX_BUFFER_BLOCKS = _maxBufferBlocks;\\n        pointThreshold = _pointThreshold;\\n        admissionProfile = _admissionProfile;\\n\\n        // Transfer ownership to admin\\n        transferOwnership(_adminAddress);\\n    }\\n\\n    /**\\n     * @notice It allows users to deposit LP tokens to pool\\n     * @param _amount: the number of LP token used (18 decimals)\\n     * @param _pid: pool id\\n     */\\n    function depositPool(uint256 _amount, uint8 _pid) external override nonReentrant notContract {\\n        // Checks whether the user has an active profile\\n        require(pancakeProfile.getUserStatus(msg.sender), \\\"Deposit: Must have an active profile\\\");\\n\\n        // Checks whether the pool id is valid\\n        require(_pid < NUMBER_POOLS, \\\"Deposit: Non valid pool id\\\");\\n\\n        // Checks that pool was set\\n        require(\\n            _poolInformation[_pid].offeringAmountPool > 0 && _poolInformation[_pid].raisingAmountPool > 0,\\n            \\\"Deposit: Pool not set\\\"\\n        );\\n\\n        // Checks whether the block number is not too early\\n        require(block.number > startBlock, \\\"Deposit: Too early\\\");\\n\\n        // Checks whether the block number is not too late\\n        require(block.number < endBlock, \\\"Deposit: Too late\\\");\\n\\n        // Checks that the amount deposited is not inferior to 0\\n        require(_amount > 0, \\\"Deposit: Amount must be > 0\\\");\\n\\n        // Verify tokens were deposited properly\\n        require(offeringToken.balanceOf(address(this)) >= totalTokensOffered, \\\"Deposit: Tokens not deposited properly\\\");\\n\\n        if (!_poolInformation[_pid].isSpecialSale) {\\n            // getUserCredit from ICake contract\\n            uint256 ifoCredit = iCake.getUserCredit(msg.sender);\\n            require(userCreditUsed[msg.sender].add(_amount) <= ifoCredit, \\\"Not enough IFO credit left\\\");\\n\\n            // Transfers funds to this contract\\n            lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            // Update the user status\\n            _userInfo[msg.sender][_pid].amountPool = _userInfo[msg.sender][_pid].amountPool.add(_amount);\\n\\n            // Check if the pool has a limit per user\\n            if (_poolInformation[_pid].limitPerUserInLP > 0) {\\n                // Checks whether the limit has been reached\\n                require(\\n                    _userInfo[msg.sender][_pid].amountPool <= _poolInformation[_pid].limitPerUserInLP,\\n                    \\\"Deposit: New amount above user limit\\\"\\n                );\\n            }\\n\\n            // Updates the totalAmount for pool\\n            _poolInformation[_pid].totalAmountPool = _poolInformation[_pid].totalAmountPool.add(_amount);\\n\\n            // Updates Accumulative deposit lpTokens\\n            userCreditUsed[msg.sender] = userCreditUsed[msg.sender].add(_amount);\\n\\n            emit Deposit(msg.sender, _amount, _pid);\\n        } else {\\n            (, uint256 profileNumberPoints, , address profileAddress, uint256 tokenId, bool active) = pancakeProfile\\n                .getUserProfile(msg.sender);\\n\\n            require(active, \\\"profile not active\\\");\\n\\n            // Must meet one of three admission requirement\\n            require(\\n                _isQualifiedPoints(profileNumberPoints) ||\\n                    _isQualifiedWhitelist(msg.sender) ||\\n                    _isQualifiedNFT(msg.sender, profileAddress, tokenId),\\n                \\\"Deposit: Not meet any one of required conditions\\\"\\n            );\\n\\n            // Transfers funds to this contract\\n            lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            // Update the user status\\n            _userInfo[msg.sender][_pid].amountPool = _userInfo[msg.sender][_pid].amountPool.add(_amount);\\n\\n            // Check if the pool has a limit per user\\n            if (_poolInformation[_pid].limitPerUserInLP > 0) {\\n                // Checks whether the limit has been reached\\n                require(\\n                    _userInfo[msg.sender][_pid].amountPool <= _poolInformation[_pid].limitPerUserInLP,\\n                    \\\"Deposit: New amount above user limit\\\"\\n                );\\n            }\\n\\n            // Updates the totalAmount for pool\\n            _poolInformation[_pid].totalAmountPool = _poolInformation[_pid].totalAmountPool.add(_amount);\\n\\n            // Update tokenIdUsed\\n            if (\\n                !_isQualifiedPoints(profileNumberPoints) &&\\n                !_isQualifiedWhitelist(msg.sender) &&\\n                profileAddress == admissionProfile &&\\n                tokenIdUsed[tokenId] == address(0)\\n            ) {\\n                tokenIdUsed[tokenId] = msg.sender;\\n            }\\n\\n            emit Deposit(msg.sender, _amount, _pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice It allows users to harvest from pool\\n     * @param _pid: pool id\\n     */\\n    function harvestPool(uint8 _pid) external override nonReentrant notContract {\\n        // Checks whether it is too early to harvest\\n        require(block.number > endBlock, \\\"Harvest: Too early\\\");\\n\\n        // Checks whether pool id is valid\\n        require(_pid < NUMBER_POOLS, \\\"Harvest: Non valid pool id\\\");\\n\\n        // Checks whether the user has participated\\n        require(_userInfo[msg.sender][_pid].amountPool > 0, \\\"Harvest: Did not participate\\\");\\n\\n        // Checks whether the user has already harvested\\n        require(!_userInfo[msg.sender][_pid].claimedPool, \\\"Harvest: Already done\\\");\\n\\n        // Claim points if possible\\n        _claimPoints(msg.sender);\\n\\n        // Updates the harvest status\\n        _userInfo[msg.sender][_pid].claimedPool = true;\\n\\n        // Updates the vesting startTime\\n        if (vestingStartTime == 0) {\\n            vestingStartTime = block.timestamp;\\n        }\\n\\n        // Initialize the variables for offering, refunding user amounts, and tax amount\\n        (\\n            uint256 offeringTokenAmount,\\n            uint256 refundingTokenAmount,\\n            uint256 userTaxOverflow\\n        ) = _calculateOfferingAndRefundingAmountsPool(msg.sender, _pid);\\n\\n        // Increment the sumTaxesOverflow\\n        if (userTaxOverflow > 0) {\\n            _poolInformation[_pid].sumTaxesOverflow = _poolInformation[_pid].sumTaxesOverflow.add(userTaxOverflow);\\n        }\\n\\n        // Transfer these tokens back to the user if quantity > 0\\n        if (offeringTokenAmount > 0) {\\n            if (100 - _poolInformation[_pid].vestingPercentage > 0) {\\n                uint256 amount = offeringTokenAmount.mul(100 - _poolInformation[_pid].vestingPercentage).div(100);\\n\\n                // Transfer the tokens at TGE\\n                offeringToken.safeTransfer(msg.sender, amount);\\n\\n                emit Harvest(msg.sender, amount, refundingTokenAmount, _pid);\\n            }\\n            // If this pool is Vesting modal, create a VestingSchedule for each user\\n            if (_poolInformation[_pid].vestingPercentage > 0) {\\n                uint256 amount = offeringTokenAmount.mul(_poolInformation[_pid].vestingPercentage).div(100);\\n\\n                // Create VestingSchedule object\\n                _createVestingSchedule(msg.sender, _pid, amount);\\n\\n                emit CreateVestingSchedule(msg.sender, amount, refundingTokenAmount, _pid);\\n            }\\n        }\\n\\n        if (refundingTokenAmount > 0) {\\n            lpToken.safeTransfer(msg.sender, refundingTokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice It allows the admin to withdraw funds\\n     * @param _lpAmount: the number of LP token to withdraw (18 decimals)\\n     * @param _offerAmount: the number of offering amount to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function finalWithdraw(uint256 _lpAmount, uint256 _offerAmount) external override onlyOwner {\\n        require(_lpAmount <= lpToken.balanceOf(address(this)), \\\"Operations: Not enough LP tokens\\\");\\n        require(_offerAmount <= offeringToken.balanceOf(address(this)), \\\"Operations: Not enough offering tokens\\\");\\n\\n        if (_lpAmount > 0) {\\n            lpToken.safeTransfer(msg.sender, _lpAmount);\\n        }\\n\\n        if (_offerAmount > 0) {\\n            offeringToken.safeTransfer(msg.sender, _offerAmount);\\n        }\\n\\n        emit AdminWithdraw(_lpAmount, _offerAmount);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw (18 decimals)\\n     * @param _tokenAmount: the number of token amount to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n        require(_tokenAddress != address(lpToken), \\\"Recover: Cannot be LP token\\\");\\n        require(_tokenAddress != address(offeringToken), \\\"Recover: Cannot be offering token\\\");\\n\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice It sets parameters for pool\\n     * @param _offeringAmountPool: offering amount (in tokens)\\n     * @param _raisingAmountPool: raising amount (in LP tokens)\\n     * @param _limitPerUserInLP: limit per user (in LP tokens)\\n     * @param _hasTax: if the pool has a tax\\n     * @param _pid: pool id\\n     * @param _isSpecialSale: flag to set is special or public sale\\n     * @param _vestingPercentage: percentage for vesting remain tokens after end IFO\\n     * @param _vestingCliff: cliff of vesting\\n     * @param _vestingDuration: duration of vesting\\n     * @param _vestingSlicePeriodSeconds: slice period seconds of vesting\\n     * @dev This function is only callable by admin.\\n     */\\n    function setPool(\\n        uint256 _offeringAmountPool,\\n        uint256 _raisingAmountPool,\\n        uint256 _limitPerUserInLP,\\n        bool _hasTax,\\n        uint8 _pid,\\n        bool _isSpecialSale,\\n        uint256 _vestingPercentage,\\n        uint256 _vestingCliff,\\n        uint256 _vestingDuration,\\n        uint256 _vestingSlicePeriodSeconds\\n    ) external override onlyOwner {\\n        require(block.number < startBlock, \\\"Operations: IFO has started\\\");\\n        require(_pid < NUMBER_POOLS, \\\"Operations: Pool does not exist\\\");\\n        require(\\n            _vestingPercentage >= 0 && _vestingPercentage <= 100,\\n            \\\"Operations: vesting percentage should exceeds 0 and interior 100\\\"\\n        );\\n        require(_vestingDuration > 0, \\\"duration must exceeds 0\\\");\\n        require(_vestingSlicePeriodSeconds >= 1, \\\"slicePeriodSeconds must be exceeds 1\\\");\\n        require(_vestingSlicePeriodSeconds <= _vestingDuration, \\\"slicePeriodSeconds must be interior duration\\\");\\n\\n        _poolInformation[_pid].offeringAmountPool = _offeringAmountPool;\\n        _poolInformation[_pid].raisingAmountPool = _raisingAmountPool;\\n        _poolInformation[_pid].limitPerUserInLP = _limitPerUserInLP;\\n        _poolInformation[_pid].hasTax = _hasTax;\\n        _poolInformation[_pid].isSpecialSale = _isSpecialSale;\\n        _poolInformation[_pid].vestingPercentage = _vestingPercentage;\\n        _poolInformation[_pid].vestingCliff = _vestingCliff;\\n        _poolInformation[_pid].vestingDuration = _vestingDuration;\\n        _poolInformation[_pid].vestingSlicePeriodSeconds = _vestingSlicePeriodSeconds;\\n\\n        uint256 tokensDistributedAcrossPools;\\n\\n        for (uint8 i = 0; i < NUMBER_POOLS; i++) {\\n            tokensDistributedAcrossPools = tokensDistributedAcrossPools.add(_poolInformation[i].offeringAmountPool);\\n        }\\n\\n        // Update totalTokensOffered\\n        totalTokensOffered = tokensDistributedAcrossPools;\\n\\n        emit PoolParametersSet(_offeringAmountPool, _raisingAmountPool, _pid);\\n    }\\n\\n    /**\\n     * @notice It updates point parameters for the IFO.\\n     * @param _numberPoints: the number of points for the IFO\\n     * @param _campaignId: the campaignId for the IFO\\n     * @param _thresholdPoints: the amount of LP required to receive points\\n     * @dev This function is only callable by admin.\\n     */\\n    function updatePointParameters(\\n        uint256 _campaignId,\\n        uint256 _numberPoints,\\n        uint256 _thresholdPoints\\n    ) external override onlyOwner {\\n        require(block.number < endBlock, \\\"Operations: IFO has ended\\\");\\n\\n        numberPoints = _numberPoints;\\n        campaignId = _campaignId;\\n        thresholdPoints = _thresholdPoints;\\n\\n        emit PointParametersSet(campaignId, numberPoints, thresholdPoints);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @param _startBlock: the new start block\\n     * @param _endBlock: the new end block\\n     * @dev This function is only callable by admin.\\n     */\\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _endBlock) external onlyOwner {\\n        require(_endBlock < (block.number + MAX_BUFFER_BLOCKS), \\\"Operations: EndBlock too far\\\");\\n        require(block.number < startBlock, \\\"Operations: IFO has started\\\");\\n        require(_startBlock < _endBlock, \\\"Operations: New startBlock must be lower than new endBlock\\\");\\n        require(block.number < _startBlock, \\\"Operations: New startBlock must be higher than current block\\\");\\n\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n\\n        emit NewStartAndEndBlocks(_startBlock, _endBlock);\\n    }\\n\\n    /**\\n     * @notice It returns the pool information\\n     * @param _pid: pool id\\n     * @return raisingAmountPool: amount of LP tokens raised (in LP tokens)\\n     * @return offeringAmountPool: amount of tokens offered for the pool (in offeringTokens)\\n     * @return limitPerUserInLP; // limit of tokens per user (if 0, it is ignored)\\n     * @return hasTax: tax on the overflow (if any, it works with _calculateTaxOverflow)\\n     * @return totalAmountPool: total amount pool deposited (in LP tokens)\\n     * @return sumTaxesOverflow: total taxes collected (starts at 0, increases with each harvest if overflow)\\n     */\\n    function viewPoolInformation(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (\\n            _poolInformation[_pid].raisingAmountPool,\\n            _poolInformation[_pid].offeringAmountPool,\\n            _poolInformation[_pid].limitPerUserInLP,\\n            _poolInformation[_pid].hasTax,\\n            _poolInformation[_pid].totalAmountPool,\\n            _poolInformation[_pid].sumTaxesOverflow,\\n            _poolInformation[_pid].isSpecialSale\\n        );\\n    }\\n\\n    /**\\n     * @notice It returns the pool vesting information\\n     * @param _pid: pool id\\n     * @return vestingPercentage: the percentage of vesting part, claimingPercentage + vestingPercentage should be 100\\n     * @return vestingCliff: the cliff of vesting\\n     * @return vestingDuration: the duration of vesting\\n     * @return vestingSlicePeriodSeconds: the slice period seconds of vesting\\n     */\\n    function viewPoolVestingInformation(uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            _poolInformation[_pid].vestingPercentage,\\n            _poolInformation[_pid].vestingCliff,\\n            _poolInformation[_pid].vestingDuration,\\n            _poolInformation[_pid].vestingSlicePeriodSeconds\\n        );\\n    }\\n\\n    /**\\n     * @notice It returns the tax overflow rate calculated for a pool\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\n     * @param _pid: pool id\\n     * @return It returns the tax percentage\\n     */\\n    function viewPoolTaxRateOverflow(uint256 _pid) external view override returns (uint256) {\\n        if (!_poolInformation[_pid].hasTax) {\\n            return 0;\\n        } else {\\n            return\\n                _calculateTaxOverflow(_poolInformation[_pid].totalAmountPool, _poolInformation[_pid].raisingAmountPool);\\n        }\\n    }\\n\\n    /**\\n     * @notice External view function to see user allocations for both pools\\n     * @param _user: user address\\n     * @param _pids[]: array of pids\\n     * @return\\n     */\\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory allocationPools = new uint256[](_pids.length);\\n        for (uint8 i = 0; i < _pids.length; i++) {\\n            allocationPools[i] = _getUserAllocationPool(_user, _pids[i]);\\n        }\\n        return allocationPools;\\n    }\\n\\n    /**\\n     * @notice External view function to see user information\\n     * @param _user: user address\\n     * @param _pids[]: array of pids\\n     */\\n    function viewUserInfo(address _user, uint8[] calldata _pids)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory, bool[] memory)\\n    {\\n        uint256[] memory amountPools = new uint256[](_pids.length);\\n        bool[] memory statusPools = new bool[](_pids.length);\\n\\n        for (uint8 i = 0; i < NUMBER_POOLS; i++) {\\n            amountPools[i] = _userInfo[_user][i].amountPool;\\n            statusPools[i] = _userInfo[_user][i].claimedPool;\\n        }\\n        return (amountPools, statusPools);\\n    }\\n\\n    /**\\n     * @notice External view function to see user offering and refunding amounts for both pools\\n     * @param _user: user address\\n     * @param _pids: array of pids\\n     */\\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\\n        external\\n        view\\n        override\\n        returns (uint256[3][] memory)\\n    {\\n        uint256[3][] memory amountPools = new uint256[3][](_pids.length);\\n\\n        for (uint8 i = 0; i < _pids.length; i++) {\\n            uint256 userOfferingAmountPool;\\n            uint256 userRefundingAmountPool;\\n            uint256 userTaxAmountPool;\\n\\n            if (_poolInformation[_pids[i]].raisingAmountPool > 0) {\\n                (\\n                    userOfferingAmountPool,\\n                    userRefundingAmountPool,\\n                    userTaxAmountPool\\n                ) = _calculateOfferingAndRefundingAmountsPool(_user, _pids[i]);\\n            }\\n\\n            amountPools[i] = [userOfferingAmountPool, userRefundingAmountPool, userTaxAmountPool];\\n        }\\n        return amountPools;\\n    }\\n\\n    /**\\n     * @notice Returns the number of vesting schedules associated to a beneficiary\\n     * @return The number of vesting schedules\\n     */\\n    function getVestingSchedulesCountByBeneficiary(address _beneficiary) external view returns (uint256) {\\n        return holdersVestingCount[_beneficiary];\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule id at the given index\\n     * @return The vesting schedule id\\n     */\\n    function getVestingScheduleIdAtIndex(uint256 _index) external view returns (bytes32) {\\n        require(_index < getVestingSchedulesCount(), \\\"index out of bounds\\\");\\n        return vestingSchedulesIds[_index];\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule information of a given holder and index\\n     * @return The vesting schedule object\\n     */\\n    function getVestingScheduleByAddressAndIndex(address _holder, uint256 _index)\\n        external\\n        view\\n        returns (VestingSchedule memory)\\n    {\\n        return getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(_holder, _index));\\n    }\\n\\n    /**\\n     * @notice Returns the total amount of vesting schedules\\n     * @return The vesting schedule total amount\\n     */\\n    function getVestingSchedulesTotalAmount() external view returns (uint256) {\\n        return vestingSchedulesTotalAmount;\\n    }\\n\\n    /**\\n     * @notice Release vested amount of offering tokens\\n     * @param _vestingScheduleId the vesting schedule identifier\\n     */\\n    function release(bytes32 _vestingScheduleId) external nonReentrant {\\n        require(vestingSchedules[_vestingScheduleId].isVestingInitialized == true, \\\"vesting schedule is not exist\\\");\\n\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_vestingScheduleId];\\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\\n        bool isOwner = msg.sender == owner();\\n        require(isBeneficiary || isOwner, \\\"only the beneficiary and owner can release vested tokens\\\");\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\n        require(vestedAmount > 0, \\\"no vested tokens to release\\\");\\n        vestingSchedule.released = vestingSchedule.released.add(vestedAmount);\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.sub(vestedAmount);\\n        offeringToken.safeTransfer(vestingSchedule.beneficiary, vestedAmount);\\n\\n        emit Released(vestingSchedule.beneficiary, vestedAmount);\\n    }\\n\\n    /**\\n     * @notice Revokes all the vesting schedules\\n     */\\n    function revoke() external onlyOwner {\\n        require(!vestingRevoked, \\\"vesting is revoked\\\");\\n\\n        vestingRevoked = true;\\n\\n        emit Revoked();\\n    }\\n\\n    /**\\n     * @notice Returns the number of vesting schedules managed by the contract\\n     * @return The number of vesting count\\n     */\\n    function getVestingSchedulesCount() public view returns (uint256) {\\n        return vestingSchedulesIds.length;\\n    }\\n\\n    /**\\n     * @notice Returns the vested amount of tokens for the given vesting schedule identifier\\n     * @return The number of vested count\\n     */\\n    function computeReleasableAmount(bytes32 _vestingScheduleId) public view returns (uint256) {\\n        require(vestingSchedules[_vestingScheduleId].isVestingInitialized == true, \\\"vesting schedule is not exist\\\");\\n\\n        VestingSchedule memory vestingSchedule = vestingSchedules[_vestingScheduleId];\\n        return _computeReleasableAmount(vestingSchedule);\\n    }\\n\\n    /**\\n     * @notice Returns the vesting schedule information of a given identifier\\n     * @return The vesting schedule object\\n     */\\n    function getVestingSchedule(bytes32 _vestingScheduleId) public view returns (VestingSchedule memory) {\\n        return vestingSchedules[_vestingScheduleId];\\n    }\\n\\n    /**\\n     * @notice Returns the amount of offering token that can be withdrawn by the owner\\n     * @return The amount of offering token\\n     */\\n    function getWithdrawableOfferingTokenAmount() public view returns (uint256) {\\n        return offeringToken.balanceOf(address(this)).sub(vestingSchedulesTotalAmount);\\n    }\\n\\n    /**\\n     * @notice Computes the next vesting schedule identifier for a given holder address\\n     * @return The id string\\n     */\\n    function computeNextVestingScheduleIdForHolder(address _holder) public view returns (bytes32) {\\n        return computeVestingScheduleIdForAddressAndIndex(_holder, holdersVestingCount[_holder]);\\n    }\\n\\n    /**\\n     * @notice Computes the next vesting schedule identifier for an address and an index\\n     * @return The id string\\n     */\\n    function computeVestingScheduleIdForAddressAndIndex(address _holder, uint256 _index) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_holder, _index));\\n    }\\n\\n    /**\\n     * @notice Computes the next vesting schedule identifier for an address and an pid\\n     * @return The id string\\n     */\\n    function computeVestingScheduleIdForAddressAndPid(address _holder, uint256 _pid) external view returns (bytes32) {\\n        require(_pid < NUMBER_POOLS, \\\"ComputeVestingScheduleId: Non valid pool id\\\");\\n        bytes32 vestingScheduleId = computeVestingScheduleIdForAddressAndIndex(_holder, 0);\\n        VestingSchedule memory vestingSchedule = vestingSchedules[vestingScheduleId];\\n        if (vestingSchedule.pid == _pid) {\\n            return vestingScheduleId;\\n        } else {\\n            return computeVestingScheduleIdForAddressAndIndex(_holder, 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get current Time\\n     */\\n    function getCurrentTime() internal view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Computes the releasable amount of tokens for a vesting schedule\\n     * @return The amount of releasable tokens\\n     */\\n    function _computeReleasableAmount(VestingSchedule memory _vestingSchedule) internal view returns (uint256) {\\n        uint256 currentTime = getCurrentTime();\\n        if (currentTime < vestingStartTime + _poolInformation[_vestingSchedule.pid].vestingCliff) {\\n            return 0;\\n        } else if (\\n            currentTime >= vestingStartTime.add(_poolInformation[_vestingSchedule.pid].vestingDuration) ||\\n            vestingRevoked\\n        ) {\\n            return _vestingSchedule.amountTotal.sub(_vestingSchedule.released);\\n        } else {\\n            uint256 timeFromStart = currentTime.sub(vestingStartTime);\\n            uint256 secondsPerSlice = _poolInformation[_vestingSchedule.pid].vestingSlicePeriodSeconds;\\n            uint256 vestedSlicePeriods = timeFromStart.div(secondsPerSlice);\\n            uint256 vestedSeconds = vestedSlicePeriods.mul(secondsPerSlice);\\n            uint256 vestedAmount = _vestingSchedule.amountTotal.mul(vestedSeconds).div(\\n                _poolInformation[_vestingSchedule.pid].vestingDuration\\n            );\\n            vestedAmount = vestedAmount.sub(_vestingSchedule.released);\\n            return vestedAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a new vesting schedule for a beneficiary\\n     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n     * @param _pid the pool id\\n     * @param _amount total amount of tokens to be released at the end of the vesting\\n     */\\n    function _createVestingSchedule(\\n        address _beneficiary,\\n        uint8 _pid,\\n        uint256 _amount\\n    ) internal {\\n        require(\\n            getWithdrawableOfferingTokenAmount() >= _amount,\\n            \\\"can not create vesting schedule with sufficient tokens\\\"\\n        );\\n\\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(_beneficiary);\\n        require(vestingSchedules[vestingScheduleId].beneficiary == address(0), \\\"vestingScheduleId is been created\\\");\\n        vestingSchedules[vestingScheduleId] = VestingSchedule(true, _beneficiary, _pid, _amount, 0);\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount.add(_amount);\\n        vestingSchedulesIds.push(vestingScheduleId);\\n        holdersVestingCount[_beneficiary]++;\\n    }\\n\\n    /**\\n     * @notice It allows users to claim points\\n     * @param _user: user address\\n     */\\n    function _claimPoints(address _user) internal {\\n        if (!_hasClaimedPoints[_user] && numberPoints > 0) {\\n            uint256 sumPools;\\n            for (uint8 i = 0; i < NUMBER_POOLS; i++) {\\n                sumPools = sumPools.add(_userInfo[msg.sender][i].amountPool);\\n            }\\n            if (sumPools > thresholdPoints) {\\n                _hasClaimedPoints[_user] = true;\\n                // Increase user points\\n                pancakeProfile.increaseUserPoints(msg.sender, numberPoints, campaignId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice It calculates the tax overflow given the raisingAmountPool and the totalAmountPool.\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\n     * @return It returns the tax percentage\\n     */\\n    function _calculateTaxOverflow(uint256 _totalAmountPool, uint256 _raisingAmountPool)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 ratioOverflow = _totalAmountPool.div(_raisingAmountPool);\\n        if (ratioOverflow >= 1500) {\\n            return 250000000; // 0.0125%\\n        } else if (ratioOverflow >= 1000) {\\n            return 500000000; // 0.05%\\n        } else if (ratioOverflow >= 500) {\\n            return 1000000000; // 0.1%\\n        } else if (ratioOverflow >= 250) {\\n            return 1250000000; // 0.125%\\n        } else if (ratioOverflow >= 100) {\\n            return 1500000000; // 0.15%\\n        } else if (ratioOverflow >= 50) {\\n            return 2500000000; // 0.25%\\n        } else {\\n            return 5000000000; // 0.5%\\n        }\\n    }\\n\\n    /**\\n     * @notice It calculates the offering amount for a user and the number of LP tokens to transfer back.\\n     * @param _user: user address\\n     * @param _pid: pool id\\n     * @return {uint256, uint256, uint256} It returns the offering amount, the refunding amount (in LP tokens),\\n     * and the tax (if any, else 0)\\n     */\\n    function _calculateOfferingAndRefundingAmountsPool(address _user, uint8 _pid)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 userOfferingAmount;\\n        uint256 userRefundingAmount;\\n        uint256 taxAmount;\\n\\n        if (_poolInformation[_pid].totalAmountPool > _poolInformation[_pid].raisingAmountPool) {\\n            // Calculate allocation for the user\\n            uint256 allocation = _getUserAllocationPool(_user, _pid);\\n\\n            // Calculate the offering amount for the user based on the offeringAmount for the pool\\n            userOfferingAmount = _poolInformation[_pid].offeringAmountPool.mul(allocation).div(1e12);\\n\\n            // Calculate the payAmount\\n            uint256 payAmount = _poolInformation[_pid].raisingAmountPool.mul(allocation).div(1e12);\\n\\n            // Calculate the pre-tax refunding amount\\n            userRefundingAmount = _userInfo[_user][_pid].amountPool.sub(payAmount);\\n\\n            // Retrieve the tax rate\\n            if (_poolInformation[_pid].hasTax) {\\n                uint256 taxOverflow = _calculateTaxOverflow(\\n                    _poolInformation[_pid].totalAmountPool,\\n                    _poolInformation[_pid].raisingAmountPool\\n                );\\n\\n                // Calculate the final taxAmount\\n                taxAmount = userRefundingAmount.mul(taxOverflow).div(1e12);\\n\\n                // Adjust the refunding amount\\n                userRefundingAmount = userRefundingAmount.sub(taxAmount);\\n            }\\n        } else {\\n            userRefundingAmount = 0;\\n            taxAmount = 0;\\n            // _userInfo[_user] / (raisingAmount / offeringAmount)\\n            userOfferingAmount = _userInfo[_user][_pid].amountPool.mul(_poolInformation[_pid].offeringAmountPool).div(\\n                _poolInformation[_pid].raisingAmountPool\\n            );\\n        }\\n        return (userOfferingAmount, userRefundingAmount, taxAmount);\\n    }\\n\\n    /**\\n     * @notice It returns the user allocation for pool\\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\\n     * @param _user: user address\\n     * @param _pid: pool id\\n     * @return It returns the user's share of pool\\n     */\\n    function _getUserAllocationPool(address _user, uint8 _pid) internal view returns (uint256) {\\n        if (_poolInformation[_pid].totalAmountPool > 0) {\\n            return _userInfo[_user][_pid].amountPool.mul(1e18).div(_poolInformation[_pid].totalAmountPool.mul(1e6));\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if an address is a contract\\n     */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    function isQualifiedWhitelist(address _user) external view returns (bool) {\\n        return isWhitelisted(_user);\\n    }\\n\\n    function isQualifiedPoints(address _user) external view returns (bool) {\\n        if (!pancakeProfile.getUserStatus(_user)) {\\n            return false;\\n        }\\n\\n        (, uint256 profileNumberPoints, , , , ) = pancakeProfile.getUserProfile(_user);\\n        return (pointThreshold != 0 && profileNumberPoints >= pointThreshold);\\n    }\\n\\n    function isQualifiedNFT(address _user) external view returns (bool) {\\n        if (!pancakeProfile.getUserStatus(_user)) {\\n            return false;\\n        }\\n\\n        (, , , address profileAddress, uint256 tokenId, ) = pancakeProfile.getUserProfile(_user);\\n\\n        return (profileAddress == admissionProfile &&\\n            (tokenIdUsed[tokenId] == address(0) || tokenIdUsed[tokenId] == _user));\\n    }\\n\\n    function _isQualifiedWhitelist(address _user) internal view returns (bool) {\\n        return isWhitelisted(_user);\\n    }\\n\\n    function _isQualifiedPoints(uint256 profileNumberPoints) internal view returns (bool) {\\n        return (pointThreshold != 0 && profileNumberPoints >= pointThreshold);\\n    }\\n\\n    function _isQualifiedNFT(\\n        address _user,\\n        address profileAddress,\\n        uint256 tokenId\\n    ) internal view returns (bool) {\\n        return (profileAddress == admissionProfile &&\\n            (tokenIdUsed[tokenId] == address(0) || tokenIdUsed[tokenId] == _user));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"profile-nft-gamification/contracts/PancakeProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\\\";\\n\\nimport \\\"bsc-library/contracts/IBEP20.sol\\\";\\nimport \\\"bsc-library/contracts/SafeBEP20.sol\\\";\\n\\n/** @title PancakeProfile.\\n * @notice It is a contract for users to bind their address\\n * to a customizable profile by depositing a NFT.\\n */\\ncontract PancakeProfile is AccessControl, ERC721Holder {\\n    using Counters for Counters.Counter;\\n    using SafeBEP20 for IBEP20;\\n    using SafeMath for uint256;\\n\\n    IBEP20 public cakeToken;\\n\\n    bytes32 public constant NFT_ROLE = keccak256(\\\"NFT_ROLE\\\");\\n    bytes32 public constant POINT_ROLE = keccak256(\\\"POINT_ROLE\\\");\\n    bytes32 public constant SPECIAL_ROLE = keccak256(\\\"SPECIAL_ROLE\\\");\\n\\n    uint256 public numberActiveProfiles;\\n    uint256 public numberCakeToReactivate;\\n    uint256 public numberCakeToRegister;\\n    uint256 public numberCakeToUpdate;\\n    uint256 public numberTeams;\\n\\n    mapping(address => bool) public hasRegistered;\\n\\n    mapping(uint256 => Team) private teams;\\n    mapping(address => User) private users;\\n\\n    // Used for generating the teamId\\n    Counters.Counter private _countTeams;\\n\\n    // Used for generating the userId\\n    Counters.Counter private _countUsers;\\n\\n    // Event to notify a new team is created\\n    event TeamAdd(uint256 teamId, string teamName);\\n\\n    // Event to notify that team points are increased\\n    event TeamPointIncrease(uint256 indexed teamId, uint256 numberPoints, uint256 indexed campaignId);\\n\\n    event UserChangeTeam(address indexed userAddress, uint256 oldTeamId, uint256 newTeamId);\\n\\n    // Event to notify that a user is registered\\n    event UserNew(address indexed userAddress, uint256 teamId, address nftAddress, uint256 tokenId);\\n\\n    // Event to notify a user pausing her profile\\n    event UserPause(address indexed userAddress, uint256 teamId);\\n\\n    // Event to notify that user points are increased\\n    event UserPointIncrease(address indexed userAddress, uint256 numberPoints, uint256 indexed campaignId);\\n\\n    // Event to notify that a list of users have an increase in points\\n    event UserPointIncreaseMultiple(address[] userAddresses, uint256 numberPoints, uint256 indexed campaignId);\\n\\n    // Event to notify that a user is reactivating her profile\\n    event UserReactivate(address indexed userAddress, uint256 teamId, address nftAddress, uint256 tokenId);\\n\\n    // Event to notify that a user is pausing her profile\\n    event UserUpdate(address indexed userAddress, address nftAddress, uint256 tokenId);\\n\\n    // Modifier for admin roles\\n    modifier onlyOwner() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Not the main admin\\\");\\n        _;\\n    }\\n\\n    // Modifier for point roles\\n    modifier onlyPoint() {\\n        require(hasRole(POINT_ROLE, _msgSender()), \\\"Not a point admin\\\");\\n        _;\\n    }\\n\\n    // Modifier for special roles\\n    modifier onlySpecial() {\\n        require(hasRole(SPECIAL_ROLE, _msgSender()), \\\"Not a special admin\\\");\\n        _;\\n    }\\n\\n    struct Team {\\n        string teamName;\\n        string teamDescription;\\n        uint256 numberUsers;\\n        uint256 numberPoints;\\n        bool isJoinable;\\n    }\\n\\n    struct User {\\n        uint256 userId;\\n        uint256 numberPoints;\\n        uint256 teamId;\\n        address nftAddress;\\n        uint256 tokenId;\\n        bool isActive;\\n    }\\n\\n    constructor(\\n        IBEP20 _cakeToken,\\n        uint256 _numberCakeToReactivate,\\n        uint256 _numberCakeToRegister,\\n        uint256 _numberCakeToUpdate\\n    ) public {\\n        cakeToken = _cakeToken;\\n        numberCakeToReactivate = _numberCakeToReactivate;\\n        numberCakeToRegister = _numberCakeToRegister;\\n        numberCakeToUpdate = _numberCakeToUpdate;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev To create a user profile. It sends the NFT to the contract\\n     * and sends CAKE to burn address. Requires 2 token approvals.\\n     */\\n    function createProfile(\\n        uint256 _teamId,\\n        address _nftAddress,\\n        uint256 _tokenId\\n    ) external {\\n        require(!hasRegistered[_msgSender()], \\\"Already registered\\\");\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"Invalid teamId\\\");\\n        require(teams[_teamId].isJoinable, \\\"Team not joinable\\\");\\n        require(hasRole(NFT_ROLE, _nftAddress), \\\"NFT address invalid\\\");\\n\\n        // Loads the interface to deposit the NFT contract\\n        IERC721 nftToken = IERC721(_nftAddress);\\n\\n        require(_msgSender() == nftToken.ownerOf(_tokenId), \\\"Only NFT owner can register\\\");\\n\\n        // Transfer NFT to this contract\\n        nftToken.safeTransferFrom(_msgSender(), address(this), _tokenId);\\n\\n        // Transfer CAKE tokens to this contract\\n        cakeToken.safeTransferFrom(_msgSender(), address(this), numberCakeToRegister);\\n\\n        // Increment the _countUsers counter and get userId\\n        _countUsers.increment();\\n        uint256 newUserId = _countUsers.current();\\n\\n        // Add data to the struct for newUserId\\n        users[_msgSender()] = User({\\n            userId: newUserId,\\n            numberPoints: 0,\\n            teamId: _teamId,\\n            nftAddress: _nftAddress,\\n            tokenId: _tokenId,\\n            isActive: true\\n        });\\n\\n        // Update registration status\\n        hasRegistered[_msgSender()] = true;\\n\\n        // Update number of active profiles\\n        numberActiveProfiles = numberActiveProfiles.add(1);\\n\\n        // Increase the number of users for the team\\n        teams[_teamId].numberUsers = teams[_teamId].numberUsers.add(1);\\n\\n        // Emit an event\\n        emit UserNew(_msgSender(), _teamId, _nftAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev To pause user profile. It releases the NFT.\\n     * Callable only by registered users.\\n     */\\n    function pauseProfile() external {\\n        require(hasRegistered[_msgSender()], \\\"Has not registered\\\");\\n\\n        // Checks whether user has already paused\\n        require(users[_msgSender()].isActive, \\\"User not active\\\");\\n\\n        // Change status of user to make it inactive\\n        users[_msgSender()].isActive = false;\\n\\n        // Retrieve the teamId of the user calling\\n        uint256 userTeamId = users[_msgSender()].teamId;\\n\\n        // Reduce number of active users and team users\\n        teams[userTeamId].numberUsers = teams[userTeamId].numberUsers.sub(1);\\n        numberActiveProfiles = numberActiveProfiles.sub(1);\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftToken = IERC721(users[_msgSender()].nftAddress);\\n\\n        // tokenId of NFT redeemed\\n        uint256 redeemedTokenId = users[_msgSender()].tokenId;\\n\\n        // Change internal statuses as extra safety\\n        users[_msgSender()].nftAddress = address(0x0000000000000000000000000000000000000000);\\n\\n        users[_msgSender()].tokenId = 0;\\n\\n        // Transfer the NFT back to the user\\n        nftToken.safeTransferFrom(address(this), _msgSender(), redeemedTokenId);\\n\\n        // Emit event\\n        emit UserPause(_msgSender(), userTeamId);\\n    }\\n\\n    /**\\n     * @dev To update user profile.\\n     * Callable only by registered users.\\n     */\\n    function updateProfile(address _nftAddress, uint256 _tokenId) external {\\n        require(hasRegistered[_msgSender()], \\\"Has not registered\\\");\\n        require(hasRole(NFT_ROLE, _nftAddress), \\\"NFT address invalid\\\");\\n        require(users[_msgSender()].isActive, \\\"User not active\\\");\\n\\n        address currentAddress = users[_msgSender()].nftAddress;\\n        uint256 currentTokenId = users[_msgSender()].tokenId;\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftNewToken = IERC721(_nftAddress);\\n\\n        require(_msgSender() == nftNewToken.ownerOf(_tokenId), \\\"Only NFT owner can update\\\");\\n\\n        // Transfer token to new address\\n        nftNewToken.safeTransferFrom(_msgSender(), address(this), _tokenId);\\n\\n        // Transfer CAKE token to this address\\n        cakeToken.safeTransferFrom(_msgSender(), address(this), numberCakeToUpdate);\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftCurrentToken = IERC721(currentAddress);\\n\\n        // Transfer old token back to the owner\\n        nftCurrentToken.safeTransferFrom(address(this), _msgSender(), currentTokenId);\\n\\n        // Update mapping in storage\\n        users[_msgSender()].nftAddress = _nftAddress;\\n        users[_msgSender()].tokenId = _tokenId;\\n\\n        emit UserUpdate(_msgSender(), _nftAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev To reactivate user profile.\\n     * Callable only by registered users.\\n     */\\n    function reactivateProfile(address _nftAddress, uint256 _tokenId) external {\\n        require(hasRegistered[_msgSender()], \\\"Has not registered\\\");\\n        require(hasRole(NFT_ROLE, _nftAddress), \\\"NFT address invalid\\\");\\n        require(!users[_msgSender()].isActive, \\\"User is active\\\");\\n\\n        // Interface to deposit the NFT contract\\n        IERC721 nftToken = IERC721(_nftAddress);\\n        require(_msgSender() == nftToken.ownerOf(_tokenId), \\\"Only NFT owner can update\\\");\\n\\n        // Transfer to this address\\n        cakeToken.safeTransferFrom(_msgSender(), address(this), numberCakeToReactivate);\\n\\n        // Transfer NFT to contract\\n        nftToken.safeTransferFrom(_msgSender(), address(this), _tokenId);\\n\\n        // Retrieve teamId of the user\\n        uint256 userTeamId = users[_msgSender()].teamId;\\n\\n        // Update number of users for the team and number of active profiles\\n        teams[userTeamId].numberUsers = teams[userTeamId].numberUsers.add(1);\\n        numberActiveProfiles = numberActiveProfiles.add(1);\\n\\n        // Update user statuses\\n        users[_msgSender()].isActive = true;\\n        users[_msgSender()].nftAddress = _nftAddress;\\n        users[_msgSender()].tokenId = _tokenId;\\n\\n        // Emit event\\n        emit UserReactivate(_msgSender(), userTeamId, _nftAddress, _tokenId);\\n    }\\n\\n    /**\\n     * @dev To increase the number of points for a user.\\n     * Callable only by point admins\\n     */\\n    function increaseUserPoints(\\n        address _userAddress,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external onlyPoint {\\n        // Increase the number of points for the user\\n        users[_userAddress].numberPoints = users[_userAddress].numberPoints.add(_numberPoints);\\n\\n        emit UserPointIncrease(_userAddress, _numberPoints, _campaignId);\\n    }\\n\\n    /**\\n     * @dev To increase the number of points for a set of users.\\n     * Callable only by point admins\\n     */\\n    function increaseUserPointsMultiple(\\n        address[] calldata _userAddresses,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external onlyPoint {\\n        require(_userAddresses.length < 1001, \\\"Length must be < 1001\\\");\\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\\n            users[_userAddresses[i]].numberPoints = users[_userAddresses[i]].numberPoints.add(_numberPoints);\\n        }\\n        emit UserPointIncreaseMultiple(_userAddresses, _numberPoints, _campaignId);\\n    }\\n\\n    /**\\n     * @dev To increase the number of points for a team.\\n     * Callable only by point admins\\n     */\\n\\n    function increaseTeamPoints(\\n        uint256 _teamId,\\n        uint256 _numberPoints,\\n        uint256 _campaignId\\n    ) external onlyPoint {\\n        // Increase the number of points for the team\\n        teams[_teamId].numberPoints = teams[_teamId].numberPoints.add(_numberPoints);\\n\\n        emit TeamPointIncrease(_teamId, _numberPoints, _campaignId);\\n    }\\n\\n    /**\\n     * @dev To remove the number of points for a user.\\n     * Callable only by point admins\\n     */\\n    function removeUserPoints(address _userAddress, uint256 _numberPoints) external onlyPoint {\\n        // Increase the number of points for the user\\n        users[_userAddress].numberPoints = users[_userAddress].numberPoints.sub(_numberPoints);\\n    }\\n\\n    /**\\n     * @dev To remove a set number of points for a set of users.\\n     */\\n    function removeUserPointsMultiple(address[] calldata _userAddresses, uint256 _numberPoints) external onlyPoint {\\n        require(_userAddresses.length < 1001, \\\"Length must be < 1001\\\");\\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\\n            users[_userAddresses[i]].numberPoints = users[_userAddresses[i]].numberPoints.sub(_numberPoints);\\n        }\\n    }\\n\\n    /**\\n     * @dev To remove the number of points for a team.\\n     * Callable only by point admins\\n     */\\n\\n    function removeTeamPoints(uint256 _teamId, uint256 _numberPoints) external onlyPoint {\\n        // Increase the number of points for the team\\n        teams[_teamId].numberPoints = teams[_teamId].numberPoints.sub(_numberPoints);\\n    }\\n\\n    /**\\n     * @dev To add a NFT contract address for users to set their profile.\\n     * Callable only by owner admins.\\n     */\\n    function addNftAddress(address _nftAddress) external onlyOwner {\\n        require(IERC721(_nftAddress).supportsInterface(0x80ac58cd), \\\"Not ERC721\\\");\\n        grantRole(NFT_ROLE, _nftAddress);\\n    }\\n\\n    /**\\n     * @dev Add a new teamId\\n     * Callable only by owner admins.\\n     */\\n    function addTeam(string calldata _teamName, string calldata _teamDescription) external onlyOwner {\\n        // Verify length is between 3 and 16\\n        bytes memory strBytes = bytes(_teamName);\\n        require(strBytes.length < 20, \\\"Must be < 20\\\");\\n        require(strBytes.length > 3, \\\"Must be > 3\\\");\\n\\n        // Increment the _countTeams counter and get teamId\\n        _countTeams.increment();\\n        uint256 newTeamId = _countTeams.current();\\n\\n        // Add new team data to the struct\\n        teams[newTeamId] = Team({\\n            teamName: _teamName,\\n            teamDescription: _teamDescription,\\n            numberUsers: 0,\\n            numberPoints: 0,\\n            isJoinable: true\\n        });\\n\\n        numberTeams = newTeamId;\\n        emit TeamAdd(newTeamId, _teamName);\\n    }\\n\\n    /**\\n     * @dev Function to change team.\\n     * Callable only by special admins.\\n     */\\n    function changeTeam(address _userAddress, uint256 _newTeamId) external onlySpecial {\\n        require(hasRegistered[_userAddress], \\\"User doesn't exist\\\");\\n        require((_newTeamId <= numberTeams) && (_newTeamId > 0), \\\"teamId doesn't exist\\\");\\n        require(teams[_newTeamId].isJoinable, \\\"Team not joinable\\\");\\n        require(users[_userAddress].teamId != _newTeamId, \\\"Already in the team\\\");\\n\\n        // Get old teamId\\n        uint256 oldTeamId = users[_userAddress].teamId;\\n\\n        // Change number of users in old team\\n        teams[oldTeamId].numberUsers = teams[oldTeamId].numberUsers.sub(1);\\n\\n        // Change teamId in user mapping\\n        users[_userAddress].teamId = _newTeamId;\\n\\n        // Change number of users in new team\\n        teams[_newTeamId].numberUsers = teams[_newTeamId].numberUsers.add(1);\\n\\n        emit UserChangeTeam(_userAddress, oldTeamId, _newTeamId);\\n    }\\n\\n    /**\\n     * @dev Claim CAKE to burn later.\\n     * Callable only by owner admins.\\n     */\\n    function claimFee(uint256 _amount) external onlyOwner {\\n        cakeToken.safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    /**\\n     * @dev Make a team joinable again.\\n     * Callable only by owner admins.\\n     */\\n    function makeTeamJoinable(uint256 _teamId) external onlyOwner {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n        teams[_teamId].isJoinable = true;\\n    }\\n\\n    /**\\n     * @dev Make a team not joinable.\\n     * Callable only by owner admins.\\n     */\\n    function makeTeamNotJoinable(uint256 _teamId) external onlyOwner {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n        teams[_teamId].isJoinable = false;\\n    }\\n\\n    /**\\n     * @dev Rename a team\\n     * Callable only by owner admins.\\n     */\\n    function renameTeam(\\n        uint256 _teamId,\\n        string calldata _teamName,\\n        string calldata _teamDescription\\n    ) external onlyOwner {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n\\n        // Verify length is between 3 and 16\\n        bytes memory strBytes = bytes(_teamName);\\n        require(strBytes.length < 20, \\\"Must be < 20\\\");\\n        require(strBytes.length > 3, \\\"Must be > 3\\\");\\n\\n        teams[_teamId].teamName = _teamName;\\n        teams[_teamId].teamDescription = _teamDescription;\\n    }\\n\\n    /**\\n     * @dev Update the number of CAKE to register\\n     * Callable only by owner admins.\\n     */\\n    function updateNumberCake(\\n        uint256 _newNumberCakeToReactivate,\\n        uint256 _newNumberCakeToRegister,\\n        uint256 _newNumberCakeToUpdate\\n    ) external onlyOwner {\\n        numberCakeToReactivate = _newNumberCakeToReactivate;\\n        numberCakeToRegister = _newNumberCakeToRegister;\\n        numberCakeToUpdate = _newNumberCakeToUpdate;\\n    }\\n\\n    /**\\n     * @dev Check the user's profile for a given address\\n     */\\n    function getUserProfile(address _userAddress)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            bool\\n        )\\n    {\\n        require(hasRegistered[_userAddress], \\\"Not registered\\\");\\n        return (\\n            users[_userAddress].userId,\\n            users[_userAddress].numberPoints,\\n            users[_userAddress].teamId,\\n            users[_userAddress].nftAddress,\\n            users[_userAddress].tokenId,\\n            users[_userAddress].isActive\\n        );\\n    }\\n\\n    /**\\n     * @dev Check the user's status for a given address\\n     */\\n    function getUserStatus(address _userAddress) external view returns (bool) {\\n        return (users[_userAddress].isActive);\\n    }\\n\\n    /**\\n     * @dev Check a team's profile\\n     */\\n    function getTeamProfile(uint256 _teamId)\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        require((_teamId <= numberTeams) && (_teamId > 0), \\\"teamId invalid\\\");\\n        return (\\n            teams[_teamId].teamName,\\n            teams[_teamId].teamDescription,\\n            teams[_teamId].numberUsers,\\n            teams[_teamId].numberPoints,\\n            teams[_teamId].isJoinable\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIFOV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/** @title IIFOV5.\\n * @notice It is an interface for IFOV5.sol\\n */\\ninterface IIFOV5 {\\n    function depositPool(uint256 _amount, uint8 _pid) external;\\n\\n    function harvestPool(uint8 _pid) external;\\n\\n    function finalWithdraw(uint256 _lpAmount, uint256 _offerAmount) external;\\n\\n    function setPool(\\n        uint256 _offeringAmountPool,\\n        uint256 _raisingAmountPool,\\n        uint256 _limitPerUserInLP,\\n        bool _hasTax,\\n        uint8 _pid,\\n        bool _isSpecialSale,\\n        uint256 _vestingPercentage,\\n        uint256 _vestingCliff,\\n        uint256 _vestingDuration,\\n        uint256 _vestingSlicePeriodSeconds\\n    ) external;\\n\\n    function updatePointParameters(\\n        uint256 _campaignId,\\n        uint256 _numberPoints,\\n        uint256 _thresholdPoints\\n    ) external;\\n\\n    function viewPoolInformation(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function viewPoolVestingInformation(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function viewPoolTaxRateOverflow(uint256 _pid) external view returns (uint256);\\n\\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids) external view returns (uint256[] memory);\\n\\n    function viewUserInfo(address _user, uint8[] calldata _pids)\\n        external\\n        view\\n        returns (uint256[] memory, bool[] memory);\\n\\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\\n        external\\n        view\\n        returns (uint256[3][] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/WhiteList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Whitelist is Ownable {\\n    mapping(address => bool) private whitelist;\\n\\n    event WhitelistedAddressAdded(address indexed _user);\\n    event WhitelistedAddressRemoved(address indexed _user);\\n\\n    /**\\n     * @dev throws if user is not whitelisted.\\n     * @param _user address\\n     */\\n    modifier onlyIfWhitelisted(address _user) {\\n        require(whitelist[_user]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev add single address to whitelist\\n     */\\n    function addAddressToWhitelist(address _user) external onlyOwner {\\n        whitelist[_user] = true;\\n        emit WhitelistedAddressAdded(_user);\\n    }\\n\\n    /**\\n     * @dev add addresses to whitelist\\n     */\\n    function addAddressesToWhitelist(address[] calldata _users) external onlyOwner {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            whitelist[_users[i]] = true;\\n            emit WhitelistedAddressAdded(_users[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev remove single address from whitelist\\n     */\\n    function removeAddressFromWhitelist(address _user) external onlyOwner {\\n        whitelist[_user] = false;\\n        emit WhitelistedAddressRemoved(_user);\\n    }\\n\\n    /**\\n     * @dev remove addresses from whitelist\\n     */\\n    function removeAddressesFromWhitelist(address[] calldata _users) external onlyOwner {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            whitelist[_users[i]] = false;\\n            emit WhitelistedAddressRemoved(_users[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev getter to determine if address is in whitelist\\n     */\\n    function isWhitelisted(address _user) public view returns (bool) {\\n        return whitelist[_user];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ICake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ICaKePool.sol\\\";\\n\\ncontract ICake is Ownable {\\n    using SafeMath for uint256;\\n\\n    ICaKePool public immutable cakePool;\\n\\n    address public admin;\\n    // threshold of locked duration\\n    uint256 public ceiling;\\n\\n    uint256 public constant MIN_CEILING_DURATION = 1 weeks;\\n\\n    event UpdateCeiling(uint256 newCeiling);\\n\\n    /**\\n     * @notice Checks if the msg.sender is the admin address\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"None admin!\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _cakePool: Cake pool contract\\n     * @param _admin: admin of the this contract\\n     * @param _ceiling: the max locked duration which the linear decrease start\\n     */\\n    constructor(\\n        ICaKePool _cakePool,\\n        address _admin,\\n        uint256 _ceiling\\n    ) public {\\n        require(_ceiling >= MIN_CEILING_DURATION, \\\"Invalid ceiling duration\\\");\\n        cakePool = _cakePool;\\n        admin = _admin;\\n        ceiling = _ceiling;\\n    }\\n\\n    /**\\n     * @notice calculate iCake credit per user.\\n     * @param _user: user address.\\n     */\\n    function getUserCredit(address _user) external view returns (uint256) {\\n        require(_user != address(0), \\\"getUserCredit: Invalid address\\\");\\n\\n        ICaKePool.UserInfo memory userInfo = cakePool.userInfo(_user);\\n\\n        if (!userInfo.locked || block.timestamp > userInfo.lockEndTime) {\\n            return 0;\\n        }\\n\\n        // lockEndTime always >= lockStartTime\\n        uint256 lockDuration = userInfo.lockEndTime.sub(userInfo.lockStartTime);\\n\\n        if (lockDuration >= ceiling) {\\n            return userInfo.lockedAmount;\\n        } else if (lockDuration < ceiling && lockDuration >= 0) {\\n            return (userInfo.lockedAmount.mul(lockDuration)).div(ceiling);\\n        }\\n    }\\n\\n    /**\\n     * @notice update ceiling thereshold duration for iCake calculation.\\n     * @param _newCeiling: new threshold duration.\\n     */\\n    function updateCeiling(uint256 _newCeiling) external onlyAdmin {\\n        require(_newCeiling >= MIN_CEILING_DURATION, \\\"updateCeiling: Invalid ceiling\\\");\\n        require(ceiling != _newCeiling, \\\"updateCeiling: Ceiling not changed\\\");\\n        ceiling = _newCeiling;\\n        emit UpdateCeiling(ceiling);\\n    }\\n}\\n\"\r\n    },\r\n    \"pancake-cake-vault/contracts/test/CakeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// CakeToken with Governance.\\ncontract CakeToken is ERC20(\\\"PancakeSwap Token\\\", \\\"Cake\\\"), Ownable {\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address) {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))\\n        );\\n\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"CAKE::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"CAKE::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"CAKE::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\\n        require(blockNumber < block.number, \\\"CAKE::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying CAKEs (not scaled);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CAKE::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"pancake-cake-vault/contracts/test/SyrupBar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./CakeToken.sol\\\";\\n\\n// SyrupBar with Governance.\\ncontract SyrupBar is ERC20(\\\"SyrupBar Token\\\", \\\"SYRUP\\\"), Ownable {\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    function burn(address _from, uint256 _amount) public onlyOwner {\\n        _burn(_from, _amount);\\n        _moveDelegates(_delegates[_from], address(0), _amount);\\n    }\\n\\n    // The CAKE TOKEN!\\n    CakeToken public cake;\\n\\n    constructor(CakeToken _cake) public {\\n        cake = _cake;\\n    }\\n\\n    // Safe cake transfer function, just in case if rounding error causes pool to not have enough CAKEs.\\n    function safeCakeTransfer(address _to, uint256 _amount) public onlyOwner {\\n        uint256 cakeBal = cake.balanceOf(address(this));\\n        if (_amount > cakeBal) {\\n            cake.transfer(_to, cakeBal);\\n        } else {\\n            cake.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address) {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))\\n        );\\n\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"CAKE::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"CAKE::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"CAKE::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\\n        require(blockNumber < block.number, \\\"CAKE::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying CAKEs (not scaled);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"CAKE::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"pancake-cake-vault/contracts/test/MasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./CakeToken.sol\\\";\\nimport \\\"./SyrupBar.sol\\\";\\n\\n// import \\\"@nomiclabs/buidler/console.sol\\\";\\n\\ninterface IMigratorChef {\\n    // Perform LP token migration from legacy PancakeSwap to CakeSwap.\\n    // Take the current LP token address and return the new LP token address.\\n    // Migrator should have full access to the caller's LP token.\\n    // Return the new LP token address.\\n    //\\n    // XXX Migrator must have allowance access to PancakeSwap LP tokens.\\n    // CakeSwap must mint EXACTLY the same amount of CakeSwap LP tokens or\\n    // else something bad will happen. Traditional PancakeSwap does not\\n    // do that so be careful!\\n    function migrate(IERC20 token) external returns (IERC20);\\n}\\n\\n// MasterChef is the master of Cake. He can make Cake and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once CAKE is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract MasterChef is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of CAKEs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accCakePerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. CAKEs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that CAKEs distribution occurs.\\n        uint256 accCakePerShare; // Accumulated CAKEs per share, times 1e12. See below.\\n    }\\n\\n    // The CAKE TOKEN!\\n    CakeToken public cake;\\n    // The SYRUP TOKEN!\\n    SyrupBar public syrup;\\n    // Dev address.\\n    address public devaddr;\\n    // CAKE tokens created per block.\\n    uint256 public cakePerBlock;\\n    // Bonus muliplier for early cake makers.\\n    uint256 public BONUS_MULTIPLIER = 1;\\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n    IMigratorChef public migrator;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when CAKE mining starts.\\n    uint256 public startBlock;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    constructor(\\n        CakeToken _cake,\\n        SyrupBar _syrup,\\n        address _devaddr,\\n        uint256 _cakePerBlock,\\n        uint256 _startBlock\\n    ) public {\\n        cake = _cake;\\n        syrup = _syrup;\\n        devaddr = _devaddr;\\n        cakePerBlock = _cakePerBlock;\\n        startBlock = _startBlock;\\n\\n        // staking pool\\n        poolInfo.push(PoolInfo({lpToken: _cake, allocPoint: 1000, lastRewardBlock: startBlock, accCakePerShare: 0}));\\n\\n        totalAllocPoint = 1000;\\n    }\\n\\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\\n        BONUS_MULTIPLIER = multiplierNumber;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accCakePerShare: 0})\\n        );\\n        updateStakingPool();\\n    }\\n\\n    // Update the given pool's CAKE allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n            updateStakingPool();\\n        }\\n    }\\n\\n    function updateStakingPool() internal {\\n        uint256 length = poolInfo.length;\\n        uint256 points = 0;\\n        for (uint256 pid = 1; pid < length; ++pid) {\\n            points = points.add(poolInfo[pid].allocPoint);\\n        }\\n        if (points != 0) {\\n            points = points.div(3);\\n            totalAllocPoint = totalAllocPoint.sub(poolInfo[0].allocPoint).add(points);\\n            poolInfo[0].allocPoint = points;\\n        }\\n    }\\n\\n    // Set the migrator contract. Can only be called by the owner.\\n    function setMigrator(IMigratorChef _migrator) public onlyOwner {\\n        migrator = _migrator;\\n    }\\n\\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\\n    function migrate(uint256 _pid) public {\\n        require(address(migrator) != address(0), \\\"migrate: no migrator\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        IERC20 lpToken = pool.lpToken;\\n        uint256 bal = lpToken.balanceOf(address(this));\\n        lpToken.safeApprove(address(migrator), bal);\\n        IERC20 newLpToken = migrator.migrate(lpToken);\\n        require(bal == newLpToken.balanceOf(address(this)), \\\"migrate: bad\\\");\\n        pool.lpToken = newLpToken;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accCakePerShare = pool.accCakePerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accCakePerShare = accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accCakePerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 cakeReward = multiplier.mul(cakePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        cake.mint(devaddr, cakeReward.div(10));\\n        cake.mint(address(syrup), cakeReward);\\n        pool.accCakePerShare = pool.accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        require(_pid != 0, \\\"deposit CAKE by staking\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                safeCakeTransfer(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        require(_pid != 0, \\\"withdraw CAKE by unstaking\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            safeCakeTransfer(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Stake CAKE tokens to MasterChef\\n    function enterStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        updatePool(0);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                safeCakeTransfer(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\\n\\n        syrup.mint(msg.sender, _amount);\\n        emit Deposit(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw CAKE tokens from STAKING.\\n    function leaveStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(0);\\n        uint256 pending = user.amount.mul(pool.accCakePerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            safeCakeTransfer(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accCakePerShare).div(1e12);\\n\\n        syrup.burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Safe cake transfer function, just in case if rounding error causes pool to not have enough CAKEs.\\n    function safeCakeTransfer(address _to, uint256 _amount) internal {\\n        syrup.safeCakeTransfer(_to, _amount);\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function dev(address _devaddr) public {\\n        require(msg.sender == devaddr, \\\"dev: wut?\\\");\\n        devaddr = _devaddr;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers. \\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"bsc-library/contracts/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the token name.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"bsc-library/contracts/SafeBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IBEP20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IBEP20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IBEP20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IBEP20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    // solhint-disable-next-line max-line-length\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IBEP20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IBEP20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance =\\n      token.allowance(address(this), spender).sub(\\n        value,\\n        \\\"SafeBEP20: decreased allowance below zero\\\"\\n      );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata =\\n      address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeBEP20: BEP20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICaKePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICaKePool {\\n    struct UserInfo {\\n        uint256 shares;\\n        uint256 lastDepositedTime;\\n        uint256 cakeAtLastUserAction;\\n        uint256 lastUserActionTime;\\n        uint256 lockStartTime;\\n        uint256 lockEndTime;\\n        uint256 userBoostedShare;\\n        bool locked;\\n        uint256 lockedAmount;\\n    }\\n\\n    function userInfo(address _user) external view returns (UserInfo memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfferingToken\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excessAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"CreateVestingSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excessAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdPoints\",\"type\":\"uint256\"}],\"name\":\"PointParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offeringAmountPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raisingAmountPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"PoolParametersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IFO_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BUFFER_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_POOLS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admissionProfile\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"computeNextVestingScheduleIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndPid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"depositPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerAmount\",\"type\":\"uint256\"}],\"name\":\"finalWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingInitialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct IFOInitializableV5.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isVestingInitialized\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct IFOInitializableV5.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleIdAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableOfferingTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"harvestPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hehe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iCake\",\"outputs\":[{\"internalType\":\"contract ICake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offeringToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pancakeProfileAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBufferBlocks\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_iCakeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pointThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admissionProfile\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isQualifiedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isQualifiedPoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isQualifiedWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offeringToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeProfile\",\"outputs\":[{\"internalType\":\"contract PancakeProfile\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offeringAmountPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_raisingAmountPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitPerUserInLP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasTax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isSpecialSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingSlicePeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdUsed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensOffered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdPoints\",\"type\":\"uint256\"}],\"name\":\"updatePointParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCreditUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewPoolInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewPoolTaxRateOverflow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"viewPoolVestingInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserAllocationPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_pids\",\"type\":\"uint8[]\"}],\"name\":\"viewUserOfferingAndRefundingAmountsForPools\",\"outputs\":[{\"internalType\":\"uint256[3][]\",\"name\":\"\",\"type\":\"uint256[3][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IFOInitializableV5", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}