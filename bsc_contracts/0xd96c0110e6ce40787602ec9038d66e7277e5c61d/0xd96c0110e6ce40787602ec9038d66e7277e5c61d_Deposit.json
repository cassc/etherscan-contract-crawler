{"SourceCode": "pragma solidity 0.5.9;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Transfer to null address is not allowed\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n}\r\n\r\n\r\ncontract Beneficiary is Ownable {\r\n\r\n    address payable public beneficiary;\r\n\r\n    constructor() public  {\r\n        beneficiary = msg.sender;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function withdrawal(uint256 value) public onlyOwner {\r\n        if (value > address(this).balance) {\r\n            revert(\"Insufficient balance\");\r\n        }\r\n\r\n        beneficiaryPayout(value);\r\n    }\r\n\r\n    function withdrawalAll() public onlyOwner {\r\n        beneficiaryPayout(address(this).balance);\r\n    }\r\n\r\n    function beneficiaryPayout(uint256 value) internal {\r\n        beneficiary.transfer(value);\r\n        emit BeneficiaryPayout(value);\r\n    }\r\n\r\n    event BeneficiaryPayout(uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract Manageable is Beneficiary {\r\n\r\n    uint256 DECIMALS = 10e8;\r\n\r\n    bool maintenance = false;\r\n\r\n    mapping(address => bool) public managers;\r\n\r\n    modifier onlyManager() {\r\n\r\n        require(managers[msg.sender] || msg.sender == address(this), \"Only managers allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier notOnMaintenance() {\r\n        require(!maintenance);\r\n        _;\r\n    }\r\n\r\n    bool saleOpen = false;\r\n\r\n    modifier onlyOnSale() {\r\n        require(saleOpen);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        managers[msg.sender] = true;\r\n    }\r\n\r\n    function setMaintenanceStatus(bool _status) public onlyManager {\r\n        maintenance = _status;\r\n        emit Maintenance(_status);\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwner {\r\n        managers[_manager] = true;\r\n    }\r\n\r\n    function deleteManager(address _manager) public onlyOwner {\r\n        delete managers[_manager];\r\n    }\r\n\r\n    function _addressToPayable(address _address) internal pure returns (address payable) {\r\n        return address(uint160(_address));\r\n    }\r\n\r\n    event Maintenance(bool status);\r\n\r\n    event FailedPayout(address to, uint256 value);\r\n\r\n}\r\n\r\ncontract BnbBank is Manageable {\r\n\r\n    function transferToAddress(address payable _to, uint256 _value) external onlyManager {\r\n        require(_value <= address(this).balance);\r\n\r\n        if(!_to.send(_value)) {\r\n            emit FailedPayout(_to, _value);\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n\r\n    }\r\n}\r\n\r\ncontract MegaBank is Manageable {\r\n    MBe public mbe;\r\n    constructor(\r\n        address payable _mbe\r\n\r\n    ) public {\r\n        mbe = MBe(_mbe);\r\n    }\r\n\r\n    function setMBeContract(address payable _mbe) public onlyManager {\r\n        mbe = MBe(_mbe);\r\n    }\r\n\r\n    function transferFromAddress(address _sender, uint _amount) external onlyManager {\r\n        require(_amount > 0);\r\n        require(mbe.transferFrom(_sender, address(this), _amount));\r\n    }\r\n\r\n    function transferToAddress(address payable _to, uint256 _value) external onlyManager {\r\n        require(_value <= mbe.balanceOf(address(this)));\r\n\r\n        require(mbe.transfer(_to, _value));\r\n    }\r\n\r\n    function emergencyWithdrawERC20(uint _amount) public onlyOwner {\r\n        require(mbe.transfer(owner, _amount));\r\n    }\r\n\r\n    function() external payable {\r\n\r\n    }\r\n}\r\n\r\ncontract UserBalance is Manageable {\r\n\r\n    BnbBank bnbBankContract;\r\n\r\n    mapping (address => uint256) public userBalance;\r\n\r\n    constructor(address payable _bnbBank) public {\r\n        bnbBankContract = BnbBank(_bnbBank);\r\n    }\r\n\r\n    function setBnbBank(address payable _bnbBank) public onlyManager {\r\n        bnbBankContract = BnbBank(_bnbBank);\r\n    }\r\n\r\n    function addBalance(address user, uint256 value, uint8 transactionType, uint8 _incomeType) external onlyManager returns (uint256) {\r\n        return _addBalance(user, value, transactionType, _incomeType);\r\n    }\r\n\r\n    function decBalance(address user, uint256 value, uint8 transactionType) public onlyManager returns (uint256) {\r\n        return _decBalance(user, value, transactionType);\r\n    }\r\n\r\n    function _decBalance(address _user, uint _value, uint8 _transactionType) internal returns (uint){\r\n        require(userBalance[_user] >= _value, \"Insufficient balance\");\r\n        userBalance[_user] -= _value;\r\n\r\n        emit DecBalance(_user, _value, _transactionType);\r\n        return userBalance[_user];\r\n    }\r\n\r\n    function _addBalance(address _user, uint _value, uint8 _transactionType, uint8 _incomeType) internal returns (uint){\r\n        userBalance[_user] += _value;\r\n        emit AddBalance(_user, _value, _transactionType, _incomeType);\r\n        return userBalance[_user];\r\n    }\r\n\r\n\r\n    function getBalance(address user) public view returns (uint256) {\r\n        return userBalance[user];\r\n    }\r\n\r\n    function userWithdrawal() public {\r\n        require(false);\r\n    }\r\n\r\n    function store() external payable {\r\n        address(bnbBankContract).transfer(msg.value);\r\n    }\r\n\r\n    function beneficiaryTransfer(uint _value) public onlyManager {\r\n        if(_value > 0) {\r\n            bnbBankContract.transferToAddress(beneficiary, _value);\r\n            emit BeneficiaryPayout(_value);\r\n        }\r\n    }\r\n\r\n    event UserWithdrawalDone(address user, uint256 value);\r\n\r\n    event AddBalance(address user, uint256 value, uint8 transactionType, uint8 _incomeType);\r\n    event DecBalance(address user, uint256 value, uint8 transactionType);\r\n\r\n    function () external payable {\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract MBe is IERC20, Manageable {\r\n\r\n}\r\n\r\n\r\ncontract Deposit is Manageable {\r\n    UserBalance public UserBalanceContract;\r\n    MegaBank MegaBankContract;\r\n\r\n    constructor(\r\n        address payable _userBalance,\r\n        address payable _megaBank\r\n    ) public {\r\n        UserBalanceContract = UserBalance(_userBalance);\r\n        MegaBankContract = MegaBank(_megaBank);\r\n    }\r\n\r\n    function add() public payable {\r\n        UserBalanceContract.store.value(msg.value)();\r\n\r\n        emit AddDeposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function addMega(uint _amount) public {\r\n        require(_amount > 0);\r\n        MegaBankContract.transferFromAddress(msg.sender, _amount);\r\n\r\n        emit AddMegaDeposit(msg.sender, _amount);\r\n    }\r\n\r\n    event AddDeposit(address payable _sender, uint _value);\r\n    event AddMegaDeposit(address payable _sender, uint _value);\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addMega\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"add\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"deleteManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UserBalanceContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMaintenanceStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_userBalance\",\"type\":\"address\"},{\"name\":\"_megaBank\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AddDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"AddMegaDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Maintenance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Deposit", "CompilerVersion": "v0.5.9+commit.c68bc34e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000011f136f149aff3f539be935a1f0d17032ad2aaa400000000000000000000000029e4590b970ca60de81bc8968759dbc9e98db031", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c0b222f382e20ce48011f4ec6167f0c621161063f2391f47b94e50fb18b4e08b"}