{"SourceCode": "{\"Address.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\"},\"budz-finance.sol\":{\"content\":\"//budz-finance.sol\\r\\n//                 |       \\r\\n//                |.|      \\r\\n//               |\\\\./|     \\r\\n//               |\\\\./|\\r\\n//.              |\\\\./|              .     \\r\\n//\\\\^.\\\\          |\\\\\\\\.//|          /.^/      \\r\\n// \\\\--.|\\\\       |\\\\\\\\.//|       /|.--/          \\r\\n//   \\\\--.| \\\\    |\\\\\\\\.//|    / |.--/\\r\\n//    \\\\---.|\\\\    |\\\\./|    /|.---/     \\r\\n//       \\\\--.|\\\\  |\\\\./|  /|.--/        \\r\\n//          \\\\ .\\\\  |.|  /. /          \\r\\n//_ -_^_^_^_-  \\\\ \\\\\\\\ // /  -_^_^_^_- _   \\r\\n//  - -/_/_/- ^ ^  |  ^ ^ -\\\\_\\\\_\\\\- -      \\r\\n//            /-./ | \\\\.-\\\\\\r\\n//           /-/   |   \\\\-\\\\              \\r\\n//          ;|`         \\u0027|;\\r\\n//        \u2588\u2580\u2580\u2584 \u2588\u2500\u2500\u2588 \u2588\u2580\u2580\u2584 \u2580\u2580\u2588 \\r\\n//        \u2588\u2580\u2580\u2584 \u2588\u2500\u2500\u2588 \u2588\u2500\u2500\u2588 \u2584\u2580\u2500 \\r\\n//        \u2580\u2580\u2580\u2500 \u2500\u2580\u2580\u2580 \u2580\u2580\u2580\u2500 \u2580\u2580\u2580\\r\\n//\\r\\npragma solidity 0.6.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n//Uniswap v2 interface\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint value);\\r\\n  event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n  function symbol() external pure returns (string memory);\\r\\n  function decimals() external pure returns (uint8);\\r\\n  function totalSupply() external view returns (uint);\\r\\n  function balanceOf(address owner) external view returns (uint);\\r\\n  function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n  function approve(address spender, uint value) external returns (bool);\\r\\n  function transfer(address to, uint value) external returns (bool);\\r\\n  function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n  function nonces(address owner) external view returns (uint);\\r\\n\\r\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n  event Swap(\\r\\n      address indexed sender,\\r\\n      uint amount0In,\\r\\n      uint amount1In,\\r\\n      uint amount0Out,\\r\\n      uint amount1Out,\\r\\n      address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n  function factory() external view returns (address);\\r\\n  function token0() external view returns (address);\\r\\n  function token1() external view returns (address);\\r\\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n  function price0CumulativeLast() external view returns (uint);\\r\\n  function price1CumulativeLast() external view returns (uint);\\r\\n  function kLast() external view returns (uint);\\r\\n\\r\\n  function mint(address to) external returns (uint liquidity);\\r\\n  function burn(address to) external returns (uint amount0, uint amount1);\\r\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n  function skim(address to) external;\\r\\n  function sync() external;\\r\\n}\\r\\n\\r\\n////////////////////////////////////////////////\\r\\n////////////////////EVENTS/////////////////////\\r\\n//////////////////////////////////////////////\\r\\n\\r\\ncontract TokenEvents {\\r\\n\\r\\n    //when a user freezes tokens\\r\\n    event LpFreeze(\\r\\n        address indexed user,\\r\\n        uint value,\\r\\n        address indexed lpToken\\r\\n    );\\r\\n\\r\\n    //when a user unfreezes tokens\\r\\n    event LpUnfreeze(\\r\\n        address indexed user,\\r\\n        uint value,\\r\\n        address indexed lpToken\\r\\n    );\\r\\n    \\r\\n    //when a user stakes tokens\\r\\n    event TokenStake(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n\\r\\n    //when a user unstakes tokens\\r\\n    event TokenUnstake(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n    \\r\\n    //when a user burns tokens\\r\\n    event TokenBurn(\\r\\n        address indexed user,\\r\\n        uint value\\r\\n    );\\r\\n    \\r\\n}\\r\\n\\r\\n//////////////////////////////////////\\r\\n//////////BUDZFINANCE TOKEN CONTRACT////////\\r\\n////////////////////////////////////\\r\\ncontract BUDZFINANCE is IERC20, TokenEvents {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath for uint64;\\r\\n    using SafeMath for uint32;\\r\\n    using SafeMath for uint16;\\r\\n    using SafeMath for uint8;\\r\\n\\r\\n    using SafeERC20 for BUDZFINANCE;\\r\\n    \\r\\n    \\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    //pancake setup\\r\\n    address public cakeBUDZBNB;\\r\\n    \\r\\n    //apy setup\\r\\n    mapping (address =\\u003e uint) public lpApy;\\r\\n    uint32 public globalApy = 1000;\\r\\n    uint16 public halvening = 1;\\r\\n    uint64 public halveningDays = 7;\\r\\n    uint256 public halveningTimestamp;\\r\\n    uint256 public stakingApyLimiter = 1;\\r\\n    uint256 public burnAdjust = 3;\\r\\n    \\r\\n    //lp freeze / stake setup\\r\\n    uint constant internal MINUTESECONDS = 60;\\r\\n    uint constant internal DAYSECONDS = 86400;\\r\\n    uint constant internal MINSTAKEDAYLENGTH = 7;\\r\\n    uint256 totalStaked;\\r\\n    address[] public lpAddresses;\\r\\n    mapping (address =\\u003e uint) public totalLpFrozen;\\r\\n    mapping (address =\\u003e uint[]) public lpFrozenBalances;\\r\\n    mapping (address =\\u003e uint[]) public lpFreezeStartTimes;\\r\\n    \\r\\n    //tokenomics\\r\\n    uint256 internal _totalSupply;\\r\\n    string public constant name = \\\"budz.finance\\\";\\r\\n    string public constant symbol = \\\"BUDZ\\\";\\r\\n    uint8 public constant decimals = 18;\\r\\n\\r\\n    //admin\\r\\n    address payable internal _p1 = 0x670628750F15c42c9924880c69F54F1B168E8923;\\r\\n    address payable internal _p2 = 0xBb294b760e48E9543713a521f13fbA11c006d6b2;\\r\\n    address payable internal _p3 = 0xc7fd42a741d40c7482850fb4eDCbfc9084D6E2C4;\\r\\n    bool public isLocked = false;\\r\\n    bool private sync;\\r\\n    \\r\\n    mapping(address =\\u003e bool) admins;\\r\\n    mapping(address =\\u003e bool) public isPoolActive;\\r\\n    mapping (address =\\u003e Farmer) public farmer;\\r\\n    \\r\\n    struct Farmer{\\r\\n        uint256 stakedBalance;\\r\\n        uint256 stakeStartTimestamp;\\r\\n        uint256 totalStakingInterest;\\r\\n        uint256 totalFarmedBudz;\\r\\n        uint256 totalBurnt;\\r\\n        uint256 totalReferralBonus;\\r\\n        address referrer;\\r\\n        bool activeUser;\\r\\n    }\\r\\n    \\r\\n    modifier onlyAdmins(){\\r\\n        require(admins[msg.sender], \\\"not an admin\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    //protects against potential reentrancy\\r\\n    modifier synchronized {\\r\\n        require(!sync, \\\"Sync lock\\\");\\r\\n        sync = true;\\r\\n        _;\\r\\n        sync = false;\\r\\n    }\\r\\n\\r\\n    constructor(uint256 initialTokens) public {\\r\\n        admins[_p1] = true;\\r\\n        admins[_p2] = true;\\r\\n        admins[_p3] = true;\\r\\n        admins[msg.sender] = true;\\r\\n        halveningTimestamp = now;\\r\\n        //mint initial tokens\\r\\n        mintInitialTokens(initialTokens);\\r\\n    }\\r\\n\\r\\n\\r\\n    receive() external payable{\\r\\n        donate();\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n     \\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply unless mintBLock is true\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        uint256 amt = amount;\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _totalSupply = _totalSupply.add(amt);\\r\\n        _balances[account] = _balances[account].add(amt);\\r\\n        emit Transfer(address(0), account, amt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    //mint budz initial tokens (only ever called in constructor)\\r\\n    function mintInitialTokens(uint amount)\\r\\n        internal\\r\\n        synchronized\\r\\n    {\\r\\n        _mint(_p1, amount);\\r\\n        _mint(_p2, amount.div(10));\\r\\n        _mint(_p3, amount.div(10));\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////\\r\\n    /////////////////PUBLIC FACING - BUDZ CONTROL//////////\\r\\n    //////////////////////////////////////////////////////\\r\\n    \\r\\n    \\r\\n    ////////GROWROOM FARM FUNCTIONS/////////\\r\\n\\r\\n    \\r\\n    //freeze LP tokens to contract, approval needed\\r\\n    function FreezeLP(uint amt, uint _lpIndex, address _referrer)\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(isPoolActive[lpAddresses[_lpIndex]], \\\"pool not active\\\");\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(lpBalance(lpAddresses[_lpIndex]) \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        scopeCheck();\\r\\n        if(isHarvestable(msg.sender, _lpIndex)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, _lpIndex);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        //set user active\\r\\n        farmer[msg.sender].activeUser = true;\\r\\n        //update balances\\r\\n        lpFrozenBalances[msg.sender][_lpIndex] = lpFrozenBalances[msg.sender][_lpIndex].add(amt);\\r\\n        totalLpFrozen[lpAddresses[_lpIndex]] = totalLpFrozen[lpAddresses[_lpIndex]].add(amt);\\r\\n        //update timestamp\\r\\n        lpFreezeStartTimes[msg.sender][_lpIndex] = now;\\r\\n\\r\\n        if(_referrer != address(0) \\u0026\\u0026 _referrer != msg.sender){\\r\\n            if(farmer[_referrer].activeUser \\u0026\\u0026 farmer[msg.sender].referrer == address(0)){\\r\\n               farmer[msg.sender].referrer = _referrer;\\r\\n            }\\r\\n        }\\r\\n        IUniswapV2Pair(lpAddresses[_lpIndex]).transferFrom(msg.sender, address(this), amt);//make transfer\\r\\n        emit LpFreeze(msg.sender, amt, lpAddresses[_lpIndex]);\\r\\n    }\\r\\n    \\r\\n    //unfreeze LP tokens from contract\\r\\n    function UnfreezeLP(uint _lpIndex)\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(lpFrozenBalances[msg.sender][_lpIndex] \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough frozen funds\\r\\n        uint amt = lpFrozenBalances[msg.sender][_lpIndex];\\r\\n        if(isHarvestable(msg.sender, _lpIndex)){\\r\\n            uint256 interest = calcHarvestRewards(msg.sender, _lpIndex);\\r\\n            if(interest \\u003e 0){\\r\\n                harvest(interest);\\r\\n            }\\r\\n        }\\r\\n        lpFrozenBalances[msg.sender][_lpIndex] = 0;\\r\\n        lpFreezeStartTimes[msg.sender][_lpIndex] = 0;\\r\\n        totalLpFrozen[lpAddresses[_lpIndex]] = totalLpFrozen[lpAddresses[_lpIndex]].sub(amt);\\r\\n        IUniswapV2Pair(lpAddresses[_lpIndex]).transfer(msg.sender, amt);//make transfer\\r\\n        emit LpUnfreeze(msg.sender, amt, lpAddresses[_lpIndex]);\\r\\n    }\\r\\n    \\r\\n        \\r\\n    //harvest BUDZ from lp\\r\\n    function HarvestBudz(uint _lpIndex)\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(lpFrozenBalances[msg.sender][_lpIndex] \\u003e 0,\\\"Error: unsufficient lp balance\\\");//ensure user has enough lp frozen \\r\\n        uint256 interest = calcHarvestRewards(msg.sender, _lpIndex);\\r\\n        if(interest \\u003e 0){\\r\\n            harvest(interest);\\r\\n            lpFreezeStartTimes[msg.sender][_lpIndex] = now;\\r\\n            farmer[msg.sender].totalFarmedBudz += interest;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function harvest(uint rewards)\\r\\n        internal\\r\\n    {\\r\\n        _mint(msg.sender, rewards);\\r\\n        uint refFee = rewards.div(10);\\r\\n        if(farmer[msg.sender].referrer != address(0)){\\r\\n            _mint(msg.sender, refFee.div(2));//5% bonus for farmer using reflink\\r\\n            _mint(farmer[msg.sender].referrer, refFee.div(2));//5% referrer bonus on all harvests\\r\\n            farmer[farmer[msg.sender].referrer].totalReferralBonus += refFee.div(2);\\r\\n        }\\r\\n        _mint(_p1, refFee.mul(50).div(100));//5% dev fee\\r\\n        _mint(_p2, refFee.mul(25).div(100));//2.5%\\r\\n        _mint(_p3, refFee.mul(25).div(100));//2.5%\\r\\n    }\\r\\n\\r\\n    function scopeCheck()\\r\\n        internal \\r\\n    {\\r\\n        //ensure lpFreezeStartTimes is in scope\\r\\n        if(lpFreezeStartTimes[msg.sender].length \\u003c lpAddresses.length){\\r\\n            for(uint i = lpFreezeStartTimes[msg.sender].length; i \\u003c lpAddresses.length; i++){\\r\\n                lpFreezeStartTimes[msg.sender].push(0);\\r\\n            }\\r\\n        }\\r\\n        //ensure lpFrozenBalances is in scope\\r\\n        if(lpFrozenBalances[msg.sender].length \\u003c lpAddresses.length){\\r\\n            for(uint i = lpFrozenBalances[msg.sender].length; i \\u003c lpAddresses.length; i++){\\r\\n                lpFrozenBalances[msg.sender].push(0);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    \\r\\n    ////////STAKING FUNCTIONS/////////\\r\\n    \\r\\n    //stake BUDZ tokens to contract and claims any accrued interest\\r\\n    function StakeTokens(uint amt, address _referrer)\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(amt \\u003e 0, \\\"zero input\\\");\\r\\n        require(budzBalance() \\u003e= amt, \\\"Error: insufficient balance\\\");//ensure user has enough funds\\r\\n        if(_referrer != address(0) \\u0026\\u0026 _referrer != msg.sender){\\r\\n            if(farmer[_referrer].activeUser \\u0026\\u0026 farmer[msg.sender].referrer == address(0)){\\r\\n               farmer[msg.sender].referrer = _referrer;\\r\\n            }\\r\\n        }\\r\\n        //claim any accrued interest\\r\\n        claimInterest();\\r\\n        //update balances\\r\\n        farmer[msg.sender].activeUser = true;\\r\\n        farmer[msg.sender].stakedBalance = farmer[msg.sender].stakedBalance.add(amt);\\r\\n        totalStaked = totalStaked.add(amt);\\r\\n        _transfer(msg.sender, address(this), amt);//make transfer\\r\\n        emit TokenStake(msg.sender, amt);\\r\\n    }\\r\\n    \\r\\n    //unstake BUDZ tokens from contract and claims any accrued interest\\r\\n    function UnstakeTokens()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(farmer[msg.sender].stakedBalance \\u003e 0,\\\"Error: unsufficient frozen balance\\\");//ensure user has enough staked funds\\r\\n        require(isStakeFinished(msg.sender), \\\"tokens cannot be unstaked yet. min 7 day stake\\\");\\r\\n        uint amt = farmer[msg.sender].stakedBalance;\\r\\n        //claim any accrued interest\\r\\n        claimInterest();\\r\\n        //zero out staking timestamp\\r\\n        farmer[msg.sender].stakeStartTimestamp = 0;\\r\\n        farmer[msg.sender].stakedBalance = 0;\\r\\n        totalStaked = totalStaked.sub(amt);\\r\\n        _transfer(address(this), msg.sender, amt);//make transfer\\r\\n        emit TokenUnstake(msg.sender, amt);\\r\\n    }\\r\\n    \\r\\n    //claim any accrued interest\\r\\n    function ClaimStakeInterest()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(farmer[msg.sender].stakedBalance \\u003e 0, \\\"you have no staked balance\\\");\\r\\n        claimInterest();\\r\\n    }\\r\\n    \\r\\n    //roll any accrued interest\\r\\n    function RollStakeInterest()\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(farmer[msg.sender].stakedBalance \\u003e 0, \\\"you have no staked balance\\\");\\r\\n        rollInterest();\\r\\n    }\\r\\n    \\r\\n    function rollInterest()\\r\\n        internal\\r\\n    {\\r\\n        //calculate staking interest\\r\\n        uint256 interest = calcStakingRewards(msg.sender);\\r\\n        //mint interest to ref and devs\\r\\n        if(interest \\u003e 0){\\r\\n            //roll interest\\r\\n            farmer[msg.sender].stakedBalance = farmer[msg.sender].stakedBalance.add(interest);\\r\\n            totalStaked = totalStaked.add(interest);\\r\\n            farmer[msg.sender].totalStakingInterest += interest;\\r\\n            //reset staking timestamp\\r\\n            farmer[msg.sender].stakeStartTimestamp = now;\\r\\n            if(farmer[msg.sender].referrer != address(0)){\\r\\n                 _mint(farmer[msg.sender].referrer, interest.div(20));//5% bonus for referrer\\r\\n                 farmer[farmer[msg.sender].referrer].totalReferralBonus += interest.div(20);\\r\\n            }\\r\\n            _mint(_p1, interest.mul(2).div(100));//2% dev fee\\r\\n            _mint(_p2, interest.mul(1).div(100));//1%\\r\\n            _mint(_p3, interest.mul(1).div(100));//1%\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function claimInterest()\\r\\n        internal\\r\\n    {\\r\\n        //calculate staking interest\\r\\n        uint256 interest = calcStakingRewards(msg.sender);\\r\\n        //reset staking timestamp\\r\\n        farmer[msg.sender].stakeStartTimestamp = now;\\r\\n        //mint interest if any\\r\\n        if(interest \\u003e 0){\\r\\n            _mint(msg.sender, interest);\\r\\n            farmer[msg.sender].totalStakingInterest += interest;\\r\\n            if(farmer[msg.sender].referrer != address(0)){\\r\\n                 _mint(farmer[msg.sender].referrer, interest.div(20));//5% bonus for referrer\\r\\n                 farmer[farmer[msg.sender].referrer].totalReferralBonus += interest.div(20);\\r\\n            }\\r\\n            _mint(_p1, interest.mul(2).div(100));//2% dev fee\\r\\n            _mint(_p2, interest.mul(1).div(100));//1%\\r\\n            _mint(_p3, interest.mul(1).div(100));//1%\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function NewHalvening()\\r\\n        public\\r\\n        synchronized\\r\\n    {   \\r\\n        require(now.sub(halveningTimestamp) \\u003e= DAYSECONDS.mul(halveningDays), \\\"cannot call halvening yet\\\");\\r\\n        halveningDays += 7; //increase period by 1 week every halvening\\r\\n        halveningTimestamp = now;\\r\\n        halvening = halvening * 2;\\r\\n    }\\r\\n\\r\\n    function BurnBudz(uint amt)\\r\\n        public\\r\\n        synchronized\\r\\n    {\\r\\n        require(farmer[msg.sender].totalBurnt.add(amt) \\u003c= farmer[msg.sender].totalStakingInterest.mul(burnAdjust), \\\"can only burn equivalent of x3 total staking interest\\\");\\r\\n        require(amt \\u003e 0, \\\"value must be greater than 0\\\");\\r\\n        require(balanceOf(msg.sender) \\u003e= amt, \\\"balance too low\\\");\\r\\n        //burn tokens of user\\r\\n        _burn(msg.sender, amt);\\r\\n        farmer[msg.sender].totalBurnt += amt;\\r\\n        //burn tokens of pancake swap - pamp it\\r\\n        _balances[cakeBUDZBNB] = _balances[cakeBUDZBNB].sub(amt, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amt);\\r\\n        IUniswapV2Pair(cakeBUDZBNB).sync();\\r\\n        emit TokenBurn(msg.sender, amt);\\r\\n    }\\r\\n\\r\\n    ///////////////////////////////\\r\\n    ////////VIEW ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n\\r\\n    //returns staking rewards in BUDZ\\r\\n    function calcStakingRewards(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {\\r\\n        // totalstaked / 1000 / 1251 * (minutesPast) @ 42.0% APY\\r\\n        // (adjustments up to a max of 84% APY via burning of BUDZ)\\r\\n        uint budzBurnt = farmer[_user].totalBurnt;\\r\\n        uint staked = farmer[_user].stakedBalance;\\r\\n        uint apyAdjust = 1000;\\r\\n        if(budzBurnt \\u003e 0){\\r\\n            if(budzBurnt \\u003e= staked.div(2))\\r\\n            {\\r\\n                apyAdjust = 500;\\r\\n            }\\r\\n            else{\\r\\n                uint burntPercentage = ((budzBurnt.mul(100) / staked));\\r\\n                uint v = (1000 * burntPercentage) / 100;\\r\\n                apyAdjust = apyAdjust.sub(v);\\r\\n                if(apyAdjust \\u003c 500)\\r\\n                {\\r\\n                    apyAdjust = 500;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return (staked.div(apyAdjust.mul(stakingApyLimiter)).div(1251) * (minsPastStakeTime(_user)));\\r\\n    }\\r\\n\\r\\n    //returns amount of minutes past since stake start\\r\\n    function minsPastStakeTime(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {\\r\\n        if(farmer[_user].stakeStartTimestamp == 0){\\r\\n            return 0;\\r\\n        }\\r\\n        uint minsPast = now.sub(farmer[_user].stakeStartTimestamp).div(MINUTESECONDS);\\r\\n        if(minsPast \\u003e= 1){\\r\\n            return minsPast;// returns 0 if under 1 min passed\\r\\n        }\\r\\n        else{\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //returns lp harvest reward in BUDZ\\r\\n    function calcHarvestRewards(address _user, uint _lpIndex)\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {   \\r\\n        return ((lpFrozenBalances[_user][_lpIndex].mul(globalApy.div(halvening)).div(lpApy[lpAddresses[_lpIndex]])).mul(minsPastFreezeTime(_user, _lpIndex)));\\r\\n    }\\r\\n    \\r\\n    //returns amount of minutes past since lp freeze start\\r\\n    function minsPastFreezeTime(address _user, uint _lpIndex)\\r\\n        public\\r\\n        view\\r\\n        returns(uint)\\r\\n    {\\r\\n        if(lpFreezeStartTimes[_user][_lpIndex] == 0){\\r\\n            return 0;\\r\\n        }\\r\\n        uint minsPast = now.sub(lpFreezeStartTimes[_user][_lpIndex]).div(MINUTESECONDS);\\r\\n        if(minsPast \\u003e= 1){\\r\\n            return minsPast;// returns 0 if under 1 min passed\\r\\n        }\\r\\n        else{\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //check is stake is finished, min 7 days\\r\\n    function isStakeFinished(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns(bool)\\r\\n    {\\r\\n        if(farmer[_user].stakeStartTimestamp == 0){\\r\\n            return false;\\r\\n        }\\r\\n        else{\\r\\n            return farmer[_user].stakeStartTimestamp.add((DAYSECONDS).mul(MINSTAKEDAYLENGTH)) \\u003c= now;             \\r\\n        }\\r\\n    }\\r\\n    \\r\\n    //total LP balances frozen in contract\\r\\n    function totalFrozenLpBalance(uint _lpIndex)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return totalLpFrozen[lpAddresses[_lpIndex]];\\r\\n    }\\r\\n\\r\\n    //BUDZ balance of caller\\r\\n    function budzBalance()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return balanceOf(msg.sender);\\r\\n    }\\r\\n    \\r\\n    //LP balance of caller\\r\\n    function lpBalance(address _lpAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return IUniswapV2Pair(_lpAddress).balanceOf(msg.sender);\\r\\n\\r\\n    }\\r\\n\\r\\n    //check if user can harvest BUDZ yet\\r\\n    function isHarvestable(address _user, uint _lpIndex)\\r\\n        public\\r\\n        view\\r\\n        returns(bool)\\r\\n    {\\r\\n        if(lpFreezeStartTimes[_user][_lpIndex] == 0){\\r\\n            return false;\\r\\n        }\\r\\n        else{\\r\\n           return lpFreezeStartTimes[_user][_lpIndex].add((MINUTESECONDS.div(24))) \\u003c= now; \\r\\n        }\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////\\r\\n    ////////ADMIN ONLY//////////////\\r\\n    ///////////////////////////////\\r\\n    \\r\\n    function setBUDZBNBpool(address _lpAddress)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        require(!isLocked, \\\"cannot change native pool\\\");\\r\\n        cakeBUDZBNB = _lpAddress;\\r\\n    }\\r\\n    \\r\\n    //adjusts amount users are eligible to burn over time\\r\\n    function setBurnAdjust(uint _v)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        burnAdjust = _v;\\r\\n    }\\r\\n    \\r\\n    //decreases staking APY by 10x to 4.20% (max 8.40%)\\r\\n    function stakingApyDecrease()\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {   \\r\\n         require(!isLocked, \\\"cannot change staking APY\\\");\\r\\n         require(stakingApyLimiter == 1, \\\"cannot decrease staking APY twice, min 4.20%\\\");\\r\\n         stakingApyLimiter *= 10;\\r\\n    }\\r\\n    \\r\\n    function setGlobalApy(uint32 _apy)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {   \\r\\n         require(!isLocked, \\\"cannot change global APY\\\");\\r\\n         globalApy = _apy;\\r\\n    }\\r\\n    \\r\\n    function setApy(uint32 _apy, address _lpAddress)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        require(!isLocked, \\\"cannot change token APY\\\");\\r\\n        lpApy[_lpAddress] = _apy;\\r\\n    }\\r\\n\\r\\n    function setPoolActive(address _lpAddress, bool _active)\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        require(!isLocked, \\\"cannot change pool status\\\");\\r\\n        bool _newAddress = true;\\r\\n        for(uint i = 0; i \\u003c lpAddresses.length; i++){\\r\\n            if(_lpAddress == lpAddresses[i]){\\r\\n                _newAddress = false;\\r\\n            }\\r\\n        }\\r\\n        if(_newAddress){\\r\\n            lpAddresses.push(_lpAddress); \\r\\n        }\\r\\n        isPoolActive[_lpAddress] = _active;\\r\\n    }\\r\\n    \\r\\n    function setForeverLock()\\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        isLocked = true;\\r\\n    }\\r\\n    \\r\\n    //distribute any arbitrary token stuck in the contract via address (does not allow tokens in use by the platform)\\r\\n    function distributeTokens(address _tokenAddress) \\r\\n        public\\r\\n        onlyAdmins\\r\\n    {\\r\\n        //ensure token address does not match platform lp tokens\\r\\n        for(uint i = 0; i \\u003c lpAddresses.length; i++){\\r\\n            require(_tokenAddress != lpAddresses[i], \\\"this token is vital to the budz.finance ecosystem, you cannot withdraw this token!!!\\\");\\r\\n        }\\r\\n        //ensure token address does not match this contract\\r\\n        require(_tokenAddress != address(this), \\\"this token is vital to the budz.finance ecosystem, you cannot withdraw this token!!!\\\");\\r\\n        //create contract\\r\\n        IERC20 _token = IERC20(_tokenAddress);\\r\\n        //get balance \\r\\n        uint256 balance = _token.balanceOf(address(this));\\r\\n        //distribute\\r\\n        _token.transfer(_p1, balance.mul(50).div(100));\\r\\n        _token.transfer(_p2, balance.mul(25).div(100));\\r\\n        _token.transfer(_p3, balance.mul(25).div(100));\\r\\n    }\\r\\n    \\r\\n    function donate() public payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        bool success = false;\\r\\n        uint256 balance = msg.value;\\r\\n        //distribute\\r\\n        (success, ) =  _p1.call{value:balance.mul(50).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        (success, ) =  _p2.call{value:balance.mul(25).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        (success, ) =  _p3.call{value:balance.mul(25).div(100)}{gas:21000}(\\u0027\\u0027);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);//from address(0) for minting\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.6.4;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LpFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"LpUnfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"BurnBudz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimStakeInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"FreezeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpIndex\",\"type\":\"uint256\"}],\"name\":\"HarvestBudz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NewHalvening\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RollStakeInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"StakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpIndex\",\"type\":\"uint256\"}],\"name\":\"UnfreezeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"budzBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAdjust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeBUDZBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpIndex\",\"type\":\"uint256\"}],\"name\":\"calcHarvestRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calcStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"farmer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakingInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFarmedBudz\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBurnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferralBonus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"activeUser\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalApy\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvening\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halveningDays\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halveningTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpIndex\",\"type\":\"uint256\"}],\"name\":\"isHarvestable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isStakeFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"name\":\"lpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpFreezeStartTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpFrozenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpIndex\",\"type\":\"uint256\"}],\"name\":\"minsPastFreezeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"minsPastStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_apy\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"name\":\"setApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"name\":\"setBUDZBNBpool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setBurnAdjust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setForeverLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_apy\",\"type\":\"uint32\"}],\"name\":\"setGlobalApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setPoolActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingApyDecrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingApyLimiter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpIndex\",\"type\":\"uint256\"}],\"name\":\"totalFrozenLpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLpFrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BUDZFINANCE", "CompilerVersion": "v0.6.4+commit.1dca32f3", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000084595161401484a000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://15904e70429c742f26989b15820e251f440c78a9564ff77ec9194a294ef413fc"}