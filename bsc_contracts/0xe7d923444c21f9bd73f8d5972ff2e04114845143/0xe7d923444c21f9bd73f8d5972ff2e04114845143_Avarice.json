{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-07-12\r\n*/\r\n\r\npragma solidity 0.8.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n \r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, ReentrancyGuard {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name = \"Avarice\";\r\n    string private _symbol = \"BAVC\";\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    // constructor(string memory name_, string memory symbol_) {\r\n    //     _name = name_;\r\n    //     _symbol = symbol_;\r\n    // }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Avarice is ERC20, Ownable {\r\n    // 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee; /** BUSD Testnet \r\n\taddress private tokenAddr = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // BUSD\r\n\tIERC20 public token_BUSD;\r\n\r\n    event UserStake(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 rawAmount,\r\n        uint256 duration\r\n    );\r\n\r\n    event UserStakeCollect(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 rawAmount\r\n    );\r\n\r\n    event UserLobby(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 rawAmount\r\n    );\r\n\r\n    event UserLobbyCollect(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 rawAmount\r\n    );\r\n\r\n    event stake_sell_request(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 price,\r\n        uint256 rawAmount,\r\n        uint256 stakeId\r\n    );\r\n\r\n\r\n    event stake_loan_request(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 rawAmount,\r\n        uint256 duration,\r\n        uint256 stakeId\r\n    );\r\n\r\n    event stake_lend(\r\n        address indexed addr,\r\n        uint256 timestamp,\r\n        uint256 stakeId\r\n    );\r\n\r\n    event day_lobby_entry(\r\n        uint256 timestamp,\r\n        uint256 day,\r\n        uint256 value\r\n    );\r\n\r\n    event lottery_winner(\r\n        address indexed addr,\r\n        uint256 amount,\r\n        uint256 timestamp,\r\n        uint256 lastRecord\r\n    );\r\n\r\n    event stake_sold(\r\n        address indexed addr,\r\n        address indexed addr_2,\r\n        uint256 timestamp,\r\n        uint256 amount,\r\n        uint256 stakeId\r\n    );\r\n\r\n\r\n    constructor() {\r\n        _mint(msg.sender, 4700000 * 1e18); // 3.2 mil goes for day 1 users of the old contract and their refs reward\r\n        token_BUSD = IERC20(tokenAddr);\r\n    }\r\n    \r\n\r\n    /* Address of flush accs */\r\n    address public avariceTeam_addr_1 = 0xFfaf5770e3859935fC4A44ff397B0645232325D1; // 40%\r\n    address public avariceTeam_addr_2 = 0xE08B6015B0870d0E3711962c11D1144e019f7482; // 18%\r\n    address public avariceTeam_addr_3 = 0xde08C84C9005dcE3BD82FaD861Aa191f85CF14e0; // 10%\r\n    address public avariceTeam_addr_4 = 0x2AAD5D68bfDC3210674ec9a8Ea254265E1c72209; // 8%\r\n    address public avariceTeam_addr_5 = 0x0245Ba7FeB96990181E5BED79ecD407931c778a1; // 8%\r\n    address public avariceTeam_addr_6 = 0x9A102cD095259A17777A23c083785c39F5F2F72d; // 8%\r\n    address public avariceTeam_addr_7 = 0xc8d0a839652F6948AB0AD482E6f000422a6334B0; // 8%\r\n\r\n    address internal AVC_buyback_addr = 0x57f52F4a0A1a749F38f61Dc5858c78bD82ebd020; // 3.5%\r\n    address internal inventive_addr = 0xb7a0D2Ba085F8CBB4d93cd9717C93E397b6cAB7c; // 1%\r\n    address internal buyBack_addr = 0x1706765C9751368682d30B8b7039E0d5E4E29F13; // 1%\r\n\r\n    address public partner_1_addr;\r\n    address public partner_2_addr;\r\n    address public partner_3_addr;\r\n    uint256 public partner_1_share;\r\n    uint256 public partner_2_share;\r\n    uint256 public partner_3_share;\r\n\r\n    /* last amount of lobby pool that are minted daily to be distributed between lobby participants which starts from 3 mil */\r\n    uint256 public lastLobbyPool = 3000000 * 1e18;\r\n\r\n    /* % from every day's lobby entry dedicated to avarice team, marketing and buy back */\r\n    uint256 internal constant DM_avariceTeam_percentage = 4;      \r\n    uint256 internal constant DM_inventive_percentage = 1;      \r\n    uint256 internal constant DM_buyBack_percentage = 1;      \r\n    uint256 internal constant DM_AVC_buyBack_percentage = 35;   // 3.5\r\n\r\n    /* Every day's lobby pool is % lower than previous day's */\r\n    uint256 internal constant lobby_pool_decrease_percentage = 5;  \r\n\r\n    /* % of every day's lobby entry to be pooled as divs */\r\n    uint256 public percentOfLobbyToBePooled = 90;  \r\n\r\n    /* The ratio num for calculating stakes bonus tokens */\r\n    uint256 internal constant bonus_calc_ratio = 128;  \r\n\r\n    /* Max staking days */\r\n    uint256 internal constant max_stake_days = 300;  \r\n\r\n    /* Ref bonus NR*/\r\n    uint256 internal constant ref_bonus_NR = 2;  \r\n\r\n    /* Refered person bonus NR*/\r\n    uint256 internal constant ref_bonus_NRR = 1;  \r\n\r\n    /* dividends pool caps at 60 days, meaning that the lobby entery of days > 60 will only devide for next 60 days and no more */\r\n    uint256 internal constant dividendsPoolCapDays = 60;  \r\n\r\n    /* Loaning feature is paused? */\r\n    bool public loaningIsPaused = false; \r\n\r\n    /* Stake selling feature is paused? */\r\n    bool public stakeSellingIsPaused = false; \r\n\r\n    /* virtual Entering feature is paused? */\r\n    bool public virtualBalanceEnteringIsPaused = false; \r\n\r\n    /* ------------------ for the sake of UI statistics ------------------ */\r\n    // lobby memebrs overall data \r\n    struct memberLobby_overallData{\r\n        uint256 overall_collectedTokens;\r\n        uint256 overall_lobbyEnteries;\r\n        uint256 overall_stakedTokens;\r\n        uint256 overall_collectedDivs;\r\n    }\r\n    // new map for every user's overall data  \r\n    mapping(address => memberLobby_overallData) public mapMemberLobby_overallData;\r\n    // total lobby entry  \r\n    uint256 public overall_lobbyEntry;\r\n    // total staked tokens  \r\n    uint256 public overall_stakedTokens;\r\n    // total lobby token collected  \r\n    uint256 public overall_collectedTokens;\r\n    // total stake divs collected  \r\n    uint256 public overall_collectedDivs;\r\n    // total bonus token collected  \r\n    uint256 public overall_collectedBonusTokens;\r\n    // total referrer bonus paid to an address  \r\n    mapping(address => uint256) public referrerBonusesPaid;\r\n    // counting unique (unique for every day only) lobby enteries for each day\r\n    mapping(uint256 => uint256) public usersCountDaily;\r\n    // counting unique (unique for every day only) users\r\n    uint256 public usersCount = 0;\r\n    /* Total ever entered as stake tokens */ \r\n    uint256 public saveTotalToken;\r\n    /* ------------------ for the sake of UI statistics ------------------ */\r\n\r\n\r\n    /* lobby memebrs data */ \r\n    struct memberLobby{\r\n        uint256 extraVirtualTokens;\r\n        uint256 memberLobbyValue;\r\n        uint256 memberLobbyEntryDay;\r\n        bool hasCollected;\r\n        address referrer;\r\n    }\r\n\r\n    /* new map for every entry (users are allowed to enter multiple times a day) */ \r\n    mapping(address => mapping(uint256 => memberLobby)) public mapMemberLobby;\r\n\r\n    /* day's total lobby entry */ \r\n    mapping(uint256 => uint256) public lobbyEntry;\r\n\r\n\r\n    /* User stakes struct */ \r\n    struct memberStake {\r\n        address userAddress;\r\n        uint256 tokenValue;\r\n        uint256 startDay;\r\n        uint256 endDay;\r\n        uint256 stakeId;\r\n        uint256 price; // use: sell stake\r\n        uint256 loansReturnAmount; // total of the loans return amount that have been taken on this stake \r\n        bool stakeCollected;\r\n        bool stake_hasSold; // stake been sold ?\r\n        bool stake_forSell; // currently asking to sell stake ?\r\n        bool stake_hasLoan; // is there an active loan on stake ?\r\n        bool stake_forLoan; // currently asking for a loan on the stake ?\r\n    }\r\n\r\n    /* A map for each user */ \r\n    mapping(address => mapping(uint256 => memberStake)) public mapMemberStake;\r\n\r\n    /* Total active tokens in stake for a day */ \r\n    mapping(uint256 => uint256) public daysActiveInStakeTokens;\r\n    mapping(uint256 => uint256) public daysActiveInStakeTokensIncrese;\r\n    mapping(uint256 => uint256) public daysActiveInStakeTokensDecrase;\r\n\r\n\r\n    /* Owner switching the loaning feature status */\r\n    function switchLoaningStatus() external onlyOwner() {\r\n        if (loaningIsPaused == true) {\r\n            loaningIsPaused = false;\r\n        } \r\n        else if (loaningIsPaused == false) {\r\n            loaningIsPaused = true;\r\n        }\r\n    }\r\n\r\n    /* Owner switching the virtualBalanceEntering feature status */\r\n    function switchVirtualBalanceEntering() external onlyOwner() {\r\n        if (virtualBalanceEnteringIsPaused == true) {\r\n            virtualBalanceEnteringIsPaused = false;\r\n        } \r\n        else if (virtualBalanceEnteringIsPaused == false) {\r\n            virtualBalanceEnteringIsPaused = true;\r\n        }\r\n    }\r\n    \r\n    /* Owner switching the stake selling feature status */\r\n    function switchStakeSellingStatus() external onlyOwner() {\r\n        if (stakeSellingIsPaused == true) {\r\n            stakeSellingIsPaused = false;\r\n        } \r\n        else if (stakeSellingIsPaused == false) {\r\n            stakeSellingIsPaused = true;\r\n        }\r\n    }\r\n\r\n    /* Flushed lottery pool*/ \r\n    function flushLottyPool() external onlyOwner() nonReentrant {\r\n        token_BUSD.transfer(address(avariceTeam_addr_1), lottery_Pool);\r\n    }\r\n\r\n    /* change inventive wallet address % */ \r\n    function do_changeInventiveAddress(address adr) external onlyOwner() {\r\n        inventive_addr = adr;\r\n    }\r\n\r\n    /* change team wallets address % */ \r\n    function do_changeTeam1Address(address adr) external onlyOwner() {\r\n        avariceTeam_addr_1 = adr;\r\n    }\r\n    function do_changeTeam2Address(address adr) external onlyOwner() {\r\n        avariceTeam_addr_2 = adr;\r\n    }\r\n    function do_changeTeam3Address(address adr) external onlyOwner() {\r\n        avariceTeam_addr_3 = adr;\r\n    }\r\n    function do_changeTeam4Address(address adr) external onlyOwner() {\r\n        avariceTeam_addr_4 = adr;\r\n    }\r\n    function do_changeTeam5Address(address adr) external onlyOwner() {\r\n        avariceTeam_addr_5 = adr;\r\n    }\r\n    function do_changeTeam6Address(address adr) external onlyOwner() {\r\n        avariceTeam_addr_6 = adr;\r\n    }\r\n    function do_changeTeam7Address(address adr) external onlyOwner() {\r\n        avariceTeam_addr_7 = adr;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev flushes the dev share from stake sells\r\n     */\r\n    function flushdevShareOfStakeSells() external onlyOwner() nonReentrant {\r\n        require(devShareOfStakeSellsAndLoanFee > 0);\r\n        \r\n        token_BUSD.transfer(address(avariceTeam_addr_1), devShareOfStakeSellsAndLoanFee);\r\n        devShareOfStakeSellsAndLoanFee = 0;\r\n    }\r\n\r\n\r\n    /* Time of contract launch */\r\n    uint256 internal constant LAUNCH_TIME = 1657584000 + 86400;   \r\n    uint256 currentDay;\r\n\r\n    function _clcDay() public view returns (uint256) {\r\n        return (block.timestamp - LAUNCH_TIME) / 1 days;\r\n    }\r\n\r\n    function _updateDaily() public {\r\n\r\n        // this is true once a day\r\n        if (currentDay != _clcDay()) {\r\n\r\n            if (currentDay < dividendsPoolCapDays) {\r\n                for(uint256 _day = currentDay + 1 ; _day <= currentDay * 2 ; _day++){\r\n                    dayBNBPool[_day] += (lobbyEntry[currentDay] * percentOfLobbyToBePooled ) / (currentDay * 100);\r\n                }\r\n\r\n            } else {\r\n                for(uint256 _day = currentDay + 1 ; _day <= currentDay + dividendsPoolCapDays ; _day++){\r\n                    dayBNBPool[_day] += (lobbyEntry[currentDay] * percentOfLobbyToBePooled ) / (dividendsPoolCapDays * 100);\r\n                }\r\n            }\r\n            \r\n            currentDay = _clcDay();\r\n            _updateLobbyPool();\r\n\r\n            // total of 10% from every day's lobby entry goes to:\r\n            // 4% team - 3.5% AVC buy back - 1% inventive pool - 1% BUSD buy back - 0.5% lotto\r\n            _sendDevShare();\r\n            _sendInventiveShare();\r\n            _sendLobbyBuybackShare();\r\n            _sendAVCLobbyBuybackShare();\r\n            _sendPartnersShare();\r\n\r\n            checkForLotteryWinner();\r\n            // 0.5% of lobby entry of each day goes to lottery_Pool\r\n            lottery_Pool += lobbyEntry[currentDay -1] * 5 /1000;\r\n\r\n            lottery_topBuy_today = 0;\r\n\r\n            emit day_lobby_entry(\r\n                block.timestamp,\r\n                currentDay,\r\n                lobbyEntry[currentDay -1]\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    /* Every day's lobby pool reduces by a % */ \r\n    function _updateLobbyPool() internal {\r\n        lastLobbyPool -= ((lastLobbyPool * lobby_pool_decrease_percentage) /1000);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Owner setting partner 1 \r\n     */\r\n    function partner_1_addr_set (address addr, uint256 share) external onlyOwner() {\r\n        require(share <= 3);\r\n\r\n        partner_1_addr = addr;\r\n        partner_1_share = share;\r\n\r\n        percentOfLobbyToBePooled = 90 - (partner_1_share + partner_2_share + partner_3_share);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner setting partner 2 \r\n     */\r\n    function partner_2_addr_set (address addr, uint256 share) external onlyOwner() {\r\n        require(share <= 3);\r\n\r\n        partner_2_addr = addr;\r\n        partner_2_share = share;\r\n\r\n        percentOfLobbyToBePooled = 90 - (partner_1_share + partner_2_share + partner_3_share);\r\n    }\r\n\r\n    /**\r\n     * @dev Owner setting partner 3\r\n     */\r\n    function partner_3_addr_set (address addr, uint256 share) external onlyOwner() {\r\n        require(share <= 3);\r\n\r\n        partner_3_addr = addr;\r\n        partner_3_share = share;\r\n\r\n        percentOfLobbyToBePooled = 90 - (partner_1_share + partner_2_share + partner_3_share);\r\n    }\r\n\r\n    /**\r\n     * @dev send partners share from lobby entry of the day if any\r\n     */\r\n    function _sendPartnersShare() internal nonReentrant {\r\n        if (partner_1_share > 0) {\r\n            token_BUSD.transfer(address(partner_1_addr), lobbyEntry[currentDay - 1] * partner_1_share /100);\r\n        }\r\n\r\n        if (partner_2_share > 0) {\r\n            token_BUSD.transfer(address(partner_2_addr), lobbyEntry[currentDay - 1] * partner_2_share /100);\r\n        }\r\n\r\n        if (partner_3_share > 0) {\r\n            token_BUSD.transfer(address(partner_3_addr), lobbyEntry[currentDay - 1] * partner_3_share /100);\r\n        }\r\n    }\r\n    \r\n    \r\n    /* Gets called once a day and withdraws avarice team's share for the privious day of lobby */ \r\n    function _sendDevShare() internal nonReentrant {\r\n        require(currentDay > 0);\r\n\r\n        // avariceTeamPercentage = 4% of every day's lobby entry\r\n        uint256 avariceTeamPercentage = (lobbyEntry[currentDay - 1] * DM_avariceTeam_percentage) /100;\r\n        \r\n        // [40%, 18%, 10%, 8%, 8%, 8%, 8%] \r\n        token_BUSD.transfer(address(avariceTeam_addr_1), (avariceTeamPercentage * 40) /100);\r\n        token_BUSD.transfer(address(avariceTeam_addr_2), (avariceTeamPercentage * 18) /100);\r\n        token_BUSD.transfer(address(avariceTeam_addr_3), (avariceTeamPercentage * 10) /100);\r\n        token_BUSD.transfer(address(avariceTeam_addr_4), (avariceTeamPercentage * 8) /100);\r\n        token_BUSD.transfer(address(avariceTeam_addr_5), (avariceTeamPercentage * 8) /100);\r\n        token_BUSD.transfer(address(avariceTeam_addr_6), (avariceTeamPercentage * 8) /100);   \r\n        token_BUSD.transfer(address(avariceTeam_addr_7), (avariceTeamPercentage * 8) /100);   \r\n    }\r\n\r\n    /* Gets called once a day and withdraws inventive's share for the privious day of lobby */ \r\n    function _sendInventiveShare() internal nonReentrant {\r\n        require(currentDay > 0);\r\n\r\n        // inventive share = 1% of every day's lobby entry\r\n        token_BUSD.transfer(address(inventive_addr), (lobbyEntry[currentDay - 1] * DM_inventive_percentage) /100);   \r\n    }\r\n\r\n    /* Gets called once a day and withdraws buy back share for the privious day of lobby */ \r\n    function _sendLobbyBuybackShare() internal nonReentrant {\r\n        require(currentDay > 0);\r\n\r\n        // buyBack share = 1% of every day's lobby entry\r\n        token_BUSD.transfer(address(buyBack_addr), (lobbyEntry[currentDay - 1] * DM_buyBack_percentage) /100);   \r\n    }\r\n\r\n    /* Gets called once a day and withdraws buy back share for the privious day of lobby */ \r\n    function _sendAVCLobbyBuybackShare() internal nonReentrant {\r\n        require(currentDay > 0);\r\n\r\n        // AVC buyback share = 3.5% of every day's lobby entry\r\n        token_BUSD.transfer(address(AVC_buyback_addr), (lobbyEntry[currentDay - 1] * DM_AVC_buyBack_percentage) /1000);   \r\n    }\r\n\r\n\r\n    /**\r\n     * @dev User enters lobby with all of his finished stake divs and receives 10% extra virtual coins\r\n     * @param referrerAddr address of referring user (optional; 0x0 for no referrer)\r\n     * @param stakeId id of the target stake\r\n     */\r\n    function virtualBalanceEnteringLobby(address referrerAddr, uint256 stakeId) external nonReentrant{\r\n        require(virtualBalanceEnteringIsPaused == false, 'functionality is paused');\r\n        require(mapMemberStake[msg.sender][stakeId].endDay <= currentDay, 'Stakes end day not reached yet');\r\n\r\n        DoEndStake(stakeId, true);\r\n\r\n        uint256 profit = calcStakeCollecting(msg.sender, stakeId);\r\n\r\n        // enter lobby with 10% extra virtual BNB\r\n        DoEnterLobby(referrerAddr, profit + (profit * 10 /100), (profit * 10 /100));\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev External function for entering the auction lobby for the current day\r\n     * @param referrerAddr address of referring user (optional; 0x0 for no referrer)\r\n     * @param amount amount of BUSD entrying to lobby\r\n     */\r\n    function EnterLobby(address referrerAddr, uint256 amount) external {\r\n        DoEnterLobby(referrerAddr, amount, 0);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev entering the auction lobby for the current day\r\n     * @param referrerAddr address of referring user (optional; 0x0 for no referrer)\r\n     * @param amount amount of BUSD entrying to lobby\r\n     * @param virtualExtraAmount the virtual amount of tokens\r\n     */\r\n    function DoEnterLobby(address referrerAddr, uint256 amount, uint256 virtualExtraAmount) internal {\r\n        uint256 rawAmount = amount;\r\n        require(currentDay > 0);\r\n        require(rawAmount > 0, \"ERR: Amount required\");\r\n\r\n        // transfer BUSD from user wallet if stake profits have already sent to user \r\n        if (virtualExtraAmount == 0) {\r\n            token_BUSD.transferFrom(msg.sender, address(this), amount);\r\n        }\r\n\r\n        _updateDaily();\r\n\r\n        if (rawAmount >= lottery_topBuy_today) {\r\n            // new top buyer\r\n            lottery_topBuy_today = rawAmount;\r\n            lottery_topBuyer_today = msg.sender;\r\n        }\r\n    \r\n        if (mapMemberLobby[msg.sender][currentDay].memberLobbyValue == 0) {\r\n            usersCount++;\r\n            usersCountDaily[currentDay]++;\r\n        }\r\n\r\n        // raw amount is added by 10% virtual extra, since we don't want that 10% to be in the dividends calculation we remove it\r\n        if (virtualExtraAmount > 0) {\r\n            mapMemberLobby_overallData[msg.sender].overall_lobbyEnteries += (rawAmount - virtualExtraAmount);\r\n            lobbyEntry[currentDay] += (rawAmount - virtualExtraAmount);\r\n            overall_lobbyEntry += (rawAmount - virtualExtraAmount);\r\n\r\n            mapMemberLobby[msg.sender][currentDay].extraVirtualTokens += virtualExtraAmount;\r\n        } else {\r\n            mapMemberLobby_overallData[msg.sender].overall_lobbyEnteries += rawAmount;\r\n            lobbyEntry[currentDay] += rawAmount;\r\n            overall_lobbyEntry += rawAmount;\r\n        }\r\n        \r\n        // mapMemberLobby[msg.sender][currentDay].memberLobbyAddress = msg.sender;\r\n        mapMemberLobby[msg.sender][currentDay].memberLobbyValue += rawAmount; \r\n        mapMemberLobby[msg.sender][currentDay].memberLobbyEntryDay = currentDay;\r\n        mapMemberLobby[msg.sender][currentDay].hasCollected = false;\r\n\r\n        if (referrerAddr != msg.sender) {\r\n            /* No Self-referred */\r\n            mapMemberLobby[msg.sender][currentDay].referrer = referrerAddr;\r\n        } else {\r\n            mapMemberLobby[msg.sender][currentDay].referrer = address(0);\r\n        }\r\n        \r\n        emit UserLobby(\r\n            msg.sender, \r\n            block.timestamp,\r\n            rawAmount\r\n        );\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev External function for leaving the lobby / collecting the tokens\r\n     * @param targetDay Target day of lobby to collect \r\n     */\r\n    function ExitLobby(uint256 targetDay) external {\r\n        require(mapMemberLobby[msg.sender][targetDay].hasCollected == false, \"ERR: Already collected\");\r\n        _updateDaily();\r\n        require(targetDay < currentDay);\r\n\r\n        uint256 tokensToPay = _clcTokenValue(msg.sender, targetDay);\r\n\r\n        _mint(msg.sender, tokensToPay);\r\n        mapMemberLobby[msg.sender][targetDay].hasCollected = true;\r\n        \r\n        overall_collectedTokens += tokensToPay;\r\n        mapMemberLobby_overallData[msg.sender].overall_collectedTokens += tokensToPay;\r\n\r\n        address referrerAddress = mapMemberLobby[msg.sender][targetDay].referrer;\r\n        if (referrerAddress != address(0)) {\r\n            /* there is a referrer, pay their % ref bonus of tokens */ \r\n            uint256 refBonus = tokensToPay * ref_bonus_NR /100;\r\n\r\n            _mint(referrerAddress, refBonus);  \r\n            referrerBonusesPaid[referrerAddress] += refBonus;\r\n\r\n            /* pay the referred user bonus */\r\n            _mint(msg.sender, tokensToPay * ref_bonus_NRR /100); \r\n        }\r\n\r\n        emit UserLobbyCollect(\r\n            msg.sender, \r\n            block.timestamp,\r\n            tokensToPay\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Calculating user's share from lobby based on their entry value\r\n     * @param _Day The lobby day\r\n     */\r\n    function _clcTokenValue (address _address, uint256 _Day) public view returns (uint256) {\r\n        require(_Day != 0, \"ERR\");\r\n        uint256 _tokenVlaue;\r\n        uint256 entryDay = mapMemberLobby[_address][_Day].memberLobbyEntryDay;\r\n\r\n\r\n        if(entryDay != 0 && entryDay < currentDay) {\r\n            _tokenVlaue = (lastLobbyPool * mapMemberLobby[_address][_Day].memberLobbyValue) / lobbyEntry[entryDay];\r\n        }else{\r\n            _tokenVlaue = 0;\r\n        }\r\n        \r\n        return _tokenVlaue;\r\n    }\r\n    \r\n    mapping(uint256 => uint256)public dayBNBPool;\r\n    mapping(uint256 => uint256)public enterytokenMath;\r\n    mapping(uint256 => uint256)public totalTokensInActiveStake;\r\n   \r\n    /**\r\n     * @dev External function for users to create a stake\r\n     * @param amount Amount of AVC tokens to stake\r\n     * @param stakingDays Stake duration in days\r\n     */\r\n\r\n    \r\n    function EnterStake(uint256 amount, uint256 stakingDays) external {\r\n        require(stakingDays >= 1, 'Staking: Staking days < 1');\r\n        require(stakingDays <= max_stake_days, 'Staking: Staking days > max_stake_days');\r\n        require(balanceOf(msg.sender) >= amount, 'Not enough balance');\r\n        \r\n        _updateDaily();\r\n        uint256 stakeId = calcStakeCount(msg.sender);\r\n\r\n        overall_stakedTokens += amount;\r\n        mapMemberLobby_overallData[msg.sender].overall_stakedTokens += amount;\r\n\r\n        mapMemberStake[msg.sender][stakeId].stakeId = stakeId;\r\n        mapMemberStake[msg.sender][stakeId].userAddress = msg.sender;\r\n        mapMemberStake[msg.sender][stakeId].tokenValue = amount;\r\n        mapMemberStake[msg.sender][stakeId].startDay = currentDay + 1 ;\r\n        mapMemberStake[msg.sender][stakeId].endDay = currentDay + 1 + stakingDays;\r\n        mapMemberStake[msg.sender][stakeId].stakeCollected = false;\r\n        mapMemberStake[msg.sender][stakeId].stake_hasSold = false;\r\n        mapMemberStake[msg.sender][stakeId].stake_hasLoan = false;\r\n        mapMemberStake[msg.sender][stakeId].stake_forSell = false;\r\n        mapMemberStake[msg.sender][stakeId].stake_forLoan = false;\r\n        // stake calcs for days: X >= startDay && X < endDay\r\n        // startDay included / endDay not included\r\n\r\n        for (uint256 i = currentDay + 1; i <= currentDay + stakingDays; i++) {\r\n            totalTokensInActiveStake[i] += amount;\r\n        }\r\n\r\n        saveTotalToken += amount;\r\n        daysActiveInStakeTokensIncrese[currentDay + 1] += amount;\r\n        daysActiveInStakeTokensDecrase[currentDay + stakingDays + 1] += amount;\r\n\r\n        /* On stake AVC tokens get burned */\r\n        _burn(msg.sender, amount);\r\n\r\n        emit UserStake (\r\n            msg.sender, \r\n            block.timestamp,\r\n            amount, \r\n            stakingDays\r\n        );\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Counting user's stakes to be usead as stake id for a new stake\r\n     * @param _address address of the user\r\n     */\r\n    function calcStakeCount(address _address) public view returns (uint256) {\r\n        uint256 stakeCount = 0;\r\n\r\n        for (uint256 i = 0; mapMemberStake[_address][i].userAddress == _address; i++) {\r\n            stakeCount += 1;\r\n        }\r\n\r\n        return(stakeCount);\r\n    }\r\n    \r\n    /**\r\n     * @dev External function for collecting a stake\r\n     * @param stakeId Id of the target stake\r\n     */\r\n    function EndStake(uint256 stakeId) external nonReentrant {\r\n        DoEndStake(stakeId, false);\r\n    }\r\n        \r\n    /**\r\n     * @dev Collecting a stake\r\n     * @param stakeId Id of the target stake\r\n     * @param doNotSendDivs do or not do sent the stake's divs to the user (used when re entring the lobby using the stake's divs)\r\n     */\r\n    function DoEndStake(uint256 stakeId, bool doNotSendDivs) internal {\r\n        require(mapMemberStake[msg.sender][stakeId].endDay <= currentDay, 'Stakes end day not reached yet');\r\n        require(mapMemberStake[msg.sender][stakeId].userAddress == msg.sender);\r\n        require(mapMemberStake[msg.sender][stakeId].stakeCollected == false);\r\n        require(mapMemberStake[msg.sender][stakeId].stake_hasSold == false);\r\n\r\n        _updateDaily();\r\n\r\n        /* if the stake is for sell, set it false since it's collected */\r\n        mapMemberStake[msg.sender][stakeId].stake_forSell = false;\r\n        mapMemberStake[msg.sender][stakeId].stake_forLoan = false;\r\n\r\n        /* clc BNB divs */\r\n        uint256 profit = calcStakeCollecting(msg.sender, stakeId);\r\n        overall_collectedDivs += profit;\r\n        mapMemberLobby_overallData[msg.sender].overall_collectedDivs += profit;\r\n\r\n        mapMemberStake[msg.sender][stakeId].stakeCollected = true;\r\n        \r\n        if (doNotSendDivs == true) {\r\n        } else {\r\n            token_BUSD.transfer(address(msg.sender), profit);\r\n        }\r\n\r\n        /* if the stake has loan on it automatically pay the lender and finish the loan */ \r\n        if (mapMemberStake[msg.sender][stakeId].stake_hasLoan == true) {\r\n            updateFinishedLoan(mapRequestingLoans[msg.sender][stakeId].lenderAddress, msg.sender, mapRequestingLoans[msg.sender][stakeId].lenderLendId, stakeId);\r\n        }\r\n        \r\n        uint256 stakeReturn = mapMemberStake[msg.sender][stakeId].tokenValue;\r\n\r\n        /* Pay the bonus token and stake return, if any, to the staker */\r\n        if (stakeReturn != 0) {\r\n            uint256 bonusAmount = calcBonusToken(mapMemberStake[msg.sender][stakeId].endDay - mapMemberStake[msg.sender][stakeId].startDay, stakeReturn);\r\n\r\n            overall_collectedBonusTokens += bonusAmount;\r\n\r\n            _mint(msg.sender, stakeReturn + bonusAmount);\r\n        }\r\n\r\n        emit UserStakeCollect(\r\n            msg.sender, \r\n            block.timestamp,\r\n            profit\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Calculating a stakes BNB divs payout value by looping through each day of it \r\n     * @param _address User address\r\n     * @param _stakeId Id of the target stake\r\n     */\r\n    function calcStakeCollecting(address _address , uint256 _stakeId) public view returns (uint256) {\r\n        uint256 userDivs;\r\n        uint256 _endDay = mapMemberStake[_address][_stakeId].endDay;\r\n        uint256 _startDay = mapMemberStake[_address][_stakeId].startDay;\r\n        uint256 _stakeValue = mapMemberStake[_address][_stakeId].tokenValue;\r\n\r\n        for (uint256 _day = _startDay ; _day < _endDay && _day < currentDay; _day++) { \r\n            userDivs += (dayBNBPool[_day] * _stakeValue) / totalTokensInActiveStake[_day]  ;\r\n        }\r\n\r\n        return (userDivs - mapMemberStake[_address][_stakeId].loansReturnAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Calculating a stakes Bonus AVC tokens based on stake duration and stake amount\r\n     * @param StakeDuration The stake's days\r\n     * @param StakeAmount The stake's AVC tokens amount\r\n     */\r\n    function calcBonusToken (uint256 StakeDuration, uint256 StakeAmount) public pure returns (uint256) {\r\n        require(StakeDuration <= max_stake_days, 'Staking: Staking days > max_stake_days');\r\n\r\n        // _clcStep(StakeDuration);\r\n\r\n        uint256 _bonusAmount = StakeAmount * ((StakeDuration **2) * bonus_calc_ratio);\r\n        return _bonusAmount /1e7;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev calculating user dividends for a specific day\r\n     */\r\n    \r\n    \r\n    uint256 public devShareOfStakeSellsAndLoanFee;\r\n    uint256 public totalStakesSold;\r\n    uint256 public totalTradeAmount;\r\n\r\n    /* withdrawable funds for the stake seller address */\r\n    mapping(address => uint256) public soldStakeFunds;\r\n    mapping(address => uint256) public totalStakeTradeAmount;\r\n\r\n    /**\r\n     * @dev User putting up their stake for sell or user changing the previously setted sell price of their stake\r\n     * @param stakeId stake id\r\n     * @param price sell price for the stake\r\n     */\r\n    function sellStakeRequest(uint256 stakeId , uint256 price) external {\r\n        _updateDaily();\r\n\r\n        require(stakeSellingIsPaused == false, 'functionality is paused');\r\n        require(mapMemberStake[msg.sender][stakeId].userAddress == msg.sender, 'auth failed');\r\n        require(mapMemberStake[msg.sender][stakeId].stake_hasLoan == false, 'Target stake has an active loan on it');\r\n        require(mapMemberStake[msg.sender][stakeId].stake_hasSold == false, 'Target stake has been sold');\r\n        require(mapMemberStake[msg.sender][stakeId].endDay > currentDay, 'Target stake is ended');\r\n\r\n        /* if stake is for loan, remove it from loan requests */\r\n        if (mapMemberStake[msg.sender][stakeId].stake_forLoan == true) {\r\n            cancelStakeLoanRequest(stakeId);\r\n        }\r\n\r\n        require(mapMemberStake[msg.sender][stakeId].stake_forLoan == false);\r\n\r\n        mapMemberStake[msg.sender][stakeId].stake_forSell = true;\r\n        mapMemberStake[msg.sender][stakeId].price = price;\r\n\r\n        emit stake_sell_request (\r\n            msg.sender, \r\n            block.timestamp,\r\n            price,\r\n            mapMemberStake[msg.sender][stakeId].tokenValue,\r\n            stakeId\r\n        );\r\n    } \r\n \r\n\r\n    /**\r\n     * @dev A user buying a stake\r\n     * @param sellerAddress stake seller address (current stake owner address)\r\n     * @param stakeId stake id\r\n     */\r\n    function buyStakeRequest(address sellerAddress, uint256 stakeId, uint256 amount) external {\r\n        _updateDaily();\r\n\r\n        require(stakeSellingIsPaused == false, 'functionality is paused');\r\n        require(mapMemberStake[sellerAddress][stakeId].userAddress != msg.sender, 'no self buy'); \r\n        require(mapMemberStake[sellerAddress][stakeId].userAddress == sellerAddress, 'auth failed'); \r\n        require(mapMemberStake[sellerAddress][stakeId].stake_hasSold == false, 'Target stake has been sold');\r\n        require(mapMemberStake[sellerAddress][stakeId].stake_forSell == true, 'Target stake is not for sell');\r\n        uint256 priceP = amount;\r\n        require(mapMemberStake[sellerAddress][stakeId].price == priceP, 'not enough funds');\r\n        require(mapMemberStake[sellerAddress][stakeId].endDay > currentDay);\r\n\r\n        token_BUSD.transferFrom(msg.sender, address(this), amount);\r\n\r\n        /* 10% stake sell fee ==> 2% dev share & 8% buy back to the current day's lobby */\r\n        lobbyEntry[currentDay] += (mapMemberStake[sellerAddress][stakeId].price * 8) / 100;\r\n        devShareOfStakeSellsAndLoanFee += (mapMemberStake[sellerAddress][stakeId].price * 2) / 100;\r\n\r\n        /* stake seller gets 90% of the stake's sold price */\r\n        soldStakeFunds[sellerAddress] += (mapMemberStake[sellerAddress][stakeId].price * 90) / 100 ;\r\n \r\n        /* setting data for the old owner */\r\n        mapMemberStake[sellerAddress][stakeId].stake_hasSold = true;\r\n        mapMemberStake[sellerAddress][stakeId].stake_forSell = false;\r\n        mapMemberStake[sellerAddress][stakeId].stakeCollected = true;\r\n\r\n        totalStakeTradeAmount[msg.sender] += priceP;\r\n        totalStakeTradeAmount[sellerAddress] += priceP;\r\n\r\n        totalStakesSold += 1;\r\n        totalTradeAmount += priceP;\r\n\r\n        /* new stake & stake ID for the new stake owner (the stake buyer) */\r\n        uint256 newStakeId = calcStakeCount(msg.sender);\r\n        mapMemberStake[msg.sender][newStakeId].userAddress = msg.sender;\r\n        mapMemberStake[msg.sender][newStakeId].tokenValue = mapMemberStake[sellerAddress][stakeId].tokenValue ;\r\n        mapMemberStake[msg.sender][newStakeId].startDay = mapMemberStake[sellerAddress][stakeId].startDay ;\r\n        mapMemberStake[msg.sender][newStakeId].endDay = mapMemberStake[sellerAddress][stakeId].endDay;\r\n        mapMemberStake[msg.sender][newStakeId].loansReturnAmount = mapMemberStake[sellerAddress][stakeId].loansReturnAmount;\r\n        mapMemberStake[msg.sender][newStakeId].stakeId = newStakeId;\r\n        mapMemberStake[msg.sender][newStakeId].stakeCollected = false;\r\n        mapMemberStake[msg.sender][newStakeId].stake_hasSold = false;\r\n        mapMemberStake[msg.sender][newStakeId].stake_hasLoan = false;\r\n        mapMemberStake[msg.sender][newStakeId].stake_forSell = false;\r\n        mapMemberStake[msg.sender][newStakeId].stake_forLoan = false;\r\n        mapMemberStake[msg.sender][newStakeId].price = 0;\r\n\r\n        emit stake_sold (\r\n            sellerAddress, \r\n            msg.sender,\r\n            block.timestamp,\r\n            priceP,\r\n            stakeId\r\n        );\r\n    } \r\n\r\n    /**\r\n     * @dev User asking to withdraw their funds from their sold stake\r\n     */\r\n    function withdrawSoldStakeFunds() external nonReentrant {\r\n        require(soldStakeFunds[msg.sender] > 0, 'No funds to withdraw');\r\n\r\n        uint256 toBeSend = soldStakeFunds[msg.sender];\r\n        soldStakeFunds[msg.sender] = 0;\r\n\r\n        token_BUSD.transfer(address(msg.sender), toBeSend);\r\n    }\r\n\r\n\r\n\r\n\r\n    struct loanRequest {\r\n        address loanerAddress; // address\r\n        address lenderAddress; // address (sets after loan request accepted by a lender)\r\n        uint256 stakeId;       // id of the stakes that is being loaned on\r\n        uint256 lenderLendId;  // id of the lends that a lender has given out (sets after loan request accepted by a lender)\r\n        uint256 loanAmount;    // requesting loan BNB amount\r\n        uint256 returnAmount;  // requesting loan BNB return amount\r\n        uint256 duration;      // duration of loan (days)\r\n        uint256 lend_startDay; // lend start day (sets after loan request accepted by a lender)\r\n        uint256 lend_endDay;   // lend end day (sets after loan request accepted by a lender)\r\n        bool hasLoan;\r\n        bool loanIsPaid;       // gets true after loan due date is reached and loan is paid\r\n    }\r\n\r\n    struct lendInfo {\r\n        address lenderAddress;\r\n        address loanerAddress;\r\n        uint256 lenderLendId;\r\n        uint256 loanAmount;\r\n        uint256 returnAmount;\r\n        uint256 endDay;\r\n        bool loanIsPaid;\r\n    }\r\n        \r\n\r\n    /* withdrawable funds for the loaner address */\r\n    mapping(address => uint256) public LoanedFunds;\r\n    mapping(address => uint256) public LendedFunds;\r\n\r\n    uint256 public totalLoanedAmount;\r\n    uint256 public totalLoanedCount;\r\n\r\n    mapping(address => mapping(uint256 => loanRequest)) public mapRequestingLoans;\r\n    mapping(address => mapping(uint256 => lendInfo)) public mapLenderInfo;\r\n    mapping(address => uint256) public lendersPaidAmount; // total amounts of paid to lender\r\n    \r\n    /**\r\n     * @dev User submiting a loan request on their stake or changing the previously setted loan request data\r\n     * @param stakeId stake id\r\n     * @param loanAmount amount of requesting BNB loan\r\n     * @param returnAmount amount of BNB loan return\r\n     * @param loanDuration duration of requesting loan\r\n     */\r\n    function getLoanOnStake(uint256 stakeId ,uint256 loanAmount , uint256 returnAmount , uint256 loanDuration) external {\r\n        _updateDaily();\r\n\r\n        require(loaningIsPaused == false, 'functionality is paused');\r\n        require(loanAmount < returnAmount, 'loan return must be higher than loan amount');\r\n        require(loanDuration >= 4, 'lowest loan duration is 4 days'); \r\n        require(mapMemberStake[msg.sender][stakeId].userAddress == msg.sender, 'auth failed');\r\n        require(mapMemberStake[msg.sender][stakeId].stake_hasLoan == false, 'Target stake has an active loan on it');\r\n        require(mapMemberStake[msg.sender][stakeId].stake_hasSold == false, 'Target stake has been sold');\r\n        require(mapMemberStake[msg.sender][stakeId].endDay - loanDuration > currentDay); \r\n    \r\n        /* calc stake divs */\r\n        uint256 stakeDivs = calcStakeCollecting(msg.sender, stakeId);\r\n\r\n        /* max amount of possible stake return can not be higher than stake's divs */\r\n        require(returnAmount <= stakeDivs); \r\n\r\n        /* if stake is for sell, remove it from sell requests */\r\n        if (mapMemberStake[msg.sender][stakeId].stake_forSell == true) {\r\n            cancelSellStakeRequest(stakeId);\r\n        }\r\n\r\n        require(mapMemberStake[msg.sender][stakeId].stake_forSell == false);\r\n\r\n        mapMemberStake[msg.sender][stakeId].stake_forLoan = true;\r\n\r\n        /* data of the requesting loan */\r\n        mapRequestingLoans[msg.sender][stakeId].loanerAddress = msg.sender;\r\n        mapRequestingLoans[msg.sender][stakeId].stakeId = stakeId;\r\n        mapRequestingLoans[msg.sender][stakeId].loanAmount = loanAmount;\r\n        mapRequestingLoans[msg.sender][stakeId].returnAmount = returnAmount;\r\n        mapRequestingLoans[msg.sender][stakeId].duration = loanDuration;\r\n        mapRequestingLoans[msg.sender][stakeId].loanIsPaid = false;\r\n\r\n        emit stake_loan_request (\r\n            msg.sender, \r\n            block.timestamp,\r\n            loanAmount,\r\n            loanDuration,\r\n            stakeId\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Canceling loan request\r\n     * @param stakeId stake id\r\n     */\r\n    function cancelStakeLoanRequest(uint256 stakeId) public {\r\n        require(mapMemberStake[msg.sender][stakeId].stake_hasLoan == false);\r\n        mapMemberStake[msg.sender][stakeId].stake_forLoan = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev User asking to their stake's sell request\r\n     */\r\n    function cancelSellStakeRequest(uint256 _stakeId) internal {\r\n        require(mapMemberStake[msg.sender][_stakeId].userAddress == msg.sender);\r\n        require(mapMemberStake[msg.sender][_stakeId].stake_forSell == true);\r\n        require(mapMemberStake[msg.sender][_stakeId].stake_hasSold == false);\r\n\r\n        mapMemberStake[msg.sender][_stakeId].stake_forSell = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev User filling loan request (lending)\r\n     * @param loanerAddress address of loaner aka the person who is requesting for loan\r\n     * @param stakeId stake id\r\n     * @param amount lend amount tha is tranfered to the contract\r\n     */\r\n    function lendOnStake(address loanerAddress , uint256 stakeId, uint256 amount) external nonReentrant {\r\n        _updateDaily();\r\n\r\n        require(loaningIsPaused == false, 'functionality is paused');\r\n        require(mapMemberStake[loanerAddress][stakeId].userAddress != msg.sender, 'no self lend'); \r\n        require(mapMemberStake[loanerAddress][stakeId].stake_hasLoan == false, 'Target stake has an active loan on it');\r\n        require(mapMemberStake[loanerAddress][stakeId].stake_forLoan == true, 'Target stake is not requesting a loan');\r\n        require(mapMemberStake[loanerAddress][stakeId].stake_hasSold == false, 'Target stake is sold');\r\n        require(mapMemberStake[loanerAddress][stakeId].endDay > currentDay, 'Target stake duration is finished');\r\n        \r\n        uint256 loanAmount = mapRequestingLoans[loanerAddress][stakeId].loanAmount;\r\n        uint256 returnAmount = mapRequestingLoans[loanerAddress][stakeId].returnAmount;\r\n        uint256 rawAmount = amount;\r\n\r\n        require(rawAmount == mapRequestingLoans[loanerAddress][stakeId].loanAmount);\r\n\r\n        token_BUSD.transferFrom(msg.sender, address(this), amount);\r\n\r\n        /* 2% loaning fee, taken from loaner's stake dividends, 1% buybacks to current day's lobby, 1% dev fee */\r\n        uint256 theLoanFee = (rawAmount * 2) /100;  \r\n        devShareOfStakeSellsAndLoanFee += theLoanFee /2;     \r\n        lobbyEntry[currentDay] += theLoanFee /2;\r\n\r\n        mapMemberStake[loanerAddress][stakeId].loansReturnAmount += returnAmount;\r\n        mapMemberStake[loanerAddress][stakeId].stake_hasLoan = true;\r\n        mapMemberStake[loanerAddress][stakeId].stake_forLoan = false;\r\n\r\n        uint256 lenderLendId = clcLenderLendId(msg.sender);\r\n\r\n        mapRequestingLoans[loanerAddress][stakeId].hasLoan = true;\r\n        mapRequestingLoans[loanerAddress][stakeId].loanIsPaid = false;\r\n        mapRequestingLoans[loanerAddress][stakeId].lenderAddress = msg.sender;\r\n        mapRequestingLoans[loanerAddress][stakeId].lenderLendId = lenderLendId;\r\n        mapRequestingLoans[loanerAddress][stakeId].lend_startDay = currentDay + 1;\r\n        mapRequestingLoans[loanerAddress][stakeId].lend_endDay = currentDay + 1 + mapRequestingLoans[loanerAddress][stakeId].duration;\r\n\r\n        mapLenderInfo[msg.sender][lenderLendId].lenderAddress = msg.sender;\r\n        mapLenderInfo[msg.sender][lenderLendId].loanerAddress = loanerAddress;\r\n        mapLenderInfo[msg.sender][lenderLendId].lenderLendId = lenderLendId; // not same with the stake id on \"mapRequestingLoans\"\r\n        mapLenderInfo[msg.sender][lenderLendId].loanAmount = loanAmount;\r\n        mapLenderInfo[msg.sender][lenderLendId].returnAmount = returnAmount;\r\n        mapLenderInfo[msg.sender][lenderLendId].endDay = mapRequestingLoans[loanerAddress][stakeId].lend_endDay;\r\n\r\n        LoanedFunds[loanerAddress] += (rawAmount * 98) /100;\r\n        LendedFunds[mapRequestingLoans[loanerAddress][stakeId].lenderAddress] += (rawAmount * 98) /100;\r\n        totalLoanedAmount += (rawAmount * 98) /100;\r\n        totalLoanedCount += 1;\r\n\r\n        emit stake_lend(\r\n            msg.sender, \r\n            block.timestamp,\r\n            lenderLendId\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev User asking to withdraw their loaned funds\r\n     */\r\n    function withdrawLoanedFunds() external nonReentrant {\r\n        require(LoanedFunds[msg.sender] > 0, 'No funds to withdraw');\r\n\r\n        uint256 toBeSend = LoanedFunds[msg.sender];\r\n        LoanedFunds[msg.sender] = 0;\r\n\r\n        token_BUSD.transfer(address(msg.sender), toBeSend);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev returns a unique id for the lend by lopping through the user's lends and counting them\r\n     * @param _address the lender user address\r\n     */\r\n    function clcLenderLendId(address _address) public view returns (uint256) {\r\n        uint256 stakeCount = 0;\r\n\r\n        for (uint256 i = 0; mapLenderInfo[_address][i].lenderAddress == _address; i++) {\r\n            stakeCount += 1;\r\n        }\r\n\r\n        return stakeCount;\r\n    }\r\n  \r\n  \r\n    /* \r\n        after a loan's due date is reached there is no automatic way in contract to pay the lender and set the lend data as finished (for the sake of performance and gas)\r\n        so either the lender user calls the \"collectLendReturn\" function or the loaner user automatically call the  \"updateFinishedLoan\" function by trying to collect their stake \r\n    */\r\n\r\n    /**\r\n     * @dev Lender requesting to collect their return amount from their finished lend\r\n     * @param stakeId id of a loaner's stake for that the loaner requested a loan and received a lend\r\n     * @param lenderLendId id of the lends that a lender has given out (different from stakeId)\r\n     */\r\n    function collectLendReturn(uint256 stakeId, uint256 lenderLendId) external nonReentrant {\r\n        updateFinishedLoan(msg.sender, mapLenderInfo[msg.sender][lenderLendId].loanerAddress, lenderLendId, stakeId);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the loan on loaner's stake is finished\r\n     * @param lenderAddress lender address\r\n     * @param loanerAddress loaner address\r\n     * @param lenderLendId id of the lends that a lender has given out (different from stakeId)\r\n     * @param stakeId id of a loaner's stake for that the loaner requested a loan and received a lend\r\n     */\r\n    function updateFinishedLoan(address lenderAddress, address loanerAddress, uint256 lenderLendId, uint256 stakeId) internal {\r\n        _updateDaily();\r\n\r\n        require(mapMemberStake[loanerAddress][stakeId].stake_hasLoan == true, 'Target stake does not have an active loan on it');\r\n        require(currentDay >= mapRequestingLoans[loanerAddress][stakeId].lend_endDay, 'Due date not yet reached');\r\n        require(mapLenderInfo[lenderAddress][lenderLendId].loanIsPaid == false);\r\n        require(mapRequestingLoans[loanerAddress][stakeId].loanIsPaid == false);\r\n        require(mapRequestingLoans[loanerAddress][stakeId].hasLoan == true);\r\n        require(mapRequestingLoans[loanerAddress][stakeId].lenderAddress == lenderAddress);        \r\n        require(mapRequestingLoans[loanerAddress][stakeId].lenderLendId == lenderLendId);\r\n\r\n\r\n        mapMemberStake[loanerAddress][stakeId].stake_hasLoan = false;\r\n        mapLenderInfo[lenderAddress][lenderLendId].loanIsPaid = true;\r\n        mapRequestingLoans[loanerAddress][stakeId].hasLoan = false;\r\n        mapRequestingLoans[loanerAddress][stakeId].loanIsPaid = true;\r\n\r\n\r\n        uint256 toBePaid = mapRequestingLoans[loanerAddress][stakeId].returnAmount;\r\n        lendersPaidAmount[lenderAddress] += toBePaid;\r\n\r\n        mapRequestingLoans[loanerAddress][stakeId].returnAmount = 0;\r\n\r\n        token_BUSD.transfer(address(lenderAddress), toBePaid);\r\n    }\r\n\r\n\r\n\r\n    /* top lottery buyer of the day (so far) */\r\n    uint256 public lottery_topBuy_today;\r\n    address public lottery_topBuyer_today;\r\n\r\n    /* latest top lottery bought amount*/\r\n    uint256 public lottery_topBuy_latest;\r\n\r\n    /* lottery reward pool */\r\n    uint256 public lottery_Pool;\r\n\r\n\r\n    /**\r\n     * @dev Runs once a day and checks for lottry winner \r\n     */\r\n    function checkForLotteryWinner() internal nonReentrant {\r\n        if (lottery_topBuy_today > lottery_topBuy_latest) {\r\n            // we have a winner\r\n            // 30% of the pool goes to the winner\r\n\r\n            lottery_topBuy_latest = lottery_topBuy_today;\r\n\r\n            if (currentDay >= 7) {\r\n                token_BUSD.transfer(address(lottery_topBuyer_today), (lottery_Pool * 30 /100));\r\n                lottery_Pool = lottery_Pool * 70 /100;\r\n\r\n                emit lottery_winner(\r\n                    lottery_topBuyer_today, \r\n                    (lottery_Pool * 30 /100),\r\n                    block.timestamp,\r\n                    lottery_topBuy_latest\r\n                );\r\n            }\r\n\r\n        } else {\r\n            // no winner, reducing the record by 2.5%\r\n            lottery_topBuy_latest -= lottery_topBuy_latest * 25 /1000;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"UserLobby\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"UserLobbyCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"UserStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"UserStakeCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"day_lobby_entry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRecord\",\"type\":\"uint256\"}],\"name\":\"lottery_winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stake_lend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stake_loan_request\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stake_sell_request\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr_2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"stake_sold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"EndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EnterLobby\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDays\",\"type\":\"uint256\"}],\"name\":\"EnterStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetDay\",\"type\":\"uint256\"}],\"name\":\"ExitLobby\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LendedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LoanedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_clcDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Day\",\"type\":\"uint256\"}],\"name\":\"_clcTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_updateDaily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avariceTeam_addr_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avariceTeam_addr_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avariceTeam_addr_3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avariceTeam_addr_4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avariceTeam_addr_5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avariceTeam_addr_6\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avariceTeam_addr_7\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyStakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeAmount\",\"type\":\"uint256\"}],\"name\":\"calcBonusToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"calcStakeCollecting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calcStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"cancelStakeLoanRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"clcLenderLendId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenderLendId\",\"type\":\"uint256\"}],\"name\":\"collectLendReturn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayBNBPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysActiveInStakeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysActiveInStakeTokensDecrase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysActiveInStakeTokensIncrese\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devShareOfStakeSellsAndLoanFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"do_changeInventiveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"do_changeTeam1Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"do_changeTeam2Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"do_changeTeam3Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"do_changeTeam4Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"do_changeTeam5Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"do_changeTeam6Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"do_changeTeam7Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enterytokenMath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushLottyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushdevShareOfStakeSells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"}],\"name\":\"getLoanOnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLobbyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lendOnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendersPaidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loaningIsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lobbyEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery_Pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery_topBuy_latest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery_topBuy_today\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottery_topBuyer_today\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapLenderInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lenderLendId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"loanIsPaid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMemberLobby\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraVirtualTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"memberLobbyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"memberLobbyEntryDay\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasCollected\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMemberLobby_overallData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"overall_collectedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overall_lobbyEnteries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overall_stakedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overall_collectedDivs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMemberStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loansReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stakeCollected\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stake_hasSold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stake_forSell\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stake_hasLoan\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stake_forLoan\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapRequestingLoans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"loanerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lenderLendId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lend_startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lend_endDay\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasLoan\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"loanIsPaid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_collectedBonusTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_collectedDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_collectedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_lobbyEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner_1_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"partner_1_addr_set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner_1_share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner_2_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"partner_2_addr_set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner_2_share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner_3_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"partner_3_addr_set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner_3_share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentOfLobbyToBePooled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerBonusesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveTotalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellStakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"soldStakeFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeSellingIsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchLoaningStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchStakeSellingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchVirtualBalanceEntering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoanedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoanedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStakeTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalTokensInActiveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersCountDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualBalanceEnteringIsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"virtualBalanceEnteringLobby\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLoanedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawSoldStakeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Avarice", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://68c084bbb9a476f1155d391dc3e9b560a7ae4d62763e1e38494992abd57200d7"}