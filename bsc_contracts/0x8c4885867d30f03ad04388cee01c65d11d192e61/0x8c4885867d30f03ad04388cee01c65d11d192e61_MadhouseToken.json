{"SourceCode": "/*\r\n Twitter:  https://twitter.com/MadHouseToken\r\n Website:  https://www.MadHouseToken.com\r\n Telegram: https://t.me/MadHouseToken\r\n\r\n                                     .^.                                       \r\n                          __       ./...\\.                                     \r\n                         |.|     ./...__/\\\\.                                   \r\n                         |.|   ./..._/    '\\\\.                                 \r\n                         |.| ./..__/        '\\\\.                               \r\n                         |.|/.._/              \\\\\\.                            \r\n                        .|..._/                  \\\\\\.                          \r\n                      ./..__/                      '\\\\.                        \r\n                    ./.._/                           '\\\\.                      \r\n                  ./.._/                                \\\\.                    \r\n                ./...\\   __                         __   /\\\\.                  \r\n               /__-'  \\_/_.--__                __--'._\\_/   \\\\                 \r\n                     /_-- --___--___      ___--___-- --__\\                     \r\n                      \\ |  ( o '--__|    |__--' o )  |  |                      \r\n                      \\  \\  \\--/   _/    \\__  \\--/  /   |                      \r\n                       \\  '--____-'         '-___--'   |                       \r\n                       \\                               |                       \r\n                        \\        _---__               |                        \r\n                        \\       / |||||'''-----_      |                        \r\n                         \\     ( -------  -'         |                         \r\n                         \\      '-.||||.-'           |                         \r\n                          \\        ''''             |                          \r\n                          \\_________________________|                          \r\n                   ,_, ,_, ,_,                      _____     ,_,              \r\n    /\\/\\   __ _, __| | | |_| | ___ ,_, ,_ ___  ___ /__   \\___ | | _,___ _ __   \r\n   /    \\ / _` |/ _` | |  _  |/ _ \\| | | / __|/ _ \\  / /\\/ _ \\| |/ / _ \\ '_ \\  \r\n  / /\\/\\ \\ (_| | (_| | | | | | (_) | |_| \\__ \\  __/ / / | (_) |   <  __/ | | \\ \r\n  \\/    \\/\\__,_|\\__,_| |_| |_|\\___/ \\__,_|___/\\___\\ \\/   \\___/|_|\\_\\___|_| |_| \r\n\r\nContract by Madhouse Team - optimized based on others previous work  \r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode\r\n    // see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply()\r\n    external view returns (uint256);\r\n  function balanceOf(address account)\r\n    external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount)\r\n    external returns (bool);\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n  function approve(address spender, uint256 amount)\r\n    external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount)\r\n    external returns (bool);\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage)\r\n  internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiply overflow\");\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage)\r\n  internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage)\r\n  internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n\r\n  function isContract(address account) internal view returns (bool) {\r\n    // According to EIP-1052, 0x0 is the value returned for not-yet created\r\n    // accounts and\r\n    // 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\r\n    // is returned for accounts without code, i.e. `keccak256('')`\r\n    bytes32 codehash;\r\n    bytes32 accountHash =\r\n      0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly { codehash := extcodehash(account) }\r\n    return (codehash != accountHash && codehash != 0x0);\r\n  }\r\n\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Addr: insufficient balance\");\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{ value: amount }(\"\");\r\n    require(success, \"Addr: sendValue fail, reverted?\");\r\n  }\r\n\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data\r\n  ) internal returns (bytes memory) {\r\n    return functionCall(target, data, \"Addr: low-level call failed\");\r\n  }\r\n\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return _functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value,\r\n      \"Addr: low-lvl with value failed\");\r\n  }\r\n\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(address(this).balance >= value,\r\n      \"Addr: insuf balance for call\");\r\n    return _functionCallWithValue(target, data, value, errorMessage);\r\n  }\r\n\r\n  function _functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 weiValue,\r\n    string memory errorMessage\r\n  )private returns (bytes memory) {\r\n    require(isContract(target), \"Addr: call to non-contract\");\r\n    (bool success, bytes memory returndata) =\r\n      target.call{ value: weiValue }(data);\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      if (returndata.length > 0) {\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n  address private _previousOwner;\r\n  uint256 private _lockTime;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner,\r\n  address indexed newOwner);\r\n\r\n  constructor () {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0),\r\n    \"Ownable: new owner is zero addr\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  function getUnlockTime() public view returns (uint256) {\r\n    return _lockTime;\r\n  }\r\n\r\n  function getTime() public view returns (uint256) {\r\n    return block.timestamp;\r\n  }\r\n\r\n  function lock(uint256 time) public virtual onlyOwner {\r\n    _previousOwner = _owner;\r\n    _owner = address(0);\r\n    _lockTime = block.timestamp + time;\r\n    emit OwnershipTransferred(_owner, address(0));\r\n  }\r\n\r\n  function unlock() public virtual {\r\n    require(_previousOwner == msg.sender,\r\n    \"Permission to unlock denied.\");\r\n    require(block.timestamp > _lockTime ,\r\n    \"Cannot unlock contract yet.\");\r\n    emit OwnershipTransferred(_owner, _previousOwner);\r\n    _owner = _previousOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(\r\n    address indexed token0,\r\n    address indexed token1,\r\n    address pair,\r\n    uint\r\n  );\r\n\r\n  function feeTo() external view returns (address);\r\n  function feeToSetter() external view returns (address);\r\n  function getPair(address tokenA, address tokenB)\r\n    external view returns (address pair);\r\n  function allPairs(uint) external view returns (address pair);\r\n  function allPairsLength() external view returns (uint);\r\n\r\n  function createPair(address tokenA, address tokenB)\r\n    external returns (address pair);\r\n\r\n  function setFeeTo(address) external;\r\n  function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint);\r\n\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value)\r\n    external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint value,\r\n    uint deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n  event Burn(\r\n    address indexed sender,\r\n    uint amount0,\r\n    uint amount1,\r\n    address indexed to\r\n  );\r\n  event Swap(\r\n    address indexed sender,\r\n    uint amount0In,\r\n    uint amount1In,\r\n    uint amount0Out,\r\n    uint amount1Out,\r\n    address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n\r\n  function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n  function factory() external pure returns (address);\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint amountADesired,\r\n    uint amountBDesired,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountA, uint amountB, uint liquidity);\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint amountTokenDesired,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n  function removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountA, uint amountB);\r\n  function removeLiquidityETH(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountToken, uint amountETH);\r\n  function removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountA, uint amountB);\r\n  function removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountToken, uint amountETH);\r\n  function swapExactTokensForTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n  function swapTokensForExactTokens(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n  function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n  function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n  function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n  function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountETH);\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n  ) external returns (uint amountETH);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external;\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external payable;\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external;\r\n}\r\n\r\ncontract MadhouseToken is Context, IERC20, Ownable {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  mapping (address => uint256) private _rOwned;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  string private constant _name = \"Madhouse Token\";\r\n  string private constant _symbol = \"MHTC\";\r\n  uint8 private constant _decimals = 9;\r\n  uint256 private _tTotal = 1e18; //1,000,000,000.000000000\r\n  //Direct transfers are never subject to tax fees.\r\n  uint256 public _buyReflectFee = 25*10**(_decimals-3); //  2.5%\r\n  uint256 public _buyLppFee = 5*10**(_decimals-3); //  0.5%\r\n  uint256 public _sellReflectFee = 20*10**(_decimals-2); // 20%\r\n  uint256 public _sellLppFee = 5*10**(_decimals-2); //  5%\r\n\r\n  uint256 private constant MAX = ~uint256(0);\r\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n  uint256 private _tFeeTotal;\r\n  \r\n  address public uniswapV2Pair;\r\n\r\n  event Burn(address indexed burner, uint256 amount);\r\n  event SetBuyLppFee(uint256 lppFee);\r\n  event SetSellLppFee(uint256 lppFee);\r\n  event SetBuyReflectFee(uint256 reflectFee);\r\n  event SetSellReflectFee(uint256 reflectFee);\r\n  event ChangeRouterVersion(address indexed router, address indexed pair);\r\n\r\n  constructor () {\r\n\r\n    _rOwned[_msgSender()] = _rTotal; //All tokens initially go to creator\r\n\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02\r\n      (0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n      .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n    if ( _sellLppFee*4 > _sellReflectFee )\r\n      _sellLppFee = 0;\r\n    if ( _sellReflectFee > 20*10**(_decimals-2) )\r\n      _sellReflectFee = 0;\r\n    if ( _buyLppFee*4 > _buyReflectFee)\r\n      _buyLppFee = 0;\r\n    if ( _buyReflectFee > 20*10**(_decimals-2))\r\n      _buyReflectFee = 0;\r\n\r\n    emit Transfer(address(0), _msgSender(), _tTotal);\r\n  }\r\n\r\n  function name() external pure returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() external pure returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() external pure returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() external view override returns (uint256) {\r\n    return _tTotal;\r\n  }\r\n\r\n  function balanceOf(address account) external view override returns (uint256) {\r\n    require(_rOwned[account]<=_rTotal,\"Amount over total reflections\");\r\n    return _rOwned[account].div( _rTotal.div(_tTotal) );\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount)\r\n  external override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender)\r\n  external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount)\r\n  external override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount)\r\n  external override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(\r\n      sender,\r\n      _msgSender(),\r\n      _allowances[sender][_msgSender()].sub(\r\n        amount,\r\n        \"Transfer exceeds allowance\")\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n  external virtual returns (bool) {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n  external virtual returns (bool) {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender].sub(\r\n        subtractedValue,\r\n        \"Decreased allowance below zero\"\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function totalFees() external view returns (uint256) {\r\n    return _tFeeTotal;\r\n  }\r\n\r\n  function deliver(uint256 contribution) external {\r\n    //Holders can contribute their own tokens to the shared reflections.\r\n    address sender = _msgSender();\r\n    uint256 rAmount = contribution.mul(_rTotal.div(_tTotal));\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rTotal = _rTotal.sub(rAmount);\r\n    _tFeeTotal = _tFeeTotal.add(contribution);\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) private {\r\n    require(owner != address(0), \"ERC20: approve from zero addr\");\r\n    require(spender != address(0), \"ERC20: approve to zero addr\");\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) private {\r\n    require(from != to, \"Transfer to/from same addr\");\r\n    require(from != address(0), \"ERC20: transfer from zero addr\");\r\n    require(to != address(0), \"ERC20: transfer to zero addr\");\r\n    require(to != address(this), \"Do not send tokens to this\");\r\n    require(amount > 0, \"Transfer amount of zero denied\");\r\n\r\n    uint256 rAmount = amount.mul(_rTotal.div(_tTotal));\r\n    if(from != uniswapV2Pair && to != uniswapV2Pair){\r\n      // Since this is not a Buy and Not a Sell , it is a direct transfer\r\n      _rOwned[from] = _rOwned[from].sub(rAmount);\r\n      _rOwned[to] = _rOwned[to].add(rAmount);\r\n      emit Transfer(from, to, amount);\r\n      //The direct transfer is complete, we don't need to calculate fee values.\r\n      //Skip the motions of taking zero tax and adding zero liquidity.\r\n      return;\r\n    }\r\n    //Buys and Sells may incur tax, so prepare token transfer values\r\n    uint256 tFee;\r\n    uint256 tLpp;\r\n    uint256 currentRate = _rTotal.div(_tTotal);\r\n    if(from == uniswapV2Pair){ // Buy\r\n      tFee = amount.mul(_buyReflectFee).div(10**_decimals);\r\n      tLpp = amount.mul(_buyLppFee).div(10**_decimals);\r\n    } else { // Sell (would have already returned, if not direct and not a buy)\r\n      tFee = amount.mul(_sellReflectFee).div(10**_decimals);\r\n      tLpp = amount.mul(_sellLppFee).div(10**_decimals);\r\n    }\r\n    uint256 tTransferAmount = amount.sub(tFee).sub(tLpp);\r\n    uint256 rFee = tFee.mul(currentRate);\r\n    uint256 rLpp = tLpp.mul(currentRate);\r\n\r\n    _rOwned[from] = _rOwned[from].sub(rAmount);\r\n    _rOwned[to] = _rOwned[to].add(rAmount.sub(rFee).sub(rLpp));\r\n\r\n    //Deflationary LPP:\r\n    _tTotal = _tTotal.sub(tLpp);\r\n\r\n    // Reduce the denominator rTotal in tTotal(rOwned/rTotal) to distribute\r\n    // reflect tax proportionally to all accounts.\r\n    _rTotal = _rTotal.sub(rFee); \r\n    _tFeeTotal = _tFeeTotal.add(tFee);\r\n\r\n    emit Transfer(from, to, tTransferAmount);\r\n\r\n  }\r\n\r\n  function burn(uint256 tokenAmount) external {\r\n    require(tokenAmount<=_tTotal, \"Burn amount exceeds supply.\");\r\n    _burn(msg.sender, tokenAmount);\r\n  }\r\n\r\n  function _burn(address burner, uint256 amount) internal {\r\n    uint256 rBurn = amount.mul(_rTotal.div(_tTotal));\r\n    require(rBurn <= _rOwned[burner],\r\n      \"Balance less than burn amount.\");\r\n    _rOwned[burner] = _rOwned[burner].sub(rBurn);\r\n    _tTotal = _tTotal.sub(amount);\r\n    emit Burn(burner, amount);\r\n    emit Transfer(burner, address(0), amount);\r\n  }\r\n\r\n  function setBuyLppFee(uint256 lppFee) external onlyOwner {\r\n    // Liquidity protection exceeding reflection would cause held balances loss\r\n    require( lppFee*4 <= _buyReflectFee,\r\n      \"LPP is too high\" );\r\n    _buyLppFee = lppFee;\r\n    emit SetBuyLppFee(lppFee);\r\n  }\r\n\r\n  function setBuyReflectFee(uint256 reflectFee) external onlyOwner {\r\n    // Liquidity protection exceeding reflection would cause held balances loss\r\n    require( _buyLppFee*4 <= reflectFee,\r\n      \"LPP must be reduced first\" );\r\n    require( reflectFee <= 20*10**(_decimals-2),\r\n      \"Reflection tax cannot exceed 20%.\" );\r\n    _buyReflectFee = reflectFee;\r\n    emit SetBuyReflectFee(reflectFee);\r\n\r\n  }\r\n\r\n  function setSellLppFee(uint256 lppFee) external onlyOwner {\r\n    // Liquidity protection exceeding reflection would cause held balances loss\r\n    require( lppFee*4 <= _sellReflectFee,\r\n      \"LPP is too high\" );\r\n    _sellLppFee = lppFee;\r\n    emit SetSellLppFee(lppFee);\r\n  }\r\n\r\n  function setSellReflectFee(uint256 reflectFee) external onlyOwner {\r\n    // Liquidity protection exceeding reflection would cause held balances loss\r\n    require( _sellLppFee*4 <= reflectFee,\r\n      \"LPP must be reduced first\" );\r\n    require( reflectFee <= 20*10**(_decimals-2),\r\n      \"Reflection tax cannot exceed 20%.\" );\r\n    _sellReflectFee = reflectFee;\r\n    emit SetSellReflectFee(reflectFee);\r\n  }\r\n\r\n  function changeRouterVersion(address _router)\r\n  external onlyOwner returns(address _pair) {\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\r\n\r\n    _pair = IUniswapV2Factory(\r\n      _uniswapV2Router.factory()).getPair(address(this),\r\n      _uniswapV2Router.WETH());\r\n    if(_pair == address(0)){\r\n      // Pair doesn't exist\r\n      _pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n      .createPair(address(this), _uniswapV2Router.WETH());\r\n    }\r\n    // Update the router pair\r\n    uniswapV2Pair = _pair;\r\n    emit ChangeRouterVersion(_router, _pair);\r\n  }\r\n\r\n  function transferForeignToken(address _token, address _to)\r\n  external onlyOwner returns(bool _sent){\r\n    require(_token != address(this), \"Native token transfer denied\");\r\n    uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n    _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n  }\r\n\r\n  fallback() external {\r\n    require( false, \"Do not send funds directly\");\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"ChangeRouterVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lppFee\",\"type\":\"uint256\"}],\"name\":\"SetBuyLppFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"}],\"name\":\"SetBuyReflectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lppFee\",\"type\":\"uint256\"}],\"name\":\"SetSellLppFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"}],\"name\":\"SetSellReflectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_buyLppFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLppFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellReflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lppFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLppFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"}],\"name\":\"setBuyReflectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lppFee\",\"type\":\"uint256\"}],\"name\":\"setSellLppFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectFee\",\"type\":\"uint256\"}],\"name\":\"setSellReflectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MadhouseToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19f730ddfa2191b40d59a02eb37c5462a009f99cb957feaf12eac06bb486db84"}