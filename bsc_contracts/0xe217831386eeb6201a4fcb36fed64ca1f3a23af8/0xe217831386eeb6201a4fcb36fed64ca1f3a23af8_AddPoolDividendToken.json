{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint256);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract AddPoolDividendTokenV2 is IERC20, Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    uint256 public kb;\r\n    uint256 public maxSwapAmount;\r\n    uint256 public maxWalletAmount;\r\n    bool public limitEnable = true;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _initFeeWhiteList;\r\n    mapping(address => bool) public _rewardList;\r\n    mapping(address => bool) public isMaxEatExempt;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public currency;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n    TokenDistributor public _rewardTokenDistributor;\r\n    EnumerableSet.AddressSet private _feeWhiteListSet;\r\n\r\n    uint256 public _buyFundFee;\r\n    uint256 public _buyLPFee;\r\n    uint256 public _buyRewardFee;\r\n    uint256 public _sellFundFee;\r\n    uint256 public _sellLPFee;\r\n    uint256 public _sellRewardFee;\r\n    uint256 public _FeePercentageBase = 10000;\r\n    uint256 public minimumTokensBeforeSwap;\r\n\r\n    mapping(address => uint256) public user2blocks;\r\n    uint256 public batchBots;\r\n\r\n    bool currencyIsEth;\r\n\r\n    address public rewardToken;\r\n    uint256 public startTradeBlock;\r\n\r\n    address public _mainPair;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    bool public enableKillBlock;\r\n    bool public enableSwapLimit;\r\n    bool public enableWalletLimit;\r\n    bool public enableChangeTax;\r\n    bool public enableManualStartTrade;\r\n    bool public tradeStart;\r\n    bool public enableWhiteList;\r\n\r\n    address[] public rewardPath;\r\n\r\n    constructor(\r\n        string[] memory stringParams,\r\n        address[] memory addressParams,\r\n        uint256[] memory numberParams,\r\n        bool[] memory boolParams\r\n    ) {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n        _name = stringParams[0];\r\n        _symbol = stringParams[1];\r\n        _decimals = numberParams[0];\r\n        uint256 total = numberParams[1];\r\n        _tTotal = total;\r\n\r\n        currency = addressParams[0];\r\n        ISwapRouter swapRouter = ISwapRouter(addressParams[1]);\r\n        address receiveAddress = addressParams[2];\r\n        fundAddress = addressParams[3];\r\n        rewardToken = addressParams[4];\r\n\r\n        _buyFundFee = numberParams[2];\r\n        _buyRewardFee = numberParams[3];\r\n        _buyLPFee = numberParams[4];\r\n\r\n        _sellFundFee = numberParams[5];\r\n        _sellRewardFee = numberParams[6];\r\n        _sellLPFee = numberParams[7];\r\n\r\n        require(_buyRewardFee + _buyLPFee + _buyFundFee <= 2000, \"fee too high\");\r\n        require(_sellRewardFee + _sellLPFee + _sellFundFee <= 2000, \"fee too high\");\r\n        require(_buyFundFee + _buyLPFee + _buyRewardFee + _sellFundFee + _sellRewardFee + _sellLPFee > 0, \"fee must > 0\");\r\n\r\n        kb = numberParams[8];\r\n        maxSwapAmount = numberParams[9];\r\n        maxWalletAmount = numberParams[10];\r\n\r\n        currencyIsEth = boolParams[0];\r\n        enableManualStartTrade = boolParams[1];\r\n        enableKillBlock = boolParams[2];\r\n\r\n        enableSwapLimit = boolParams[3];\r\n        enableWalletLimit = boolParams[4];\r\n        enableChangeTax = boolParams[5];\r\n        enableWhiteList = boolParams[6];\r\n\r\n        if(enableKillBlock){\r\n            enableManualStartTrade = true;\r\n        }\r\n        if(!enableManualStartTrade){\r\n            tradeStart = true;\r\n            startTradeBlock = block.timestamp;\r\n        }\r\n\r\n        rewardPath = [address(this), currency];\r\n        if (currency != rewardToken) {\r\n            if (currencyIsEth == false) {\r\n                rewardPath.push(swapRouter.WETH());\r\n            }\r\n            if (rewardToken != swapRouter.WETH()) rewardPath.push(rewardToken);\r\n        }\r\n\r\n        IERC20(currency).approve(address(swapRouter), MAX);\r\n\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), currency);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n        minimumTokensBeforeSwap = total / (10**6); \r\n\r\n        _balances[receiveAddress] = total;\r\n        emit Transfer(address(0), receiveAddress, total);\r\n\r\n        _initFeeWhiteList[fundAddress] = true;\r\n        _initFeeWhiteList[receiveAddress] = true;\r\n        _initFeeWhiteList[address(this)] = true;\r\n        _initFeeWhiteList[address(swapRouter)] = true;\r\n        _initFeeWhiteList[msg.sender] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n\r\n        holderRewardCondition = 10**IERC20(currency).decimals() / 10;\r\n\r\n        _tokenDistributor = new TokenDistributor(currency);\r\n        _rewardTokenDistributor = new TokenDistributor(rewardToken);\r\n    }\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    event InformTokenFactoryFailed(address indexed tokenFactory, address indexed newOwner);\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(\r\n            _owner,\r\n            0x000000000000000000000000000000000000dEaD\r\n        );\r\n        _owner = 0x000000000000000000000000000000000000dEaD;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address o, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[o][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address o,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        _allowances[o][spender] = amount;\r\n        emit Approval(o, spender, amount);\r\n    }\r\n\r\n    function setisMaxEatExempt(address holder, bool exempt) external onlyOwner {\r\n        isMaxEatExempt[holder] = exempt;\r\n    }\r\n\r\n    function setkb(uint256 a) public onlyOwner {\r\n        kb = a;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        if(inSwap) { \r\n            _basicTransfer(sender, recipient, amount); \r\n            return;\r\n        }\r\n        if(!_swapPairList[sender] && !_swapPairList[recipient]) {\r\n            _basicTransfer(sender, recipient, amount); \r\n            addHolderAndProcessReward(sender, recipient);\r\n            return;\r\n        }\r\n        if(enableWhiteList && (_feeWhiteList[sender] || _feeWhiteList[recipient])) {\r\n            _basicTransfer(sender, recipient, amount); \r\n            addHolderAndProcessReward(sender, recipient);\r\n            return;\r\n        }\r\n        if(_initFeeWhiteList[sender] || _initFeeWhiteList[recipient]) {\r\n            _basicTransfer(sender, recipient, amount); \r\n            addHolderAndProcessReward(sender, recipient);\r\n            return;\r\n        }\r\n        require(tradeStart, \"not start trade\");\r\n        if(enableKillBlock) {\r\n            require(block.timestamp > kb + startTradeBlock, \"block killed\");\r\n        }\r\n        if (enableSwapLimit) {\r\n            require(amount <= maxSwapAmount, \"Exceeded maximum transaction volume\");\r\n        } \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n        \r\n        if (overMinimumTokenBalance) {\r\n            swapTokenForFund(contractTokenBalance);    \r\n        }         \r\n        _balances[sender] = _balances[sender] - amount;\r\n        uint256 finalAmount = takeFee(sender, recipient, amount);\r\n        if(enableWalletLimit && _swapPairList[sender]){\r\n            require(balanceOf(recipient) + finalAmount <= maxWalletAmount, \"Exceeded maximum wallet balance\");\r\n        }\r\n        _balances[recipient] = _balances[recipient] + finalAmount;\r\n\r\n\r\n        addHolderAndProcessReward(sender, recipient);\r\n        emit Transfer(sender, recipient, finalAmount);\r\n    }\r\n\r\n    function addHolderAndProcessReward(address sender, address recipient) private {\r\n        bool isSell = false;  \r\n        if (_swapPairList[recipient]) {\r\n            isSell = true;\r\n        }\r\n         if (sender != address(this)) {\r\n            if (isSell) {\r\n                addHolder(sender);\r\n            }\r\n            processReward(500000);\r\n        }\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 feeAmount = 0;\r\n        uint256 _totalTaxIfBuying = _buyFundFee + _buyRewardFee + _buyLPFee;\r\n        uint256 _totalTaxIfSelling = _sellFundFee + _sellLPFee + _sellRewardFee;\r\n        \r\n        if(_swapPairList[sender]) {\r\n            feeAmount = amount * _totalTaxIfBuying / _FeePercentageBase;\r\n        }\r\n        else if(_swapPairList[recipient]) {\r\n            feeAmount = amount * _totalTaxIfSelling / _FeePercentageBase;\r\n        }\r\n        \r\n        if(feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)]+feeAmount;\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 value\r\n    );\r\n    event Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\r\n    event Failed_addLiquidityETH();\r\n    event Failed_addLiquidity();\r\n\r\n    function swapTokenForFund(uint256 tokenAmount)\r\n        private\r\n        lockTheSwap\r\n    {\r\n        uint256 swapFee = _buyFundFee +\r\n                _buyRewardFee +\r\n                _buyLPFee +\r\n                _sellFundFee +\r\n                _sellRewardFee +\r\n                _sellLPFee;\r\n        if (swapFee == 0) {\r\n            return;\r\n        }\r\n        uint256 rewardAmount = (tokenAmount *\r\n            (_buyRewardFee + _sellRewardFee)) / swapFee;\r\n        if (rewardAmount > 0) {\r\n            try\r\n                _swapRouter\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        rewardAmount,\r\n                        0,\r\n                        rewardPath,\r\n                        address(_rewardTokenDistributor),\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    0\r\n                );\r\n            }\r\n        }\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _sellLPFee + _buyLPFee;\r\n        uint256 lpAmount = (tokenAmount * lpFee) / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = currency;\r\n        if (currencyIsEth) {\r\n            try\r\n                _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                    tokenAmount - lpAmount - rewardAmount,\r\n                    0,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\r\n            }\r\n        } else {\r\n            try\r\n                _swapRouter\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        tokenAmount - lpAmount - rewardAmount,\r\n                        0,\r\n                        path,\r\n                        address(_tokenDistributor),\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    1\r\n                );\r\n            }\r\n        }\r\n\r\n        swapFee -= lpFee;\r\n\r\n        IERC20 FIST = IERC20(currency);\r\n\r\n        uint256 fistBalance = 0;\r\n        uint256 lpFist = 0;\r\n        uint256 fundAmount = 0;\r\n\r\n        if (currencyIsEth) {\r\n            fistBalance = address(this).balance;\r\n            lpFist = (fistBalance * lpFee) / swapFee;\r\n            fundAmount = fistBalance - lpFist;\r\n            if (fundAmount > 0 && fundAddress != address(0)) {\r\n                payable(fundAddress).transfer(fundAmount);\r\n            }\r\n            if (lpAmount > 0 && lpFist > 0) {\r\n                // add the liquidity\r\n                try\r\n                    _swapRouter.addLiquidityETH{value: lpFist}(\r\n                        address(this),\r\n                        lpAmount,\r\n                        0,\r\n                        0,\r\n                        fundAddress,\r\n                        block.timestamp\r\n                    )\r\n                {} catch {\r\n                    emit Failed_addLiquidityETH();\r\n                }\r\n            }\r\n        } else {\r\n            fistBalance = FIST.balanceOf(address(_tokenDistributor));\r\n            lpFist = (fistBalance * lpFee) / swapFee;\r\n            fundAmount = fistBalance - lpFist;\r\n\r\n            if (lpFist > 0) {\r\n                FIST.transferFrom(\r\n                    address(_tokenDistributor),\r\n                    address(this),\r\n                    lpFist\r\n                );\r\n            }\r\n\r\n            if (fundAmount > 0) {\r\n                FIST.transferFrom(\r\n                    address(_tokenDistributor),\r\n                    fundAddress,\r\n                    fundAmount\r\n                );\r\n            }\r\n\r\n            if (lpAmount > 0 && lpFist > 0) {\r\n                try\r\n                    _swapRouter.addLiquidity(\r\n                        address(this),\r\n                        currency,\r\n                        lpAmount,\r\n                        lpFist,\r\n                        0,\r\n                        0,\r\n                        fundAddress,\r\n                        block.timestamp\r\n                    )\r\n                {} catch {\r\n                    emit Failed_addLiquidity();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _initFeeWhiteList[addr] = true;\r\n    }\r\n\r\n    function startTrade() public onlyOwner {\r\n        require(startTradeBlock == 0, \"already start\");\r\n        tradeStart = true;\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setFeeWhiteList(address[] calldata addr, bool enable)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n            if(enable){\r\n                _feeWhiteListSet.add(addr[i]);\r\n            }else{\r\n                if(_feeWhiteListSet.contains(addr[i])){\r\n                    _feeWhiteListSet.remove(addr[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function feeWhiteListCount() external view returns (uint256) {\r\n        return _feeWhiteListSet.length();\r\n    }\r\n\r\n    function getfeeWhiteList(uint256 start, uint256 end)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        if(_feeWhiteListSet.length() == 0){\r\n            return new address[](0);\r\n        }\r\n\r\n        if (end >= _feeWhiteListSet.length()) {\r\n            end = _feeWhiteListSet.length() - 1;\r\n        }\r\n        uint256 length = end - start + 1;\r\n        address[] memory arr = new address[](length);\r\n        uint256 index = 0;\r\n        for (uint256 i = start; i <= end; i++) {\r\n            arr[index] = _feeWhiteListSet.at(i);\r\n            index++;\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner() {\r\n        minimumTokensBeforeSwap = newLimit;\r\n    }\r\n\r\n    function completeCustoms(uint256[] calldata customs) external onlyOwner {\r\n        require(enableChangeTax, \"tax change disabled\");\r\n        _buyFundFee = customs[0];\r\n        _buyRewardFee = customs[1];\r\n        _buyLPFee = customs[2];\r\n\r\n        _sellFundFee = customs[3];\r\n        _sellRewardFee = customs[4];\r\n        _sellLPFee = customs[5];\r\n\r\n        require(_buyRewardFee + _buyLPFee + _buyFundFee <= 2000, \"fee too high\");\r\n        require(_sellRewardFee + _sellLPFee + _sellFundFee <= 2000, \"fee too high\");\r\n        require(_buyFundFee + _buyLPFee + _buyRewardFee + _sellFundFee + _sellRewardFee + _sellLPFee > 0, \"fee must > 0\");\r\n    }\r\n\r\n    function disableSwapLimit() public onlyOwner {\r\n        enableSwapLimit = false;\r\n    }\r\n\r\n    function disableWalletLimit() public onlyOwner {\r\n        enableWalletLimit = false;\r\n    }\r\n\r\n    function disableChangeTax() public onlyOwner {\r\n        enableChangeTax = false;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function changeSwapLimit(uint256 _amount) external onlyOwner {\r\n        maxSwapAmount = _amount;\r\n    }\r\n\r\n    function changeWalletLimit(uint256 _amount) external onlyOwner {\r\n        maxWalletAmount = _amount;\r\n    }\r\n\r\n    function disableWhiteList() public onlyOwner {\r\n        enableWhiteList = false;\r\n    }\r\n\r\n    function setCurrency(address _currency, address _router) public onlyOwner {\r\n        currency = _currency;\r\n        if (_currency == _swapRouter.WETH()) {\r\n            currencyIsEth = true;\r\n        } else {\r\n            currencyIsEth = false;\r\n        }\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(_router);\r\n        IERC20(currency).approve(address(swapRouter), MAX);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.getPair(address(this), currency);\r\n        if (swapPair == address(0)) {\r\n            swapPair = swapFactory.createPair(address(this), currency);\r\n        }\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n        _initFeeWhiteList[address(swapRouter)] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 private progressRewardBlock;\r\n    uint256 public processRewardWaitBlock = 20;\r\n\r\n    function setProcessRewardWaitBlock(uint256 newValue) public onlyOwner {\r\n        processRewardWaitBlock = newValue;\r\n    }\r\n\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + processRewardWaitBlock > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 FIST = IERC20(rewardToken);\r\n\r\n        uint256 balance = FIST.balanceOf(address(_rewardTokenDistributor));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        FIST.transferFrom(\r\n            address(_rewardTokenDistributor),\r\n            address(this),\r\n            balance\r\n        );\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint256 holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        balance = FIST.balanceOf(address(this));\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = (balance * tokenBalance) / holdTokenTotal;\r\n                if (amount > 0 && FIST.balanceOf(address(this)) > amount) {\r\n                    FIST.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _feeWhiteList[account] || _initFeeWhiteList[account];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"stringParams\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numberParams\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"boolParams\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_addLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_addLiquidityETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForETHSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"InformTokenFactoryFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_FeePercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_initFeeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardTokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"o\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchBots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"customs\",\"type\":\"uint256[]\"}],\"name\":\"completeCustoms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChangeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableChangeTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableKillBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableManualStartTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWhiteListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getfeeWhiteList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaxEatExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewardWaitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setNumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setProcessRewardWaitBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setisMaxEatExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"setkb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user2blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AddPoolDividendTokenV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003abb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000a209769826f0058935d282a7cf5bf8a9e3f791ae000000000000000000000000a209769826f0058935d282a7cf5bf8a9e3f791ae000000000000000000000000103b24029ffaf25654695709d015ce272224de88000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000021e19e0c9babersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6110f2158a982bfc70a119e9a544f742f7fe4167564ab5dd01e824c9a46df10e"}