{"SourceCode": "// Sources flattened with hardhat v2.9.0 https://hardhat.org\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IERC20.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IAdmin.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IAdmin {\r\n    function rootAdmin() external view returns (address);\r\n    function isAdmin(address account) external returns (uint256);\r\n\r\n    function changeRootAdmin(address _newRootAdmin) external;\r\n    function addAdmin(address _newAdmin) external;\r\n    function removeAdmin(address _admin) external;\r\n}\r\n\r\n\r\n// File contracts/abstracts/Admin.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\ncontract Admin is IAdmin {\r\n\r\n    uint256 private constant _NOT_ADMIN = 0;\r\n    uint256 private constant _ADMIN = 1;\r\n\r\n    address public override rootAdmin;\r\n    mapping(address => uint256) public override isAdmin;\r\n\r\n    event RootAdminChanged(address indexed oldRoot, address indexed newRoot);\r\n    event AdminUpdated(address indexed account, uint256 indexed isAdmin);\r\n\r\n    constructor(address _rootAdmin) {\r\n        rootAdmin = _rootAdmin;\r\n    }\r\n\r\n    modifier onlyRootAdmin() {\r\n        require(msg.sender == rootAdmin, \"must be root admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin[msg.sender] == _ADMIN , \"must be admin\");\r\n        _;\r\n    }\r\n\r\n    function changeRootAdmin(address _newRootAdmin) public onlyRootAdmin {\r\n        address oldRoot = rootAdmin;\r\n        rootAdmin = _newRootAdmin;\r\n        emit RootAdminChanged(oldRoot, rootAdmin);\r\n    }\r\n\r\n    function addAdmin(address _admin) public onlyRootAdmin {\r\n        isAdmin[_admin] = _ADMIN;\r\n        emit AdminUpdated(_admin, _ADMIN);\r\n    }\r\n\r\n    function removeAdmin(address _admin) public onlyRootAdmin {\r\n        isAdmin[_admin] = _NOT_ADMIN;\r\n        emit AdminUpdated(_admin, _NOT_ADMIN);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IFeeCollector.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IFeeCollector {\r\n    function feeClaimer() external returns (address);\r\n\r\n    function feeDecimals() external returns (uint256);\r\n\r\n    function shifter() external returns (uint256);\r\n\r\n    function fee() external returns (uint256);\r\n\r\n    function tokenFeeReserves(address token) external returns (uint256);\r\n\r\n    function collectFee(\r\n        address token,\r\n        uint256 amount,\r\n        address beneficiary\r\n    ) external;\r\n\r\n    function setFeeClaimer(\r\n        address newFeeClaimer\r\n    ) external;\r\n\r\n    function setFee(uint256 newFee) external;\r\n}\r\n\r\n\r\n// File contracts/abstracts/FeeCollector.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\nabstract contract FeeCollector is IFeeCollector {\r\n  uint256 public constant override feeDecimals = 4;\r\n  uint256 public constant override shifter = 10**feeDecimals;\r\n  uint256 public override fee = 50; // 4 decimals => 0.005 * 10^4\r\n  address public override feeClaimer;\r\n\r\n  mapping(address => uint256) public override tokenFeeReserves;\r\n\r\n  event FeeCollected(\r\n    address indexed beneficiary,\r\n    address indexed token,\r\n    uint256 amount\r\n  );\r\n  event FeeClaimerChanged(\r\n    address indexed oldFeeClaimer,\r\n    address indexed newFeeClaimer\r\n  );\r\n  event FeeChanged(uint256 oldFee, uint256 newFee);\r\n\r\n  modifier onlyFeeCalimer() {\r\n    require(msg.sender == feeClaimer, \"Only fee claimer\");\r\n    _;\r\n  }\r\n\r\n  constructor(address feeClaimer_) {\r\n    feeClaimer = feeClaimer_;\r\n  }\r\n\r\n  function deductFee(address token, uint256 amount)\r\n    internal\r\n    returns (uint256, uint256)\r\n  {\r\n    uint256 output = (shifter * amount) / (shifter + fee);\r\n    uint256 collectedFee = amount - output;\r\n    tokenFeeReserves[token] += collectedFee;\r\n    return (output, collectedFee);\r\n  }\r\n\r\n  function collectFee(\r\n    address token,\r\n    uint256 amount,\r\n    address beneficiary\r\n  ) external override onlyFeeCalimer {\r\n    uint256 withdrewAmount = amount >= tokenFeeReserves[token]\r\n      ? tokenFeeReserves[token]\r\n      : amount;\r\n    IERC20(token).transfer(beneficiary, withdrewAmount);\r\n    tokenFeeReserves[token] -= withdrewAmount;\r\n    emit FeeCollected(beneficiary, token, withdrewAmount);\r\n  }\r\n\r\n  function _setFeeClaimer(address newFeeClaimer) internal {\r\n    address oldFeeCalimer = feeClaimer;\r\n    feeClaimer = newFeeClaimer;\r\n    emit FeeClaimerChanged(oldFeeCalimer, feeClaimer);\r\n  }\r\n\r\n  function _setFee(uint256 newFee) internal {\r\n    uint256 oldFee = fee;\r\n    fee = newFee;\r\n    emit FeeChanged(oldFee, fee);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IDealer.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n// TODO: make interface\r\n\r\ninterface IDealer {\r\n    function createOrderSellTrusted(\r\n        address _tokenAddress,\r\n        uint256 _amount,\r\n        uint256 _feeType,\r\n        address _buyer,\r\n        address _seller\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/Transcrypt.sol\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n\r\n\r\ncontract Transcrypt is Admin, FeeCollector {\r\n    uint256 private constant _NEW = 0;\r\n    uint256 private constant _COMPLETED = 1;\r\n\r\n    mapping(uint256 => uint256) public orderStatus;\r\n    address public swapRouter;\r\n    address public dealerContract;\r\n\r\n    event Purchased(\r\n        uint256 orderId,\r\n        address indexed payer,\r\n        address indexed merchant,\r\n        address inputToken,\r\n        address indexed outputToken,\r\n        uint256 amountIn,\r\n        uint256 amountOut,\r\n        uint256 fee,\r\n        address dealer\r\n    );\r\n    event SwapRouterChanged(address oldSwapRouter, address newSwapRouter);\r\n    event DealerContractChanged(\r\n        address oldDealerContract,\r\n        address newDealerContract\r\n    );\r\n\r\n    constructor(\r\n        address _router,\r\n        address _rootAdmin,\r\n        address _feeClaimer,\r\n        address _dealerContract\r\n    ) Admin(_rootAdmin) FeeCollector(_feeClaimer) {\r\n        swapRouter = _router;\r\n        dealerContract = _dealerContract;\r\n    }\r\n\r\n    function purchase(\r\n        uint256 orderId,\r\n        address merchant,\r\n        address[] memory tokens,\r\n        uint256 amountInMax,\r\n        uint256 amountOut,\r\n        uint256 deadline,\r\n        address dealer\r\n    ) public {\r\n        require(orderStatus[orderId] == _NEW, \"Order was completed\");\r\n\r\n        uint256 amountOrder;\r\n        uint256 deductedFee;\r\n\r\n        if (tokens.length == 2 && tokens[0] == tokens[1]) {\r\n            IERC20(tokens[0]).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                amountOut\r\n            );\r\n\r\n            (amountOrder, deductedFee) = deductFee(tokens[0], amountOut);\r\n        } else {\r\n            uint256 swapOutput = swapTokensForExactTokens(\r\n                tokens,\r\n                amountOut,\r\n                amountInMax,\r\n                address(this),\r\n                deadline\r\n            );\r\n\r\n            (amountOrder, deductedFee) = deductFee(\r\n                tokens[tokens.length - 1],\r\n                swapOutput\r\n            );\r\n        }\r\n\r\n        if (dealer == address(0)) {\r\n            IERC20(tokens[tokens.length - 1]).transfer(merchant, amountOrder);\r\n        } else {\r\n            IERC20(tokens[tokens.length - 1]).approve(\r\n                dealerContract,\r\n                amountOrder\r\n            );\r\n            IDealer(dealerContract).createOrderSellTrusted(\r\n                tokens[tokens.length - 1],\r\n                amountOrder,\r\n                1,\r\n                dealer,\r\n                merchant\r\n            );\r\n        }\r\n\r\n        orderStatus[orderId] = _COMPLETED;\r\n\r\n        emit Purchased(\r\n            orderId,\r\n            msg.sender,\r\n            merchant,\r\n            tokens[0],\r\n            tokens[tokens.length - 1],\r\n            amountInMax,\r\n            amountOrder,\r\n            deductedFee,\r\n            dealer\r\n        );\r\n    }\r\n\r\n    function swapTokensForExactTokens(\r\n        address[] memory tokens,\r\n        uint256 _amountOut,\r\n        uint256 _amountInMax,\r\n        address _to,\r\n        uint256 _deadline\r\n    ) private returns (uint256) {\r\n        IERC20(tokens[0]).transferFrom(msg.sender, address(this), _amountInMax);\r\n        IERC20(tokens[0]).approve(swapRouter, _amountInMax);\r\n\r\n        // Receive an exact amount of output tokens for as few input tokens as possible\r\n        uint256[] memory amounts = IUniswapV2Router02(swapRouter)\r\n            .swapTokensForExactTokens(\r\n                _amountOut,\r\n                _amountInMax,\r\n                tokens,\r\n                _to,\r\n                _deadline\r\n            );\r\n        \r\n        // Refund extra amounIn to msg.sender\r\n        if (amounts[0] < _amountInMax) {\r\n            IERC20(tokens[0]).transfer(msg.sender, _amountInMax - amounts[0]);\r\n        }\r\n\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function setFee(uint256 newFee) external onlyRootAdmin {\r\n        _setFee(newFee);\r\n    }\r\n\r\n    function setFeeClaimer(address newFeeClaimer) external onlyRootAdmin {\r\n        _setFeeClaimer(newFeeClaimer);\r\n    }\r\n\r\n    function setSwapRouter(address newSwapRouter) external onlyRootAdmin {\r\n        address oldSwapRouter = swapRouter;\r\n        swapRouter = newSwapRouter;\r\n        emit SwapRouterChanged(oldSwapRouter, newSwapRouter);\r\n    }\r\n\r\n    function setDealerContract(address newDealerContract)\r\n        external\r\n        onlyRootAdmin\r\n    {\r\n        address oldDealerContract = dealerContract;\r\n        dealerContract = newDealerContract;\r\n        emit DealerContractChanged(oldDealerContract, newDealerContract);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeClaimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dealerContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"isAdmin\",\"type\":\"uint256\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDealerContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDealerContract\",\"type\":\"address\"}],\"name\":\"DealerContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeClaimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeClaimer\",\"type\":\"address\"}],\"name\":\"FeeClaimerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dealer\",\"type\":\"address\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRoot\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoot\",\"type\":\"address\"}],\"name\":\"RootAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSwapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSwapRouter\",\"type\":\"address\"}],\"name\":\"SwapRouterChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRootAdmin\",\"type\":\"address\"}],\"name\":\"changeRootAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dealer\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDealerContract\",\"type\":\"address\"}],\"name\":\"setDealerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeClaimer\",\"type\":\"address\"}],\"name\":\"setFeeClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shifter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFeeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Transcrypt", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000057dbfbbf14229513a9faaebce99a66cc3f1037ef00000000000000000000000057dbfbbf14229513a9faaebce99a66cc3f1037ef00000000000000000000000057dbfbbf14229513a9faaebce99a66cc3f1037ef", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://63d49ddf836d75bca4bcff611796a27a40d7b2d65447560e6c9100c805ca382d"}