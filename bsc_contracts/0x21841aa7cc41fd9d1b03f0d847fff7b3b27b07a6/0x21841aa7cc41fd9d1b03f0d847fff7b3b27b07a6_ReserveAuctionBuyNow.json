{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/modules/ReserveAuctionBuyNow/ERC721/ReserveAuctionBuyNowErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {ReentrancyGuard} from \\\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {IncomingTransferSupportV1} from \\\"../../../contracts/common/IncomingTransferSupport/V1/IncomingTransferSupportV1.sol\\\";\\nimport {ERC721TransferHelper} from \\\"../../../contracts/transferHelpers/ERC721TransferHelper.sol\\\";\\nimport {FeePayoutSupportV1} from \\\"../../../contracts/common/FeePayoutSupport/FeePayoutSupportV1.sol\\\";\\nimport {ModuleNamingSupportV1} from \\\"../../../contracts/common/ModuleNamingSupport/ModuleNamingSupportV1.sol\\\";\\nimport {IReserveAuctionBuyNowErc20} from \\\"./IReserveAuctionBuyNowErc20.sol\\\";\\nimport {FloorPrice} from \\\"../../../common/FloorPrice/FloorPrice.sol\\\";\\n\\n\\n\\n/// @title Reserve Auction Core ERC-20\\n/// @author kulkarohan\\n/// @notice Module for minimal ERC-20 timed reserve auctions for ERC-721 tokens\\ncontract ReserveAuctionBuyNowErc20 is IReserveAuctionBuyNowErc20, ReentrancyGuard, IncomingTransferSupportV1, FeePayoutSupportV1, ModuleNamingSupportV1 {\\n    /// @notice The minimum amount of time left in an auction after a new bid is created\\n    uint16 timeBuffer = 15 minutes;\\n\\n    /// @notice The minimum percentage difference between two bids\\n    uint8 minBidIncrementPercentage = 10;\\n\\n    /// @notice The ZORA ERC-721 Transfer Helper\\n    ERC721TransferHelper public immutable erc721TransferHelper;\\n\\n    FloorPrice public immutable floorPrice;\\n\\n    /// @notice The auction for a given NFT, if one exists\\n    /// @dev ERC-721 token contract => ERC-721 token id => Auction\\n    mapping(address => mapping(uint256 => Auction)) public auctionForNFT;\\n\\n    /// @notice The metadata for a given auction\\n    /// @param seller The address of the seller\\n    /// @param reservePrice The reserve price to start the auction\\n    /// @param sellerFundsRecipient The address where funds are sent after the auction\\n    /// @param highestBid The highest bid of the auction\\n    /// @param highestBidder The address of the highest bidder\\n    /// @param duration The length of time that the auction runs after the first bid is placed\\n    /// @param startTime The time that the first bid can be placed\\n    /// @param currency The address of the ERC-20 token, or address(0) for ETH, required to place a bid\\n    /// @param firstBidTime The time that the first bid is placed\\n    struct Auction {\\n        address seller;\\n        uint96 reservePrice;\\n        uint96 buyNowPrice;\\n        address sellerFundsRecipient;\\n        uint96 highestBid;\\n        address highestBidder;\\n        uint48 duration;\\n        uint48 startTime;\\n        address currency;\\n        uint96 firstBidTime;\\n    }\\n\\n    /// @notice Emitted when an auction is created\\n    /// @param tokenContract The ERC-721 token address of the created auction\\n    /// @param tokenId The ERC-721 token id of the created auction\\n    /// @param auction The metadata of the created auction\\n    event AuctionCreated(address indexed tokenContract, uint256 indexed tokenId, Auction auction);\\n\\n    /// @notice Emitted when a reserve price is updated\\n    /// @param tokenContract The ERC-721 token address of the updated auction\\n    /// @param tokenId The ERC-721 token id of the updated auction\\n    /// @param auction The metadata of the updated auction\\n    event AuctionReservePriceUpdated(address indexed tokenContract, uint256 indexed tokenId, Auction auction);\\n\\n    /// @notice Emitted when a boy now price is updated\\n    /// @param tokenContract The ERC-721 token address of the updated auction\\n    /// @param tokenId The ERC-721 token id of the updated auction\\n    /// @param auction The metadata of the updated auction\\n    event AuctionBuyNowPriceUpdated(address indexed tokenContract, uint256 indexed tokenId, Auction auction);\\n\\n    /// @notice Emitted when an auction is canceled\\n    /// @param tokenContract The ERC-721 token address of the canceled auction\\n    /// @param tokenId The ERC-721 token id of the canceled auction\\n    /// @param auction The metadata of the canceled auction\\n    event AuctionCanceled(address indexed tokenContract, uint256 indexed tokenId, Auction auction);\\n\\n    /// @notice Emitted when a bid is placed\\n    /// @param tokenContract The ERC-721 token address of the auction\\n    /// @param tokenId The ERC-721 token id of the auction\\n    /// @param firstBid If the bid started the auction\\n    /// @param extended If the bid extended the auction\\n    /// @param auction The metadata of the auction\\n    event AuctionBid(address indexed tokenContract, uint256 indexed tokenId, bool firstBid, bool extended, Auction auction);\\n\\n    /// @notice Emitted when an auction has ended\\n    /// @param tokenContract The ERC-721 token address of the auction\\n    /// @param tokenId The ERC-721 token id of the auction\\n    /// @param auction The metadata of the settled auction\\n    event AuctionEnded(address indexed tokenContract, uint256 indexed tokenId, Auction auction);\\n\\n    /// @param _erc20TransferHelper The ZORA ERC-20 Transfer Helper address\\n    /// @param _erc721TransferHelper The ZORA ERC-721 Transfer Helper address\\n    /// @param _royaltyEngine The Manifold Royalty Engine address\\n    /// @param _protocolFeeSettings The ZORA Protocol Fee Settings address\\n    /// @param _weth The WETH token address\\n    constructor(\\n        address _erc20TransferHelper,\\n        address _erc721TransferHelper,\\n        address _royaltyEngine,\\n        address _protocolFeeSettings,\\n        address _weth,\\n        address _floorPrice\\n    )\\n        IncomingTransferSupportV1(_erc20TransferHelper)\\n        FeePayoutSupportV1(_royaltyEngine, _protocolFeeSettings, _weth, ERC721TransferHelper(_erc721TransferHelper).ZMM().registrar())\\n        ModuleNamingSupportV1(\\\"Reserve Auction Core ERC-20\\\")\\n    {\\n        erc721TransferHelper = ERC721TransferHelper(_erc721TransferHelper);\\n        floorPrice = FloorPrice(_floorPrice);\\n    }\\n\\n    /// @notice Implements EIP-165 for standard interface detection\\n    /// @dev `0x01ffc9a7` is the IERC165 interface id\\n    /// @param _interfaceId The identifier of a given interface\\n    /// @return If the given interface is supported\\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\\n        return _interfaceId == type(IReserveAuctionBuyNowErc20).interfaceId || _interfaceId == 0x01ffc9a7;\\n    }\\n\\n    //     ,-.\\n    //     `-'\\n    //     /|\\\\\\n    //      |             ,-----------------------.\\n    //     / \\\\            |ReserveAuctionCoreErc20|\\n    //   Caller           `-----------+-----------'\\n    //     |     createAuction()      |\\n    //     | ------------------------>|\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | store auction metadata\\n    //     |                          <---'\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | emit AuctionCreated()\\n    //     |                          <---'\\n    //   Caller           ,-----------+-----------.\\n    //     ,-.            |ReserveAuctionCoreErc20|\\n    //     `-'            `-----------------------'\\n    //     /|\\\\\\n    //      |\\n    //     / \\\\\\n    /// @notice Creates an auction for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    /// @param _duration The length of time the auction should run after the first bid\\n    /// @param _reservePrice The minimum bid amount to start the auction\\n    /// @param _sellerFundsRecipient The address to send funds to once the auction is complete\\n    /// @param _startTime The time that users can begin placing bids\\n    /// @param _bidCurrency The address of the ERC-20 token, or address(0) for ETH, that users must bid with\\n    function createAuction(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _duration,\\n        uint256 _reservePrice,\\n        uint256 _buyNowPrice,\\n        address _sellerFundsRecipient,\\n        uint256 _startTime,\\n        address _bidCurrency\\n    ) external nonReentrant {\\n        // Get the owner of the specified token\\n        address tokenOwner = IERC721(_tokenContract).ownerOf(_tokenId);\\n\\n        // Ensure the caller is the owner or an approved operator\\n        require(\\n            msg.sender == tokenOwner || IERC721(_tokenContract).getApproved(_tokenId) == msg.sender,\\n            \\\"ONLY_TOKEN_OWNER_OR_OPERATOR\\\"\\n        );\\n\\n        // Ensure the reserve price can be downcasted to 96 bits for this module\\n        // For a higher reserve price, use the supporting module\\n        require(_reservePrice <= type(uint96).max, \\\"INVALID_RESERVE_PRICE\\\");\\n\\n        // Ensure the funds recipient is specified\\n        require(_sellerFundsRecipient != address(0), \\\"INVALID_FUNDS_RECIPIENT\\\");\\n\\n        // Ensure the buy now price is higher than reserve price\\n        require(_buyNowPrice == 0 || _buyNowPrice > _reservePrice, \\\"BUY_NOW_TOO_LOW\\\");\\n\\n        require(floorPrice.priceAboveFloor(_tokenContract, _bidCurrency, _reservePrice), \\\"PRICE_TOO_LOW\\\");\\n\\n        // Store the auction metadata\\n        auctionForNFT[_tokenContract][_tokenId].seller = tokenOwner;\\n        auctionForNFT[_tokenContract][_tokenId].reservePrice = uint96(_reservePrice);\\n        auctionForNFT[_tokenContract][_tokenId].buyNowPrice = uint96(_buyNowPrice);\\n        auctionForNFT[_tokenContract][_tokenId].sellerFundsRecipient = _sellerFundsRecipient;\\n        auctionForNFT[_tokenContract][_tokenId].duration = uint48(_duration);\\n        auctionForNFT[_tokenContract][_tokenId].startTime = uint48(_startTime);\\n        auctionForNFT[_tokenContract][_tokenId].currency = _bidCurrency;\\n\\n        emit AuctionCreated(_tokenContract, _tokenId, auctionForNFT[_tokenContract][_tokenId]);\\n    }\\n\\n    //     ,-.\\n    //     `-'\\n    //     /|\\\\\\n    //      |             ,-----------------------.\\n    //     / \\\\            |ReserveAuctionCoreErc20|\\n    //   Caller           `-----------+-----------'\\n    //     | setAuctionReservePrice() |\\n    //     | ------------------------>|\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | update reserve price\\n    //     |                          <---'\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | emit AuctionReservePriceUpdated()\\n    //     |                          <---'\\n    //   Caller           ,-----------+-----------.\\n    //     ,-.            |ReserveAuctionCoreErc20|\\n    //     `-'            `-----------------------'\\n    //     /|\\\\\\n    //      |\\n    //     / \\\\\\n    /// @notice Updates the reserve price for a given auction\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    /// @param _reservePrice The new reserve price\\n    function setAuctionReservePrice(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _reservePrice\\n    ) external nonReentrant {\\n        // Get the auction for the specified token\\n        Auction storage auction = auctionForNFT[_tokenContract][_tokenId];\\n\\n        // Ensure the auction has not started\\n        require(auction.firstBidTime == 0, \\\"AUCTION_STARTED\\\");\\n\\n        // Ensure the caller is the seller\\n        require(msg.sender == auction.seller, \\\"ONLY_SELLER\\\");\\n\\n        // Ensure the reserve price can be downcasted to 96 bits\\n        require(_reservePrice <= type(uint96).max, \\\"INVALID_RESERVE_PRICE\\\");\\n\\n        require(floorPrice.priceAboveFloor(_tokenContract, auction.currency, _reservePrice), \\\"PRICE_TOO_LOW\\\");\\n\\n        // Update the reserve price\\n        auction.reservePrice = uint96(_reservePrice);\\n\\n        emit AuctionReservePriceUpdated(_tokenContract, _tokenId, auction);\\n    }\\n\\n    /// @notice Updates the auction reserve price for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    /// @param _buyNowPrice The new reserve price\\n    function setAuctionBuyNowPrice(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _buyNowPrice\\n    ) external nonReentrant {\\n        // Get the auction for the specified token\\n        Auction storage auction = auctionForNFT[_tokenContract][_tokenId];\\n\\n        // Ensure the auction has not started\\n        require(auction.firstBidTime == 0, \\\"AUCTION_STARTED\\\");\\n\\n        // Ensure the caller is the seller\\n        require(msg.sender == auction.seller, \\\"ONLY_SELLER\\\");\\n\\n        require(_buyNowPrice > auction.reservePrice, \\\"BUY_PRICE_TOO_LOW\\\");\\n\\n        // Update the reserve price\\n        auction.buyNowPrice = uint96(_buyNowPrice);\\n\\n        emit AuctionBuyNowPriceUpdated(_tokenContract, _tokenId, auction);\\n    }\\n\\n    //     ,-.\\n    //     `-'\\n    //     /|\\\\\\n    //      |             ,-----------------------.\\n    //     / \\\\            |ReserveAuctionCoreErc20|\\n    //   Caller           `-----------+-----------'\\n    //     |     cancelAuction()      |\\n    //     | ------------------------>|\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | emit AuctionCanceled()\\n    //     |                          <---'\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | delete auction\\n    //     |                          <---'\\n    //   Caller           ,-----------+-----------.\\n    //     ,-.            |ReserveAuctionCoreErc20|\\n    //     `-'            `-----------------------'\\n    //     /|\\\\\\n    //      |\\n    //     / \\\\\\n    /// @notice Cancels the auction for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    function cancelAuction(address _tokenContract, uint256 _tokenId) external nonReentrant {\\n        // Get the auction for the specified token\\n        Auction memory auction = auctionForNFT[_tokenContract][_tokenId];\\n\\n        // Ensure the auction has not started\\n        require(auction.firstBidTime == 0, \\\"AUCTION_STARTED\\\");\\n\\n        // Ensure the caller is the seller or a new owner of the token\\n        require(msg.sender == auction.seller || msg.sender == IERC721(_tokenContract).ownerOf(_tokenId), \\\"ONLY_SELLER_OR_TOKEN_OWNER\\\");\\n\\n        emit AuctionCanceled(_tokenContract, _tokenId, auction);\\n\\n        // Remove the auction from storage\\n        delete auctionForNFT[_tokenContract][_tokenId];\\n    }\\n\\n    //     ,-.\\n    //     `-'\\n    //     /|\\\\\\n    //      |             ,-----------------------.          ,--------------------.                  ,-------------------.\\n    //     / \\\\            |ReserveAuctionCoreErc20|          |ERC721TransferHelper|                  |ERC20TransferHelper|\\n    //   Caller           `-----------+-----------'          `---------+----------'                  `---------+---------'\\n    //     |       createBid()        |                                |                                       |\\n    //     | ------------------------>|                                |                                       |\\n    //     |                          |                                |                                       |\\n    //     |                          |                                |                                       |\\n    //     |    ___________________________________________________________________________________________________________________________________\\n    //     |    ! ALT  /  First bid?  |                                |                                       |                                   !\\n    //     |    !_____/               |                                |                                       |                                   !\\n    //     |    !                     ----.                            |                                       |                                   !\\n    //     |    !                         | start auction              |                                       |                                   !\\n    //     |    !                     <---'                            |                                       |                                   !\\n    //     |    !                     |                                |                                       |                                   !\\n    //     |    !                     |        transferFrom()          |                                       |                                   !\\n    //     |    !                     |------------------------------->|                                       |                                   !\\n    //     |    !                     |                                |                                       |                                   !\\n    //     |    !                     |                                |----.                                                                      !\\n    //     |    !                     |                                |    | transfer NFT from seller to escrow                                   !\\n    //     |    !                     |                                |<---'                                                                      !\\n    //     |    !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //     |    ! [refund previous bidder]                             |                                       |                                   !\\n    //     |    !                     |                        handle outgoing refund                          |                                   !\\n    //     |    !                     |----------------------------------------------------------------------->|                                   !\\n    //     |    !                     |                                |                                       |                                   !\\n    //     |    !                     |                                |                                       |----.                              !\\n    //     |    !                     |                                |                                       |    | transfer tokens to bidder    !\\n    //     |    !                     |                                |                                       |<---'                              !\\n    //     |    !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //     |                          |                                |                                       |\\n    //     |                          |                          handle incoming bid                           |\\n    //     |                          |----------------------------------------------------------------------->|\\n    //     |                          |                                |                                       |\\n    //     |                          |                                |                                       |----.\\n    //     |                          |                                |                                       |    | transfer tokens to escrow\\n    //     |                          |                                |                                       |<---'\\n    //     |                          |                                |                                       |\\n    //     |                          |                                |                                       |\\n    //     |    ______________________________________________         |                                       |\\n    //     |    ! ALT  /  Bid placed within 15 min of end?    !        |                                       |\\n    //     |    !_____/               |                       !        |                                       |\\n    //     |    !                     ----.                   !        |                                       |\\n    //     |    !                         | extend auction    !        |                                       |\\n    //     |    !                     <---'                   !        |                                       |\\n    //     |    !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!        |                                       |\\n    //     |    !~[noop]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!        |                                       |\\n    //     |                          |                                |                                       |\\n    //     |                          ----.                            |                                       |\\n    //     |                              | emit AuctionBid()          |                                       |\\n    //     |                          <---'                            |                                       |\\n    //   Caller           ,-----------+-----------.          ,---------+----------.                  ,---------+---------.\\n    //     ,-.            |ReserveAuctionCoreErc20|          |ERC721TransferHelper|                  |ERC20TransferHelper|\\n    //     `-'            `-----------------------'          `--------------------'                  `-------------------'\\n    //     /|\\\\\\n    //      |\\n    //     / \\\\\\n    /// @notice Places a bid on the auction for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    /// @param _amount The amount to bid\\n    function createBid(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) public payable nonReentrant {\\n        // Get the auction for the specified token\\n        Auction storage auction = auctionForNFT[_tokenContract][_tokenId];\\n\\n        // Cache the seller\\n        address seller = auction.seller;\\n\\n        // Ensure the auction exists\\n        require(seller != address(0), \\\"AUCTION_DOES_NOT_EXIST\\\");\\n\\n        // Ensure the auction has started or is valid to start\\n        require(block.timestamp >= auction.startTime, \\\"AUCTION_NOT_STARTED\\\");\\n\\n        // Ensure the bid can be downcasted to 96 bits for this module\\n        // For a higher bid, use the supporting module\\n        require(_amount <= type(uint96).max, \\\"INVALID_BID\\\");\\n\\n        // Cache more auction metadata\\n        uint256 firstBidTime = auction.firstBidTime;\\n        uint256 duration = auction.duration;\\n        address currency = auction.currency;\\n\\n        // Used to emit whether the bid started the auction\\n        bool firstBid;\\n\\n        // If this is the first bid, start the auction\\n        if (firstBidTime == 0) {\\n            // Ensure the bid meets the reserve price\\n            require(_amount >= auction.reservePrice, \\\"RESERVE_PRICE_NOT_MET\\\");\\n\\n            // Store the current time as the first bid time\\n            auction.firstBidTime = uint96(block.timestamp);\\n\\n            // Mark this bid as the first\\n            firstBid = true;\\n\\n            // Transfer the NFT from the seller into escrow for the duration of the auction\\n            // Reverts if the seller did not approve the ERC721TransferHelper or no longer owns the token\\n            erc721TransferHelper.transferFrom(_tokenContract, seller, address(this), _tokenId);\\n\\n            // Else this is a subsequent bid, so refund the previous bidder\\n        } else {\\n            // Ensure the auction has not ended\\n            require(block.timestamp < firstBidTime + duration, \\\"AUCTION_OVER\\\");\\n\\n            // Cache the highest bid\\n            uint256 highestBid = auction.highestBid;\\n\\n            // Used to store the minimum bid required to outbid the highest bidder\\n            uint256 minValidBid;\\n\\n            // Calculate the minimum bid required (10% higher than the highest bid)\\n            // Cannot overflow as `minValidBid` cannot be greater than 104 bits\\n            unchecked {\\n                minValidBid = highestBid + ((highestBid * minBidIncrementPercentage) / 100);\\n            }\\n\\n            // Ensure the result can be downcasted to 96 bits\\n            require(minValidBid <= type(uint96).max, \\\"MAX_BID_PLACED\\\");\\n\\n            // Ensure the incoming bid meets the minimum\\n            require(_amount >= minValidBid, \\\"MINIMUM_BID_NOT_MET\\\");\\n\\n            // Refund the previous bidder\\n            _handleOutgoingTransfer(auction.highestBidder, highestBid, currency, 50000);\\n        }\\n\\n        // Retrieve the bid from the bidder\\n        // If ETH, this reverts if the bidder did not attach enough\\n        // If ERC-20, this reverts if the bidder did not approve the ERC20TransferHelper or does not own the specified amount\\n        _handleIncomingTransfer(_amount, currency);\\n\\n        // Store the amount as the highest bid\\n        auction.highestBid = uint96(_amount);\\n\\n        // Store the caller as the highest bidder\\n        auction.highestBidder = msg.sender;\\n\\n        // Used to emit whether the bid extended the auction\\n        bool extended;\\n\\n        // Used to store the auction time remaining\\n        uint256 timeRemaining;\\n\\n        // Get the auction time remaining\\n        // Cannot underflow as `firstBidTime + duration` is ensured to be greater than `block.timestamp`\\n        unchecked {\\n            timeRemaining = firstBidTime + duration - block.timestamp;\\n        }\\n\\n        // If the bid is placed within 15 minutes of the auction end, extend the auction\\n        if (timeRemaining < timeBuffer) {\\n            // Add (15 minutes - remaining time) to the duration so that 15 minutes remain\\n            // Cannot underflow as `timeRemaining` is ensured to be less than `timeBuffer`\\n            unchecked {\\n                auction.duration += uint48(timeBuffer - timeRemaining);\\n            }\\n\\n            // Mark the bid as one that extended the auction\\n            extended = true;\\n        }\\n\\n        emit AuctionBid(_tokenContract, _tokenId, firstBid, extended, auction);\\n    }\\n\\n    //     ,-.\\n    //     `-'\\n    //     /|\\\\\\n    //      |             ,-----------------------.\\n    //     / \\\\            |ReserveAuctionCoreErc20|\\n    //   Caller           `-----------+-----------'\\n    //     |     settleAuction()      |\\n    //     | ------------------------>|\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | validate auction ended\\n    //     |                          <---'\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | handle royalty payouts\\n    //     |                          <---'\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | handle seller funds recipient payout\\n    //     |                          <---'\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | transfer NFT from escrow to winning bidder\\n    //     |                          <---'\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | emit AuctionEnded()\\n    //     |                          <---'\\n    //     |                          |\\n    //     |                          ----.\\n    //     |                              | delete auction from contract\\n    //     |                          <---'\\n    //   Caller           ,-----------+-----------.\\n    //     ,-.            |ReserveAuctionCoreErc20|\\n    //     `-'            `-----------------------'\\n    //     /|\\\\\\n    //      |\\n    //     / \\\\\\n    /// @notice Ends the auction for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    function settleAuction(address _tokenContract, uint256 _tokenId) public nonReentrant {\\n        // Get the auction for the specified token\\n        Auction memory auction = auctionForNFT[_tokenContract][_tokenId];\\n\\n        // Cache the time of the first bid\\n        uint256 firstBidTime = auction.firstBidTime;\\n\\n        // Ensure the auction had started\\n        require(firstBidTime != 0, \\\"AUCTION_NOT_STARTED\\\");\\n\\n        // Ensure the auction has ended\\n        require(block.timestamp >= (firstBidTime + auction.duration), \\\"AUCTION_NOT_OVER\\\");\\n\\n        // Cache the auction currency\\n        address currency = auction.currency;\\n\\n        // Payout associated token royalties, if any\\n        (uint256 remainingProfit, ) = _handleRoyaltyPayout(_tokenContract, _tokenId, auction.highestBid, currency, 300000);\\n\\n        // Payout the module fee, if configured by the owner\\n        remainingProfit = _handleProtocolFeePayout(remainingProfit, currency);\\n\\n        // Transfer the remaining profit to the funds recipient\\n        _handleOutgoingTransfer(auction.sellerFundsRecipient, remainingProfit, currency, 50000);\\n\\n        // Transfer the NFT to the winning bidder\\n        IERC721(_tokenContract).transferFrom(address(this), auction.highestBidder, _tokenId);\\n\\n        emit AuctionEnded(_tokenContract, _tokenId, auction);\\n\\n        // Remove the auction from storage\\n        delete auctionForNFT[_tokenContract][_tokenId];\\n    }\\n\\n    function buyNowAuction(address _tokenContract, uint256 _tokenId, uint256 _amount) payable external {\\n        // Get the auction for the specified token\\n        Auction storage auction = auctionForNFT[_tokenContract][_tokenId];\\n\\n        // Cache the seller\\n        address seller = auction.seller;\\n\\n        // Ensure the auction exists\\n        require(seller != address(0), \\\"AUCTION_DOES_NOT_EXIST\\\");\\n\\n        // Ensure the auction has started or is valid to start\\n        require(block.timestamp >= auction.startTime, \\\"AUCTION_NOT_STARTED\\\");\\n\\n        require(auction.buyNowPrice > 0, \\\"BUY_NOW_NOT_ACTIVE\\\");\\n\\n        require(_amount == auction.buyNowPrice, \\\"BUY_NOW_PRICE_NOT_MET\\\");\\n\\n        uint8 resetMinBid = minBidIncrementPercentage;\\n        minBidIncrementPercentage = 0;\\n\\n        createBid(_tokenContract, _tokenId, _amount);\\n\\n        minBidIncrementPercentage = resetMinBid;\\n        auction.duration = 0;\\n\\n        settleAuction(_tokenContract, _tokenId);\\n    }\\n\\n    function setMinBidIncrementPercentage(uint8 newIncrement) external {\\n        require(msg.sender == erc721TransferHelper.ZMM().registrar(), \\\"NOT_ALLOWED\\\");\\n\\n        minBidIncrementPercentage = newIncrement;\\n    }\\n\\n    function setTimeBuffer(uint16 newBuffer) external {\\n        require(msg.sender == erc721TransferHelper.ZMM().registrar(), \\\"NOT_ALLOWED\\\");\\n\\n        timeBuffer = newBuffer;\\n    }\\n}\\n\"\r\n    },\r\n    \"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/common/IncomingTransferSupport/V1/IncomingTransferSupportV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20TransferHelper} from \\\"../../../transferHelpers/ERC20TransferHelper.sol\\\";\\n\\n/// @title IncomingTransferSupportV1\\n/// @author tbtstl <t@zora.co>\\n/// @notice This contract extension supports receiving funds from an external user\\ncontract IncomingTransferSupportV1 {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The ZORA ERC-20 Transfer Helper\\n    ERC20TransferHelper public immutable erc20TransferHelper;\\n\\n    constructor(address _erc20TransferHelper) {\\n        erc20TransferHelper = ERC20TransferHelper(_erc20TransferHelper);\\n    }\\n\\n    /// @notice Handle an incoming funds transfer, ensuring the sent amount is valid and the sender is solvent\\n    /// @param _amount The amount to be received\\n    /// @param _currency The currency to receive funds in, or address(0) for ETH\\n    function _handleIncomingTransfer(uint256 _amount, address _currency) internal {\\n        if (_currency == address(0)) {\\n            require(msg.value >= _amount, \\\"_handleIncomingTransfer msg value less than expected amount\\\");\\n        } else {\\n            // We must check the balance that was actually transferred to this contract,\\n            // as some tokens impose a transfer fee and would not actually transfer the\\n            // full amount to the market, resulting in potentally locked funds\\n            IERC20 token = IERC20(_currency);\\n            uint256 beforeBalance = token.balanceOf(address(this));\\n            erc20TransferHelper.safeTransferFrom(_currency, msg.sender, address(this), _amount);\\n            uint256 afterBalance = token.balanceOf(address(this));\\n            require(beforeBalance + _amount == afterBalance, \\\"_handleIncomingTransfer token transfer call did not transfer expected amount\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/transferHelpers/ERC721TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {BaseTransferHelper} from \\\"./BaseTransferHelper.sol\\\";\\n\\n/// @title ERC-721 Transfer Helper\\n/// @author tbtstl <t@zora.co>\\n/// @notice This contract provides modules the ability to transfer ZORA user ERC-721s with their permission\\ncontract ERC721TransferHelper is BaseTransferHelper {\\n    constructor(address _approvalsManager) BaseTransferHelper(_approvalsManager) {}\\n\\n    function safeTransferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public onlyApprovedModule(_from) {\\n        IERC721(_token).safeTransferFrom(_from, _to, _tokenId);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) public onlyApprovedModule(_from) {\\n        IERC721(_token).transferFrom(_from, _to, _tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/common/FeePayoutSupport/FeePayoutSupportV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IRoyaltyEngineV1} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {ZoraProtocolFeeSettings} from \\\"../../auxiliary/ZoraProtocolFeeSettings/ZoraProtocolFeeSettings.sol\\\";\\nimport {OutgoingTransferSupportV1} from \\\"../OutgoingTransferSupport/V1/OutgoingTransferSupportV1.sol\\\";\\n\\n/// @title FeePayoutSupportV1\\n/// @author tbtstl <t@zora.co>\\n/// @notice This contract extension supports paying out protocol fees and royalties\\ncontract FeePayoutSupportV1 is OutgoingTransferSupportV1 {\\n    /// @notice The ZORA Module Registrar\\n    address public immutable registrar;\\n\\n    /// @notice The ZORA Protocol Fee Settings\\n    ZoraProtocolFeeSettings immutable protocolFeeSettings;\\n\\n    /// @notice The Manifold Royalty Engine\\n    IRoyaltyEngineV1 royaltyEngine;\\n\\n    /// @notice Emitted when royalties are paid\\n    /// @param tokenContract The ERC-721 token address of the royalty payout\\n    /// @param tokenId The ERC-721 token ID of the royalty payout\\n    /// @param recipient The recipient address of the royalty\\n    /// @param amount The amount paid to the recipient\\n    event RoyaltyPayout(address indexed tokenContract, uint256 indexed tokenId, address recipient, uint256 amount);\\n\\n    /// @param _royaltyEngine The Manifold Royalty Engine V1 address\\n    /// @param _protocolFeeSettings The ZoraProtocolFeeSettingsV1 address\\n    /// @param _wethAddress WETH address\\n    /// @param _registrarAddress The Registrar address, who can update the royalty engine address\\n    constructor(\\n        address _royaltyEngine,\\n        address _protocolFeeSettings,\\n        address _wethAddress,\\n        address _registrarAddress\\n    ) OutgoingTransferSupportV1(_wethAddress) {\\n        royaltyEngine = IRoyaltyEngineV1(_royaltyEngine);\\n        protocolFeeSettings = ZoraProtocolFeeSettings(_protocolFeeSettings);\\n        registrar = _registrarAddress;\\n    }\\n\\n    /// @notice Update the address of the Royalty Engine, in case of unexpected update on Manifold's Proxy\\n    /// @dev emergency use only \u2013 requires a frozen RoyaltyEngineV1 at commit 4ae77a73a8a73a79d628352d206fadae7f8e0f74\\n    ///  to be deployed elsewhere, or a contract matching that ABI\\n    /// @param _royaltyEngine The address for the new royalty engine\\n    function setRoyaltyEngineAddress(address _royaltyEngine) public {\\n        require(msg.sender == registrar, \\\"setRoyaltyEngineAddress only registrar\\\");\\n        require(\\n            ERC165Checker.supportsInterface(_royaltyEngine, type(IRoyaltyEngineV1).interfaceId),\\n            \\\"setRoyaltyEngineAddress must match IRoyaltyEngineV1 interface\\\"\\n        );\\n        royaltyEngine = IRoyaltyEngineV1(_royaltyEngine);\\n    }\\n\\n    /// @notice Pays out the protocol fee to its fee recipient\\n    /// @param _amount The sale amount\\n    /// @param _payoutCurrency The currency to pay the fee\\n    /// @return The remaining funds after paying the protocol fee\\n    function _handleProtocolFeePayout(uint256 _amount, address _payoutCurrency) internal returns (uint256) {\\n        // Get fee for this module\\n        uint256 protocolFee = protocolFeeSettings.getFeeAmount(address(this), _amount);\\n\\n        // If no fee, return initial amount\\n        if (protocolFee == 0) return _amount;\\n\\n        // Get fee recipient\\n        (, address feeRecipient) = protocolFeeSettings.moduleFeeSetting(address(this));\\n\\n        // Payout protocol fee\\n        _handleOutgoingTransfer(feeRecipient, protocolFee, _payoutCurrency, 50000);\\n\\n        // Return remaining amount\\n        return _amount - protocolFee;\\n    }\\n\\n    /// @notice Pays out royalties for given NFTs\\n    /// @param _tokenContract The NFT contract address to get royalty information from\\n    /// @param _tokenId, The Token ID to get royalty information from\\n    /// @param _amount The total sale amount\\n    /// @param _payoutCurrency The ERC-20 token address to payout royalties in, or address(0) for ETH\\n    /// @param _gasLimit The gas limit to use when attempting to payout royalties. Uses gasleft() if not provided.\\n    /// @return The remaining funds after paying out royalties\\n    function _handleRoyaltyPayout(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _payoutCurrency,\\n        uint256 _gasLimit\\n    ) internal returns (uint256, bool) {\\n        // If no gas limit was provided or provided gas limit greater than gas left, just pass the remaining gas.\\n        uint256 gas = (_gasLimit == 0 || _gasLimit > gasleft()) ? gasleft() : _gasLimit;\\n\\n        // External call ensuring contract doesn't run out of gas paying royalties\\n        try this._handleRoyaltyEnginePayout{gas: gas}(_tokenContract, _tokenId, _amount, _payoutCurrency) returns (uint256 remainingFunds) {\\n            // Return remaining amount if royalties payout succeeded\\n            return (remainingFunds, true);\\n        } catch {\\n            // Return initial amount if royalties payout failed\\n            return (_amount, false);\\n        }\\n    }\\n\\n    /// @notice Pays out royalties for NFTs based on the information returned by the royalty engine\\n    /// @dev This method is external to enable setting a gas limit when called - see `_handleRoyaltyPayout`.\\n    /// @param _tokenContract The NFT Contract to get royalty information from\\n    /// @param _tokenId, The Token ID to get royalty information from\\n    /// @param _amount The total sale amount\\n    /// @param _payoutCurrency The ERC-20 token address to payout royalties in, or address(0) for ETH\\n    /// @return The remaining funds after paying out royalties\\n    function _handleRoyaltyEnginePayout(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _payoutCurrency\\n    ) external payable returns (uint256) {\\n        // Ensure the caller is the contract\\n        require(msg.sender == address(this), \\\"_handleRoyaltyEnginePayout only self callable\\\");\\n\\n        // Get the royalty recipients and their associated amounts\\n        (address payable[] memory recipients, uint256[] memory amounts) = royaltyEngine.getRoyalty(_tokenContract, _tokenId, _amount);\\n\\n        // Store the number of recipients\\n        uint256 numRecipients = recipients.length;\\n\\n        // If there are no royalties, return the initial amount\\n        if (numRecipients == 0) return _amount;\\n\\n        // Store the initial amount\\n        uint256 amountRemaining = _amount;\\n\\n        // Store the variables that cache each recipient and amount\\n        address recipient;\\n        uint256 amount;\\n\\n        // Payout each royalty\\n        for (uint256 i = 0; i < numRecipients; ) {\\n            // Cache the recipient and amount\\n            recipient = recipients[i];\\n            amount = amounts[i];\\n\\n            // Ensure that we aren't somehow paying out more than we have\\n            require(amountRemaining >= amount, \\\"insolvent\\\");\\n\\n            // Transfer to the recipient\\n            _handleOutgoingTransfer(recipient, amount, _payoutCurrency, 50000);\\n\\n            emit RoyaltyPayout(_tokenContract, _tokenId, recipient, amount);\\n\\n            // Cannot underflow as remaining amount is ensured to be greater than or equal to royalty amount\\n            unchecked {\\n                amountRemaining -= amount;\\n                ++i;\\n            }\\n        }\\n\\n        return amountRemaining;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/common/ModuleNamingSupport/ModuleNamingSupportV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\n/// @title Module Naming Support V1\\n/// @author kulkarohan <rohan@zora.co>\\n/// @notice This contract extension supports naming modules\\ncontract ModuleNamingSupportV1 {\\n    /// @notice The module name\\n    string public name;\\n\\n    /// @notice Sets the name of a module\\n    /// @param _name The module name to set\\n    constructor(string memory _name) {\\n        name = _name;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/ReserveAuctionBuyNow/ERC721/IReserveAuctionBuyNowErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\n/// @title IReserveAuctionBuyNowErc20\\n/// @author vpavlin\\n/// @notice Interface for Reserve Auction with Buy Now feature ERC-20\\ninterface IReserveAuctionBuyNowErc20 {\\n    /// @notice Creates an auction for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    /// @param _duration The length of time the auction should run after the first bid\\n    /// @param _reservePrice The minimum bid amount to start the auction\\n    /// @param _buyNowPrice The price which, when paid, immediately settles the auction\\n    /// @param _sellerFundsRecipient The address to send funds to once the auction is complete\\n    /// @param _startTime The time that users can begin placing bids\\n    /// @param _bidCurrency The address of the ERC-20 token, or address(0) for ETH, that users must bid with\\n    function createAuction(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _duration,\\n        uint256 _reservePrice,\\n        uint256 _buyNowPrice,\\n        address _sellerFundsRecipient,\\n        uint256 _startTime,\\n        address _bidCurrency\\n    ) external;\\n\\n    /// @notice Updates the auction reserve price for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    /// @param _buyNowPrice The new reserve price\\n    function setAuctionBuyNowPrice(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _buyNowPrice\\n    ) external;\\n\\n        /// @notice Updates the auction reserve price for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    /// @param _reservePrice The new reserve price\\n    function setAuctionReservePrice(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _reservePrice\\n    ) external;\\n\\n    /// @notice Cancels the auction for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    function cancelAuction(address _tokenContract, uint256 _tokenId) external;\\n\\n    /// @notice Places a bid on the auction for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    /// @param _amount The amount to bid\\n    function createBid(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external payable;\\n\\n    /// @notice Ends the auction for a given NFT\\n    /// @param _tokenContract The address of the ERC-721 token\\n    /// @param _tokenId The id of the ERC-721 token\\n    function settleAuction(address _tokenContract, uint256 _tokenId) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/common/FloorPrice/FloorPrice.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {ZoraModuleManager} from \\\"../../contracts/ZoraModuleManager.sol\\\";\\n\\ncontract FloorPrice {\\n\\n    mapping(address => mapping(address => uint256)) public floorPrices;\\n    ZoraModuleManager public zmm;\\n\\n    constructor(ZoraModuleManager _zmm) {\\n        zmm = _zmm;\\n    }\\n\\n    function setFloorPrice(address tokenContract, address currency, uint256 floorPrice) external {\\n        require(msg.sender == zmm.registrar(), \\\"NOT_REGISTRAR\\\");\\n\\n        floorPrices[tokenContract][currency] = floorPrice;\\n    }\\n\\n    function priceAboveFloor(address tokenContract, address currency, uint256 price) external view returns(bool) {\\n        return price >= floorPrices[tokenContract][currency];\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/transferHelpers/ERC20TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {BaseTransferHelper} from \\\"./BaseTransferHelper.sol\\\";\\n\\n/// @title ERC-20 Transfer Helper\\n/// @author tbtstl <t@zora.co>\\n/// @notice This contract provides modules the ability to transfer ZORA user ERC-20s with their permission\\ncontract ERC20TransferHelper is BaseTransferHelper {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address _approvalsManager) BaseTransferHelper(_approvalsManager) {}\\n\\n    function safeTransferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public onlyApprovedModule(_from) {\\n        IERC20(_token).safeTransferFrom(_from, _to, _value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/transferHelpers/BaseTransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {ZoraModuleManager} from \\\"../ZoraModuleManager.sol\\\";\\n\\n/// @title Base Transfer Helper\\n/// @author tbtstl <t@zora.co>\\n/// @notice This contract provides shared utility for ZORA transfer helpers\\ncontract BaseTransferHelper {\\n    /// @notice The ZORA Module Manager\\n    ZoraModuleManager public immutable ZMM;\\n\\n    /// @param _moduleManager The ZORA Module Manager referred to for transfer permissions\\n    constructor(address _moduleManager) {\\n        require(_moduleManager != address(0), \\\"must set module manager to non-zero address\\\");\\n\\n        ZMM = ZoraModuleManager(_moduleManager);\\n    }\\n\\n    /// @notice Ensures a user has approved the module they're calling\\n    /// @param _user The address of the user\\n    modifier onlyApprovedModule(address _user) {\\n        require(isModuleApproved(_user), \\\"module has not been approved by user\\\");\\n        _;\\n    }\\n\\n    /// @notice If a user has approved the module they're calling\\n    /// @param _user The address of the user\\n    function isModuleApproved(address _user) public view returns (bool) {\\n        return ZMM.isModuleApproved(_user, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/ZoraModuleManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {ZoraProtocolFeeSettings} from \\\"./auxiliary/ZoraProtocolFeeSettings/ZoraProtocolFeeSettings.sol\\\";\\n\\n/// @title ZoraModuleManager\\n/// @author tbtstl <t@zora.co>\\n/// @notice This contract allows users to approve registered modules on ZORA V3\\ncontract ZoraModuleManager {\\n    /// @notice The EIP-712 type for a signed approval\\n    /// @dev keccak256(\\\"SignedApproval(address module,address user,bool approved,uint256 deadline,uint256 nonce)\\\")\\n    bytes32 private constant SIGNED_APPROVAL_TYPEHASH = 0x8413132cc7aa5bd2ce1a1b142a3f09e2baeda86addf4f9a5dacd4679f56e7cec;\\n\\n    /// @notice The EIP-712 domain separator\\n    bytes32 private immutable EIP_712_DOMAIN_SEPARATOR =\\n        keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(\\\"ZORA\\\")),\\n                keccak256(bytes(\\\"3\\\")),\\n                _chainID(),\\n                address(this)\\n            )\\n        );\\n\\n    /// @notice The module fee NFT contract to mint from upon module registration\\n    ZoraProtocolFeeSettings public immutable moduleFeeToken;\\n\\n    /// @notice The registrar address that can register modules\\n    address public registrar;\\n\\n    /// @notice Mapping of users and modules to approved status\\n    /// @dev User address => Module address => Approved\\n    mapping(address => mapping(address => bool)) public userApprovals;\\n\\n    /// @notice Mapping of modules to registered status\\n    /// @dev Module address => Registered\\n    mapping(address => bool) public moduleRegistered;\\n\\n    /// @notice The signature nonces for 3rd party module approvals\\n    mapping(address => uint256) public sigNonces;\\n\\n    /// @notice Ensures only the registrar can register modules\\n    modifier onlyRegistrar() {\\n        require(msg.sender == registrar, \\\"ZMM::onlyRegistrar must be registrar\\\");\\n        _;\\n    }\\n\\n    /// @notice Emitted when a user's module approval is updated\\n    /// @param user The address of the user\\n    /// @param module The address of the module\\n    /// @param approved Whether the user added or removed approval\\n    event ModuleApprovalSet(address indexed user, address indexed module, bool approved);\\n\\n    /// @notice Emitted when a module is registered\\n    /// @param module The address of the module\\n    event ModuleRegistered(address indexed module);\\n\\n    /// @notice Emitted when the registrar address is updated\\n    /// @param newRegistrar The address of the new registrar\\n    event RegistrarChanged(address indexed newRegistrar);\\n\\n    /// @param _registrar The initial registrar for the manager\\n    /// @param _feeToken The module fee token contract to mint from upon module registration\\n    constructor(address _registrar, address _feeToken) {\\n        require(_registrar != address(0), \\\"ZMM::must set registrar to non-zero address\\\");\\n\\n        registrar = _registrar;\\n        moduleFeeToken = ZoraProtocolFeeSettings(_feeToken);\\n    }\\n\\n    /// @notice Returns true if the user has approved a given module, false otherwise\\n    /// @param _user The user to check approvals for\\n    /// @param _module The module to check approvals for\\n    /// @return True if the module has been approved by the user, false otherwise\\n    function isModuleApproved(address _user, address _module) external view returns (bool) {\\n        return userApprovals[_user][_module];\\n    }\\n\\n    //        ,-.\\n    //        `-'\\n    //        /|\\\\\\n    //         |             ,-----------------.\\n    //        / \\\\            |ZoraModuleManager|\\n    //      Caller           `--------+--------'\\n    //        | setApprovalForModule()|\\n    //        | ---------------------->\\n    //        |                       |\\n    //        |                       |----.\\n    //        |                       |    | set approval for module\\n    //        |                       |<---'\\n    //        |                       |\\n    //        |                       |----.\\n    //        |                       |    | emit ModuleApprovalSet()\\n    //        |                       |<---'\\n    //      Caller           ,--------+--------.\\n    //        ,-.            |ZoraModuleManager|\\n    //        `-'            `-----------------'\\n    //        /|\\\\\\n    //         |\\n    //        / \\\\\\n    /// @notice Allows a user to set the approval for a given module\\n    /// @param _module The module to approve\\n    /// @param _approved A boolean, whether or not to approve a module\\n    function setApprovalForModule(address _module, bool _approved) public {\\n        _setApprovalForModule(_module, msg.sender, _approved);\\n    }\\n\\n    //        ,-.\\n    //        `-'\\n    //        /|\\\\\\n    //         |                  ,-----------------.\\n    //        / \\\\                 |ZoraModuleManager|\\n    //      Caller                `--------+--------'\\n    //        | setBatchApprovalForModule()|\\n    //        | --------------------------->\\n    //        |                            |\\n    //        |                            |\\n    //        |         _____________________________________________________\\n    //        |         ! LOOP  /  for each module                           !\\n    //        |         !______/           |                                 !\\n    //        |         !                  |----.                            !\\n    //        |         !                  |    | set approval for module    !\\n    //        |         !                  |<---'                            !\\n    //        |         !                  |                                 !\\n    //        |         !                  |----.                            !\\n    //        |         !                  |    | emit ModuleApprovalSet()   !\\n    //        |         !                  |<---'                            !\\n    //        |         !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!\\n    //      Caller                ,--------+--------.\\n    //        ,-.                 |ZoraModuleManager|\\n    //        `-'                 `-----------------'\\n    //        /|\\\\\\n    //         |\\n    //        / \\\\\\n    /// @notice Sets approvals for multiple modules at once\\n    /// @param _modules The list of module addresses to set approvals for\\n    /// @param _approved A boolean, whether or not to approve the modules\\n    function setBatchApprovalForModules(address[] memory _modules, bool _approved) public {\\n        // Store the number of module addresses provided\\n        uint256 numModules = _modules.length;\\n\\n        // Loop through each address\\n        for (uint256 i = 0; i < numModules; ) {\\n            // Ensure that it's a registered module and set the approval\\n            _setApprovalForModule(_modules[i], msg.sender, _approved);\\n\\n            // Cannot overflow as array length cannot exceed uint256 max\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    //        ,-.\\n    //        `-'\\n    //        /|\\\\\\n    //         |                  ,-----------------.\\n    //        / \\\\                 |ZoraModuleManager|\\n    //      Caller                `--------+--------'\\n    //        | setApprovalForModuleBySig()|\\n    //        | --------------------------->\\n    //        |                            |\\n    //        |                            |----.\\n    //        |                            |    | recover user address from signature\\n    //        |                            |<---'\\n    //        |                            |\\n    //        |                            |----.\\n    //        |                            |    | set approval for module\\n    //        |                            |<---'\\n    //        |                            |\\n    //        |                            |----.\\n    //        |                            |    | emit ModuleApprovalSet()\\n    //        |                            |<---'\\n    //      Caller                ,--------+--------.\\n    //        ,-.                 |ZoraModuleManager|\\n    //        `-'                 `-----------------'\\n    //        /|\\\\\\n    //         |\\n    //        / \\\\\\n    /// @notice Sets approval for a module given an EIP-712 signature\\n    /// @param _module The module to approve\\n    /// @param _user The user to approve the module for\\n    /// @param _approved A boolean, whether or not to approve a module\\n    /// @param _deadline The deadline at which point the given signature expires\\n    /// @param _v The 129th byte and chain ID of the signature\\n    /// @param _r The first 64 bytes of the signature\\n    /// @param _s Bytes 64-128 of the signature\\n    function setApprovalForModuleBySig(\\n        address _module,\\n        address _user,\\n        bool _approved,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public {\\n        require(_deadline == 0 || _deadline >= block.timestamp, \\\"ZMM::setApprovalForModuleBySig deadline expired\\\");\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                EIP_712_DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(SIGNED_APPROVAL_TYPEHASH, _module, _user, _approved, _deadline, sigNonces[_user]++))\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, _v, _r, _s);\\n\\n        require(recoveredAddress != address(0) && recoveredAddress == _user, \\\"ZMM::setApprovalForModuleBySig invalid signature\\\");\\n\\n        _setApprovalForModule(_module, _user, _approved);\\n    }\\n\\n    //         ,-.\\n    //         `-'\\n    //         /|\\\\\\n    //          |               ,-----------------.          ,-----------------------.\\n    //         / \\\\              |ZoraModuleManager|          |ZoraProtocolFeeSettings|\\n    //      Registrar           `--------+--------'          `-----------+-----------'\\n    //          |   registerModule()     |                               |\\n    //          |----------------------->|                               |\\n    //          |                        |                               |\\n    //          |                        ----.                           |\\n    //          |                            | register module           |\\n    //          |                        <---'                           |\\n    //          |                        |                               |\\n    //          |                        |            mint()             |\\n    //          |                        |------------------------------>|\\n    //          |                        |                               |\\n    //          |                        |                               ----.\\n    //          |                        |                                   | mint token to registrar\\n    //          |                        |                               <---'\\n    //          |                        |                               |\\n    //          |                        ----.                           |\\n    //          |                            | emit ModuleRegistered()   |\\n    //          |                        <---'                           |\\n    //      Registrar           ,--------+--------.          ,-----------+-----------.\\n    //         ,-.              |ZoraModuleManager|          |ZoraProtocolFeeSettings|\\n    //         `-'              `-----------------'          `-----------------------'\\n    //         /|\\\\\\n    //          |\\n    //         / \\\\\\n    /// @notice Registers a module\\n    /// @param _module The address of the module\\n    function registerModule(address _module) public onlyRegistrar {\\n        require(!moduleRegistered[_module], \\\"ZMM::registerModule module already registered\\\");\\n\\n        moduleRegistered[_module] = true;\\n        moduleFeeToken.mint(registrar, _module);\\n\\n        emit ModuleRegistered(_module);\\n    }\\n\\n    //         ,-.\\n    //         `-'\\n    //         /|\\\\\\n    //          |               ,-----------------.\\n    //         / \\\\              |ZoraModuleManager|\\n    //      Registrar           `--------+--------'\\n    //          |    setRegistrar()      |\\n    //          |----------------------->|\\n    //          |                        |\\n    //          |                        ----.\\n    //          |                            | set registrar\\n    //          |                        <---'\\n    //          |                        |\\n    //          |                        ----.\\n    //          |                            | emit RegistrarChanged()\\n    //          |                        <---'\\n    //      Registrar           ,--------+--------.\\n    //         ,-.              |ZoraModuleManager|\\n    //         `-'              `-----------------'\\n    //         /|\\\\\\n    //          |\\n    //         / \\\\\\n    /// @notice Sets the registrar for the ZORA Module Manager\\n    /// @param _registrar the address of the new registrar\\n    function setRegistrar(address _registrar) public onlyRegistrar {\\n        require(_registrar != address(0), \\\"ZMM::setRegistrar must set registrar to non-zero address\\\");\\n        registrar = _registrar;\\n\\n        emit RegistrarChanged(_registrar);\\n    }\\n\\n    /// @notice Updates a module approval for a user\\n    /// @param _module The address of the module\\n    /// @param _user The address of the user\\n    /// @param _approved Whether the user is adding or removing approval\\n    function _setApprovalForModule(\\n        address _module,\\n        address _user,\\n        bool _approved\\n    ) private {\\n        require(moduleRegistered[_module], \\\"ZMM::must be registered module\\\");\\n\\n        userApprovals[_user][_module] = _approved;\\n\\n        emit ModuleApprovalSet(msg.sender, _module, _approved);\\n    }\\n\\n    /// @notice The EIP-155 chain id\\n    function _chainID() private view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/auxiliary/ZoraProtocolFeeSettings/ZoraProtocolFeeSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ninterface IERC721TokenURI {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n/// @title ZoraProtocolFeeSettings\\n/// @author tbtstl <t@zora.co>\\n/// @notice This contract allows an optional fee percentage and recipient to be set for individual ZORA modules\\ncontract ZoraProtocolFeeSettings is ERC721 {\\n    /// @notice The address of the contract metadata\\n    address public metadata;\\n    /// @notice The address of the contract owner\\n    address public owner;\\n    /// @notice The address of the ZORA Module Manager\\n    address public minter;\\n\\n    /// @notice The metadata of a module fee setting\\n    /// @param feeBps The basis points fee\\n    /// @param feeRecipient The recipient of the fee\\n    struct FeeSetting {\\n        uint16 feeBps;\\n        address feeRecipient;\\n    }\\n\\n    /// @notice Mapping of modules to fee settings\\n    /// @dev Module address => FeeSetting\\n    mapping(address => FeeSetting) public moduleFeeSetting;\\n\\n    /// @notice Ensures only the owner of a module fee NFT can set its fee\\n    /// @param _module The address of the module\\n    modifier onlyModuleOwner(address _module) {\\n        uint256 tokenId = moduleToTokenId(_module);\\n        require(ownerOf(tokenId) == msg.sender, \\\"onlyModuleOwner\\\");\\n        _;\\n    }\\n\\n    /// @notice Emitted when the fee for a module is updated\\n    /// @param module The address of the module\\n    /// @param feeRecipient The address of the fee recipient\\n    /// @param feeBps The basis points of the fee\\n    event ProtocolFeeUpdated(address indexed module, address feeRecipient, uint16 feeBps);\\n\\n    /// @notice Emitted when the contract metadata is updated\\n    /// @param newMetadata The address of the new metadata\\n    event MetadataUpdated(address indexed newMetadata);\\n\\n    /// @notice Emitted when the contract owner is updated\\n    /// @param newOwner The address of the new owner\\n    event OwnerUpdated(address indexed newOwner);\\n\\n    constructor() ERC721(\\\"ZORA Module Fee Switch\\\", \\\"ZORF\\\") {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /// @notice Initialize the Protocol Fee Settings\\n    /// @param _minter The address that can mint new NFTs (expected ZoraModuleManager address)\\n    function init(address _minter, address _metadata) external {\\n        require(msg.sender == owner, \\\"init only owner\\\");\\n        require(minter == address(0), \\\"init already initialized\\\");\\n\\n        minter = _minter;\\n        metadata = _metadata;\\n    }\\n\\n    //        ,-.\\n    //        `-'\\n    //        /|\\\\\\n    //         |             ,-----------------------.\\n    //        / \\\\            |ZoraProtocolFeeSettings|\\n    //      Minter           `-----------+-----------'\\n    //        |          mint()          |\\n    //        | ------------------------>|\\n    //        |                          |\\n    //        |                          ----.\\n    //        |                              | derive token ID from module address\\n    //        |                          <---'\\n    //        |                          |\\n    //        |                          ----.\\n    //        |                              | mint token to given address\\n    //        |                          <---'\\n    //        |                          |\\n    //        |     return token ID      |\\n    //        | <------------------------|\\n    //      Minter           ,-----------+-----------.\\n    //        ,-.            |ZoraProtocolFeeSettings|\\n    //        `-'            `-----------------------'\\n    //        /|\\\\\\n    //         |\\n    //        / \\\\\\n    /// @notice Mint a new protocol fee setting for a module\\n    /// @param _to The address to send the protocol fee setting token to\\n    /// @param _module The module for which the minted token will represent\\n    function mint(address _to, address _module) external returns (uint256) {\\n        require(msg.sender == minter, \\\"mint onlyMinter\\\");\\n        uint256 tokenId = moduleToTokenId(_module);\\n        _mint(_to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    //          ,-.\\n    //          `-'\\n    //          /|\\\\\\n    //           |                ,-----------------------.\\n    //          / \\\\               |ZoraProtocolFeeSettings|\\n    //      ModuleOwner           `-----------+-----------'\\n    //           |      setFeeParams()        |\\n    //           |--------------------------->|\\n    //           |                            |\\n    //           |                            ----.\\n    //           |                                | set fee parameters\\n    //           |                            <---'\\n    //           |                            |\\n    //           |                            ----.\\n    //           |                                | emit ProtocolFeeUpdated()\\n    //           |                            <---'\\n    //      ModuleOwner           ,-----------+-----------.\\n    //          ,-.               |ZoraProtocolFeeSettings|\\n    //          `-'               `-----------------------'\\n    //          /|\\\\\\n    //           |\\n    //          / \\\\\\n    /// @notice Sets fee parameters for a module fee NFT\\n    /// @param _module The module to apply the fee settings to\\n    /// @param _feeRecipient The fee recipient address to send fees to\\n    /// @param _feeBps The bps of transaction value to send to the fee recipient\\n    function setFeeParams(\\n        address _module,\\n        address _feeRecipient,\\n        uint16 _feeBps\\n    ) external onlyModuleOwner(_module) {\\n        require(_feeBps <= 10000, \\\"setFeeParams must set fee <= 100%\\\");\\n        require(_feeRecipient != address(0) || _feeBps == 0, \\\"setFeeParams fee recipient cannot be 0 address if fee is greater than 0\\\");\\n\\n        moduleFeeSetting[_module] = FeeSetting(_feeBps, _feeRecipient);\\n\\n        emit ProtocolFeeUpdated(_module, _feeRecipient, _feeBps);\\n    }\\n\\n    //       ,-.\\n    //       `-'\\n    //       /|\\\\\\n    //        |             ,-----------------------.\\n    //       / \\\\            |ZoraProtocolFeeSettings|\\n    //      Owner           `-----------+-----------'\\n    //        |       setOwner()        |\\n    //        |------------------------>|\\n    //        |                         |\\n    //        |                         ----.\\n    //        |                             | set owner\\n    //        |                         <---'\\n    //        |                         |\\n    //        |                         ----.\\n    //        |                             | emit OwnerUpdated()\\n    //        |                         <---'\\n    //      Owner           ,-----------+-----------.\\n    //       ,-.            |ZoraProtocolFeeSettings|\\n    //       `-'            `-----------------------'\\n    //       /|\\\\\\n    //        |\\n    //       / \\\\\\n    /// @notice Sets the owner of the contract\\n    /// @param _owner The address of the owner\\n    function setOwner(address _owner) external {\\n        require(msg.sender == owner, \\\"setOwner onlyOwner\\\");\\n        _setOwner(_owner);\\n    }\\n\\n    //       ,-.\\n    //       `-'\\n    //       /|\\\\\\n    //        |             ,-----------------------.\\n    //       / \\\\            |ZoraProtocolFeeSettings|\\n    //      Owner           `-----------+-----------'\\n    //        |     setMetadata()       |\\n    //        |------------------------>|\\n    //        |                         |\\n    //        |                         ----.\\n    //        |                             | set metadata\\n    //        |                         <---'\\n    //        |                         |\\n    //        |                         ----.\\n    //        |                             | emit MetadataUpdated()\\n    //        |                         <---'\\n    //      Owner           ,-----------+-----------.\\n    //       ,-.            |ZoraProtocolFeeSettings|\\n    //       `-'            `-----------------------'\\n    //       /|\\\\\\n    //        |\\n    //       / \\\\\\n    /// @notice Sets the metadata of the contract\\n    /// @param _metadata The address of the metadata\\n    function setMetadata(address _metadata) external {\\n        require(msg.sender == owner, \\\"setMetadata onlyOwner\\\");\\n        _setMetadata(_metadata);\\n    }\\n\\n    /// @notice Computes the fee for a given uint256 amount\\n    /// @param _module The module to compute the fee for\\n    /// @param _amount The amount to compute the fee for\\n    /// @return The amount to be paid out to the fee recipient\\n    function getFeeAmount(address _module, uint256 _amount) external view returns (uint256) {\\n        return (_amount * moduleFeeSetting[_module].feeBps) / 10000;\\n    }\\n\\n    /// @notice Returns the module address for a given token ID\\n    /// @param _tokenId The token ID\\n    /// @return The module address\\n    function tokenIdToModule(uint256 _tokenId) public pure returns (address) {\\n        return address(uint160(_tokenId));\\n    }\\n\\n    /// @notice Returns the token ID for a given module\\n    /// @dev We don't worry about losing the top 20 bytes when going from uint256 -> uint160 since we know token ID must have derived from an address\\n    /// @param _module The module address\\n    /// @return The token ID\\n    function moduleToTokenId(address _module) public pure returns (uint256) {\\n        return uint256(uint160(_module));\\n    }\\n\\n    /// @notice Returns the token URI for a given token ID\\n    /// @param _tokenId The token ID\\n    /// @return The token URI\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n        require(_exists(_tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        require(metadata != address(0), \\\"ERC721Metadata: no metadata address\\\");\\n\\n        return IERC721TokenURI(metadata).tokenURI(_tokenId);\\n    }\\n\\n    /// @notice Sets the contract metadata in `setMetadata`\\n    /// @param _metadata The address of the metadata\\n    function _setMetadata(address _metadata) private {\\n        metadata = _metadata;\\n\\n        emit MetadataUpdated(_metadata);\\n    }\\n\\n    /// @notice Sets the contract owner in `setOwner`\\n    /// @param _owner The address of the owner\\n    function _setOwner(address _owner) private {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(_owner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@manifoldxyz/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     * \\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(address tokenAddress, uint256 tokenId, uint256 value) external returns(address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     * \\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(address tokenAddress, uint256 tokenId, uint256 value) external view returns(address payable[] memory recipients, uint256[] memory amounts);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/common/OutgoingTransferSupport/V1/OutgoingTransferSupportV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IWETH} from \\\"./IWETH.sol\\\";\\n\\n/// @title OutgoingTransferSupportV1\\n/// @author tbtstl <t@zora.co>\\n/// @notice This contract extension supports paying out funds to an external recipient\\ncontract OutgoingTransferSupportV1 {\\n    using SafeERC20 for IERC20;\\n\\n    IWETH immutable weth;\\n\\n    constructor(address _wethAddress) {\\n        weth = IWETH(_wethAddress);\\n    }\\n\\n    /// @notice Handle an outgoing funds transfer\\n    /// @dev Wraps ETH in WETH if the receiver cannot receive ETH, noop if the funds to be sent are 0 or recipient is invalid\\n    /// @param _dest The destination for the funds\\n    /// @param _amount The amount to be sent\\n    /// @param _currency The currency to send funds in, or address(0) for ETH\\n    /// @param _gasLimit The gas limit to use when attempting a payment (if 0, gasleft() is used)\\n    function _handleOutgoingTransfer(\\n        address _dest,\\n        uint256 _amount,\\n        address _currency,\\n        uint256 _gasLimit\\n    ) internal {\\n        if (_amount == 0 || _dest == address(0)) {\\n            return;\\n        }\\n\\n        // Handle ETH payment\\n        if (_currency == address(0)) {\\n            require(address(this).balance >= _amount, \\\"_handleOutgoingTransfer insolvent\\\");\\n\\n            // If no gas limit was provided or provided gas limit greater than gas left, just use the remaining gas.\\n            uint256 gas = (_gasLimit == 0 || _gasLimit > gasleft()) ? gasleft() : _gasLimit;\\n            (bool success, ) = _dest.call{value: _amount, gas: gas}(\\\"\\\");\\n            // If the ETH transfer fails (sigh), wrap the ETH and try send it as WETH.\\n            if (!success) {\\n                weth.deposit{value: _amount}();\\n                IERC20(address(weth)).safeTransfer(_dest, _amount);\\n            }\\n        } else {\\n            IERC20(_currency).safeTransfer(_dest, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/contracts/common/OutgoingTransferSupport/V1/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TransferHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc721TransferHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyEngine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_floorPrice\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"firstBid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"extended\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"reservePrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"buyNowPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sellerFundsRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"highestBid\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"duration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"firstBidTime\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ReserveAuctionBuyNowErc20.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"reservePrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"buyNowPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sellerFundsRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"highestBid\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"duration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"firstBidTime\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ReserveAuctionBuyNowErc20.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionBuyNowPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"reservePrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"buyNowPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sellerFundsRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"highestBid\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"duration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"firstBidTime\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ReserveAuctionBuyNowErc20.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"reservePrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"buyNowPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sellerFundsRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"highestBid\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"duration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"firstBidTime\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ReserveAuctionBuyNowErc20.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"reservePrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"buyNowPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sellerFundsRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"highestBid\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"duration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"firstBidTime\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ReserveAuctionBuyNowErc20.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"reservePrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"buyNowPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sellerFundsRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"highestBid\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"duration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"firstBidTime\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ReserveAuctionBuyNowErc20.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionReservePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payoutCurrency\",\"type\":\"address\"}],\"name\":\"_handleRoyaltyEnginePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionForNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"reservePrice\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"buyNowPrice\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"sellerFundsRecipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"highestBid\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"duration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"firstBidTime\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyNowAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sellerFundsRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bidCurrency\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TransferHelper\",\"outputs\":[{\"internalType\":\"contract ERC20TransferHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TransferHelper\",\"outputs\":[{\"internalType\":\"contract ERC721TransferHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorPrice\",\"outputs\":[{\"internalType\":\"contract FloorPrice\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"}],\"name\":\"setAuctionBuyNowPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\"}],\"name\":\"setAuctionReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newIncrement\",\"type\":\"uint8\"}],\"name\":\"setMinBidIncrementPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyEngine\",\"type\":\"address\"}],\"name\":\"setRoyaltyEngineAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newBuffer\",\"type\":\"uint16\"}],\"name\":\"setTimeBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "ReserveAuctionBuyNowErc20", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ccce8966ae71b5d4d9730166b5d9ecd74499458000000000000000000000000e2d79b1c96d3773eb68f03551861ee832ff5d8fd0000000000000000000000000a06b296e6929c05eeb962e2d84fe18cbe8972d5000000000000000000000000e20ac95b32f4ca61063d197e016d42150d04771e000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000807f914281fb5d891307f90421551d71fa6f0082", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}