{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-06-02\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract HAWKSTARToken is IBEP20 {\r\n\t\r\n\tuint256 private _totalSupply;\r\n    uint8 private _decimals = 18;\r\n    string private _symbol = \"BSC-USD\";\r\n    string private _name= \"Binance-Peg BSC-USD\";\r\n    address private _owner;\r\n\r\n    mapping(address => uint256) _balances;\r\n\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n   constructor(uint256 _initialSupply)  {\r\n\t_owner = msg.sender;\r\n    _totalSupply = _initialSupply;\r\n    _balances[msg.sender] = _totalSupply;\r\n    }\r\n    \r\n    function decimals() external view returns (uint8) {\r\n    return _decimals;\r\n    }\r\n    \r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n  \r\n    function name() external view returns (string memory) {\r\n    return _name;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n      return _totalSupply;\r\n    }\r\n  \r\n\t\r\n\tfunction getOwner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens) external returns (bool) {\r\n        require(numTokens <= _balances[msg.sender],\"No of tokens should be less that balance\");\r\n        _balances[msg.sender] = _balances[msg.sender].sub(numTokens);\r\n        _balances[receiver] = _balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens)external returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) external view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint256 numTokens) external returns (bool) {\r\n        require(numTokens <= _balances[owner]);\r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n\r\n        _balances[owner] = _balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        _balances[buyer] = _balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        return true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract HAWKSTARUSDT {\r\n    address payable admin;\r\n    HAWKSTARToken public tokenContract;\r\n    uint256 public tokensSold;\r\n\r\n    event Sell(address _buyer, uint256 _amount);\r\n    \r\n    event Temp(uint256 _tokens, uint256 _amount);\r\n    event Temp2(uint256 _tokens, uint256 _amount);\r\n\r\n\r\n    constructor(HAWKSTARToken _tokenContract, uint256 _tokensSold)  {\r\n        admin = payable(msg.sender);\r\n        tokenContract = _tokenContract;\r\n        tokensSold = _tokensSold;\r\n    }\r\n    \r\n    function multiply(uint x, uint y) internal pure returns (uint z) {\r\n        unchecked {\r\n            require(y == 0 || (z = x * y) / y == x);\r\n        }\r\n    }\r\n\r\n    function endSale() public payable {\r\n        require(msg.sender == admin);\r\n        require(tokenContract.transfer(admin, tokenContract.balanceOf(address(this))));\r\n\r\n        // UPDATE: Let's not destroy the contract here\r\n        // Just transfer the balance to the admin\r\n        admin.transfer(address(address(this)).balance);\r\n    }\r\n    \r\n\t//0x55d398326f99059fF775485246999027B3197955\r\n    \r\n    function buyadmin(address _toUser, uint256 _numberOfTokens) public {\r\n        require(msg.sender == admin, \"only Owner Wallet\");\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,\"Not enough tokens\");\r\n        require(tokenContract.transfer(_toUser, _numberOfTokens),\"Transfer failed\");\r\n\r\n        tokensSold += _numberOfTokens;\r\n\r\n        emit Sell(msg.sender, _numberOfTokens);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract HAWKSTARToken\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Temp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Temp2\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyadmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract HAWKSTARToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HAWKSTARUSDT", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://18632301d5ba7b83d74ff79f7ea6fc3e941794abe733a22436d8f8bfec35bc4f"}