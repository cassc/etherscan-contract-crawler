{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-03-22\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.6;\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WHT() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract SMT is IBEP20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // BSC-TestNet\r\n    //address private constant ROUTER = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n    //address private constant USDT = 0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684;\r\n\r\n    // BSC-MainNet\r\n    //address private constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    //address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    mapping (address => bool) private buyPowerMap;//is buying power\r\n    bool private buyPowerOnOff = false;\r\n    mapping (address => bool) private transferFromMap;//is from transferFrom\r\n    uint8 private transferFeeOnOff=1; //1 fee 2 nofee\r\n    mapping (address => bool) private whiteList;\r\n\r\n    uint8 public buyMarketingFee = 2;\r\n    uint8 public buyDeadFee = 8;\r\n\r\n    address public minerAddress = 0x983EAE5c49F47757C706eaac0BF13Ed9688F0533;//minerAddress to claim coins\r\n    uint256 public mineStartTime = block.timestamp;//mine starting timestamp(seconds\r\n    address public powerAddress = 0xc066Fa9F0Fa50E43A5eF48720E0fAA815d7bb803;//power Address to do withdraw jobs\r\n    \r\n    address public marketingWalletAddress = 0x2FaDFdaC5318c8EA700116066dDcD93550298477;//marketing wallet\r\n    address public deadWallet = 0x0000000000000000000000000000000000000001;\r\n\r\n    address public liquidityPoolAddress = 0x0000000000000000000000000000000000000001;//if transfer from this address ,meaning some one buying\r\n    uint8 private buyOnOff=2; //1can buy 2can not buy\r\n\r\n    address public contractUSDT = 0x55d398326f99059fF775485246999027B3197955;//test 0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684 main 0x55d398326f99059fF775485246999027B3197955\r\n    address public contractSME = 0x63698B03d381481d2693935a5059C26807BB3DDd;//tPDT 0xD7a9a43459F79E090951F4F43508F9A865e194ec  sme main 0x63698B03d381481d2693935a5059C26807BB3DDd \r\n    address public contractPancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;//test 0x9ac64cc6e4415144c455bd8e4837fea55603e5c3 main 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n\r\n\r\n    constructor(address ROUTER, address USDT, address SME){\r\n        _decimals = 18;\r\n        _symbol = \"SMT\";\r\n        _name = \"SMT\";\r\n        _totalSupply = 210000000000000000000000;\r\n\r\n        _creator = _msgSender();\r\n        contractPancakeRouter = ROUTER;\r\n        contractUSDT = USDT;\r\n        contractSME = SME;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(ROUTER);\r\n        liquidityPoolAddress = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(contractUSDT,address(this));\r\n        // uniSwapEthPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), IUniswapV2Router02.WETH());\r\n\r\n        whiteList[_creator] = true;\r\n        whiteList[minerAddress] = true;\r\n        whiteList[powerAddress] = true;\r\n        whiteList[marketingWalletAddress] = true;\r\n        whiteList[deadWallet] = true;\r\n\r\n        // emit Transfer(address(0), address(0xDc6B6009f3Bf466167D726791bb8F0063304da91), _totalSupply);\r\n        // _balances[address(0xDc6B6009f3Bf466167D726791bb8F0063304da91)] = _totalSupply;\r\n        emit Transfer(address(0), address(0xDc6B6009f3Bf466167D726791bb8F0063304da91), _totalSupply);\r\n        _balances[address(0xDc6B6009f3Bf466167D726791bb8F0063304da91)] = _totalSupply;\r\n    }\r\n\r\n\r\n\r\n    address private _creator;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    //\r\n    receive() external payable {}\r\n    modifier onlyPayloadSize(uint size) {\r\n        if (msg.data.length < size + 4) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    function release()external returns (uint256) {\r\n        require(minerAddress == msg.sender,\"SMT: miner only\");\r\n\r\n        uint256 minerAmount = ((block.timestamp.sub(mineStartTime)).div(86400).add(1)).mul(1890000000000000000000);\r\n\r\n        require(minerAmount > _totalSupply.sub(210000000000000000000000), \"SMT: no coins for release\");\r\n        \r\n        uint256 amount = minerAmount.sub(_totalSupply.sub(210000000000000000000000));\r\n\r\n        require(_totalSupply.add(amount) <= 2100000000000000000000000, \"SMT:  coins mint limit is 2,100,000\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[minerAddress] = _balances[minerAddress].add(amount);\r\n        emit Transfer(address(0), minerAddress, amount);\r\n        return amount;\r\n    } \r\n    function setWalletOperator(address add) external  returns (address){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        marketingWalletAddress = add;\r\n        return marketingWalletAddress;\r\n    }\r\n\r\n    function setWhiteList(address add) external  returns (bool){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        whiteList[add] = true;\r\n        return true;\r\n    }\r\n    function checkWhiteList(address add) external view returns (address){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        if(whiteList[add]){\r\n            return add;\r\n        }\r\n        return 0x0000000000000000000000000000000000000000;\r\n    }\r\n    \r\n    function setBuyMarketingFee(uint8 num) external  returns (uint8){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        buyMarketingFee = num;\r\n        return buyMarketingFee;\r\n    }\r\n\r\n    function setBuyDeadFee(uint8 num) external  returns (uint8){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        buyDeadFee = num;\r\n        return buyDeadFee;\r\n    }\r\n\r\n    function setMarketingWalletAddress(address add) external  returns (address){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        marketingWalletAddress = add;\r\n        return marketingWalletAddress;\r\n    }\r\n\r\n    function setDeadWallet(address add) external  returns (address){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        deadWallet = add;\r\n        return deadWallet;\r\n    }\r\n    function setLiquidityPoolAddress(address add) external  returns (address){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        liquidityPoolAddress = add;\r\n        return liquidityPoolAddress;\r\n    }\r\n    function setContractUSDT(address add) external  returns (address){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        contractUSDT = add;\r\n        return contractUSDT;\r\n    }\r\n    function setContractSME(address add) external  returns (address){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        contractSME = add;\r\n        return contractSME;\r\n    }\r\n    function setContractPancakeRouter(address add) external  returns (address){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        contractPancakeRouter = add;\r\n        return contractPancakeRouter;\r\n    }\r\n    function setTransferFeeOnOff(uint8 oneortwo) external  returns (uint8){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        transferFeeOnOff = oneortwo;\r\n        return transferFeeOnOff;\r\n    }\r\n    function setBuyOnOff(uint8 oneortwo) external  returns (uint8){\r\n        require(_creator == msg.sender,\"SMT: owner only\");\r\n        buyOnOff = oneortwo;\r\n        return buyOnOff;\r\n    }\r\n    function decimals() external override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external override view returns (address) {\r\n        return _creator;\r\n    }\r\n\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address _to, uint256 amount) external onlyPayloadSize(2 * 32) override returns (bool){\r\n        _transfer(_msgSender(), _to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external override view returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external onlyPayloadSize(2 * 32) override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public onlyPayloadSize(2 * 32) returns (bool){\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public onlyPayloadSize(2 * 32) returns (bool){\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function burn(uint256 amount) external returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    //mint, from 0x0\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    //burn, destroy to 0x1\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        require(account != address(1), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _balances[address(1)] = _balances[address(1)].add(amount);\r\n\r\n        //_totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(1), amount);\r\n    }\r\n    function _msgSender() internal view returns (address){\r\n        return msg.sender;\r\n    }\r\n    function transferFrom(address _owner, address _to, uint256 amount) external override returns (bool) {\r\n        _transferFrom( _owner,  _to,  amount);\r\n        return true;\r\n    }\r\n    function _transferFrom(address _owner, address _to, uint256 amount) internal returns (bool) {\r\n        transferFromMap[_owner] = true;\r\n        _transfer(_owner, _to, amount);\r\n        _approve(_owner, _msgSender(), _allowances[_owner][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address recipient, uint256 amount) internal {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(_balances[from] >= amount, \"BEP20: transfer amount exceeds balance\");\r\n\r\n\r\n\r\n        if(from == liquidityPoolAddress){\r\n            // 1can buy 2can not buy\r\n            if(buyOnOff == 2){\r\n                require(buyPowerOnOff || whiteList[from] || whiteList[recipient], \"SMT: can not by\");\r\n            }\r\n        }\r\n\r\n        //fee switch  when transferFeeOnOff is 2 no fee, whitelist also no fee\r\n        if(transferFeeOnOff == 2 || whiteList[from] || whiteList[recipient]){\r\n            \r\n        }else{\r\n            uint256 fees;\r\n            uint256 DFee;// dead fee\r\n            uint256 MFee;//marketing fee\r\n\r\n            //LP/swap \r\n            if(from == liquidityPoolAddress || recipient == liquidityPoolAddress){\r\n                MFee = amount.mul(buyMarketingFee).div(100);\r\n                DFee = amount.mul(buyDeadFee).div(100);\r\n                fees = MFee.add(DFee);\r\n\r\n                if(DFee > 0){\r\n                    emit Transfer(from, deadWallet, DFee);\r\n                    _balances[from] = _balances[from].sub(DFee, \"SMT: transfer amount exceeds balance\");\r\n                    _balances[deadWallet] = _balances[deadWallet].add(DFee);\r\n                } \r\n                if(MFee > 0){\r\n                    emit Transfer(from, marketingWalletAddress, MFee);\r\n                    _balances[from] = _balances[from].sub(MFee, \"SMT: transfer amount exceeds balance\");\r\n                    _balances[marketingWalletAddress] = _balances[marketingWalletAddress].add(MFee);\r\n                } \r\n\r\n                amount = amount.sub(fees);\r\n\r\n            }else{//normal transfer\r\n                DFee = amount.mul(2).div(100);\r\n                amount = amount.sub(DFee);\r\n                emit Transfer(from, deadWallet, DFee); \r\n                _balances[from] = _balances[from].sub(DFee, \"SMT: transfer amount exceeds balance\");\r\n                _balances[deadWallet] = _balances[deadWallet].add(DFee);\r\n            }\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount, \"SMT: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        transferFromMap[from] = false;\r\n        buyPowerMap[from] = false;\r\n        buyPowerOnOff = false;\r\n\r\n        emit Transfer(from, recipient, amount);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ROUTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"SME\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDeadFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"checkWhiteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractPancakeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSME\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractUSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mineStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"setBuyDeadFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"setBuyMarketingFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"oneortwo\",\"type\":\"uint8\"}],\"name\":\"setBuyOnOff\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setContractPancakeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setContractSME\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setContractUSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setDeadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setLiquidityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"oneortwo\",\"type\":\"uint8\"}],\"name\":\"setTransferFeeOnOff\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setWalletOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SMT", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000063698b03d381481d2693935a5059c26807bb3ddd", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6031d98d89298e09864c34b40774824e80fdc2b8d5fb3eedea26f181e3e00852"}