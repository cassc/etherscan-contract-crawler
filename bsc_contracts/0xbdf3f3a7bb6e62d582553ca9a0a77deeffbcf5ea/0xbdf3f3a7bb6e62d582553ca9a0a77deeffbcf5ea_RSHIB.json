{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.6; \r\n\r\ncontract Owned {\r\n    \r\n    /// Modifier for owner only function call\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n    address public owner;\r\n   \r\n    /// Function to transfer ownership \r\n    /// Only owner can call this function\r\n    function changeOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\n\r\ncontract ERC20 is Owned {\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n  \r\n    bool public change;\r\n    bool public antibotStaus;\r\n    uint public percent;\r\n    \r\n    uint public marketingPercent = 3;\r\n    uint public liquidityPoolPercent = 4;\r\n    uint public holderDistributorPercent = 2;\r\n    uint public antibotPercent = 1;\r\n    \r\n    address public marketingAddress;\r\n    address public liquidityPoolAddress;\r\n    address public holdersDistributorAddress;\r\n    address public antibotAddress;\r\n    \r\n    address[] public tokenHoldersArr;\r\n    \r\n   \r\n    mapping (address=>bool) public tokenHoldersMap;\r\n    mapping (address=>uint256) internal balances;\r\n    mapping (address=>mapping (address=>uint256)) internal allowed;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    /// Returns the token balance of the address which is passed in parameter\r\n    function balanceOf(address _owner) view public  returns (uint256 balance) {return balances[_owner];}\r\n    \r\n    /**\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address _to, uint256 _amount) public returns (bool) {\r\n        \r\n       require(_to != address(0), \"Transfer to zero address\");\r\n       require (balances[msg.sender]>=_amount && _amount>0 && balances[_to]+_amount>balances[_to], \"Insufficient amount or allowance error\");\r\n       \r\n       balances[msg.sender]-=_amount;\r\n       uint antibotAmt = 0;\r\n       uint marketingAmt = 0;\r\n       uint liquidityPoolAmt = 0;\r\n       uint holderDistributorAmt = 0;\r\n       \r\n       if(antibotStaus==true){\r\n            //antibot\r\n             antibotAmt = _amount * antibotPercent / 100;\r\n            balances[antibotAddress] += antibotAmt;\r\n            emit Transfer(msg.sender,antibotAddress,antibotAmt);\r\n        }\r\n        \r\n        if(change==true){\r\n             //marketingPercents\r\n            marketingAmt = _amount * marketingPercent / 100;\r\n            balances[marketingAddress] += marketingAmt;\r\n            emit Transfer(msg.sender,marketingAddress,marketingAmt);\r\n            \r\n             //liquidityPoolPercents\r\n             liquidityPoolAmt = _amount * liquidityPoolPercent / 100;\r\n            balances[liquidityPoolAddress] += liquidityPoolAmt;\r\n            emit Transfer(msg.sender,liquidityPoolAddress,liquidityPoolAmt);\r\n            \r\n             //holderDistributor\r\n             holderDistributorAmt = _amount * holderDistributorPercent / 100;\r\n            balances[holdersDistributorAddress] += holderDistributorAmt;\r\n            emit Transfer(msg.sender,holdersDistributorAddress,holderDistributorAmt);\r\n         }\r\n        \r\n        \r\n        // user Amount\r\n        uint remainingAmt = _amount - (marketingAmt+liquidityPoolAmt+holderDistributorAmt+antibotAmt);\r\n        balances[_to] += remainingAmt;\r\n        emit Transfer(msg.sender,_to,remainingAmt);\r\n            \r\n        \r\n        if(tokenHoldersMap[_to]==false){\r\n            tokenHoldersMap[_to]=true;\r\n            tokenHoldersArr.push(_to);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n  \r\n    /**\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool) {\r\n      \r\n        require(_from != address(0), \"Sender cannot be zero address\");\r\n        require(_to != address(0), \"Recipient cannot be zero address\");\r\n        require (balances[_from]>=_amount && allowed[_from][msg.sender]>=_amount && _amount>0 && balances[_to]+_amount>balances[_to], \"Insufficient amount or allowance error\");\r\n       \r\n        balances[_from]-=_amount;\r\n        allowed[_from][msg.sender]-=_amount;\r\n            \r\n       uint antibotAmt = 0;\r\n       uint marketingAmt = 0;\r\n       uint liquidityPoolAmt = 0;\r\n       uint holderDistributorAmt = 0;\r\n       \r\n       if(antibotStaus==true){\r\n            //antibot\r\n             antibotAmt = _amount * antibotPercent / 100;\r\n            balances[antibotAddress] += antibotAmt;\r\n            emit Transfer(_from,antibotAddress,antibotAmt);\r\n        }\r\n        \r\n        if(change==true){\r\n             //marketingPercents\r\n             marketingAmt = _amount * marketingPercent / 100;\r\n            balances[marketingAddress] += marketingAmt;\r\n            emit Transfer(_from,marketingAddress,marketingAmt);\r\n            \r\n             //liquidityPoolPercents\r\n             liquidityPoolAmt = _amount * liquidityPoolPercent / 100;\r\n            balances[liquidityPoolAddress] += liquidityPoolAmt;\r\n            emit Transfer(_from,liquidityPoolAddress,liquidityPoolAmt);\r\n            \r\n             //holderDistributor\r\n             holderDistributorAmt = _amount * holderDistributorPercent / 100;\r\n            balances[holdersDistributorAddress] += holderDistributorAmt;\r\n            emit Transfer(_from,holdersDistributorAddress,holderDistributorAmt);\r\n         }\r\n        \r\n        \r\n        // user Amount\r\n        uint remainingAmt = _amount - (marketingAmt+liquidityPoolAmt+holderDistributorAmt+antibotAmt);\r\n        balances[_to] += remainingAmt;\r\n        emit Transfer(_from,_to,remainingAmt);\r\n        \r\n        if(tokenHoldersMap[_to]==false){\r\n            tokenHoldersMap[_to]=true;\r\n            tokenHoldersArr.push(_to);\r\n        }\r\n        \r\n        \r\n        return true;\r\n    }\r\n  \r\n    /**\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(_spender != address(0), \"Approval for zero address\");\r\n        allowed[msg.sender][_spender]=_amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     *  Returns allowance for an address approved for contract\r\n     */\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal  virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        totalSupply += amount;\r\n        balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */ \r\n    function _burn(address account, uint256 amount) internal  virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        balances[account] = accountBalance - amount;\r\n        totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    // Set change status\r\n    function setChangeStatus(bool val) public onlyOwner {\r\n        require(change != val, \"Already in this state\");\r\n        require(marketingAddress != address(0) && liquidityPoolAddress != address(0) && holdersDistributorAddress != address(0), \"Change addresses cannot be zero\");\r\n        change = val;\r\n    }\r\n    \r\n     // Set change status\r\n    function setAntibotStatus(bool val) public onlyOwner {\r\n        require(antibotStaus != val, \"Already in this state\");\r\n        require(antibotAddress != address(0), \"Change addresses cannot be zero\");\r\n        antibotStaus = val;\r\n    }\r\n    \r\n    // Set percent amount\r\n    function setHolderDistributorPercent(uint _percent) public onlyOwner {\r\n        holderDistributorPercent = _percent;\r\n    }\r\n    \r\n    function setLiquidityPoolPercent(uint _percent) public onlyOwner {\r\n        liquidityPoolPercent = _percent;\r\n    }\r\n    \r\n    function setMarketingPercent(uint _percent) public onlyOwner {\r\n        marketingPercent = _percent;\r\n    }\r\n    \r\n    function setAntibotPercent(uint _percent) public onlyOwner {\r\n        antibotPercent = _percent;\r\n    }\r\n    \r\n    // Set addressToBeChanged\r\n    // Only owner can call this function\r\n    function setHoldersDistributorAddress(address addr) public onlyOwner {\r\n        holdersDistributorAddress = addr;\r\n    }\r\n    \r\n    function setLiquidityPoolAddress(address addr) public onlyOwner {\r\n        liquidityPoolAddress = addr;\r\n    }\r\n    \r\n    function setMarketingAddress(address addr) public onlyOwner {\r\n        marketingAddress = addr;\r\n    }\r\n    \r\n    function setAntibotAddress(address addr) public onlyOwner {\r\n        antibotAddress = addr;\r\n    }\r\n    \r\n    function tokenHolderList() public view returns(address[] memory userAddrList){\r\n        uint balanceLength = 0 ;\r\n        uint balanceLengthInner = 0 ;\r\n        for(uint i=0; i < tokenHoldersArr.length; i++){\r\n            if(balances[tokenHoldersArr[i]] > 0){\r\n               balanceLength ++;\r\n            }\r\n        }\r\n        \r\n        userAddrList = new address[](balanceLength);\r\n        for(uint i=0; i < tokenHoldersArr.length; i++){\r\n            if(balances[tokenHoldersArr[i]] > 0){\r\n                userAddrList[balanceLengthInner]=tokenHoldersArr[i];\r\n                balanceLengthInner++;\r\n            }\r\n        }\r\n    }\r\n    \r\n     function tokenHolderListIndex(uint index) public view returns(address[] memory userAddrList){\r\n        uint balanceLength = 0 ;\r\n        uint balanceLengthInner = 0 ;\r\n        for(uint i=0; i < tokenHoldersArr.length; i++){\r\n            if(balances[tokenHoldersArr[i]] > 0){\r\n               balanceLength ++;\r\n            }\r\n        }\r\n        \r\n        userAddrList = new address[](balanceLength);\r\n        for(uint i=0; i < tokenHoldersArr.length; i++){\r\n            if(balances[tokenHoldersArr[i]] > 0){\r\n                userAddrList[balanceLengthInner]=tokenHoldersArr[i];\r\n                balanceLengthInner++;\r\n            }\r\n        }\r\n    }\r\n    \r\n  \r\n    function tokenHolderSinglebalance(uint index) public view returns(uint balance ){\r\n         balance =  balances[tokenHoldersArr[index]];\r\n         \r\n    }\r\n    \r\n    function tokenHolderSingle(uint index) public view returns(address ){\r\n         address  userAddr =  tokenHoldersArr[index];\r\n         return userAddr;\r\n    }\r\n    \r\n    function tokenHolderAll() public view returns(address[] memory userAddrList){\r\n        userAddrList = tokenHoldersArr;\r\n    }\r\n    \r\n    \r\n    \r\n    function distributeTokenToHolders(uint amount) public onlyOwner returns(bool){\r\n        require(balances[msg.sender]>amount,\"Insufficient balance\");\r\n        require(tokenHolderList().length>0,\"No Token Holder Found\");\r\n        uint sendAmt = amount/tokenHolderList().length;\r\n        balances[msg.sender]-=amount;\r\n        for(uint i=0; i < tokenHolderList().length; i++){\r\n            \r\n             address sendTo = tokenHolderList()[i];\r\n            \r\n             balances[sendTo]+=sendAmt;\r\n             emit Transfer(msg.sender,sendTo,sendAmt);\r\n            \r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract RSHIB  is ERC20 {\r\n    \r\n    /**\r\n     * @dev Sets symbol, name, decimals and totalSupply of the token\r\n     * \r\n     * - Sets msg.sender as the owner of the contract\r\n     * - Transfers totalSupply to owner\r\n     */ \r\n    constructor()   {\r\n        symbol = \"RSHIB\";\r\n        name = \"Shiba Robinhood\";\r\n        decimals = 18;                                    \r\n        totalSupply = 1000000000000000000 * 10**18;\r\n        change = false;\r\n        \r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Calls mint function from ERC20 contract\r\n     * \r\n     * Requirements:\r\n     * \r\n     * - only owner can call this function\r\n     * - 'to' address cannot be zero address\r\n     */\r\n    function mint(address to, uint amount) external onlyOwner {\r\n        require(to != address(0), \"No mint to zero address\");\r\n        _mint(to, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Calls burn function from ERC20 contract\r\n     * \r\n     */\r\n    function burn(uint amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n    \r\n    \r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antibotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antibotPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antibotStaus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"change\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeTokenToHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderDistributorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersDistributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAntibotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setAntibotPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setAntibotStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setChangeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setHolderDistributorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setHoldersDistributorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLiquidityPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setLiquidityPoolPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setMarketingPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHolderAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddrList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHolderList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddrList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenHolderListIndex\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddrList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenHolderSingle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenHolderSinglebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHoldersArr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenHoldersMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RSHIB", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f8237cab4788e7ca02583ef0189302983b1744119a6e07f1349ec4229f355e1c"}