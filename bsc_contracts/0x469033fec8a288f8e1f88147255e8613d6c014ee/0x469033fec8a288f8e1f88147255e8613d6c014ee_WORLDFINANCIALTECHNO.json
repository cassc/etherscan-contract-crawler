{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-11-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-11-10\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at polygonscan.com on 2022-10-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at polygonscan.com on 2022-10-10\r\n*/\r\n\r\n/**\r\n *Submitted for verification at polygonscan.com on 2022-10-01\r\n*/\r\n\r\n/**\r\n *Submitted for verification at polygonscan.com on 2022-09-02\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-07-02\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-06-30\r\n*/\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 value) external returns (bool);\r\n  event Transfer(address indexed from,address indexed to,uint256 value);\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n  \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n   \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n   \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract WORLDFINANCIALTECHNOLOGY {\r\n    using SafeMath for uint256;\r\n    event Reinvestment(address indexed user,uint256 amountBuy);\r\n\r\n    IBEP20 private USDT; \r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(address ownerAddress,IBEP20 _USDT) {\r\n        owner = ownerAddress; \r\n        USDT = _USDT;    \r\n    }\r\n    \r\n    function upgrade(uint256 _amount) external {\r\n        require(_amount==45,\"invalid package\");\r\n    \tuint256 tot_amt = (_amount*1e18);   \r\n        require(USDT.balanceOf(msg.sender) >= tot_amt,\"Low USDT Balance\");\r\n        require(USDT.allowance(msg.sender,address(this)) >= tot_amt,\"Invalid allowance \");\r\n        USDT.transferFrom(msg.sender, owner, tot_amt);\r\n        emit Reinvestment(msg.sender,_amount);\r\n\t}\r\n    \r\n    function withdrawToken(IBEP20 _token ,uint256 _amount) external onlyOwner {\r\n        _token.transfer(owner,_amount);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external onlyOwner {\r\n        payable(owner).transfer(_amount);\r\n    }\r\n\t\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_USDT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBuy\",\"type\":\"uint256\"}],\"name\":\"Reinvestment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WORLDFINANCIALTECHNOLOGY", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000014159414002ab20c9ac1e6bbd37f30f7175c55e300000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://14fd389802eecff831116de02cd970e761fac54ba3bacf8f96ee0f9c84ba60b8"}