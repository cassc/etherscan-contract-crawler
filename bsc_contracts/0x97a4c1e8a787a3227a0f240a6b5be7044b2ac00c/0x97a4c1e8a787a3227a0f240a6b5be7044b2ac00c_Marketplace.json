{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/data/StructData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary StructData {\\n    // struct to store staked NFT information\\n    struct StakedNFT {\\n        uint256 startTime;\\n        uint256 unlockTime;\\n        uint256 totalValueStakeUsdWithDecimal;\\n        uint256 totalClaimedAmountUsdWithDecimal;\\n        uint256 totalRewardAmountUsdWithDecimal;\\n        address stakerAddress;\\n        uint16 apy;\\n        bool isUnstaked;\\n    }\\n\\n     struct Ranking {\\n        address userAddress;\\n        uint256 totalStake;\\n        uint256 totalTeamStake;\\n        uint8 rank;\\n        uint256 numberOfRank1;\\n        uint256 numberOfRank2;\\n        uint256 numberOfRank3;\\n        uint256 numberOfRank4;\\n        uint256 numberOfRank5;\\n        uint256 numberOfRank6;\\n        uint256 numberOfRank7;\\n    }\\n\\n    struct ChildListData {\\n        address[] childList;\\n        uint256 memberCounter;\\n    }\\n\\n    struct ListSwapData {\\n        StructData.InfoSwapData[] childList;\\n    }\\n\\n    struct InfoSwapData {\\n        uint256 timeSwap;\\n        uint256 valueSwap;\\n    }\\n\\n    struct InfoCommissionNetwork {\\n        address user;\\n        uint256 time;\\n        uint256 value;\\n    }\\n\\n    struct ListCommissionData {\\n        StructData.InfoCommissionNetwork[] childList;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/market/IMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface IMarketplace {\\n    event Buy(address seller, address buyer, uint256 nftId, address refAddress);\\n\\n    event PayCommission(address buyer, address refAccount, uint256 commissionAmount);\\n\\n    event ErrorLog(bytes message);\\n\\n    function buyByCurrency(uint256[] memory _nftIds, uint256 _refCode) external;\\n\\n    function buyByToken(uint256[] memory _nftIds, uint256 _refCode) external;\\n\\n    function buyByTokenAndCurrency(uint256[] memory _nftIds, uint256 _refCode) external;\\n\\n    function setSaleWalletAddress(address _saleAddress) external;\\n\\n    function setContractOwner(address _user) external;\\n\\n    function setTierPriceUsdPercent(uint8 _tier, uint256 _percent) external;\\n\\n    function setStakingContractAddress(address _stakingAddress) external;\\n\\n    function setCommissionPercent(uint8 _percent) external;\\n\\n    function setMaxNumberStakeValue(uint8 _percent) external;\\n\\n    function setDefaultMaxCommission(uint256 _value) external;\\n\\n    function setActiveSystemTrading(uint256 _activeTime) external;\\n\\n    function setSaleStrategyOnlyCurrencyStart(uint256 _newSaleStart) external;\\n\\n    function setSaleStrategyOnlyCurrencyEnd(uint256 _newSaleEnd) external;\\n\\n    function setSalePercent(uint256 _newSalePercent) external;\\n\\n    function setOracleAddress(address _oracleAddress) external;\\n\\n    function allowBuyNftByCurrency(bool _activePayByCurrency) external;\\n\\n    function allowBuyNftByCurrencyAndToken(bool _activePayByCurrencyAndToken) external;\\n\\n    function allowBuyNftByToken(bool _activePayByToken) external;\\n\\n    function setToken(address _address) external;\\n\\n    function setPayToken(bool _payInCurrency, bool _payInToken, bool _payInFlex) external;\\n\\n    function setTypePayCommission(uint256 _typePayCommission) external;\\n\\n    function getActiveMemberForAccount(address _wallet) external view returns (uint256);\\n\\n    function getTierUsdPercent(uint8 _tier)external view returns (uint256);\\n\\n    function getReferredNftValueForAccount(address _wallet) external view returns (uint256);\\n\\n    function getNftCommissionEarnedForAccount(address _wallet) external view returns (uint256);\\n\\n    function getNftSaleValueForAccountInUsdDecimal(address _wallet) external view returns (uint256);\\n\\n    function getTotalStakeByAddressInUsd(address _wallet) external view returns (uint256);\\n\\n    function getTotalCommissionStakeByAddressInUsd(address _wallet) external view returns (uint256);\\n\\n    function getMaxCommissionByAddressInUsd(address _wallet) external view returns (uint256);\\n\\n    function updateStakeValueData(address _user, uint256 _valueInUsdWithDecimal) external;\\n\\n    function updateCommissionStakeValueData(address _user, uint256 _valueInUsdWithDecimal) external;\\n\\n    function updateReferralData(address _user, uint256 _refCode) external;\\n\\n    function genReferralCodeForAccount() external returns (uint256);\\n\\n    function getReferralCodeForAccount(address _wallet) external view returns (uint256);\\n\\n    function getReferralAccountForAccount(address _user) external view returns (address);\\n\\n    function getReferralAccountForAccountExternal(address _user) external view returns (address);\\n\\n    function getAccountForReferralCode(uint256 _refCode) external view returns (address);\\n\\n    function getF1ListForAccount(address _wallet) external view returns (address[] memory);\\n\\n    function getTeamNftSaleValueForAccountInUsdDecimal(address _wallet) external view returns (uint256);\\n\\n    function possibleChangeReferralData(address _wallet) external view returns (bool);\\n\\n    function lockedReferralDataForAccount(address _user) external;\\n\\n    function currrentReferralCounter() external view returns (uint256);\\n\\n    function setSystemWallet(address _newSystemWallet) external;\\n\\n    function getCurrencyAddress() external view returns (address);\\n\\n    function isBuyByToken(uint256 _nftId) external view returns (bool);\\n\\n    function setCurrencyAddress(address _currency) external;\\n\\n    function withdrawTokenEmergency(address _token, uint256 _amount) external;\\n\\n    function withdrawTokenEmergencyFrom(address _from, address _to, address _currency, uint256 _amount) external;\\n\\n    function checkValidRefCodeAdvance(address _user, uint256 _refCode) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/market/Marketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"./IMarketplace.sol\\\";\\nimport \\\"../nft/TurboDexNFT.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../data/StructData.sol\\\";\\n\\ncontract Marketplace is IMarketplace, Ownable, ERC721Holder {\\n    uint256 private refCounter = 999;\\n    uint8 public commissionBuyPercent = 0;\\n    uint256 public maxValueCommission = 500;\\n    uint8 public numberMaxStakeValue = 6;\\n    address public nft;\\n    address public token;\\n    address public currency;\\n    address private oracleContract;\\n    address public systemWallet;\\n    address public saleWallet = 0x8A4cbc6562c1817B042b1a271e27379BE76A3cb9;\\n    bool private reentrancyGuardForBuying = false;\\n    address private contractOwner;\\n\\n    // for network stats\\n    mapping(address => uint256) totalActiveMembers;\\n    mapping(address => uint256) referredNftValue;\\n    mapping(address => uint256) nftCommissionEarned;\\n    mapping(address => uint256) nftSaleValue;\\n    // Mapping from token ID to token\\n    mapping(uint256 => bool) private tokenBuyTokens;\\n    mapping(address => StructData.ChildListData) userChildListData;\\n    mapping(address => StructData.ChildListData) userF1ListData;\\n\\n    mapping(uint256 => address) private referralCodeUser;\\n    mapping(address => uint256) private userReferralCode;\\n    mapping(address => address) private userRef;\\n    mapping(address => bool) private lockedReferralData;\\n\\n    uint256 private activeSystemTrading = 1680393600; //need to update\\n    uint256 private saleStrategyOnlyCurrencyStart = 1680393600; // 2023-04-02 00:00:00\\n    uint256 private saleStrategyOnlyCurrencyEnd = 1681343999; // 2023-04-12 23:59:59\\n    uint256 private salePercent = 150;\\n    bool private allowBuyByCurrency = true; //default allow\\n    bool private allowBuyByToken = false; //default disable\\n    bool private allowBuyFlex = true; //default disable\\n\\n    bool private payTokenBuyByCurrency = true;\\n    bool private payTokenBuyByToken= true;\\n    bool private payTokenBuyByFlex= true;\\n\\n    uint256 private typePayCom = 0; //0: usdt 1: token 2:flex\\n\\n    address public stakingContractAddress;\\n    mapping(address => uint256) totalStakeValue;\\n    mapping(address => uint256) totalCommissionStake;\\n    mapping(uint8 => uint256) percentUsdtPrice;\\n\\n    constructor(address _nft, address _token, address _oracle, address _systemWallet, address _currency) {\\n        nft = _nft;\\n        token = _token;\\n        oracleContract = _oracle;\\n        systemWallet = _systemWallet;\\n        currency = _currency;\\n        contractOwner = _msgSender();\\n        initDefaultReferral();\\n        initPayUsdPercents();\\n    }\\n\\n    modifier validRefCode(uint256 _refCode) {\\n        require(_refCode >= 999, \\\"MARKETPLACE: REF CODE MUST BE GREATER\\\");\\n        require(referralCodeUser[_refCode] != address(0), \\\"MARKETPLACE: INVALID REF CODE\\\");\\n        require(_refCode != userReferralCode[msg.sender], \\\"MARKETPLACE: CANNOT REF TO YOURSELF\\\");\\n        _;\\n    }\\n\\n    modifier isAcceptBuyByCurrency() {\\n        require(allowBuyByCurrency, \\\"MARKETPLACE: ONLY ACCEPT PAYMENT IN TOKEN\\\");\\n        _;\\n    }\\n    modifier isAcceptBuyByFlex() {\\n        require(allowBuyFlex, \\\"MARKETPLACE: CANNOT ACCEPT PAYMENT IN FLEX\\\");\\n        _;\\n    }\\n\\n    modifier isAcceptBuyByToken() {\\n        require(allowBuyByToken, \\\"MARKETPLACE: ONLY ACCEPT PAYMENT IN CURRENCY\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier checkOwner() {\\n        require(owner() == _msgSender() || contractOwner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function initPayUsdPercents() internal {\\n        percentUsdtPrice[1] = 500;\\n        percentUsdtPrice[2] = 500;\\n        percentUsdtPrice[3] = 500;\\n        percentUsdtPrice[4] = 500;\\n        percentUsdtPrice[5] = 500;\\n        percentUsdtPrice[6] = 500;\\n        percentUsdtPrice[7] = 500;\\n    }\\n\\n    /**\\n     * @dev init defaul referral as system wallet\\n     */\\n    function initDefaultReferral() internal {\\n        uint256 systemRefCode = nextReferralCounter();\\n        userReferralCode[systemWallet] = systemRefCode;\\n        referralCodeUser[systemRefCode] = systemWallet;\\n    }\\n\\n    function setTierPriceUsdPercent(uint8 _tier, uint256 _percent) external override checkOwner {\\n        require(_percent >= 0 && _percent <= 1000, \\\"MARKETPLACE: INVALID PAYMENT PERCENT\\\");\\n        percentUsdtPrice[_tier] = _percent;\\n    }\\n\\n    function getTierUsdPercent(uint8 _tier) external view override returns (uint256) {\\n        return percentUsdtPrice[_tier];\\n    }\\n\\n\\n    /**\\n     * @dev set sale wallet to receive token\\n     */\\n    function setContractOwner(address _user) external override checkOwner {\\n        require(_user != address(0), \\\"MARKETPLACE: INVALID OWNER ADDRESS\\\");\\n        contractOwner = _user;\\n    }\\n\\n    /**\\n     * @dev set sale wallet to receive token\\n     */\\n    function setSaleWalletAddress(address _saleAddress) public override onlyOwner {\\n        require(_saleAddress != address(0), \\\"MARKETPLACE: INVALID SALE ADDRESS\\\");\\n        saleWallet = _saleAddress;\\n    }\\n\\n    /**\\n     * @dev set staking contract address\\n     */\\n    function setStakingContractAddress(address _stakingAddress) public override onlyOwner {\\n        require(_stakingAddress != address(0), \\\"MARKETPLACE: INVALID STAKING ADDRESS\\\");\\n        stakingContractAddress = _stakingAddress;\\n    }\\n\\n    /**\\n     * @dev set commission percent for buy\\n     */\\n    function setActiveSystemTrading(uint256 _activeTime) public override onlyOwner {\\n        activeSystemTrading = _activeTime;\\n    }\\n\\n    /**\\n     * @dev set commission percent for buy\\n     */\\n    function setCommissionPercent(uint8 _percent) public override onlyOwner {\\n        require(_percent >= 0 && _percent <= 100, \\\"MARKETPLACE: INVALID COMMISSION VALUE\\\");\\n        commissionBuyPercent = _percent;\\n    }\\n\\n    function setMaxNumberStakeValue(uint8 _value) public override onlyOwner {\\n        require(_value >= 0, \\\"MARKETPLACE: INVALID MAX NUMBER COMMISSION VALUE\\\");\\n        numberMaxStakeValue = _value;\\n    }\\n\\n    function setDefaultMaxCommission(uint256 _value) public override onlyOwner {\\n        require(_value >= 0, \\\"MARKETPLACE: INVALID MAX COMMISSION VALUE\\\");\\n        maxValueCommission = _value;\\n    }\\n\\n    /**\\n     * @dev set sale StrategyOnlyCurrency time starting\\n     */\\n    function setSaleStrategyOnlyCurrencyStart(uint256 _newSaleStart) public override onlyOwner {\\n        saleStrategyOnlyCurrencyStart = _newSaleStart;\\n    }\\n\\n    /**\\n     * @dev get discount in sale period\\n     */\\n    function setSaleStrategyOnlyCurrencyEnd(uint256 _newSaleEnd) public override onlyOwner {\\n        require(\\n            _newSaleEnd > saleStrategyOnlyCurrencyStart,\\n            \\\"MARKETPLACE: TIME ENDING MUST GREATER THAN TIME BEGINNING\\\"\\n        );\\n        saleStrategyOnlyCurrencyEnd = _newSaleEnd;\\n    }\\n\\n    /**\\n     * @dev allow buy NFT by currency\\n     */\\n    function allowBuyNftByCurrency(bool _activePayByCurrency) public override onlyOwner {\\n        allowBuyByCurrency = _activePayByCurrency;\\n    }\\n\\n    /**\\n        * @dev allow buy NFT by flex\\n     */\\n    function  allowBuyNftByCurrencyAndToken(bool _activePayByCurrencyAndToken) public override onlyOwner {\\n        allowBuyFlex = _activePayByCurrencyAndToken;\\n    }\\n\\n\\n    /**\\n     * @dev allow buy NFT by token\\n     */\\n    function allowBuyNftByToken(bool _activePayByToken) public override onlyOwner {\\n        allowBuyByToken = _activePayByToken;\\n    }\\n\\n    /**\\n     * @dev set Token buy by token\\n     */\\n    function setToken(address _address) public override onlyOwner {\\n        token = _address;\\n    }\\n\\n    function setPayToken(bool _payInCurrency, bool _payInToken, bool _payInFlex) public override onlyOwner {\\n        payTokenBuyByCurrency = _payInCurrency;\\n        payTokenBuyByToken = _payInToken;\\n        payTokenBuyByFlex = _payInFlex;\\n    }\\n\\n    /**\\n     * @dev set type pay com(token or currency)\\n     */\\n    function setTypePayCommission(uint256 _typePayCommission) public override onlyOwner {\\n        require(_typePayCommission >= 0 && _typePayCommission < 3, \\\"MARKETPLACE: INVALID SALE PERCENT\\\");\\n        // false is pay com by token\\n        // true is pay com by usdt\\n        typePayCom = _typePayCommission;\\n    }\\n\\n    /**\\n     * @dev set sale percent\\n     */\\n    function setSalePercent(uint256 _newSalePercent) public override onlyOwner {\\n        require(_newSalePercent >= 0 && _newSalePercent <= 1000, \\\"MARKETPLACE: INVALID SALE PERCENT\\\");\\n        salePercent = _newSalePercent;\\n    }\\n\\n    /**\\n     * @dev set oracle address\\n     */\\n    function setOracleAddress(address _oracleAddress) public override onlyOwner {\\n        oracleContract = _oracleAddress;\\n    }\\n\\n    /**\\n     * @dev get discount percent if possible\\n     */\\n    function getCurrentSalePercent() internal view returns (uint) {\\n        uint currentSalePercent = 0;\\n        if (block.timestamp >= saleStrategyOnlyCurrencyStart && block.timestamp < saleStrategyOnlyCurrencyEnd) {\\n            currentSalePercent = salePercent;\\n        }\\n        return currentSalePercent;\\n    }\\n\\n    function getActiveMemberForAccount(address _wallet) public view override returns (uint256) {\\n        return totalActiveMembers[_wallet];\\n    }\\n\\n    function getReferredNftValueForAccount(address _wallet) public view override returns (uint256) {\\n        return referredNftValue[_wallet];\\n    }\\n\\n    function getNftCommissionEarnedForAccount(address _wallet) public view override returns (uint256) {\\n        return nftCommissionEarned[_wallet];\\n    }\\n\\n    function updateNetworkData(address _buyer, address _refWallet, uint256 _totalValueUsdWithDecimal) internal {\\n        // Update Referred NFT Value\\n        // Update NFT Sale Value\\n        uint256 currentNftSaleValue = nftSaleValue[_buyer];\\n        nftSaleValue[_buyer] = currentNftSaleValue + _totalValueUsdWithDecimal;\\n        uint256 currentNftValueInUsdWithDecimal = referredNftValue[_refWallet];\\n        referredNftValue[_refWallet] = currentNftValueInUsdWithDecimal + _totalValueUsdWithDecimal;\\n        // Update NFT Commission Earned\\n        uint256 currentCommissionEarned = nftCommissionEarned[_refWallet];\\n        uint256 commissionAmountInUsdWithDecimal = (_totalValueUsdWithDecimal * commissionBuyPercent) / 100;\\n        uint256 stakeCommissionUserInUsd = totalCommissionStake[_refWallet];\\n        uint256 maxCommissionWithDecimal = getMaxCommissionByAddressInUsd(_refWallet);\\n        uint256 totalCommission = currentCommissionEarned + commissionAmountInUsdWithDecimal;\\n        uint256 totalCommissionWithStake = totalCommission + stakeCommissionUserInUsd;\\n        if (_refWallet != systemWallet) {\\n            if (totalCommissionWithStake >= maxCommissionWithDecimal) {\\n                totalCommission = maxCommissionWithDecimal - stakeCommissionUserInUsd;\\n                commissionAmountInUsdWithDecimal =\\n                    maxCommissionWithDecimal -\\n                    currentCommissionEarned -\\n                    stakeCommissionUserInUsd;\\n            }\\n        }\\n        nftCommissionEarned[_refWallet] = totalCommission;\\n    }\\n\\n    function getCommissionRef(address _refWallet, uint256 _totalValueUsdWithDecimal) internal view returns (uint256) {\\n        uint256 currentCommissionEarned = nftCommissionEarned[_refWallet];\\n        uint256 commissionAmountInUsdWithDecimal = (_totalValueUsdWithDecimal * commissionBuyPercent) / 100;\\n        uint256 stakeCommissionUserInUsd = totalCommissionStake[_refWallet];\\n        uint256 maxCommissionWithDecimal = getMaxCommissionByAddressInUsd(_refWallet);\\n        uint256 totalCommissionWithStake = currentCommissionEarned +\\n                    commissionAmountInUsdWithDecimal +\\n                    stakeCommissionUserInUsd;\\n        if (_refWallet != systemWallet) {\\n            if (totalCommissionWithStake >= maxCommissionWithDecimal) {\\n                commissionAmountInUsdWithDecimal =\\n                    maxCommissionWithDecimal -\\n                    currentCommissionEarned -\\n                    stakeCommissionUserInUsd;\\n            }\\n        }\\n        return commissionAmountInUsdWithDecimal;\\n    }\\n\\n    function updateBuyTokenMapping(uint256[] memory _nftIds, bool _isBuyByToken) internal {\\n        uint index;\\n        for (index = 0; index < _nftIds.length; index++) {\\n            uint256 nftId = _nftIds[index];\\n            tokenBuyTokens[nftId] = _isBuyByToken;\\n        }\\n    }\\n\\n    function checkValidRefCodeAdvance(address _user, uint256 _refCode) public view override returns (bool) {\\n        bool isValid = true;\\n        address currentRefUser = getAccountForReferralCode(_refCode);\\n        address[] memory refTree = new address[](101);\\n        refTree[0] = _user;\\n        uint i = 1;\\n        while (i < 101 && currentRefUser != systemWallet) {\\n            for (uint j = 0; j < refTree.length; j++) {\\n                if (currentRefUser == refTree[j]) {\\n                    isValid = false;\\n                    break;\\n                }\\n            }\\n            refTree[i] = currentRefUser;\\n            currentRefUser = getReferralAccountForAccount(currentRefUser);\\n            ++i;\\n        }\\n        return isValid;\\n    }\\n\\n    /**\\n     * @dev buyByCurrency function\\n     * @param _nftIds list NFT ID want to buy\\n     * @param _refCode referral code of ref account\\n     */\\n    function buyByCurrency(\\n        uint256[] memory _nftIds,\\n        uint256 _refCode\\n    ) public override validRefCode(_refCode) isAcceptBuyByCurrency {\\n        require(_nftIds.length > 0, \\\"MARKETPLACE: INVALID LIST NFT ID\\\");\\n        require(_nftIds.length <= 100, \\\"MARKETPLACE: TOO MANY NFT IN SINGLE BUY\\\");\\n        // Prevent re-entrancy\\n        require(!reentrancyGuardForBuying, \\\"MARKETPLACE: REENTRANCY DETECTED\\\");\\n        // Prevent cheat\\n        require(checkValidRefCodeAdvance(msg.sender, _refCode), \\\"MARKETPLACE: CHEAT REF DETECTED\\\");\\n        reentrancyGuardForBuying = true;\\n        // Start processing\\n        uint index;\\n        uint256 totalValueUsdWithDecimal = getTotalValue(_nftIds);\\n        //check sale and update total value\\n        uint currentSale = getCurrentSalePercent();\\n        uint256 saleValueUsdWithDecimal = 0;\\n        if (currentSale > 0) {\\n            saleValueUsdWithDecimal = (currentSale * totalValueUsdWithDecimal) / 1000;\\n        }\\n        require(\\n            ERC20(currency).balanceOf(msg.sender) >= (totalValueUsdWithDecimal - saleValueUsdWithDecimal),\\n            \\\"MARKETPLACE: NOT ENOUGH BALANCE CURRENCY TO BUY NFTs\\\"\\n        );\\n        require(\\n            ERC20(currency).allowance(msg.sender, address(this)) >=\\n            (totalValueUsdWithDecimal - saleValueUsdWithDecimal),\\n            \\\"MARKETPLACE: MUST APPROVE FIRST\\\"\\n        );\\n        // Transfer currency from buyer to sale wallet\\n        require(\\n            ERC20(currency).transferFrom(msg.sender, saleWallet, (totalValueUsdWithDecimal - saleValueUsdWithDecimal)),\\n            \\\"MARKETPLACE: FAILED IN TRANSFERING CURRENCY TO MARKETPLACE\\\"\\n        );\\n        // Get ref infor\\n        address payable refAddress = payable(getAccountForReferralCode(_refCode));\\n        require(refAddress != address(0), \\\"MARKETPLACE: CALLER MUST HAVE A REFERRAL ACCOUNT\\\");\\n        // Transfer nft from marketplace to buyer\\n        for (index = 0; index < _nftIds.length; index++) {\\n            try TurboDexNFT(nft).safeTransferFrom(address(this), msg.sender, _nftIds[index]) {\\n                emit Buy(address(this), msg.sender, _nftIds[index], refAddress);\\n            } catch (bytes memory _error) {\\n                reentrancyGuardForBuying = false;\\n                emit ErrorLog(_error);\\n                revert(\\\"MARKETPLACE: BUY FAILED\\\");\\n            }\\n        }\\n        updateBuyData(_refCode, totalValueUsdWithDecimal, _nftIds, payTokenBuyByCurrency);\\n        // Rollback for next action\\n        reentrancyGuardForBuying = false;\\n    }\\n\\n    /**\\n     * @dev buyByToken function\\n     * @param _nftIds list NFT ID want to buy\\n     * @param _refCode referral code of ref account\\n     */\\n    function buyByToken(\\n        uint256[] memory _nftIds,\\n        uint256 _refCode\\n    ) public override validRefCode(_refCode) isAcceptBuyByToken {\\n        require(_nftIds.length > 0, \\\"MARKETPLACE: INVALID LIST NFT ID\\\");\\n        require(_nftIds.length <= 100, \\\"MARKETPLACE: TOO MANY NFT IN SINGLE BUY\\\");\\n        // Prevent re-entrancy\\n        require(!reentrancyGuardForBuying, \\\"MARKETPLACE: REENTRANCY DETECTED\\\");\\n        // Prevent cheat\\n        require(checkValidRefCodeAdvance(msg.sender, _refCode), \\\"MARKETPLACE: CHEAT REF DETECTED\\\");\\n        reentrancyGuardForBuying = true;\\n        // Start processing\\n        uint index;\\n        uint256 totalValueUsdWithDecimal = getTotalValue(_nftIds);\\n        uint256 totalValueInTokenWithDecimal = Oracle(oracleContract).convertUsdBalanceDecimalToTokenDecimal(\\n            totalValueUsdWithDecimal\\n        );\\n        require(totalValueInTokenWithDecimal > 0, \\\"MARKETPLACE: ORACLE NOT WORKING.\\\");\\n        //check sale and update total value\\n        uint currentSale = getCurrentSalePercent();\\n        uint256 saleValueInTokenWithDecimal = 0;\\n        if (currentSale > 0) {\\n            saleValueInTokenWithDecimal = (currentSale * totalValueInTokenWithDecimal) / 1000;\\n        }\\n        require(\\n            ERC20(token).balanceOf(msg.sender) >= (totalValueInTokenWithDecimal - saleValueInTokenWithDecimal),\\n            \\\"MARKETPLACE: NOT ENOUGH BALANCE CURRENCY TO BUY NFTs\\\"\\n        );\\n        require(\\n            ERC20(token).allowance(msg.sender, address(this)) >=\\n            (totalValueInTokenWithDecimal - saleValueInTokenWithDecimal),\\n            \\\"MARKETPLACE: MUST APPROVE FIRST\\\"\\n        );\\n        // Transfer token from buyer to sale wallet\\n        require(\\n            ERC20(token).transferFrom(\\n                msg.sender,\\n                saleWallet,\\n                (totalValueInTokenWithDecimal - saleValueInTokenWithDecimal)\\n            ),\\n            \\\"MARKETPLACE: FAILED IN TRANSFERING CURRENCY TO MARKETPLACE\\\"\\n        );\\n        // Get ref infor\\n        address payable refAddress = payable(getAccountForReferralCode(_refCode));\\n        require(refAddress != address(0), \\\"MARKETPLACE: CALLER MUST HAVE A REFERRAL ACCOUNT\\\");\\n        // transfer\\n        for (index = 0; index < _nftIds.length; index++) {\\n            try TurboDexNFT(nft).safeTransferFrom(address(this), msg.sender, _nftIds[index]) {\\n                emit Buy(address(this), msg.sender, _nftIds[index], refAddress);\\n            } catch (bytes memory _error) {\\n                reentrancyGuardForBuying = false;\\n                emit ErrorLog(_error);\\n                revert(\\\"MARKETPLACE: BUY FAILED\\\");\\n            }\\n        }\\n        // Transfer nft from marketplace to buyer\\n        updateBuyData(_refCode, totalValueUsdWithDecimal, _nftIds, payTokenBuyByToken);\\n        // Rollback for next action\\n        reentrancyGuardForBuying = false;\\n    }\\n\\n    /**\\n     * @dev buyByTokenAndCurrency function\\n     * @param _nftIds list NFT ID want to buy\\n     * @param _refCode referral code of ref account\\n     */\\n    function buyByTokenAndCurrency(\\n        uint256[] memory _nftIds,\\n        uint256 _refCode\\n    ) public override validRefCode(_refCode) isAcceptBuyByFlex {\\n        require(_nftIds.length > 0, \\\"MARKETPLACE: INVALID LIST NFT ID\\\");\\n        require(_nftIds.length <= 100, \\\"MARKETPLACE: TOO MANY NFT IN SINGLE BUY\\\");\\n        // Prevent re-entrancy\\n        require(!reentrancyGuardForBuying, \\\"MARKETPLACE: REENTRANCY DETECTED\\\");\\n        // Prevent cheat\\n        require(checkValidRefCodeAdvance(msg.sender, _refCode), \\\"MARKETPLACE: CHEAT REF DETECTED\\\");\\n        reentrancyGuardForBuying = true;\\n        // Start processing\\n        uint index;\\n        (uint256 valueUsd, uint256 valueUsdToken, uint256 totalValueUsd) = getTotalValueFlex(_nftIds);\\n        uint256 totalValueUsdWithDecimal = totalValueUsd * (10 ** ERC20(currency).decimals());\\n        uint256 valueToken = Oracle(oracleContract).convertUsdBalanceDecimalToTokenDecimal(\\n            valueUsdToken\\n        );\\n        uint256[] memory nftIds = _nftIds;\\n        require(valueToken > 0, \\\"MARKETPLACE: ORACLE NOT WORKING.\\\");\\n        //check sale and update total value\\n        uint currentSale = getCurrentSalePercent();\\n        uint256 saleValueInTokenWithDecimal = 0;\\n        uint256 saleValueInUsdWithDecimal = 0;\\n        if (currentSale > 0) {\\n            saleValueInTokenWithDecimal = (currentSale * valueToken) / 1000;\\n            saleValueInUsdWithDecimal = (currentSale * valueUsd) / 1000;\\n        }\\n        require(\\n            ERC20(token).balanceOf(msg.sender) >= (valueToken - saleValueInTokenWithDecimal),\\n            \\\"MARKETPLACE: NOT ENOUGH BALANCE CURRENCY TO BUY NFTs\\\"\\n        );\\n        require(\\n            ERC20(currency).balanceOf(msg.sender) >= (valueUsd - saleValueInUsdWithDecimal),\\n            \\\"MARKETPLACE: NOT ENOUGH BALANCE CURRENCY TO BUY NFTs\\\"\\n        );\\n        require(\\n            ERC20(token).allowance(msg.sender, address(this)) >=\\n            (valueToken - saleValueInTokenWithDecimal),\\n            \\\"MARKETPLACE: MUST APPROVE FIRST\\\"\\n        );\\n        require(\\n            ERC20(currency).allowance(msg.sender, address(this)) >=\\n            (valueUsd - saleValueInUsdWithDecimal),\\n            \\\"MARKETPLACE: MUST APPROVE FIRST\\\"\\n        );\\n        // Transfer token from buyer to sale wallet\\n        require(\\n            ERC20(token).transferFrom(\\n                msg.sender,\\n                saleWallet,\\n                (valueToken - saleValueInTokenWithDecimal)\\n            ),\\n            \\\"MARKETPLACE: FAILED IN TRANSFERING CURRENCY TO MARKETPLACE\\\"\\n        );\\n        require(\\n            ERC20(currency).transferFrom(\\n                msg.sender,\\n                saleWallet,\\n                (valueUsd - saleValueInUsdWithDecimal)\\n            ),\\n            \\\"MARKETPLACE: FAILED IN TRANSFERING CURRENCY TO MARKETPLACE\\\"\\n        );\\n        // Get ref infor\\n        address payable refAddress = payable(getAccountForReferralCode(_refCode));\\n        require(refAddress != address(0), \\\"MARKETPLACE: CALLER MUST HAVE A REFERRAL ACCOUNT\\\");\\n        // transfer\\n        for (index = 0; index < nftIds.length; index++) {\\n            try TurboDexNFT(nft).safeTransferFrom(address(this), msg.sender, nftIds[index]) {\\n                emit Buy(address(this), msg.sender, nftIds[index], refAddress);\\n            } catch (bytes memory _error) {\\n                reentrancyGuardForBuying = false;\\n                emit ErrorLog(_error);\\n                revert(\\\"MARKETPLACE: BUY FAILED\\\");\\n            }\\n        }\\n        // Transfer nft from marketplace to buyer\\n        updateBuyData(_refCode, totalValueUsdWithDecimal, nftIds, payTokenBuyByFlex);\\n        // Rollback for next action\\n        reentrancyGuardForBuying = false;\\n    }\\n\\n    function getTotalValue(uint256[] memory _nftIds) internal view returns (uint256) {\\n        uint256 totalValueUsd;\\n        for (uint index = 0; index < _nftIds.length; index++) {\\n            uint256 priceNftUsd = TurboDexNFT(nft).getNftPriceUsd(_nftIds[index]);\\n            require(priceNftUsd > 0, \\\"MARKETPLACE: WRONG NFT ID TO BUY\\\");\\n            require(TurboDexNFT(nft).ownerOf(_nftIds[index]) == address(this), \\\"MARKETPLACE: NOT OWNER THIS NFT ID\\\");\\n            totalValueUsd += priceNftUsd;\\n        }\\n        uint256 totalValueUsdWithDecimal = totalValueUsd * (10 ** ERC20(currency).decimals());\\n        return totalValueUsdWithDecimal;\\n    }\\n\\n    function getTotalValueFlex(uint256[] memory _nftIds) internal view returns (uint256, uint256, uint256) {\\n        uint256 totalValueUsd;\\n        uint256 valueUsd;\\n        uint256 valueUsdToken;\\n        for (uint index = 0; index < _nftIds.length; index++) {\\n            uint256 priceNftUsd = TurboDexNFT(nft).getNftPriceUsd(_nftIds[index]);\\n            require(priceNftUsd > 0, \\\"MARKETPLACE: WRONG NFT ID TO BUY\\\");\\n            require(TurboDexNFT(nft).ownerOf(_nftIds[index]) == address(this), \\\"MARKETPLACE: NOT OWNER THIS NFT ID\\\");\\n            uint8 _tierNft = TurboDexNFT(nft).getNftTier(_nftIds[index]);\\n            uint256 percentUsd = percentUsdtPrice[_tierNft];\\n            require(percentUsd > 0, \\\"MARKETPLACE: WRONG NFT ID TO BUY\\\");\\n            uint256 percentToken = 1000 - percentUsd;\\n            valueUsd += priceNftUsd * (10 ** ERC20(currency).decimals()) * percentUsd / 1000;\\n            valueUsdToken += priceNftUsd * (10 ** ERC20(currency).decimals()) * percentToken / 1000;\\n            totalValueUsd += priceNftUsd;\\n        }\\n        return (valueUsd, valueUsdToken, totalValueUsd);\\n    }\\n\\n    function updateBuyData(uint256 _refCode, uint256 totalValueUsdWithDecimal, uint256[] memory _nftIds, bool isToken) internal {\\n        address payable refAddress = payable(getAccountForReferralCode(_refCode));\\n        // Update network data\\n        uint256 commissionByUsd = getCommissionRef(refAddress, totalValueUsdWithDecimal);\\n        updateNetworkData(msg.sender, refAddress, totalValueUsdWithDecimal);\\n        // Transfer referral commissions & update data\\n        payReferralCommissions(msg.sender, refAddress, commissionByUsd, isToken);\\n        // Fixed the ref data of buyer\\n        if (possibleChangeReferralData(msg.sender)) {\\n            updateReferralData(msg.sender, _refCode);\\n        }\\n        updateBuyTokenMapping(_nftIds, isToken);\\n    }\\n\\n    /**\\n     * @dev update referral data function\\n     * @param _user user wallet address\\n     * @param _valueInUsdWithDecimal stake value in USD with decimal\\n     */\\n    function updateStakeValueData(address _user, uint256 _valueInUsdWithDecimal) public override {\\n        require(msg.sender == stakingContractAddress, \\\"MARKETPLACE: INVALID CALLER TO UPDATE STAKE DATA\\\");\\n        uint256 currentStakeValue = totalStakeValue[_user];\\n        totalStakeValue[_user] = currentStakeValue + _valueInUsdWithDecimal;\\n    }\\n\\n    function updateCommissionStakeValueData(address _user, uint256 _valueInUsdWithDecimal) public override {\\n        require(msg.sender == stakingContractAddress, \\\"MARKETPLACE: INVALID CALLER TO UPDATE STAKE DATA\\\");\\n        uint256 currentCommissionStakeValue = totalCommissionStake[_user];\\n        totalCommissionStake[_user] = currentCommissionStakeValue + _valueInUsdWithDecimal;\\n    }\\n\\n    /**\\n     * @dev update referral data function\\n     * @param _user user wallet address\\n     * @param _refCode referral code of ref account\\n     */\\n    function updateReferralData(address _user, uint256 _refCode) public override {\\n        address refAddress = getAccountForReferralCode(_refCode);\\n        address refOfRefUser = getReferralAccountForAccountExternal(refAddress);\\n        require(refOfRefUser != _user, \\\"MARKETPLACE: CONFLICT REF CODE\\\");\\n        require(_refCode != userReferralCode[_user], \\\"MARKETPLACE: CANNOT REF TO YOURSELF\\\");\\n        require(_refCode != userReferralCode[msg.sender], \\\"MARKETPLACE: CANNOT REF TO YOURSELF\\\");\\n        if (possibleChangeReferralData(_user)) {\\n            userRef[_user] = refAddress;\\n            generateReferralCode(_user);\\n            lockedReferralDataForAccount(_user);\\n            // Update Active Members\\n            uint256 currentMember = totalActiveMembers[refAddress];\\n            totalActiveMembers[refAddress] = currentMember + 1;\\n            updateF1ListForRefAccount(refAddress, _user);\\n            updateChildListForRefAccountMultiLevels(refAddress, _user);\\n        }\\n    }\\n\\n    /**\\n     * @dev get NFT sale value\\n     */\\n    function getNftSaleValueForAccountInUsdDecimal(address _wallet) public view override returns (uint256) {\\n        return nftSaleValue[_wallet];\\n    }\\n\\n    /**\\n     * @dev getTotalStakeByAddressInUsd\\n     */\\n    function getTotalStakeByAddressInUsd(address _wallet) public view override returns (uint256) {\\n        return totalStakeValue[_wallet];\\n    }\\n\\n    /**\\n     * @dev getTotalCommissionStakeByAddressInUsd\\n     */\\n    function getTotalCommissionStakeByAddressInUsd(address _wallet) public view override returns (uint256) {\\n        return totalCommissionStake[_wallet];\\n    }\\n\\n    /**\\n     * @dev getMaxCommissionByAddressInUsd\\n     */\\n    function getMaxCommissionByAddressInUsd(address _wallet) public view override returns (uint256) {\\n        uint256 stakeUserInUsd = totalStakeValue[_wallet];\\n        if (stakeUserInUsd > 0) {\\n            return numberMaxStakeValue * stakeUserInUsd;\\n        } else {\\n            return maxValueCommission * (10 ** ERC20(currency).decimals());\\n        }\\n    }\\n\\n    /**\\n     * @dev update refList for refAccount\\n     */\\n    function updateF1ListForRefAccount(address _refAccount, address _newChild) internal {\\n        userF1ListData[_refAccount].childList.push(_newChild);\\n        userF1ListData[_refAccount].memberCounter += 1;\\n    }\\n\\n    /**\\n     * @dev update refList for refAccount\\n     */\\n    function updateChildListForRefAccount(address _refAccount, address _newChild) internal {\\n        userChildListData[_refAccount].childList.push(_newChild);\\n        userChildListData[_refAccount].memberCounter += 1;\\n    }\\n\\n    /**\\n     * @dev update refList for refAccount with 200 levels\\n     */\\n    function updateChildListForRefAccountMultiLevels(address _refAccount, address _newChild) internal {\\n        address currentRef;\\n        address nextRef = _refAccount;\\n        uint8 index = 1;\\n        while (currentRef != nextRef && nextRef != address(0) && index <= 200) {\\n            currentRef = nextRef;\\n            updateChildListForRefAccount(currentRef, _newChild);\\n            index++;\\n            nextRef = getReferralAccountForAccountExternal(currentRef);\\n        }\\n    }\\n\\n    /**\\n     * @dev get childlist of an address\\n     */\\n    function getChildListForAccount(address _wallet) public view returns (address[] memory) {\\n        return userChildListData[_wallet].childList;\\n    }\\n\\n    /**\\n     * @dev get childlist of an address\\n     */\\n    function getF1ListForAccount(address _wallet) public view override returns (address[] memory) {\\n        return userF1ListData[_wallet].childList;\\n    }\\n\\n    /**\\n     * @dev get Team NFT sale value\\n     */\\n    function getTeamNftSaleValueForAccountInUsdDecimal(address _wallet) public view override returns (uint256) {\\n        uint256 countTeamMember = userChildListData[_wallet].memberCounter;\\n        address currentMember;\\n        uint256 teamNftValue = 0;\\n        for (uint i = 0; i < countTeamMember; i++) {\\n            currentMember = userChildListData[_wallet].childList[i];\\n            teamNftValue += getNftSaleValueForAccountInUsdDecimal(currentMember);\\n        }\\n        return teamNftValue;\\n    }\\n\\n    /**\\n     * @dev generate referral code for an account\\n     */\\n    function genReferralCodeForAccount() public override returns (uint256) {\\n        uint256 refCode = userReferralCode[msg.sender];\\n        if (refCode == 0) {\\n            generateReferralCode(msg.sender);\\n        }\\n        return userReferralCode[msg.sender];\\n    }\\n\\n    /**\\n     * @dev get referral code for an account\\n     * @param _user user wallet address\\n     */\\n    function getReferralCodeForAccount(address _user) public view override returns (uint256) {\\n        return userReferralCode[_user];\\n    }\\n\\n    /**\\n     * @dev the function return refferal address for specified address\\n     */\\n    function getReferralAccountForAccount(address _user) public view override returns (address) {\\n        address refWallet = address(0);\\n        refWallet = userRef[_user];\\n        if (refWallet == address(0)) {\\n            refWallet = systemWallet;\\n        }\\n        return refWallet;\\n    }\\n\\n    /**\\n     * @dev the function return refferal address for specified address (without system)\\n     */\\n    function getReferralAccountForAccountExternal(address _user) public view override returns (address) {\\n        return userRef[_user];\\n    }\\n\\n    /**\\n     * @dev get account for referral code\\n     * @param _refCode refCode\\n     */\\n    function getAccountForReferralCode(uint256 _refCode) public view override returns (address) {\\n        address refAddress = referralCodeUser[_refCode];\\n        if (refAddress == address(0)) {\\n            refAddress = systemWallet;\\n        }\\n        return refAddress;\\n    }\\n\\n    /**\\n     * @dev generate a referral code for user (internal function)\\n     * @param _user user wallet address\\n     */\\n    function generateReferralCode(address _user) internal {\\n        if (userReferralCode[_user] == 0) {\\n            nextReferralCounter();\\n            uint256 salt = 1;\\n            uint256 refCode = generateRandomCode(salt, _user);\\n            while (referralCodeUser[refCode] != address(0) || refCode < 1001) {\\n                salt++;\\n                refCode = generateRandomCode(salt, _user);\\n            }\\n            userReferralCode[_user] = refCode;\\n            referralCodeUser[refCode] = _user;\\n        }\\n    }\\n\\n    /**\\n     * @dev generate a random code for ref\\n     */\\n    function generateRandomCode(uint256 _salt, address _wallet) internal view returns (uint256) {\\n        bytes32 randomHash = keccak256(abi.encodePacked(block.timestamp, _wallet, _salt));\\n        return uint256(randomHash) % 1000000;\\n    }\\n\\n    /**\\n     * @dev update referral counter (internal function)\\n     */\\n    function nextReferralCounter() internal returns (uint256) {\\n        ++refCounter;\\n        return refCounter;\\n    }\\n\\n    /**\\n     * @dev get current referral counter\\n     */\\n    function currrentReferralCounter() public view returns (uint256) {\\n        return refCounter;\\n    }\\n\\n    /**\\n     * @dev check possible to change referral data for a user\\n     * @param _user user wallet address\\n     */\\n    function possibleChangeReferralData(address _user) public view override returns (bool) {\\n        return !lockedReferralData[_user];\\n    }\\n\\n    /**\\n     * @dev only update the referral data 1 time. After set cannot change the data again.\\n     */\\n    function lockedReferralDataForAccount(address _user) public override {\\n        require(lockedReferralData[_user] == false, \\\"MARKETPLACE: USER'S REFERRAL INFORMATION HAS ALREADY BEEN LOCKED\\\");\\n        lockedReferralData[_user] = true;\\n    }\\n\\n    /**\\n     * @dev the function pay commission(default 3%) to referral account\\n     */\\n    function payReferralCommissions(\\n        address _buyer,\\n        address payable _receiver,\\n        uint256 commissionAmountInUsdDecimal,\\n        bool _isBuyByToken\\n    ) internal {\\n        bool _payComByUsd = true;\\n        if (typePayCom == 0) {\\n            _payComByUsd = true;\\n        } else if (typePayCom == 1) {\\n            _payComByUsd = false;\\n        } else {\\n            _payComByUsd = !_isBuyByToken;\\n        }\\n        if (commissionAmountInUsdDecimal > 0) {\\n            if (_payComByUsd) {\\n                //true is pay com by usdt(currency)\\n                require(\\n                    ERC20(currency).balanceOf(address(this)) >= commissionAmountInUsdDecimal,\\n                    \\\"MARKETPLACE: CURRENCY BALANCE NOT ENOUGH\\\"\\n                );\\n                require(\\n                    ERC20(currency).transfer(_receiver, commissionAmountInUsdDecimal),\\n                    \\\"MARKETPLACE: UNABLE TO TRANSFER COMMISSION PAYMENT TO RECIPIENT\\\"\\n                );\\n                emit PayCommission(_buyer, _receiver, commissionAmountInUsdDecimal);\\n            } else {\\n                uint256 commissionAmountInTokenDecimal = Oracle(oracleContract).convertUsdBalanceDecimalToTokenDecimal(\\n                    commissionAmountInUsdDecimal\\n                );\\n                require(\\n                    ERC20(token).balanceOf(address(this)) >= commissionAmountInTokenDecimal,\\n                    \\\"MARKETPLACE: TOKEN BALANCE NOT ENOUGH\\\"\\n                );\\n                require(\\n                    ERC20(token).transfer(_receiver, commissionAmountInTokenDecimal),\\n                    \\\"MARKETPLACE: UNABLE TO TRANSFER COMMISSION PAYMENT TO RECIPIENT\\\"\\n                );\\n                emit PayCommission(_buyer, _receiver, commissionAmountInTokenDecimal);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev the function to update system wallet. Only owner can do this action\\n     */\\n    function setSystemWallet(address _newSystemWallet) public override onlyOwner {\\n        require(\\n            _newSystemWallet != address(0) && _newSystemWallet != systemWallet,\\n            \\\"MARKETPLACE: INVALID SYSTEM WALLET\\\"\\n        );\\n        systemWallet = _newSystemWallet;\\n        initDefaultReferral();\\n    }\\n\\n    /**\\n     * @dev get currency address\\n     */\\n    function getCurrencyAddress() public view override returns (address) {\\n        return currency;\\n    }\\n\\n    /**\\n     * @dev get is buy by token\\n     */\\n    function isBuyByToken(uint256 _nftId) public view override returns (bool) {\\n        return tokenBuyTokens[_nftId];\\n    }\\n\\n    /**\\n     * @dev set currency address only for owner\\n     */\\n    function setCurrencyAddress(address _currency) public override onlyOwner {\\n        currency = _currency;\\n    }\\n\\n    /**\\n     * @dev withdraw some token balance from contract to owner account\\n     */\\n    function withdrawTokenEmergency(address _token, uint256 _amount) public override checkOwner {\\n        require(_amount > 0, \\\"MARKETPLACE: INVALID AMOUNT\\\");\\n        require(ERC20(_token).balanceOf(address(this)) >= _amount, \\\"MARKETPLACE: TOKEN BALANCE NOT ENOUGH\\\");\\n        require(ERC20(_token).transfer(msg.sender, _amount), \\\"MARKETPLACE: CANNOT WITHDRAW TOKEN\\\");\\n    }\\n\\n    /**\\n     * @dev withdraw some currency balance from contract to owner account\\n     */\\n    function withdrawTokenEmergencyFrom(\\n        address _from,\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) public override checkOwner {\\n        require(_amount > 0, \\\"MARKETPLACE: INVALID AMOUNT\\\");\\n        require(ERC20(_token).balanceOf(_from) >= _amount, \\\"MARKETPLACE: CURRENCY BALANCE NOT ENOUGH\\\");\\n        require(ERC20(_token).transferFrom(_from, _to, _amount), \\\"MARKETPLACE: CANNOT WITHDRAW CURRENCY\\\");\\n    }\\n\\n    /**\\n     * @dev transfer a NFT from this contract to an account, only owner\\n     */\\n    function transferNftEmergency(address _receiver, uint256 _nftId) public checkOwner {\\n        require(TurboDexNFT(nft).ownerOf(_nftId) == address(this), \\\"MARKETPLACE: NOT OWNER OF THIS NFT\\\");\\n        try TurboDexNFT(nft).safeTransferFrom(address(this), _receiver, _nftId, \\\"\\\") {} catch (bytes memory _error) {\\n            emit ErrorLog(_error);\\n            revert(\\\"MARKETPLACE: NFT TRANSFER FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev transfer a list of NFT from this contract to a list of account, only owner\\n     */\\n    function transferMultiNftsEmergency(\\n        address[] memory _receivers,\\n        uint256[] memory _nftIds\\n    ) public checkOwner {\\n        require(_receivers.length == _nftIds.length, \\\"MARKETPLACE: same size\\\");\\n        for (uint index = 0; index < _nftIds.length; index++) {\\n            transferNftEmergency(_receivers[index], _nftIds[index]);\\n        }\\n    }\\n\\n    function updateWalletInformation(\\n        address _wallet,\\n        uint256 _totalActiveMembers,\\n        uint256 _referredNftValue,\\n        uint256 _nftCommissionEarned,\\n        uint256 _nftSaleValue\\n    ) external checkOwner {\\n        totalActiveMembers[_wallet] = _totalActiveMembers;\\n        referredNftValue[_wallet] = _referredNftValue;\\n        nftCommissionEarned[_wallet] = _nftCommissionEarned;\\n        nftSaleValue[_wallet] = _nftSaleValue;\\n    }\\n\\n    function updateIsNftBuyWithToken(uint256[] memory _nftIds, bool _isBuyByToken) external checkOwner {\\n        for (uint index = 0; index < _nftIds.length; index++) {\\n            tokenBuyTokens[_nftIds[index]] = _isBuyByToken;\\n        }\\n    }\\n\\n    function updateChildListForRefAccount(address _wallet, address[] memory _childLists) external checkOwner {\\n        userChildListData[_wallet].childList = _childLists;\\n        userChildListData[_wallet].memberCounter = _childLists.length;\\n    }\\n\\n    function updateF1ListForRefAccount(address _wallet, address[] memory _f1Lists) external checkOwner {\\n        userF1ListData[_wallet].childList = _f1Lists;\\n        userF1ListData[_wallet].memberCounter = _f1Lists.length;\\n        uint index;\\n        for (index = 0; index < _f1Lists.length; index++) {\\n            userRef[_f1Lists[index]] = _wallet;\\n            lockedReferralData[_f1Lists[index]] = true;\\n        }\\n    }\\n\\n    function updateReferralDataByAdmin(address[] calldata _wallets, uint256[] calldata _refCodes) external checkOwner {\\n        require(_wallets.length == _refCodes.length, \\\"MARKETPLACE: same size\\\");\\n        for (uint32 index = 0; index < _wallets.length; index++) {\\n            userReferralCode[_wallets[index]] = _refCodes[index];\\n            referralCodeUser[_refCodes[index]] = _wallets[index];\\n        }\\n    }\\n\\n    function updateStakeDataByAdmin(\\n        address _wallet,\\n        uint256 _totalStakeValue,\\n        uint256 _totalCommissionStake\\n    ) external checkOwner {\\n        totalStakeValue[_wallet] = _totalStakeValue;\\n        totalCommissionStake[_wallet] = _totalCommissionStake;\\n    }\\n\\n    function updateLockedReferralDataByAdmin(address[] calldata _wallets, bool[] calldata _lockedReferralDatas) external checkOwner {\\n        require(_wallets.length == _lockedReferralDatas.length, \\\"MARKETPLACE: same size\\\");\\n        for (uint32 index = 0; index < _wallets.length; index++) {\\n            lockedReferralData[_wallets[index]] = _lockedReferralDatas[index];\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/nft/TurboDexNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\n\\ncontract TurboDexNFT is ERC721, Ownable, Pausable, ERC721Burnable {\\n    uint256 public tokenCount;\\n    // Mapping from token ID to token URI\\n    mapping(uint256 => string) private tokenURIs;\\n    // Mapping from tier to price\\n    mapping(uint256 => uint256) public tierPrices;\\n    // Mapping from token ID to tier\\n    mapping(uint256 => uint8) private tokenTiers;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _manager\\n    ) ERC721(_name, _symbol) {\\n        initTierPrices();\\n        transferOwnership(_manager);\\n    }\\n\\n    modifier validId(uint256 _nftId) {\\n        require(ownerOf(_nftId) != address(0), \\\"INVALID NFT ID\\\");\\n        _;\\n    }\\n\\n    function initTierPrices() public onlyOwner {\\n        tierPrices[1] = 250;\\n        tierPrices[2] = 500;\\n        tierPrices[3] = 1000;\\n        tierPrices[4] = 3000;\\n        tierPrices[5] = 5000;\\n        tierPrices[6] = 10000;\\n        tierPrices[7] = 50000;\\n    }\\n\\n    function setTierPriceUsd(uint256 _tier, uint256 _price) public onlyOwner {\\n        tierPrices[_tier] = _price;\\n    }\\n\\n    //for external call\\n    function getNftPriceUsd(uint256 _nftId) external view validId(_nftId) returns (uint256) {\\n        uint256 nftTier = tokenTiers[_nftId];\\n        return tierPrices[nftTier];\\n    }\\n\\n    //for external call\\n    function getNftTier(uint256 _nftId) external view validId(_nftId) returns (uint8) {\\n        return tokenTiers[_nftId];\\n    }\\n\\n    function setNftTier(uint256 _nftId, uint8 _tier) public onlyOwner {\\n        tokenTiers[_nftId] = _tier;\\n    }\\n\\n    function tokenURI(uint256 _nftId) public view virtual override returns (string memory) {\\n        require(ownerOf(_nftId) != address(0), \\\"NFT ID NOT EXIST\\\");\\n        return tokenURIs[_nftId];\\n    }\\n\\n    function setTokenURI(uint256 _nftId, string memory _tokenURI) public onlyOwner {\\n        require(ownerOf(_nftId) != address(0), \\\"NFT ID NOT EXIST\\\");\\n        require(bytes(_tokenURI).length > 0, \\\"TOKEN URI MUST NOT NULL\\\");\\n        tokenURIs[_nftId] = _tokenURI;\\n    }\\n\\n    function mint(string memory _tokenURI, uint8 _tier) public onlyOwner {\\n        require(bytes(_tokenURI).length > 0, \\\"TOKEN URI MUST NOT NULL\\\");\\n        tokenCount++;\\n        tokenURIs[tokenCount] = _tokenURI;\\n        tokenTiers[tokenCount] = _tier;\\n        _safeMint(msg.sender, tokenCount);\\n    }\\n\\n    function batchMint(string[] memory _tokenURI, uint8 _tier) public onlyOwner {\\n        require(_tokenURI.length > 0, \\\"SIZE LIST URI MUST NOT BE ZERO\\\");\\n        uint256 index;\\n        for (index = 0; index < _tokenURI.length; ++index) {\\n            mint(_tokenURI[index], _tier);\\n        }\\n    }\\n\\n    function mintTo(string memory _tokenURI, uint8 _tier, address _to) public onlyOwner {\\n        require(_to != address(0), \\\"NOT ACCEPT ZERO ADDRESS\\\");\\n        require(bytes(_tokenURI).length > 0, \\\"TOKEN URI MUST NOT NULL\\\");\\n        tokenCount++;\\n        tokenURIs[tokenCount] = _tokenURI;\\n        tokenTiers[tokenCount] = _tier;\\n        _safeMint(_to, tokenCount);\\n    }\\n\\n    function batchMintTo(string[] memory _tokenURI, uint8 _tier, address _to) public onlyOwner {\\n        require(_tokenURI.length > 0, \\\"SIZE LIST URI MUST NOT BE ZERO\\\");\\n        uint256 index;\\n        for (index = 0; index < _tokenURI.length; ++index) {\\n            mintTo(_tokenURI[index], _tier, _to);\\n        }\\n    }\\n\\n    function totalSupply() public view virtual returns (uint256) {\\n        return tokenCount;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return interfaceID == 0x80ac58cd || interfaceID == 0x5b5e139f;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPancakePair {\\n    function getReserves() external view returns (\\n        uint112 _reserve0,\\n        uint112 _reserve1,\\n        uint32 _blockTimestampLast\\n    );\\n}\\n\\ncontract Oracle is Ownable {\\n    uint256 private usdtAmount = 0;\\n    uint256 private tokenAmount = 0;\\n\\n    uint256 private minTokenAmount = 1900000;\\n    uint256 private maxTokenAmount = 2100000;\\n\\n    address public pairAddress;\\n    address public stableToken;\\n    address public tokenAddress;\\n\\n    constructor(address _pairAddress, address _stableToken, address _tokenAddress) {\\n        pairAddress = _pairAddress;\\n        stableToken = _stableToken;\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    function convertUsdBalanceDecimalToTokenDecimal(uint256 _balanceUsdDecimal) public view returns (uint256) {\\n        if (tokenAmount > 0 && usdtAmount > 0) {\\n            uint256 amountTokenDecimal = (_balanceUsdDecimal * tokenAmount) / usdtAmount;\\n            return amountTokenDecimal;\\n        }\\n\\n        (uint256 _reserve0, uint256 _reserve1, ) = IPancakePair(pairAddress).getReserves();\\n        (uint256 _tokenBalance, uint256 _stableBalance) = address(tokenAddress) < address(stableToken) ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n\\n        uint256 _minTokenAmount = (_balanceUsdDecimal * minTokenAmount) / 1000000;\\n        uint256 _maxTokenAmount = (_balanceUsdDecimal * maxTokenAmount) / 1000000;\\n        uint256 _tokenAmount = (_balanceUsdDecimal * _tokenBalance) / _stableBalance;\\n\\n        if (_tokenAmount < _minTokenAmount) {\\n            return _minTokenAmount;\\n        }\\n\\n        if (_tokenAmount > _maxTokenAmount) {\\n            return _maxTokenAmount;\\n        }\\n\\n        return _tokenAmount;\\n    }\\n\\n    function setUsdtAmount(uint256 _usdtAmount) public onlyOwner {\\n        usdtAmount = _usdtAmount;\\n    }\\n\\n    function setTokenAmount(uint256 _tokenAmount) public onlyOwner {\\n        tokenAmount = _tokenAmount;\\n    }\\n\\n    function setMinTokenAmount(uint256 _tokenAmount) public onlyOwner {\\n        minTokenAmount = _tokenAmount;\\n    }\\n\\n    function setMaxTokenAmount(uint256 _tokenAmount) public onlyOwner {\\n        maxTokenAmount = _tokenAmount;\\n    }\\n\\n    /**\\n     * @dev Recover lost bnb and send it to the contract owner\\n     */\\n    function recoverLostBNB() public onlyOwner {\\n        address payable recipient = payable(msg.sender);\\n        recipient.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev withdraw some token balance from contract to owner account\\n     */\\n    function withdrawTokenEmergency(address _token, uint256 _amount) public onlyOwner {\\n        require(_amount > 0, \\\"INVALID AMOUNT\\\");\\n        require(IERC20(_token).transfer(msg.sender, _amount), \\\"CANNOT WITHDRAW TOKEN\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_systemWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refAddress\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"ErrorLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commissionAmount\",\"type\":\"uint256\"}],\"name\":\"PayCommission\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activePayByCurrency\",\"type\":\"bool\"}],\"name\":\"allowBuyNftByCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activePayByCurrencyAndToken\",\"type\":\"bool\"}],\"name\":\"allowBuyNftByCurrencyAndToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activePayByToken\",\"type\":\"bool\"}],\"name\":\"allowBuyNftByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_refCode\",\"type\":\"uint256\"}],\"name\":\"buyByCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_refCode\",\"type\":\"uint256\"}],\"name\":\"buyByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_refCode\",\"type\":\"uint256\"}],\"name\":\"buyByTokenAndCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refCode\",\"type\":\"uint256\"}],\"name\":\"checkValidRefCodeAdvance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionBuyPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currrentReferralCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genReferralCodeForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refCode\",\"type\":\"uint256\"}],\"name\":\"getAccountForReferralCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getActiveMemberForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getChildListForAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getF1ListForAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getMaxCommissionByAddressInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNftCommissionEarnedForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNftSaleValueForAccountInUsdDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralAccountForAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralAccountForAccountExternal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferralCodeForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getReferredNftValueForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTeamNftSaleValueForAccountInUsdDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"}],\"name\":\"getTierUsdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTotalCommissionStakeByAddressInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTotalStakeByAddressInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"isBuyByToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockedReferralDataForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValueCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberMaxStakeValue\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"possibleChangeReferralData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeTime\",\"type\":\"uint256\"}],\"name\":\"setActiveSystemTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_percent\",\"type\":\"uint8\"}],\"name\":\"setCommissionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setContractOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"setCurrencyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDefaultMaxCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setMaxNumberStakeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_payInCurrency\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_payInToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_payInFlex\",\"type\":\"bool\"}],\"name\":\"setPayToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSalePercent\",\"type\":\"uint256\"}],\"name\":\"setSalePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSaleEnd\",\"type\":\"uint256\"}],\"name\":\"setSaleStrategyOnlyCurrencyEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSaleStart\",\"type\":\"uint256\"}],\"name\":\"setSaleStrategyOnlyCurrencyStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleAddress\",\"type\":\"address\"}],\"name\":\"setSaleWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"setStakingContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSystemWallet\",\"type\":\"address\"}],\"name\":\"setSystemWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setTierPriceUsdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typePayCommission\",\"type\":\"uint256\"}],\"name\":\"setTypePayCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiNftsEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"transferNftEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_childLists\",\"type\":\"address[]\"}],\"name\":\"updateChildListForRefAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_valueInUsdWithDecimal\",\"type\":\"uint256\"}],\"name\":\"updateCommissionStakeValueData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_f1Lists\",\"type\":\"address[]\"}],\"name\":\"updateF1ListForRefAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_isBuyByToken\",\"type\":\"bool\"}],\"name\":\"updateIsNftBuyWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_lockedReferralDatas\",\"type\":\"bool[]\"}],\"name\":\"updateLockedReferralDataByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refCode\",\"type\":\"uint256\"}],\"name\":\"updateReferralData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_refCodes\",\"type\":\"uint256[]\"}],\"name\":\"updateReferralDataByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCommissionStake\",\"type\":\"uint256\"}],\"name\":\"updateStakeDataByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_valueInUsdWithDecimal\",\"type\":\"uint256\"}],\"name\":\"updateStakeValueData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalActiveMembers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referredNftValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftCommissionEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftSaleValue\",\"type\":\"uint256\"}],\"name\":\"updateWalletInformation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenEmergencyFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000b161201fecd16e7487188c51ace492bf419b0070000000000000000000000009d0211c1b1a217a574cb55b0e9c367e56debeae00000000000000000000000001026b7468ba0c031ce51dd1b2576a2106caf38200000000000000000000000009a278e67080291c0a9446206f64f438575cfc48000000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}