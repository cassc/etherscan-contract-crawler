{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Gobeyond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns(uint256);\\n    function balanceOf(address account) external view returns(uint256);\\n    function transfer(address recipient, uint256 amount) external returns(bool);\\n    function allowance(address owner, address spender) external view returns(uint256);\\n    function approve(address spender, uint256 amount) external returns(bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract Gobeyond {\\n    IERC20 public usdt;\\n    address addressGobytech;\\n    address addressRemaining;\\n    address addressFive;\\n    address customFees;\\n    uint256 change_token_fee;\\n    uint256 master_key;\\n    uint256 master_key_recovery;\\n\\n    uint256[] basic_plan = [15, 5, 4, 3, 5, 1, 2, 3, 1, 1, 2];\\n    uint256[] intermediate_plan = [15, 5, 4, 3, 5, 1, 2, 3, 1, 1, 2];\\n    uint256[] medium_plan = [15, 5, 4, 3, 5, 1, 2, 3, 1, 1, 2];\\n    uint256[] advanced_plan = [20, 5, 4, 3, 5, 1, 2, 3, 1, 1, 2];\\n\\n    constructor(address _usdt, address gobeyondmaster, address addressremaining, address addressfive, address customfees, uint256 masterkey, uint256 masterkey_recovery, uint256 token_fee) {\\n        usdt = IERC20(_usdt);\\n        addressGobytech = gobeyondmaster;\\n        addressRemaining = addressremaining;\\n        addressFive = addressfive;\\n        customFees = customfees;\\n        master_key = masterkey;\\n        master_key_recovery = masterkey_recovery;\\n        change_token_fee = token_fee;\\n    }\\n\\n    function dispersion(address[] memory wallets, uint256 total_amount, string memory plan, uint256 fee) public payable returns(bool) {\\n        if (this.getUSDTBalance(address(this)) >= total_amount) {\\n            if (fee > 0) {\\n                this.transferUSDT(customFees, fee);\\n            }\\n            uint256 remaining = total_amount;\\n            uint256[] memory current_plan;\\n\\n            if (this.stringCompare(plan, \\\"basic\\\")) {\\n                current_plan = basic_plan;\\n            } else if (this.stringCompare(plan, \\\"intermediate\\\")) {\\n                current_plan = intermediate_plan;\\n            } else if (this.stringCompare(plan, \\\"medium\\\")) {\\n                current_plan = medium_plan;\\n            } else if (this.stringCompare(plan, \\\"advance\\\")) {\\n                current_plan = advanced_plan;\\n            }\\n\\n            for (uint256 i = 0; i < wallets.length; i++) {\\n                uint256 to_send = (total_amount / 100) * current_plan[i];\\n                this.transferUSDT(wallets[i], to_send);\\n                remaining = remaining - to_send;\\n            }\\n\\n            uint256 to_send_five = (total_amount / 100) * 5;\\n            this.transferUSDT(addressFive, to_send_five);\\n            remaining = remaining - to_send_five;\\n\\n            uint256 to_send_master = (total_amount / 100) * 50;\\n            this.transferUSDT(addressGobytech, to_send_master);\\n            remaining = remaining - to_send_master;\\n\\n            this.transferUSDT(addressRemaining, remaining);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function getUSDTBalance(address account) public view returns(uint256) {\\n        return usdt.balanceOf(account);\\n    }\\n\\n    function transferUSDT(address recipient, uint256 amount) public returns(bool) {\\n        require(usdt.transfer(recipient, amount), \\\"Transfer failed\\\");\\n        return true;\\n    }\\n\\n    function setNewWallet(string memory wallet, address new_address, uint256 token) public returns(bool) {\\n        if (token == master_key || token == master_key_recovery) {\\n            if (this.stringCompare(wallet, \\\"master\\\")) {\\n                addressGobytech = new_address;\\n            } else if (this.stringCompare(wallet, \\\"remaining\\\")) {\\n                addressRemaining = new_address;\\n            } else if (this.stringCompare(wallet, \\\"five\\\")) {\\n                addressFive = new_address;\\n            }\\n            return false;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function getAddress(string memory wallet) public view returns(address) {\\n        if (this.stringCompare(wallet, \\\"master\\\")) {\\n            return addressGobytech;\\n        } else if (this.stringCompare(wallet, \\\"remaining\\\")) {\\n            return addressRemaining;\\n        } else if (this.stringCompare(wallet, \\\"five\\\")) {\\n            return addressFive;\\n        } else {\\n            return address(0x0000000000000000000000000000000000000000);\\n        }\\n    }\\n\\n    function getContractBalance() public view returns(uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function stringCompare(string memory str1, string memory str2) public pure returns(bool) {\\n        if (bytes(str1).length != bytes(str2).length) {\\n            return false;\\n        }\\n        return\\n        keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));\\n    }\\n\\n    function getPlan(string memory plan) public view returns(uint256[] memory) {\\n        uint256[] memory current_plan;\\n\\n        if (this.stringCompare(plan, \\\"basic\\\")) {\\n            current_plan = basic_plan;\\n        } else if (this.stringCompare(plan, \\\"intermediate\\\")) {\\n            current_plan = intermediate_plan;\\n        } else if (this.stringCompare(plan, \\\"medium\\\")) {\\n            current_plan = medium_plan;\\n        } else if (this.stringCompare(plan, \\\"advance\\\")) {\\n            current_plan = advanced_plan;\\n        }\\n\\n        return current_plan;\\n    }\\n\\n    function setPlan(string memory plan, uint256[] memory new_plan, uint256 token) public returns(bool) {\\n        if (token == master_key || token == master_key_recovery) {\\n            if (this.stringCompare(plan, \\\"basic\\\")) {\\n                basic_plan = new_plan;\\n            } else if (this.stringCompare(plan, \\\"intermediate\\\")) {\\n                intermediate_plan = new_plan;\\n            } else if (this.stringCompare(plan, \\\"medium\\\")) {\\n                medium_plan = new_plan;\\n            } else if (this.stringCompare(plan, \\\"advance\\\")) {\\n                advanced_plan = new_plan;\\n            }\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function whitdrawal(uint256 token) public returns(bool) {\\n        if (token == master_key_recovery) {\\n            if (this.getUSDTBalance(address(this)) > 2) {\\n                uint256 total = this.getUSDTBalance(address(this));\\n                this.transferUSDT(customFees, total);\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function setMasterKey(uint256 new_token, uint256 master_token ) public returns(bool) {\\n        if (master_token == master_key_recovery && this.getUSDTBalance(address(this)) >= change_token_fee) {\\n            master_key = new_token;\\n            this.transferUSDT(customFees, change_token_fee);\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gobeyondmaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressremaining\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressfive\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"customfees\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterkey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"masterkey_recovery\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"plan\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"dispersion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"plan\",\"type\":\"string\"}],\"name\":\"getPlan\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"master_token\",\"type\":\"uint256\"}],\"name\":\"setMasterKey\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"new_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"setNewWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"plan\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"new_plan\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"setPlan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"str2\",\"type\":\"string\"}],\"name\":\"stringCompare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"whitdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gobeyond", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000a56435e5117b3d68dea7ece72f8dbe5abb71313e000000000000000000000000f100c19c14fef29514f01b79a456462dae22d1ac000000000000000000000000d096c068f0e39d6fe7aeae100cb5808258d0ac1200000000000000000000000015dbf91d59d8f110035d3906b450eb6c0866f089000000000000000000000000000000000000000000000000000000000358fef10000000000000000000000000000000000000000000000000000000000031646000000000000000000000000000000000000000000000001a055690d9db80000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}