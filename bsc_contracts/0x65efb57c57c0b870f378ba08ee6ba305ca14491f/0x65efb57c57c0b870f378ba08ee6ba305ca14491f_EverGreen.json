{"SourceCode": "pragma solidity >=0.4.23 <0.7.0;\r\n\r\ncontract EverGreen{\r\n    \r\n    struct M4User {\r\n        uint8 level; \r\n        mapping(uint => M4Matrix) M4;\r\n    }\r\n    \r\n    struct E3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint reinvestCount;\r\n    }\r\n    struct M4Matrix {\r\n        uint id;\r\n        address useraddress;\r\n        uint upline;\r\n        uint8 partnercount;\r\n        uint partnerdata;\r\n        uint8 reentry;\r\n    }\r\n   \r\n   struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint8 partnercount;\r\n        uint8 maxlevel;\r\n        mapping(uint8 => address[]) partners;\r\n        mapping(uint8 => uint[]) E5Matrix;\r\n        mapping(uint8 => bool) activeE3Levels;\r\n        mapping(uint8 => E3) E3Matrix;\r\n    }\r\n\r\n    struct M4info{\r\n        uint8 matrix;\r\n        uint8 mxlvl;\r\n        uint8 mxrety;\r\n        uint topid;\r\n        uint newid;\r\n        uint benid;\r\n        uint botid;\r\n       \r\n    }\r\n    mapping(address => User) public users;\r\n    mapping(uint8 => M4User) public M4users;\r\n    mapping(uint => address) public userIds;\r\n    mapping(address => uint) public balances; \r\n    mapping(uint8 => uint[]) public L5Matrix;\r\n    \r\n    uint public lastUserId = 2;\r\n    uint8 public constant LAST_LEVEL = 13;\r\n    address public owner;\r\n    uint8[14] private rentmatrx = [0,1,1,1,1,2,4,2,2,2,2,2,3,3];\r\n    uint8[14] private rentids = [0,1,1,2,0,1,1,2,2,4,4,4,1,2];\r\n    uint[5] public matrixbenefit = [0,0.005 ether,0.1 ether,5 ether,0.2 ether];\r\n    uint[14] public matrixprice = [0,0.005 ether,0.01 ether,0.02 ether,0.04 ether,0.10 ether,0.20 ether,0.40 ether,0.80 ether,1.60 ether,3.20 ether,6.40 ether,12.80 ether,25.60 ether];\r\n    uint[14] public uplineben = [0,0,0.005 ether,0.01 ether,0.02 ether,0,0,0.20 ether,0.40 ether,0.80 ether,1.60 ether,3.20 ether,6.40 ether,12.80 ether];\r\n   \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event BuyNew(address indexed user, uint8 indexed level);\r\n    event Payout(address indexed sender,address indexed receiver,uint indexed dividend,uint userid,uint refid,uint8 matrix,uint8 level,uint recid,uint renty);\r\n\r\n   // event Testor21(uint benid,uint topid,uint8 position);\r\n    //event Testor22(uint benid,uint topid,uint8 position);\r\n\r\n    constructor(address ownerAddress) public {\r\n        \r\n        owner = ownerAddress;\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnercount : 0,\r\n            maxlevel : 13\r\n        });\r\n        \r\n        \r\n        \r\n        users[ownerAddress] = user;\r\n        userIds[1] = ownerAddress;\r\n        \r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[ownerAddress].activeE3Levels[i] = true;\r\n        }\r\n        \r\n        \r\n        \r\n        M4Matrix memory m4matrix = M4Matrix({\r\n            id: 1,\r\n            useraddress:owner,\r\n            upline:0,\r\n            partnercount:0,\r\n            partnerdata:0,\r\n            reentry:0\r\n        });\r\n        \r\n        M4User memory m4user = M4User({\r\n            level: 1\r\n        });\r\n        \r\n        for (uint8 i = 1; i <= 5; i++) {\r\n            users[ownerAddress].E5Matrix[i].push(1);\r\n            L5Matrix[i].push(1);\r\n            M4users[i] = m4user;\r\n            M4users[i].M4[1]=m4matrix;\r\n        }\r\n\r\n    }\r\n    \r\n    function() external payable {\r\n        if(msg.data.length == 0) {\r\n            return registration(msg.sender, owner);\r\n        }\r\n        \r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    \r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(msg.value == (matrixprice[1] * 2), \"registration cost 0.005 ether\");\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n        \r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnercount :0,\r\n            maxlevel:1\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        users[userAddress].referrer = referrerAddress;\r\n        users[userAddress].activeE3Levels[1] = true; \r\n        \r\n        userIds[lastUserId] = userAddress;\r\n        \r\n        users[referrerAddress].partners[0].push(userAddress);\r\n        users[referrerAddress].partnercount++;\r\n        lastUserId++;\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n        updateM4Matrix(userAddress,1);\r\n        updateE3Referrer(userAddress,referrerAddress,1);\r\n        \r\n    }\r\n\r\n    function buyNewLevel(uint8 level) external payable {\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(msg.value == (matrixprice[level]), \"invalid price\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n        require(!users[msg.sender].activeE3Levels[level], \"level already activated\");\r\n\r\n        BuyM4Matrix(msg.sender,level);\r\n    }\r\n    \r\n    function BuyM4Matrix(address userAddress, uint8 level) private {\r\n        if (users[userAddress].E3Matrix[level-1].blocked) {\r\n            users[userAddress].E3Matrix[level-1].blocked = false;\r\n        }\r\n    \r\n        address freeD3Referrer = findFreeD3Referrer(msg.sender, level);\r\n        users[userAddress].E3Matrix[level].currentReferrer = freeD3Referrer;\r\n        users[userAddress].activeE3Levels[level] = true;\r\n        users[userAddress].maxlevel = level;\r\n        updateE3Referrer(userAddress, freeD3Referrer, level);\r\n    }\r\n    \r\n    function updateE3Referrer(address userAddress, address referrerAddress,uint8 level) private {\r\n        users[referrerAddress].E3Matrix[level].referrals.push(userAddress);\r\n        uint reentry = users[referrerAddress].E3Matrix[level].reinvestCount;\r\n        uint referral = users[referrerAddress].E3Matrix[level].referrals.length;\r\n        uint reward = matrixprice[level];\r\n        address upline;\r\n         \r\n        \r\n        if (referral == 1) {\r\n            for(uint8 i=0;i<rentids[level];i++){\r\n                reward -= matrixbenefit[rentmatrx[level]];\r\n                updateM4Matrix(referrerAddress, rentmatrx[level]);\r\n            }\r\n            \r\n            if(users[referrerAddress].E3Matrix[level].blocked){\r\n                emit Payout(userAddress,referrerAddress,0,users[userAddress].id,users[referrerAddress].id,1,level,referral,reentry);\r\n                upline = findUnblockReferrer(referrerAddress,level);\r\n                emit Payout(referrerAddress,upline,reward,users[referrerAddress].id,users[upline].id,3,level,referral,0);\r\n        \t    sendreward(upline,reward);\r\n            }else{\r\n                emit Payout(userAddress,referrerAddress,reward,users[userAddress].id,users[referrerAddress].id,1,level,referral,reentry);\r\n        \t    sendreward(referrerAddress,reward);\r\n            }\r\n        }else if (referral == 2) {\r\n            if(users[referrerAddress].E3Matrix[level].blocked){\r\n                emit Payout(userAddress,referrerAddress,0,users[userAddress].id,users[referrerAddress].id,1,level,referral,reentry);\r\n                upline = findUnblockReferrer(referrerAddress,level);\r\n                emit Payout(upline,referrerAddress,reward,users[upline].id,users[referrerAddress].id,3,level,referral,0);\r\n        \t    sendreward(upline,reward);\r\n            }else{\r\n                emit Payout(userAddress,referrerAddress,reward,users[userAddress].id,users[referrerAddress].id,1,level,referral,reentry);\r\n        \t    sendreward(referrerAddress,reward);\r\n            }\r\n        }else if (referral == 3) {\r\n            if(uplineben[level] > 0){\r\n                reward -= uplineben[level];\r\n                if(referrerAddress != owner){\r\n                    if(users[referrerAddress].referrer != owner){\r\n                        upline = users[users[referrerAddress].referrer].referrer;\r\n                    }else{\r\n                        upline =  owner;\r\n                    }\r\n                }else{\r\n                    upline =  owner;\r\n                }\r\n                emit Payout(referrerAddress,upline,reward,users[referrerAddress].id,users[upline].id,2,level,referral,0);\r\n        \t    sendreward(upline,reward);\r\n            }\r\n            if(users[referrerAddress].E3Matrix[level].blocked){\r\n                emit Payout(userAddress,referrerAddress,0,users[userAddress].id,users[referrerAddress].id,1,level,referral,reentry);\r\n                upline = findUnblockReferrer(referrerAddress,level);\r\n                emit Payout(referrerAddress,upline,reward,users[referrerAddress].id,users[upline].id,3,level,referral,0);\r\n        \t    sendreward(upline,reward);\r\n            }else{\r\n                emit Payout(userAddress,referrerAddress,reward,users[userAddress].id,users[referrerAddress].id,1,level,referral,reentry);\r\n        \t    sendreward(referrerAddress,reward);\r\n            }\r\n        }else if (referral == 4) {\r\n            emit Payout(userAddress,referrerAddress,0,users[userAddress].id,users[referrerAddress].id,1,level,referral,reentry);\r\n        \t//sendreward(referrerAddress,reward);\r\n        \t\r\n            users[referrerAddress].E3Matrix[level].referrals = new address[](0);\r\n            if (!users[referrerAddress].activeE3Levels[level+1] && level != LAST_LEVEL) {\r\n        \t\tusers[referrerAddress].E3Matrix[level].blocked = true;\r\n            }\r\n            \r\n            address freeReferrerAddress;\r\n            if (referrerAddress != owner) {\r\n                freeReferrerAddress = findFreeD3Referrer(referrerAddress, level);\r\n            }else{\r\n                freeReferrerAddress = owner;\r\n            }\r\n            if (users[referrerAddress].E3Matrix[level].currentReferrer != freeReferrerAddress) {\r\n                users[referrerAddress].E3Matrix[level].currentReferrer = freeReferrerAddress;\r\n            }\r\n            users[referrerAddress].E3Matrix[level].reinvestCount++;\r\n            updateE3Referrer(referrerAddress, freeReferrerAddress, level);\r\n            \r\n        }\r\n \r\n    }\r\n   \r\n    function updateM4Matrix(address userAddress, uint8 matrixlvl) private {\r\n    \r\n        \r\n        M4info memory m4info;\r\n        \r\n        m4info.matrix = 5;\r\n        m4info.mxlvl = 6;\r\n        m4info.mxrety = 11;\r\n    \r\n        if(matrixlvl == 4){\r\n            m4info.matrix = 4;\r\n            m4info.mxlvl = 10;\r\n           m4info. mxrety = 3; \r\n        }else if(matrixlvl == 3){\r\n            m4info.matrix = 3;\r\n            m4info.mxlvl = 5;\r\n            m4info.mxrety = 1;\r\n        }\r\n        \r\n        m4info.newid = uint(L5Matrix[matrixlvl].length);\r\n        m4info.newid = m4info.newid + 1;\r\n        m4info.topid = setUpperLine5(m4info.newid,1,m4info.matrix);\r\n        M4Matrix memory m4matrix = M4Matrix({\r\n            id: m4info.newid,\r\n            useraddress:userAddress,\r\n            upline:m4info.topid,\r\n            partnercount:0,\r\n            partnerdata:0,\r\n            reentry:0\r\n        });\r\n        \r\n        L5Matrix[matrixlvl].push(users[userAddress].id);\r\n        users[userAddress].E5Matrix[matrixlvl].push(m4info.newid);\r\n        M4users[matrixlvl].M4[m4info.newid]=m4matrix;\r\n        M4users[matrixlvl].M4[m4info.topid].partnercount++;\r\n        \r\n        uint8 pos = M4users[matrixlvl].M4[m4info.topid].partnercount;\r\n        uint8 lvl = 0;\r\n        address benaddress;\r\n        bool flag;\r\n        uint numcount =1;\r\n    \r\n        \r\n        flag = true;\r\n        \r\n        while(flag){\r\n            lvl++;\r\n            m4info.topid = setUpperLine5(m4info.newid,lvl,m4info.matrix);\r\n            pos = 0;\r\n        \r\n\t\t\tif(m4info.topid > 0){\r\n\t\t\t    \r\n\t\t\t\tif(lvl == m4info.mxlvl){\r\n\t\t\t\t\tm4info.benid = m4info.topid;\r\n\t\t\t\t\tflag = false;\r\n\t\t\t\t}else{\r\n\t\t\t\t    m4info.botid = setDownlineLimit(m4info.topid,lvl,m4info.matrix);\r\n\t\t\t    \r\n\t\t\t\t    //emit D5NewId(newid,topid,botid,position,numcount);\r\n\t\t\t\t\tif(m4info.newid == m4info.botid){\r\n\t\t\t\t\t\tpos = 1;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t   \r\n\t\t\t    \r\n\t\t\t\t\t\tfor (uint8 i = 1; i <= m4info.matrix; i++) {\r\n\t\t\t\t\r\n\t\t\t\t\t\t\tif(m4info.newid < (m4info.botid + (numcount * i))){\r\n\t\t\t\t\t\t\t\tpos = i;\r\n\t\t\t\t\t\t\t\ti = m4info.matrix;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t            \r\n\t\t\t\t\tif((pos == 2) || (pos == 4)){\r\n\t\t\t\t\t\tm4info.benid = m4info.topid;\r\n\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\r\n\t\t\t//\tlvl++;\r\n\t\t\tnumcount = numcount * m4info.matrix;\r\n\t\t\t}else{\r\n\t\t\t\tm4info.benid =0;\r\n\t\t\t\tflag = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n     /*\r\n        while(pos > 1){\r\n            if(lvl < mxlvl){\r\n                lvl++;\r\n              //  newid = uint(L5Matrix[lvl].length);\r\n             //   newid += 1;\r\n                topid = setUpperLine5(newid,lvl,matrix);\r\n                if(topid == 0){\r\n                    topid = 1;\r\n                }\r\n                pos = M4users[matrixlvl].M4[topid].partnercount;\r\n                }\r\n            }\r\n        */\r\n        \r\n        \r\n\t\tif(m4info.benid > 0){\r\n\t\t    if((lvl >= 3) && (lvl < m4info.mxlvl)){\r\n\t\t        numcount = numcount / m4info.matrix;\r\n\t\t        if(((m4info.botid + numcount) + m4info.mxrety) >= m4info.newid){\r\n\t\t            flag = true;\r\n\t\t \t\t}\r\n\t\t\t\t    \r\n\t\t    }\r\n\t\t\t\t\r\n            if((lvl == m4info.mxlvl) && ((m4info.botid + m4info.mxrety) >= m4info.newid)){\r\n                flag = true;\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\t\tif(m4info.benid == 0){\r\n\t\t    m4info.benid =1;\r\n\t\t    lvl = 0;\r\n\t\t}\r\n    \r\n        benaddress = M4users[matrixlvl].M4[m4info.benid].useraddress;\r\n\r\n        if(flag){\r\n            //emit Payout(benaddress,benaddress,0,users[benaddress].id,users[benaddress].id,3,lvl,m4info.benid);\r\n      //      emit Testor22(m4info.newid,m4info.benid,lvl);\r\n            updateM4Matrix(M4users[matrixlvl].M4[m4info.benid].useraddress,matrixlvl);\r\n        }else{\r\n            uint8 matrixlvl1 = matrixlvl +3;\r\n            emit Payout(benaddress,benaddress,matrixbenefit[matrixlvl],users[benaddress].id,users[benaddress].id,matrixlvl1,lvl,m4info.benid,0);\r\n        //    emit Testor21(m4info.newid,m4info.benid,lvl);\r\n            sendreward(benaddress,matrixbenefit[matrixlvl]);\r\n          }\r\n    }\r\n \r\n    function findFreeD3Referrer(address userAddress, uint8 level) private view returns(address) {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeE3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function findUnblockReferrer(address userAddress, uint8 level) private view returns(address) {\r\n        while (!true) {\r\n            if (users[users[userAddress].referrer].E3Matrix[level].blocked) {\r\n                return users[userAddress].referrer;\r\n            }\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n    \r\n    function setUpperLine5(uint TrefId,uint8 level,uint8 matrix) internal pure returns(uint){\r\n        \r\n    \tfor (uint8 i = 1; i <= level; i++) {\r\n    \t\tif(TrefId == 1){\r\n        \t\tTrefId = 0;\r\n    \t\t}else if(TrefId == 0){\r\n        \t\tTrefId = 0;\r\n    \t\t}else if((1 < TrefId) && (TrefId < (matrix + 2))){\r\n        \t\tTrefId = 1;\r\n\t\t\t}else{\r\n\t\t\t\tTrefId -= 1;\r\n\t\t\t\tif((TrefId % matrix) > 0){\r\n\t\t\t\tTrefId = uint(TrefId / matrix);\r\n\t\t\t\tTrefId += 1;\r\n\t\t\t\t}else{\r\n\t\t\t\tTrefId = uint(TrefId / matrix);  \r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\t\r\n    \t}\r\n    \treturn TrefId;\r\n    }\r\n    \r\n    function setDownlineLimit(uint TrefId,uint8 level,uint8 matrix) internal pure returns(uint){\r\n    \tuint8 ded = 1;\r\n\t\tuint8 add = 2;\r\n    \tfor (uint8 i = 1; i < level; i++) {\r\n    \t\tded *= matrix;\r\n\t\t\tadd += ded;\r\n\t\t}\r\n\t\tded *= matrix;\r\n\t\tTrefId = ((ded * TrefId) - ded) + add;\r\n    \treturn TrefId;\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    \r\n    function usersD5Matrix(address userAddress,uint8 level) public view returns(uint, uint[] memory) {\r\n        return (L5Matrix[level].length,users[userAddress].E5Matrix[level]);\r\n    }\r\n    \r\n    function usersActiveE3Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeE3Levels[level];\r\n    }\r\n\r\n    function usersE3Matrix(address userAddress, uint8 level) public view returns(address, address[] memory, bool,uint) {\r\n        return (users[userAddress].E3Matrix[level].currentReferrer,\r\n                users[userAddress].E3Matrix[level].referrals,\r\n                users[userAddress].E3Matrix[level].blocked,\r\n                users[userAddress].E3Matrix[level].reinvestCount);\r\n    }\r\n    \r\n    function userspartner(address userAddress) public view returns(address[] memory) {\r\n        return (users[userAddress].partners[0]);\r\n    }\r\n    \r\n    function sendreward(address receiver,uint dividend) private {\r\n        \r\n        if (!address(uint160(receiver)).send(dividend)) {\r\n            return address(uint160(receiver)).transfer(address(this).balance);\r\n        }\r\n        \r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"BuyNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"renty\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"L5Matrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"M4users\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrixbenefit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrixprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uplineben\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"partnercount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxlevel\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveE3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersD5Matrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersE3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userspartner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EverGreen", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001b17d766ac986f1506f2fa5e5cd52002fc3e920d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://37b9b23540c87ae0e5b0bf2b9aaf27888992f38d64a6ea5eb3db56b214311b95"}