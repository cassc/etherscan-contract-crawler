{"SourceCode": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * \r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IStakedRoya.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IStakedRoya {\r\n  function stake(address to, uint256 amount) external;\r\n\r\n  function redeem(address to, uint256 amount) external;\r\n\r\n  function cooldown() external;\r\n\r\n  function claimRewards(address to, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/ITransferHook.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ITransferHook {\r\n    function onTransfer(address from, address to, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/lib/Context.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n * Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20Detailed.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Interface for ERC20 including metadata\r\n **/\r\ninterface IERC20Detailed is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n * Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ERC20.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20\r\n * @notice Basic ERC20 implementation\r\n * @author Roya\r\n **/\r\ncontract ERC20 is Context, IERC20, IERC20Detailed {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n  uint256 private _totalSupply;\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(\r\n    string memory name,\r\n    string memory symbol,\r\n    uint8 decimals\r\n  ) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token\r\n   **/\r\n  function name() public override view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token\r\n   **/\r\n  function symbol() public override view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the decimals of the token\r\n   **/\r\n  function decimals() public override view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the total supply of the token\r\n   **/\r\n  function totalSupply() public override view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @return the balance of the token\r\n   **/\r\n  function balanceOf(address account) public override view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev executes a transfer of tokens from msg.sender to recipient\r\n   * @param recipient the recipient of the tokens\r\n   * @param amount the amount of tokens being transferred\r\n   * @return true if the transfer succeeds, false otherwise\r\n   **/\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev returns the allowance of spender on the tokens owned by owner\r\n   * @param owner the owner of the tokens\r\n   * @param spender the user allowed to spend the owner's tokens\r\n   * @return the amount of owner's tokens spender is allowed to spend\r\n   **/\r\n  function allowance(address owner, address spender)\r\n    public\r\n    virtual\r\n    override\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev allows spender to spend the tokens owned by msg.sender\r\n   * @param spender the user allowed to spend msg.sender tokens\r\n   * @return true\r\n   **/\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev executes a transfer of token from sender to recipient, if msg.sender is allowed to do so\r\n   * @param sender the owner of the tokens\r\n   * @param recipient the recipient of the tokens\r\n   * @param amount the amount of tokens being transferred\r\n   * @return true if the transfer succeeds, false otherwise\r\n   **/\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(\r\n      sender,\r\n      _msgSender(),\r\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev increases the allowance of spender to spend msg.sender tokens\r\n   * @param spender the user allowed to spend on behalf of msg.sender\r\n   * @param addedValue the amount being added to the allowance\r\n   * @return true\r\n   **/\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev decreases the allowance of spender to spend msg.sender tokens\r\n   * @param spender the user allowed to spend on behalf of msg.sender\r\n   * @param subtractedValue the amount being subtracted to the allowance\r\n   * @return true\r\n   **/\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender].sub(\r\n        subtractedValue,\r\n        'ERC20: decreased allowance below zero'\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function _transfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(sender != address(0), 'ERC20: transfer from the zero address');\r\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\r\n\r\n    _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    _balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance');\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), 'ERC20: mint to the zero address');\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), 'ERC20: burn from the zero address');\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    _balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance');\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    require(owner != address(0), 'ERC20: approve from the zero address');\r\n    require(spender != address(0), 'ERC20: approve to the zero address');\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _setName(string memory newName) internal {\r\n    _name = newName;\r\n  }\r\n\r\n  function _setSymbol(string memory newSymbol) internal {\r\n    _symbol = newSymbol;\r\n  }\r\n\r\n  function _setDecimals(uint8 newDecimals) internal {\r\n    _decimals = newDecimals;\r\n  }\r\n\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n}\r\n\r\n// File: contracts/lib/ERC20WithSnapshot.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20WithSnapshot\r\n * @notice ERC20 including snapshots of balances on transfer-related actions\r\n * @author Roya\r\n **/\r\ncontract ERC20WithSnapshot is ERC20 {\r\n\r\n    /// @dev snapshot of a value on a specific block, used for balances\r\n    struct Snapshot {\r\n        uint128 blockNumber;\r\n        uint128 value;\r\n    }\r\n\r\n    mapping (address => mapping (uint256 => Snapshot)) public _snapshots;\r\n    mapping (address => uint256) public _countsSnapshots;\r\n    /// @dev reference to the Roya governance contract to call (if initialized) on _beforeTokenTransfer\r\n    /// !!! IMPORTANT The Roya governance is considered a trustable contract, being its responsibility\r\n    /// to control all potential reentrancies by calling back the this contract\r\n    ITransferHook public _royaGovernance;\r\n\r\n    event SnapshotDone(address owner, uint128 oldValue, uint128 newValue);\r\n\r\n    constructor(string memory name, string memory symbol, uint8 decimals) public ERC20(name, symbol, decimals) {}\r\n\r\n    function _setRoyaGovernance(ITransferHook royaGovernance) internal virtual {\r\n        _royaGovernance = royaGovernance;\r\n    }\r\n\r\n    /**\r\n    * @dev Writes a snapshot for an owner of tokens\r\n    * @param owner The owner of the tokens\r\n    * @param oldValue The value before the operation that is gonna be executed after the snapshot\r\n    * @param newValue The value after the operation\r\n    */\r\n    function _writeSnapshot(address owner, uint128 oldValue, uint128 newValue) internal virtual {\r\n        uint128 currentBlock = uint128(block.number);\r\n\r\n        uint256 ownerCountOfSnapshots = _countsSnapshots[owner];\r\n        mapping (uint256 => Snapshot) storage snapshotsOwner = _snapshots[owner];\r\n\r\n        // Doing multiple operations in the same block\r\n        if (ownerCountOfSnapshots != 0 && snapshotsOwner[ownerCountOfSnapshots.sub(1)].blockNumber == currentBlock) {\r\n            snapshotsOwner[ownerCountOfSnapshots.sub(1)].value = newValue;\r\n        } else {\r\n            snapshotsOwner[ownerCountOfSnapshots] = Snapshot(currentBlock, newValue);\r\n            _countsSnapshots[owner] = ownerCountOfSnapshots.add(1);\r\n        }\r\n\r\n        emit SnapshotDone(owner, oldValue, newValue);\r\n    }\r\n\r\n    /**\r\n    * @dev Writes a snapshot before any operation involving transfer of value: _transfer, _mint and _burn\r\n    * - On _transfer, it writes snapshots for both \"from\" and \"to\"\r\n    * - On _mint, only for _to\r\n    * - On _burn, only for _from\r\n    * @param from the from address\r\n    * @param to the to address\r\n    * @param amount the amount to transfer\r\n    */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\r\n        if (from == to) {\r\n            return;\r\n        }\r\n\r\n        if (from != address(0)) {\r\n            uint256 fromBalance = balanceOf(from);\r\n            _writeSnapshot(from, uint128(fromBalance), uint128(fromBalance.sub(amount)));\r\n        }\r\n        if (to != address(0)) {\r\n            uint256 toBalance = balanceOf(to);\r\n            _writeSnapshot(to, uint128(toBalance), uint128(toBalance.add(amount)));\r\n        }\r\n\r\n        // caching the roya governance address to avoid multiple state loads\r\n        ITransferHook royaGovernance = _royaGovernance;\r\n        if (royaGovernance != ITransferHook(0)) {\r\n            royaGovernance.onTransfer(from, to, amount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Address.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n * From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\r\n * Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    \r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/utils/VersionedInitializable.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title VersionedInitializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n *\r\n * @author Roya, inspired by the OpenZeppelin Initializable contract\r\n */\r\nabstract contract VersionedInitializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    uint256 internal lastInitializedRevision = 0;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        uint256 revision = getRevision();\r\n        require(\r\n            revision > lastInitializedRevision,\r\n            'Contract instance has already been initialized'\r\n        );\r\n\r\n        lastInitializedRevision = revision;\r\n\r\n        _;\r\n    }\r\n\r\n    /// @dev returns the revision number of the contract.\r\n    /// Needs to be defined in the inherited class as a constant.\r\n    function getRevision() internal virtual pure returns (uint256);\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/lib/DistributionTypes.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\nlibrary DistributionTypes {\r\n  struct AssetConfigInput {\r\n    uint128 emissionPerSecond;\r\n    uint256 totalStaked;\r\n    address underlyingAsset;\r\n  }\r\n\r\n  struct UserStakeInput {\r\n    address underlyingAsset;\r\n    uint256 stakedByUser;\r\n    uint256 totalStaked;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IRoyaDistributionManager.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ninterface IRoyaDistributionManager {\r\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput) external;\r\n}\r\n\r\n// File: contracts/stake/RoyaDistributionManager.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RoyaDistributionManager\r\n * @notice Accounting contract to manage multiple staking distributions\r\n * @author Roya\r\n **/\r\ncontract RoyaDistributionManager is IRoyaDistributionManager {\r\n  using SafeMath for uint256;\r\n\r\n  struct AssetData {\r\n    uint128 emissionPerSecond;\r\n    uint128 lastUpdateTimestamp;\r\n    uint256 index;\r\n    mapping(address => uint256) users;\r\n  }\r\n\r\n  uint256 public immutable DISTRIBUTION_END;\r\n\r\n  address public immutable EMISSION_MANAGER;\r\n\r\n  uint8 public constant PRECISION = 18;\r\n\r\n  mapping(address => AssetData) public assets;\r\n\r\n  event AssetConfigUpdated(address indexed asset, uint256 emission);\r\n  event AssetIndexUpdated(address indexed asset, uint256 index);\r\n  event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\r\n\r\n  constructor(address emissionManager, uint256 distributionDuration) public {\r\n    DISTRIBUTION_END = block.timestamp.add(distributionDuration);\r\n    EMISSION_MANAGER = emissionManager;\r\n  }\r\n\r\n  /**\r\n   * @dev Configures the distribution of rewards for a list of assets\r\n   * @param assetsConfigInput The list of configurations to apply\r\n   **/\r\n  function configureAssets(DistributionTypes.AssetConfigInput[] calldata assetsConfigInput) external override {\r\n    require(msg.sender == EMISSION_MANAGER, 'ONLY_EMISSION_MANAGER');\r\n\r\n    for (uint256 i = 0; i < assetsConfigInput.length; i++) {\r\n      AssetData storage assetConfig = assets[assetsConfigInput[i].underlyingAsset];\r\n\r\n      _updateAssetStateInternal(\r\n        assetsConfigInput[i].underlyingAsset,\r\n        assetConfig,\r\n        assetsConfigInput[i].totalStaked\r\n      );\r\n\r\n      assetConfig.emissionPerSecond = assetsConfigInput[i].emissionPerSecond;\r\n\r\n      emit AssetConfigUpdated(\r\n        assetsConfigInput[i].underlyingAsset,\r\n        assetsConfigInput[i].emissionPerSecond\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the state of one distribution, mainly rewards index and timestamp\r\n   * @param underlyingAsset The address used as key in the distribution, for example sAAVE or the aTokens addresses on Roya\r\n   * @param assetConfig Storage pointer to the distribution's config\r\n   * @param totalStaked Current total of staked assets for this distribution\r\n   * @return The new distribution index\r\n   **/\r\n  function _updateAssetStateInternal(\r\n    address underlyingAsset,\r\n    AssetData storage assetConfig,\r\n    uint256 totalStaked\r\n  ) internal returns (uint256) {\r\n    uint256 oldIndex = assetConfig.index;\r\n    uint128 lastUpdateTimestamp = assetConfig.lastUpdateTimestamp;\r\n\r\n    if (block.timestamp == lastUpdateTimestamp) {\r\n      return oldIndex;\r\n    }\r\n\r\n    uint256 newIndex = _getAssetIndex(\r\n      oldIndex,\r\n      assetConfig.emissionPerSecond,\r\n      lastUpdateTimestamp,\r\n      totalStaked\r\n    );\r\n\r\n    if (newIndex != oldIndex) {\r\n      assetConfig.index = newIndex;\r\n      emit AssetIndexUpdated(underlyingAsset, newIndex);\r\n    }\r\n\r\n    assetConfig.lastUpdateTimestamp = uint128(block.timestamp);\r\n\r\n    return newIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the state of an user in a distribution\r\n   * @param user The user's address\r\n   * @param asset The address of the reference asset of the distribution\r\n   * @param stakedByUser Amount of tokens staked by the user in the distribution at the moment\r\n   * @param totalStaked Total tokens staked in the distribution\r\n   * @return The accrued rewards for the user until the moment\r\n   **/\r\n  function _updateUserAssetInternal(\r\n    address user,\r\n    address asset,\r\n    uint256 stakedByUser,\r\n    uint256 totalStaked\r\n  ) internal returns (uint256) {\r\n    AssetData storage assetData = assets[asset];\r\n    uint256 userIndex = assetData.users[user];\r\n    uint256 accruedRewards = 0;\r\n\r\n    uint256 newIndex = _updateAssetStateInternal(asset, assetData, totalStaked);\r\n\r\n    if (userIndex != newIndex) {\r\n      if (stakedByUser != 0) {\r\n        accruedRewards = _getRewards(stakedByUser, newIndex, userIndex);\r\n      }\r\n\r\n      assetData.users[user] = newIndex;\r\n      emit UserIndexUpdated(user, asset, newIndex);\r\n    }\r\n\r\n    return accruedRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Used by \"frontend\" stake contracts to update the data of an user when claiming rewards from there\r\n   * @param user The address of the user\r\n   * @param stakes List of structs of the user data related with his stake\r\n   * @return The accrued rewards for the user until the moment\r\n   **/\r\n  function _claimRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\r\n    internal\r\n    returns (uint256)\r\n  {\r\n    uint256 accruedRewards = 0;\r\n\r\n    for (uint256 i = 0; i < stakes.length; i++) {\r\n      accruedRewards = accruedRewards.add(\r\n        _updateUserAssetInternal(\r\n          user,\r\n          stakes[i].underlyingAsset,\r\n          stakes[i].stakedByUser,\r\n          stakes[i].totalStaked\r\n        )\r\n      );\r\n    }\r\n\r\n    return accruedRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the accrued rewards for an user over a list of distribution\r\n   * @param user The address of the user\r\n   * @param stakes List of structs of the user data related with his stake\r\n   * @return The accrued rewards for the user until the moment\r\n   **/\r\n  function _getUnclaimedRewards(address user, DistributionTypes.UserStakeInput[] memory stakes)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 accruedRewards = 0;\r\n\r\n    for (uint256 i = 0; i < stakes.length; i++) {\r\n      AssetData storage assetConfig = assets[stakes[i].underlyingAsset];\r\n      uint256 assetIndex = _getAssetIndex(\r\n        assetConfig.index,\r\n        assetConfig.emissionPerSecond,\r\n        assetConfig.lastUpdateTimestamp,\r\n        stakes[i].totalStaked\r\n      );\r\n\r\n      accruedRewards = accruedRewards.add(\r\n        _getRewards(stakes[i].stakedByUser, assetIndex, assetConfig.users[user])\r\n      );\r\n    }\r\n    return accruedRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for the calculation of user's rewards on a distribution\r\n   * @param principalUserBalance Amount staked by the user on a distribution\r\n   * @param reserveIndex Current index of the distribution\r\n   * @param userIndex Index stored for the user, representation his staking moment\r\n   * @return The rewards\r\n   **/\r\n  function _getRewards(\r\n    uint256 principalUserBalance,\r\n    uint256 reserveIndex,\r\n    uint256 userIndex\r\n  ) internal pure returns (uint256) {\r\n    return principalUserBalance.mul(reserveIndex.sub(userIndex)).div(10**uint256(PRECISION));\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the next value of an specific distribution index, with validations\r\n   * @param currentIndex Current index of the distribution\r\n   * @param emissionPerSecond Representing the total rewards distributed per second per asset unit, on the distribution\r\n   * @param lastUpdateTimestamp Last moment this distribution was updated\r\n   * @param totalBalance of tokens considered for the distribution\r\n   * @return The new index.\r\n   **/\r\n  function _getAssetIndex(\r\n    uint256 currentIndex,\r\n    uint256 emissionPerSecond,\r\n    uint128 lastUpdateTimestamp,\r\n    uint256 totalBalance\r\n  ) internal view returns (uint256) {\r\n    if (\r\n      emissionPerSecond == 0 ||\r\n      totalBalance == 0 ||\r\n      lastUpdateTimestamp == block.timestamp ||\r\n      lastUpdateTimestamp >= DISTRIBUTION_END\r\n    ) {\r\n      return currentIndex;\r\n    }\r\n\r\n    uint256 currentTimestamp = block.timestamp > DISTRIBUTION_END\r\n      ? DISTRIBUTION_END\r\n      : block.timestamp;\r\n    uint256 timeDelta = currentTimestamp.sub(lastUpdateTimestamp);\r\n    return\r\n      emissionPerSecond.mul(timeDelta).mul(10**uint256(PRECISION)).div(totalBalance).add(\r\n        currentIndex\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the data of an user on a distribution\r\n   * @param user Address of the user\r\n   * @param asset The address of the reference asset of the distribution\r\n   * @return The new index\r\n   **/\r\n  function getUserAssetData(address user, address asset) public view returns (uint256) {\r\n    return assets[asset].users[user];\r\n  }\r\n}\r\n\r\n// File: contracts/stake/StakedToken.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title StakedToken\r\n * @notice Contract to stake Roya token, tokenize the position and get rewards, inheriting from a distribution manager contract\r\n * @author Roya\r\n **/\r\ncontract StakedToken is IStakedRoya, ERC20WithSnapshot, VersionedInitializable, RoyaDistributionManager {\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public constant REVISION = 1;\r\n\r\n  IERC20 public immutable STAKED_TOKEN;\r\n  IERC20 public immutable REWARD_TOKEN;\r\n  uint256 public immutable COOLDOWN_SECONDS;\r\n\r\n  /// @notice Seconds available to redeem once the cooldown period is fullfilled\r\n  uint256 public immutable UNSTAKE_WINDOW;\r\n\r\n  /// @notice Address to pull from the rewards, needs to have approved this contract\r\n  address public immutable REWARDS_VAULT;\r\n\r\n  mapping(address => uint256) public stakerRewardsToClaim;\r\n  mapping(address => uint256) public stakersCooldowns;\r\n\r\n  event Staked(address indexed from, address indexed onBehalfOf, uint256 amount);\r\n  event Redeem(address indexed from, address indexed to, uint256 amount);\r\n\r\n  event RewardsAccrued(address user, uint256 amount);\r\n  event RewardsClaimed(address indexed from, address indexed to, uint256 amount);\r\n\r\n  event Cooldown(address indexed user);\r\n\r\n  constructor(\r\n    IERC20 stakedToken,\r\n    IERC20 rewardToken,\r\n    uint256 cooldownSeconds,\r\n    uint256 unstakeWindow,\r\n    address rewardsVault,\r\n    address emissionManager,\r\n    uint128 distributionDuration,\r\n    string memory name,\r\n    string memory symbol,\r\n    uint8 decimals\r\n  ) public ERC20WithSnapshot(name, symbol, decimals) RoyaDistributionManager(emissionManager, distributionDuration) {\r\n    STAKED_TOKEN = stakedToken;\r\n    REWARD_TOKEN = rewardToken;\r\n    COOLDOWN_SECONDS = cooldownSeconds;\r\n    UNSTAKE_WINDOW = unstakeWindow;\r\n    REWARDS_VAULT = rewardsVault;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by the proxy contract\r\n   **/\r\n  function initialize(ITransferHook royaGovernance, string calldata name, string calldata symbol, uint8 decimals) external initializer {\r\n    _setName(name);\r\n    _setSymbol(symbol);\r\n    _setDecimals(decimals);\r\n    _setRoyaGovernance(royaGovernance);\r\n  }\r\n\r\n  function getStakersCooldowns(address user) public view returns(uint256){\r\n    uint256 cooldownStartTimestamp = stakersCooldowns[user];\r\n    if (block.timestamp < cooldownStartTimestamp.add(COOLDOWN_SECONDS))\r\n        return 1;\r\n    else if (block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW)\r\n        return 2;\r\n    else \r\n        return 0;\r\n  }\r\n\r\n  function stake(address onBehalfOf, uint256 amount) external override {\r\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\r\n    uint256 balanceOfUser = balanceOf(onBehalfOf);\r\n\r\n    uint256 accruedRewards = _updateUserAssetInternal(\r\n      onBehalfOf,\r\n      address(this),\r\n      balanceOfUser,\r\n      totalSupply()\r\n    );\r\n    if (accruedRewards != 0) {\r\n      emit RewardsAccrued(onBehalfOf, accruedRewards);\r\n      stakerRewardsToClaim[onBehalfOf] = stakerRewardsToClaim[onBehalfOf].add(accruedRewards);\r\n    }\r\n\r\n    stakersCooldowns[onBehalfOf] = getNextCooldownTimestamp(0, amount, onBehalfOf, balanceOfUser);\r\n\r\n    _mint(onBehalfOf, amount);\r\n    IERC20(STAKED_TOKEN).safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n    emit Staked(msg.sender, onBehalfOf, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Redeems staked tokens, and stop earning rewards\r\n   * @param to Address to redeem to\r\n   * @param amount Amount to redeem\r\n   **/\r\n  function redeem(address to, uint256 amount) external override {\r\n    require(amount != 0, 'INVALID_ZERO_AMOUNT');\r\n    //solium-disable-next-line\r\n    uint256 cooldownStartTimestamp = stakersCooldowns[msg.sender];\r\n    require(\r\n      block.timestamp > cooldownStartTimestamp.add(COOLDOWN_SECONDS),\r\n      'INSUFFICIENT_COOLDOWN'\r\n    );\r\n    require(\r\n      block.timestamp.sub(cooldownStartTimestamp.add(COOLDOWN_SECONDS)) <= UNSTAKE_WINDOW,\r\n      'UNSTAKE_WINDOW_FINISHED'\r\n    );\r\n    uint256 balanceOfMessageSender = balanceOf(msg.sender);\r\n\r\n    uint256 amountToRedeem = (amount > balanceOfMessageSender) ? balanceOfMessageSender : amount;\r\n\r\n    _updateCurrentUnclaimedRewards(msg.sender, balanceOfMessageSender, true);\r\n\r\n    _burn(msg.sender, amountToRedeem);\r\n\r\n    if (balanceOfMessageSender.sub(amountToRedeem) == 0) {\r\n      stakersCooldowns[msg.sender] = 0;\r\n    }\r\n\r\n    IERC20(STAKED_TOKEN).safeTransfer(to, amountToRedeem);\r\n\r\n    emit Redeem(msg.sender, to, amountToRedeem);\r\n  }\r\n\r\n  /**\r\n   * @dev Activates the cooldown period to unstake\r\n   * - It can't be called if the user is not staking\r\n   **/\r\n  function cooldown() external override {\r\n    require(balanceOf(msg.sender) != 0, \"INVALID_BALANCE_ON_COOLDOWN\");\r\n    //solium-disable-next-line\r\n    stakersCooldowns[msg.sender] = block.timestamp;\r\n\r\n    emit Cooldown(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Claims an `amount` of `REWARD_TOKEN` to the address `to`\r\n   * @param to Address to stake for\r\n   * @param amount Amount to stake\r\n   **/\r\n  function claimRewards(address to, uint256 amount) external override {\r\n    uint256 newTotalRewards = _updateCurrentUnclaimedRewards(\r\n      msg.sender,\r\n      balanceOf(msg.sender),\r\n      false\r\n    );\r\n    uint256 amountToClaim = (amount == type(uint256).max) ? newTotalRewards : amount;\r\n\r\n    stakerRewardsToClaim[msg.sender] = newTotalRewards.sub(amountToClaim, \"INVALID_AMOUNT\");\r\n\r\n    REWARD_TOKEN.safeTransferFrom(REWARDS_VAULT, to, amountToClaim);\r\n\r\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal ERC20 _transfer of the tokenized staked tokens\r\n   * @param from Address to transfer from\r\n   * @param to Address to transfer to\r\n   * @param amount Amount to transfer\r\n   **/\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal override {\r\n    uint256 balanceOfFrom = balanceOf(from);\r\n    // Sender\r\n    _updateCurrentUnclaimedRewards(from, balanceOfFrom, true);\r\n\r\n    // Recipient\r\n    if (from != to) {\r\n      uint256 balanceOfTo = balanceOf(to);\r\n      _updateCurrentUnclaimedRewards(to, balanceOfTo, true);\r\n\r\n      uint256 previousSenderCooldown = stakersCooldowns[from];\r\n      stakersCooldowns[to] = getNextCooldownTimestamp(previousSenderCooldown, amount, to, balanceOfTo);\r\n      // if cooldown was set and whole balance of sender was transferred - clear cooldown\r\n      if (balanceOfFrom == amount && previousSenderCooldown != 0) {\r\n        stakersCooldowns[from] = 0;\r\n      }\r\n    }\r\n\r\n    super._transfer(from, to, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the user state related with his accrued rewards\r\n   * @param user Address of the user\r\n   * @param userBalance The current balance of the user\r\n   * @param updateStorage Boolean flag used to update or not the stakerRewardsToClaim of the user\r\n   * @return The unclaimed rewards that were added to the total accrued\r\n   **/\r\n  function _updateCurrentUnclaimedRewards(\r\n    address user,\r\n    uint256 userBalance,\r\n    bool updateStorage\r\n  ) internal returns (uint256) {\r\n    uint256 accruedRewards = _updateUserAssetInternal(\r\n      user,\r\n      address(this),\r\n      userBalance,\r\n      totalSupply()\r\n    );\r\n    uint256 unclaimedRewards = stakerRewardsToClaim[user].add(accruedRewards);\r\n\r\n    if (accruedRewards != 0) {\r\n      if (updateStorage) {\r\n        stakerRewardsToClaim[user] = unclaimedRewards;\r\n      }\r\n      emit RewardsAccrued(user, accruedRewards);\r\n    }\r\n\r\n    return unclaimedRewards;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the how is gonna be a new cooldown timestamp depending on the sender/receiver situation\r\n   *  - If the timestamp of the sender is \"better\" or the timestamp of the recipient is 0, we take the one of the recipient\r\n   *  - Weighted average of from/to cooldown timestamps if:\r\n   *    # The sender doesn't have the cooldown activated (timestamp 0).\r\n   *    # The sender timestamp is expired\r\n   *    # The sender has a \"worse\" timestamp\r\n   *  - If the receiver's cooldown timestamp expired (too old), the next is 0\r\n   * @param fromCooldownTimestamp Cooldown timestamp of the sender\r\n   * @param amountToReceive Amount\r\n   * @param toAddress Address of the recipient\r\n   * @param toBalance Current balance of the receiver\r\n   * @return The new cooldown timestamp\r\n   **/\r\n  function getNextCooldownTimestamp(\r\n    uint256 fromCooldownTimestamp,\r\n    uint256 amountToReceive,\r\n    address toAddress,\r\n    uint256 toBalance\r\n  ) public view returns (uint256) {\r\n    uint256 toCooldownTimestamp = stakersCooldowns[toAddress];\r\n    if (toCooldownTimestamp == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 minimalValidCooldownTimestamp = block.timestamp.sub(COOLDOWN_SECONDS).sub(\r\n      UNSTAKE_WINDOW\r\n    );\r\n\r\n    if (minimalValidCooldownTimestamp > toCooldownTimestamp) {\r\n      toCooldownTimestamp = 0;\r\n    } else {\r\n      uint256 fromCooldownTimestamp = (minimalValidCooldownTimestamp > fromCooldownTimestamp)\r\n        ? block.timestamp\r\n        : fromCooldownTimestamp;\r\n\r\n      if (fromCooldownTimestamp < toCooldownTimestamp) {\r\n        return toCooldownTimestamp;\r\n      } else {\r\n        toCooldownTimestamp = (\r\n          amountToReceive.mul(fromCooldownTimestamp).add(toBalance.mul(toCooldownTimestamp))\r\n        )\r\n          .div(amountToReceive.add(toBalance));\r\n      }\r\n    }\r\n    //stakersCooldowns[toAddress] = toCooldownTimestamp;\r\n\r\n    return toCooldownTimestamp;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the total rewards pending to claim by an staker\r\n   * @param staker The staker address\r\n   * @return The rewards\r\n   */\r\n  function getTotalRewardsBalance(address staker) external view returns (uint256) {\r\n\r\n      DistributionTypes.UserStakeInput[] memory userStakeInputs\r\n     = new DistributionTypes.UserStakeInput[](1);\r\n    userStakeInputs[0] = DistributionTypes.UserStakeInput({\r\n      underlyingAsset: address(this),\r\n      stakedByUser: balanceOf(staker),\r\n      totalStaked: totalSupply()\r\n    });\r\n    return stakerRewardsToClaim[staker].add(_getUnclaimedRewards(staker, userStakeInputs));\r\n  }\r\n\r\n  /**\r\n   * @dev returns the revision of the implementation contract\r\n   * @return The revision\r\n   */\r\n  function getRevision() internal override pure returns (uint256) {\r\n    return REVISION;\r\n  }\r\n}\r\n\r\n// File: contracts/stake/StakedRoya.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title StakedRoya\r\n * @notice StakedToken with AAVE token as staked token\r\n * @author Roya\r\n **/\r\ncontract StakedRoya is StakedToken {\r\n  string internal constant NAME = 'Staked Roya';\r\n  string internal constant SYMBOL = 'stkRoya';\r\n  uint8 internal constant DECIMALS = 18;\r\n  \r\n  constructor(\r\n    IERC20 stakedToken,\r\n    IERC20 rewardToken,\r\n    uint256 cooldownSeconds,\r\n    uint256 unstakeWindow,\r\n    address rewardsVault,\r\n    address emissionManager,\r\n    uint128 distributionDuration\r\n  ) public StakedToken(\r\n    stakedToken,\r\n    rewardToken,\r\n    cooldownSeconds,\r\n    unstakeWindow,\r\n    rewardsVault,\r\n    emissionManager,\r\n    distributionDuration,\r\n    NAME,\r\n    SYMBOL,\r\n    DECIMALS) {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cooldownSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"distributionDuration\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AssetIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Cooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldValue\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newValue\",\"type\":\"uint128\"}],\"name\":\"SnapshotDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UserIndexUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMISSION_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_countsSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_royaGovernance\",\"outputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_snapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"emissionPerSecond\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"internalType\":\"struct DistributionTypes.AssetConfigInput[]\",\"name\":\"assetsConfigInput\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromCooldownTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toBalance\",\"type\":\"uint256\"}],\"name\":\"getNextCooldownTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakersCooldowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUserAssetData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferHook\",\"name\":\"royaGovernance\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerRewardsToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakersCooldowns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakedRoya", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000099415856b37be9e75c0153615c7954f9ddb97a6e00000000000000000000000099415856b37be9e75c0153615c7954f9ddb97a6e00000000000000000000000000000000000000000000000000000000000d2f00000000000000000000000000000000000000000000000000000000000002a3000000000000000000000000007507b1b0705ef4ba2eb67300c44c6546d62a49090000000000000000000000007507b1b0705ef4ba2eb67300c44c6546d62a49090000000000000000000000000000000000000000000000000000000002a98ce0", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ccd7f859c7c8c87033707adab6e21433b50b8ca9a5014335faa04943ea86094c"}