{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n \r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, ReentrancyGuard {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private constant _name = \"MoreBNB\";\r\n    string private constant _symbol = \"MORE\";\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    // constructor(string memory name_, string memory symbol_) {\r\n    //     _name = name_;\r\n    //     _symbol = symbol_;\r\n    // }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IReferrals {\r\n    function addMember(address member, address parent) external;\r\n    function getSponsor(address account) external view returns (address);\r\n}\r\n\r\ncontract MoreBNB is ERC20, Ownable {\r\n    event UserStake(address indexed addr, uint256 timestamp, uint256 rawAmount, uint256 duration);\r\n    event UserStakeCollect(address indexed addr, uint256 timestamp, uint256 rawAmount);\r\n    event UserLobby(address indexed addr, uint256 timestamp, uint256 rawAmount);\r\n    event UserLobbyCollect(address indexed addr, uint256 timestamp, uint256 rawAmount);\r\n    event day_lobby_entry(uint256 timestamp, uint256 day, uint256 value);\r\n\tevent member(address indexed user, address indexed sponsor);\r\n\r\n    constructor() {\r\n        _mint(msg.sender, 3000000 * 1e18);\r\n    }\r\n\t\r\n\tIReferrals public Referrals = IReferrals(0x95a18f2A2b4D4229fFF7DC4EdB9464EF8753B5F8);\r\n\t\r\n\tuint256[10] public referrerBonus = [10000, 2000, 1000, 500, 250, 125, 100, 50, 25, 25];\r\n\tuint256[8] public pointRequired = [1 * 10**18, 10 * 10**18, 25 * 10**18, 50 * 10**18, 100 * 10**18];\r\n\tuint256[8] public bonus = [1 * 10**17, 1 * 10**18, 25 * 10**17, 5 * 10**18, 10 * 10**18];\r\n\t\r\n\taddress[5] public topSponsor = [address(0), address(0), address(0), address(0), address(0)];\r\n\taddress public topDepositor;\r\n\tuint256 public topDepositorAmount;\r\n\t\r\n\tuint256 internal constant leaderpool_percentage = 800;\r\n\tuint256 internal constant topsponsor_percentage = 400; \r\n\tuint256 internal constant topdepositor_percentage = 300;\r\n    uint256 internal constant admin_percentage = 1000; \r\n\t\r\n    uint256 internal constant tax_on_unstake = 1000;\r\n    uint256 public LAUNCH_TIME = 1663524000;\r\n\t\r\n    uint256 internal currentDay;\r\n\t\r\n    uint256 public lastLobbyPool = 3000000 * 1e18;\r\n\tuint256 public lastLobbyPoolMinValue = 1000000 * 1e18;\r\n\t\r\n    uint256 internal constant _LOBBY_POOL_DECREASE_PERCENTAGE = 10;  \r\n    uint256 internal constant _BONUS_CALC_RATIO = 128;  \r\n    uint256 internal constant _MAX_STAKE_DAYS = 300;  \r\n    uint256 internal constant _DIVIDENDSPOOLCAPDAYS = 25;  \r\n    bool public firstDayFlushed = false;  \r\n\t\r\n    struct memberLobby_overallData {\r\n        uint256 overall_collectedTokens;\r\n        uint256 overall_lobbyEnteries;\r\n        uint256 overall_stakedTokens;\r\n        uint256 overall_collectedDivs;\r\n        uint256 referrerPoint;\r\n\t\tuint256 referrerFund;\r\n\t\tuint256 referrerPointOverall;\r\n\t\tuint256 levelClaimed;\r\n    }\r\n\t\r\n    mapping(address => memberLobby_overallData) public mapMemberLobby_overallData;\r\n\r\n    uint256 public overall_lobbyEntry;\r\n\tuint256 public topSponsorFund;\r\n\tuint256 public leaderPoolFund;\r\n\tuint256 public topDepositorFund;\r\n\t\r\n    uint256 public overall_stakedTokens;\r\n    uint256 public overall_collectedTokens;\r\n    uint256 public overall_collectedDivs;\r\n    uint256 public overall_collectedBonusTokens;\r\n    mapping(address => uint256) public referrerBonusesPaid;\r\n    mapping(uint256 => uint256) public usersCountDaily;\r\n\tmapping(uint256 => uint256)public dayBNBPool;\r\n    mapping(uint256 => uint256)public enterytokenMath;\r\n    mapping(uint256 => uint256)public totalTokensInActiveStake;\r\n\t\r\n    uint256 public usersCount = 0;\r\n    uint256 public saveTotalToken;\r\n\r\n   struct memberLobby{\r\n        uint256 memberLobbyValue;\r\n\t\tuint256 memberLobbyEntryDay;\r\n        uint256 sponsoredToday;\r\n        bool hasCollected;\r\n    }\r\n\t\r\n    mapping(address => mapping(uint256 => memberLobby)) public mapMemberLobby;\r\n    mapping(uint256 => uint256) public lobbyEntry;\r\n\t\r\n    struct memberStake {\r\n        address userAddress;\r\n        uint256 tokenValue;\r\n        uint256 startDay;\r\n        uint256 endDay;\r\n        uint256 stakeId;\r\n        bool stakeCollected;\r\n    }\r\n\t\r\n    mapping(address => mapping(uint256 => memberStake)) public mapMemberStake;\r\n    mapping(uint256 => uint256) public daysActiveInStakeTokens;\r\n    mapping(uint256 => uint256) public daysActiveInStakeTokensIncrese;\r\n    mapping(uint256 => uint256) public daysActiveInStakeTokensDecrase;\r\n\tmapping(address => uint256) public leaderEarnings;\r\n\tmapping(address => uint256) public downline;\r\n\t\r\n    function flushFirstDayLobbyEntry() external onlyOwner() nonReentrant {\r\n        require(firstDayFlushed == false, \"already flushed\");\r\n        firstDayFlushed = true;\r\n        payable(owner()).transfer((lobbyEntry[1] * 7500) /10000);  \r\n    }\r\n\t\r\n    function flushFirstDayLobbyEntrySwitch() external onlyOwner() {\r\n        firstDayFlushed = true;\r\n    }\r\n\t\r\n    function _clcDay() public view returns (uint256) {\r\n        return (block.timestamp - LAUNCH_TIME) / 1 days;\r\n    }\r\n\t\r\n    function _updateDaily() public {\r\n        if (currentDay != _clcDay()) {\r\n\t\t\r\n            if (currentDay < _DIVIDENDSPOOLCAPDAYS) \r\n\t\t\t{\r\n                for(uint256 _day = currentDay + 1 ; _day <= currentDay * 2 ; _day++)\r\n\t\t\t\t{\r\n                    dayBNBPool[_day] += (lobbyEntry[currentDay] * 7500 ) / (currentDay * 10000);\r\n                }\r\n            } \r\n\t\t\telse \r\n\t\t\t{\r\n                for(uint256 _day = currentDay + 1 ; _day <= currentDay + _DIVIDENDSPOOLCAPDAYS ; _day++)\r\n\t\t\t\t{\r\n                    dayBNBPool[_day] += (lobbyEntry[currentDay] * 7500 ) / (_DIVIDENDSPOOLCAPDAYS * 10000);\r\n                }\r\n            }\r\n\t\t\t\r\n            currentDay = _clcDay();\r\n            _updateLobbyPool();\r\n            _sendOwnerShare();\r\n\t\t\t_sendTopDepositorFund();\r\n\t\t\t_sendSponsorsShare();\r\n            emit day_lobby_entry(block.timestamp, currentDay, lobbyEntry[currentDay -1]);\r\n        }\r\n    }\r\n\t\r\n    function _updateLobbyPool() internal{\r\n\t\tuint256 newValue = lastLobbyPool - ((lastLobbyPool * _LOBBY_POOL_DECREASE_PERCENTAGE) /1000);\r\n\t\tif(lastLobbyPoolMinValue > newValue)\r\n\t\t{\r\n\t\t    lastLobbyPool = lastLobbyPoolMinValue;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    lastLobbyPool = newValue;\r\n\t\t}\r\n    }\r\n\t\r\n    function _sendOwnerShare() internal nonReentrant {\r\n        require(currentDay > 0, \"current day is less than or equal to zero\");\r\n        payable(owner()).transfer((lobbyEntry[currentDay - 1] * admin_percentage) /10000);\r\n    }\r\n\t\r\n\tfunction _sendTopDepositorFund() internal nonReentrant {\r\n        require(currentDay > 0, \"current day is less than or equal to zero\");\r\n\t\t\r\n\t\tuint256 fundTosend = topDepositorFund * 10 / 100;\r\n        payable(topDepositor).transfer(fundTosend);\r\n\t\ttopDepositor = address(0);\r\n\t\ttopDepositorAmount = 0;\r\n\t\ttopDepositorFund -= fundTosend; \r\n    }\r\n\t\r\n\tfunction _sendSponsorsShare() internal nonReentrant {\r\n        require(currentDay > 0, \"current day is less than or equal to zero\");\r\n        uint256 percentage =  topSponsorFund * 10 / 100;\r\n\t\t\r\n\t\tif(topSponsor[0] != address(0) && percentage > 0)\r\n\t\t{\r\n\t\t   uint256 fundTosend = percentage * 40 / 100;\r\n\t\t   payable(topSponsor[0]).transfer(fundTosend);\r\n\t\t   topSponsorFund -= fundTosend;\r\n\t\t}\r\n\t\t\r\n\t\tif(topSponsor[1] != address(0) && percentage > 0)\r\n\t\t{\r\n\t\t   uint256 fundTosend = percentage * 30 / 100;\r\n\t\t   payable(topSponsor[1]).transfer(fundTosend);\r\n\t\t   topSponsorFund -= fundTosend;\r\n\t\t}\r\n\t\t\r\n\t\tif(topSponsor[2] != address(0) && percentage > 0)\r\n\t\t{\r\n\t\t   uint256 fundTosend = percentage * 20 / 100;\r\n\t\t   payable(topSponsor[2]).transfer(fundTosend);\r\n\t\t   topSponsorFund -= fundTosend;\r\n\t\t}\r\n\t\t\r\n\t\tif(topSponsor[3] != address(0) && percentage > 0)\r\n\t\t{\r\n\t\t   uint256 fundTosend = percentage * 10 / 100;\r\n\t\t   payable(topSponsor[3]).transfer(fundTosend);\r\n\t\t   topSponsorFund -= fundTosend;\r\n\t\t}\r\n\t\t\r\n\t\ttopSponsor[4] = address(0);\r\n\t\ttopSponsor[3] = address(0);\r\n\t\ttopSponsor[2] = address(0);\r\n\t\ttopSponsor[1] = address(0);\r\n\t\ttopSponsor[0] = address(0);\r\n    }\r\n\t\r\n    function EnterLobby(address sponsor) external payable {\r\n        require(sponsor != address(0), 'zero address');\r\n\t\tuint256 rawAmount = msg.value;\r\n        require(rawAmount > 0, \"ERR: Amount required\");\r\n\t\trequire(sponsor != msg.sender, \"ERR: referrer different required\");\r\n\t\t\r\n        _updateDaily();\r\n        require(currentDay > 0, \"current day is less than or equal to zero\");\r\n    \r\n        if (mapMemberLobby[msg.sender][currentDay].memberLobbyValue == 0) \r\n\t\t{\r\n            usersCount++;\r\n            usersCountDaily[currentDay]++;\r\n        }\r\n\t\t\r\n\t\tif(Referrals.getSponsor(msg.sender) == address(0)) \r\n\t\t{\r\n\t\t\t mapMemberLobby_overallData[sponsor].referrerFund += rawAmount;\r\n             Referrals.addMember(msg.sender, sponsor);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t     mapMemberLobby_overallData[Referrals.getSponsor(msg.sender)].referrerFund += rawAmount;  \r\n\t\t}\r\n\t\t\r\n        lobbyEntry[currentDay] += rawAmount;\r\n        overall_lobbyEntry += rawAmount;\r\n\t\t\r\n\t\ttopSponsorFund += rawAmount * topsponsor_percentage / 10000;\r\n\t\tleaderPoolFund += rawAmount * leaderpool_percentage / 10000;\r\n\t\ttopDepositorFund += rawAmount * topdepositor_percentage / 10000;\r\n\t\t\r\n        mapMemberLobby[msg.sender][currentDay].memberLobbyValue += rawAmount; \r\n        mapMemberLobby[msg.sender][currentDay].memberLobbyEntryDay = currentDay;\r\n        mapMemberLobby[msg.sender][currentDay].hasCollected = false;\r\n\t\t\r\n\t\tmapMemberLobby[Referrals.getSponsor(msg.sender)][currentDay].sponsoredToday += rawAmount;\r\n\t\t\r\n\t\tif(mapMemberLobby[msg.sender][currentDay].memberLobbyValue > topDepositorAmount)\r\n\t\t{\r\n\t\t   topDepositor = msg.sender;\r\n\t\t   topDepositorAmount = mapMemberLobby[msg.sender][currentDay].memberLobbyValue;\r\n\t\t}\r\n\t\t\r\n\t\treferralUpdate(msg.sender, rawAmount);\r\n\t\t\r\n        emit UserLobby(msg.sender, block.timestamp, rawAmount);\r\n    }\r\n\t\r\n\tfunction createTeam(address sponsor) external\r\n\t{\r\n\t     require(sponsor != address(0), \"zero address\");\r\n\t\t require(sponsor != msg.sender, \"ERR: referrer different required\");\r\n\t\t require(Referrals.getSponsor(msg.sender) == address(0), \"sponsor already exits\");\r\n\t\t \r\n\t\t Referrals.addMember(msg.sender, sponsor);\r\n\t\t \r\n         emit member(msg.sender, sponsor);\r\n    }\r\n\t\r\n\tfunction buildTeam(address sponsor, address teamMember) external onlyOwner\r\n\t{\r\n\t     require(sponsor != address(0), \"zero address\");\r\n\t\t require(teamMember != address(0), \"zero address\");\r\n\t\t require(sponsor != teamMember, \"ERR: sponsor different required\");\r\n\t\t require(Referrals.getSponsor(teamMember) == address(0), \"sponsor already exits\");\r\n\t\t \r\n\t\t Referrals.addMember(teamMember, sponsor);\r\n\t\t \r\n         emit member(teamMember, sponsor);\r\n    }\r\n\t\r\n\tfunction referralUpdate(address _address, uint256 amount) private {\r\n\t\taddress _nextReferrer = Referrals.getSponsor(_address);\r\n\t\t\r\n\t\tif(_nextReferrer != address(0))\r\n\t\t{\r\n\t\t    if(mapMemberLobby[_nextReferrer][currentDay].sponsoredToday > mapMemberLobby[topSponsor[0]][currentDay].sponsoredToday && topSponsor[0] != _nextReferrer)\r\n\t\t\t{\r\n\t\t\t\ttopSponsor[4] = topSponsor[3];\r\n\t\t\t\ttopSponsor[3] = topSponsor[2];\r\n\t\t\t\ttopSponsor[2] = topSponsor[1];\r\n\t\t\t\ttopSponsor[1] = topSponsor[0];\r\n\t\t\t\ttopSponsor[0] = _nextReferrer;\r\n\t\t\t\t\r\n\t\t\t\tif(topSponsor[2] == _nextReferrer)\r\n\t\t\t\t{\r\n\t\t\t\t\ttopSponsor[2] = topSponsor[3];\r\n\t\t\t\t\ttopSponsor[3] = topSponsor[4];\r\n\t\t\t\t}\r\n\t\t\t\telse if(topSponsor[3] == _nextReferrer)\r\n\t\t\t\t{\r\n\t\t\t\t    topSponsor[3] = topSponsor[4];\r\n\t\t\t\t}\r\n\t\t\t\telse if(topSponsor[4] == _nextReferrer)\r\n\t\t\t\t{\r\n\t\t\t\t\t topSponsor[4] = address(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(mapMemberLobby[_nextReferrer][currentDay].sponsoredToday > mapMemberLobby[topSponsor[1]][currentDay].sponsoredToday && topSponsor[1] !=_nextReferrer && topSponsor[0] !=_nextReferrer)\r\n\t\t\t{\r\n\t\t\t\ttopSponsor[4] = topSponsor[3];\r\n\t\t\t\ttopSponsor[3] = topSponsor[2];\r\n\t\t\t\ttopSponsor[2] = topSponsor[1];\r\n\t\t\t\ttopSponsor[1] = _nextReferrer;\r\n\t\t\t\t\r\n\t\t\t\tif(topSponsor[3] == _nextReferrer)\r\n\t\t\t\t{\r\n\t\t\t\t\ttopSponsor[3] = topSponsor[4];\r\n\t\t\t\t}\r\n\t\t\t\telse if(topSponsor[4] == _nextReferrer)\r\n\t\t\t\t{\r\n\t\t\t\t\ttopSponsor[4] = address(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(mapMemberLobby[_nextReferrer][currentDay].sponsoredToday > mapMemberLobby[topSponsor[2]][currentDay].sponsoredToday && topSponsor[2] !=_nextReferrer && topSponsor[1] !=_nextReferrer && topSponsor[0] !=_nextReferrer)\r\n\t\t\t{\r\n\t\t\t\ttopSponsor[4] = topSponsor[3];\r\n\t\t\t\ttopSponsor[3] = topSponsor[2];\r\n\t\t\t\ttopSponsor[2] = _nextReferrer;\r\n\t\t\t\t\r\n\t\t\t\tif(topSponsor[4] == _nextReferrer)\r\n\t\t\t\t{\r\n\t\t\t\t\ttopSponsor[4] = address(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(mapMemberLobby[_nextReferrer][currentDay].sponsoredToday > mapMemberLobby[topSponsor[3]][currentDay].sponsoredToday && topSponsor[3] !=_nextReferrer && topSponsor[2] !=_nextReferrer && topSponsor[1] !=_nextReferrer && topSponsor[0] !=_nextReferrer)\r\n\t\t\t{\r\n\t\t\t\ttopSponsor[4] = topSponsor[3];\r\n\t\t\t\ttopSponsor[3] = _nextReferrer;\r\n\t\t\t}\r\n\t\t\telse if(mapMemberLobby[_nextReferrer][currentDay].sponsoredToday > mapMemberLobby[topSponsor[4]][currentDay].sponsoredToday && topSponsor[4] !=_nextReferrer && topSponsor[3] !=_nextReferrer && topSponsor[2] !=_nextReferrer && topSponsor[1] !=_nextReferrer && topSponsor[0] !=_nextReferrer)\r\n\t\t\t{\r\n\t\t\t\t topSponsor[4] = _nextReferrer;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tuint i;\r\n\t\tfor(i=0; i < 10; i++) \r\n\t\t{\r\n\t\t\tif(_nextReferrer != address(0)) \r\n\t\t\t{\r\n\t\t\t\tmapMemberLobby_overallData[_nextReferrer].referrerPoint += amount * referrerBonus[i] / 10000;\r\n\t\t\t    mapMemberLobby_overallData[_nextReferrer].referrerPointOverall += amount * referrerBonus[i] / 10000;\r\n\t\t\t}\r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\t break;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t    _nextReferrer = Referrals.getSponsor(_nextReferrer);\r\n\t\t}\r\n    }\r\n\t\r\n    function ExitLobby(uint256 targetDay) external {\r\n        require(mapMemberLobby[msg.sender][targetDay].hasCollected == false, \"ERR: Already collected\");\r\n        _updateDaily();\r\n        require(targetDay < currentDay, \"current day is less target day\");\r\n\r\n        uint256 tokensToPay = _clcTokenValue(msg.sender, targetDay);\r\n\r\n        _mint(msg.sender, tokensToPay);\r\n        mapMemberLobby[msg.sender][targetDay].hasCollected = true;\r\n\t\t\r\n        overall_collectedTokens += tokensToPay;\r\n        mapMemberLobby_overallData[msg.sender].overall_collectedTokens += tokensToPay;\r\n\t\t\r\n        emit UserLobbyCollect(msg.sender, block.timestamp, tokensToPay);\r\n    }\r\n\t\r\n    function _clcTokenValue (address _address, uint256 _Day) public view returns (uint256) {\r\n        require(_Day != 0, \"ERR\");\r\n        uint256 _tokenVlaue;\r\n        uint256 entryDay = mapMemberLobby[_address][_Day].memberLobbyEntryDay;\r\n\t\t\r\n        if(entryDay != 0 && entryDay < currentDay) \r\n\t\t{\r\n            _tokenVlaue = ((lastLobbyPool) / lobbyEntry[entryDay]) * mapMemberLobby[_address][_Day].memberLobbyValue; \r\n        }\r\n\t\telse\r\n\t\t{\r\n            _tokenVlaue = 0;\r\n        }\r\n        return _tokenVlaue;\r\n    }\r\n\t\r\n    function EnterStake(uint256 amount, uint256 stakingDays) external {\r\n        require(stakingDays >= 1, 'Staking: Staking days < 1');\r\n        require(stakingDays <= _MAX_STAKE_DAYS, 'Staking: Staking days > _MAX_STAKE_DAYS');\r\n        require(balanceOf(msg.sender) >= amount, 'Not enough balance');\r\n        \r\n        _updateDaily();\r\n        uint256 stakeId = calcStakeCount(msg.sender);\r\n\r\n        overall_stakedTokens += amount;\r\n        mapMemberLobby_overallData[msg.sender].overall_stakedTokens += amount;\r\n\r\n        mapMemberStake[msg.sender][stakeId].stakeId = stakeId;\r\n        mapMemberStake[msg.sender][stakeId].userAddress = msg.sender;\r\n        mapMemberStake[msg.sender][stakeId].tokenValue = amount;\r\n        mapMemberStake[msg.sender][stakeId].startDay = currentDay + 1 ;\r\n        mapMemberStake[msg.sender][stakeId].endDay = currentDay + 1 + stakingDays;\r\n        mapMemberStake[msg.sender][stakeId].stakeCollected = false;\r\n        \r\n        for (uint256 i = currentDay + 1; i <= currentDay + stakingDays; i++) {\r\n            totalTokensInActiveStake[i] += amount;\r\n        }\r\n\t\t\r\n        saveTotalToken += amount;\r\n        daysActiveInStakeTokensIncrese[currentDay + 1] += amount;\r\n        daysActiveInStakeTokensDecrase[currentDay + stakingDays + 1] += amount;\r\n\t\t\r\n        _burn(msg.sender, amount);\r\n        emit UserStake (msg.sender, block.timestamp, amount, stakingDays);\r\n    }\r\n\t\r\n\tfunction staking(uint256 amount, uint256 stakingDays, address users) internal {\r\n        require(stakingDays >= 1, 'Staking: Staking days < 1');\r\n        require(stakingDays <= _MAX_STAKE_DAYS, 'Staking: Staking days > _MAX_STAKE_DAYS');\r\n        \r\n        _updateDaily();\r\n        uint256 stakeId = calcStakeCount(users);\r\n\r\n        overall_stakedTokens += amount;\r\n        mapMemberLobby_overallData[users].overall_stakedTokens += amount;\r\n\r\n        mapMemberStake[users][stakeId].stakeId = stakeId;\r\n        mapMemberStake[users][stakeId].userAddress = users;\r\n        mapMemberStake[users][stakeId].tokenValue = amount;\r\n        mapMemberStake[users][stakeId].startDay = currentDay + 1 ;\r\n        mapMemberStake[users][stakeId].endDay = currentDay + 1 + stakingDays;\r\n        mapMemberStake[users][stakeId].stakeCollected = false;\r\n        \r\n        for (uint256 i = currentDay + 1; i <= currentDay + stakingDays; i++) {\r\n            totalTokensInActiveStake[i] += amount;\r\n        }\r\n\t\t\r\n        saveTotalToken += amount;\r\n        daysActiveInStakeTokensIncrese[currentDay + 1] += amount;\r\n        daysActiveInStakeTokensDecrase[currentDay + stakingDays + 1] += amount;\r\n        emit UserStake (users, block.timestamp, amount, stakingDays);\r\n    }\r\n\t\r\n    function calcStakeCount(address _address) public view returns (uint256) {\r\n\t    require(_address != address(0), 'zero address');\r\n        uint256 stakeCount = 0;\r\n        for (uint256 i = 0; mapMemberStake[_address][i].userAddress == _address; i++) {\r\n            stakeCount += 1;\r\n        }\r\n        return(stakeCount);\r\n    }\r\n\t\r\n    function EndStake(uint256 stakeId, bool restakes) external nonReentrant {\r\n        \r\n\t\trequire(mapMemberStake[msg.sender][stakeId].endDay <= currentDay, 'Stakes end day not reached yet');\r\n        require(mapMemberStake[msg.sender][stakeId].userAddress == msg.sender, 'Incorrect sender');\r\n        require(mapMemberStake[msg.sender][stakeId].stakeCollected == false, 'Already collected');\r\n\t\t\r\n\t\t_updateDaily();\r\n\t\t\r\n        uint256 profit = calcStakeCollecting(msg.sender, stakeId);\r\n        overall_collectedDivs += profit;\r\n        mapMemberLobby_overallData[msg.sender].overall_collectedDivs += profit;\r\n\r\n        mapMemberStake[msg.sender][stakeId].stakeCollected = true;\r\n\t\t\r\n\t\tif(!restakes)\r\n\t\t{\r\n\t\t    uint256 profitTax = profit * tax_on_unstake / 10000;\r\n\t\t    payable(msg.sender).transfer(profit - profitTax);\r\n\t\t    payable(owner()).transfer(profitTax);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t    payable(msg.sender).transfer(profit);\r\n\t\t}\r\n\t\t\r\n        uint256 stakeReturn = mapMemberStake[msg.sender][stakeId].tokenValue;\r\n\t\t\r\n        if (stakeReturn != 0) {\r\n            uint256 bonusAmount = calcBonusToken(mapMemberStake[msg.sender][stakeId].endDay - mapMemberStake[msg.sender][stakeId].startDay, stakeReturn);\r\n\t\t\t\r\n\t\t\tif(!restakes)\r\n\t\t\t{\r\n\t\t\t    uint256 bonusTax = (bonusAmount + stakeReturn) * tax_on_unstake / 10000;\r\n\t\t\t    overall_collectedBonusTokens += bonusAmount;\r\n                _mint(msg.sender, stakeReturn + bonusAmount - bonusTax);\r\n\t\t\t\t_mint(owner(), bonusTax);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t    overall_collectedBonusTokens += bonusAmount;\r\n\t\t\t    staking(stakeReturn + bonusAmount, mapMemberStake[msg.sender][stakeId].endDay - mapMemberStake[msg.sender][stakeId].startDay, msg.sender);\r\n\t\t\t}\r\n        }\r\n\t\t\r\n        emit UserStakeCollect(msg.sender, block.timestamp, profit);\r\n    }\r\n\t\r\n    function calcStakeCollecting(address _address , uint256 _stakeId) public view returns (uint256) {\r\n        uint256 userDivs;\r\n        uint256 _endDay = mapMemberStake[_address][_stakeId].endDay;\r\n        uint256 _startDay = mapMemberStake[_address][_stakeId].startDay;\r\n        uint256 _stakeValue = mapMemberStake[_address][_stakeId].tokenValue;\r\n\t\t\r\n        for (uint256 _day = _startDay ; _day < _endDay && _day < currentDay; _day++) \r\n\t\t{ \r\n            userDivs += (dayBNBPool[_day] * _stakeValue) / totalTokensInActiveStake[_day]  ;\r\n        }\r\n        return (userDivs);\r\n    }\r\n\t\r\n    function calcBonusToken (uint256 StakeDuration, uint256 StakeAmount) public pure returns (uint256) {\r\n        require(StakeDuration <= _MAX_STAKE_DAYS, 'Staking: Staking days > _MAX_STAKE_DAYS');\r\n        uint256 _bonusAmount = StakeAmount * ((StakeDuration **2) * _BONUS_CALC_RATIO);\r\n        return _bonusAmount /1e7;\r\n    }\r\n\t\r\n\tfunction claimBonus() external nonReentrant {\r\n\t    uint256 totalPoint = mapMemberLobby_overallData[msg.sender].referrerPoint;\r\n\t\tif(totalPoint > 0)\r\n\t\t{\r\n\t\t   if(totalPoint >= pointRequired[0] && 1 > mapMemberLobby_overallData[msg.sender].levelClaimed)\r\n\t\t   {\r\n\t\t       require(leaderPoolFund >= bonus[0], \"insufficient bnb in pool\");\r\n\t\t\t   \r\n\t\t\t   leaderPoolFund = leaderPoolFund - bonus[0];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].referrerPoint = mapMemberLobby_overallData[msg.sender].referrerPoint - pointRequired[0];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].levelClaimed = 1;\r\n\t\t       payable(msg.sender).transfer(bonus[0]);\r\n\t\t\t   \r\n\t\t\t   leaderEarnings[msg.sender] += bonus[0];\r\n\t\t   }\r\n\t\t   else if(totalPoint >= pointRequired[1] && 2 > mapMemberLobby_overallData[msg.sender].levelClaimed)\r\n\t\t   {\r\n\t\t       require(leaderPoolFund >= bonus[1], \"insufficient bnb in pool\");\r\n\t\t\t   \r\n\t\t\t   leaderPoolFund = leaderPoolFund - bonus[1];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].referrerPoint = mapMemberLobby_overallData[msg.sender].referrerPoint - pointRequired[1];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].levelClaimed = 2;\r\n\t\t\t   payable(msg.sender).transfer(bonus[1]);\r\n\t\t\t   \r\n\t\t\t   leaderEarnings[msg.sender] += bonus[1];\r\n\t\t   }\r\n\t\t   else if(totalPoint >= pointRequired[2] && 3 > mapMemberLobby_overallData[msg.sender].levelClaimed)\r\n\t\t   {\r\n\t\t       require(leaderPoolFund >= bonus[2], \"insufficient bnb in pool\");\r\n\t\t\t   \r\n\t\t\t   leaderPoolFund = leaderPoolFund - bonus[2];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].referrerPoint = mapMemberLobby_overallData[msg.sender].referrerPoint - pointRequired[2];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].levelClaimed = 3;\r\n\t\t\t   payable(msg.sender).transfer(bonus[2]);\r\n\t\t\t   \r\n\t\t\t   leaderEarnings[msg.sender] += bonus[2];\r\n\t\t   }\r\n\t\t   else if(totalPoint >= pointRequired[3] && 4 > mapMemberLobby_overallData[msg.sender].levelClaimed)\r\n\t\t   {\r\n\t\t       require(leaderPoolFund >= bonus[3], \"insufficient bnb in pool\");\r\n\t\t\t   \r\n\t\t\t   leaderPoolFund = leaderPoolFund - bonus[3];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].referrerPoint = mapMemberLobby_overallData[msg.sender].referrerPoint - pointRequired[3];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].levelClaimed = 4;\r\n\t\t\t   payable(msg.sender).transfer(bonus[3]);\r\n\t\t\t   \r\n\t\t\t   leaderEarnings[msg.sender] += bonus[3];\r\n\t\t   }\r\n\t\t   else if(totalPoint >= pointRequired[4] && 5 > mapMemberLobby_overallData[msg.sender].levelClaimed)\r\n\t\t   {\r\n\t\t       require(leaderPoolFund >= bonus[4], \"insufficient bnb in pool\");\r\n\t\t\t   \r\n\t\t\t   leaderPoolFund = leaderPoolFund - bonus[4];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].referrerPoint = mapMemberLobby_overallData[msg.sender].referrerPoint - pointRequired[4];\r\n\t\t\t   mapMemberLobby_overallData[msg.sender].levelClaimed = 0;\r\n\t\t\t   payable(msg.sender).transfer(bonus[4]);\r\n\t\t\t   \r\n\t\t\t   leaderEarnings[msg.sender] += bonus[4];\r\n\t\t   }\r\n\t\t}\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"UserLobby\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"UserLobbyCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"UserStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"UserStakeCollect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"day_lobby_entry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"member\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"restakes\",\"type\":\"bool\"}],\"name\":\"EndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"EnterLobby\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDays\",\"type\":\"uint256\"}],\"name\":\"EnterStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetDay\",\"type\":\"uint256\"}],\"name\":\"ExitLobby\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAUNCH_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Referrals\",\"outputs\":[{\"internalType\":\"contract IReferrals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_clcDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Day\",\"type\":\"uint256\"}],\"name\":\"_clcTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_updateDaily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMember\",\"type\":\"address\"}],\"name\":\"buildTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"StakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeAmount\",\"type\":\"uint256\"}],\"name\":\"calcBonusToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"}],\"name\":\"calcStakeCollecting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"calcStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"createTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayBNBPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysActiveInStakeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysActiveInStakeTokensDecrase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysActiveInStakeTokensIncrese\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"downline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enterytokenMath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstDayFlushed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushFirstDayLobbyEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushFirstDayLobbyEntrySwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLobbyPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLobbyPoolMinValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaderEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaderPoolFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lobbyEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMemberLobby\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"memberLobbyValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"memberLobbyEntryDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sponsoredToday\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasCollected\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapMemberLobby_overallData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"overall_collectedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overall_lobbyEnteries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overall_stakedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overall_collectedDivs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerPointOverall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMemberStake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stakeCollected\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_collectedBonusTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_collectedDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_collectedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_lobbyEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overall_stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrerBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerBonusesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveTotalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topDepositorAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topDepositorFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topSponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topSponsorFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalTokensInActiveStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersCountDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MoreBNB", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f2e0fd2863a86982d5dce00fe3cafb042afe61f2e4a2c5b07ac58ec9a62932dc"}