{"SourceCode": "// Sources flattened with hardhat v2.7.0 https://hardhat.org\r\n\r\n// File contracts/forwarder/IRelayRecipient.sol\r\n\r\n// SPDX-License-Identifier:MIT\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * a contract must implement this interface in order to support relayed transaction.\r\n * It is better to inherit the BaseRelayRecipient as its implementation.\r\n */\r\nabstract contract IRelayRecipient {\r\n  /**\r\n   * return if the forwarder is trusted to forward relayed transactions to us.\r\n   * the forwarder is required to verify the sender's signature, and verify\r\n   * the call is not a replay.\r\n   */\r\n  function isTrustedForwarder(address forwarder)\r\n    public\r\n    view\r\n    virtual\r\n    returns (bool);\r\n\r\n  /**\r\n   * return the sender of this call.\r\n   * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\r\n   * of the msg.data.\r\n   * otherwise, return `msg.sender`\r\n   * should be used in the contract anywhere instead of msg.sender\r\n   */\r\n  function _msgSender() internal view virtual returns (address payable);\r\n\r\n  function versionRecipient() external view virtual returns (string memory);\r\n}\r\n\r\n// File contracts/forwarder/BaseRelayRecipient.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * A base contract to be inherited by any contract that want to receive relayed transactions\r\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\r\n */\r\nabstract contract BaseRelayRecipient is IRelayRecipient {\r\n  /*\r\n   * Forwarder singleton we accept calls from\r\n   */\r\n  address public trustedForwarder;\r\n\r\n  /*\r\n   * require a function to be called through GSN only\r\n   */\r\n  modifier trustedForwarderOnly() {\r\n    require(\r\n      msg.sender == address(trustedForwarder),\r\n      \"Function can only be called through the trusted Forwarder\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  function isTrustedForwarder(address forwarder)\r\n    public\r\n    view\r\n    override\r\n    returns (bool)\r\n  {\r\n    return forwarder == trustedForwarder;\r\n  }\r\n\r\n  /**\r\n   * return the sender of this call.\r\n   * if the call came through our trusted forwarder, return the original sender.\r\n   * otherwise, return `msg.sender`.\r\n   * should be used in the contract anywhere instead of msg.sender\r\n   */\r\n  function _msgSender()\r\n    internal\r\n    view\r\n    virtual\r\n    override\r\n    returns (address payable ret)\r\n  {\r\n    if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\r\n      // At this point we know that the sender is a trusted forwarder,\r\n      // so we trust that the last bytes of msg.data are the verified sender address.\r\n      // extract sender address from the end of msg.data\r\n      assembly {\r\n        ret := shr(96, calldataload(sub(calldatasize(), 20)))\r\n      }\r\n    } else {\r\n      return msg.sender;\r\n    }\r\n  }\r\n}\r\n\r\n// File contracts/abstract/Pausable.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\n\r\nabstract contract Pausable is BaseRelayRecipient {\r\n  /**\r\n   * @dev Emitted when the pause is triggered by `account`.\r\n   */\r\n  event Paused(address account);\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted by `account`.\r\n   */\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  /**\r\n   * @dev Initializes the contract in unpaused state.\r\n   */\r\n  constructor() {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract is paused, and false otherwise.\r\n   */\r\n  function paused() public view virtual returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused(), \"Pausable: paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused(), \"Pausable: not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Triggers stopped state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  function _pause() internal virtual whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns to normal state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  function _unpause() internal virtual whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(_msgSender());\r\n  }\r\n}\r\n\r\n// File contracts/abstract/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\nabstract contract Ownable is Pausable {\r\n  address public _owner;\r\n  address public _admin;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor(address ownerAddress) {\r\n    _owner = _msgSender();\r\n    _admin = ownerAddress;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(_admin == _msgSender(), \"Ownable: caller is not the Admin\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyAdmin {\r\n    emit OwnershipTransferred(_owner, _admin);\r\n    _owner = _admin;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File contracts/abstract/Admin.sol\r\n\r\npragma solidity ^0.7.0;\r\n\r\nabstract contract Admin is Ownable {\r\n  struct tokenInfo {\r\n    bool isExist;\r\n    uint8 decimal;\r\n    uint256 userMinStake;\r\n    uint256 userMaxStake;\r\n    uint256 totalMaxStake;\r\n    uint256 lockableDays;\r\n    bool optionableStatus;\r\n  }\r\n\r\n  using SafeMath for uint256;\r\n  address[] public tokens;\r\n  mapping(address => address[]) public tokensSequenceList;\r\n  mapping(address => tokenInfo) public tokenDetails;\r\n  mapping(address => uint256) public rewardCap;\r\n  mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\r\n  mapping(address => mapping(address => bool)) public tokenBlockedStatus;\r\n  uint256[] public intervalDays = [1, 8, 15, 22, 29, 36];\r\n  uint256 public constant DAYS = 1 days;\r\n  uint256 public constant HOURS = 1 hours;\r\n  uint256 public stakeDuration;\r\n  uint256 public refPercentage;\r\n  uint256 public optionableBenefit;\r\n\r\n  event TokenDetails(\r\n    address indexed tokenAddress,\r\n    uint256 userMinStake,\r\n    uint256 userMaxStake,\r\n    uint256 totalMaxStake,\r\n    uint256 updatedTime\r\n  );\r\n\r\n  event LockableTokenDetails(\r\n    address indexed tokenAddress,\r\n    uint256 lockableDys,\r\n    bool optionalbleStatus,\r\n    uint256 updatedTime\r\n  );\r\n\r\n  event DailyDistributionDetails(\r\n    address indexed stakedTokenAddress,\r\n    address indexed rewardTokenAddress,\r\n    uint256 rewards,\r\n    uint256 time\r\n  );\r\n\r\n  event SequenceDetails(\r\n    address indexed stakedTokenAddress,\r\n    address[] rewardTokenSequence,\r\n    uint256 time\r\n  );\r\n\r\n  event StakeDurationDetails(uint256 updatedDuration, uint256 time);\r\n  event OptionableBenefitDetails(uint256 updatedBenefit, uint256 time);\r\n  event ReferrerPercentageDetails(uint256 updatedRefPercentage, uint256 time);\r\n  event IntervalDaysDetails(uint256[] updatedIntervals, uint256 time);\r\n\r\n  event BlockedDetails(\r\n    address indexed stakedTokenAddress,\r\n    address indexed rewardTokenAddress,\r\n    bool blockedStatus,\r\n    uint256 time\r\n  );\r\n\r\n  event WithdrawDetails(\r\n    address indexed tokenAddress,\r\n    uint256 withdrawalAmount,\r\n    uint256 time\r\n  );\r\n\r\n  constructor(address _owner) Ownable(_owner) {\r\n    stakeDuration = 180 days;\r\n    refPercentage = 2500000000000000000;\r\n    optionableBenefit = 2;\r\n  }\r\n\r\n  function addToken(\r\n    address tokenAddress,\r\n    uint256 userMinStake,\r\n    uint256 userMaxStake,\r\n    uint256 totalStake,\r\n    uint8 decimal\r\n  ) public onlyOwner returns (bool) {\r\n    if (!(tokenDetails[tokenAddress].isExist)) tokens.push(tokenAddress);\r\n\r\n    tokenDetails[tokenAddress].isExist = true;\r\n    tokenDetails[tokenAddress].decimal = decimal;\r\n    tokenDetails[tokenAddress].userMinStake = userMinStake;\r\n    tokenDetails[tokenAddress].userMaxStake = userMaxStake;\r\n    tokenDetails[tokenAddress].totalMaxStake = totalStake;\r\n\r\n    emit TokenDetails(\r\n      tokenAddress,\r\n      userMinStake,\r\n      userMaxStake,\r\n      totalStake,\r\n      block.timestamp\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function setDailyDistribution(\r\n    address[] memory stakedToken,\r\n    address[] memory rewardToken,\r\n    uint256[] memory dailyDistribution\r\n  ) public onlyOwner {\r\n    require(\r\n      stakedToken.length == rewardToken.length &&\r\n        rewardToken.length == dailyDistribution.length,\r\n      \"Invalid Input\"\r\n    );\r\n\r\n    for (uint8 i = 0; i < stakedToken.length; i++) {\r\n      require(\r\n        tokenDetails[stakedToken[i]].isExist &&\r\n          tokenDetails[rewardToken[i]].isExist,\r\n        \"Token not exist\"\r\n      );\r\n      tokenDailyDistribution[stakedToken[i]][\r\n        rewardToken[i]\r\n      ] = dailyDistribution[i];\r\n\r\n      emit DailyDistributionDetails(\r\n        stakedToken[i],\r\n        rewardToken[i],\r\n        dailyDistribution[i],\r\n        block.timestamp\r\n      );\r\n    }\r\n  }\r\n\r\n  function updateSequence(\r\n    address stakedToken,\r\n    address[] memory rewardTokenSequence\r\n  ) public onlyOwner {\r\n    tokensSequenceList[stakedToken] = new address[](0);\r\n    require(tokenDetails[stakedToken].isExist, \"Staked Token Not Exist\");\r\n    for (uint8 i = 0; i < rewardTokenSequence.length; i++) {\r\n      require(rewardTokenSequence.length <= tokens.length, \"Invalid Input\");\r\n      require(\r\n        tokenDetails[rewardTokenSequence[i]].isExist,\r\n        \"Reward Token Not Exist\"\r\n      );\r\n      tokensSequenceList[stakedToken].push(rewardTokenSequence[i]);\r\n    }\r\n\r\n    emit SequenceDetails(\r\n      stakedToken,\r\n      tokensSequenceList[stakedToken],\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function updateToken(\r\n    address tokenAddress,\r\n    uint256 userMinStake,\r\n    uint256 userMaxStake,\r\n    uint256 totalStake\r\n  ) public onlyOwner {\r\n    require(tokenDetails[tokenAddress].isExist, \"Token Not Exist\");\r\n    tokenDetails[tokenAddress].userMinStake = userMinStake;\r\n    tokenDetails[tokenAddress].userMaxStake = userMaxStake;\r\n    tokenDetails[tokenAddress].totalMaxStake = totalStake;\r\n\r\n    emit TokenDetails(\r\n      tokenAddress,\r\n      userMinStake,\r\n      userMaxStake,\r\n      totalStake,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function lockableToken(\r\n    address tokenAddress,\r\n    uint8 lockableStatus,\r\n    uint256 lockedDays,\r\n    bool optionableStatus\r\n  ) public onlyOwner {\r\n    require(\r\n      lockableStatus == 1 || lockableStatus == 2 || lockableStatus == 3,\r\n      \"Invalid Lockable Status\"\r\n    );\r\n    require(tokenDetails[tokenAddress].isExist == true, \"Token Not Exist\");\r\n\r\n    if (lockableStatus == 1) {\r\n      tokenDetails[tokenAddress].lockableDays = block.timestamp.add(lockedDays);\r\n    } else if (lockableStatus == 2) tokenDetails[tokenAddress].lockableDays = 0;\r\n    else if (lockableStatus == 3)\r\n      tokenDetails[tokenAddress].optionableStatus = optionableStatus;\r\n\r\n    emit LockableTokenDetails(\r\n      tokenAddress,\r\n      tokenDetails[tokenAddress].lockableDays,\r\n      tokenDetails[tokenAddress].optionableStatus,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function updateStakeDuration(uint256 durationTime) public onlyOwner {\r\n    stakeDuration = durationTime;\r\n    emit StakeDurationDetails(stakeDuration, block.timestamp);\r\n  }\r\n\r\n  function updateOptionableBenefit(uint256 benefit) public onlyOwner {\r\n    optionableBenefit = benefit;\r\n    emit OptionableBenefitDetails(optionableBenefit, block.timestamp);\r\n  }\r\n\r\n  function updateRefPercentage(uint256 refPer) public onlyOwner {\r\n    refPercentage = refPer;\r\n    emit ReferrerPercentageDetails(refPercentage, block.timestamp);\r\n  }\r\n\r\n  function updateIntervalDays(uint256[] memory _interval) public onlyOwner {\r\n    intervalDays = new uint256[](0);\r\n\r\n    for (uint8 i = 0; i < _interval.length; i++) {\r\n      uint256 noD = stakeDuration.div(DAYS);\r\n      require(noD > _interval[i], \"Invalid Interval Day\");\r\n      intervalDays.push(_interval[i]);\r\n    }\r\n\r\n    emit IntervalDaysDetails(intervalDays, block.timestamp);\r\n  }\r\n\r\n  function changeTokenBlockedStatus(\r\n    address stakedToken,\r\n    address rewardToken,\r\n    bool status\r\n  ) public onlyOwner {\r\n    require(\r\n      tokenDetails[stakedToken].isExist && tokenDetails[rewardToken].isExist,\r\n      \"Token not exist\"\r\n    );\r\n    tokenBlockedStatus[stakedToken][rewardToken] = status;\r\n\r\n    emit BlockedDetails(\r\n      stakedToken,\r\n      rewardToken,\r\n      tokenBlockedStatus[stakedToken][rewardToken],\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  function safeWithdraw(address tokenAddress, uint256 amount) public onlyOwner {\r\n    require(\r\n      IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n      \"Insufficient Balance\"\r\n    );\r\n    require(IERC20(tokenAddress).transfer(_owner, amount), \"Transfer failed\");\r\n    emit WithdrawDetails(tokenAddress, amount, block.timestamp);\r\n  }\r\n\r\n  function viewTokensCount() external view returns (uint256) {\r\n    return tokens.length;\r\n  }\r\n\r\n  function setRewardCap(\r\n    address[] memory tokenAddresses,\r\n    uint256[] memory rewards\r\n  ) external onlyOwner returns (bool) {\r\n    require(tokenAddresses.length == rewards.length, \"Invalid elements\");\r\n    for (uint8 v = 0; v < tokenAddresses.length; v++) {\r\n      require(tokenDetails[tokenAddresses[v]].isExist, \"Token is not exist\");\r\n      require(rewards[v] > 0, \"Invalid Reward Amount\");\r\n      rewardCap[tokenAddresses[v]] = rewards[v];\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// File contracts/UnifarmV31.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @title Unifarm Contract\r\n * @author OroPocket\r\n */\r\n\r\ncontract UnifarmV31 is Admin {\r\n  // Wrappers over Solidity's arithmetic operations\r\n  using SafeMath for uint256;\r\n\r\n  // Stores Stake Details\r\n  struct stakeInfo {\r\n    address user;\r\n    bool[] isActive;\r\n    address[] referrer;\r\n    address[] tokenAddress;\r\n    uint256[] stakeId;\r\n    uint256[] stakedAmount;\r\n    uint256[] startTime;\r\n  }\r\n\r\n  // Mapping\r\n  mapping(address => stakeInfo) public stakingDetails;\r\n  mapping(address => mapping(address => uint256)) public userTotalStaking;\r\n  mapping(address => uint256) public totalStaking;\r\n  uint256 public poolStartTime;\r\n\r\n  // Events\r\n  event Stake(\r\n    address indexed userAddress,\r\n    uint256 stakeId,\r\n    address indexed referrerAddress,\r\n    address indexed tokenAddress,\r\n    uint256 stakedAmount,\r\n    uint256 time\r\n  );\r\n\r\n  event Claim(\r\n    address indexed userAddress,\r\n    address indexed stakedTokenAddress,\r\n    address indexed tokenAddress,\r\n    uint256 claimRewards,\r\n    uint256 time\r\n  );\r\n\r\n  event UnStake(\r\n    address indexed userAddress,\r\n    address indexed unStakedtokenAddress,\r\n    uint256 unStakedAmount,\r\n    uint256 time,\r\n    uint256 stakeId\r\n  );\r\n\r\n  event ReferralEarn(\r\n    address indexed userAddress,\r\n    address indexed callerAddress,\r\n    address indexed rewardTokenAddress,\r\n    uint256 rewardAmount,\r\n    uint256 time\r\n  );\r\n\r\n  constructor(address _trustedForwarder) Admin(_msgSender()) {\r\n    poolStartTime = block.timestamp;\r\n    trustedForwarder = _trustedForwarder;\r\n  }\r\n\r\n  /**\r\n   * @notice Stake tokens to earn rewards\r\n   * @param tokenAddress Staking token address\r\n   * @param amount Amount of tokens to be staked\r\n   */\r\n\r\n  function stake(\r\n    address referrerAddress,\r\n    address tokenAddress,\r\n    uint256 amount\r\n  ) external whenNotPaused {\r\n    // checks\r\n    require(_msgSender() != referrerAddress, \"STAKE: invalid referrer address\");\r\n    require(tokenDetails[tokenAddress].isExist, \"STAKE : Token is not Exist\");\r\n    require(\r\n      userTotalStaking[_msgSender()][tokenAddress].add(amount) >=\r\n        tokenDetails[tokenAddress].userMinStake,\r\n      \"STAKE : Min Amount should be within permit\"\r\n    );\r\n    require(\r\n      userTotalStaking[_msgSender()][tokenAddress].add(amount) <=\r\n        tokenDetails[tokenAddress].userMaxStake,\r\n      \"STAKE : Max Amount should be within permit\"\r\n    );\r\n    require(\r\n      totalStaking[tokenAddress].add(amount) <=\r\n        tokenDetails[tokenAddress].totalMaxStake,\r\n      \"STAKE : Maxlimit exceeds\"\r\n    );\r\n\r\n    require(\r\n      poolStartTime.add(stakeDuration) > block.timestamp,\r\n      \"STAKE: Staking Time Completed\"\r\n    );\r\n\r\n    // Storing stake details\r\n    stakingDetails[_msgSender()].stakeId.push(\r\n      stakingDetails[_msgSender()].stakeId.length\r\n    );\r\n    stakingDetails[_msgSender()].isActive.push(true);\r\n    stakingDetails[_msgSender()].user = _msgSender();\r\n    stakingDetails[_msgSender()].referrer.push(referrerAddress);\r\n    stakingDetails[_msgSender()].tokenAddress.push(tokenAddress);\r\n    stakingDetails[_msgSender()].startTime.push(block.timestamp);\r\n\r\n    // Update total staking amount\r\n    stakingDetails[_msgSender()].stakedAmount.push(amount);\r\n    totalStaking[tokenAddress] = totalStaking[tokenAddress].add(amount);\r\n    userTotalStaking[_msgSender()][tokenAddress] = userTotalStaking[\r\n      _msgSender()\r\n    ][tokenAddress].add(amount);\r\n\r\n    // Transfer tokens from user to contract\r\n    require(\r\n      IERC20(tokenAddress).transferFrom(_msgSender(), address(this), amount),\r\n      \"Transfer Failed\"\r\n    );\r\n\r\n    // Emit state changes\r\n    emit Stake(\r\n      _msgSender(),\r\n      (stakingDetails[_msgSender()].stakeId.length.sub(1)),\r\n      referrerAddress,\r\n      tokenAddress,\r\n      amount,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Claim accumulated rewards\r\n   * @param stakeId Stake ID of the user\r\n   * @param stakedAmount Staked amount of the user\r\n   */\r\n\r\n  function claimRewards(\r\n    address userAddress,\r\n    uint256 stakeId,\r\n    uint256 stakedAmount,\r\n    uint256 totalStake\r\n  ) internal {\r\n    // Local variables\r\n    uint256 interval;\r\n    uint256 endOfProfit;\r\n\r\n    interval = poolStartTime.add(stakeDuration);\r\n\r\n    // Interval calculation\r\n    if (interval > block.timestamp) endOfProfit = block.timestamp;\r\n    else endOfProfit = poolStartTime.add(stakeDuration);\r\n\r\n    interval = endOfProfit.sub(stakingDetails[userAddress].startTime[stakeId]);\r\n    uint256[2] memory stakeData;\r\n    stakeData[0] = (stakedAmount);\r\n    stakeData[1] = (totalStake);\r\n\r\n    // Reward calculation\r\n    if (interval >= HOURS)\r\n      _rewardCalculation(userAddress, stakeId, stakeData, interval);\r\n  }\r\n\r\n  function _rewardCalculation(\r\n    address userAddress,\r\n    uint256 stakeId,\r\n    uint256[2] memory stakingData,\r\n    uint256 interval\r\n  ) internal {\r\n    uint256 rewardsEarned;\r\n    uint256 refEarned;\r\n    uint256[2] memory noOfDays;\r\n\r\n    noOfDays[1] = interval.div(HOURS);\r\n    noOfDays[0] = interval.div(DAYS);\r\n\r\n    rewardsEarned = noOfDays[1].mul(\r\n      getOneDayReward(\r\n        stakingData[0],\r\n        stakingDetails[userAddress].tokenAddress[stakeId],\r\n        stakingDetails[userAddress].tokenAddress[stakeId],\r\n        stakingData[1]\r\n      )\r\n    );\r\n\r\n    // Referrer Earning\r\n    if (stakingDetails[userAddress].referrer[stakeId] != address(0)) {\r\n      refEarned = (rewardsEarned.mul(refPercentage)).div(100 ether);\r\n      rewardsEarned = rewardsEarned.sub(refEarned);\r\n\r\n      require(\r\n        IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).transfer(\r\n          stakingDetails[userAddress].referrer[stakeId],\r\n          refEarned\r\n        ) == true,\r\n        \"Transfer Failed\"\r\n      );\r\n\r\n      emit ReferralEarn(\r\n        stakingDetails[userAddress].referrer[stakeId],\r\n        _msgSender(),\r\n        stakingDetails[userAddress].tokenAddress[stakeId],\r\n        refEarned,\r\n        block.timestamp\r\n      );\r\n    }\r\n\r\n    //  Rewards Send\r\n    sendToken(\r\n      userAddress,\r\n      stakingDetails[userAddress].tokenAddress[stakeId],\r\n      stakingDetails[userAddress].tokenAddress[stakeId],\r\n      rewardsEarned\r\n    );\r\n\r\n    uint8 i = 1;\r\n\r\n    while (i < intervalDays.length) {\r\n      if (noOfDays[0] >= intervalDays[i]) {\r\n        uint256 reductionHours = (intervalDays[i].sub(1)).mul(24);\r\n        uint256 balHours = noOfDays[1].sub(reductionHours);\r\n\r\n        address rewardToken = tokensSequenceList[\r\n          stakingDetails[userAddress].tokenAddress[stakeId]\r\n        ][i];\r\n\r\n        if (\r\n          rewardToken != stakingDetails[userAddress].tokenAddress[stakeId] &&\r\n          tokenBlockedStatus[stakingDetails[userAddress].tokenAddress[stakeId]][\r\n            rewardToken\r\n          ] ==\r\n          false\r\n        ) {\r\n          rewardsEarned = balHours.mul(\r\n            getOneDayReward(\r\n              stakingData[0],\r\n              stakingDetails[userAddress].tokenAddress[stakeId],\r\n              rewardToken,\r\n              stakingData[1]\r\n            )\r\n          );\r\n\r\n          // Referrer Earning\r\n\r\n          if (stakingDetails[userAddress].referrer[stakeId] != address(0)) {\r\n            refEarned = (rewardsEarned.mul(refPercentage)).div(100 ether);\r\n            rewardsEarned = rewardsEarned.sub(refEarned);\r\n\r\n            require(\r\n              IERC20(rewardToken).transfer(\r\n                stakingDetails[userAddress].referrer[stakeId],\r\n                refEarned\r\n              ) == true,\r\n              \"Transfer Failed\"\r\n            );\r\n\r\n            emit ReferralEarn(\r\n              stakingDetails[userAddress].referrer[stakeId],\r\n              _msgSender(),\r\n              stakingDetails[userAddress].tokenAddress[stakeId],\r\n              refEarned,\r\n              block.timestamp\r\n            );\r\n          }\r\n\r\n          //  Rewards Send\r\n          sendToken(\r\n            userAddress,\r\n            stakingDetails[userAddress].tokenAddress[stakeId],\r\n            rewardToken,\r\n            rewardsEarned\r\n          );\r\n        }\r\n        i = i + 1;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get rewards for one day\r\n   * @param stakedAmount Stake amount of the user\r\n   * @param stakedToken Staked token address of the user\r\n   * @param rewardToken Reward token address\r\n   * @return reward One dayh reward for the user\r\n   */\r\n\r\n  function getOneDayReward(\r\n    uint256 stakedAmount,\r\n    address stakedToken,\r\n    address rewardToken,\r\n    uint256 totalStake\r\n  ) public view returns (uint256 reward) {\r\n    uint256 lockBenefit;\r\n\r\n    if (tokenDetails[stakedToken].optionableStatus) {\r\n      stakedAmount = stakedAmount.mul(optionableBenefit);\r\n      lockBenefit = stakedAmount.mul(optionableBenefit.sub(1));\r\n      reward = (\r\n        stakedAmount.mul(tokenDailyDistribution[stakedToken][rewardToken])\r\n      ).div(totalStake.add(lockBenefit));\r\n    } else {\r\n      reward = (\r\n        stakedAmount.mul(tokenDailyDistribution[stakedToken][rewardToken])\r\n      ).div(totalStake);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get rewards for one day\r\n   * @param stakedToken Stake amount of the user\r\n   * @param tokenAddress Reward token address\r\n   * @param amount Amount to be transferred as reward\r\n   */\r\n  function sendToken(\r\n    address userAddress,\r\n    address stakedToken,\r\n    address tokenAddress,\r\n    uint256 amount\r\n  ) internal {\r\n    // Checks\r\n    if (tokenAddress != address(0)) {\r\n      require(\r\n        rewardCap[tokenAddress] >= amount,\r\n        \"SEND : Insufficient Reward Balance\"\r\n      );\r\n      // Transfer of rewards\r\n      rewardCap[tokenAddress] = rewardCap[tokenAddress].sub(amount);\r\n\r\n      require(\r\n        IERC20(tokenAddress).transfer(userAddress, amount),\r\n        \"Transfer failed\"\r\n      );\r\n\r\n      // Emit state changes\r\n      emit Claim(\r\n        userAddress,\r\n        stakedToken,\r\n        tokenAddress,\r\n        amount,\r\n        block.timestamp\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Unstake and claim rewards\r\n   * @param stakeId Stake ID of the user\r\n   */\r\n  function unStake(address userAddress, uint256 stakeId)\r\n    external\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    require(\r\n      _msgSender() == userAddress || _msgSender() == _owner,\r\n      \"UNSTAKE: Invalid User Entry\"\r\n    );\r\n\r\n    address stakedToken = stakingDetails[userAddress].tokenAddress[stakeId];\r\n\r\n    // lockableDays check\r\n    require(\r\n      tokenDetails[stakedToken].lockableDays <= block.timestamp,\r\n      \"UNSTAKE: Token Locked\"\r\n    );\r\n\r\n    // optional lock check\r\n    if (tokenDetails[stakedToken].optionableStatus)\r\n      require(\r\n        stakingDetails[userAddress].startTime[stakeId].add(stakeDuration) <=\r\n          block.timestamp,\r\n        \"UNSTAKE: Locked in optional lock\"\r\n      );\r\n\r\n    // Checks\r\n    require(\r\n      stakingDetails[userAddress].stakedAmount[stakeId] > 0 ||\r\n        stakingDetails[userAddress].isActive[stakeId] == true,\r\n      \"UNSTAKE : Already Claimed (or) Insufficient Staked\"\r\n    );\r\n\r\n    // State updation\r\n    uint256 stakedAmount = stakingDetails[userAddress].stakedAmount[stakeId];\r\n    uint256 totalStaking1 = totalStaking[stakedToken];\r\n\r\n    stakingDetails[userAddress].stakedAmount[stakeId] = 0;\r\n    stakingDetails[userAddress].isActive[stakeId] = false;\r\n\r\n    // Balance check\r\n    require(\r\n      IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).balanceOf(\r\n        address(this)\r\n      ) >= stakedAmount,\r\n      \"UNSTAKE : Insufficient Balance\"\r\n    );\r\n\r\n    // Transfer staked token back to user\r\n    IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).transfer(\r\n      userAddress,\r\n      stakedAmount\r\n    );\r\n\r\n    claimRewards(userAddress, stakeId, stakedAmount, totalStaking1);\r\n\r\n    // Emit state changes\r\n    emit UnStake(\r\n      userAddress,\r\n      stakingDetails[userAddress].tokenAddress[stakeId],\r\n      stakedAmount,\r\n      block.timestamp,\r\n      stakeId\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  function emergencyUnstake(\r\n    uint256 stakeId,\r\n    address userAddress,\r\n    address[] memory rewardtokens,\r\n    uint256[] memory amount\r\n  ) external onlyOwner {\r\n    // Checks\r\n    require(\r\n      stakingDetails[userAddress].stakedAmount[stakeId] > 0 &&\r\n        stakingDetails[userAddress].isActive[stakeId] == true,\r\n      \"EMERGENCY : Already Claimed (or) Insufficient Staked\"\r\n    );\r\n\r\n    // Balance check\r\n    require(\r\n      IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).balanceOf(\r\n        address(this)\r\n      ) >= stakingDetails[userAddress].stakedAmount[stakeId],\r\n      \"EMERGENCY : Insufficient Balance\"\r\n    );\r\n\r\n    uint256 stakeAmount = stakingDetails[userAddress].stakedAmount[stakeId];\r\n    stakingDetails[userAddress].isActive[stakeId] = false;\r\n    stakingDetails[userAddress].stakedAmount[stakeId] = 0;\r\n\r\n    IERC20(stakingDetails[userAddress].tokenAddress[stakeId]).transfer(\r\n      userAddress,\r\n      stakeAmount\r\n    );\r\n\r\n    for (uint256 i; i < rewardtokens.length; i++) {\r\n      uint256 rewardsEarned = amount[i];\r\n\r\n      if (stakingDetails[userAddress].referrer[stakeId] != address(0)) {\r\n        uint256 refEarned = (rewardsEarned.mul(refPercentage)).div(100 ether);\r\n        rewardsEarned = rewardsEarned.sub(refEarned);\r\n\r\n        require(\r\n          IERC20(rewardtokens[i]).transfer(\r\n            stakingDetails[userAddress].referrer[stakeId],\r\n            refEarned\r\n          ),\r\n          \"EMERGENCY : Transfer Failed\"\r\n        );\r\n\r\n        emit ReferralEarn(\r\n          stakingDetails[userAddress].referrer[stakeId],\r\n          userAddress,\r\n          rewardtokens[i],\r\n          refEarned,\r\n          block.timestamp\r\n        );\r\n      }\r\n\r\n      sendToken(\r\n        userAddress,\r\n        stakingDetails[userAddress].tokenAddress[stakeId],\r\n        rewardtokens[i],\r\n        rewardsEarned\r\n      );\r\n    }\r\n\r\n    // Emit state changes\r\n    emit UnStake(\r\n      userAddress,\r\n      stakingDetails[userAddress].tokenAddress[stakeId],\r\n      stakeAmount,\r\n      block.timestamp,\r\n      stakeId\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice View staking details\r\n   * @param _user User address\r\n   */\r\n  function viewStakingDetails(address _user)\r\n    public\r\n    view\r\n    returns (\r\n      address[] memory,\r\n      address[] memory,\r\n      bool[] memory,\r\n      uint256[] memory,\r\n      uint256[] memory,\r\n      uint256[] memory\r\n    )\r\n  {\r\n    return (\r\n      stakingDetails[_user].referrer,\r\n      stakingDetails[_user].tokenAddress,\r\n      stakingDetails[_user].isActive,\r\n      stakingDetails[_user].stakeId,\r\n      stakingDetails[_user].stakedAmount,\r\n      stakingDetails[_user].startTime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Override this function.\r\n   * This version is to keep track of BaseRelayRecipient you are using\r\n   * in your contract.\r\n   */\r\n  function versionRecipient() external pure override returns (string memory) {\r\n    return \"1\";\r\n  }\r\n\r\n  function updateTrustForwarder(address _newTrustForwarder) external onlyOwner {\r\n    trustedForwarder = _newTrustForwarder;\r\n  }\r\n\r\n  function pause() external onlyOwner returns (bool) {\r\n    _pause();\r\n    return true;\r\n  }\r\n\r\n  function unpause() external onlyOwner returns (bool) {\r\n    _unpause();\r\n    return true;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blockedStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BlockedDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DailyDistributionDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"updatedIntervals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"IntervalDaysDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockableDys\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"optionalbleStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedTime\",\"type\":\"uint256\"}],\"name\":\"LockableTokenDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedBenefit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OptionableBenefitDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReferralEarn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedRefPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReferrerPercentageDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardTokenSequence\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SequenceDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StakeDurationDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userMinStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userMaxStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalMaxStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedTime\",\"type\":\"uint256\"}],\"name\":\"TokenDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unStakedtokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WithdrawDetails\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOURS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userMinStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMaxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeTokenBlockedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardtokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"getOneDayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"intervalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"lockableStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lockedDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optionableStatus\",\"type\":\"bool\"}],\"name\":\"lockableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionableBenefit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakedToken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewardToken\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dailyDistribution\",\"type\":\"uint256[]\"}],\"name\":\"setDailyDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"setRewardCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBlockedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDailyDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDetails\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"userMinStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMaxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockableDays\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"optionableStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensSequenceList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_interval\",\"type\":\"uint256[]\"}],\"name\":\"updateIntervalDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"benefit\",\"type\":\"uint256\"}],\"name\":\"updateOptionableBenefit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"refPer\",\"type\":\"uint256\"}],\"name\":\"updateRefPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokenSequence\",\"type\":\"address[]\"}],\"name\":\"updateSequence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationTime\",\"type\":\"uint256\"}],\"name\":\"updateStakeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userMinStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userMaxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTrustForwarder\",\"type\":\"address\"}],\"name\":\"updateTrustForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewStakingDetails\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UnifarmV31", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000086c80a8aa58e0a4fa09a69624c31ab2a6cad56b8", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://854eb1553bc0a88f49526bd87f66233cb13fd58927cac57dfaeef59dd180de30"}