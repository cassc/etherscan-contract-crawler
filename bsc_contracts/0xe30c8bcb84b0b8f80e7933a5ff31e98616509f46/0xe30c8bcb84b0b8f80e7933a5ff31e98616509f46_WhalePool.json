{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/rug-zombie/WhalePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../includes/access/Ownable.sol\\\";\\nimport \\\"../includes/interfaces/IRugZombieNft.sol\\\";\\nimport \\\"../includes/interfaces/IPriceConsumerV3.sol\\\";\\nimport \\\"../includes/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../includes/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"../includes/vrf/VRFCoordinatorV2Interface.sol\\\";\\n\\ncontract WhalePool is Ownable, ReentrancyGuard, VRFConsumerBaseV2 {\\n    uint32 public vrfGasLimit = 50000;  // Gas limit for VRF callbacks\\n    uint16 public vrfConfirms = 3;      // Number of confirmations for VRF randomness returns\\n    uint32 public vrfWords    = 1;      // Number of random words to get back from VRF\\n\\n    struct UserInfo {\\n        address stakedNft;      // Address of the NFT the user has staked\\n        uint    stakedId;       // Token ID of the NFT the user has staked\\n        uint    lastNftMint;    // The timestamp of the last minting/time user started staking\\n        bool    isStaked;       // Flag for if the user is staked\\n        bool    isMinting;      // Flag for if the user has an active minting request\\n        bool    hasRandom;      // Flag for if we have gotten back a random number from Chainlink\\n        uint    randomNumber;   // The random number used to determine which reward to give user\\n    }\\n\\n    IRugZombieNft               public stakeNft;            // The current staking NFT\\n    IRugZombieNft               public consolationPrize;    // The consolation prize NFT\\n    IPriceConsumerV3            public priceConsumer;       // The price consumer for doing BUSD - BNB conversion\\n    VRFCoordinatorV2Interface   public vrfCoordinator;      // Coordinator for requesting randomness\\n\\n    uint        public  mintingTime;    // How long a user must be staked to be eligiable to claim NFT\\n    uint        public  mintingFee;     // The fee charged to cover Chainlink VRF\\n    address     payable treasury;       // The treasury address to send minting fees to\\n    address[]   public  rewardNfts;     // Array of potential reward NFTs\\n    uint        public  totalStakers;   // Count of how many users are currently staked in the pool\\n    bytes32     public  keyHash;        // Chainlink VRF key hash\\n    uint64      public  vrfSubId;       // Chainlink VRF subscription ID\\n\\n    mapping(address => UserInfo)    public userInfo;            // Mapping of user requests\\n    mapping(uint256 => address)     public randomRequests;      // Mapping of random requsts to the user making it\\n\\n    // Zero address for clearing address values\\n    address public zeroAddress = address(0x0000000000000000000000000000000000000000);\\n\\n    // Events for doing any off chain tracking\\n    event MintReward(address indexed to, uint date, address nft, uint indexed id, uint random);\\n    event MintConsolation(address indexed to, uint date, address nft, uint indexed id);\\n    event Deposit(address indexed user, address indexed nft, uint indexed id);\\n    event Withdraw(address indexed user, address indexed nft, uint indexed id);\\n\\n    // Constructor for creating the contract with initial values\\n    constructor(\\n        address _treasury,\\n        address _priceConsumer,\\n        address _stakeNft,\\n        uint _mintingTime, \\n        uint _mintingFee,\\n        address _consolationPrize,\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _vrfSubId\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\n        treasury = payable(_treasury);\\n        priceConsumer = IPriceConsumerV3(_priceConsumer);\\n        stakeNft = IRugZombieNft(_stakeNft);\\n        mintingTime = _mintingTime;\\n        mintingFee = _mintingFee;\\n        consolationPrize = IRugZombieNft(_consolationPrize);\\n        vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        keyHash = _keyHash;\\n        vrfSubId = _vrfSubId;\\n    }\\n\\n    // Function for the owner to update the treasury address\\n    function setTreasury(address _treasury) public onlyOwner() {\\n        treasury = payable(_treasury);\\n    }\\n\\n    // Function for the owner to update the staking details\\n    function setStakeInfo(address _stakeNft, uint _mintingTime, uint _mintingFee) public onlyOwner() {\\n        stakeNft = IRugZombieNft(_stakeNft);\\n        mintingTime = _mintingTime;\\n        mintingFee = _mintingFee;\\n    }\\n\\n    // Function for the owner to update the consolation prize\\n    function setConsolationPrize(address _consolationPrize) public onlyOwner() {\\n        consolationPrize = IRugZombieNft(_consolationPrize);\\n    }\\n\\n    // Function for the owner to add a NFT reward\\n    function addReward(address _nft) public onlyOwner() {\\n        rewardNfts.push(_nft);\\n    }\\n\\n    // Function for the owner to set the rewards array\\n    function setRewards(address[] memory _nfts) public onlyOwner() {\\n        rewardNfts = _nfts;\\n    }\\n\\n    // Function for the owner to update the price consumer address\\n    function setPriceConsumer(address _priceConsumer) public onlyOwner() {\\n        priceConsumer = IPriceConsumerV3(_priceConsumer);\\n    }\\n\\n    // Function to check if a given user is staked with the current whale pool NFT\\n    function checkUserStaked(address _user) public view returns(bool) {\\n        if (!userInfo[_user].isStaked) return false;\\n        return userInfo[_user].stakedNft == address(stakeNft);\\n    }\\n\\n    // Function to get the current minting fee in BNB\\n    function mintingFeeInBnb() public view returns(uint) {\\n        return priceConsumer.usdToBnb(mintingFee);\\n    }\\n\\n    // Function to get a user's NFT minting timer\\n    function nftMintTime(address _user) public view returns(uint) {\\n        UserInfo memory user = userInfo[_user];\\n        uint256 mintTime = user.lastNftMint + mintingTime;\\n        if (!user.isStaked) return 2**256 - 1;\\n        else if (block.timestamp > mintTime) return 0;\\n        else return (userInfo[_user].lastNftMint + mintingTime) - block.timestamp;\\n    }\\n\\n    // Function for a user to enter staking in the contract\\n    function stake(uint _tokenId) public {\\n        require(!userInfo[msg.sender].isStaked, 'You are already staked in the pool');\\n        require(_tokenId > 0, 'Invalid token ID');\\n\\n        stakeNft.transferFrom(msg.sender, address(this), _tokenId);\\n        require(stakeNft.ownerOf(_tokenId) == address(this), 'Stake NFT transfer failed');\\n\\n        userInfo[msg.sender].stakedNft = address(stakeNft);\\n        userInfo[msg.sender].stakedId = _tokenId;\\n        userInfo[msg.sender].lastNftMint = block.timestamp;\\n        userInfo[msg.sender].isStaked = true;\\n        userInfo[msg.sender].isMinting = false;\\n        userInfo[msg.sender].hasRandom = false;\\n\\n        totalStakers++;\\n        \\n        emit Deposit(msg.sender, address(stakeNft), _tokenId);\\n    }\\n\\n    // Function for a user to unstake and claim a consolation prize if eligable\\n    function unstake() public {\\n        require(userInfo[msg.sender].isStaked, 'You are not staked in the pool');\\n        require(!userInfo[msg.sender].isMinting, 'You have an active minting that must be finished first');\\n\\n        if ((userInfo[msg.sender].lastNftMint + mintingTime) <= block.timestamp) {\\n            require(userInfo[msg.sender].stakedNft != address(stakeNft), 'You have an available NFT to claim before unstaking');\\n            uint tokenId = consolationPrize.reviveRug(msg.sender);\\n            emit MintConsolation(msg.sender, block.timestamp, address(consolationPrize), tokenId);\\n        }\\n\\n        IRugZombieNft nft = IRugZombieNft(userInfo[msg.sender].stakedNft);\\n        nft.transferFrom(address(this), msg.sender, userInfo[msg.sender].stakedId);\\n        require(nft.ownerOf(userInfo[msg.sender].stakedId) == msg.sender, 'NFT unstaking failed');\\n\\n        userInfo[msg.sender].stakedNft = zeroAddress;\\n        userInfo[msg.sender].stakedId = 0;\\n        userInfo[msg.sender].isStaked = false;\\n        userInfo[msg.sender].isMinting = false;\\n        userInfo[msg.sender].hasRandom = false;\\n\\n        totalStakers--;\\n\\n        emit Withdraw(msg.sender, userInfo[msg.sender].stakedNft, userInfo[msg.sender].stakedId);\\n    }\\n\\n    // Function for a user to unstake their NFT in an emergency without any regards for rewards\\n    function emergencyUnstake() public {\\n        require(userInfo[msg.sender].isStaked, 'You are not staked in the pool');\\n\\n        IRugZombieNft nft = IRugZombieNft(userInfo[msg.sender].stakedNft);\\n        nft.transferFrom(address(this), msg.sender, userInfo[msg.sender].stakedId);\\n        require(nft.ownerOf(userInfo[msg.sender].stakedId) == msg.sender, 'NFT unstaking failed');\\n\\n        userInfo[msg.sender].stakedNft = zeroAddress;\\n        userInfo[msg.sender].stakedId = 0;\\n        userInfo[msg.sender].isStaked = false;\\n        userInfo[msg.sender].isMinting = false;\\n        userInfo[msg.sender].hasRandom = false;\\n\\n        totalStakers--;\\n\\n        emit Withdraw(msg.sender, userInfo[msg.sender].stakedNft, userInfo[msg.sender].stakedId);\\n    }\\n\\n    // Function for a user to start minting\\n    function startMinting() public payable nonReentrant() returns (uint256) {\\n        require(userInfo[msg.sender].isStaked, 'You are not staked in the pool');\\n        require((userInfo[msg.sender].lastNftMint + mintingTime) <= block.timestamp, 'NFT minting is not ready');\\n        require(!userInfo[msg.sender].isMinting, 'You already have an active minting request');\\n        require(userInfo[msg.sender].stakedNft == address(stakeNft), 'You are staked with previous season NFT, must unstake');\\n        require(msg.value >= mintingFeeInBnb(), 'Insufficient BNB sent for minting fee');\\n\\n        _safeTransfer(treasury, msg.value);\\n        \\n        userInfo[msg.sender].isMinting = true;\\n        userInfo[msg.sender].hasRandom = false;\\n        uint256 id = vrfCoordinator.requestRandomWords(keyHash, vrfSubId, vrfConfirms, vrfGasLimit, vrfWords);\\n        randomRequests[id] = msg.sender;\\n        return id;\\n    }\\n\\n    // Function for a user to finish the minting process and claim their reward\\n    function finishMinting() public returns(uint) {\\n        require(userInfo[msg.sender].isMinting, 'You do not have an active minting request');\\n        require(userInfo[msg.sender].hasRandom, 'Minting has not yet finished');\\n\\n        IRugZombieNft reward = IRugZombieNft(rewardNfts[userInfo[msg.sender].randomNumber]);\\n        uint tokenId = reward.reviveRug(msg.sender);\\n\\n        userInfo[msg.sender].lastNftMint = block.timestamp;\\n        userInfo[msg.sender].isMinting = false;\\n        userInfo[msg.sender].hasRandom = false;\\n\\n        emit MintReward(msg.sender, block.timestamp, address(reward), tokenId, userInfo[msg.sender].randomNumber);\\n\\n        return tokenId;\\n    }\\n\\n    // Function for the Chainlink VRF to return a random number to us\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomNumbers) internal override {\\n        uint randomNumber = _randomNumbers[0] % rewardNfts.length;\\n        address user = randomRequests[_requestId];\\n        userInfo[user].randomNumber = randomNumber;\\n        userInfo[user].hasRandom = true;\\n        randomRequests[_requestId] = zeroAddress;\\n    }\\n\\n    // Function to safely transfer BNB received to the treasury\\n    function _safeTransfer(address _recipient, uint _amount) private {\\n        (bool _success, ) = _recipient.call{value: _amount}(\\\"\\\");\\n        require(_success, \\\"Transfer failed.\\\");\\n    }\\n}\"\r\n    },\r\n    \"/contracts/includes/vrf/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\"\r\n    },\r\n    \"/contracts/includes/vrf/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\"\r\n    },\r\n    \"/contracts/includes/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/includes/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns ( bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/includes/interfaces/IRugZombieNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IRugZombieNft {\\n    function totalSupply() external view returns (uint256);\\n    function reviveRug(address _to) external returns(uint);\\n    function transferOwnership(address newOwner) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external returns (bool);\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function owner() external view returns (address);\\n    function approve(address to, uint256 tokenId) external;\\n    function balanceOf(address _owner) external view returns (uint256);\\n}\"\r\n    },\r\n    \"/contracts/includes/interfaces/IPriceConsumerV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IPriceConsumerV3 {\\n    function getLatestPrice() external view returns (uint);\\n    function unlockFeeInBnb(uint) external view returns (uint);\\n    function usdToBnb(uint) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"/contracts/includes/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor()  {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceConsumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consolationPrize\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_vrfSubId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MintConsolation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"MintReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consolationPrize\",\"outputs\":[{\"internalType\":\"contract IRugZombieNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFeeInBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"nftMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceConsumer\",\"outputs\":[{\"internalType\":\"contract IPriceConsumerV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardNfts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consolationPrize\",\"type\":\"address\"}],\"name\":\"setConsolationPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceConsumer\",\"type\":\"address\"}],\"name\":\"setPriceConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingFee\",\"type\":\"uint256\"}],\"name\":\"setStakeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeNft\",\"outputs\":[{\"internalType\":\"contract IRugZombieNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakedNft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastNftMint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMinting\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasRandom\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfConfirms\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WhalePool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000066d7937f2e9f636a77a7037e2e956a0d0edd9ae3000000000000000000000000abaad8dba90acf6ecd558e1f4c7055f8942283b1000000000000000000000000adebc6fe47baf315bfbd66f8ce515fbc78bf42eb0000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000e72cffdeffd85f2a2b83b58fdbf3ccaba578599a000000000000000000000000c587d9053cd1118f25f645f9e08bb98c9712a4ee114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa040000000000000000000000000000000000000000000000000000000000000087", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}