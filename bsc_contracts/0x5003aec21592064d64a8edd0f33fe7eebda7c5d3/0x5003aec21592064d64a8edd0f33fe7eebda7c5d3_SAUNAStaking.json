{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\npragma solidity 0.8.3;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeBEP20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeBEP20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeBEP20: BEP20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ncontract SAUNAStaking is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n    // The address of the smart chef factory\r\n    address public SMART_CHEF_FACTORY;\r\n\r\n    // Whether a limit is set for users\r\n    bool public hasUserLimit;\r\n\r\n    // Whether it is initialized\r\n    bool public isInitialized;\r\n\r\n    // Accrued token per share\r\n    uint256 public accTokenPerShare;\r\n\r\n    // The block number when Pool mining ends.\r\n    uint256 public bonusEndBlock;\r\n\r\n    // The block number when Pool mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // The block number of the last pool update\r\n    uint256 public lastRewardBlock;\r\n\r\n    // Last claimed block\r\n    uint256 public lastClaimedBlock;\r\n\r\n    // The pool limit (0 if none)\r\n    uint256 public poolLimitPerUser;\r\n\r\n    // CAKE tokens created per block.\r\n    uint256 public rewardPerBlock;\r\n\r\n    // The precision factor\r\n    uint256 public PRECISION_FACTOR;\r\n\r\n    // Harvest interval in seconds\r\n    uint256 public harvestInterval = 0;\r\n\r\n    // Harvest timelock on/off\r\n    bool public harvestLockOn = false;\r\n\r\n    // Total locked up rewards\r\n    uint256 public totalLockedUpRewards;\r\n\r\n    // Withdraw timelock method\r\n    // 0 - disable withdraw timelock\r\n    // 1 - enable withdraw timelock, no one can withdraw\r\n    // 2 - enable withdraw timelock, but can withdraw with paying fee\r\n    uint8 public withdrawLockMethod = 0;\r\n\r\n    // Withdraw interval in seconds\r\n    uint256 public withdrawInterval = 0;\r\n\r\n    // Withdraw fee allocation method\r\n    // 0 - withdraw fee off\r\n    // 1 - 100% to marketing address\r\n    // 2 - 100% burn\r\n    // 3 - 50% to marketing address, 50% burn\r\n    // 4 - add to BNB-SAUNA liquidity\r\n    uint8 public withdrawFeeMethod = 0;\r\n\r\n    // Withdraw fee (default 1%)\r\n    uint16 public withdrawFee = 100;\r\n\r\n    // Max withdraw fee 20%\r\n    uint16 public constant MAX_WITHDRAW_FEE = 2000;\r\n\r\n    // Marketing address\r\n    address public marketingAddress;\r\n\r\n    // Burn address\r\n    address public constant BURN_ADDRESS =\r\n        0x000000000000000000000000000000000000dEaD;\r\n\r\n    // Deposit whitelist on/off\r\n    bool public depositWhitelistOn = false;\r\n\r\n    // Deposit whitelist\r\n    mapping(address => bool) public depositWhitelist;\r\n\r\n    // The reward token\r\n    IBEP20 public rewardToken;\r\n\r\n    // The staked token\r\n    IBEP20 public stakedToken;\r\n\r\n    // The pair token : withdraw fee will be added to stakedToken-pairToken lp\r\n    IBEP20 public pairToken;\r\n\r\n    // The pair token is bnb or not\r\n    bool public isBnbPairToken;\r\n\r\n    // Withdraw fee liquidity pair\r\n    address public feeLiquidityPair;\r\n\r\n    // The swap router, modifiable.\r\n    IUniswapV2Router02 public saunaSwapRouter;\r\n\r\n    // Total shares (only used in auto-compound mode)\r\n    uint256 public totalShares;\r\n\r\n    // Total staking tokens\r\n    uint256 public totalStakings;\r\n\r\n    // Total reward tokens\r\n    uint256 public totalRewards;\r\n\r\n    // Freeze start block\r\n    uint256 public freezeStartBlock;\r\n\r\n    // Freeze end block\r\n    uint256 public freezeEndBlock;\r\n\r\n    // Minimum deposit amount\r\n    uint256 public minDepositAmount;\r\n\r\n    // Auto-compounding on / off\r\n    bool public autoCompoundOn = false;\r\n\r\n    uint256 public constant MAX_COMPOUND_PERFORMANCE_FEE = 500; // 5%\r\n    uint256 public constant MAX_COMPOUND_CALL_FEE = 100; // 1%\r\n    uint256 public constant MAX_COMPOUND_WITHDRAW_FEE = 100; // 1%\r\n    uint256 public constant MAX_COMPOUND_WITHDRAW_FEE_PERIOD = 72 hours; // 3 days\r\n\r\n    uint256 public compoundPerformanceFee = 200; // 2%\r\n    uint256 public compoundCallFee = 25; // 0.25%\r\n    uint256 public compoundWithdrawFee = 10; // 0.1%\r\n    uint256 public compoundWithdrawFeePeriod = 72 hours; // 3 days\r\n\r\n    address[] public userList;\r\n\r\n    // Info of each user that stakes tokens (stakedToken)\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many staked tokens the user has provided\r\n        uint256 rewardDebt; // Reward debt\r\n        bool registered; // it will add user in address list on first deposit\r\n        address addr; //address of user\r\n        uint256 rewardLockedUp; // Reward locked up.\r\n        uint256 nextHarvestUntil; // When can the user harvest again.\r\n        uint256 nextWithdrawUntil; // When can the user withdraw again.\r\n        uint256 lastDepositedTime; // keeps track of deposited time for potential penalty\r\n    }\r\n\r\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n    event NewRewardPerBlock(uint256 rewardPerBlock);\r\n    event NewFreezeBlocks(uint256 freezeStartBlock, uint256 freezeEndBlock);\r\n    event NewPoolLimit(uint256 poolLimitPerUser);\r\n    event RewardsStop(uint256 blockNumber);\r\n    event RewardLockedUp(address indexed user, uint256 amountLockedUp);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event AddRewardTokens(address indexed user, uint256 amount);\r\n    event SaunaSwapRouterUpdated(\r\n        address indexed operator,\r\n        address indexed router,\r\n        address indexed pair\r\n    );\r\n    event PairTokenUpdated(\r\n        address indexed operator,\r\n        address indexed router,\r\n        address indexed pair\r\n    );\r\n    event UpdateCompoundPerformancefee(\r\n        address indexed sender,\r\n        uint256 oldFee,\r\n        uint256 newFee\r\n    );\r\n    event UpdateCompoundCallfee(\r\n        address indexed sender,\r\n        uint256 oldFee,\r\n        uint256 newFee\r\n    );\r\n    event UpdateCompoundWithdrawfee(\r\n        address indexed sender,\r\n        uint256 oldFee,\r\n        uint256 newFee\r\n    );\r\n    event UpdateCompoundWithdrawFeePeriod(\r\n        address indexed sender,\r\n        uint256 oldPeriod,\r\n        uint256 newPeriod\r\n    );\r\n\r\n    constructor() {\r\n        SMART_CHEF_FACTORY = msg.sender;\r\n    }\r\n\r\n    /*\r\n     * @notice Initialize the contract\r\n     * @param _stakedToken: staked token address\r\n     * @param _rewardToken: reward token address\r\n     * @param _rewardPerBlock: reward per block (in rewardToken)\r\n     * @param _startBlock: start block\r\n     * @param _bonusEndBlock: end block\r\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\r\n     * @param _autoCompoundOn: On/Off auto-compounding feature\r\n     * @param _admin: admin address with ownership\r\n     */\r\n    function initialize(\r\n        IBEP20 _stakedToken,\r\n        IBEP20 _rewardToken,\r\n        bool _isBnbPairToken,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock,\r\n        uint256 _poolLimitPerUser,\r\n        uint256 _minDepositAmount,\r\n        bool _autoCompoundOn,\r\n        address _admin\r\n    ) external {\r\n        require(!isInitialized, \"Already initialized\");\r\n        require(msg.sender == SMART_CHEF_FACTORY, \"Not factory\");\r\n        require(\r\n            _autoCompoundOn == false ||\r\n                address(_stakedToken) == address(_rewardToken),\r\n            \"Staking token must be same as reward token when auto compounding feature is on\"\r\n        );\r\n\r\n        // Make this contract initialized\r\n        isInitialized = true;\r\n\r\n        stakedToken = _stakedToken;\r\n        rewardToken = _rewardToken;\r\n        isBnbPairToken = _isBnbPairToken;\r\n        rewardPerBlock = _rewardPerBlock;\r\n        startBlock = _startBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n        minDepositAmount = _minDepositAmount;\r\n        autoCompoundOn = _autoCompoundOn;\r\n\r\n        if (_poolLimitPerUser > 0) {\r\n            hasUserLimit = true;\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        }\r\n\r\n        uint256 decimalsRewardToken = uint256(rewardToken.decimals());\r\n        require(decimalsRewardToken < 30, \"Must be inferior to 30\");\r\n\r\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\r\n\r\n        // Set the lastRewardBlock and lastClaimedBlock as the startBlock\r\n        lastRewardBlock = startBlock;\r\n        lastClaimedBlock = startBlock;\r\n\r\n        // Transfer ownership to the admin address who becomes owner of the contract\r\n        transferOwnership(_admin);\r\n    }\r\n\r\n    /*\r\n     * @notice Deposit staked tokens and collect reward tokens (if any)\r\n     * @param _amount: amount to withdraw (in rewardToken)\r\n     */\r\n    function deposit(uint256 _amount) external nonReentrant {\r\n        require(\r\n            _amount > 0 || autoCompoundOn == false,\r\n            \"Harvest disabled in auto-compounding mode\"\r\n        );\r\n        require(\r\n            depositWhitelistOn == false || depositWhitelist[msg.sender] == true,\r\n            \"Address not in whitelist\"\r\n        );\r\n        require(isFrozen() == false, \"deposit is frozen\");\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(\r\n            _amount.add(user.amount) >= minDepositAmount,\r\n            \"User amount below minimum\"\r\n        );\r\n\r\n        if (hasUserLimit) {\r\n            require(\r\n                _amount.add(user.amount) <= poolLimitPerUser,\r\n                \"User amount above limit\"\r\n            );\r\n        }\r\n\r\n        _updatePool();\r\n\tpayOrLockupPendingReward();\r\n\r\n        if (user.amount == 0 && user.registered == false) {\r\n\t\tuserList.push(msg.sender);\r\n                user.registered = true;\r\n\t        user.addr = address(msg.sender);\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            // Every time when there is a new deposit, reset withdraw interval\r\n            user.nextWithdrawUntil = block.timestamp.add(withdrawInterval);\r\n\r\n            stakedToken.safeTransferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                _amount\r\n            );\r\n\r\n            uint256 currentShares = 0;\r\n            if (totalShares != 0) {\r\n                currentShares = (_amount.mul(totalShares)).div(totalStakings);\r\n            } else {\r\n                currentShares = _amount;\r\n            }\r\n\r\n            user.amount = user.amount.add(currentShares);\r\n            user.lastDepositedTime = block.timestamp;\r\n\r\n            totalShares = totalShares.add(currentShares);\r\n            totalStakings = totalStakings.add(_amount);\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\r\n            PRECISION_FACTOR\r\n        );\r\n\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice View function to see if user can harvest.\r\n     */\r\n    function canHarvest(address _user) public view returns (bool) {\r\n        UserInfo storage user = userInfo[_user];\r\n        return\r\n            harvestLockOn == false || block.timestamp >= user.nextHarvestUntil;\r\n    }\r\n\r\n    /**\r\n     * @notice View function to see if user can withdraw.\r\n     */\r\n    function canWithdraw(address _user) public view returns (bool) {\r\n        UserInfo storage user = userInfo[_user];\r\n        return\r\n            withdrawLockMethod == 0 ||\r\n            withdrawLockMethod == 2 ||\r\n            block.timestamp >= user.nextWithdrawUntil;\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward variables of the given pool to be up-to-date.\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 stakedTokenSupply = totalStakings;\r\n\r\n        if (stakedTokenSupply == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n        uint256 cakeReward = multiplier.mul(rewardPerBlock);\r\n        accTokenPerShare = accTokenPerShare.add(\r\n            cakeReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\r\n        );\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Return reward multiplier over the given _from to _to block.\r\n     * @param _from: block to start\r\n     * @param _to: block to finish\r\n     */\r\n    function _getMultiplier(uint256 _from, uint256 _to)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return 0;\r\n        } else {\r\n            return bonusEndBlock.sub(_from);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Claim and compound tokens\r\n     */\r\n    function claim() external nonReentrant {\r\n        require(autoCompoundOn, \"Only available in auto-compound mode\");\r\n        require(\r\n            lastClaimedBlock < block.number,\r\n            \"Current block number should be after lastClaimedBlock\"\r\n        );\r\n\r\n        uint256 multiplier = _getMultiplier(lastClaimedBlock, block.number);\r\n        uint256 claimedAmount = multiplier.mul(rewardPerBlock);\r\n\r\n        if (compoundPerformanceFee > 0) {\r\n            uint256 currentPerformanceFee = claimedAmount\r\n                .mul(compoundPerformanceFee)\r\n                .div(10000); // performance fee\r\n            stakedToken.safeTransfer(marketingAddress, currentPerformanceFee);\r\n            claimedAmount = claimedAmount.sub(currentPerformanceFee);\r\n        }\r\n\r\n        if (compoundCallFee > 0) {\r\n            uint256 currentCallFee = claimedAmount.mul(compoundCallFee).div(\r\n                10000\r\n            ); // call fee\r\n            stakedToken.safeTransfer(msg.sender, currentCallFee);\r\n            claimedAmount = claimedAmount.sub(currentCallFee);\r\n        }\r\n\r\n        totalStakings = totalStakings.add(claimedAmount);\r\n        lastClaimedBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw staked tokens and collect reward tokens\r\n     * @param _amount: amount to withdraw (in rewardToken)\r\n     */\r\n    function withdraw(uint256 _amount) external nonReentrant {\r\n        require(isFrozen() == false, \"withdraw is frozen\");\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount >= _amount, \"Amount to withdraw too high\");\r\n\r\n        _updatePool();\r\n        payOrLockupPendingReward();\r\n\r\n        if (_amount > 0) {\r\n            if (canWithdraw(msg.sender)) {\r\n                uint256 currentAmount = (totalStakings.mul(_amount)).div(\r\n                    totalShares\r\n                );\r\n                user.amount = user.amount.sub(_amount);\r\n                totalShares = totalShares.sub(_amount);\r\n\r\n                require(\r\n                    totalStakings >= currentAmount,\r\n                    \"Exceed total staking amount\"\r\n                );\r\n\r\n                totalStakings = totalStakings.sub(currentAmount);\r\n\r\n                // Check withdraw fee period\r\n                if (\r\n                    autoCompoundOn &&\r\n                    block.timestamp <\r\n                    user.lastDepositedTime.add(compoundWithdrawFeePeriod)\r\n                ) {\r\n                    uint256 currentWithdrawFee = currentAmount\r\n                        .mul(compoundWithdrawFee)\r\n                        .div(10000);\r\n\r\n                    if (currentWithdrawFee > 0) {\r\n                        stakedToken.safeTransfer(\r\n                            marketingAddress,\r\n                            currentWithdrawFee\r\n                        );\r\n                        currentAmount = currentAmount.sub(currentWithdrawFee);\r\n                    }\r\n                }\r\n\r\n                uint256 feeAmount = 0;\r\n                // Withdraw locked, but should pay fee when withdraw before locked time\r\n                if (\r\n                    withdrawLockMethod == 2 &&\r\n                    withdrawFeeMethod != 0 &&\r\n                    withdrawFee > 0 &&\r\n                    block.timestamp < user.nextWithdrawUntil\r\n                ) {\r\n                    feeAmount = currentAmount.mul(withdrawFee).div(10000);\r\n                    if (feeAmount > 0) {\r\n                        if (withdrawFeeMethod == 1) {\r\n                            // 100% to marketing addresss\r\n                            stakedToken.safeTransfer(\r\n                                marketingAddress,\r\n                                feeAmount\r\n                            );\r\n                        } else if (withdrawFeeMethod == 2) {\r\n                            // 100% burn\r\n                            stakedToken.safeTransfer(BURN_ADDRESS, feeAmount);\r\n                        } else if (withdrawFeeMethod == 3) {\r\n                            // 50% marketing address 50% burn\r\n                            stakedToken.safeTransfer(\r\n                                BURN_ADDRESS,\r\n                                feeAmount.div(2)\r\n                            );\r\n                            stakedToken.safeTransfer(\r\n                                marketingAddress,\r\n                                feeAmount.sub(feeAmount.div(2))\r\n                            );\r\n                        } else if (withdrawFeeMethod == 4) {\r\n                            // add to liquidity\r\n                            require(\r\n                                address(saunaSwapRouter) != address(0),\r\n                                \"Invalid Sauna Swap Router\"\r\n                            );\r\n                            require(\r\n                                address(feeLiquidityPair) != address(0),\r\n                                \"Invalid fee liquidity Pair\"\r\n                            );\r\n\r\n                            uint256 half = feeAmount.div(2);\r\n                            uint256 otherHalf = feeAmount.sub(half);\r\n\r\n                            if (half > 0 && otherHalf > 0) {\r\n                                if (isBnbPairToken) {\r\n                                    uint256 initialETHBalance = address(this)\r\n                                        .balance;\r\n\r\n                                    // swap staked token to pair token\r\n                                    swapStakedTokenToETH(half);\r\n                                    uint256 newETHBalance = address(this)\r\n                                        .balance\r\n                                        .sub(initialETHBalance);\r\n\r\n                                    // add liquidity\r\n                                    addLiquidityETH(otherHalf, newETHBalance);\r\n                                } else {\r\n                                    uint256 initialPairBalance = pairToken\r\n                                        .balanceOf(address(this));\r\n\r\n                                    // swap staked token to pair token\r\n                                    swapStakedTokenToPairToken(half);\r\n                                    uint256 newPairBalance = pairToken\r\n                                        .balanceOf(address(this))\r\n                                        .sub(initialPairBalance);\r\n\r\n                                    // add liquidity\r\n                                    addLiquidity(otherHalf, newPairBalance);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                currentAmount = currentAmount.sub(feeAmount);\r\n\r\n                if (currentAmount > 0) {\r\n                    stakedToken.safeTransfer(\r\n                        address(msg.sender),\r\n                        currentAmount\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\r\n            PRECISION_FACTOR\r\n        );\r\n\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw staked tokens without caring about rewards rewards\r\n     * @dev Needs to be for emergency.\r\n     */\r\n    function emergencyWithdraw() external nonReentrant {\r\n        require(isFrozen() == false, \"emergency withdraw is frozen\");\r\n\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256 amountToTransfer = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n\r\n        if (amountToTransfer > 0) {\r\n            stakedToken.safeTransfer(address(msg.sender), amountToTransfer);\r\n            totalStakings = totalStakings.sub(amountToTransfer);\r\n        }\r\n\r\n        emit EmergencyWithdraw(msg.sender, user.amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Pay or lockup pending rewards.\r\n     */\r\n    function payOrLockupPendingReward() internal {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        if (user.nextHarvestUntil == 0) {\r\n            user.nextHarvestUntil = block.timestamp.add(harvestInterval);\r\n        }\r\n\r\n        uint256 pending = user\r\n            .amount\r\n            .mul(accTokenPerShare)\r\n            .div(PRECISION_FACTOR)\r\n            .sub(user.rewardDebt);\r\n\r\n        if (autoCompoundOn) {\r\n            return;\r\n        } else if (canHarvest(msg.sender)) {\r\n            if (pending > 0 || user.rewardLockedUp > 0) {\r\n                uint256 userTotalRewards = pending.add(user.rewardLockedUp);\r\n\r\n                // reset lockup\r\n                totalLockedUpRewards = totalLockedUpRewards.sub(\r\n                    user.rewardLockedUp\r\n                );\r\n                user.rewardLockedUp = 0;\r\n                user.nextHarvestUntil = block.timestamp.add(harvestInterval);\r\n\r\n                // send rewards\r\n                _safeRewardTransfer(address(msg.sender), userTotalRewards);\r\n            }\r\n        } else if (pending > 0) {\r\n            user.rewardLockedUp = user.rewardLockedUp.add(pending);\r\n            totalLockedUpRewards = totalLockedUpRewards.add(pending);\r\n            emit RewardLockedUp(msg.sender, pending);\r\n        }\r\n    }\r\n\r\n    /// @dev Swap staked token to pair token\r\n    function swapStakedTokenToPairToken(uint256 stakedTokenAmount) private {\r\n        // generate the saunaSwap pair path of staked token -> pair token\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(stakedToken);\r\n        path[1] = address(pairToken);\r\n\r\n        stakedToken.approve(address(saunaSwapRouter), stakedTokenAmount);\r\n\r\n        // make the swap\r\n        saunaSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            stakedTokenAmount,\r\n            0, // accept any amount of pair token\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev Add liquidity\r\n    function addLiquidity(uint256 stakedTokenAmount, uint256 pairTokenAmount)\r\n        private\r\n    {\r\n        // approve token transfer to cover all possible scenarios\r\n        stakedToken.approve(address(saunaSwapRouter), stakedTokenAmount);\r\n        pairToken.approve(address(saunaSwapRouter), pairTokenAmount);\r\n\r\n        // add the liquidity\r\n        saunaSwapRouter.addLiquidity(\r\n            address(stakedToken),\r\n            address(pairToken),\r\n            stakedTokenAmount,\r\n            pairTokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev Swap staked token to ETH\r\n    function swapStakedTokenToETH(uint256 stakedTokenAmount) private {\r\n        // generate the saunaSwap pair path of staked token -> ETH\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(stakedToken);\r\n        path[1] = saunaSwapRouter.WETH();\r\n\r\n        stakedToken.approve(address(saunaSwapRouter), stakedTokenAmount);\r\n\r\n        // make the swap\r\n        saunaSwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            stakedTokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev Add liquidity\r\n    function addLiquidityETH(uint256 stakedTokenAmount, uint256 ethAmount)\r\n        private\r\n    {\r\n        // approve token transfer to cover all possible scenarios\r\n        stakedToken.approve(address(saunaSwapRouter), stakedTokenAmount);\r\n\r\n        // add the liquidity\r\n        saunaSwapRouter.addLiquidityETH{value: ethAmount}(\r\n            address(stakedToken),\r\n            stakedTokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Update the pair token.\r\n     * Can only be called by the owner.\r\n     */\r\n    function updatePairToken(IBEP20 _pairToken) public onlyOwner {\r\n        require(\r\n            isBnbPairToken == false,\r\n            \"Unable to update pair token, set as bnb\"\r\n        );\r\n        pairToken = _pairToken;\r\n        if (address(saunaSwapRouter) != address(0)) {\r\n            feeLiquidityPair = IUniswapV2Factory(saunaSwapRouter.factory())\r\n                .getPair(address(stakedToken), address(pairToken));\r\n            require(\r\n                feeLiquidityPair != address(0),\r\n                \"stakedToken-pairToken:: invalid pair\"\r\n            );\r\n            emit PairTokenUpdated(\r\n                msg.sender,\r\n                address(saunaSwapRouter),\r\n                feeLiquidityPair\r\n            );\r\n        }\r\n    }\r\n\r\n    // To receive BNB from saunaSwapRouter when swapping\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Update the swap router.\r\n     * Can only be called by the owner.\r\n     */\r\n    function updateSaunaSwapRouter(address _router) public onlyOwner {\r\n        saunaSwapRouter = IUniswapV2Router02(_router);\r\n        if (isBnbPairToken) {\r\n            feeLiquidityPair = IUniswapV2Factory(saunaSwapRouter.factory())\r\n                .getPair(address(stakedToken), saunaSwapRouter.WETH());\r\n        } else {\r\n            feeLiquidityPair = IUniswapV2Factory(saunaSwapRouter.factory())\r\n                .getPair(address(stakedToken), address(pairToken));\r\n        }\r\n        require(\r\n            feeLiquidityPair != address(0),\r\n            \"stakedToken-pairToken:: invalid pair\"\r\n        );\r\n        emit SaunaSwapRouterUpdated(\r\n            msg.sender,\r\n            address(saunaSwapRouter),\r\n            feeLiquidityPair\r\n        );\r\n    }\r\n\r\n    /*\r\n     * @notice return length of user addresses\r\n     */\r\n    function getUserListLength() external view returns (uint256) {\r\n        return userList.length;\r\n    }\r\n\r\n    /*\r\n     * @notice View function to get users.\r\n     * @param _offset: offset for paging\r\n     * @param _limit: limit for paging\r\n     * @return get users, next offset and total users\r\n     */\r\n    function getUsersPaging(uint256 _offset, uint256 _limit)\r\n        public\r\n        view\r\n        returns (\r\n            UserInfo[] memory users,\r\n            uint256 nextOffset,\r\n            uint256 total\r\n        )\r\n    {\r\n        uint256 totalUsers = userList.length;\r\n        if (_limit == 0) {\r\n            _limit = 1;\r\n        }\r\n\r\n        if (_limit > totalUsers - _offset) {\r\n            _limit = totalUsers - _offset;\r\n        }\r\n\r\n        UserInfo[] memory values = new UserInfo[](_limit);\r\n        for (uint256 i = 0; i < _limit; i++) {\r\n            values[i] = userInfo[userList[_offset + i]];\r\n        }\r\n\r\n        return (values, _offset + _limit, totalUsers);\r\n    }\r\n\r\n    /*\r\n     * @notice isFrozed returns if contract is frozen, user cannot call deposit, withdraw, emergencyWithdraw function\r\n     */\r\n    function isFrozen() public view returns (bool) {\r\n        return\r\n            block.number >= freezeStartBlock && block.number <= freezeEndBlock;\r\n    }\r\n\r\n    /*\r\n     * @notice Stop rewards\r\n     * @dev Only callable by owner. Needs to be for emergency.\r\n     */\r\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\r\n        totalRewards = totalRewards.sub(_amount);\r\n        rewardToken.safeTransfer(address(msg.sender), _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to reward tokens\r\n     * @param _amount: amount of tokens\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function addRewardTokens(uint256 _amount) external onlyOwner {\r\n        totalRewards = totalRewards.add(_amount);\r\n        rewardToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        emit AddRewardTokens(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw\r\n     * @param _tokenAmount: the number of tokens to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _tokenAddress != address(stakedToken),\r\n            \"Cannot be staked token\"\r\n        );\r\n        require(\r\n            _tokenAddress != address(rewardToken),\r\n            \"Cannot be reward token\"\r\n        );\r\n\r\n        IBEP20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\r\n\r\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the expected claim reward from third party\r\n     * @return Expected reward to collect in staking token\r\n     */\r\n    function calculateClaimRewards() external view returns (uint256) {\r\n        uint256 multiplier = _getMultiplier(lastClaimedBlock, block.number);\r\n        uint256 claimedAmount = multiplier.mul(rewardPerBlock);\r\n        uint256 currentCallFee = claimedAmount.mul(compoundCallFee).div(10000);\r\n\r\n        return currentCallFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the total pending rewards that can be restaked\r\n     * @return Returns total pending cake rewards\r\n     */\r\n    function calculateTotalPendingCakeRewards()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 multiplier = _getMultiplier(lastClaimedBlock, block.number);\r\n        uint256 claimedAmount = multiplier.mul(rewardPerBlock);\r\n\r\n        return claimedAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the price per share\r\n     */\r\n    function getPricePerFullShare() external view returns (uint256) {\r\n        return\r\n            totalShares == 0 ? 1e18 : totalStakings.mul(1e18).div(totalShares);\r\n    }\r\n\r\n    /*\r\n     * @notice Stop rewards\r\n     * @dev Only callable by owner\r\n     */\r\n    function stopReward() external onlyOwner {\r\n        bonusEndBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Stop Freeze\r\n     * @dev Only callable by owner\r\n     */\r\n    function stopFreeze() external onlyOwner {\r\n        freezeStartBlock = 0;\r\n        freezeEndBlock = 0;\r\n    }\r\n\r\n    /*\r\n     * @notice Enable/disable deposit whitelist\r\n     * @dev Only callable by owner\r\n     */\r\n    function enableDepositWhitelist(bool _on) external onlyOwner {\r\n        depositWhitelistOn = _on;\r\n    }\r\n\r\n    /*\r\n     * @notice Add/remove address from whitelist\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateDepositWhitelist(address _address, bool _on)\r\n        external\r\n        onlyOwner\r\n    {\r\n        depositWhitelist[_address] = _on;\r\n    }\r\n\r\n    /*\r\n     * @notice Enable/disable harvest timelock\r\n     * @dev Only callable by owner\r\n     */\r\n    function enableHarvestLock(bool _on) external onlyOwner {\r\n        require(harvestLockOn != _on, \"Already set\");\r\n        require(\r\n            autoCompoundOn == false || _on == false,\r\n            \"Harvest lock must be disabled when auto-compounding feature is on\"\r\n        );\r\n        harvestLockOn = _on;\r\n    }\r\n\r\n    /*\r\n     * @notice Update harvest interval\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateHarvestInterval(uint256 _harvestInterval)\r\n        external\r\n        onlyOwner\r\n    {\r\n        harvestInterval = _harvestInterval;\r\n    }\r\n\r\n    /*\r\n     * @notice Update withdraw timelock method\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateWithdrawLockMethod(uint8 _method) external onlyOwner {\r\n        require(\r\n            _method == 0 || _method == 1 || _method == 2,\r\n            \"Invalid withdraw lock method set\"\r\n        );\r\n        require(_method != withdrawLockMethod, \"Already set\");\r\n        withdrawLockMethod = _method;\r\n    }\r\n\r\n    /*\r\n     * @notice Update withdraw interval\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateWithdrawInterval(uint256 _withdrawInterval)\r\n        external\r\n        onlyOwner\r\n    {\r\n        withdrawInterval = _withdrawInterval;\r\n    }\r\n\r\n    /*\r\n     * @notice Update withdraw fee method\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateWithdrawFeeMethod(uint8 _method) external onlyOwner {\r\n        require(\r\n            _method == 0 ||\r\n                _method == 1 ||\r\n                _method == 2 ||\r\n                _method == 3 ||\r\n                _method == 4,\r\n            \"Invalid withdraw fee method set\"\r\n        );\r\n        require(_method != withdrawFeeMethod, \"Already set\");\r\n        withdrawFeeMethod = _method;\r\n    }\r\n\r\n    /**\r\n     * @notice Update withdraw fee method\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateWithdrawFee(uint16 _withdrawFee) external onlyOwner {\r\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, \"Out of withdraw fee range\");\r\n        withdrawFee = _withdrawFee;\r\n    }\r\n\r\n    /*\r\n     * @notice Update marketing address\r\n     * @dev Only callable by owner\r\n     */\r\n    function updateMarketingAddress(address _marketingAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        marketingAddress = _marketingAddress;\r\n    }\r\n\r\n    /*\r\n     * @notice Update pool limit per user\r\n     * @dev Only callable by owner.\r\n     * @param _hasUserLimit: whether the limit remains forced\r\n     * @param _poolLimitPerUser: new pool limit per user\r\n     */\r\n    function updatePoolLimitPerUser(\r\n        bool _hasUserLimit,\r\n        uint256 _poolLimitPerUser\r\n    ) external onlyOwner {\r\n        require(hasUserLimit, \"Must be set\");\r\n        if (_hasUserLimit) {\r\n            require(\r\n                _poolLimitPerUser > poolLimitPerUser,\r\n                \"New limit must be higher\"\r\n            );\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        } else {\r\n            hasUserLimit = _hasUserLimit;\r\n            poolLimitPerUser = 0;\r\n        }\r\n        emit NewPoolLimit(poolLimitPerUser);\r\n    }\r\n\r\n    /*\r\n     * @notice Update reward per block\r\n     * @dev Only callable by owner.\r\n     * @param _rewardPerBlock: the reward per block\r\n     */\r\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\r\n        require(\r\n            block.number < startBlock || block.number > bonusEndBlock,\r\n            \"Pool has started\"\r\n        );\r\n        rewardPerBlock = _rewardPerBlock;\r\n        emit NewRewardPerBlock(_rewardPerBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to update start and end blocks\r\n     * @dev This function is only callable by owner.\r\n     * @param _startBlock: the new start block\r\n     * @param _bonusEndBlock: the new end block\r\n     */\r\n    function updateStartAndEndBlocks(\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock\r\n    ) external onlyOwner {\r\n        require(\r\n            block.number < startBlock || block.number > bonusEndBlock,\r\n            \"Pool has started\"\r\n        );\r\n        require(\r\n            _startBlock < _bonusEndBlock,\r\n            \"New startBlock must be lower than new end block\"\r\n        );\r\n        require(\r\n            block.number < _startBlock,\r\n            \"New startBlock must be higher than current block\"\r\n        );\r\n\r\n        startBlock = _startBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = startBlock;\r\n\r\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to update freeze start and end blocks\r\n     * @dev This function is only callable by owner.\r\n     * @param _freezeStartBlock: the new freeze start block\r\n     * @param _freezeEndBlock: the new freeze end block\r\n     */\r\n    function updateFreezaBlocks(\r\n        uint256 _freezeStartBlock,\r\n        uint256 _freezeEndBlock\r\n    ) external onlyOwner {\r\n        require(\r\n            _freezeStartBlock < _freezeEndBlock,\r\n            \"New freeze startBlock must be lower than new endBlock\"\r\n        );\r\n        require(\r\n            block.number < _freezeStartBlock,\r\n            \"freeze start block must be higher than current block\"\r\n        );\r\n\r\n        freezeStartBlock = _freezeStartBlock;\r\n        freezeEndBlock = _freezeEndBlock;\r\n        emit NewFreezeBlocks(freezeStartBlock, freezeEndBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice Update minimum deposit amount\r\n     * @dev This function is only callable by owner.\r\n     * @param _minDepositAmount: the new minimum deposit amount\r\n     */\r\n    function updateMinDepositAmount(uint256 _minDepositAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        minDepositAmount = _minDepositAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Update compound performance fee\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function updateCompoundPerformanceFee(uint256 _compoundPerformanceFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _compoundPerformanceFee <= MAX_COMPOUND_PERFORMANCE_FEE,\r\n            \"compoundPerformanceFee cannot be more than MAX_COMPOUND_PERFORMANCE_FEE\"\r\n        );\r\n        uint256 oldFee = compoundPerformanceFee;\r\n        compoundPerformanceFee = _compoundPerformanceFee;\r\n\r\n        emit UpdateCompoundPerformancefee(\r\n            msg.sender,\r\n            oldFee,\r\n            _compoundPerformanceFee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Update compound call fee\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function updateCompoundCallFee(uint256 _compoundCallFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _compoundCallFee <= MAX_COMPOUND_CALL_FEE,\r\n            \"compoundCallFee cannot be more than MAX_COMPOUND_CALL_FEE\"\r\n        );\r\n        uint256 oldFee = compoundCallFee;\r\n        compoundCallFee = _compoundCallFee;\r\n\r\n        emit UpdateCompoundCallfee(msg.sender, oldFee, _compoundCallFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update compound withdraw fee\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function updateCompoundWithdrawFee(uint256 _compoundWithdrawFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _compoundWithdrawFee <= MAX_COMPOUND_WITHDRAW_FEE,\r\n            \"compoundWithdrawFee cannot be more than MAX_COMPOUND_WITHDRAW_FEE\"\r\n        );\r\n        uint256 oldFee = compoundWithdrawFee;\r\n        compoundWithdrawFee = _compoundWithdrawFee;\r\n\r\n        emit UpdateCompoundWithdrawfee(\r\n            msg.sender,\r\n            oldFee,\r\n            _compoundWithdrawFee\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Update withdraw fee period\r\n     * @dev Only callable by the owner.\r\n     */\r\n    function updateCompoundWithdrawFeePeriod(uint256 _compoundWithdrawFeePeriod)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _compoundWithdrawFeePeriod <= MAX_COMPOUND_WITHDRAW_FEE_PERIOD,\r\n            \"compoundWithdrawFeePeriod cannot be more than MAX_COMPOUND_WITHDRAW_FEE_PERIOD\"\r\n        );\r\n        uint256 oldPeriod = compoundWithdrawFeePeriod;\r\n        compoundWithdrawFeePeriod = _compoundWithdrawFeePeriod;\r\n\r\n        UpdateCompoundWithdrawFeePeriod(\r\n            msg.sender,\r\n            oldPeriod,\r\n            _compoundWithdrawFeePeriod\r\n        );\r\n    }\r\n\r\n    /*\r\n     * @notice View function to see pending reward on frontend.\r\n     * @param _user: user address\r\n     * @return Pending reward for a given user\r\n     */\r\n    function pendingReward(address _user) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 stakedTokenSupply = totalStakings;\r\n        if (block.number > lastRewardBlock && stakedTokenSupply != 0) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n            uint256 cakeReward = multiplier.mul(rewardPerBlock);\r\n            uint256 adjustedTokenPerShare = accTokenPerShare.add(\r\n                cakeReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\r\n            );\r\n            return\r\n                user\r\n                    .amount\r\n                    .mul(adjustedTokenPerShare)\r\n                    .div(PRECISION_FACTOR)\r\n                    .sub(user.rewardDebt);\r\n        } else {\r\n            return\r\n                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(\r\n                    user.rewardDebt\r\n                );\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice transfer reward tokens.\r\n     * @param _to: address where tokens will transfer\r\n     * @param _amount: amount of tokens\r\n     */\r\n    function _safeRewardTransfer(address _to, uint256 _amount) internal {\r\n        uint256 rewardTokenBal = totalRewards;\r\n        if (_amount > rewardTokenBal) {\r\n            totalRewards = totalRewards.sub(rewardTokenBal);\r\n            rewardToken.safeTransfer(_to, rewardTokenBal);\r\n        } else {\r\n            totalRewards = totalRewards.sub(_amount);\r\n            rewardToken.safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddRewardTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeStartBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeEndBlock\",\"type\":\"uint256\"}],\"name\":\"NewFreezeBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"NewPoolLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PairTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"SaunaSwapRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateCompoundCallfee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateCompoundPerformancefee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"UpdateCompoundWithdrawFeePeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateCompoundWithdrawfee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMPOUND_CALL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMPOUND_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMPOUND_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COMPOUND_WITHDRAW_FEE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMART_CHEF_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoCompoundOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateClaimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalPendingCakeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundCallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundWithdrawFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositWhitelistOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"enableDepositWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"enableHarvestLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquidityPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getUsersPaging\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextWithdrawUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"internalType\":\"struct SAUNAStaking.UserInfo[]\",\"name\":\"users\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nextOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestLockOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBnbPairToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_autoCompoundOn\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBnbPairToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saunaSwapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundCallFee\",\"type\":\"uint256\"}],\"name\":\"updateCompoundCallFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"updateCompoundPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"updateCompoundWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundWithdrawFeePeriod\",\"type\":\"uint256\"}],\"name\":\"updateCompoundWithdrawFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"updateDepositWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freezeStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freezeEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateFreezaBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"}],\"name\":\"updateHarvestInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_pairToken\",\"type\":\"address\"}],\"name\":\"updatePairToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasUserLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"updatePoolLimitPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateSaunaSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_withdrawFee\",\"type\":\"uint16\"}],\"name\":\"updateWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_method\",\"type\":\"uint8\"}],\"name\":\"updateWithdrawFeeMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawInterval\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_method\",\"type\":\"uint8\"}],\"name\":\"updateWithdrawLockMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextWithdrawUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeMethod\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLockMethod\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SAUNAStaking", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e8ee0ce63aaae92b324c9a49b54ad7c82030310782cebfaadc91fa7682393200"}