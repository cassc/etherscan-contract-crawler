{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GuilderFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IDexPair.sol\\\";\\nimport \\\"./interfaces/IDexRouter.sol\\\";\\nimport \\\"./interfaces/IDexFactory.sol\\\";\\nimport \\\"./interfaces/IGuilderFi.sol\\\";\\nimport \\\"./interfaces/ISwapEngine.sol\\\";\\nimport \\\"./interfaces/ILiquidityReliefFund.sol\\\";\\nimport \\\"./interfaces/IAutoLiquidityEngine.sol\\\";\\nimport \\\"./interfaces/ISafeExitFund.sol\\\";\\nimport \\\"./interfaces/IPreSale.sol\\\";\\n\\ncontract GuilderFi is IGuilderFi, IERC20, Ownable {\\n  using SafeMath for uint256;\\n  bool internal blocked = false;\\n\\n  // TOKEN SETTINGS\\n  string private _name = \\\"GuilderFi\\\";\\n  string private _symbol = \\\"N1\\\";\\n  uint8 private constant DECIMALS = 18;\\n\\n  // CONSTANTS\\n  uint256 private constant MAX_UINT256 = ~uint256(0);\\n  address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n  address private constant ZERO = 0x0000000000000000000000000000000000000000;\\n\\n  // SUPPLY CONSTANTS\\n  uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 1 * 10**6 * 10**DECIMALS; // 1 million\\n  uint256 private constant MAX_SUPPLY = 82 * 10**21 * 10**DECIMALS;\\n  uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n  // REBASE CONSTANTS\\n  uint256 private constant YEAR1_REBASE_RATE = 160309122470000; // 0.0160309122470000 %\\n  uint256 private constant YEAR2_REBASE_RATE = 144501813571063; // 0.0144501813571063 %\\n  uint256 private constant YEAR3_REBASE_RATE = 128715080592867; // 0.0128715080592867 %\\n  uint256 private constant YEAR4_REBASE_RATE = 112969085762193; // 0.0112969085762193 %\\n  uint256 private constant YEAR5_REBASE_RATE = 97303671485527; // 0.0097303671485527 %\\n  uint256 private constant YEAR6_REBASE_RATE = 34322491203609; // 0.0034322491203609 %\\n  uint8 private constant REBASE_RATE_DECIMALS = 18;\\n  uint256 private constant REBASE_FREQUENCY = 12 minutes;\\n\\n  // REBASE VARIABLES\\n  uint256 public override maxRebaseBatchSize = 40; // 8 hours\\n\\n  // ADDRESSES\\n  address internal _treasuryAddress;\\n  address internal _burnAddress = DEAD;\\n\\n  // OTHER CONTRACTS\\n  ISwapEngine private swapEngine;\\n  ILiquidityReliefFund private lrf;\\n  IAutoLiquidityEngine private autoLiquidityEngine;\\n  ISafeExitFund private safeExitFund;\\n  IPreSale private preSale;\\n\\n  address private _swapEngineAddress;\\n  address private _lrfAddress;\\n  address private _autoLiquidityEngineAddress;\\n  address private _safeExitFundAddress;\\n  address private _preSaleAddress;\\n\\n  // FEES\\n  uint256 private constant MAX_BUY_FEES = 200; // 20%\\n  uint256 private constant MAX_SELL_FEES = 250; // 25%\\n  uint256 private constant FEE_DENOMINATOR = 1000;\\n\\n  // BUY FEES | Treasury = 3% | LRF = 5% | Auto-Liquidity = 5% | SafeExit = 0 | Burn = 0\\n  Fee private _buyFees = Fee(30, 50, 50, 0, 0, 130);\\n\\n  // SELL FEES | Treasury = 4% | LRF = 7% | Auto-Liquidity = 6% | SafeExit = 1% | Burn = 0\\n  Fee private _sellFees = Fee(40, 70, 60, 10, 0, 180);\\n\\n  // SETTING FLAGS\\n  bool public override isAutoRebaseEnabled = true;\\n  bool public override isAutoSafeExitEnabled = true;\\n  bool public override isAutoSwapEnabled = false;\\n  bool public override isAutoLiquidityEnabled = false;\\n  bool public override isAutoLrfEnabled = false;\\n\\n  // FREQUENCIES\\n  uint256 public override autoSwapFrequency = 0;\\n  uint256 public override autoLiquidityFrequency = 0;\\n  uint256 public override autoLrfFrequency = 0;\\n\\n  // PRIVATE FLAGS\\n  bool private _inSwap = false;\\n\\n  // EXCHANGE VARIABLES\\n  IDexRouter private _router;\\n  IDexPair private _pair;\\n\\n  // DATE/TIME STAMPS\\n  uint256 public override initRebaseStartTime;\\n  uint256 public override lastRebaseTime;\\n  uint256 public override lastAddLiquidityTime;\\n  uint256 public override lastLrfExecutionTime;\\n  uint256 public override lastSwapTime;\\n  uint256 public override lastEpoch;\\n\\n  // TOKEN SUPPLY VARIABLES\\n  uint256 private _totalSupply;\\n  uint256 private _gonsPerFragment;\\n\\n  // DATA\\n  mapping(address => bool) private _isFeeExempt;\\n  mapping(address => bool) private _isContract;\\n  mapping(address => uint256) private _gonBalances;\\n  mapping(address => mapping(address => uint256)) private _allowedFragments;\\n  mapping(address => bool) public blacklist;\\n\\n  // TOKEN LAUNCHED FLAG\\n  bool public override hasLaunched = false;\\n\\n  modifier swapping() {\\n    _inSwap = true;\\n    _;\\n    _inSwap = false;\\n  }\\n\\n  modifier validRecipient(address to) {\\n    require(to != address(0x0), \\\"Cannot send to zero address\\\");\\n    _;\\n  }\\n\\n  modifier canTrade(address from) {\\n    require(hasLaunched || from == address(_treasuryAddress) || _isContract[from], \\\"Token has not launched yet\\\");\\n    _;\\n  }\\n\\n  constructor() Ownable() {\\n    // init treasury address\\n    _treasuryAddress = msg.sender;\\n\\n    // initialise total supply\\n    _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n    _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\n    // exempt fees from contract + treasury\\n    _isFeeExempt[address(this)] = true;\\n    _isFeeExempt[_treasuryAddress] = true;\\n\\n    // assign total supply to treasury\\n    _gonBalances[_treasuryAddress] = TOTAL_GONS;\\n    emit Transfer(address(0x0), _treasuryAddress, _totalSupply);\\n  }\\n\\n  function setSwapEngine(address _address) external override onlyOwner {\\n    _swapEngineAddress = _address;\\n    swapEngine = ISwapEngine(_address);\\n    initSubContract(_address);\\n  }\\n\\n  function setLrf(address _address) external override onlyOwner {\\n    _lrfAddress = _address;\\n    lrf = ILiquidityReliefFund(_address);\\n    initSubContract(_address);\\n  }\\n\\n  function setLiquidityEngine(address _address) external override onlyOwner {\\n    _autoLiquidityEngineAddress = _address;\\n    autoLiquidityEngine = IAutoLiquidityEngine(_address);\\n    initSubContract(_address);\\n  }\\n\\n  function setSafeExitFund(address _address) external override onlyOwner {\\n    _safeExitFundAddress = _address;\\n    safeExitFund = ISafeExitFund(_address);\\n    initSubContract(_address);\\n  }\\n\\n  function setPreSaleEngine(address _address) external override onlyOwner {\\n    _preSaleAddress = _address;\\n    preSale = IPreSale(_address);\\n    initSubContract(_address);\\n  }\\n\\n  function initSubContract(address _address) internal {\\n    if (address(_router) != address(0)) {\\n      _allowedFragments[_address][address(_router)] = type(uint256).max;\\n    }\\n\\n    _isContract[_address] = true;\\n    _isFeeExempt[_address] = true;\\n  }\\n\\n  function setTreasury(address _address) external override onlyOwner {\\n    require(_treasuryAddress != _address, \\\"Address already in use\\\");\\n\\n    _gonBalances[_address] = _gonBalances[_treasuryAddress];\\n    _gonBalances[_treasuryAddress] = 0;\\n    emit Transfer(_treasuryAddress, _address, _gonBalances[_address].div(_gonsPerFragment));\\n\\n    _treasuryAddress = _address;\\n\\n    // exempt fees\\n    _isFeeExempt[_treasuryAddress] = true;\\n\\n    // transfer ownership\\n    _transferOwnership(_treasuryAddress);\\n  }\\n\\n  /*\\n   * REBASE FUNCTIONS\\n   */\\n  function rebase() public override {\\n    require(hasLaunched, \\\"Token has not launched yet\\\");\\n    _rebase();\\n  }\\n\\n  function _rebase() internal {\\n    // work out how many rebases to perform\\n    uint256 times = pendingRebases();\\n\\n    if (times == 0) {\\n      return;\\n    }\\n\\n    uint256 rebaseRate = getRebaseRate();\\n\\n    // if there are too many pending rebases, execute a maximum batch size\\n    if (times > maxRebaseBatchSize) {\\n      times = maxRebaseBatchSize;\\n    }\\n\\n    lastEpoch = lastEpoch.add(times);\\n\\n    // increase total supply by rebase rate\\n    for (uint256 i = 0; i < times; i++) {\\n      _totalSupply = _totalSupply.mul((10**REBASE_RATE_DECIMALS).add(rebaseRate)).div(10**REBASE_RATE_DECIMALS);\\n    }\\n\\n    _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n    lastRebaseTime = lastRebaseTime.add(times.mul(REBASE_FREQUENCY));\\n\\n    if (!_inSwap) {\\n      _pair.sync();\\n    }\\n\\n    emit LogRebase(lastEpoch, _totalSupply, pendingRebases());\\n  }\\n\\n  function getRebaseRate() public view override returns (uint256) {\\n    // calculate rebase rate depending on time passed since token launch\\n    uint256 deltaTimeFromInit = block.timestamp - initRebaseStartTime;\\n\\n    if (deltaTimeFromInit < (365 days)) {\\n      return YEAR1_REBASE_RATE;\\n    } else if (deltaTimeFromInit >= (365 days) && deltaTimeFromInit < (2 * 365 days)) {\\n      return YEAR2_REBASE_RATE;\\n    } else if (deltaTimeFromInit >= (2 * 365 days) && deltaTimeFromInit < (3 * 365 days)) {\\n      return YEAR3_REBASE_RATE;\\n    } else if (deltaTimeFromInit >= (3 * 365 days) && deltaTimeFromInit < (4 * 365 days)) {\\n      return YEAR4_REBASE_RATE;\\n    } else if (deltaTimeFromInit >= (4 * 365 days) && deltaTimeFromInit < (5 * 365 days)) {\\n      return YEAR5_REBASE_RATE;\\n    } else {\\n      return YEAR6_REBASE_RATE;\\n    }\\n  }\\n\\n  function pendingRebases() internal view returns (uint256) {\\n    uint256 timeSinceLastRebase = block.timestamp - lastRebaseTime;\\n    return timeSinceLastRebase.div(REBASE_FREQUENCY);\\n  }\\n\\n  function transfer(address to, uint256 value) external override(IGuilderFi, IERC20) validRecipient(to) returns (bool) {\\n    _transferFrom(msg.sender, to, value);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external override(IGuilderFi, IERC20) validRecipient(to) returns (bool) {\\n    if (_allowedFragments[from][msg.sender] != type(uint256).max) {\\n      _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value, \\\"Insufficient allowance\\\");\\n    }\\n\\n    _transferFrom(from, to, value);\\n    return true;\\n  }\\n\\n  function _basicTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal returns (bool) {\\n    uint256 gonAmount = amount.mul(_gonsPerFragment);\\n    _gonBalances[from] = _gonBalances[from].sub(gonAmount);\\n    _gonBalances[to] = _gonBalances[to].add(gonAmount);\\n    return true;\\n  }\\n\\n  function shouldDoBasicTransfer(address sender, address recipient) internal view returns (bool) {\\n    if (_inSwap) return true;\\n    if (_isContract[sender]) return true;\\n    if (_isContract[recipient]) return true;\\n    if (sender == address(_router) || recipient == address(_router)) return true;\\n    if (swapEngine.inSwap() || lrf.inSwap() || autoLiquidityEngine.inSwap()) return true;\\n    return false;\\n  }\\n\\n  function _transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal canTrade(sender) returns (bool) {\\n    require(!blacklist[sender] && !blacklist[recipient], \\\"Address blacklisted\\\");\\n\\n    if (shouldDoBasicTransfer(sender, recipient)) {\\n      return _basicTransfer(sender, recipient, amount);\\n    }\\n\\n    preTransactionActions(sender, recipient, amount);\\n\\n    uint256 gonAmount = amount.mul(_gonsPerFragment);\\n    uint256 gonAmountReceived = gonAmount;\\n\\n    if (shouldTakeFee(sender, recipient)) {\\n      gonAmountReceived = takeFee(sender, recipient, gonAmount);\\n    }\\n\\n    _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\\n    _gonBalances[recipient] = _gonBalances[recipient].add(gonAmountReceived);\\n\\n    emit Transfer(sender, recipient, gonAmountReceived.div(_gonsPerFragment));\\n\\n    return true;\\n  }\\n\\n  function preTransactionActions(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal swapping {\\n    if (shouldExecuteSafeExit()) {\\n      safeExitFund.captureTransaction(sender, recipient, amount);\\n    }\\n\\n    if (shouldSwap()) {\\n      swapEngine.executeSwapEngine();\\n      lastSwapTime = block.timestamp;\\n    }\\n\\n    if (shouldAddLiquidity()) {\\n      autoLiquidityEngine.executeLiquidityEngine();\\n      lastAddLiquidityTime = block.timestamp;\\n    }\\n\\n    if (shouldExecuteLrf()) {\\n      lrf.executeLiquidityReliefFund();\\n      lastLrfExecutionTime = block.timestamp;\\n    }\\n\\n    if (shouldRebase()) {\\n      _rebase();\\n    }\\n  }\\n\\n  function takeFee(\\n    address sender,\\n    address recipient,\\n    uint256 gonAmount\\n  ) internal returns (uint256) {\\n    Fee storage fees = (recipient == address(_pair)) ? _sellFees : _buyFees;\\n\\n    uint256 burnAmount = fees.burnFee.mul(gonAmount).div(FEE_DENOMINATOR);\\n    uint256 lrfAmount = fees.lrfFee.mul(gonAmount).div(FEE_DENOMINATOR);\\n    uint256 safeExitAmount = fees.safeExitFee.mul(gonAmount).div(FEE_DENOMINATOR);\\n    uint256 liquidityAmount = fees.liquidityFee.mul(gonAmount).div(FEE_DENOMINATOR);\\n    uint256 treasuryAmount = fees.treasuryFee.mul(gonAmount).div(FEE_DENOMINATOR);\\n\\n    uint256 totalToSwap = lrfAmount.add(safeExitAmount).add(treasuryAmount);\\n\\n    uint256 total = totalToSwap.add(burnAmount).add(liquidityAmount);\\n\\n    // burn\\n    if (burnAmount > 0) {\\n      _gonBalances[_burnAddress] = _gonBalances[_burnAddress].add(burnAmount);\\n      emit Transfer(sender, _burnAddress, burnAmount.div(_gonsPerFragment));\\n    }\\n\\n    // add liquidity fees to auto liquidity engine\\n    _gonBalances[_autoLiquidityEngineAddress] = _gonBalances[_autoLiquidityEngineAddress].add(liquidityAmount);\\n    emit Transfer(sender, _autoLiquidityEngineAddress, liquidityAmount.div(_gonsPerFragment));\\n\\n    // move the rest to swap engine\\n    _gonBalances[_swapEngineAddress] = _gonBalances[_swapEngineAddress].add(totalToSwap);\\n    emit Transfer(sender, _swapEngineAddress, totalToSwap.div(_gonsPerFragment));\\n\\n    // record fees in swap engine\\n    if (address(swapEngine) != address(0)) {\\n      swapEngine.recordFees(lrfAmount.div(_gonsPerFragment), safeExitAmount.div(_gonsPerFragment), treasuryAmount.div(_gonsPerFragment));\\n    }\\n\\n    return gonAmount.sub(total);\\n  }\\n\\n  /*\\n   * INTERNAL CHECKER FUNCTIONS\\n   */\\n  function shouldTakeFee(address from, address to) internal view returns (bool) {\\n    if (_isFeeExempt[from]) return false;\\n    if (address(_pair) == from || address(_pair) == to) return true;\\n\\n    return false;\\n  }\\n\\n  function shouldRebase() internal view returns (bool) {\\n    return isAutoRebaseEnabled && hasLaunched && (_totalSupply < MAX_SUPPLY) && block.timestamp >= (lastRebaseTime + REBASE_FREQUENCY);\\n  }\\n\\n  function shouldAddLiquidity() internal view returns (bool) {\\n    return\\n      isAutoLiquidityEnabled &&\\n      _autoLiquidityEngineAddress != address(0) &&\\n      (autoLiquidityFrequency == 0 || (block.timestamp >= (lastAddLiquidityTime + autoLiquidityFrequency)));\\n  }\\n\\n  function shouldSwap() internal view returns (bool) {\\n    return\\n      isAutoSwapEnabled &&\\n      _swapEngineAddress != address(0) &&\\n      (autoSwapFrequency == 0 || (block.timestamp >= (lastSwapTime + autoSwapFrequency)));\\n  }\\n\\n  function shouldExecuteLrf() internal view returns (bool) {\\n    return\\n      isAutoLrfEnabled &&\\n      _lrfAddress != address(0) &&\\n      (autoLrfFrequency == 0 || (block.timestamp >= (lastLrfExecutionTime + autoLrfFrequency)));\\n  }\\n\\n  function shouldExecuteSafeExit() internal view returns (bool) {\\n    return isAutoSafeExitEnabled && _safeExitFundAddress != address(0);\\n  }\\n\\n  /*\\n   * TOKEN ALLOWANCE/APPROVALS\\n   */\\n  function allowance(address owner_, address spender) public view override(IGuilderFi, IERC20) returns (uint256) {\\n    return _allowedFragments[owner_][spender];\\n  }\\n\\n  function approve(address spender, uint256 value) external override(IGuilderFi, IERC20) returns (bool) {\\n    _allowedFragments[msg.sender][spender] = value;\\n    emit Approval(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  function manualSync() external override {\\n    IDexPair(address(_pair)).sync();\\n  }\\n\\n  /*\\n   * PUBLIC SETTER FUNCTIONS\\n   */\\n  function setAutoSwap(bool _flag) external override onlyOwner {\\n    isAutoSwapEnabled = _flag;\\n  }\\n\\n  function setAutoLrf(bool _flag) external override onlyOwner {\\n    isAutoLrfEnabled = _flag;\\n  }\\n\\n  function setAutoLiquidity(bool _flag) external override onlyOwner {\\n    isAutoLiquidityEnabled = _flag;\\n  }\\n\\n  function setAutoRebase(bool _flag) external override onlyOwner {\\n    isAutoRebaseEnabled = _flag;\\n  }\\n\\n  function setAutoSafeExit(bool _flag) external override onlyOwner {\\n    isAutoSafeExitEnabled = _flag;\\n  }\\n\\n  function setFeeExempt(address _address, bool _flag) external override onlyOwner {\\n    _isFeeExempt[_address] = _flag;\\n  }\\n\\n  function setBlacklist(address _address, bool _flag) external override onlyOwner {\\n    blacklist[_address] = _flag;\\n  }\\n\\n  function setDex(address _routerAddress) external override onlyOwner {\\n    _router = IDexRouter(_routerAddress);\\n\\n    IDexFactory factory = IDexFactory(_router.factory());\\n    address pairAddress = factory.getPair(_router.WETH(), address(this));\\n\\n    if (pairAddress == address(0)) {\\n      pairAddress = IDexFactory(_router.factory()).createPair(_router.WETH(), address(this));\\n    }\\n    _pair = IDexPair(address(pairAddress));\\n\\n    // exempt fees\\n    _isFeeExempt[_routerAddress] = true;\\n\\n    // update allowances\\n    _allowedFragments[address(this)][_routerAddress] = type(uint256).max;\\n    _allowedFragments[address(swapEngine)][_routerAddress] = type(uint256).max;\\n    _allowedFragments[address(lrf)][_routerAddress] = type(uint256).max;\\n    _allowedFragments[address(autoLiquidityEngine)][_routerAddress] = type(uint256).max;\\n    _allowedFragments[address(safeExitFund)][_routerAddress] = type(uint256).max;\\n    _allowedFragments[address(preSale)][_routerAddress] = type(uint256).max;\\n  }\\n\\n  function setAutoLiquidityFrequency(uint256 _frequency) external override onlyOwner {\\n    autoLiquidityFrequency = _frequency;\\n  }\\n\\n  function setLrfFrequency(uint256 _frequency) external override onlyOwner {\\n    autoLrfFrequency = _frequency;\\n  }\\n\\n  function setSwapFrequency(uint256 _frequency) external override onlyOwner {\\n    autoSwapFrequency = _frequency;\\n  }\\n\\n  function setFees(\\n    bool _isSellFee,\\n    uint256 _treasuryFee,\\n    uint256 _lrfFee,\\n    uint256 _liquidityFee,\\n    uint256 _safeExitFee,\\n    uint256 _burnFee\\n  ) external override onlyOwner {\\n    uint256 feeTotal = _treasuryFee.add(_lrfFee).add(_liquidityFee).add(_safeExitFee).add(_burnFee);\\n\\n    Fee memory fee = Fee(_treasuryFee, _lrfFee, _liquidityFee, _safeExitFee, _burnFee, feeTotal);\\n\\n    if (_isSellFee) {\\n      require(feeTotal <= MAX_SELL_FEES, \\\"Sell fees are too high\\\");\\n      _sellFees = fee;\\n    }\\n\\n    if (!_isSellFee) {\\n      require(feeTotal <= MAX_BUY_FEES, \\\"Buy fees are too high\\\");\\n      _buyFees = fee;\\n    }\\n  }\\n\\n  function launchToken() external override onlyOwner {\\n    require(!hasLaunched, \\\"Token has already launched\\\");\\n\\n    hasLaunched = true;\\n\\n    // record rebase timestamps\\n    lastSwapTime = block.timestamp;\\n    lastLrfExecutionTime = block.timestamp;\\n    lastAddLiquidityTime = block.timestamp;\\n    initRebaseStartTime = block.timestamp;\\n    lastRebaseTime = block.timestamp;\\n    lastEpoch = 0;\\n  }\\n\\n  /*\\n   * EXTERNAL GETTER FUNCTIONS\\n   */\\n  function getOwner() public view override returns (address) {\\n    return owner();\\n  }\\n\\n  function getTreasuryAddress() public view override returns (address) {\\n    return _treasuryAddress;\\n  }\\n\\n  function getSwapEngineAddress() public view override returns (address) {\\n    return address(swapEngine);\\n  }\\n\\n  function getLrfAddress() public view override returns (address) {\\n    return address(lrf);\\n  }\\n\\n  function getAutoLiquidityAddress() public view override returns (address) {\\n    return address(autoLiquidityEngine);\\n  }\\n\\n  function getSafeExitFundAddress() public view override returns (address) {\\n    return address(safeExitFund);\\n  }\\n\\n  function getPreSaleAddress() public view override returns (address) {\\n    return address(preSale);\\n  }\\n\\n  function getRouter() public view override returns (address) {\\n    return address(_router);\\n  }\\n\\n  function getPair() public view override returns (address) {\\n    return address(_pair);\\n  }\\n\\n  /*\\n   * STANDARD ERC20 FUNCTIONS\\n   */\\n  function totalSupply() external view override(IGuilderFi, IERC20) returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address who) public view override(IGuilderFi, IERC20) returns (uint256) {\\n    return _gonBalances[who].div(_gonsPerFragment);\\n  }\\n\\n  function name() public view override returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public pure override returns (uint8) {\\n    return DECIMALS;\\n  }\\n\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDexPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IDexPair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  function name() external pure returns (string memory);\\n  function symbol() external pure returns (string memory);\\n  function decimals() external pure returns (uint8);\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address owner) external view returns (uint256);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 value) external returns (bool);\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n  event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n  function factory() external view returns (address);\\n  function token0() external view returns (address);\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n  function price1CumulativeLast() external view returns (uint256);\\n  function kLast() external view returns (uint256);\\n  function mint(address to) external returns (uint256 liquidity);\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n  function sync() external;\\n  function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDexRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IDexRouter {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDexFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IDexFactory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n  function feeTo() external view returns (address);\\n  function feeToSetter() external view returns (address);\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n  function allPairs(uint256) external view returns (address pair);\\n  function allPairsLength() external view returns (uint256);\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n  function setFeeTo(address) external;\\n  function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGuilderFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IGuilderFi {\\n  // Events\\n  event LogRebase(uint256 indexed epoch, uint256 totalSupply, uint256 pendingRebases);\\n\\n  // Fee struct\\n  struct Fee {\\n    uint256 treasuryFee;\\n    uint256 lrfFee;\\n    uint256 liquidityFee;\\n    uint256 safeExitFee;\\n    uint256 burnFee;\\n    uint256 totalFee;\\n  }\\n\\n  // Rebase functions\\n  function rebase() external;\\n  function getRebaseRate() external view returns (uint256);\\n  function maxRebaseBatchSize() external view returns (uint256);\\n\\n  // Transfer\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  // Allowance\\n  function allowance(address owner_, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  // Launch token\\n  function launchToken() external;\\n\\n  // Set on/off flags\\n  function setAutoSwap(bool _flag) external;\\n  function setAutoLiquidity(bool _flag) external;\\n  function setAutoLrf(bool _flag) external;\\n  function setAutoSafeExit(bool _flag) external;\\n  function setAutoRebase(bool _flag) external;\\n\\n  // Set frequencies\\n  function setAutoLiquidityFrequency(uint256 _frequency) external;\\n  function setLrfFrequency(uint256 _frequency) external;\\n  function setSwapFrequency(uint256 _frequency) external;\\n\\n  // Address settings\\n  function setFeeExempt(address _address, bool _flag) external;\\n  function setBlacklist(address _address, bool _flag) external;\\n\\n  // Read only functions\\n  function hasLaunched() external view returns (bool);\\n\\n  // Addresses\\n  function getOwner() external view returns (address);\\n  function getTreasuryAddress() external view returns (address);\\n  function getSwapEngineAddress() external view returns (address);\\n  function getLrfAddress() external view returns (address);\\n  function getAutoLiquidityAddress() external view returns (address);\\n  function getSafeExitFundAddress() external view returns (address);\\n  function getPreSaleAddress() external view returns (address);\\n\\n  // Setup functions\\n  function setSwapEngine(address _address) external;\\n  function setLrf(address _address) external;\\n  function setLiquidityEngine(address _address) external;\\n  function setSafeExitFund(address _address) external;\\n  function setPreSaleEngine(address _address) external;\\n  function setTreasury(address _address) external;\\n  function setDex(address routerAddress) external;\\n\\n  // Setup fees\\n  function setFees(\\n    bool _isSellFee,\\n    uint256 _treasuryFee,\\n    uint256 _lrfFee,\\n    uint256 _liquidityFee,\\n    uint256 _safeExitFee,\\n    uint256 _burnFee\\n  ) external;\\n\\n  // Getters - setting flags\\n  function isAutoSwapEnabled() external view returns (bool);\\n  function isAutoRebaseEnabled() external view returns (bool);\\n  function isAutoLiquidityEnabled() external view returns (bool);\\n  function isAutoLrfEnabled() external view returns (bool);\\n  function isAutoSafeExitEnabled() external view returns (bool);\\n\\n  // Getters - frequencies\\n  function autoSwapFrequency() external view returns (uint256);\\n  function autoLiquidityFrequency() external view returns (uint256);\\n  function autoLrfFrequency() external view returns (uint256);\\n\\n  // Date/time stamps\\n  function initRebaseStartTime() external view returns (uint256);\\n  function lastRebaseTime() external view returns (uint256);\\n  function lastAddLiquidityTime() external view returns (uint256);\\n  function lastLrfExecutionTime() external view returns (uint256);\\n  function lastSwapTime() external view returns (uint256);\\n  function lastEpoch() external view returns (uint256);\\n\\n  // Dex addresses\\n  function getRouter() external view returns (address);\\n  function getPair() external view returns (address);\\n\\n  // Standard ERC20 functions\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address who) external view returns (uint256);\\n  function name() external view returns (string memory);\\n  function symbol() external view returns (string memory);\\n  function decimals() external pure returns (uint8);\\n  function manualSync() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapEngine {\\n  function executeSwapEngine() external;\\n  function recordFees(uint256 lrfAmount, uint256 safeExitAmount, uint256 treasuryAmount) external;\\n  function inSwap() external view returns (bool);\\n  function withdraw(uint256 amount) external;\\n  function withdrawTokens(address token, uint256 amount) external;\\n  function burn(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityReliefFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ILiquidityReliefFund {\\n  function executeLiquidityReliefFund() external;\\n  function forceExecute() external;\\n  function inSwap() external view returns (bool);\\n  function withdraw(uint256 amount) external;\\n  function withdrawTokens(address token, uint256 amount) external;\\n  function burn(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAutoLiquidityEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IAutoLiquidityEngine {\\n  function executeLiquidityEngine() external;\\n  function inSwap() external view returns (bool);\\n  function withdraw(uint256 amount) external;\\n  function withdrawTokens(address token, uint256 amount) external;\\n  function burn(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISafeExitFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISafeExitFund {\\n  function captureTransaction(\\n    address sender,\\n    address recipient,\\n    uint256 tokenAmount\\n  ) external;\\n\\n  function capturePresalePurchase(address _walletAddress, uint256 _amount) external;\\n  function claimSafeExit() external;\\n  function mintRandom(address _walletAddress) external;\\n  function mint(address _walletAddress, uint256 maxInsuranceAmount) external;\\n\\n  // Public getter functions\\n  function maxSupply() external view returns (uint256);\\n  function activationDate() external view returns (uint256);\\n  function tokenURI(uint256 _nftId) external view returns (string memory);\\n  function issuedTokens() external view returns (uint256);\\n\\n  function getPackage(uint256 _nftId) external view returns (\\n    uint256 packageId,\\n    string memory name,\\n    uint256 maxInsuranceAmount,\\n    string memory metadataUriActive,\\n    string memory metadataUriReady,\\n    string memory metadataUriDead\\n  );\\n\\n  function createPackage(\\n    uint256 _packageId,\\n    string memory _name,\\n    uint256 _maxInsuranceAmount,\\n    string memory _uriActive,\\n    string memory _uriReady,\\n    string memory _uriDead) external;\\n\\n  function getInsuranceStatus(address _walletAddress) external view returns (\\n    uint256 totalPurchaseAmount,\\n    uint256 maxInsuranceAmount,\\n    uint256 payoutAmount,\\n    uint256 premiumAmount,\\n    uint256 finalPayoutAmount    \\n  );\\n\\n  // External setter functions\\n  function launchSafeExitNft(uint256 _randomSeed) external;\\n  function setMetadataUri(uint256 _packageId, string memory _uriActive, string memory _uriReady, string memory _uriDead) external;\\n  function setPresaleMetadataUri(string memory _uri) external;\\n  function setActivationDate(uint256 _date) external;\\n  function setMaxSupply(uint256 newMaxSupply) external;\\n  \\n  function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPreSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPreSale {\\n  // arrays\\n  function purchaseAmount(address _address) external returns (uint256);\\n  function refundClaimed(address _address) external returns (bool);\\n  function locker(address _address) external returns (address);\\n  \\n  // public getter functions\\n  function token() external view returns (address);\\n  function isPublicSaleOpen() external view returns (bool);\\n  function isWhitelistSaleOpen(uint256 tierId) external view returns (bool);\\n  function publicSaleCloseDate() external view  returns (uint256);\\n  function whitelistSaleCloseDate(uint256 tierId) external view  returns (uint256);\\n  function softCap() external view  returns (uint256);\\n  function lockerUnlockDate() external view  returns (uint256);\\n  function isRefundActivated() external returns (bool);\\n  function tokensSold() external returns (uint256);\\n  function lockDuration() external returns (uint256);\\n  function isSaleClosed() external returns (bool);\\n\\n  function getTier(address _address) external view returns (\\n    uint256 tierId,\\n    uint256 minAmount,\\n    uint256 maxAmount,\\n    uint256 tokensPerEth\\n  );\\n\\n  // external setter functions\\n  function openPublicSale(bool isOpen) external;\\n  function openWhitelistSale(uint256 tierId, bool isOpen) external;\\n  function setPublicSaleCloseDate(uint256 date) external;\\n  function setWhitelistSaleCloseDate(uint256 tierId, uint256 date) external;\\n  function setSoftCap(uint256 softCapAmount) external;\\n  function addToWhitelist(address[] memory _addresses, uint256 _tierId) external;\\n  function removeFromWhitelist(address[] memory _addresses) external;\\n  function setLockDuration(uint256 _duration) external;\\n\\n  // functions\\n  function buyTokens() external payable;\\n  function finalizeSale() external;\\n  function claimRefund() external returns (bool);\\n  function unlockTokens() external;\\n  function cancelSale() external;\\n\\n  function addCustomTier(\\n    uint256 tierId,\\n    uint256 minPurchaseAmount,\\n    uint256 maxPurchaseAmount,\\n    uint256 tokensPerEth\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingRebases\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLrfFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwapFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoLiquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLrfAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreSaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSafeExitFundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapEngineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initRebaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoLiquidityEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoLrfEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoRebaseEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoSafeExitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLrfExecutionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRebaseBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frequency\",\"type\":\"uint256\"}],\"name\":\"setAutoLiquidityFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoLrf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoSafeExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"setDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSellFee\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lrfFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safeExitFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLiquidityEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLrf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frequency\",\"type\":\"uint256\"}],\"name\":\"setLrfFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPreSaleEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSafeExitFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSwapEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_frequency\",\"type\":\"uint256\"}],\"name\":\"setSwapFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GuilderFi", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}