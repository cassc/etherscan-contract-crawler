{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-05-31\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract CoinDistribution is Context, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    //\u9884\u8bbe\u7f6e\u4ee3\u5e01\u603b\u91cf\r\n    uint256 public totalCoinAmount;\r\n    \r\n    //\u5df2\u7ed1\u5b9a\u7684\u9080\u8bf7\u5173\u7cfb,\u4e0b\u7ea7->\u4e0a\u7ea7\r\n    mapping(address => address) public parentInviter;\r\n    //\u4e0a\u7ea7->\u4e0b\u7ea7\r\n    mapping(address => address[]) public childInviter;\r\n    mapping (address => uint256) public claimed;\r\n    //\u7a7a\u6295\u6570\u91cf\r\n    uint256 public airdropAmount;\r\n    //\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\r\n    address public coin;\r\n    //\u5730\u5740\u53ef\u9886\u53d6\u4ee3\u5e01\u6570\u91cf\r\n    mapping (address => uint256) public profitOf;\r\n    //\u7d2f\u8ba1\u603b\u91ca\u653ecoin\u6570\u91cf\r\n    uint256 public totalProfit;\r\n    //\u7d2f\u8ba1\u5df2\u63d0\u53d6coin\u6570\u91cf\r\n    uint256 public totalProfitReleased;\r\n    //\u5730\u5740\u53ef\u9886\u53d6BNB\u6570\u91cf\r\n    mapping (address => uint256) public profitBNBOf;\r\n    //\u7d2f\u8ba1\u603b\u91ca\u653eBNB\u6570\u91cf\r\n    uint256 public totalProfitBNB;\r\n    //\u7d2f\u8ba1\u5df2\u63d0\u53d6BNB\u6570\u91cf\r\n    uint256 public totalProfitBNBReleased;\r\n\r\n    //1BNB = ncoin\r\n    uint256 public swapRate;\r\n\r\n    uint256 public minBuy = 1e17;//\u6700\u5c0f\u8d2d\u4e70BNB\u6570\u91cf\r\n    uint256 public maxBuy = 5*1e18;//\u6700\u5927\u8d2d\u4e70BNB\u6570\u91cf\r\n    //\u5730\u5740\u5df2\u4e70BNB\u6570\u91cf\uff0c\u6bcf\u6b21\u8d2d\u4e70\u4f1a\u7d2f\u52a0\r\n    mapping (address => uint256) public boughtOf;\r\n    //\u4ee3\u5e01\u53ef\u9886\u53d6\u5f00\u59cb\u65f6\u95f4\r\n    uint256 public withdrawStartTime;\r\n    uint256 public claimTime = 1701360000;\r\n    address public feeAddress=0x96b544d8538Dbea972194C5e1b23AB960480f8aF;\r\n\r\n\r\n    event SetAirdropAmount(uint256 oldAmount,uint256 newAmount);\r\n    event SetTotalCoinAmount(uint256 oldAmount,uint256 newAmount);\r\n    event SetSwapRate(uint256 oldSwapRate,uint256 newSwapRate);\r\n    event SetWithdrawStartTime(uint256 oldWithdrawStartTime,uint256 newWithdrawStartTime);\r\n    event ClaimAirdrop(address inviter,address inviterPa,uint256 airdropAmount);\r\n    event Buy(address user,address inviter,uint256 payAmount,uint256 outAmount);\r\n    event SetCoinAddress(address coinAddress);\r\n\r\n    constructor (address _coin,uint256 _airdropAmount,uint256 _swapRate,uint256 _withdrawStartTime,uint256 _totalCoinAmount) public {\r\n        require(_swapRate>0,\"_swapRate error\");\r\n        swapRate = _swapRate;//\u4e3e\u4f8b\uff1a 1BNB = 100Coin \u5219 _swapRate = 100 * 1e18\r\n        require(_withdrawStartTime>block.timestamp,\"_withdrawStartTime error\");\r\n        withdrawStartTime = _withdrawStartTime;\r\n        require(_coin!=address(0),\"coin error\");\r\n        coin = _coin;//\u4ee3\u5e01\u5730\u5740\r\n        require(_totalCoinAmount>0,\"_totalCoinAmount error\");\r\n        totalCoinAmount = _totalCoinAmount;//\u603b\u7684\u5206\u53d1\u4ee3\u5e01\u6570\uff0c\u9700\u8981\u8f6c\u5165\u7b49\u91cf\u7684\u4ee3\u5e01\r\n        require(_airdropAmount>0,\"_airdropAmount error\");\r\n        airdropAmount = _airdropAmount;//\u9886\u53d6\u7684\u4ee3\u5e01\u6570\u91cf\uff0c\u4e0e\u4ee3\u5e01\u7cbe\u5ea6\u4f4d\u6709\u5173\r\n\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    //\u7ba1\u7406\u5458\u63d0\u53d6\u5e73\u53f0\u5e01\r\n    function withdrawETH(uint256 _amount) public onlyOwner {\r\n        require(_amount > 0, \"withdrawETH: amount not good\");\r\n        safeTransferETH(msg.sender, _amount);\r\n    }\r\n\r\n    //\u7ba1\u7406\u5458\u63d0\u53d6\u4ee3\u5e01\r\n    function withdrawERC20(address _erc20, uint256 _amount) public onlyOwner {\r\n        require(_amount > 0, \"withdrawERC20: amount not good\");\r\n        safeErc20Transfer(_erc20, msg.sender, _amount);\r\n    }\r\n\r\n    function safeErc20Transfer(address _erc20 ,address _to, uint256 _amount) internal {\r\n        uint256 bal = IERC20(_erc20).balanceOf(address(this));\r\n        require(bal >= _amount,\"safeErc20Transfer: _amount error\");\r\n        IERC20(_erc20).transfer(_to, _amount);\r\n    }\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        require(address(this).balance >= value,\"safeTransferETH: _amount error\");\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n\r\n    //\u67e5\u8be2\u5408\u7ea6\u4e2d\u5269\u4f59\u4ee3\u5e01\u6570\u91cf\r\n    function getBalance() public view returns (uint256 coinBalance,uint256 bnbBalance,uint256 leftCoinAmount)\r\n    {\r\n        coinBalance = IERC20(coin).balanceOf(address(this));\r\n        bnbBalance = address(this).balance;\r\n        leftCoinAmount = totalCoinAmount.sub(totalProfit);\r\n    }\r\n    \r\n    //\u8bbe\u7f6e\u603b\u91ca\u653e\u4ee3\u5e01\u6570\u3002\u9700\u8981\u8f6c\u5165\u76f8\u5e94\u7684\u4ee3\u5e01\r\n    function setTotalCoinAmount(uint256 _amount) public onlyOwner {\r\n        require(_amount > 0 && totalCoinAmount!= _amount, \"setTotalCoinAmount: _amount error\");\r\n        uint256 _old = totalCoinAmount;\r\n        totalCoinAmount = _amount;\r\n        emit SetTotalCoinAmount(_old,_amount);\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u9886\u53d6\u4ee3\u5e01\u7684\u6570\u91cf\r\n    function setAirdropAmount(uint256 _amount) public onlyOwner {\r\n        require(_amount > 0 && airdropAmount!= _amount, \"setAirdropAmount: _amount error\");\r\n        uint256 _old = airdropAmount;\r\n        airdropAmount = _amount;\r\n        emit SetAirdropAmount(_old,_amount);\r\n    }\r\n    //\u8bbe\u7f6e\u5151\u6362\u6bd4\u4f8b\r\n    function setSwapRate(uint256 _swapRate) public onlyOwner {\r\n        require(_swapRate > 0 && swapRate!= _swapRate, \"setAirdropAmount: _swapRate error\");\r\n        uint256 _old = swapRate;\r\n        swapRate = _swapRate;\r\n        emit SetSwapRate(_old,_swapRate);\r\n    }\r\n    //\u8bbe\u7f6e\u4ee3\u5e01\r\n    function setCoinAddress(address _coinAddress) public onlyOwner {\r\n        coin = _coinAddress;\r\n        emit SetCoinAddress(_coinAddress);\r\n    }\r\n    //\u8bbe\u7f6e\u9886\u53d6\u5f00\u59cb\u65f6\u95f4\r\n    function setWithdrawStartTime(uint256 _withdrawStartTime) public onlyOwner {\r\n        require(_withdrawStartTime > 0 && withdrawStartTime!= _withdrawStartTime, \"setWithdrawStartTime: _withdrawStartTime error\");\r\n        uint256 _old = withdrawStartTime;\r\n        withdrawStartTime = _withdrawStartTime;\r\n        emit SetWithdrawStartTime(_old,_withdrawStartTime);\r\n    }\r\n    //\u9886\u53d6\u4ee3\u5e01\r\n    function claimAirdrop(address _inviter) external payable{\r\n        require(_inviter!=address(0),\"claimAirdrop: _inviter error\");\r\n        require(_inviter!=msg.sender && msg.sender!=parentInviter[msg.sender] && msg.sender!=parentInviter[parentInviter[msg.sender]],\"claimAirdrop: _inviter error 1\");\r\n        uint256 nowTimes = block.timestamp.sub(claimTime).div(24*60*60) + 1; \r\n        require(claimed[msg.sender]!=nowTimes,\"claimAirdrop: claimed\");\r\n        require(msg.value >= 1e15,\"claimAirdrop: ETH too low\");\r\n        safeTransferETH(feeAddress,1e15);\r\n        if(parentInviter[msg.sender]==address(0)){\r\n            parentInviter[msg.sender] = _inviter;\r\n            childInviter[_inviter].push(msg.sender);\r\n        }\r\n        require(parentInviter[msg.sender] == _inviter,\"buy: _inviter error 2\");\r\n        profitOf[msg.sender] = profitOf[msg.sender].add(airdropAmount);\r\n        uint256 one = airdropAmount.mul(5000).div(10000);//50%\r\n        uint256 two = airdropAmount.mul(2500).div(10000);//25%\r\n        if(parentInviter[msg.sender]!=address(0) && one>0){\r\n            profitOf[parentInviter[msg.sender]] = profitOf[parentInviter[msg.sender]].add(one);\r\n            totalProfit = totalProfit.add(one);\r\n        }\r\n        if(parentInviter[parentInviter[msg.sender]]!=address(0) && two>0){\r\n            profitOf[parentInviter[parentInviter[msg.sender]]] = profitOf[parentInviter[parentInviter[msg.sender]]].add(two);\r\n            totalProfit = totalProfit.add(two);\r\n        }\r\n        claimed[msg.sender]=nowTimes;\r\n        emit ClaimAirdrop(parentInviter[msg.sender],parentInviter[parentInviter[msg.sender]],airdropAmount);\r\n    }\r\n    \r\n    function getClaimedTimes() external view returns (uint256 times){\r\n        return claimed[msg.sender];\r\n    }\r\n\r\n    //\u8d2d\u4e70\r\n    function buy(address _inviter) external payable{\r\n        require(_inviter!=address(0),\"buy: _inviter error\");\r\n        require(_inviter!=msg.sender && msg.sender!=parentInviter[msg.sender] && msg.sender!=parentInviter[parentInviter[msg.sender]],\"claimAirdrop: _inviter error 1\");\r\n        require(msg.value >= minBuy.add(1e15),\"buy: Insufficient amount\");\r\n        safeTransferETH(feeAddress,1e15);\r\n        require(boughtOf[msg.sender].add(msg.value)<=maxBuy.add(1e15),\"buy: pay amount more than maxBuy\");\r\n        uint256 _leftValue = msg.value.sub(1e15);\r\n        if(parentInviter[msg.sender]==address(0)){\r\n            parentInviter[msg.sender] = _inviter;\r\n            childInviter[_inviter].push(msg.sender);\r\n        }\r\n        require(parentInviter[msg.sender] == _inviter,\"buy: _inviter error 2\");\r\n        uint256 outAmount = _leftValue.mul(swapRate).div(1e18);\r\n        require(outAmount>0,\"buy: outAmount error\");\r\n        profitOf[msg.sender] = profitOf[msg.sender].add(outAmount);\r\n        totalProfit = totalProfit.add(outAmount);\r\n\r\n        address lastPa = msg.sender;\r\n        uint8 count = 0;\r\n        for(uint256 i=0;i<20;i++){//\u5faa\u73af20\u4ee3\r\n            if(count>=2){\r\n                break;\r\n            }\r\n            if(parentInviter[lastPa]==address(0)){\r\n                break;\r\n            }\r\n            if(boughtOf[parentInviter[lastPa]]>=5*1e17 && count==0){//\u5927\u4e8e0.5\u4e2aBNB\r\n                uint256 one = outAmount.mul(5000).div(10000);//50%\r\n                profitOf[parentInviter[lastPa]] = profitOf[parentInviter[lastPa]].add(one);\r\n                totalProfit = totalProfit.add(one);\r\n                count++;\r\n            }else if(boughtOf[parentInviter[lastPa]]>=5*1e17 && count==1){\r\n                uint256 two = outAmount.mul(2500).div(10000);//25%\r\n                profitOf[parentInviter[lastPa]] = profitOf[parentInviter[lastPa]].add(two);\r\n                totalProfit = totalProfit.add(two);\r\n                count++;\r\n            }\r\n            lastPa = parentInviter[lastPa];\r\n        }\r\n\r\n        //\u66f4\u65b0\u5df2\u8d2d\u4e70BNB\u6570\u91cf\r\n        boughtOf[msg.sender] = boughtOf[msg.sender].add(msg.value);\r\n        emit Buy(msg.sender,_inviter,msg.value,outAmount);\r\n    }\r\n\r\n    //\u7528\u6237\u63d0\u53d6\u4ee3\u5e01\r\n    function userWithdrawERC20(uint256 _amount) external payable{\r\n        require(_amount > 0, \"userWithdraw: _amount error 0\");\r\n        require(profitOf[msg.sender] >= _amount, \"userWithdrawERC20: _amount error\");\r\n        require(block.timestamp>=withdrawStartTime,\"userWithdrawERC20: paused\");\r\n        require(msg.value >= 5e15,\"userWithdrawERC20: ETH too low\");\r\n        safeTransferETH(feeAddress,5e15);\r\n        profitOf[msg.sender] = profitOf[msg.sender].sub(_amount);\r\n        safeErc20Transfer(coin, msg.sender, _amount);\r\n        totalProfitReleased = totalProfitReleased.add(_amount);\r\n    }\r\n\r\n    \r\n\r\n    function viewInviteeByAddress(\r\n        address inviter,\r\n        uint256 cursor,\r\n        uint256 size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory generation,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = size;\r\n\r\n        if (length > childInviter[inviter].length - cursor) {\r\n            length = childInviter[inviter].length - cursor;\r\n        }\r\n\r\n        generation = new address[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            generation[i] = childInviter[inviter][i];\r\n        }\r\n\r\n        return (generation, cursor + length);\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_airdropAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCoinAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inviterPa\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"airdropAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SetAirdropAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coinAddress\",\"type\":\"address\"}],\"name\":\"SetCoinAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapRate\",\"type\":\"uint256\"}],\"name\":\"SetSwapRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"SetTotalCoinAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWithdrawStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawStartTime\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawStartTime\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"childInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftCoinAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimedTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parentInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profitBNBOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAirdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinAddress\",\"type\":\"address\"}],\"name\":\"setCoinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapRate\",\"type\":\"uint256\"}],\"name\":\"setSwapRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTotalCoinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawStartTime\",\"type\":\"uint256\"}],\"name\":\"setWithdrawStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCoinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfitBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfitBNBReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfitReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"userWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"viewInviteeByAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"generation\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CoinDistribution", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000000000000000000000295be96e640669720000000000000000000000000000000000000000000000000000000000000065a247380000000000000000000000000000000000000000a18f07d736b90be550000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f07f6ca274ce7076cc7776066f74eabaa49cfb50351ae01dc975c4786355a89"}