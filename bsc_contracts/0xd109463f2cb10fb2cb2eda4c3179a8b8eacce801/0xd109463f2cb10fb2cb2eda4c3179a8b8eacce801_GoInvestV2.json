{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GoInvestV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./utils/SafeAmount.sol\\\";\\nimport \\\"./IGoInvestV2.sol\\\";\\n\\ncontract GoInvestV2 is IGoInvestV2 {\\n\\n    struct StakeState {\\n        uint256 stakedCurrent;\\n        uint256 stakedTotal;\\n        uint256 stakeCap;\\n        uint256 stakeMin;\\n        mapping(address => uint256) stakes;\\n        uint stakeStartDate;\\n        uint stakeEndDate;\\n\\n        uint withdrawStartDate;\\n        uint withdrawEndDate;\\n    }\\n\\n    struct RewardState {\\n        uint256 rewardTotal;\\n        uint256 rewardCurrent;\\n    }\\n\\n    string private _name;\\n\\n    StakeState private stakeState;\\n    RewardState private rewardState;\\n\\n    address public override tokenAddress;\\n    address public override rewardTokenAddress;\\n    address public override ownerAddress;\\n\\n    uint public earlyWithdrawalApr;\\n\\n    constructor (\\n        string memory name_,\\n        address tokenAddress_,\\n        address rewardTokenAddress_,\\n        uint256 stakeCap_,\\n        uint stakeStartDate_,\\n        uint stakeEndDate_,\\n        uint withdrawStartDate_,\\n        uint withdrawEndDate_,\\n        uint earlyWithdrawalApr_,\\n        uint256 minStakingAmount_\\n    ) public {\\n        _name = name_;\\n        require(tokenAddress_ != address(0), \\\"invalid address\\\");\\n        tokenAddress = tokenAddress_;\\n        require(rewardTokenAddress_ != address(0), \\\"invalid address\\\");\\n        rewardTokenAddress = rewardTokenAddress_;\\n\\n        require(stakeCap_ >= 0, \\\"stakingCap cannot be negative\\\");\\n        stakeState.stakeCap = stakeCap_;\\n\\n        require(stakeStartDate_ > 0, \\\"invalid staking start time\\\");\\n\\n        uint currentTime = block.timestamp;\\n        if (stakeStartDate_ < currentTime) {\\n            stakeState.stakeStartDate = currentTime;\\n        } else {\\n            stakeState.stakeStartDate = stakeStartDate_;\\n        }\\n\\n        require(stakeEndDate_ >= stakeState.stakeStartDate,\\n            \\\"staking end must be after staking starts\\\");\\n        stakeState.stakeEndDate = stakeEndDate_;\\n\\n        require(withdrawStartDate_ >= stakeState.stakeEndDate,\\n            \\\"withdrawStarts must be after staking ends\\\");\\n        stakeState.withdrawStartDate = withdrawStartDate_;\\n\\n        require(withdrawEndDate_ >= withdrawStartDate_,\\n            \\\"withdrawEnds must be after withdraw starts\\\");\\n        stakeState.withdrawEndDate = withdrawEndDate_;\\n\\n        ownerAddress = msg.sender;\\n\\n        require(earlyWithdrawalApr_ >= 0, \\\"early withdrawal APR can't be negative\\\");\\n        earlyWithdrawalApr = earlyWithdrawalApr_;\\n\\n        require(minStakingAmount_ >= 0, \\\"minimum staking amount can't be negative\\\");\\n        stakeState.stakeMin = minStakingAmount_;\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function stake(uint256 amount) external returns (bool) {\\n        require(amount >= stakeState.stakeMin,\\n            \\\"staked amount should be greater than minimum threshold\\\");\\n        address from = msg.sender;\\n        uint256 remaining = tryStake(from, amount);\\n        if (remaining > 0) {\\n            stakeState.stakedTotal = stakeState.stakedTotal + remaining;\\n            stakeState.stakedCurrent = stakeState.stakedCurrent + remaining;\\n            stakeState.stakes[from] = stakeState.stakes[from] + remaining;\\n            emit Staked(tokenAddress, from, amount, remaining);\\n        }\\n        return true;\\n    }\\n\\n    function stakeOf(address account) external view returns (uint256) {\\n        require(account != address(0), \\\"invalid address\\\");\\n        return stakeState.stakes[account];\\n    }\\n\\n    function stakedCurrent() external view returns (uint256) {\\n        return stakeState.stakedCurrent;\\n    }\\n\\n    function stakedTotal() external view returns (uint256) {\\n        return stakeState.stakedTotal;\\n    }\\n\\n    function stakeCap() external view returns (uint256) {\\n        return stakeState.stakeCap;\\n    }\\n\\n    function stakeStartDate() external view returns (uint) {\\n        return stakeState.stakeStartDate;\\n    }\\n\\n    function stakeEndDate() external view returns (uint) {\\n        return stakeState.stakeEndDate;\\n    }\\n\\n    function stakeMin() external view returns (uint256) {\\n        return stakeState.stakeMin;\\n    }\\n\\n    function withdrawStartDate() external view returns (uint) {\\n        return stakeState.withdrawStartDate;\\n    }\\n\\n    function withdrawEndDate() external view returns (uint) {\\n        return stakeState.withdrawEndDate;\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        address from = msg.sender;\\n        uint256 wdAmount = tryWithdraw(from, amount);\\n        stakeState.stakedCurrent = stakeState.stakedCurrent - wdAmount;\\n        stakeState.stakes[from] = stakeState.stakes[from] - wdAmount;\\n    }\\n\\n    function rewardTotal() external view returns (uint256) {\\n        return rewardState.rewardTotal;\\n    }\\n\\n    function rewardCurrent() external view returns (uint256) {\\n        return rewardState.rewardCurrent;\\n    }\\n\\n    function addReward(uint256 rewardAmount)\\n    _after(stakeState.stakeEndDate) _before(stakeState.withdrawStartDate) external {\\n        require(msg.sender == ownerAddress, \\\"only owner can add reward\\\");\\n        require(rewardAmount > 0, \\\"reward must be positive\\\");\\n        address from = msg.sender;\\n        if (!SafeAmount.payMe(from, rewardAmount, rewardTokenAddress)) {\\n            return;\\n        }\\n        rewardState.rewardTotal = rewardState.rewardTotal + rewardAmount;\\n        rewardState.rewardCurrent = rewardState.rewardTotal;\\n    }\\n\\n    function investmentSummary(address account) external view returns (InvestmentSummary memory) {\\n        require(account != address(0), \\\"invalid address\\\");\\n        uint256 stakedAmount = stakeState.stakes[account];\\n        uint256 currentReward = calculateCurrentReward(stakedAmount);\\n        uint256 maturityReward = calculateMaturityReward(stakedAmount);\\n        InvestmentSummary memory summary = InvestmentSummary(stakedAmount,\\n            currentReward, maturityReward, currentReward);\\n        return summary;\\n    }\\n\\n    function tryStake(address staker, uint256 amount) private _after(stakeState.stakeStartDate)\\n    _before(stakeState.stakeEndDate) _positive(amount) returns (uint256) {\\n        uint256 remaining = amount;\\n        {\\n            uint256 stakedBalance = stakeState.stakedCurrent;\\n            if (stakeState.stakeCap > 0 && remaining > (stakeState.stakeCap - stakedBalance)) {\\n                remaining = stakeState.stakeCap - stakedBalance;\\n            }\\n        }\\n        require(remaining > 0, \\\"staking cap is filled\\\");\\n        if (!SafeAmount.payMe(staker, remaining, tokenAddress)) {\\n            return 0;\\n        }\\n        return remaining;\\n    }\\n\\n    function tryWithdraw(address to, uint256 amount) private _positive(amount)\\n    _realAddress(to) returns (uint256) {\\n        uint currentTime = block.timestamp;\\n        require(currentTime >= stakeState.withdrawStartDate, \\\"withdrawal has not started yet\\\");\\n        require(amount <= stakeState.stakes[to], \\\"not enough balance\\\");\\n        if (currentTime < stakeState.withdrawEndDate) {\\n            return withdrawEarly(to, amount);\\n        }\\n        return withdrawAfterClose(to, amount);\\n    }\\n\\n    function withdrawEarly(address to, uint256 amount) private _realAddress(to) returns (uint256) {\\n        uint256 reward = calculateEarlyWithdrawalReward(amount);\\n        rewardState.rewardCurrent = rewardState.rewardCurrent - reward;\\n        bool principalPaid = SafeAmount.payTo(to, amount, tokenAddress);\\n        bool rewardPaid = SafeAmount.payTo(to, reward, rewardTokenAddress);\\n        require(principalPaid && rewardPaid, \\\"error in early withdrawal\\\");\\n        emit PaidOut(tokenAddress, rewardTokenAddress, to, amount, reward);\\n        return amount;\\n    }\\n\\n    function withdrawAfterClose(address to, uint256 amount) private _realAddress(to)\\n    returns (uint256) {\\n        uint256 reward = calculateMaturityReward(amount);\\n        rewardState.rewardCurrent = rewardState.rewardCurrent - reward;\\n        bool principalPaid = SafeAmount.payTo(to, amount, tokenAddress);\\n        bool rewardPaid = SafeAmount.payTo(to, reward, rewardTokenAddress);\\n        require(principalPaid && rewardPaid, \\\"error paying\\\");\\n        emit PaidOut(tokenAddress, rewardTokenAddress, to, amount, reward);\\n        return amount;\\n    }\\n\\n    function calculateCurrentReward(uint256 amount) private view returns (uint256) {\\n        uint256 now = block.timestamp;\\n        if (now < stakeState.withdrawStartDate) {\\n          return 0;\\n        } else if (now < stakeState.withdrawEndDate) {\\n            return calculateEarlyWithdrawalReward(amount);\\n        } else {\\n            return calculateMaturityReward(amount);\\n        }\\n    }\\n\\n    function calculateEarlyWithdrawalReward(uint256 amount) private view returns (uint256) {\\n        uint256 now = block.timestamp;\\n        return (earlyWithdrawalApr * amount / 100) * (now - stakeState.stakeEndDate) / 31536000;\\n    }\\n\\n    function calculateMaturityReward(uint256 amount) private view returns (uint256) {\\n        if (stakeState.stakedCurrent == 0) {\\n            return 0;\\n        }\\n        uint256 rewardBalance = rewardState.rewardCurrent;\\n        return (rewardBalance * amount) / stakeState.stakedCurrent;\\n    }\\n\\n    modifier _realAddress(address addr) {\\n        require(addr != address(0), \\\"zero address\\\");\\n        _;\\n    }\\n\\n    modifier _positive(uint256 amount) {\\n        require(amount != 0, \\\"negative or zero amount\\\");\\n        _;\\n    }\\n\\n    modifier _after(uint eventTime) {\\n        require(block.timestamp >= eventTime, \\\"bad timing for the request\\\");\\n        _;\\n    }\\n\\n    modifier _before(uint eventTime) {\\n        require(block.timestamp < eventTime, \\\"bad timing for the request\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/utils/SafeAmount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary SafeAmount {\\n    using SafeERC20 for IERC20;\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount) internal returns (bool) {\\n        IERC20(token).safeTransferFrom(from, to, amount);\\n        return true;\\n    }\\n\\n    function payMe(address from, uint256 amount, address token) internal returns (bool) {\\n        return safeTransferFrom(token, from, address(this), amount);\\n    }\\n\\n    function payTo(address to, uint256 amount, address token) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n        IERC20(token).safeTransfer(to, amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/IWithdrawable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IWithdrawble {\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawStartDate() external view returns (uint);\\n\\n    function withdrawEndDate() external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/IStakable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IStakable {\\n\\n    function stake(uint256 amount) external returns (bool);\\n\\n    function stakeOf(address account) external view returns (uint256);\\n\\n    function stakeCap() external view returns (uint256);\\n\\n    function stakedTotal() external view returns (uint256);\\n\\n    function stakedCurrent() external view returns (uint256);\\n\\n    function stakeStartDate() external view returns (uint);\\n\\n    function stakeEndDate() external view returns (uint);\\n\\n    function tokenAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/contracts/IRewardable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\ninterface IRewardable {\\n\\n    function rewardTotal() external view returns (uint256);\\n\\n    function addReward(uint256 rewardAmount) external;\\n\\n    function rewardTokenAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/contracts/IGoInvestV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IGoInvest.sol\\\";\\n\\ninterface IGoInvestV2 is IGoInvest {\\n\\n    struct InvestmentSummary {\\n        uint256 stakedAmount;\\n        uint256 earlyWithdrawalReward;\\n        uint256 maturityReward;\\n        uint256 currentReward;\\n    }\\n\\n    function investmentSummary(address account) external view returns (InvestmentSummary memory);\\n\\n    function stakeMin() external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/IGoInvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./IStakable.sol\\\";\\nimport \\\"./IWithdrawable.sol\\\";\\nimport \\\"./IRewardable.sol\\\";\\n\\ninterface IGoInvest is IStakable, IWithdrawble, IRewardable {\\n\\n    event Staked(address indexed token, address indexed staker, uint256 requestedAmount,\\n        uint256 stakedAmount);\\n    event PaidOut(address indexed token, address indexed rewardToken, address indexed staker,\\n        uint256 amount, uint256 reward);\\n\\n    function name() external view returns (string memory);\\n\\n    function ownerAddress() external view returns (address);\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeCap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeEndDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawStartDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawEndDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalApr_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakingAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawalApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"investmentSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentReward\",\"type\":\"uint256\"}],\"internalType\":\"struct IGoInvestV2.InvestmentSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GoInvestV2", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000014000000000000000000000000032ff208a18a5fbc81f6fd262020b1415bfcb3b33000000000000000000000000d9ea58350bf120e2169a35fa1afc31975b07de010000000000000000000000000000000000000000000422ca8b0a00a425000000000000000000000000000000000000000000000000000000000000006218fd000000000000000000000000000000000000000000000000000000000062262c0000000000000000000000000000000000000000000000000000000000624db90000000000000000000000000000000000000000000000000000000000624db90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}