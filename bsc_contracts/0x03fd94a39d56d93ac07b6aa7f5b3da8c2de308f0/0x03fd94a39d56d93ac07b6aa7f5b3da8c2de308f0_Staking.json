{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Staking is Ownable, ReentrancyGuard {\\n    uint256 public constant BASE = 1e24;\\n\\n    uint256 public immutable rewAmount;\\n    uint256 public immutable minStake;\\n    uint256 public immutable maxStake;\\n    IERC20 public immutable tyz;\\n\\n    uint256 public rewPerDay; // * BASE\\n    uint256 public totalStaked;\\n    uint256 public start;\\n    uint256 public end;\\n\\n    PoolInfo public pool;\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 accRew;\\n        uint256 rewDebt;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 lastUpdateDayTimestamp;\\n        uint256 accRewPerShare; // * BASE\\n    }\\n\\n    constructor(\\n        address _owner,\\n        IERC20 _tyz,\\n        uint256 _rewardAmount,\\n        uint256 _minStake,\\n        uint256 _maxStake\\n    ) {\\n        require(\\n            _owner != address(0) && address(_tyz) != address(0),\\n            \\\"Zero address\\\"\\n        );\\n        require(\\n            _rewardAmount > 0 && _minStake > 0 && _maxStake > _minStake,\\n            \\\"Wrong params\\\"\\n        );\\n        _transferOwnership(_owner);\\n        tyz = _tyz;\\n        rewAmount = _rewardAmount;\\n        minStake = _minStake;\\n        maxStake = _maxStake;\\n    }\\n\\n    /**\\n     * @notice allow owner initiate staking, transfer rewAmount before call\\n     * @param _start - timestamp of staking start\\n     * @param _duration - how many days will the reward be distributed\\n     */\\n    function initiate(uint256 _start, uint256 _duration)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(rewPerDay == 0, \\\"Already initiated\\\");\\n        require(tyz.balanceOf(address(this)) >= rewAmount, \\\"Not enouth reward\\\");\\n        require(_start > block.timestamp && _duration > 0, \\\"Wrong params\\\");\\n        rewPerDay = (rewAmount * BASE) / _duration;\\n        pool = PoolInfo(_start, 0);\\n        start = _start;\\n        end = _start + _duration * 1 days;\\n    }\\n\\n    /**\\n     * @notice allow users stake their tyz tokens and increase staked amount\\n     * @param amount - this amount will be added to user's stake,\\n     * tokens must be approved for it before call\\n     */\\n    function stake(uint256 amount) external nonReentrant {\\n        require(\\n            start > 0 &&\\n                block.timestamp >= start &&\\n                block.timestamp < end - 1 days,\\n            \\\"Stake is not available\\\"\\n        );\\n        require(amount > 0, \\\"Zero amount\\\");\\n        updatePool();\\n        UserInfo storage user = userInfo[_msgSender()];\\n        if (user.amount > 0) {\\n            user.accRew +=\\n                (user.amount * pool.accRewPerShare) /\\n                BASE -\\n                user.rewDebt;\\n        } else {\\n            require(amount >= minStake, \\\"Less then min stake\\\");\\n        }\\n        user.amount += amount;\\n        require(\\n            user.amount <= maxStake,\\n            \\\"More then max stake\\\"\\n        );\\n        user.rewDebt = (user.amount * pool.accRewPerShare) / BASE;\\n        totalStaked += amount;\\n        require(\\n            tyz.transferFrom(_msgSender(), address(this), amount),\\n            \\\"Transfer failed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice allow users withdraw their deposit and rewards,\\n     * if call before end, user will loose his reward (go to next staking reward pool)\\n     * user's must collect their deposit within month after the end\\n     */\\n    function unstake() external nonReentrant {\\n        require(block.timestamp <= end + 30 days, \\\"Stake is lost\\\");\\n        UserInfo memory user = userInfo[_msgSender()];\\n        require(user.amount > 0, \\\"Zero staked\\\");\\n        delete userInfo[_msgSender()];\\n        updatePool();\\n        totalStaked -= user.amount;\\n        if (block.timestamp > end) {\\n            user.amount +=\\n                (user.amount * pool.accRewPerShare) /\\n                BASE +\\n                user.accRew -\\n                user.rewDebt;\\n        }\\n        require(tyz.transfer(_msgSender(), user.amount), \\\"Transfer failed\\\");\\n    }\\n\\n    /**\\n     * @notice allow owner withdraw forgotten deposits after end + month\\n     * @dev selfdestruct after call\\n     */\\n    function claimRestTyz() external onlyOwner nonReentrant {\\n        require(\\n            block.timestamp > end + 30 days ||\\n                (block.timestamp > end && totalStaked == 0),\\n            \\\"Come back later\\\"\\n        );\\n        uint256 balance = tyz.balanceOf(address(this));\\n        require(balance > 0, \\\"Nothing to claim\\\");\\n        require(tyz.transfer(_msgSender(), balance), \\\"Transfer failed\\\");\\n        selfdestruct(payable(_msgSender()));\\n    }\\n\\n    /**\\n     * @return accummulated reward amount for certain user\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo memory user = userInfo[_user];\\n        uint256 accRew = pool.accRewPerShare;\\n        if (\\n            block.timestamp >= pool.lastUpdateDayTimestamp + 1 days &&\\n            pool.lastUpdateDayTimestamp < end &&\\n            totalStaked > 0\\n        ) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastUpdateDayTimestamp,\\n                block.timestamp\\n            );\\n            uint256 reward = multiplier * rewPerDay;\\n            accRew += (reward) / totalStaked;\\n        }\\n        return (user.amount * accRew) / BASE + user.accRew - user.rewDebt;\\n    }\\n\\n    /**\\n     * @return staking - is stake available\\n     * @return withdraw - is unstake available\\n     * @return early - is unstake early or not\\n     */\\n    function isAvailable()\\n        external\\n        view\\n        returns (\\n            bool staking,\\n            bool withdraw,\\n            bool early\\n        )\\n    {\\n        if (start > 0 && block.timestamp >= start) {\\n            staking = block.timestamp < end - 1 days;\\n            withdraw = block.timestamp <= end + 30 days;\\n            early = block.timestamp <= end;\\n        }\\n    }\\n\\n    /**\\n     * @notice if there is no one in when reward being distributed,\\n     * then subsequent rewards will be increased by that amount in total\\n     */\\n    function updatePool() internal {\\n        if (\\n            block.timestamp <= pool.lastUpdateDayTimestamp ||\\n            pool.lastUpdateDayTimestamp >= end\\n        ) {\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(\\n            pool.lastUpdateDayTimestamp,\\n            block.timestamp\\n        );\\n        if (multiplier == 0) {\\n            return;\\n        }\\n        uint256 reward = multiplier * rewPerDay;\\n        pool.lastUpdateDayTimestamp += 1 days * multiplier;\\n        if (totalStaked == 0) {\\n            if (pool.lastUpdateDayTimestamp < end) {\\n                rewPerDay +=\\n                    reward /\\n                    ((end - pool.lastUpdateDayTimestamp) / 1 days);\\n            }\\n            return;\\n        }\\n        pool.accRewPerShare += reward / totalStaked;\\n    }\\n\\n    function getMultiplier(uint256 from, uint256 to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return to <= end ? (to - from) / 1 days : (end - from) / 1 days;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tyz\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRestTyz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"initiate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"staking\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdateDayTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tyz\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200000", "ConstructorArguments": "000000000000000000000000082261a51b6b3b66438501904127afbb4c0933600000000000000000000000000d265949881d2120a9a1a1a0528941f4761a6aad00000000000000000000000000000000000000000000130ee8e71790444000000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000a968163f0a57b400000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}