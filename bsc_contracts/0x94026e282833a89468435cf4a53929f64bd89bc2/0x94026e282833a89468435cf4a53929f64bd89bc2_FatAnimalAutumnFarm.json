{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/aueiei/FatAnimal/nft-farm-contract-deployer/contracts/FatAnimalAutumnFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./interfaces/IFatAnimalNFT.sol\\\";\\nimport \\\"./interfaces/IFatAnimalFood.sol\\\";\\nimport \\\"./interfaces/IFatAnimalRewardDistributor.sol\\\";\\nimport \\\"./interfaces/IFatAnimalSaha.sol\\\";\\n\\ncontract FatAnimalAutumnFarm is ERC721Holder, Ownable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  enum Season {\\n    None,\\n    Spring,\\n    Summer,\\n    Autumn,\\n    Winter\\n  }\\n\\n  uint256 public constant MAX_PLATFORM_FEE = 3000; // 3%;\\n\\n  IERC20 public immutable fat;\\n  address public immutable fatNFT;\\n  address public immutable fatFood;\\n  address public immutable rewardDistributor;\\n  address public immutable sahaLogic;\\n\\n  struct UserInfo {\\n    uint256 ep;\\n    uint256 rewardDebt;\\n    uint256 earned;\\n    uint256 rewarded;\\n    uint256 foodBonus;\\n    uint256 foodExpiration;\\n    uint256 foodId;\\n    uint256 lastActive;\\n    uint256[5][3] slot;\\n  }\\n\\n  mapping(address => UserInfo) public userInfo;\\n\\n  uint256 public startBlock;\\n\\n  uint256 private totalEp;\\n  uint256 private accFatPerEp;\\n  uint256 private lastRewardBlock;\\n  uint256 private farmId;\\n  uint256 private season;\\n\\n  uint256 private _platformFee;\\n  uint256 private _accPlatformFee;\\n  address private _collector;\\n\\n  event LogUpdateFarm(uint256 lastRewardBlock, uint256 totalEP, uint256 accFatPerEp);\\n  event LogUpdateUser(address indexed user, uint256 reward, uint256 deducted);\\n  event Harvest(address indexed user, uint256 reward);\\n  event RemoveAllAnimal(address indexed user);\\n  event Sync(address indexed user, uint256 prevEP, uint256 currentBaseEP, uint256 currentNetEP, uint256 totalEP);\\n  event EatFood(address indexed user, uint256 foodId, uint256 duration, uint256 bonus);\\n  event UpdateAnimal(address indexed user, uint256[5][3] slot);\\n\\n  event SetFee(uint256 fee);\\n  event SetCollector(address collector);\\n  event CollectFee(uint256 platformFee);\\n\\n  constructor (\\n    IERC20 _fat,\\n    address _fatNFT,\\n    address _fatFood,\\n    address _rewardDistributor,\\n    address _sahaLogic,\\n    address _treasury,\\n    uint256 _startBlock\\n  ) {\\n    fat = _fat;\\n    fatNFT = _fatNFT;\\n    fatFood = _fatFood;\\n    rewardDistributor = _rewardDistributor;\\n    sahaLogic = _sahaLogic;\\n    season = uint256(Season.Autumn);\\n    farmId = season - 1;\\n    _platformFee = 3000;\\n    _collector = _treasury;\\n    startBlock = _startBlock;\\n  }\\n\\n  modifier onlyCollector() {\\n    require(_msgSender() == _collector, \\\"FatAnimalFarm: not the collector\\\");\\n    _;\\n  }\\n\\n  modifier onlyEOA() {\\n    require(_msgSender() == tx.origin, \\\"FatAnimalFarm: not EOA\\\");\\n    _;\\n  }\\n\\n  modifier validAddress(address _addr) {\\n    require(_addr != address(0), \\\"FatAnimalFarm: Invalid address\\\");\\n    _;\\n  }\\n\\n  function _safeFatTransfer(address _to, uint256 _amount) private {\\n    uint256 fatBal = fat.balanceOf(address(this));\\n    if (_amount <= fatBal) {\\n      fat.transfer(_to, _amount);\\n    }\\n  }\\n\\n  function _updatePool() private {\\n    uint256 _reward;\\n\\n    if (block.number <= lastRewardBlock || block.number <= startBlock) {\\n      return;\\n    }\\n    if (totalEp == 0) {\\n      lastRewardBlock = block.number;\\n      return;\\n    }\\n    _reward = IFatAnimalRewardDistributor(rewardDistributor).distribute(farmId);\\n    lastRewardBlock = block.number;\\n    if (_reward > 0) {\\n      accFatPerEp = accFatPerEp.add(_reward.mul(1e12).div(totalEp));\\n    }\\n    emit LogUpdateFarm(lastRewardBlock, totalEp, accFatPerEp);\\n  }\\n\\n  function _stackAnimal(\\n    uint256[5][3] memory _slot\\n  )\\n    private\\n    pure\\n    returns (uint256[] memory) {\\n    uint256[] memory _stack = new uint256[](15);\\n    uint256 _counter = 0;\\n    for (uint256 _i = 0; _i < 3; _i++) {\\n      for (uint256 _j = 0; _j < 5; _j++) {\\n        _stack[_counter] = _slot[_i][_j];\\n        _counter += 1;\\n      }\\n    }\\n    return _stack;\\n  }\\n\\n  function _difference(\\n    uint256[] memory _old,\\n    uint256[] memory _new\\n  )\\n    private\\n    pure\\n    returns (uint256[] memory)\\n  {\\n    require(_old.length <= 15 && _new.length <= 15, \\\"FatAnimalFarm: Invalid length\\\");\\n    uint256[] memory _outFromOld = new uint256[](15);\\n    for (uint256 _i = 0; _i < _old.length; _i++) {\\n      bool _found = false;\\n      for (uint256 _j = 0; _j < _new.length && !_found; _j++) {\\n        if (_old[_i] == _new[_j]) {\\n          _found = true;\\n        }\\n      }\\n\\n      if (!_found) {\\n        _outFromOld[_i] = _old[_i];\\n      }\\n    }\\n    return _outFromOld;\\n  }\\n\\n  function _harvest() internal {\\n    uint256 _deducted;\\n    uint256 _foodReward;\\n    uint256 pending;\\n\\n    UserInfo storage user = userInfo[_msgSender()];\\n    _updatePool();\\n\\n    if (user.ep > 0 || user.foodBonus > 0) {\\n      pending = user.ep.mul(accFatPerEp).div(1e12).sub(user.rewardDebt);\\n      _foodReward = pending.mul(user.foodBonus).div(user.ep);\\n      if (user.foodExpiration < block.number && user.foodBonus > 0) {\\n        _deducted = _foodReward.mul(block.number.sub(user.foodExpiration)).div(block.number.sub(user.lastActive));\\n        user.foodBonus = 0;\\n        user.foodExpiration = 0;\\n        user.foodId = 0;\\n        if (pending > _deducted) {\\n          pending = pending.sub(_deducted);\\n        }\\n      }\\n\\n      if (pending > 0) {\\n        user.rewarded = user.rewarded.add(pending);\\n        emit LogUpdateUser(_msgSender(), pending, _deducted);\\n      }\\n    }\\n  }\\n\\n  function harvest()\\n    external\\n    onlyEOA\\n    nonReentrant\\n  {\\n    uint256 _prevEP;\\n    uint256 _newEP;\\n    uint256 _baseEP;\\n    uint256 _pending;\\n\\n    _harvest();\\n\\n    UserInfo storage user = userInfo[_msgSender()];\\n    if (user.rewarded > 0) {\\n      if (_platformFee > 0) {\\n        _accPlatformFee = _accPlatformFee.add(user.rewarded.mul(_platformFee).div(1e5));\\n      }\\n      _pending = user.rewarded.mul(1e5 - _platformFee).div(1e5);\\n      _safeFatTransfer(_msgSender(), _pending);\\n      user.earned = user.earned.add(_pending);\\n      user.rewarded = 0;\\n      emit Harvest(_msgSender(), _pending);\\n    }\\n\\n    user.lastActive = block.number;\\n    _prevEP = user.ep;\\n    (_baseEP, _newEP) = calculateEPByUser(_msgSender());\\n\\n    user.ep = _newEP;\\n    user.rewardDebt = user.ep.mul(accFatPerEp).div(1e12);\\n    totalEp = totalEp.sub(_prevEP).add(_newEP);\\n\\n    emit Sync(_msgSender(), _prevEP, _baseEP, _newEP, totalEp);\\n  }\\n\\n  function addFood(uint256 _foodId)\\n    external\\n    onlyEOA\\n    nonReentrant\\n  {\\n    uint256 _duration;\\n    uint256 _eatingPower;\\n    uint256 _prevEP;\\n    uint256 _newEP;\\n    uint256 _baseEP;\\n\\n    require(userInfo[_msgSender()].foodExpiration < block.number, \\\"FatAnimalFarm: Already have food\\\");\\n    require(_foodId > 0, \\\"FatAnimalFarm: Invalid food Id\\\");\\n    IFatAnimalFood(fatFood).safeTransferFrom(_msgSender(), address(0x000000000000000000000000000000000000dEaD), _foodId);\\n\\n    _harvest();\\n\\n    (_duration, _eatingPower, ) = IFatAnimalFood(fatFood).getFood(_foodId);\\n    UserInfo storage user = userInfo[_msgSender()];\\n    user.foodBonus = _eatingPower;\\n    user.foodExpiration = block.number + _duration;\\n    user.foodId = _foodId;\\n    user.lastActive = block.number;\\n\\n    _prevEP = user.ep;\\n    (_baseEP, _newEP) = calculateEPByUser(_msgSender());\\n    user.ep = _newEP;\\n\\n    user.rewardDebt = user.ep.mul(accFatPerEp).div(1e12);\\n    totalEp = totalEp.sub(_prevEP).add(_newEP);\\n\\n    emit Sync(_msgSender(), _prevEP, _baseEP, _newEP, totalEp);\\n    emit EatFood(_msgSender(), _foodId, _duration, _eatingPower);\\n  }\\n\\n  function addAnimal(uint256[5][3] memory _slot)\\n    external\\n    onlyEOA\\n    nonReentrant\\n  {\\n    _harvest();\\n\\n    UserInfo storage user = userInfo[_msgSender()];\\n    uint256[] memory _oldStack = _stackAnimal(user.slot);\\n    uint256[] memory _newStack = _stackAnimal(_slot);\\n    uint256[] memory _pendingAdd;\\n    uint256[] memory _pendingRemove;\\n    uint256 _prevEP;\\n    uint256 _newEP;\\n    uint256 _baseEP;\\n\\n    user.lastActive = block.number;\\n    user.slot = _slot;\\n    _pendingRemove = _difference(_oldStack, _newStack);\\n    _pendingAdd = _difference(_newStack, _oldStack);\\n\\n    _prevEP = user.ep;\\n    (_baseEP, _newEP) = calculateEPByUser(_msgSender());\\n\\n    user.ep = _newEP;\\n    user.rewardDebt = user.ep.mul(accFatPerEp).div(1e12);\\n    totalEp = totalEp.sub(_prevEP).add(_newEP);\\n\\n    for (uint256 _i = 0; _i < 15; _i++) {\\n      if (_pendingRemove[_i] > 0) {\\n        IFatAnimalNFT(fatNFT).safeTransferFrom(address(this), _msgSender(), _pendingRemove[_i]);\\n      }\\n      if (_pendingAdd[_i] > 0) {\\n        IFatAnimalNFT(fatNFT).safeTransferFrom(_msgSender(), address(this), _pendingAdd[_i]);\\n      }\\n    }\\n\\n    emit Sync(_msgSender(), _prevEP, _baseEP, _newEP, totalEp);\\n    emit UpdateAnimal(_msgSender(), _slot);\\n  }\\n\\n  function removeAllAnimal()\\n    external\\n    onlyEOA\\n    nonReentrant\\n  {\\n    UserInfo storage user = userInfo[_msgSender()];\\n    uint256[] memory _stack = _stackAnimal(user.slot);\\n    uint256 _prevEP;\\n    uint256 _newEP;\\n    uint256 _baseEP;\\n\\n    _harvest();\\n\\n    delete user.slot;\\n    user.lastActive = block.number;\\n    _prevEP = user.ep;\\n    (_baseEP, _newEP) = calculateEPByUser(_msgSender());\\n\\n    user.ep = _newEP;\\n    user.rewardDebt = user.ep.mul(accFatPerEp).div(1e12);\\n    totalEp = totalEp.sub(_prevEP).add(_newEP);\\n\\n    for (uint256 _i = 0; _i < 15; _i++) {\\n      if (_stack[_i] > 0) {\\n        IFatAnimalNFT(fatNFT).safeTransferFrom(address(this), _msgSender(), _stack[_i]);\\n      }\\n    }\\n\\n    emit Sync(_msgSender(), _prevEP, _baseEP, _newEP, totalEp);\\n    emit RemoveAllAnimal(_msgSender());\\n  }\\n\\n  function setFee(uint256 _fee)\\n    external\\n    onlyOwner\\n  {\\n    require(_fee >= 0, \\\"FatAnimalFarm: fee is too low\\\");\\n    require(_fee <= MAX_PLATFORM_FEE, \\\"FatAnimalFarm: fee is too high\\\");\\n    _platformFee = _fee;\\n    emit SetFee(_fee);\\n  }\\n\\n  function setCollector(address _feeTo)\\n    external\\n    onlyOwner\\n    validAddress(_feeTo)\\n  {\\n    _collector = _feeTo;\\n    emit SetCollector(_feeTo);\\n  }\\n\\n  function collectFee()\\n    external\\n    onlyCollector\\n  {\\n    _safeFatTransfer(_msgSender(), _accPlatformFee);\\n    emit CollectFee(_accPlatformFee);\\n\\n    _accPlatformFee = 0;\\n  }\\n\\n  function collector() external view returns (address) {\\n    return _collector;\\n  }\\n\\n  function accPlatformFee() external view returns (uint256) {\\n    return _accPlatformFee;\\n  }\\n\\n  function pendingFat(address _user) external view returns (uint256) {\\n    uint256 _deducted;\\n    uint256 _foodReward;\\n    uint256 _pending;\\n    uint256 _accFatPerEp = accFatPerEp;\\n    UserInfo memory user = userInfo[_user];\\n\\n    if (block.number > lastRewardBlock && totalEp != 0) {\\n      uint256 fatReward = IFatAnimalRewardDistributor(rewardDistributor).getPending(farmId);\\n      _accFatPerEp = _accFatPerEp.add(fatReward.mul(1e12).div(totalEp));\\n    }\\n\\n    if (user.ep > 0 || user.foodBonus > 0) {\\n      _pending = user.ep.mul(_accFatPerEp).div(1e12).sub(user.rewardDebt);\\n      _foodReward = _pending.mul(user.foodBonus).div(user.ep);\\n      if (user.foodExpiration < block.number && user.foodBonus > 0) {\\n        _deducted = _foodReward.mul(block.number.sub(user.foodExpiration)).div(block.number.sub(user.lastActive));\\n        user.foodBonus = 0;\\n        user.foodExpiration = 0;\\n        user.foodId = 0;\\n        if (_pending > _deducted) {\\n          _pending = _pending.sub(_deducted);\\n        }\\n      }\\n    }\\n\\n    _pending = _pending.add(user.rewarded);\\n\\n    return _pending.mul(1e5 - _platformFee).div(1e5);\\n  }\\n\\n  function getAccFatPerEp() external view returns (uint256) {\\n    return accFatPerEp;\\n  }\\n\\n  function getCurrentFood(address _user) external view returns (bool, uint256, uint256, uint256){\\n    bool _isActive;\\n    uint256 _bonus;\\n    uint256 _expiration;\\n    uint256 _id;\\n\\n    _isActive = userInfo[_user].foodExpiration > block.number;\\n    _bonus = userInfo[_user].foodBonus;\\n    _expiration = userInfo[_user].foodExpiration;\\n    _id = userInfo[_user].foodId;\\n    return (_isActive, _bonus, _expiration, _id);\\n  }\\n\\n  function getCurrentUserEP(address _user) external view returns (uint256) {\\n    uint256 _foodBonus;\\n    if (userInfo[_user].foodExpiration > block.number) {\\n      return userInfo[_user].ep;\\n    } else {\\n      if (userInfo[_user].foodBonus > 0) {\\n        _foodBonus = userInfo[_user].foodBonus;\\n      }\\n      return userInfo[_user].ep.sub(_foodBonus);\\n    }\\n  }\\n\\n  function getCurrentUserAnimal(address _user) external view returns (uint256[5][3] memory){\\n    return userInfo[_user].slot;\\n  }\\n\\n  function getFatAllocation() external view returns (uint256) {\\n    uint256 _currentSeason = IFatAnimalRewardDistributor(rewardDistributor).currentSeason();\\n    return IFatAnimalRewardDistributor(rewardDistributor).getSeason(_currentSeason, farmId);\\n  }\\n\\n  function getTotalEp() external view returns (uint256) {\\n    return totalEp;\\n  }\\n\\n  function calculateEPById(uint256[5][3] memory _animalId, uint256 _foodId) public view returns (uint256, uint256) {\\n    uint256[5][3] memory _EPDeck;\\n    uint256[5][3] memory _familyDeck;\\n    uint256[5][3] memory _elementDeck;\\n    uint256 _baseEP;\\n    uint256 _netEP;\\n    uint256 _element;\\n    uint256 _family;\\n    uint256 _eatingPower;\\n\\n    for (uint256 _i = 0; _i < 3; _i++) {\\n      for (uint256 _j = 0; _j < 5; _j++) {\\n        if (_animalId[_i][_j] > 0) {\\n          (, _element, _family, _eatingPower,) = IFatAnimalNFT(fatNFT).getAnimal(_animalId[_i][_j]);\\n          _EPDeck[_i][_j] = _eatingPower;\\n          _familyDeck[_i][_j] = _family + 1;\\n          _elementDeck[_i][_j] = _element + 1;\\n        }\\n      }\\n    }\\n    (_baseEP, _netEP) = IFatAnimalSaha(sahaLogic).getUserAnimalEP(_EPDeck, _familyDeck, _elementDeck, season);\\n\\n    if (_foodId > 0) {\\n      (, _eatingPower,) = IFatAnimalFood(fatFood).getFood(_foodId);\\n    } else {\\n      _eatingPower = 0;\\n    }\\n    return (_baseEP.add(_eatingPower), _netEP.add(_eatingPower));\\n  }\\n\\n  function calculateEPByUser(address _user) public view returns (uint256, uint256) {\\n    uint256 _foodId;\\n    UserInfo memory user = userInfo[_user];\\n    if (user.foodExpiration > block.number) {\\n      _foodId = user.foodId;\\n    }\\n    return calculateEPById(user.slot, _foodId);\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/aueiei/FatAnimal/nft-farm-contract-deployer/contracts/interfaces/IFatAnimalFood.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IFatAnimalFood {\\n  function generate(address _master, uint256 _duration, uint256 _eatingPower, uint256 _geneId) external;\\n\\n  function getFood(uint256 _id) external view returns (uint256, uint256, uint256);\\n\\n  function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"/Users/aueiei/FatAnimal/nft-farm-contract-deployer/contracts/interfaces/IFatAnimalNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IFatAnimalNFT {\\n  function generate(address _master, uint256 _adult, uint256 _element, uint256 _family, uint256 _eatingPower, uint256 _geneId) external;\\n\\n  function getAnimal(uint256 _geneId) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n  function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n\\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"/Users/aueiei/FatAnimal/nft-farm-contract-deployer/contracts/interfaces/IFatAnimalRewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IFatAnimalRewardDistributor {\\n  function distribute(uint256 _id) external returns (uint256);\\n\\n  function currentSeason() external view returns (uint256);\\n\\n  function getFarm(uint256 _id) external view returns (address);\\n\\n  function getPending(uint256 _id) external view returns (uint256);\\n\\n  function getSeason(uint256 _currentSeason, uint256 _season) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/aueiei/FatAnimal/nft-farm-contract-deployer/contracts/interfaces/IFatAnimalSaha.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\ninterface IFatAnimalSaha {\\n  function getUserAnimalEP(\\n    uint256[5][3] memory _baseEP,\\n    uint256[5][3] memory _family,\\n    uint256[5][3] memory _element,\\n    uint256 _season\\n  ) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers. \\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 888888\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fatNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fatFood\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sahaLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"name\":\"CollectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"foodId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"EatFood\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accFatPerEp\",\"type\":\"uint256\"}],\"name\":\"LogUpdateFarm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deducted\",\"type\":\"uint256\"}],\"name\":\"LogUpdateUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemoveAllAnimal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"SetCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevEP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBaseEP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentNetEP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEP\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[5][3]\",\"name\":\"slot\",\"type\":\"uint256[5][3]\"}],\"name\":\"UpdateAnimal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PLATFORM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accPlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5][3]\",\"name\":\"_slot\",\"type\":\"uint256[5][3]\"}],\"name\":\"addAnimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_foodId\",\"type\":\"uint256\"}],\"name\":\"addFood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5][3]\",\"name\":\"_animalId\",\"type\":\"uint256[5][3]\"},{\"internalType\":\"uint256\",\"name\":\"_foodId\",\"type\":\"uint256\"}],\"name\":\"calculateEPById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateEPByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fat\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fatFood\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fatNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccFatPerEp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentFood\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentUserAnimal\",\"outputs\":[{\"internalType\":\"uint256[5][3]\",\"name\":\"\",\"type\":\"uint256[5][3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCurrentUserEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFatAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingFat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllAnimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sahaLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foodBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foodExpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foodId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FatAnimalAutumnFarm", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "888888", "ConstructorArguments": "00000000000000000000000073280e2951785f17acc6cb2a1d0c4d65031d54b3000000000000000000000000cd7c842f4e2376da7b74143520c9616b00cb3cbd0000000000000000000000008b29cab7709c340702e32d2d89cf4c7a3384fa3b0000000000000000000000007e7784dc28ab3d24b4ba5794644ee9633b481744000000000000000000000000164c8ca767ca8167e3b073a8a98751352242da32000000000000000000000000b958f398a08f44a156b7c24acbefd66c1640acfe0000000000000000000000000000000000000000000000000000000000c4ac00", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}