{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// import \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n}\"},\"Obsidium.sol\":{\"content\":\"/*\\n* Contract written by @Anubis\\n* Tokenomics applicable with Selling tax 6%  - only applicable for 6 months (0% thereafter)\\n* 4.5% to liquidity pool | 1% to marketing wallet | 0.5% to \u2018buyback\u2019 wallet\\n* Name  - Obsidium | Symbol - OBS \\n* MAX Supply -  14,5 millions\\n* Anti-dump Max Sell no more than 1.05% of supply over 24 hours \u2013 only applicable for 6 months (0% thereafter)\\n*/\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\n\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\ncontract Obsidium is Context, IBEP20, Ownable {\\n  using SafeMath for uint256;\\n\\n  mapping (address =\\u003e uint256) private _balances;\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n  mapping(address =\\u003e bool) private _isExcludedFromFee; // wallets excluded from fee\\n  mapping (address =\\u003e uint256) private _tokenSold;\\n\\n  mapping (address =\\u003e uint256) private _startTime;\\n  mapping (address =\\u003e uint256) private _blockTime;\\n\\n  uint256 public _maxSoldAmount;\\n  uint256 private _totalSupply;\\n  uint8 private _decimals;\\n  string private _symbol;\\n  string private _name;  \\n  uint256 public _taxFee;\\n  uint256 public _minBalance;\\n\\n  address public uniswapV2Pair;\\n  address payable public _teamWallet;\\n  address payable public _buybackWallet;\\n\\n  bool public inSwap = false;\\n  bool public swapEnabled = true;\\n\\n  IUniswapV2Router02 public uniswapV2Router; // pancakeswap v2 router\\n\\n  modifier lockTheSwap {\\n    inSwap = true;\\n    _;\\n    inSwap = false;\\n  }\\n\\n  /**\\n   * @dev Initialize params for tokenomics\\n   */\\n\\n  constructor() {\\n    _name = unicode\\\"Obsidium\\\";\\n    _symbol = \\\"OBS\\\";\\n    _decimals = 18;\\n    _totalSupply = 14500000 * 10**18;\\n    _balances[msg.sender] = _totalSupply;    \\n    _taxFee = 600;\\n    _minBalance = 1 * 10**18;\\n    _maxSoldAmount = 10 * 14500000 * 10**18;\\n\\n    _teamWallet = payable(0xc005eF0Ebf220e3824a5739F5085885dC8A00115); \\n    _buybackWallet = payable(0x9418d04a2f6A89c2d6031b5C2E1D04cb26459349);\\n\\n    // BSC MainNet router\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n    uniswapV2Router = _uniswapV2Router;\\n\\n    // BSC MainNet router\\n    // 0x10ED43C718714eb63d5aA57B78B54704E256024E\\n\\n    // BSC TestNet router\\n    // 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\\n\\n    _isExcludedFromFee[owner()] = true;\\n    _isExcludedFromFee[address(this)] = true;\\n    _isExcludedFromFee[_teamWallet] = true;\\n    _isExcludedFromFee[_buybackWallet] = true;\\n\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\n  }\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n\\n  function getOwner() external override view returns (address) {\\n    return owner();\\n  }\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n\\n  function decimals() external override view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n\\n  function symbol() external override view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n  * @dev Returns the token name.\\n  */\\n\\n  function name() external override view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-totalSupply}.\\n   */\\n\\n  function totalSupply() external override view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-balanceOf}.\\n   */\\n\\n  //function balanceOf(address account) external override view returns (uint256) {\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function excludeFromFee(address account) public onlyOwner {\\n    _isExcludedFromFee[account] = true;\\n  }\\n  \\n  function includeInFee(address account) public onlyOwner {\\n    _isExcludedFromFee[account] = false;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-allowance}.\\n   */\\n\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {BEP20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n   \\n  function approve(address spender, uint256 amount) public override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {BEP20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {BEP20};\\n   *\\n   * Requirements:\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n   * `amount`.\\n   */\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {BEP20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {BEP20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n\\n  function _transfer(address from, address to, uint256 amount) internal {\\n\\n    require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\n    require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n    bool takeFee = true;\\n\\n    if (!inSwap \\u0026\\u0026 swapEnabled \\u0026\\u0026 to == uniswapV2Pair){      \\n      // limit max sold\\n      if(_tokenSold[from] == 0){\\n        _startTime[from] = block.timestamp;\\n      }\\n\\n      _tokenSold[from] = _tokenSold[from] + amount;\\n\\n      if( block.timestamp \\u003c _startTime[from] + (1 days)){\\n          require(_tokenSold[from] \\u003c= _maxSoldAmount, \\\"Sold amount exceeds the maxTxAmount.\\\");\\n      }else{\\n          _startTime[from] = block.timestamp;\\n          _tokenSold[from] = 0;\\n      }\\n\\n      // transfer tokens\\n      uint256 obsBalance = balanceOf(address(this));\\n      if(obsBalance \\u003e _minBalance){                    \\n        transferTokens(obsBalance);\\n      }\\n      \\n      if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n        takeFee = false;\\n      }\\n    } else {\\n      takeFee = false;\\n    }\\n\\n    _tokenTransfer(from, to, amount, takeFee);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.   \\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n\\n  function _approve(address owner, address spender, uint256 amount) internal {\\n    require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n    * @dev transfer tokens to liqudity, team wallet and buyback wallet.\\n   */\\n\\n  function transferTokens(uint256 tokenBalance) private lockTheSwap {\\n    uint256 liquidityTokens = tokenBalance.div(4); // 0.75%\\n    uint256 otherBNBTokens = tokenBalance - liquidityTokens; // 2.25%\\n\\n    uint256 initialBalance = address(this).balance;\\n    swapTokensForEth(otherBNBTokens);\\n\\n    uint256 newBalance = address(this).balance.sub(initialBalance);\\n    uint256 liquidityCapacity = newBalance.div(3);\\n    addLiqudity(liquidityTokens, liquidityCapacity);\\n\\n    uint256 teamCapacity = newBalance - liquidityCapacity;    \\n    uint256 teamBNB = teamCapacity.mul(2).div(3);\\n    _teamWallet.transfer(teamBNB);\\n\\n    uint256 buybackBNB = teamCapacity - teamBNB;\\n    _buybackWallet.transfer(buybackBNB);\\n  }\\n\\n  /**\\n    * @dev Swap tokens from obs to bnb\\n   */\\n\\n  function swapTokensForEth(uint256 tokenAmount) private{\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = uniswapV2Router.WETH();\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\\n  }\\n\\n  /**\\n    * @dev Add obs token and bnb as same ratio on pancakeswap router\\n   */\\n\\n  function addLiqudity(uint256 tokenAmount, uint256 ethAmount) private {\\n    // approve token transfer to cover all possible scenarios\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n    // add amount to contract\\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n        address(this),\\n        tokenAmount,\\n        0, // slippage is unavoidable\\n        0, // slippage is unavoidable\\n        owner(),\\n        block.timestamp\\n    );\\n  }\\n\\n  /**\\n    * @dev the Owner can swap regarding the obs token\\u0027s amount of contract balance\\n    * this is for manual function\\n   */\\n\\n  function contractBalanceSwap() external onlyOwner{\\n      uint256 contractBalance = balanceOf(address(this));\\n      swapTokensForEth(contractBalance);\\n  }\\n\\n  /**\\n    * @dev the Owner can send regarding the obs token\\u0027s amount of contract balance\\n    * this is for manual function\\n    * we need to remain 0.1BNB in contract balance for swap and transfer fees.\\n   */\\n\\n  function contractBalanceSend(uint256 amount, address payable _destAddr) external onlyOwner{\\n    uint256 contractETHBalance = address(this).balance - 1 * 10**17;\\n    if(contractETHBalance \\u003e amount){\\n      _destAddr.transfer(amount);\\n    }\\n  }\\n\\n  /**\\n    * @dev remove all fees\\n   */\\n\\n  function removeAllFee() private {\\n    if (_taxFee == 0) return;\\n    _taxFee = 0;\\n  }\\n\\n  /**\\n    * @dev set all fees\\n   */\\n\\n  function restoreAllFee() private {\\n    _taxFee = 600;\\n  }\\n\\n  /**\\n    * @dev transfer tokens with amount \\n   */\\n\\n  function _tokenTransfer(address sender, address recipient, uint256 amount, bool isTakeFee) private {\\n    if (!isTakeFee) removeAllFee();\\n    _transferStandard(sender, recipient, amount);\\n    if (!isTakeFee) restoreAllFee();\\n  }\\n\\n  function _transferStandard(address sender, address recipient, uint256 amount) private {    \\n    uint256 fee = amount.mul(_taxFee).div(10000); // for 3% fee\\n    //_beforeTokenTransfer(sender, recipient, amount);\\n\\n    uint256 senderBalance = _balances[sender];\\n    require(senderBalance \\u003e= amount, \\\"BEP20: transfer amount exceeds balance\\\");\\n    _balances[sender] = senderBalance - amount;\\n    uint256 amountnew = amount - fee;\\n    _balances[recipient] += (amountnew);\\n\\n    if (fee\\u003e0) {\\n      _balances[address(this)] += (fee);\\n      emit Transfer(sender, address(this), fee);\\n    }\\n\\n    emit Transfer(sender, recipient, amountnew);\\n  }\\n\\n  /**\\n    * @dev set Max sold amount\\n   */\\n\\n  function _setMaxSoldAmount(uint256 maxvalue) external onlyOwner {\\n      _maxSoldAmount = maxvalue;\\n  }\\n\\n  /**\\n    * @dev set min balance for transferring\\n   */\\n\\n  function _setMinBalance(uint256 minValue) external onlyOwner {\\n    _minBalance = minValue;\\n  }\\n\\n  /**\\n    * @dev determine whether we apply tax fee or not\\n   */\\n\\n  function _setApplyContractFee(bool isFee) external onlyOwner {\\n    if(isFee) {\\n        _taxFee = 600;\\n    } else {\\n        _taxFee = 0;\\n    }\\n  }\\n\\n  function _setTeamWalletAddress(address teamWalletAddr) external onlyOwner {\\n    _teamWallet = payable(teamWalletAddr);\\n  }\\n\\n  function _setBuybackWalletAddress(address buybackWalletAddr) external onlyOwner {\\n    _buybackWallet = payable(buybackWalletAddr);\\n  }\\n\\n  receive() external payable {}\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    address private _previousOwner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n    \\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buybackWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSoldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isFee\",\"type\":\"bool\"}],\"name\":\"_setApplyContractFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buybackWalletAddr\",\"type\":\"address\"}],\"name\":\"_setBuybackWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxvalue\",\"type\":\"uint256\"}],\"name\":\"_setMaxSoldAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"}],\"name\":\"_setMinBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWalletAddr\",\"type\":\"address\"}],\"name\":\"_setTeamWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_destAddr\",\"type\":\"address\"}],\"name\":\"contractBalanceSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalanceSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Obsidium", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://606233e9941647976ef0ecb1668a03d96dfd16306be0e5ba7789dcc96add86ad"}