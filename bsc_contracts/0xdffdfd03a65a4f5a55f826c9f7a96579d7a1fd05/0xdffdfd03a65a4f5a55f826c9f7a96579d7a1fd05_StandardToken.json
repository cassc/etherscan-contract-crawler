{"SourceCode": "{\"MUSToken.sol\":{\"content\":\"pragma solidity ^0.6.12;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\n\\r\\nabstract contract ERC20Interface {\\r\\n  function totalSupply() public virtual view returns (uint);\\r\\n  function balanceOf(address tokenOwner) public virtual view returns (uint balance);\\r\\n  function allowance(address tokenOwner, address spender) public virtual view returns (uint remaining);\\r\\n  function transfer(address to, uint tokens) public virtual returns (bool success);\\r\\n  function approve(address spender, uint tokens) public virtual returns (bool success);\\r\\n  function transferFrom(address from, address to, uint tokens) public virtual returns (bool success);\\r\\n\\r\\n  event Transfer(address indexed from, address indexed to, uint tokens);\\r\\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\r\\n}\\r\\n\\r\\nabstract contract ApproveAndCallFallBack {\\r\\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public virtual;\\r\\n}\\r\\n\\r\\ncontract Owned {\\r\\n  address public owner;\\r\\n  address public newOwner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed _from, address indexed _to);\\r\\n\\r\\n  constructor() public {\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner {\\r\\n    require(msg.sender == owner);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address _newOwner) public onlyOwner {\\r\\n    newOwner = _newOwner;\\r\\n  }\\r\\n  \\r\\n  function acceptOwnership() public {\\r\\n    require(msg.sender == newOwner);\\r\\n    emit OwnershipTransferred(owner, newOwner);\\r\\n    owner = newOwner;\\r\\n    newOwner = address(0);\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract Pausable is Owned {\\r\\n  event Pause();\\r\\n  event Unpause();\\r\\n\\r\\n  bool public paused = false;\\r\\n\\r\\n  modifier whenNotPaused() {\\r\\n    require(!paused);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier whenPaused() {\\r\\n    require(paused);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function pause() onlyOwner whenNotPaused public {\\r\\n    paused = true;\\r\\n    emit Pause();\\r\\n  }\\r\\n\\r\\n  function unpause() onlyOwner whenPaused public {\\r\\n    paused = false;\\r\\n    emit Unpause();\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract StandardToken is ERC20Interface, Owned, Pausable {\\r\\n  using SafeMath for uint;\\r\\n\\r\\n  string  public symbol;\\r\\n  string  public name;\\r\\n  bool    public is_mintable;\\r\\n  uint8   public decimals;\\r\\n  uint    public total_supply;\\r\\n  uint    public total_mint;\\r\\n  \\r\\n  // (!) input value below, precision follow \\\"decimals\\\"\\r\\n  uint    public rate_burn;     \\r\\n  uint    public rate_stakepool;     \\r\\n  uint    public rate_max_transfer;\\r\\n  \\r\\n  address public stake_pool;\\r\\n  \\r\\n  mapping(address =\\u003e uint) balances;\\r\\n  mapping(address =\\u003e mapping(address =\\u003e uint)) allowed;\\r\\n  mapping(address =\\u003e bool) public tax_list;\\r\\n  mapping(address =\\u003e bool) public antiWhale_list;\\r\\n  mapping(address =\\u003e bool) public minter_list;\\r\\n\\r\\n  event UpdateMintable(bool status);\\r\\n  event UpdateTaxAddress(address target_address, bool status);\\r\\n  event UpdateRateBurn(uint rate);\\r\\n  event UpdateRateStakePool(uint rate);\\r\\n  event UpdateRateMaxTransfer(uint rate);\\r\\n  event UpdateAntiWhaleList(address account, bool status);\\r\\n  event UpdateMinter(address minter, bool status);\\r\\n\\r\\n  constructor(\\r\\n      address _stake_pool,\\r\\n      uint    _rate_burn,\\r\\n      uint    _rate_stakepool\\r\\n  ) public {\\r\\n    symbol            = \\\"MUS\\\";\\r\\n    name              = \\\"MUS Token\\\";\\r\\n    decimals          = 18;\\r\\n    total_supply      = 10000000000 * 10**uint(decimals);\\r\\n    stake_pool        = _stake_pool;\\r\\n    rate_burn         = _rate_burn;\\r\\n    rate_stakepool    = _rate_stakepool;\\r\\n    rate_max_transfer = 1000000000000000000;\\r\\n    is_mintable       = true;\\r\\n\\r\\n    minter_list[msg.sender] = true;\\r\\n  }\\r\\n\\r\\n  modifier antiWhale(address from, address to, uint256 amount) {\\r\\n    if (maxTransferAmount() \\u003e 0) {\\r\\n      if (antiWhale_list[from] || antiWhale_list[to]) {\\r\\n        require(amount \\u003c= maxTransferAmount(), \\\"AntiWhale: Transfer amount exceeds the maxTransferAmount\\\");\\r\\n      }\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n  \\r\\n  modifier isMinter() {\\r\\n      require(minter_list[msg.sender], \\\"Not allowed to mint\\\");\\r\\n      _;\\r\\n  }\\r\\n\\r\\n  function totalSupply() public override view returns (uint) {\\r\\n    return total_supply.sub(balances[address(0)]);\\r\\n  }\\r\\n\\r\\n  function circulateSupply() public view returns (uint) {\\r\\n    return total_mint.sub(balances[address(0)]);\\r\\n  }\\r\\n\\r\\n  function balanceOf(address tokenOwner) public override view returns (uint balance) {\\r\\n    return balances[tokenOwner];\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint tokens) public whenNotPaused override returns (bool success) {\\r\\n    allowed[msg.sender][spender] = tokens;\\r\\n    emit Approval(msg.sender, spender, tokens);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transfer(address to, uint tokens) public whenNotPaused antiWhale(msg.sender, to, tokens) override returns (bool success) {\\r\\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\\r\\n    _transfer(msg.sender, to, tokens);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address from, address to, uint tokens) public whenNotPaused antiWhale(from, to, tokens) override returns (bool success) {\\r\\n    balances[from] = balances[from].sub(tokens);\\r\\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\\r\\n    _transfer(from, to, tokens);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _transfer(address from, address to, uint tokens) internal {\\r\\n    if (tax_list[from] || tax_list[to]) {\\r\\n        // send token to staking pool\\r\\n        uint amount_pool = tokens.mul(rate_stakepool, decimals);\\r\\n        if (amount_pool \\u003e 0) {\\r\\n            balances[stake_pool] = balances[stake_pool].add(amount_pool);\\r\\n            emit Transfer(from, stake_pool, amount_pool);\\r\\n        }\\r\\n        \\r\\n        // send token to burn\\r\\n        uint amount_burn = tokens.mul(rate_burn, decimals);\\r\\n        if (amount_burn \\u003e 0) {\\r\\n            balances[address(0)] = balances[address(0)].add(amount_burn);\\r\\n            emit Transfer(from, address(0), amount_burn);\\r\\n        }\\r\\n        \\r\\n        // send available token to receiver\\r\\n        uint amount = tokens.sub(amount_pool).sub(amount_burn);\\r\\n        if (amount \\u003e 0) {\\r\\n            balances[to] = balances[to].add(amount);\\r\\n            emit Transfer(from, to, amount);   \\r\\n        }\\r\\n    } else {\\r\\n        // send full amount to receiver\\r\\n        balances[to] = balances[to].add(tokens);\\r\\n        emit Transfer(from, to, tokens);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function allowance(address tokenOwner, address spender) public view override returns (uint remaining) {\\r\\n    return allowed[tokenOwner][spender];\\r\\n  }\\r\\n\\r\\n  function approveAndCall(address spender, uint tokens, bytes memory data) public whenNotPaused returns (bool success) {\\r\\n    allowed[msg.sender][spender] = tokens;\\r\\n    emit Approval(msg.sender, spender, tokens);\\r\\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function updateMinter(address minter, bool status) public onlyOwner {\\r\\n    minter_list[minter] = status;\\r\\n    emit UpdateMinter(minter, status);\\r\\n  }\\r\\n\\r\\n  function mint(address _address, uint amount) public isMinter {\\r\\n    _mint(_address, amount);\\r\\n  }\\r\\n\\r\\n  function _mint(address account, uint256 amount) internal {\\r\\n    require(account != address(0), \\\"mint to the zero address\\\");\\r\\n    require(is_mintable, \\\"not mintable\\\");\\r\\n    uint tmp_total = total_mint.add(amount);\\r\\n    require(tmp_total \\u003c= total_supply, \\\"total supply exceed\\\");\\r\\n\\r\\n    balances[account] = balances[account].add(amount);\\r\\n    total_mint = total_mint.add(amount);\\r\\n    emit Transfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\\r\\n    return ERC20Interface(tokenAddress).transfer(owner, tokens);\\r\\n  }\\r\\n\\r\\n  function maxTransferAmount() public view returns (uint) {\\r\\n    return circulateSupply().mul(rate_max_transfer, decimals);\\r\\n  }\\r\\n\\r\\n  function updateRateMaxTransfer(uint rate) public onlyOwner returns (bool) {\\r\\n    rate_max_transfer = rate;\\r\\n    emit UpdateRateMaxTransfer(rate_max_transfer);\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function updateMintable(bool status) public onlyOwner returns (bool) {\\r\\n    is_mintable = status;\\r\\n    emit UpdateMintable(status);\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function updateTaxAddress(address _address, bool status) public onlyOwner returns (bool) {\\r\\n    tax_list[_address] = status;\\r\\n    emit UpdateTaxAddress(_address, status);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function updateAntiWhaleList(address _address, bool status) public onlyOwner returns (bool) {\\r\\n    antiWhale_list[_address] = status;\\r\\n    emit UpdateAntiWhaleList(_address, status);\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function updateRateBurn(uint rate) public onlyOwner returns (bool) {\\r\\n    rate_burn = rate;\\r\\n    emit UpdateRateBurn(rate);\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  function updateRateStakePool(uint rate) public onlyOwner returns (bool) {\\r\\n    rate_stakepool = rate;\\r\\n    emit UpdateRateStakePool(rate);\\r\\n    return true;\\r\\n  }\\r\\n  \\r\\n  fallback() external payable {\\r\\n    revert();\\r\\n  }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.12;\\r\\n\\r\\n// ----------------------------------------------------------------------------\\r\\n// Safe maths\\r\\n// ----------------------------------------------------------------------------\\r\\nlibrary SafeMath {\\r\\n    function add(uint a, uint b) internal pure returns (uint c) {\\r\\n        c = a + b;\\r\\n        require(c \\u003e= a, \\u0027SafeMath:INVALID_ADD\\u0027);\\r\\n    }\\r\\n\\r\\n    function sub(uint a, uint b) internal pure returns (uint c) {\\r\\n        require(b \\u003c= a, \\u0027SafeMath:OVERFLOW_SUB\\u0027);\\r\\n        c = a - b;\\r\\n    }\\r\\n\\r\\n    function mul(uint a, uint b, uint decimal) internal pure returns (uint) {\\r\\n        uint dc = 10**decimal;\\r\\n        uint c0 = a * b;\\r\\n        require(a == 0 || c0 / a == b, \\\"SafeMath: multiple overflow\\\");\\r\\n        uint c1 = c0 + (dc / 2);\\r\\n        require(c1 \\u003e= c0, \\\"SafeMath: multiple overflow\\\");\\r\\n        uint c2 = c1 / dc;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, uint decimal) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint dc = 10**decimal;\\r\\n        uint c0 = a * dc;\\r\\n        require(a == 0 || c0 / a == dc, \\\"SafeMath: division internal\\\");\\r\\n        uint c1 = c0 + (b / 2);\\r\\n        require(c1 \\u003e= c0, \\\"SafeMath: division internal\\\");\\r\\n        uint c2 = c1 / b;\\r\\n        return c2;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stake_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate_stakepool\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateAntiWhaleList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateMintable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdateRateBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdateRateMaxTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UpdateRateStakePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateTaxAddress\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"antiWhale_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulateSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_mintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minter_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate_burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate_max_transfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate_stakepool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tax_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateAntiWhaleList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateRateBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateRateMaxTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"updateRateStakePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateTaxAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StandardToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000616e0c313ecb72f2e73bbee91939e37fea9b2cb400000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000470de4df820000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2d1b387fb00ff47bf5a26c69cb5f602eaa545067f1a806d85107d68356ec5974"}