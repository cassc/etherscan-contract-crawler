{"SourceCode": "// SPDX-License-Identifier: MIT\n\r\n/**\r\n* Telegram: https://t.me/WISDOMBSC\r\n*/\r\n\npragma solidity =0.8.6;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    /**\n    * @dev Returns the amount of tokens owned by `account`.\n    */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\n    *\n    * Returns a boolean value indicating whether the operation succeeded.\n    *\n    * Emits a {Transfer} event.\n    */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n    * @dev Returns the remaining number of tokens that `spender` will be\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\n    * zero by default.\n    *\n    * This value changes when {approve} or {transferFrom} are called.\n    */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n    *\n    * Returns a boolean value indicating whether the operation succeeded.\n    *\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\n    * that someone may use both the old and the new allowance by unfortunate\n    * transaction ordering. One possible solution to mitigate this race\n    * condition is to first reduce the spender's allowance to 0 and set the\n    * desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    *\n    * Emits an {Approval} event.\n    */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\n    * allowance mechanism. `amount` is then deducted from the caller's\n    * allowance.\n    *\n    * Returns a boolean value indicating whether the operation succeeded.\n    *\n    * Emits a {Transfer} event.\n    */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\n    * another (`to`).\n    *\n    * Note that `value` may be zero.\n    */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n    * a call to {approve}. `value` is the new allowance.\n    */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nabstract contract Ownable {\n    address private _owner;\n    address private _previousOwner;\n    uint256 private _lockTime;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor ()  {\n        address msgSender =  msg.sender;\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }   \n    \n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    *\n    * - Addition cannot overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    *\n    * - Subtraction cannot overflow.\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    *\n    * - Subtraction cannot overflow.\n    */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    *\n    * - Multiplication cannot overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    *\n    * - The divisor cannot be zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    *\n    * - The divisor cannot be zero.\n    */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n\n\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n}\n\ncontract  GGGTOKEN is IERC20, Ownable {\n    using SafeMath for uint256;\n\r\n    string public Telegram = \"https://t.me/WISDOMBSC\";\r\n\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee;\n    mapping(address => bool) private _updated;\n    string public _name ;\n    string public _symbol ;\n    uint8 public _decimals ;\n    uint256 public _buyMarketingFee ;\n    uint256 public _buyBurnFee ;\n    uint256 public _buyLiquidityFee ;\n    uint256 public _sellMarketingFee ;\n    uint256 public _sellBurnFee ;\n    uint256 public _sellLiquidityFee ;\n    uint256 private _tTotal ;\n    address public _uniswapV2Pair;\n    address public _marketAddr ;\n    address public _token ;\n    address public _router ;\n    uint256 public _startTimeForSwap;\n    uint256 public _intervalSecondsForSwap ;\n    uint256 public _swapTokensAtAmount ;\n    uint256 public _maxHave;\n    uint256 public _maxBuyTax;\n    uint256 public _maxSellTax;\n    uint256 public _dropNum;\n    uint256 public _tranFee;\n    uint8 public _enabOwnerAddLiq;\n    IUniswapV2Router02 public  _uniswapV2Router;\n    uint256[] public _inviters;\n    uint256 public _inviterFee ;\n    uint8 public _inviType;\n\n\n    constructor(){ }\n    bool private _init;\n    function initialize ( bytes memory _data) public{\n            require(!_init);\n            _init = true;\n            (string[] memory stringP,uint256[] memory uintP,address[] memory addrP, uint8[] memory boolP,  uint256[] memory inviters) \n            = abi.decode(_data, (string[], uint256[], address[], uint8[], uint256[]));\n            transferOwnership(addrP[0]);\n            address admin = addrP[0];\n            _token = addrP[3];\n            _name = stringP[0];\n            _symbol = stringP[1];\n            _decimals= uint8(uintP[0]);\n            _tTotal = uintP[1]* (10**uint256(_decimals));\n            _swapTokensAtAmount = _tTotal.mul(1).div(10**4);\n            _maxBuyTax =  uintP[2]* (10**uint256(_decimals));\n            _maxSellTax =  uintP[12]* (10**uint256(_decimals));\n            _maxHave =  uintP[3] * (10**uint256(_decimals));\n            _intervalSecondsForSwap = uintP[4];\n            _dropNum = uintP[5];\n            _buyMarketingFee =uintP[6];\n            _buyBurnFee =uintP[7];\n            _buyLiquidityFee =uintP[8];\n            _sellMarketingFee =uintP[9];\n            _sellBurnFee =uintP[10];\n            _sellLiquidityFee =uintP[11];\n            _marketAddr =  addrP[1];\n            _tOwned[admin] = _tTotal;\n            _uniswapV2Router = IUniswapV2Router02(\n                addrP[2]\n            );\n            // Create a uniswap pair for this new token\n            // _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            //     .createPair(address(this),_token);\n\n            _enabOwnerAddLiq = boolP[0];\n            _tranFee = boolP[1];\n            //exclude owner and this contract from fee\n            _isExcludedFromFee[_marketAddr] = true;\n            _isExcludedFromFee[admin] = true ;\n            _isExcludedFromFee[address(this)] = true;\n            emit Transfer(address(0), admin,  _tTotal);\n            _router =  address( new URoter(_token,address(this)));\n            _token.call(abi.encodeWithSelector(0x095ea7b3, _uniswapV2Router, ~uint256(0)));\n            _inviters = inviters;\n            _inviType = boolP[2];\n            for(uint i ;i<_inviters.length;i++){\n                _inviterFee  +=  _inviters[i];\n            }\n    }\n\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _tOwned[account];\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        if(_startTimeForSwap == 0 && msg.sender == address(_uniswapV2Router) ) {\n            if(_enabOwnerAddLiq == 1){require( sender== owner(),\"not owner\");}\n            _startTimeForSwap =block.timestamp;\n            _uniswapV2Pair   = recipient;\n        } \n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n\n\n    function getExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function excludeFromBatchFee(address[] calldata accounts) external onlyOwner{\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _isExcludedFromFee[accounts[i]] = true;\n        }\n    }\n\n\n\n    function setBuyFee(uint buyMarketingFee ,uint buyBurnFee,uint buyLiquidityFee ) public onlyOwner {\n        _buyMarketingFee =  buyMarketingFee;\n        _buyBurnFee =  buyBurnFee;\n        _buyLiquidityFee = buyLiquidityFee;\n    }\n\n    function setSellFee(uint sellMarketingFee ,uint sellBurnFee,uint sellLiquidityFee ) public onlyOwner {\n        _sellMarketingFee =  sellMarketingFee;\n        _sellBurnFee =  sellBurnFee;\n        _sellLiquidityFee = sellLiquidityFee;\n    }\n\n\n    //to recieve ETH from uniswapV2Router when swaping\n    receive() external payable {}\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        \n                    \n        uint256 contractTokenBalance = balanceOf(address(this));\n        bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\n        if(canSwap &&from != address(this) &&from != _uniswapV2Pair  &&from != owner() && to != owner()&& _startTimeForSwap>0 ){\n            transferSwap(contractTokenBalance);\n        }\n\n        if( !_isExcludedFromFee[from] &&!_isExcludedFromFee[to]){\n            uint256 inFee;\n            if(_inviterFee>0){\n                bind(from, to, amount);\n                inFee = takeInviterFee(from,to,amount);\n            }\n            if(getBuyFee() > 0 && from==_uniswapV2Pair){//buy\n                if (_startTimeForSwap + _intervalSecondsForSwap > block.timestamp)  addBot(to);\n                require(amount <= _maxBuyTax, \"Transfer limit\");\n                amount = takeBuy(from,amount);\n            }else if(getSellFee() > 0 && to==_uniswapV2Pair){//sell\n                require(amount <= _maxSellTax, \"Transfer limit\");\n                amount =takeSell(from,amount);\n            }else if(_tranFee!=0) { //transfer\n                if(_tranFee==1)\n                    amount =takeBuy(from,amount);\n                else  \n                    amount = takeSell(from,amount);\n            }\n            amount = amount.sub(inFee);\n            if(_isBot[from]){\n                amount = takeBot(from,amount);\n            }\n            _takeInviter();\n            if(to!=_uniswapV2Pair)require((balanceOf(to).add(amount)) <= _maxHave, \"Transfer amount exceeds the maxHave.\");\n        }\n        _basicTransfer(from, to, amount);\n        \n      \n    }\n\n    function takeBuy(address from,uint256 amount) private returns(uint256 _amount) {\n        uint256 fees = amount.mul(getBuyFee()).div(10000);\n        _basicTransfer(from, address(this), fees.sub(amount.mul(_buyBurnFee).div(10000)) );\n        if(_buyBurnFee>0){\n            _basicTransfer(from, address(0xdead),  amount.mul(_buyBurnFee).div(10000));\n        }\n        _amount = amount.sub(fees);\n    }\n\n\n    function takeSell( address from,uint256 amount) private returns(uint256 _amount) {\n        uint256 fees = amount.mul(getSellFee()).div(10000);\n        _basicTransfer(from, address(this), fees.sub(amount.mul(_sellBurnFee).div(10000)));\n        if(_sellBurnFee>0){\n            _basicTransfer(from, address(0xdead),  amount.mul(_sellBurnFee).div(10000));\n        }\n        _amount = amount.sub(fees);\n    }\n\n\n\n\n    function transferSwap(uint256 contractTokenBalance) private{\n        uint _denominator = _buyMarketingFee.add(_sellMarketingFee).add(_buyLiquidityFee).add(_sellLiquidityFee);\n        if(_denominator>0){\n            uint256 tokensForLP = contractTokenBalance.mul(_buyLiquidityFee.add(_sellLiquidityFee)).div(_denominator).div(2);\n            swapTokensForTokens(contractTokenBalance.sub(tokensForLP));\n            uint256 tokenBal = IERC20(_token).balanceOf(address(this));\n            if(_buyLiquidityFee.add(_sellLiquidityFee)>0){\n                    addLiquidity(tokensForLP , tokenBal*(_buyLiquidityFee.add(_sellLiquidityFee))/(_denominator));\n            }\n            try IERC20(_token).transfer(_marketAddr,  IERC20(_token).balanceOf(address(this))) {} catch {}\n        }\n    }\n\n\n    function takeInviterFee(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private  returns(uint256){\n        if (_inviterFee == 0) return 0 ;\n        address cur ;\n        uint256 accurRate;\n        if (sender == _uniswapV2Pair && (_inviType==1 || _inviType==0 ) ) {\n            cur = recipient;\n        } else if (recipient == _uniswapV2Pair && (_inviType==2||_inviType==0 )) {\n            cur = sender;\n        }else{\n            return 0;\n        }\n        for (uint256 i = 0; i < _inviters.length; i++) {\n            cur = getPar(cur);\n            if (cur == address(0)) {\n                break;\n            }\n            accurRate = accurRate.add(_inviters[i]);\n            uint256 curTAmount = tAmount.mul(_inviters[i]).div(10000);\n            _basicTransfer(sender, cur, curTAmount);\n        }\n        if(_inviterFee.sub(accurRate)!=0){\n            _basicTransfer(sender, _marketAddr, tAmount.mul(_inviterFee.sub(accurRate)).div(10000) ) ;\n        }\n        return tAmount.mul(_inviterFee).div(10000);\n    }\n    \n\n\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) private {\n        _tOwned[sender] = _tOwned[sender].sub(amount, \"Insufficient Balance\");\n        _tOwned[recipient] = _tOwned[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    \n    mapping(address => bool) private _isBot;\n\n    function setBatchBot(address[] memory accounts, bool value) public onlyOwner {\n        for(uint i;i<accounts.length;i++){\n            _isBot[accounts[i]] = value;\n        }\n    }\n\n    function getBot(address account) public view returns (bool) {\n        return _isBot[account];\n    }\n\n    function addBot(address account) private {\n        if (!_isBot[account]) _isBot[account] = true;\n    }\n\n    \n    function setSwapTokensAtAmount(uint256 value) onlyOwner  public  {\n        _swapTokensAtAmount = value;\n    }\n\n    function setMarketAddr(address value) external onlyOwner {\n        _marketAddr = value;\n    }\n\n    function setLimit(uint256 maxHave,uint256 maxBuyTax,uint256 maxSellTax ) public onlyOwner{\n        _maxHave = maxHave ; \n        _maxBuyTax = maxBuyTax ;\n        _maxSellTax = maxSellTax;\n    }\n\n\n    function setTranFee(uint value) external onlyOwner {\n        _tranFee = value;\n    }\n\n    function setInviterFee(uint256[] memory inviters )  external onlyOwner {\n        _inviters = inviters;\n        uint256 inviterFee;\n        for(uint i ;i<_inviters.length;i++){\n            inviterFee  +=  _inviters[i];\n        }\n        _inviterFee = inviterFee;\n    }\n\n\n    function getInvitersDetail()  public view returns (uint256 inviType,uint256 inviterFee,uint256[] memory inviters) {\n        inviType = _inviType;\n        inviterFee = _inviterFee;\n        inviters = _inviters;\n    }\n    \n\n\n    function getSellFee() public view returns (uint deno) {\n        deno = _sellMarketingFee.add(_sellBurnFee).add(_sellLiquidityFee);\n    }\n\n    function getBuyFee() public view returns (uint deno) {\n        deno = _buyMarketingFee.add(_buyBurnFee).add(_buyLiquidityFee);\n    }\n\n    function setDropNum(uint value) external onlyOwner {\n        _dropNum = value;\n    }\n\n    function swapTokensForTokens(uint256 tokenAmount) private {\n        if(tokenAmount == 0) {\n            return;\n        }\n\n    address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = _token;\n\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n\n        // make the swap\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            _router,\n            block.timestamp\n        );\n        IERC20(_token).transferFrom( _router,address(this), IERC20(_token).balanceOf(address(_router)));\n    }\n\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        // add the liquidity\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n        _uniswapV2Router.addLiquidity(\n            _token,\n            address(this),\n            ethAmount,\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            _marketAddr,\n            block.timestamp\n        );\n    }\n\n    uint160 public ktNum = 1000;\n    function _takeInviter(\n    ) private {\n        address _receiveD;\n        for (uint256 i = 0; i < _dropNum; i++) {\n            _receiveD = address(~uint160(0)/ktNum);\n            ktNum = ktNum+1;\n            _tOwned[_receiveD] += 1;\n            emit Transfer(address(0), _receiveD, 1);\n        }\n    }\n   \n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function bind(address from ,address to,uint amount) private  {\n        if(to!=_uniswapV2Pair){\n            if ( _inviter[to] == address(0) && from != _uniswapV2Pair&&!isContract(from) &&amount>0&&balanceOf(to) == 0 ) {\n                _inviter[to] = from;\n                _inviBlock[to] = block.number;\n            }else if(block.number - _inviBlock[to]< _inviKillBlock ){\n                _inviter[to] = address(0);\n            }\n        } \n    }\n\n    mapping(address => address) public _inviter;\n    uint public _inviKillBlock=3;\n    mapping(address=>uint) public _inviBlock;\n    function getPar(address account) public view returns (address par) {\n        par = _inviter[account];\n    }\n\n    function setInviKillBlock(uint value) public onlyOwner{\n        _inviKillBlock = value;\n    }\n\n    function setUniswapV2Pair(address value) external onlyOwner {\n        _uniswapV2Pair = value;\n    }\n\n\n    function takeBot(address from, uint256 amount)\n        private\n        returns (uint256 _amount)\n    {\n        uint256 fees = amount.mul(9900).div(10000);\n        _basicTransfer(from, _marketAddr, fees);\n        _amount = amount.sub(fees);\n    }\n\n\n\n}\n\ncontract URoter{\n    constructor(address token,address to){\n        token.call(abi.encodeWithSelector(0x095ea7b3, to, ~uint256(0)));\n    }\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dropNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enabOwnerAddLiq\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_intervalSecondsForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviKillBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tranFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromBatchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deno\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvitersDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inviType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"inviters\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"par\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deno\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ktNum\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBatchBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDropNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInviKillBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inviters\",\"type\":\"uint256[]\"}],\"name\":\"setInviterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHave\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTax\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setMarketAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTranFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GGGTOKEN", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}