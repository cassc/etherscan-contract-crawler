{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/*\r\n ____        __                 __                  __                  ___        __                    \r\n/\\  _`\\     /\\ \\__             /\\ \\                /\\ \\                /\\_ \\      /\\ \\                   \r\n\\ \\,\\L\\_\\   \\ \\ ,_\\     __     \\ \\ \\/'\\       __   \\ \\ \\___      ___   \\//\\ \\     \\_\\ \\      __    _ __  \r\n \\/_\\__ \\    \\ \\ \\/   /'__`\\    \\ \\ , <     /'__`\\  \\ \\  _ `\\   / __`\\   \\ \\ \\    /'_` \\   /'__`\\ /\\`'__\\\r\n   /\\ \\L\\ \\   \\ \\ \\_ /\\ \\L\\.\\_   \\ \\ \\\\`\\  /\\  __/   \\ \\ \\ \\ \\ /\\ \\L\\ \\   \\_\\ \\_ /\\ \\L\\ \\ /\\  __/ \\ \\ \\/ \r\n   \\ `\\____\\   \\ \\__\\\\ \\__/.\\_\\   \\ \\_\\ \\_\\\\ \\____\\   \\ \\_\\ \\_\\\\ \\____/   /\\____\\\\ \\___,_\\\\ \\____\\ \\ \\_\\ \r\n    \\/_____/    \\/__/ \\/__/\\/_/    \\/_/\\/_/ \\/____/    \\/_/\\/_/ \\/___/    \\/____/ \\/__,_ / \\/____/  \\/_/ \r\n ______    ____       ______      __  __      __  __     \r\n/\\__  _\\  /\\  _`\\    /\\  _  \\    /\\ \\/\\ \\    /\\ \\/\\ \\    \r\n\\/_/\\ \\/  \\ \\ \\L\\ \\  \\ \\ \\L\\ \\   \\ \\ `\\\\ \\   \\ \\ \\/'/'   \r\n   \\ \\ \\   \\ \\  _ <'  \\ \\  __ \\   \\ \\ , ` \\   \\ \\ , <    \r\n    \\ \\ \\   \\ \\ \\L\\ \\  \\ \\ \\/\\ \\   \\ \\ \\`\\ \\   \\ \\ \\\\`\\  \r\n     \\ \\_\\   \\ \\____/   \\ \\_\\ \\_\\   \\ \\_\\ \\_\\   \\ \\_\\ \\_\\\r\n      \\/_/    \\/___/     \\/_/\\/_/    \\/_/\\/_/    \\/_/\\/_/\r\n      @tokenbank.exchange Stakeholder to Defi Games NFTs and Web3 Development Platform \r\n      \r\n   /\\   /\\   \r\n  //\\\\_//\\\\     ____      \ud83e\udd8a\u2705 % = amount in the draw in NFT Mistery Box\r\n  \\_     _/    /   /      \ud83e\udd8a\u2705 5 stars = 10% legendary   5x gain \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\r\n   / * * \\    /^^^]       \ud83e\udd8a\u2705 4 stars = 15% super rare  4x gain \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\r\n   \\_\\O/_/    [   ]       \ud83e\udd8a\u2705 3 stars = 20% rare        3x gain \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\r\n    /   \\_    [   /       \ud83e\udd8a\u2705 2 stars = 25% uncommon    2x gain \ud83c\udf1f\ud83c\udf1f\r\n    \\     \\_  /  /        \ud83e\udd8a\u2705 1 stars = 30% common      1x gain \ud83c\udf1f\r\n     [ [ /  \\/ _/         \ud83e\udd8a\u2705 nft.tokenbank.exchange  \r\n    _[ [ \\  /_/      \r\n*/\r\n\r\ninterface NFTTOKEN { \r\n  function getRateItem(uint256 itemId) external returns (uint256); \r\n  function setApprovalForAll(address operator, bool approved) external;\r\n}\r\ninterface IERC721 { function transferFrom(address from, address to, uint256 tokenId) external; }\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function getOwner() external view returns (address);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n  address public _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor ()  {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  function ownerAddress() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract Authorized is Ownable {\r\n  mapping(uint8 => mapping(address => bool)) public permissions;\r\n  string[] public permissionIndex;\r\n\r\n  constructor() {\r\n    permissionIndex.push(\"admin\");\r\n    permissionIndex.push(\"financial\");\r\n    permissionIndex.push(\"controller\");\r\n    permissionIndex.push(\"operator\");\r\n\r\n    permissions[0][_msgSender()] = true;\r\n  }\r\n\r\n  modifier isAuthorized(uint8 index) {\r\n    if (!permissions[index][_msgSender()]) {\r\n      revert(string(abi.encodePacked(\"Account \",Strings.toHexString(uint160(_msgSender()), 20),\" does not have \", permissionIndex[index], \" permission\")));\r\n    }\r\n    _;\r\n  }\r\n\r\n  function safeApprove(address token, address spender, uint256 amount) external isAuthorized(0) {\r\n    IERC20(token).approve(spender, amount);\r\n  }\r\n\r\n  function safeWithdraw() external isAuthorized(0) {\r\n    uint256 contractBalance = address(this).balance;\r\n    payable(_msgSender()).transfer(contractBalance);\r\n  }\r\n\r\n  function grantPermission(address operator, uint8[] memory grantedPermissions) external isAuthorized(0) {\r\n    for (uint8 i = 0; i < grantedPermissions.length; i++) permissions[grantedPermissions[i]][operator] = true;\r\n  }\r\n\r\n  function revokePermission(address operator, uint8[] memory revokedPermissions) external isAuthorized(0) {\r\n    for (uint8 i = 0; i < revokedPermissions.length; i++) permissions[revokedPermissions[i]][operator]  = false;\r\n  }\r\n\r\n  function grantAllPermissions(address operator) external isAuthorized(0) {\r\n    for (uint8 i = 0; i < permissionIndex.length; i++) permissions[i][operator]  = true;\r\n  }\r\n\r\n  function revokeAllPermissions(address operator) external isAuthorized(0) {\r\n    for (uint8 i = 0; i < permissionIndex.length; i++) permissions[i][operator]  = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n/*\r\n                                        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \r\n                                  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588    \r\n                              \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              \u2588\u2588    \r\n                          \u2588\u2588\u2588\u2588\u2588\u2588                  \u2588\u2588\u2588\u2588    \r\n                        \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588          \u2588\u2588      \r\n                      \u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588      \r\n                    \u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588      \r\n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588        \r\n        \u2588\u2588\u2588\u2588    \u2592\u2592\u2588\u2588              \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588        \r\n        \u2588\u2588    \u2592\u2592\u2588\u2588                  \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588          \r\n      \u2588\u2588\u2588\u2588  \u2592\u2592\u2588\u2588          \u2588\u2588\u2588\u2588            \u2588\u2588\u2588\u2588            \r\n      \u2588\u2588\u2592\u2592  \u2592\u2592\u2588\u2588        \u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588          \u2588\u2588\u2588\u2588            \r\n    \u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2588\u2588        \u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2592\u2592        \u2588\u2588\u2588\u2588              \r\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2592\u2592        \u2588\u2588\u2588\u2588                \r\n            \u2591\u2591    \u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2592\u2592        \u2588\u2588\u2588\u2588                  \r\n      \u2591\u2591\u2591\u2591        \u2588\u2588\u2592\u2592\u2588\u2588\u2592\u2592        \u2588\u2588\u2588\u2588                    \r\n    \u2592\u2592\u2592\u2592\u2591\u2591        \u2592\u2592\u2588\u2588\u2592\u2592        \u2588\u2588\u2592\u2592\u2588\u2588                    \r\n  \u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591                \u2588\u2588\u2588\u2588  \u2592\u2592\u2588\u2588                    \r\n        \u2592\u2592\u2591\u2591          \u2591\u2591\u2588\u2588\u2588\u2588\u2592\u2592    \u2592\u2592\u2588\u2588                    \r\n      \u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591    \u2591\u2591  \u2592\u2592\u2588\u2588\u2592\u2592      \u2592\u2592\u2588\u2588                    \r\n    \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2592\u2592\u2591\u2591  \u2592\u2592\u2588\u2588\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588                      \r\n  \u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                          \r\n  \u2592\u2592      \u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2592\u2592\u2591\u2591  \u2588\u2588\u2588\u2588                              \r\n        \u2592\u2592\u2592\u2592\u2592\u2592  \u2592\u2592\u2592\u2592                                      \r\n        \u2592\u2592\u2591\u2591    \u2592\u2592\u2591\u2591                                      \r\n*/\r\ncontract StakeHolderTBANK is ReentrancyGuard, Ownable, Authorized {\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public immutable _Tbank;\r\n  address public immutable _Busd;\r\n  address public _NftToken;\r\n  \r\n\r\n  uint256 public _totalPoolNft;\r\n  uint256 public _totalPoolNftUnic;\r\n  uint256 public _totalPool;\r\n  uint256 public _totalPayedTBANK;\r\n  uint256 public _totalPayedBUSD;\r\n\r\n  uint256 public _stakerPOTTbank;\r\n  uint256 public _stakerPOTBusd;\r\n  uint256 public _stakeDays = 30;\r\n\r\n  uint256 public _minimumToDepositStake;\r\n\r\n  struct StakeContract {\r\n    uint256   balance;      //owner TBANK send\r\n    uint256   endLock;      //30 60 90 \r\n    uint256   tbankPays;    //ballance TBANK to claim \r\n    uint256   busdPays;     //ballance BUSD to claim \r\n    uint256   nftRate;     //ballance BUSD to claim \r\n    bool      inGame;\r\n  }\r\n  mapping(address => StakeContract) public _pool;\r\n  address[] internal _wallets;\r\n\r\n  struct boxRate {\r\n    uint256 itemId;\r\n    address owner;\r\n    bool inStake;\r\n    uint256 removeId;\r\n  }\r\n  boxRate[] public _rates;\r\n  \r\n\r\n  //start\r\n  constructor() {\r\n    _Busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    _Tbank = 0x833b5Cb9A2Cffb1587BbefE53A451D0989FBA714;\r\n    _NftToken = address(this);\r\n    _minimumToDepositStake = 10000; // units\r\n  //_Tbank = 0x833b5Cb9A2Cffb1587BbefE53A451D0989FBA714;\r\n  }\r\n  \r\n  //receiver\r\n  receive() external payable {}\r\n\r\n\r\n\r\n\r\n  function getNFTsInStake() public view returns (boxRate[] memory) {\r\n    uint totalItemCount = _totalPoolNftUnic;\r\n    uint256 currentIndex = 0;\r\n\r\n    uint totalItemCountNew;\r\n\r\n    for (uint i = 0; i < totalItemCount; i++) {\r\n      if (_rates[i].inStake) {\r\n      totalItemCountNew +=1;\r\n      }\r\n    }\r\n\r\n    boxRate[] memory items = new boxRate[](totalItemCountNew);\r\n    for (uint i = 0; i < totalItemCount; i++) {\r\n      if (_rates[i].inStake) {\r\n      items[currentIndex] = _rates[i];\r\n      currentIndex += 1;\r\n      }\r\n    }\r\n  return items;\r\n  }\r\n\r\n\r\n\r\n  //Stakeholder sending TBANK MINIMUN 10.000 TBANK\r\n  function sendToStake(uint amount) external nonReentrant {\r\n    \r\n    require (amount >= _minimumToDepositStake * (10**18),\"Minimun amount to Stake not valid.\");\r\n    IERC20(_Tbank).transferFrom(msg.sender, address(this), amount);\r\n\r\n    uint preBalance = _pool[msg.sender].balance;\r\n    uint preEndLock = _pool[msg.sender].endLock;\r\n    uint preTbankpays = _pool[msg.sender].tbankPays;\r\n    uint preBusdPays = _pool[msg.sender].busdPays;\r\n    uint preNftRate = _pool[msg.sender].nftRate;\r\n    bool inGame = _pool[msg.sender].inGame;\r\n\r\n      if (!inGame) {\r\n        inGame = true;\r\n        _wallets.push(msg.sender);\r\n      }\r\n      \r\n      //new deposit 30 days locked\r\n      if (_stakeDays == 30) preEndLock = block.timestamp + 30 days;\r\n      if (_stakeDays == 60) preEndLock = block.timestamp + 60 days;\r\n      if (_stakeDays == 90) preEndLock = block.timestamp + 90 days;\r\n\r\n      _totalPool = _totalPool.add(amount);\r\n\r\n      _pool[msg.sender] = StakeContract (\r\n        preBalance.add(amount),\r\n        preEndLock,\r\n        preTbankpays,\r\n        preBusdPays,\r\n        preNftRate,\r\n        inGame\r\n      );\r\n\r\n  }\r\n\r\n  //Stakeholder sending TBANK MINIMUN 10.000 TBANK\r\n  function rescueStake(uint amount) external nonReentrant {\r\n    \r\n    require (amount >= _minimumToDepositStake * (10**18),\"Minimun rescue amount not valid.\");\r\n    bool inGame = _pool[msg.sender].inGame;\r\n    require (inGame, \"You are not holder\");\r\n    uint preBalance = _pool[msg.sender].balance;\r\n    require (preBalance >= _minimumToDepositStake * (10**18),\"Minimun rescue amount not valid.\");\r\n    uint preEndLock = _pool[msg.sender].endLock;\r\n    require(preEndLock < block.timestamp, '30 days locked');\r\n\r\n    uint preNftRate = _pool[msg.sender].nftRate;\r\n    uint preTbankpays = _pool[msg.sender].tbankPays;\r\n    uint preBusdPays = _pool[msg.sender].busdPays;\r\n\r\n      _totalPool = _totalPool.sub(amount);\r\n\r\n      _pool[msg.sender] = StakeContract (\r\n        preBalance.sub(amount),\r\n        preEndLock,\r\n        preTbankpays,\r\n        preBusdPays,\r\n        preNftRate,\r\n        inGame\r\n      );\r\n\r\n      IERC20(_Tbank).transfer(msg.sender, amount);\r\n  }\r\n\r\n\r\n\r\n    function sendNFTToStake(uint256 tokenId) public nonReentrant {\r\n\r\n    IERC721(_NftToken).transferFrom(msg.sender, address(this), tokenId);\r\n\r\n    _totalPoolNftUnic = _totalPoolNftUnic.add(1);\r\n    _rates.push(boxRate(tokenId,msg.sender,true,_totalPoolNftUnic));\r\n\r\n    \r\n    uint preBalance = _pool[msg.sender].balance;\r\n    uint preEndLock = _pool[msg.sender].endLock;\r\n    uint preTbankpays = _pool[msg.sender].tbankPays;\r\n    uint preBusdPays = _pool[msg.sender].busdPays;\r\n    uint preNftRate = _pool[msg.sender].nftRate;\r\n    bool inGame = _pool[msg.sender].inGame;\r\n\r\n    uint nftStars;\r\n    uint nftRary = NFTTOKEN(_NftToken).getRateItem(tokenId);\r\n    if (nftRary<=10) nftStars = 5;                  //5x gain \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\r\n    if (nftRary>10 && nftRary<=15) nftStars = 4;    //4x gain \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\r\n    if (nftRary>15 && nftRary<=20) nftStars = 3;    //3x gain \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\r\n    if (nftRary>20 && nftRary<=25) nftStars = 2;    //2x gain \ud83c\udf1f\ud83c\udf1f\r\n    if (nftRary>25) nftStars = 1;                   //1x gain \ud83c\udf1f\r\n\r\n\r\n      if (!inGame) {\r\n        inGame = true;\r\n        _wallets.push(msg.sender);\r\n      }\r\n      \r\n      //new deposit 30 days\r\n      if (_stakeDays == 30) preEndLock = block.timestamp + 30 days;\r\n      if (_stakeDays == 60) preEndLock = block.timestamp + 60 days;\r\n      if (_stakeDays == 90) preEndLock = block.timestamp + 90 days;\r\n\r\n      _totalPoolNft = _totalPoolNft.add(nftStars);\r\n\r\n      _pool[msg.sender] = StakeContract (\r\n        preBalance,\r\n        preEndLock,\r\n        preTbankpays,\r\n        preBusdPays,\r\n        preNftRate.add(nftStars),\r\n        inGame\r\n      );\r\n\r\n  }\r\n\r\n  //Stakeholder sending TBANK MINIMUN 10.000 TBANK\r\n  function rescueNFTStake(uint256 tokenIdBox) public nonReentrant {\r\n\r\n    uint tokenId = _rates[tokenIdBox].itemId;\r\n    require (_rates[tokenIdBox].owner == msg.sender, \"You are not NFT owner X\");\r\n\r\n    bool inGame = _pool[msg.sender].inGame;\r\n    require (inGame, \"You are not holder\");\r\n    uint preEndLock = _pool[msg.sender].endLock;\r\n    require(preEndLock < block.timestamp, 'too early');\r\n\r\n    uint preBalance = _pool[msg.sender].balance;\r\n    uint preNftRate = _pool[msg.sender].nftRate;\r\n    uint preTbankpays = _pool[msg.sender].tbankPays;\r\n    uint preBusdPays = _pool[msg.sender].busdPays;\r\n\r\n    uint nftStars;\r\n    uint nftRary = NFTTOKEN(_NftToken).getRateItem(tokenId);\r\n    if (nftRary<=10) nftStars = 5;                  //5x gain \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\r\n    if (nftRary>10 && nftRary<=15) nftStars = 4;    //4x gain \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\r\n    if (nftRary>15 && nftRary<=20) nftStars = 3;    //3x gain \ud83c\udf1f\ud83c\udf1f\ud83c\udf1f\r\n    if (nftRary>20 && nftRary<=25) nftStars = 2;    //2x gain \ud83c\udf1f\ud83c\udf1f\r\n    if (nftRary>25) nftStars = 1;                   //1x gain \ud83c\udf1f\r\n\r\n      _totalPoolNft = _totalPoolNft.sub(nftStars);\r\n\r\n      _pool[msg.sender] = StakeContract (\r\n        preBalance,\r\n        preEndLock,\r\n        preTbankpays,\r\n        preBusdPays,\r\n        preNftRate.sub(nftStars),\r\n        inGame\r\n      );\r\n\r\n    _rates[tokenIdBox].inStake = false;\r\n    \r\n\r\n    IERC721(_NftToken).transferFrom(address(this), msg.sender, tokenId);\r\n    // wrong IERC721(_NftToken).transfer(msg.sender, tokenId);\r\n\r\n  }\r\n\r\n\r\n\r\n  function depositPot(uint amount, uint256 whatToken) external nonReentrant {\r\n\r\n    require(whatToken == 1 || whatToken == 2,\"Error 1 tbank or 2 busd\");\r\n    \r\n    if (whatToken == 1) {\r\n    IERC20(_Tbank).transferFrom(msg.sender, address(this), amount);\r\n    _stakerPOTTbank = _stakerPOTTbank.add(amount);\r\n    }\r\n\r\n    if (whatToken == 2) {\r\n    IERC20(_Busd).transferFrom(msg.sender, address(this), amount);\r\n    _stakerPOTBusd = _stakerPOTBusd.add(amount);\r\n    }    \r\n\r\n  }\r\n\r\n  function distributeRewards(uint256 whatToken) external isAuthorized(0) nonReentrant {\r\n\r\n    require(whatToken == 1 || whatToken == 2,\"Error 1 tbank or 2 busd\");\r\n\r\n    uint totalToDistribute;\r\n\r\n    if (whatToken == 1) {\r\n     _totalPayedTBANK = _totalPayedTBANK.add(_stakerPOTTbank);\r\n     totalToDistribute = _stakerPOTTbank;\r\n     _stakerPOTTbank = 0; // ZERANDO POTE\r\n    }\r\n\r\n    if (whatToken == 2) {\r\n     _totalPayedBUSD = _totalPayedBUSD.add(_stakerPOTBusd);\r\n     totalToDistribute = _stakerPOTBusd;\r\n     _stakerPOTBusd = 0; //ZERANDO POTE\r\n    }\r\n\r\n    require (totalToDistribute > 100 * (10**18),\"very low distribution\");\r\n\r\n    //60% holoders 40% nftsholders\r\n    totalToDistribute = totalToDistribute.div(100); // 1% cote\r\n\r\n    uint totalToDistributeStake = totalToDistribute.mul(60); // 60% \r\n    uint totalToDistributeStakeNFT = totalToDistribute.mul(40); // 40% \r\n\r\n    //Holders 2\r\n    uint holdsTotalNFT = _totalPoolNft; //hash power em stake ex 5 10 15 20\r\n    uint holdsTotalPool = _totalPool; \r\n    holdsTotalPool = holdsTotalPool.div(10**18); \r\n\r\n    uint fractionStake = totalToDistributeStake.div(holdsTotalPool);\r\n    uint fractionStakeNFT = totalToDistributeStakeNFT.div(holdsTotalNFT);\r\n\r\n    uint amountCoins;\r\n    uint amountCoinsExt;\r\n    \r\n          for(uint256 i; i < _wallets.length; i++){\r\n              if(_pool[_wallets[i]].balance >= _minimumToDepositStake * (10**18)) {\r\n\r\n                  //stakeholders\r\n                  amountCoins = _pool[_wallets[i]].balance;\r\n                  amountCoins = amountCoins.div(10**18);\r\n                  amountCoins = amountCoins.mul(fractionStake);\r\n\r\n                  //nftholders\r\n                  amountCoinsExt = _pool[_wallets[i]].nftRate; \r\n                  amountCoinsExt = amountCoinsExt.mul(fractionStakeNFT);\r\n\r\n                  amountCoins = amountCoins.add(amountCoinsExt);\r\n                  if (whatToken == 1) _pool[_wallets[i]].tbankPays = _pool[_wallets[i]].tbankPays.add(amountCoins);\r\n                  if (whatToken == 2) _pool[_wallets[i]].busdPays = _pool[_wallets[i]].busdPays.add(amountCoins);\r\n              }\r\n            }\r\n\r\n  }\r\n\r\n\r\n  function claimRewards(uint256 whatToken) external nonReentrant {\r\n\r\n    uint256 sendAmount;\r\n\r\n      if (whatToken == 1 && _pool[msg.sender].tbankPays > 0 ) {\r\n         sendAmount = _pool[msg.sender].tbankPays;\r\n        _pool[msg.sender].tbankPays = 0;\r\n        IERC20(_Tbank).transfer(msg.sender, sendAmount);\r\n        sendAmount = 0;\r\n      }\r\n\r\n      if (whatToken == 2 && _pool[msg.sender].busdPays > 0 ) {\r\n         sendAmount = _pool[msg.sender].busdPays;\r\n        _pool[msg.sender].busdPays = 0;\r\n        IERC20(_Busd).transfer(msg.sender, sendAmount);\r\n        sendAmount = 0;\r\n      }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  function getPool (address holder) public view returns (StakeContract memory) { return _pool[holder]; }\r\n  \r\n  function getMyPool () public view returns (StakeContract memory) {  return _pool[msg.sender]; }\r\n\r\n  function getBusdBalance (address holder) public view returns (uint) { return _pool[holder].busdPays;  }\r\n  function getTbankBalance (address holder) public view returns (uint) { return _pool[holder].tbankPays;  }\r\n\r\n  function getTotalHolders () public view returns (uint) { return _wallets.length; }\r\n  function getTotalPool () public view returns (uint) { return _totalPool; }\r\n  function getTotalPoolNft () public view returns (uint) { return _totalPoolNft; }\r\n  function getTotalPoolNftUnic () public view returns (uint) { return _totalPoolNftUnic; }\r\n  function getPayedTbank () public view returns (uint) { return _totalPayedTBANK; }\r\n  function getPayedbusd () public view returns (uint) { return _totalPayedBUSD; }\r\n\r\n  function getTotalBusdBalance () public view returns (uint) { return IERC20(_Busd).balanceOf(address(this));  }\r\n  function getTotalTbankBalance () public view returns (uint) { return IERC20(_Tbank).balanceOf(address(this));  }\r\n\r\n  function withdrawBNB() external isAuthorized(0) { payable(_owner).transfer(address(this).balance); }\r\n  \r\n  function safeOtherTokens(address token, address payable receiv, uint amount) external isAuthorized(0) {\r\n    require (token != _Tbank, \"TBANK can only be withdrawn by its original owners\");\r\n    if(token == address(0)) { receiv.transfer(amount); } else { IERC20(token).transfer(receiv, amount); }\r\n  }\r\n\r\n  function adminSetNftTokenContract (address token) external isAuthorized(0) { _NftToken = token; }\r\n  function adminSetMinimumToStake(uint256 unitsCoin) external isAuthorized(0) { _minimumToDepositStake = unitsCoin; }\r\n  function setStakeDays(uint256 lockDays) external isAuthorized(0) { _stakeDays = lockDays; }\r\n\r\n  \r\n  function getBoxRateItem(uint256 boxRateId) public view returns (boxRate memory) { return _rates[boxRateId];} \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_Busd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NftToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Tbank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumToDepositStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tbankPays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"busdPays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"inStake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"removeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakeDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakerPOTBusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakerPOTTbank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalPayedBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalPayedTBANK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalPoolNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalPoolNftUnic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unitsCoin\",\"type\":\"uint256\"}],\"name\":\"adminSetMinimumToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"adminSetNftTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whatToken\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whatToken\",\"type\":\"uint256\"}],\"name\":\"depositPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whatToken\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxRateId\",\"type\":\"uint256\"}],\"name\":\"getBoxRateItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"inStake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"removeId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeHolderTBANK.boxRate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getBusdBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tbankPays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"busdPays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"}],\"internalType\":\"struct StakeHolderTBANK.StakeContract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTsInStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"inStake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"removeId\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeHolderTBANK.boxRate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPayedTbank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPayedbusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tbankPays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"busdPays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inGame\",\"type\":\"bool\"}],\"internalType\":\"struct StakeHolderTBANK.StakeContract\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getTbankBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBusdBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPoolNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPoolNftUnic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTbankBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"grantAllPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"grantedPermissions\",\"type\":\"uint8[]\"}],\"name\":\"grantPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permissionIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIdBox\",\"type\":\"uint256\"}],\"name\":\"rescueNFTStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeAllPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"revokedPermissions\",\"type\":\"uint8[]\"}],\"name\":\"revokePermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"receiv\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeOtherTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sendNFTToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"}],\"name\":\"setStakeDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakeHolderTBANK", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7a2a34ca6797654674a73b47f89a1221e64bbe824cd6583708550378ccf7c42e"}