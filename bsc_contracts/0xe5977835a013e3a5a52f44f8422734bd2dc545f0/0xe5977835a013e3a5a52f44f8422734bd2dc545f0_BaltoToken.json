{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\texternal\r\n\treturns (bool);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\texternal\r\n\tview\r\n\treturns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\ninterface IFactory {\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\texternal\r\n\treturns (address pair);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\texternal\r\n\tview\r\n\treturns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\tpayable\r\n\treturns (\r\n\t\tuint256 amountToken,\r\n\t\tuint256 amountETH,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n\tfunction dividendOf(address _owner) external view returns(uint256);\r\n\tfunction distributeDividends() external payable;\r\n\tfunction withdrawDividend() external;\r\n\tevent DividendsDistributed(\r\n\t\taddress indexed from,\r\n\t\tuint256 weiAmount\r\n\t);\r\n\tevent DividendWithdrawn(\r\n\t\taddress indexed to,\r\n\t\tuint256 weiAmount\r\n\t);\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n\tfunction withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\tfunction withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\tfunction accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary SafeMathInt {\r\n\tint256 private constant MIN_INT256 = int256(1) << 255;\r\n\tint256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n\tfunction mul(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a * b;\r\n\r\n\t\t// Detect overflow when multiplying MIN_INT256 with -1\r\n\t\trequire(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n\t\trequire((b == 0) || (c / b == a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction div(int256 a, int256 b) internal pure returns (int256) {\r\n\t\t// Prevent overflow when dividing MIN_INT256 by -1\r\n\t\trequire(b != -1 || a != MIN_INT256);\r\n\r\n\t\t// Solidity already throws when dividing by 0.\r\n\t\treturn a / b;\r\n\t}\r\n\tfunction sub(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a - b;\r\n\t\trequire((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction add(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a + b;\r\n\t\trequire((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction abs(int256 a) internal pure returns (int256) {\r\n\t\trequire(a != MIN_INT256);\r\n\t\treturn a < 0 ? -a : a;\r\n\t}\r\n\tfunction toUint256Safe(int256 a) internal pure returns (uint256) {\r\n\t\trequire(a >= 0);\r\n\t\treturn uint256(a);\r\n\t}\r\n}\r\n\r\nlibrary SafeMathUint {\r\n\tfunction toInt256Safe(uint256 a) internal pure returns (int256) {\r\n\t\tint256 b = int256(a);\r\n\t\trequire(b >= 0);\r\n\t\treturn b;\r\n\t}\r\n}\r\n\r\nlibrary IterableMapping {\r\n\tstruct Map {\r\n\t\taddress[] keys;\r\n\t\tmapping(address => uint) values;\r\n\t\tmapping(address => uint) indexOf;\r\n\t\tmapping(address => bool) inserted;\r\n\t}\r\n\r\n\tfunction get(Map storage map, address key) public view returns (uint) {\r\n\t\treturn map.values[key];\r\n\t}\r\n\r\n\tfunction getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n\t\tif(!map.inserted[key]) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn int(map.indexOf[key]);\r\n\t}\r\n\r\n\tfunction getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n\t\treturn map.keys[index];\r\n\t}\r\n\r\n\tfunction size(Map storage map) public view returns (uint) {\r\n\t\treturn map.keys.length;\r\n\t}\r\n\r\n\tfunction set(Map storage map, address key, uint val) public {\r\n\t\tif (map.inserted[key]) {\r\n\t\t\tmap.values[key] = val;\r\n\t\t} else {\r\n\t\t\tmap.inserted[key] = true;\r\n\t\t\tmap.values[key] = val;\r\n\t\t\tmap.indexOf[key] = map.keys.length;\r\n\t\t\tmap.keys.push(key);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction remove(Map storage map, address key) public {\r\n\t\tif (!map.inserted[key]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdelete map.inserted[key];\r\n\t\tdelete map.values[key];\r\n\r\n\t\tuint index = map.indexOf[key];\r\n\t\tuint lastIndex = map.keys.length - 1;\r\n\t\taddress lastKey = map.keys[lastIndex];\r\n\r\n\t\tmap.indexOf[lastKey] = index;\r\n\t\tdelete map.indexOf[key];\r\n\r\n\t\tmap.keys[index] = lastKey;\r\n\t\tmap.keys.pop();\r\n\t}\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathUint for uint256;\r\n\tusing SafeMathInt for int256;\r\n\r\n\tuint256 constant internal magnitude = 2**128;\r\n\tuint256 internal magnifiedDividendPerShare;\r\n\tuint256 public totalDividendsDistributed;\r\n\r\n\tmapping(address => int256) internal magnifiedDividendCorrections;\r\n\tmapping(address => uint256) internal withdrawnDividends;\r\n\r\n\tconstructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\r\n\r\n\treceive() external payable {\r\n\t\tdistributeDividends();\r\n\t}\r\n\r\n\tfunction distributeDividends() public override onlyOwner payable {\r\n\t\trequire(totalSupply() > 0);\r\n\t\tif (msg.value > 0) {\r\n\t\t\tmagnifiedDividendPerShare = magnifiedDividendPerShare.add((msg.value).mul(magnitude) / totalSupply());\r\n\t\t\temit DividendsDistributed(msg.sender, msg.value);\r\n\t\t\ttotalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n\t\t}\r\n\t}\r\n\tfunction withdrawDividend() public virtual override onlyOwner {\r\n\t\t_withdrawDividendOfUser(payable(msg.sender));\r\n\t}\r\n\tfunction _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n\t\tuint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n\t\tif (_withdrawableDividend > 0) {\r\n\t\t\twithdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\t\t\temit DividendWithdrawn(user, _withdrawableDividend);\r\n            (bool success,) = user.call{value: _withdrawableDividend, gas: 3000}(\"\");\r\n            if(!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n                return 0;\r\n            }\r\n            return _withdrawableDividend;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\tfunction dividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn withdrawableDividendOf(_owner);\r\n\t}\r\n\tfunction withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n\t}\r\n\tfunction withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn withdrawnDividends[_owner];\r\n\t}\r\n\tfunction accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n\t\t.add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n\t}\r\n\tfunction _transfer(address from, address to, uint256 value) internal virtual override {\r\n\t\trequire(false);\r\n\t\tint256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n\t\tmagnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n\t\tmagnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n\t}\r\n\tfunction _mint(address account, uint256 value) internal override {\r\n\t\tsuper._mint(account, value);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\t\t.sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n\tfunction _burn(address account, uint256 value) internal override {\r\n\t\tsuper._burn(account, value);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\t\t.add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n\tfunction _setBalance(address account, uint256 newBalance) internal {\r\n\t\tuint256 currentBalance = balanceOf(account);\r\n\t\tif(newBalance > currentBalance) {\r\n\t\t\tuint256 mintAmount = newBalance.sub(currentBalance);\r\n\t\t\t_mint(account, mintAmount);\r\n\t\t} else if(newBalance < currentBalance) {\r\n\t\t\tuint256 burnAmount = currentBalance.sub(newBalance);\r\n\t\t\t_burn(account, burnAmount);\r\n\t\t}\r\n\t}\r\n}\r\n\r\ncontract BaltoToken is Ownable, ERC20 {\r\n    IRouter public uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\r\n    string private constant _name = \"Balto Token\";\r\n    string private constant _symbol = \"BALTO\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    BaltoDividendTracker public dividendTracker;\r\n\r\n    bool public isTradingEnabled;\r\n\r\n    // initialSupply\r\n    uint256 constant initialSupply = 1000000000 * (10**18);\r\n\r\n    // max tx is 0.5% of initialSupply\r\n    uint256 public maxTxAmount = initialSupply * 50 / 10000;\r\n\r\n    // max wallet is 2.0% of initialSupply\r\n    uint256 public maxWalletAmount = initialSupply * 150 / 10000;\r\n\r\n    bool private _swapping;\r\n    uint256 public minimumTokensBeforeSwap = initialSupply * 50 / 100000;\r\n    uint256 public gasForProcessing = 300000;\r\n\r\n    uint256 private _launchTimestamp;\r\n    uint256 private _launchBlockNumber;\r\n\r\n    address public liquidityWallet;\r\n    address public devWallet;\r\n    address public buyBackWallet;\r\n    address public charityWallet;\r\n\r\n    struct CustomTaxPeriod {\r\n        bytes23 periodName;\r\n        uint8 blocksInPeriod;\r\n        uint256 timeInPeriod;\r\n        uint8 liquidityFeeOnBuy;\r\n        uint8 liquidityFeeOnSell;\r\n        uint8 devFeeOnBuy;\r\n        uint8 devFeeOnSell;\r\n        uint8 buyBackFeeOnBuy;\r\n        uint8 buyBackFeeOnSell;\r\n        uint8 charityFeeOnBuy;\r\n        uint8 charityFeeOnSell;\r\n        uint8 holdersFeeOnBuy;\r\n        uint8 holdersFeeOnSell;\r\n    }\r\n\r\n    // Base taxes\r\n    CustomTaxPeriod private _default = CustomTaxPeriod('default',0,0,1,1,4,4,1,1,2,2,4,4);\r\n    CustomTaxPeriod private _base = CustomTaxPeriod('default',0,0,1,1,4,4,1,1,2,2,4,4);\r\n\r\n    // Balto Hour taxes\r\n\tuint256 private _baltoTimeHourStartTimestamp;\r\n\tCustomTaxPeriod private _baltoTime1 = CustomTaxPeriod('baltoTime1',0,3600,0,2,0,6,0,8,0,4,3,10);\r\n\tCustomTaxPeriod private _baltoTime2 = CustomTaxPeriod('baltoTime2',0,3600,1,2,4,6,1,6,2,3,4,8);\r\n\r\n    uint256 private constant _blockedTimeLimit = 172800;\r\n    bool private _feeOnWalletTranfers;\r\n    mapping (address => bool) private _isAllowedToTradeWhenDisabled;\r\n    mapping (address => bool) private _feeOnSelectedWalletTransfers;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\n    mapping (address => bool) private _isExcludedFromMaxTransactionLimit;\r\n    mapping (address => bool) private _isBlocked;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    uint8 private _liquidityFee;\r\n    uint8 private _devFee;\r\n    uint8 private _buyBackFee;\r\n    uint8 private _charityFee;\r\n    uint8 private _holdersFee;\r\n    uint8 private _totalFee;\r\n\r\n    event AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\r\n    event DividendTrackerChange(address indexed newAddress, address indexed oldAddress);\r\n    event UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\r\n    event WalletChange(string indexed indentifier, address indexed newWallet, address indexed oldWallet);\r\n    event GasForProcessingChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event FeeChange(string indexed identifier, uint8 liquidityFee, uint8 devFee, uint8 buyBackFee, uint8 charityFee, uint8 holdersFee);\r\n    event CustomTaxPeriodChange(uint256 indexed newValue, uint256 indexed oldValue, string indexed taxType, bytes23 period);\r\n    event BlockedAccountChange(address indexed holder, bool indexed status);\r\n    event BaltoTimeHourChange(bool indexed newValue, bool indexed oldValue);\r\n    event MaxWalletAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event MaxTransactionAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\n    event ExcludeFromMaxWalletChange(address indexed account, bool isExcluded);\r\n    event ExcludeFromMaxTransactionChange(address indexed account, bool isExcluded);\r\n    event AllowedWhenTradingDisabledChange(address indexed account, bool isExcluded);\r\n    event MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event DividendsSent(uint256 tokensSwapped);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n    event ClaimBNBOverflow(uint256 amount);\r\n    event FeeOnWalletTransferChange(bool indexed newValue, bool indexed oldValue);\r\n    event FeeOnSelectedWalletTransfersChange(address indexed account, bool newValue);\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n    event FeesApplied(uint256 liquidityFee, uint8 devFee, uint8 buyBackFee, uint8 charityFee, uint8 holdersFee, uint8 totalFee);\r\n\r\n    constructor() ERC20(_name, _symbol) {\r\n        dividendTracker = new BaltoDividendTracker();\r\n\r\n        liquidityWallet = owner();\r\n        devWallet = owner();\r\n        buyBackWallet = owner();\r\n        charityWallet = owner();\r\n\r\n        IRouter _uniswapV2Router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Mainnet\r\n\t\taddress _uniswapV2Pair = IFactory(_uniswapV2Router.factory()).createPair(\r\n\t\t\taddress(this),\r\n\t\t\t_uniswapV2Router.WETH()\r\n\t\t);\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[address(dividendTracker)] = true;\r\n\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(address(0x000000000000000000000000000000000000dEaD));\r\n        dividendTracker.excludeFromDividends(owner());\r\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n\r\n        _isAllowedToTradeWhenDisabled[owner()] = true;\r\n        _isAllowedToTradeWhenDisabled[address(this)] = true;\r\n\r\n        _isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n        _isExcludedFromMaxWalletLimit[address(dividendTracker)] = true;\r\n        _isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n        _isExcludedFromMaxWalletLimit[address(this)] = true;\r\n        _isExcludedFromMaxWalletLimit[owner()] = true;\r\n\r\n        _isExcludedFromMaxTransactionLimit[owner()] = true;\r\n        _isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n        _isExcludedFromMaxTransactionLimit[address(dividendTracker)] = true;\r\n\r\n        _mint(owner(), initialSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // Setters\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function activateTrading() external onlyOwner {\r\n        isTradingEnabled = true;\r\n        if (_launchTimestamp == 0) {\r\n\t\t\t_launchTimestamp = block.timestamp;\r\n\t\t\t_launchBlockNumber = block.number;\r\n\t\t}\r\n    }\r\n    function deactivateTrading() external onlyOwner {\r\n        isTradingEnabled = false;\r\n    }\r\n    function setBaltoTimeHour() public onlyOwner {\r\n\t\trequire(!this.isInBaltoTimeHour(), \"Balto: BaltoTime Hour is already set\");\r\n\t\trequire(isTradingEnabled, \"Balto: Trading must be enabled first\");\r\n\t\temit BaltoTimeHourChange(true, false);\r\n\t\t_baltoTimeHourStartTimestamp = block.timestamp;\r\n\t}\r\n\tfunction cancelBaltoTimeHour() public onlyOwner {\r\n\t\trequire(this.isInBaltoTimeHour(), \"Balto: BaltoTime Hour is not set\");\r\n\t\temit BaltoTimeHourChange(false, true);\r\n\t\t_baltoTimeHourStartTimestamp = 0;\r\n\t}\r\n    function updateDividendTracker(address newAddress) external onlyOwner {\r\n        require(newAddress != address(dividendTracker), \"Balto: The dividend tracker already has that address\");\r\n        BaltoDividendTracker newDividendTracker = BaltoDividendTracker(payable(newAddress));\r\n        require(newDividendTracker.owner() == address(this), \"Balto: The new dividend tracker must be owned by the Balto token contract\");\r\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n        newDividendTracker.excludeFromDividends(address(this));\r\n        newDividendTracker.excludeFromDividends(owner());\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Pair));\r\n        emit DividendTrackerChange(newAddress, address(dividendTracker));\r\n        dividendTracker = newDividendTracker;\r\n    }\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Balto: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        if(value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n        emit AutomatedMarketMakerPairChange(pair, value);\r\n    }\r\n    function allowTradingWhenDisabled(address account, bool allowed) external onlyOwner {\r\n        _isAllowedToTradeWhenDisabled[account] = allowed;\r\n        emit AllowedWhenTradingDisabledChange(account, allowed);\r\n    }\r\n    function excludeFromFees(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromFee[account] != excluded, \"Balto: Account is already the value of 'excluded'\");\r\n        _isExcludedFromFee[account] = excluded;\r\n        emit ExcludeFromFeesChange(account, excluded);\r\n    }\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        dividendTracker.excludeFromDividends(account);\r\n    }\r\n    function excludeFromMaxWalletLimit(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromMaxWalletLimit[account] != excluded, \"Balto: Account is already the value of 'excluded'\");\r\n        _isExcludedFromMaxWalletLimit[account] = excluded;\r\n        emit ExcludeFromMaxWalletChange(account, excluded);\r\n    }\r\n    function excludeFromMaxTransactionLimit(address account, bool excluded) external onlyOwner {\r\n        require(_isExcludedFromMaxTransactionLimit[account] != excluded, \"Balto: Account is already the value of 'excluded'\");\r\n        _isExcludedFromMaxTransactionLimit[account] = excluded;\r\n        emit ExcludeFromMaxTransactionChange(account, excluded);\r\n    }\r\n    function blockAccount(address account) external onlyOwner {\r\n        require(!_isBlocked[account], \"Balto: Account is already blocked\");\r\n        require((block.timestamp - _launchTimestamp) < _blockedTimeLimit, \"Balto: Time to block accounts has expired\");\r\n        _isBlocked[account] = true;\r\n        emit BlockedAccountChange(account, true);\r\n    }\r\n    function unblockAccount(address account) external onlyOwner {\r\n        require(_isBlocked[account], \"Balto: Account is not blcoked\");\r\n        _isBlocked[account] = false;\r\n        emit BlockedAccountChange(account, false);\r\n    }\r\n    function setFeeOnWalletTransfers(bool value) external onlyOwner {\r\n        emit FeeOnWalletTransferChange(value, _feeOnWalletTranfers);\r\n        _feeOnWalletTranfers = value;\r\n    }\r\n    function setFeeOnSelectedWalletTransfers(address account, bool value) external onlyOwner {\r\n\t\trequire(_feeOnSelectedWalletTransfers[account] != value, \"Balto: The selected wallet is already set to the value \");\r\n\t\t_feeOnSelectedWalletTransfers[account] = value;\r\n\t\temit FeeOnSelectedWalletTransfersChange(account, value);\r\n\t}\r\n    function setWallets(address newLiquidityWallet, address newDevWallet, address newBuyBackWallet, address newCharityWallet) external onlyOwner {\r\n        if(liquidityWallet != newLiquidityWallet) {\r\n            require(newLiquidityWallet != address(0), \"Balto: The liquidityWallet cannot be 0\");\r\n            emit WalletChange('liquidityWallet', newLiquidityWallet, liquidityWallet);\r\n            liquidityWallet = newLiquidityWallet;\r\n        }\r\n        if(devWallet != newDevWallet) {\r\n            require(newDevWallet != address(0), \"Balto: The devWallet cannot be 0\");\r\n            emit WalletChange('devWallet', newDevWallet, devWallet);\r\n            devWallet = newDevWallet;\r\n        }\r\n        if(buyBackWallet != newBuyBackWallet) {\r\n            require(newBuyBackWallet != address(0), \"Balto: The buyBackWallet cannot be 0\");\r\n            emit WalletChange('buyBackWallet', newBuyBackWallet, buyBackWallet);\r\n            buyBackWallet = newBuyBackWallet;\r\n        }\r\n        if(charityWallet != newCharityWallet) {\r\n            require(newCharityWallet != address(0), \"Balto: The charityWallet cannot be 0\");\r\n            emit WalletChange('charityWallet', newCharityWallet, charityWallet);\r\n            charityWallet = newCharityWallet;\r\n        }\r\n    }\r\n    function setAllFeesToZero() external onlyOwner {\r\n        _setCustomBuyTaxPeriod(_base, 0, 0, 0, 0, 0);\r\n        emit FeeChange('baseFees-Buy', 0, 0, 0, 0, 0);\r\n        _setCustomSellTaxPeriod(_base, 0, 0, 0, 0, 0);\r\n        emit FeeChange('baseFees-Sell', 0, 0, 0, 0, 0);\r\n    }\r\n    function resetAllFees() external onlyOwner {\r\n        _setCustomBuyTaxPeriod(_base, _default.liquidityFeeOnBuy, _default.devFeeOnBuy, _default.buyBackFeeOnBuy, _default.charityFeeOnBuy, _default.holdersFeeOnBuy);\r\n        emit FeeChange('baseFees-Buy', _default.liquidityFeeOnBuy, _default.devFeeOnBuy, _default.buyBackFeeOnBuy, _default.charityFeeOnBuy,  _default.holdersFeeOnBuy);\r\n        _setCustomSellTaxPeriod(_base, _default.liquidityFeeOnSell, _default.devFeeOnSell, _default.buyBackFeeOnSell, _default.charityFeeOnSell,  _default.holdersFeeOnSell);\r\n        emit FeeChange('baseFees-Sell', _default.liquidityFeeOnSell, _default.devFeeOnSell, _default.buyBackFeeOnSell, _default.charityFeeOnSell, _default.holdersFeeOnSell);\r\n    }\r\n    // Base fees\r\n    function setBaseFeesOnBuy(uint8 _liquidityFeeOnBuy, uint8 _devFeeOnBuy, uint8 _buyBackFeeOnBuy, uint8 _charityFeeOnBuy, uint8 _holdersFeeOnBuy) external onlyOwner {\r\n        _setCustomBuyTaxPeriod(_base, _liquidityFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy, _charityFeeOnBuy, _holdersFeeOnBuy);\r\n        emit FeeChange('baseFees-Buy', _liquidityFeeOnBuy, _devFeeOnBuy, _buyBackFeeOnBuy, _charityFeeOnBuy, _holdersFeeOnBuy);\r\n    }\r\n    function setBaseFeesOnSell(uint8 _liquidityFeeOnSell,uint8 _devFeeOnSell, uint8 _buyBackFeeOnSell, uint8 _charityFeeOnSell, uint8 _holdersFeeOnSell) external onlyOwner {\r\n        _setCustomSellTaxPeriod(_base, _liquidityFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell, _charityFeeOnSell, _holdersFeeOnSell);\r\n        emit FeeChange('baseFees-Sell', _liquidityFeeOnSell, _devFeeOnSell, _buyBackFeeOnSell, _charityFeeOnSell, _holdersFeeOnSell);\r\n    }\r\n    function setUniswapRouter(address newAddress) external onlyOwner {\r\n        require(newAddress != address(uniswapV2Router), \"Balto: The router already has that address\");\r\n        emit UniswapV2RouterChange(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IRouter(newAddress);\r\n    }\r\n    function setGasForProcessing(uint256 newValue) external onlyOwner {\r\n        require(newValue != gasForProcessing, \"Balto: Cannot update gasForProcessing to same value\");\r\n        emit GasForProcessingChange(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n    function setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n        require(newValue != maxWalletAmount, \"Balto: Cannot update maxWalletAmount to same value\");\r\n        emit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n        maxWalletAmount = newValue;\r\n    }\r\n    function setMaxTransactionAmount(uint256 newValue) external onlyOwner {\r\n        require(newValue != maxTxAmount, \"Balto: Cannot update maxTxAmount to same value\");\r\n        emit MaxTransactionAmountChange(newValue, maxTxAmount);\r\n        maxTxAmount = newValue;\r\n    }\r\n    function setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n        require(newValue != minimumTokensBeforeSwap, \"Balto: Cannot update minimumTokensBeforeSwap to same value\");\r\n        emit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n        minimumTokensBeforeSwap = newValue;\r\n    }\r\n    function setMinimumTokenBalanceForDividends(uint256 newValue) external onlyOwner {\r\n        dividendTracker.setTokenBalanceForDividends(newValue);\r\n    }\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n    function claimBNBOverflow() external onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        (bool success,) = address(owner()).call{value : amount}(\"\");\r\n        if (success){\r\n            emit ClaimBNBOverflow(amount);\r\n        }\r\n    }\r\n\r\n    // Getters\r\n    function isInBaltoTimeHour() external view returns (bool) {\r\n\t\tuint256 totalBaltoTimeTime = _baltoTime1.timeInPeriod + _baltoTime2.timeInPeriod;\r\n\t\tif(block.timestamp - _baltoTimeHourStartTimestamp < totalBaltoTimeTime) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n    function withdrawableDividendOf(address account) public view returns(uint256) {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n    function dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n    function getBaseBuyFees() external view returns (uint8, uint8, uint8, uint8, uint8){\r\n        return (_base.liquidityFeeOnBuy, _base.devFeeOnBuy, _base.buyBackFeeOnBuy, _base.charityFeeOnBuy, _base.holdersFeeOnBuy);\r\n    }\r\n    function getBaseSellFees() external view returns (uint8, uint8, uint8, uint8, uint8){\r\n        return (_base.liquidityFeeOnSell, _base.devFeeOnSell, _base.buyBackFeeOnSell, _base.charityFeeOnSell, _base.holdersFeeOnSell);\r\n    }\r\n\r\n    // Main\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if(amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        bool isBuyFromLp = automatedMarketMakerPairs[from];\r\n        bool isSelltoLp = automatedMarketMakerPairs[to];\r\n\r\n        if(!_isAllowedToTradeWhenDisabled[from] && !_isAllowedToTradeWhenDisabled[to]) {\r\n            require(isTradingEnabled, \"Balto: Trading is currently disabled.\");\r\n            require(!_isBlocked[to], \"Balto: Account is blocked\");\r\n            require(!_isBlocked[from], \"Balto: Account is blocked\");\r\n            if (!_isExcludedFromMaxWalletLimit[to]) {\r\n                require((balanceOf(to) + amount) <= maxWalletAmount, \"Balto: Expected wallet amount exceeds the maxWalletAmount.\");\r\n            }\r\n            if (!_isExcludedFromMaxTransactionLimit[to] && !_isExcludedFromMaxTransactionLimit[from]) {\r\n                require(amount <= maxTxAmount, \"Balto: Transfer amount exceeds the maxTxAmount.\");\r\n            }\r\n        }\r\n\r\n        _adjustTaxes(isBuyFromLp, isSelltoLp, to, from);\r\n        bool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n        if (\r\n            isTradingEnabled &&\r\n            canSwap &&\r\n            !_swapping &&\r\n            _totalFee > 0 &&\r\n            automatedMarketMakerPairs[to]\r\n        ) {\r\n            _swapping = true;\r\n            _swapAndLiquify();\r\n            _swapping = false;\r\n        }\r\n\r\n        bool takeFee = !_swapping && isTradingEnabled;\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        if (takeFee && _totalFee > 0) {\r\n            uint256 fee = amount * _totalFee / 100;\r\n            amount = amount - fee;\r\n            super._transfer(from, address(this), fee);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n        if(!_swapping) {\r\n            uint256 gas = gasForProcessing;\r\n            try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n            }\r\n            catch {}\r\n        }\r\n    }\r\n    function _adjustTaxes(bool isBuyFromLp, bool isSelltoLp, address to, address from) private {\r\n        uint256 timeSinceBaltoTime = block.timestamp - _baltoTimeHourStartTimestamp;\r\n        _liquidityFee = 0;\r\n        _devFee = 0;\r\n        _buyBackFee = 0;\r\n        _charityFee = 0;\r\n        _holdersFee = 0;\r\n\r\n        if (isBuyFromLp) {\r\n\t\t\tif ((block.number - _launchBlockNumber) <= 7) {\r\n\t\t\t\t_devFee = 100;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t_liquidityFee = _base.liquidityFeeOnBuy;\r\n\t\t\t\t_devFee = _base.devFeeOnBuy;\r\n\t\t\t\t_buyBackFee = _base.buyBackFeeOnBuy;\r\n\t\t\t\t_charityFee = _base.charityFeeOnBuy;\r\n\t\t\t\t_holdersFee = _base.holdersFeeOnBuy;\r\n\r\n\t\t\t\tif (timeSinceBaltoTime <= _baltoTime1.timeInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _baltoTime1.liquidityFeeOnBuy;\r\n\t\t\t\t\t_devFee = _baltoTime1.devFeeOnBuy;\r\n\t\t\t\t\t_buyBackFee = _baltoTime1.buyBackFeeOnBuy;\r\n\t                _charityFee = _baltoTime1.charityFeeOnBuy;\r\n\t\t\t\t\t_holdersFee = _baltoTime1.holdersFeeOnBuy;\r\n\t\t\t\t}\r\n\t\t\t\tif (timeSinceBaltoTime > _baltoTime1.timeInPeriod && timeSinceBaltoTime <= _baltoTime1.timeInPeriod + _baltoTime2.timeInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _baltoTime2.liquidityFeeOnBuy;\r\n\t\t\t\t\t_devFee = _baltoTime2.devFeeOnBuy;\r\n\t\t\t\t\t_buyBackFee = _baltoTime2.buyBackFeeOnBuy;\r\n\t                _charityFee = _baltoTime2.charityFeeOnBuy;\r\n\t\t\t\t\t_holdersFee = _baltoTime2.holdersFeeOnBuy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n        else if (isSelltoLp) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_devFee = _base.devFeeOnSell;\r\n\t\t\t_buyBackFee = _base.buyBackFeeOnSell;\r\n\t\t\t_charityFee = _base.charityFeeOnSell;\r\n\t\t\t_holdersFee = _base.holdersFeeOnSell;\r\n\r\n            if (timeSinceBaltoTime <= _baltoTime1.timeInPeriod) {\r\n\t\t\t\t_liquidityFee = _baltoTime1.liquidityFeeOnSell;\r\n\t\t\t\t_devFee = _baltoTime1.devFeeOnSell;\r\n\t\t\t\t_buyBackFee = _baltoTime1.buyBackFeeOnSell;\r\n                _charityFee = _baltoTime1.charityFeeOnSell;\r\n\t\t\t\t_holdersFee = _baltoTime1.holdersFeeOnSell;\r\n\t\t\t}\r\n\t\t\tif (timeSinceBaltoTime > _baltoTime1.timeInPeriod && timeSinceBaltoTime <= _baltoTime1.timeInPeriod + _baltoTime2.timeInPeriod) {\r\n\t\t\t\t_liquidityFee = _baltoTime2.liquidityFeeOnSell;\r\n\t\t\t\t_devFee = _baltoTime2.devFeeOnSell;\r\n\t\t\t\t_buyBackFee = _baltoTime2.buyBackFeeOnSell;\r\n                _charityFee = _baltoTime2.charityFeeOnSell;\r\n\t\t\t\t_holdersFee = _baltoTime2.holdersFeeOnSell;\r\n\t\t\t}\r\n        }\r\n        else if (!isSelltoLp && !isBuyFromLp && (_feeOnSelectedWalletTransfers[from] || _feeOnSelectedWalletTransfers[to])) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnSell;\r\n            _devFee = _base.devFeeOnSell;\r\n            _buyBackFee = _base.buyBackFeeOnSell;\r\n            _charityFee = _base.charityFeeOnSell;\r\n            _holdersFee = _base.holdersFeeOnSell;\r\n\t\t}\r\n\t\telse if (!isSelltoLp && !isBuyFromLp && !_feeOnSelectedWalletTransfers[from] && !_feeOnSelectedWalletTransfers[to] && _feeOnWalletTranfers) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnBuy;\r\n            _devFee = _base.devFeeOnBuy;\r\n            _buyBackFee = _base.buyBackFeeOnBuy;\r\n            _charityFee = _base.charityFeeOnBuy;\r\n            _holdersFee = _base.holdersFeeOnBuy;\r\n\t\t}\r\n        _totalFee = _liquidityFee + _devFee + _buyBackFee + _charityFee + _holdersFee;\r\n        emit FeesApplied(_liquidityFee, _devFee, _buyBackFee, _charityFee, _holdersFee, _totalFee);\r\n    }\r\n    function _setCustomSellTaxPeriod(CustomTaxPeriod storage map,\r\n        uint8 _liquidityFeeOnSell,\r\n        uint8 _devFeeOnSell,\r\n        uint8 _buyBackFeeOnSell,\r\n        uint8 _charityFeeOnSell,\r\n        uint8 _holdersFeeOnSell\r\n        ) private {\r\n        if (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\n            emit CustomTaxPeriodChange(_liquidityFeeOnSell, map.liquidityFeeOnSell, 'liquidityFeeOnSell', map.periodName);\r\n            map.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n        }\r\n        if (map.devFeeOnSell != _devFeeOnSell) {\r\n            emit CustomTaxPeriodChange(_devFeeOnSell, map.devFeeOnSell, 'devFeeOnSell', map.periodName);\r\n            map.devFeeOnSell = _devFeeOnSell;\r\n        }\r\n        if (map.buyBackFeeOnSell != _buyBackFeeOnSell) {\r\n            emit CustomTaxPeriodChange(_buyBackFeeOnSell, map.buyBackFeeOnSell, 'buyBackFeeOnSell', map.periodName);\r\n            map.buyBackFeeOnSell = _buyBackFeeOnSell;\r\n        }\r\n        if (map.charityFeeOnSell != _charityFeeOnSell) {\r\n            emit CustomTaxPeriodChange(_charityFeeOnSell, map.charityFeeOnSell, 'charityFeeOnSell', map.periodName);\r\n            map.charityFeeOnSell = _charityFeeOnSell;\r\n        }\r\n        if (map.holdersFeeOnSell != _holdersFeeOnSell) {\r\n            emit CustomTaxPeriodChange(_holdersFeeOnSell, map.holdersFeeOnSell, 'holdersFeeOnSell', map.periodName);\r\n            map.holdersFeeOnSell = _holdersFeeOnSell;\r\n        }\r\n    }\r\n    function _setCustomBuyTaxPeriod(CustomTaxPeriod storage map,\r\n        uint8 _liquidityFeeOnBuy,\r\n        uint8 _devFeeOnBuy,\r\n        uint8 _buyBackFeeOnBuy,\r\n        uint8 _charityFeeOnBuy,\r\n        uint8 _holdersFeeOnBuy\r\n        ) private {\r\n        if (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(_liquidityFeeOnBuy, map.liquidityFeeOnBuy, 'liquidityFeeOnBuy', map.periodName);\r\n            map.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n        }\r\n        if (map.devFeeOnBuy != _devFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(_devFeeOnBuy, map.devFeeOnBuy, 'devFeeOnBuy', map.periodName);\r\n            map.devFeeOnBuy = _devFeeOnBuy;\r\n        }\r\n        if (map.buyBackFeeOnBuy != _buyBackFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(_buyBackFeeOnBuy, map.buyBackFeeOnBuy, 'buyBackFeeOnBuy', map.periodName);\r\n            map.buyBackFeeOnBuy = _buyBackFeeOnBuy;\r\n        }\r\n        if (map.charityFeeOnBuy != _charityFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(_charityFeeOnBuy, map.charityFeeOnBuy, 'charityFeeOnBuy', map.periodName);\r\n            map.charityFeeOnBuy = _charityFeeOnBuy;\r\n        }\r\n        if (map.holdersFeeOnBuy != _holdersFeeOnBuy) {\r\n            emit CustomTaxPeriodChange(_holdersFeeOnBuy, map.holdersFeeOnBuy, 'holdersFeeOnBuy', map.periodName);\r\n            map.holdersFeeOnBuy = _holdersFeeOnBuy;\r\n        }\r\n    }\r\n    function _swapAndLiquify() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 initialBNBBalance = address(this).balance;\r\n        uint8 totalFeePrior = _totalFee;\r\n\r\n        uint256 amountToLiquify = contractBalance * _liquidityFee / _totalFee / 2;\r\n        uint256 amountToSwap = contractBalance - amountToLiquify;\r\n\r\n        _swapTokensForBNB(amountToSwap);\r\n\r\n        uint256 BNBBalanceAfterSwap = address(this).balance - initialBNBBalance;\r\n        uint256 totalBNBFee = _totalFee - (_liquidityFee / 2);\r\n\r\n        uint256 amountBNBLiquidity = BNBBalanceAfterSwap * _liquidityFee / totalBNBFee / 2;\r\n        uint256 amountBNBDev = BNBBalanceAfterSwap * _devFee / totalBNBFee;\r\n        uint256 amountBNBBuyBack = BNBBalanceAfterSwap * _buyBackFee / totalBNBFee;\r\n        uint256 amountBNBCharity = BNBBalanceAfterSwap * _charityFee / totalBNBFee;\r\n        uint256 amountBNBHolders = BNBBalanceAfterSwap - (amountBNBLiquidity + amountBNBDev + amountBNBBuyBack + amountBNBCharity);\r\n\r\n        payable(devWallet).transfer(amountBNBDev);\r\n        payable(buyBackWallet).transfer(amountBNBBuyBack);\r\n        payable(charityWallet).transfer(amountBNBCharity);\r\n\r\n        if (amountToLiquify > 0) {\r\n            _addLiquidity(amountToLiquify, amountBNBLiquidity);\r\n            emit SwapAndLiquify(amountToSwap, amountBNBLiquidity, amountToLiquify);\r\n        }\r\n\r\n        (bool dividendSuccess,) = address(dividendTracker).call{value: amountBNBHolders}(\"\");\r\n        if(dividendSuccess) {\r\n            emit DividendsSent(amountBNBHolders);\r\n        }\r\n        _totalFee = totalFeePrior;\r\n    }\r\n    function _swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\ncontract BaltoDividendTracker is DividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n\r\n    uint256 public lastProcessedIndex;\r\n    mapping (address => bool) public excludedFromDividends;\r\n    mapping (address => uint256) public lastClaimTimes;\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    constructor() DividendPayingToken(\"Balto_Dividend_Tracker\", \"Balto_Dividend_Tracker\") {\r\n        claimWait = 3600;\r\n        minimumTokenBalanceForDividends = 0 * (10**18);\r\n    }\r\n    function _transfer(address, address, uint256) internal override {\r\n        require(false, \"Balto_Dividend_Tracker: No transfers allowed\");\r\n    }\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n    function setTokenBalanceForDividends(uint256 newValue) external onlyOwner {\r\n        require(minimumTokenBalanceForDividends != newValue, \"Balto_Dividend_Tracker: minimumTokenBalanceForDividends already the value of 'newValue'.\");\r\n        minimumTokenBalanceForDividends = newValue;\r\n    }\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if(lastClaimTime > block.timestamp)  {\r\n            return false;\r\n        }\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n        if(excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n        if(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            tokenHoldersMap.set(account, newBalance);\r\n        }\r\n        else {\r\n            _setBalance(account, 0);\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n        processAccount(account, true);\r\n    }\r\n    function process(uint256 gas) public onlyOwner returns (uint256, uint256, uint256) {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n        if(numberOfTokenHolders == 0) {\r\n        return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n            if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n            if(canAutoClaim(lastClaimTimes[account])) {\r\n                if(processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n            uint256 newGasLeft = gasleft();\r\n            if(gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n            gasLeft = newGasLeft;\r\n        }\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n        if(amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"}],\"name\":\"BaltoTimeHourChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlockedAccountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBNBOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"DividendTrackerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"}],\"name\":\"DividendsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxTransactionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"charityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"holdersFee\",\"type\":\"uint8\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"FeeOnSelectedWalletTransfersChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"}],\"name\":\"FeeOnWalletTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyBackFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"charityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"holdersFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"totalFee\",\"type\":\"uint8\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingWhenDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelBaltoTimeHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBNBOverflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract BaltoDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInBaltoTimeHour\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllFeesToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBaltoTimeHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_charityFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_buyBackFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_charityFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeOnSelectedWalletTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeOnWalletTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBuyBackWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newCharityWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BaltoToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:8a68db848172e03e31a863ed378030a7af90fb78", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://160aef14c05c90b208ec59bb4d0352dbc7638bcdba34bf5eca8109dcff840955"}