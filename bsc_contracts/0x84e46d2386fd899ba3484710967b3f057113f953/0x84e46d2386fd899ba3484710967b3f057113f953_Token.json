{"SourceCode": "interface IERC20 { function totalSupply() external view returns (uint256);\r\n\r\nfunction balanceOf(address who) external view returns (uint256);\r\n\r\nfunction allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\nfunction transfer(address to, uint256 value) external returns (bool);\r\n\r\nfunction approve(address spender, uint256 value) external returns (bool);\r\n\r\nfunction transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n) external returns (bool);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\nevent Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n);\r\n}\r\n\r\nabstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n\r\nfunction _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n}\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 { function name() external view returns (string memory);\r\n\r\nfunction symbol() external view returns (string memory);\r\n\r\nfunction decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata { mapping(address => uint256) private _balances;\r\n\r\nmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\nuint256 private _totalSupply;\r\n\r\nstring private _name;\r\nstring private _symbol;\r\n\r\nconstructor(string memory name_, string memory symbol_) {\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n}\r\n\r\nfunction name() public view virtual override returns (string memory) {\r\n    return _name;\r\n}\r\n\r\nfunction symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n}\r\n\r\nfunction decimals() public view virtual override returns (uint8) {\r\n    return 18;\r\n}\r\n\r\nfunction totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n}\r\n\r\nfunction balanceOf(address account)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n{\r\n    return _balances[account];\r\n}\r\n\r\nfunction transfer(address to, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n{\r\n    address owner = _msgSender();\r\n    _transfer(owner, to, amount);\r\n    return true;\r\n}\r\n\r\nfunction allowance(address owner, address spender)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n{\r\n    return _allowances[owner][spender];\r\n}\r\n\r\nfunction approve(address spender, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n{\r\n    address owner = _msgSender();\r\n    _approve(owner, spender, amount);\r\n    return true;\r\n}\r\n\r\nfunction transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n) public virtual override returns (bool) {\r\n    address spender = _msgSender();\r\n    _spendAllowance(from, spender, amount);\r\n    _transfer(from, to, amount);\r\n    return true;\r\n}\r\n\r\nfunction increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n{\r\n    address owner = _msgSender();\r\n    _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n    return true;\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n{\r\n    address owner = _msgSender();\r\n    uint256 currentAllowance = _allowances[owner][spender];\r\n    require(\r\n        currentAllowance >= subtractedValue,\r\n        \"ERC20: decreased allowance below zero\"\r\n    );\r\n    unchecked {\r\n        _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n) internal virtual {\r\n    require(from != address(0), \"ERC20: transfer from the zero address\");\r\n    require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfer(from, to, amount);\r\n\r\n    uint256 fromBalance = _balances[from];\r\n    require(\r\n        fromBalance >= amount,\r\n        \"ERC20: transfer amount exceeds balance\"\r\n    );\r\n    unchecked {\r\n        _balances[from] = fromBalance - amount;\r\n    }\r\n    _balances[to] += amount;\r\n\r\n    emit Transfer(from, to, amount);\r\n\r\n    _afterTokenTransfer(from, to, amount);\r\n}\r\n\r\nfunction _mint(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply += amount;\r\n    _balances[account] += amount;\r\n    emit Transfer(address(0), account, amount);\r\n\r\n    _afterTokenTransfer(address(0), account, amount);\r\n}\r\n\r\nfunction _burn(address account, uint256 amount) internal virtual {\r\n    require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account];\r\n    require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n    _totalSupply -= amount;\r\n\r\n    emit Transfer(account, address(0), amount);\r\n\r\n    _afterTokenTransfer(account, address(0), amount);\r\n}\r\n\r\nfunction _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n}\r\n\r\nfunction _spendAllowance(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n) internal virtual {\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance != type(uint256).max) {\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: insufficient allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n}\r\n\r\nfunction _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n) internal virtual {}\r\n\r\nfunction _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n) internal virtual {}\r\n}\r\n\r\ncontract Ownable { address private _owner;\r\n\r\nevent OwnershipRenounced(address indexed previousOwner);\r\n\r\nevent OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n);\r\n\r\nconstructor() {\r\n    _owner = msg.sender;\r\n}\r\n\r\nfunction owner() public view returns (address) {\r\n    return _owner;\r\n}\r\n\r\nmodifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n}\r\n\r\nfunction isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n}\r\n\r\nfunction renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(_owner);\r\n    _owner = address(0);\r\n}\r\n\r\nfunction transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n}\r\n\r\nfunction _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n}\r\n}\r\n\r\nlibrary SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\n\r\nfunction sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n}\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n}\r\n\r\nfunction div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n}\r\n\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n}\r\n}\r\n\r\ncontract Token is ERC20, Ownable { using SafeMath for uint256;\r\n\r\naddress public pair;\r\n\r\nuint256 private constant INITIAL_SUPPLY = 100000000 ether; //start supply of tokens\r\n\r\nmapping(address => uint256) private _timestamps;\r\n\r\nuint256 public timeDelay = 3600 seconds; //time per getting staking reward\r\n\r\nuint256 public percentages = 10; //10 = 0.01% (amount of staking reward)\r\n\r\nuint256 private TAX_FEE = 5000; //5000 = 5% (transaction fee)\r\n\r\nuint256 public pool;\r\n\r\nuint256 public poolStartTime;\r\n\r\nuint256 public timeDelayPool = 600 seconds; //time(from deploing) when staking profits starts to do\r\n\r\nconstructor() ERC20(\"Rimer Finance\", \"Rimer\") { //name of the token\r\n    _mint(address(this), INITIAL_SUPPLY);\r\n\r\n    poolStartTime = block.timestamp;\r\n}\r\nfunction transfer(address to, uint256 amount) public override returns (bool) { address owner = msg.sender;\r\n\r\n    uint256 amountFee = (amount * TAX_FEE) / 100000;\r\n\r\n    _burn(owner, amountFee);\r\n\r\n    _timestamps[owner] = block.timestamp;\r\n    _timestamps[to] = block.timestamp;\r\n\r\n    _transfer(owner, to, amount - amountFee);\r\n    return true;\r\n}\r\n\r\nfunction tokenTransferOwner(address to, uint256 amount)\r\n    public\r\n    onlyOwner\r\n    returns (bool)\r\n{\r\n    _transfer(address(this), to, amount);\r\n\r\n    _timestamps[to] = block.timestamp;\r\n\r\n    return true;\r\n}\r\nfunction claim() external returns (bool) { require(block.timestamp - _timestamps[msg.sender] >= timeDelay, \"Token: you can't claim during the next 60 minutes\");\r\n\r\n    uint256 poolAdd = (block.timestamp.sub(poolStartTime)).div(\r\n        timeDelayPool\r\n    );\r\n\r\n    poolStartTime = block.timestamp;\r\n\r\n    uint256 rewardCount = (block.timestamp.sub(_timestamps[msg.sender])).div(timeDelay);\r\n\r\n    uint256 amount1 = getAmountPool();\r\n    uint256 amount2 = getAmount(msg.sender);\r\n\r\n    uint256 toAdd = amount1.mul(poolAdd);\r\n    pool = pool.add(toAdd);\r\n    \r\n    require(pool > 0, \"pool balance is 0 now\");\r\n\r\n    uint256 toSub = amount2.mul(rewardCount);\r\n\r\n    if (toSub > toAdd) {\r\n        pool = 0;\r\n    }\r\n    else {\r\n        pool = pool.sub(toSub);\r\n    }\r\n\r\n    _mint(msg.sender, toSub);\r\n\r\n    _timestamps[msg.sender] = block.timestamp;\r\n\r\n    return true;\r\n}\r\n\r\nfunction getAmount(address _user) private view returns (uint256) {\r\n    uint256 balance = balanceOf(_user);\r\n\r\n    uint256 amount = (balance.mul(percentages)).div(100000);\r\n\r\n    return amount;\r\n}\r\n\r\nfunction getAmountPool() private view returns (uint256) {\r\n    uint256 totalSupply = totalSupply();\r\n\r\n    uint256 amount = (totalSupply.mul(percentages)).div(100000);\r\n\r\n    return amount;\r\n}\r\n\r\nfunction mint(address _to, uint256 _amount) private {\r\n    _mint(_to, _amount);\r\n}\r\n\r\nfunction burn(address _from, uint256 _amount) private {\r\n    _burn(_from, _amount);\r\n}\r\n\r\nfunction withdraw() external virtual onlyOwner {\r\n    payable(msg.sender).transfer(address(this).balance);\r\n}\r\n\r\nreceive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDelayPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokenTransferOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://16328e7538c1f6c9c0e4d802a77a916260a52197e3516e38d83820797d84d632"}