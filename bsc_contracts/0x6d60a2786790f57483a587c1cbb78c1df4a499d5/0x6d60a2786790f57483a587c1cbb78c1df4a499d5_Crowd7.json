{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity = 0.8.0;\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a , uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Crowd7 {\r\n    using SafeMath for uint256;\r\n    BEP20 public depositToken;\r\n    uint256 totalUsers;\r\n    address public owner;\r\n    uint256 public baseDiv;\r\n\r\n\r\n    event Init(address Owner,uint256 Divident,address DepositToken);\r\n    constructor (){\r\n        owner = msg.sender;        \r\n    }\r\n\r\n\r\n    uint256[] public pkgs = [0,10e18,20e18,40e18,80e18,160e18,320e18,640e18,1280e18,2560e18,5120e18];\r\n    uint256[] public levelIncome = [40,4,3,2,1];\r\n    uint40[] private slotDiv= [0,5,5,5,5,4,4,4,4,3,3];\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender== owner,\"Only Owner Can Execute this!\");\r\n        _;\r\n    }\r\n\r\n    struct User{        \r\n        uint256 id;\r\n        address sponsor;\r\n        uint40 directs;\r\n        uint40 activePkg;\r\n        uint256 balance;\r\n        bool royalty_status;\r\n        uint40 myRoyaltyusers;\r\n    }\r\n\r\n    struct income{\r\n        uint256 level;\r\n        uint256 slot;\r\n        uint256 direct;\r\n        uint256 royalty;\r\n    }\r\n\r\n    struct slot{\r\n        uint40 id;\r\n        uint256 userId;\r\n        uint40 parentId;\r\n        uint40 downline;\r\n    }\r\n\r\n    mapping (uint40=>mapping (uint40=>uint256)) public slotincome;\r\n    mapping (uint40=>mapping (uint40=>uint40)) public currentslotupdate;\r\n    mapping (uint40=>mapping (uint40=>uint40)) public nextslotupdate;\r\n    //uint256[][] private slotincome; \r\n    //uint40[][] private currentslotupdate; \r\n    //uint40[][] private nextslotupdate; \r\n    uint256 public royalty;\r\n    address[] public royaltyusers;\r\n    \r\n    mapping (address=>User) public users;\r\n    mapping (uint256=>address) public idToAddress;\r\n    mapping (address=>address[]) public directs;\r\n    mapping (address=>income) public incomes;\r\n    mapping (uint40=>mapping (uint40=>uint40)) public slotusersCount;\r\n    mapping (uint40=>mapping (uint40=>mapping (uint40=>uint40[]))) public slotChilds;\r\n    mapping (uint40=>mapping (uint40=>mapping (uint40=>slot))) public slotusers;\r\n    mapping (address=>mapping (uint40=>mapping (uint40=>uint40[]))) public myslot;\r\n    mapping (address=>mapping (uint40=>uint40)) public userMaxSlot;\r\n    mapping (address=>mapping (uint40=>uint256)) public userslotIncome;\r\n\r\n    function getSlotUsers(address addr,uint40 slt) public view returns(uint256[] memory){\r\n        uint256[] memory ret1 = new uint256[](8);\r\n        for (uint40 i = 0; i < 8; i++) {          \r\n            ret1[i] = myslot[addr][slt][i+1].length;\r\n        }\r\n        return (ret1);\r\n    } \r\n    function poolData(address addr,uint40 slt,uint40 lvl,uint40 prnt)public view returns(address[] memory){\r\n        address[] memory ret1 = new address[](5);\r\n        uint40 sn=myslot[addr][slt][lvl][prnt];\r\n        for (uint40 i = 0; i < slotChilds[slt][lvl][sn].length; i++) { \r\n            uint40 polid =  slotChilds[slt][lvl][sn][i];\r\n            ret1[i] = idToAddress[slotusers[slt][lvl][polid].userId];\r\n        }       \r\n        return ret1;\r\n    }   \r\n\r\n    function init1()public onlyOwner(){\r\n\r\n        slotincome[1][0]=8e18;\r\n        slotincome[1][1]=24e18;\r\n        slotincome[1][2]=62e18;\r\n        slotincome[1][3]=166e18;\r\n        slotincome[1][4]=608e18;\r\n        slotincome[1][5]=4800e18;\r\n        \r\n                  \r\n        \r\n        slotincome[3][0]=32e18;\r\n        slotincome[3][1]=96e18;\r\n        slotincome[3][2]=248e18;\r\n        slotincome[3][3]=664e18;\r\n        slotincome[3][4]=2432e18;\r\n        slotincome[3][5]=19200e18;\r\n        \r\n        slotincome[4][0]=64e18;\r\n        slotincome[4][1]=192e18;\r\n        slotincome[4][2]=496e18;\r\n        slotincome[4][3]=1328e18;\r\n        slotincome[4][4]=4864e18;\r\n        slotincome[4][5]=38400e18;\r\n        \r\n        slotincome[5][0]=128e18;\r\n        slotincome[5][1]=256e18;\r\n        slotincome[5][2]=352e18;\r\n        slotincome[5][3]=544e18;\r\n        slotincome[5][4]=1728e18;\r\n        slotincome[5][5]=3776e18;\r\n        slotincome[5][6]=7552e18; \r\n        slotincome[5][7]=32128e18;\r\n\r\n        slotincome[6][0]=256e18;\r\n        slotincome[6][1]=512e18;\r\n        slotincome[6][2]=704e18;\r\n        slotincome[6][3]=688e18;\r\n        slotincome[6][4]=3456e18;\r\n        slotincome[6][5]=7552e18;\r\n        slotincome[6][6]=15104e18; \r\n        slotincome[6][7]=64256e18;  \r\n\r\n        slotincome[7][0]=512e18;\r\n        slotincome[7][1]=1024e18;\r\n        slotincome[7][2]=1408e18;\r\n        slotincome[7][3]=2176e18;\r\n        slotincome[7][4]=6912e18;\r\n        slotincome[7][5]=15104e18;\r\n        slotincome[7][6]=30160e18; \r\n        slotincome[7][7]=128112e18;\r\n\r\n        slotincome[8][0]=1024e18;\r\n        slotincome[8][1]=2048e18;\r\n        slotincome[8][2]=2860e18;\r\n        slotincome[8][3]=4352e18;\r\n        slotincome[8][4]=13824e18;\r\n        slotincome[8][5]=30108e18;\r\n        slotincome[8][6]=60216e18; \r\n        slotincome[8][7]=256224e18;\r\n\r\n        slotincome[9][0]=1024e18;\r\n        slotincome[9][1]=2048e18;\r\n        slotincome[9][2]=4096e18;\r\n        slotincome[9][3]=5632e18;\r\n        slotincome[9][4]=16896e18;\r\n        slotincome[9][5]=93184e18;\r\n\r\n        slotincome[10][0]=2048e18;\r\n        slotincome[10][1]=4096e18;\r\n        slotincome[10][2]=8192e18;\r\n        slotincome[10][3]=11228e18;\r\n        slotincome[10][4]=27648e18;\r\n        slotincome[10][5]=186368e18;\r\n    }\r\n\r\n    function init2()public onlyOwner(){\r\n        for (uint40 a = 1; a <= 4; a++) {\r\n            currentslotupdate[a][0]=0;\r\n            currentslotupdate[a][1]=0;\r\n            currentslotupdate[a][2]=1;\r\n            currentslotupdate[a][3]=3;\r\n            currentslotupdate[a][4]=4;\r\n            currentslotupdate[a][5]=6;\r\n             \r\n        }\r\n        \r\n        for (uint40 a = 5; a <= 8; a++) {\r\n            currentslotupdate[a][0]=0;\r\n            currentslotupdate[a][1]=0;\r\n            currentslotupdate[a][2]=1;\r\n            currentslotupdate[a][3]=1;\r\n            currentslotupdate[a][4]=2;\r\n            currentslotupdate[a][5]=2;        \r\n            currentslotupdate[a][6]=4;        \r\n            currentslotupdate[a][7]=4; \r\n        }\r\n\r\n        for (uint40 a = 9; a <= 10; a++) {\r\n            currentslotupdate[a][0]=0;\r\n            currentslotupdate[a][1]=0;\r\n            currentslotupdate[a][2]=0;\r\n            currentslotupdate[a][3]=1;\r\n            currentslotupdate[a][4]=1;\r\n            currentslotupdate[a][5]=2;       \r\n        }\r\n    }\r\n\r\n    function init3()public onlyOwner(){\r\n        for (uint40 b = 1; b <= 4; b++) {\r\n            nextslotupdate[b][0]=0;\r\n            nextslotupdate[b][1]=0;\r\n            nextslotupdate[b][2]=0;\r\n            nextslotupdate[b][3]=1;\r\n            nextslotupdate[b][4]=0;\r\n            nextslotupdate[b][5]=0;\r\n        }\r\n       \r\n        for (uint40 b = 5; b <= 8; b++) {\r\n            nextslotupdate[b][0]=0;\r\n            nextslotupdate[b][1]=0;\r\n            nextslotupdate[b][2]=0;\r\n            nextslotupdate[b][3]=1;\r\n            nextslotupdate[b][4]=0;\r\n            nextslotupdate[b][5]=0;        \r\n            nextslotupdate[b][6]=0;        \r\n            nextslotupdate[b][7]=0; \r\n        }\r\n        \r\n        for (uint40 b = 9; b <= 10; b++) {\r\n            nextslotupdate[b][0]=0;\r\n            nextslotupdate[b][1]=0;\r\n            nextslotupdate[b][2]=0;\r\n            nextslotupdate[b][3]=0;\r\n            nextslotupdate[b][4]=1;\r\n            nextslotupdate[b][5]=0; \r\n        }\r\n    }\r\n    address private  royaltyusr;\r\n    function init(address _royaltyusr, address _owner,uint256 divd,address _depositToken) public onlyOwner() {\r\n        totalUsers++;\r\n        users[_owner].id =  1;\r\n        users[_owner].activePkg =  10;\r\n        baseDiv = divd;\r\n        depositToken=BEP20(_depositToken);\r\n        idToAddress[1]=_owner;\r\n        royaltyusr = _royaltyusr;\r\n        for (uint40 i = 1; i <= pkgs.length; i++) {\r\n            for (uint40 j = 1; j <= 8; j++) {\r\n                slotusersCount[i][j]=1;\r\n                slotusers[i][j][1]=slot(1,1,0,0);\r\n                myslot[_owner][i][j].push(1);\r\n            }\r\n            userMaxSlot[_owner][i]=1;\r\n        }        \r\n        emit Init(_owner,divd, _depositToken);\r\n    }\r\n\r\n    function slotData(address addr) public view returns(uint256[] memory,uint256[] memory){\r\n              \r\n        uint256[] memory ret1 = new uint256[](10);        \r\n        uint256[] memory ret2 = new uint256[](10);        \r\n        \r\n        for (uint8 i = 1; i <= 10; i++) {             \r\n            ret1[i-1] = userMaxSlot[addr][i];//Matrix[addr][i].currentcycle;\r\n            ret2[i-1] = userslotIncome[addr][i];//Matrix[addr][i].currentcycle;\r\n            \r\n        }        \r\n        return (ret1,ret2);\r\n    }\r\n    \r\n\r\n    function register(address sponsor) public {\r\n        require(users[sponsor].id>0,\"Sponsor Not Exists!\");\r\n        totalUsers++;\r\n        users[msg.sender].id =  totalUsers;\r\n        users[msg.sender].sponsor =  sponsor;\r\n        users[sponsor].directs +=1 ;\r\n        directs[sponsor].push(msg.sender);\r\n        idToAddress[totalUsers]=msg.sender;\r\n        upgrade(1,msg.sender);\r\n\r\n    } \r\n\r\n    function upgrade(uint40 indx,address usr) public {\r\n        require(users[usr].activePkg==indx-1,\"Update Previous First!\");\r\n        uint256 amnt = pkgs[indx];\r\n        depositToken.transferFrom(usr, address(this), amnt);\r\n        users[usr].activePkg = indx;\r\n\r\n        if(users[usr].royalty_status==false && indx==5){\r\n            \r\n            users[usr].royalty_status=true;\r\n            address sp=users[usr].sponsor;\r\n            if(users[sp].royalty_status==true){\r\n\r\n                users[sp].myRoyaltyusers++;\r\n                if(users[sp].myRoyaltyusers==3){\r\n                   royaltyusers.push(sp);  \r\n                }\r\n            }\r\n        }\r\n        royalty += amnt*10/100;\r\n        depositToken.transfer(royaltyusr,amnt*10/100);\r\n        levelDistribute(usr, amnt);\r\n        addmember(uint40(users[usr].id),indx,1);\r\n    }\r\n    \r\n    function mydirects(address myadd) public view returns(address[] memory,uint40[] memory){\r\n        \r\n        uint40[] memory ret1 = new uint40[](users[myadd].directs);\r\n        for (uint256 i = 0; i < users[myadd].directs; i++) {\r\n            ret1[i] = users[directs[myadd][i]].directs;\r\n        } \r\n        return (directs[myadd],ret1);\r\n        \r\n    }\r\n\r\n    function distribute_royalty() public onlyOwner(){\r\n        uint256 amount = royalty/royaltyusers.length;\r\n         for(uint8 i=0;i<royaltyusers.length;i++){\r\n             address _id = royaltyusers[i];\r\n            incomes[_id].royalty += amount;\r\n            //users[usrss].balance += incmo;\r\n            depositToken.transfer(_id,amount);\r\n         }\r\n         royalty =0;\r\n    }\r\n\r\n    function levelDistribute(address usr,uint256 amnt) internal {\r\n        address getId=usr;\r\n        for (uint256 i = 0; i < levelIncome.length; i++) {\r\n            getId = users[getId].sponsor;\r\n            if(getId!= address(0)){\r\n                if(i==0){\r\n                    incomes[getId].direct += amnt.mul(levelIncome[i]).div(baseDiv);\r\n                }else{\r\n                    incomes[getId].level += amnt.mul(levelIncome[i]).div(baseDiv);\r\n                }\r\n               // users[getId].balance += amnt.mul(levelIncome[i]).div(baseDiv);\r\n                depositToken.transfer(getId,amnt.mul(levelIncome[i]).div(baseDiv));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function addmember(uint40 usr,uint40 slt,uint40 lvl) internal {\r\n        uint40 sldiv = slotDiv[slt];\r\n        uint40 getprnt=findPlacement(slt,lvl);        \r\n        slotusersCount[slt][lvl]++;\r\n        uint40 poolUsers = slotusersCount[slt][lvl]; \r\n        slotusers[slt][lvl][poolUsers].id=poolUsers;\r\n        slotusers[slt][lvl][poolUsers].parentId=getprnt;\r\n        slotusers[slt][lvl][poolUsers].userId=usr;\r\n        slotusers[slt][lvl][getprnt].downline++;\r\n        slotChilds[slt][lvl][getprnt].push(poolUsers);\r\n\r\n        address usrsss = idToAddress[usr];\r\n        if(userMaxSlot[usrsss][slt]<lvl){\r\n            userMaxSlot[usrsss][slt]=lvl;\r\n        } \r\n\r\n        if(slotusers[slt][lvl][getprnt].downline==sldiv){ \r\n\r\n            uint256 getId = slotusers[slt][lvl][getprnt].userId;\r\n            uint256 incmo = slotincome[slt][lvl-1];\r\n            address usrss = idToAddress[getId];\r\n            incomes[usrss].slot += incmo;\r\n            \r\n            depositToken.transfer(usrss,incmo);\r\n            userslotIncome[usrss][slt] += incmo;\r\n\r\n            addmember(uint40(getId),slt,(lvl+1)); \r\n            uint40 upd = currentslotupdate[slt][lvl-1];\r\n\r\n            \r\n            if(upd>0){\r\n                for(uint40 i;i<upd;i++){\r\n                    addmember(uint40(getId),slt,1);\r\n                }\r\n            }\r\n            \r\n            uint40 nupd = nextslotupdate[slt][lvl-1];\r\n            if(nupd>0){\r\n                for(uint40 j;j<nupd;j++){\r\n                    addmember(uint40(getId),slt+1,1);\r\n                }\r\n            }\r\n        }\r\n        address usrnw=idToAddress[usr];\r\n        myslot[usrnw][slt][lvl].push(poolUsers);\r\n    }\r\n\r\n    function findPlacement(uint40 slot_no,uint40 lvl) public view returns(uint40) {\r\n        uint40 sldiv = slotDiv[slot_no];\r\n        uint40 poolUsers = slotusersCount[slot_no][lvl]; \r\n        uint40 prntid = (poolUsers-1)/sldiv;\r\n        uint40 prt = prntid+1;\r\n        return(prt);\r\n    }\r\n\r\n    function withdraw(uint256 amount , BEP20 tkn)public onlyOwner{\r\n        //require(users[msg.sender].balance>amount,\"Insufficient Fund.\");\r\n        //users[msg.sender].balance -= amount;\r\n        tkn.transfer(msg.sender,amount);\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Divident\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"DepositToken\",\"type\":\"address\"}],\"name\":\"Init\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"currentslotupdate\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"directs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute_royalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"slot_no\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"lvl\",\"type\":\"uint40\"}],\"name\":\"findPlacement\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"slt\",\"type\":\"uint40\"}],\"name\":\"getSlotUsers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyusr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"divd\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"myadd\",\"type\":\"address\"}],\"name\":\"mydirects\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint40[]\",\"name\":\"\",\"type\":\"uint40[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myslot\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"nextslotupdate\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pkgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"slt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"lvl\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"prnt\",\"type\":\"uint40\"}],\"name\":\"poolData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyusers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slotChilds\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"slotData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"slotincome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"slotusers\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"id\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"parentId\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"downline\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"slotusersCount\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"indx\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"userMaxSlot\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"directs\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"activePkg\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"royalty_status\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"myRoyaltyusers\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"userslotIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract BEP20\",\"name\":\"tkn\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Crowd7", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8616008df7cc441483ec01ee0427b7bd1ca623a3a8a3c253220c967b4dc07f1"}