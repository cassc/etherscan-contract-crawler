{"SourceCode": "{\"library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = byte(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function _onlyOwner() view private {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        require((allowance(_msgSender(), spender) == 0) || (amount == 0), \\\"ERC20: change allowance use increaseAllowance or decreaseAllowance instead\\\");\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: APPROVE_FAILED\\u0027);\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FAILED\\u0027);\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FROM_FAILED\\u0027);\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\u0027TransferHelper: ETH_TRANSFER_FAILED\\u0027);\\n    }\\n}\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\n\\n\\ninterface IOGSToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n    function burn(uint256 amount) external;\\n    function setMintable(address account, bool allow) external;\\n}\\n\\ninterface IOUROToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n    function burn(uint256 amount) external;\\n    function setMintable(address account, bool allow) external;\\n}\\n\\ninterface IOUROReserve {\\n    function getPrice() external view returns(uint256);\\n    function getAssetBalance(address token) external view returns(uint256);\\n    function getAssetPrice(AggregatorV3Interface feed) external view returns(uint256);\\n\\n    function getCollateral(address token) external view returns (\\n        address vTokenAddress,\\n        uint256 assetUnit, // usually 1e18\\n        uint256 lastPrice, // record latest collateral price\\n        AggregatorV3Interface priceFeed // asset price feed for xxx/USDT\\n    );\\n\\n    function getOuroIn(uint256 amount, address token) external view returns(uint256);\\n    function getAssetsIn(uint256 amountOURO, address token) external view returns(uint256);\\n    \\n    function deposit(address token, uint256 amountAsset, uint256 minAmountOuro) external payable returns (uint256 OUROMinted);\\n    function withdraw(address token, uint256 amountAsset, uint256 maxAmountOuro) external returns(uint256 OUROTaken);\\n}\\n\\ninterface IOURODist {\\n    function isDist() external view returns (bool);\\n    function revenueArrival(address token, uint256 assetAmount) external;\\n    function resetAllowance(address token) external;\\n}\\n\\ninterface IVenusDistribution {\\n    function oracle() external view returns (address);\\n\\n    function enterMarkets(address[] memory _vtokens) external;\\n    function exitMarket(address _vtoken) external;\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n\\n    function markets(address vTokenAddress) external view returns (bool, uint, bool);\\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\\n\\n    function claimVenus(address holder, address[] memory vTokens) external;\\n    function venusSpeeds(address) external view returns (uint);\\n}\\n\\ninterface IWBNB is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\\ninterface IVBNB {\\n    function totalSupply() external view returns (uint);\\n\\n    function mint() external payable;\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow() external payable;\\n\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n\\n    function exchangeRateCurrent() external returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n\\n    function supplyRatePerBlock() external view returns (uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n}\\n\\ninterface IVToken is IERC20 {\\n    function underlying() external returns (address);\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n\\n    function exchangeRateCurrent() external returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n\\n    function supplyRatePerBlock() external view returns (uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n}\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () public {\\n        _status = _NOT_ENTERED;\\n    }\\n    \\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() public {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"},\"ouro_reserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./library.sol\\\";\\n\\n/**\\n * @title OURO community reserve\\n */\\ncontract OUROReserve is IOUROReserve,Ownable,ReentrancyGuard,Pausable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n    using Address for address payable;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IOUROToken;\\n    using SafeERC20 for IOGSToken;\\n    \\n    /** \\n     * ======================================================================================\\n     * \\n     * SHARED SETTINGS\\n     * \\n     * ======================================================================================\\n     */\\n\\n    // @dev ouro price \\n    uint256 public ouroPrice = 1e18; // current ouro price, initially 1 OURO = 1 USD\\n    uint256 public ouroPriceAtMonthStart = 1e18; // ouro price at the begining of a month, initially set to 1 USD\\n    uint256 public constant OURO_PRICE_UNIT = 1e18; // 1 OURO = 1e18\\n    uint public ouroLastPriceUpdate = block.timestamp; \\n    uint public ouroPriceResetPeriod = 30 days; // price limit reset mothly\\n    uint public ouroIssuePeriod = 30 days; // ouro issuance limit\\n    uint public appreciationLimit = 3; // 3% monthly OURO price appreciation limit\\n\\n    // contracts\\n    address public constant busdContract = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    IOUROToken public constant ouroContract = IOUROToken(0x0a4FC79921f960A4264717FeFEE518E088173a79);\\n    IOGSToken public constant ogsContract = IOGSToken(0x416947e6Fc78F158fd9B775fA846B72d768879c2);\\n    IOURODist public ouroDistContact = IOURODist(0x15a59d5f5847df9f6c24272096E967fa10ffb18a);\\n    address public constant unitroller = 0xfD36E2c2a6789Db23113685031d7F16329158384;\\n    address public constant xvsAddress = 0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63;\\n    IPancakeRouter02 public constant router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address public lastResortFund;\\n    \\n    address immutable internal WBNB = router.WETH();\\n    uint256 constant internal USD_UNIT = 1e18;\\n    uint256 constant internal MAX_UINT256 = uint256(-1);\\n    \\n    // @dev montly OURO issuance schedule in 100k(1e5) OURO\\n    uint16 [] public issueSchedule = [1,10,30,50,70,100,150,200,300,400,500,650,800];\\n    uint256 internal constant issueUnit = 1e5 * OURO_PRICE_UNIT;\\n    \\n    // @dev scheduled issue from\\n    uint256 public immutable issueFrom = block.timestamp;\\n    \\n    // a struct to store collateral asset info\\n    struct CollateralInfo {\\n        address token;\\n        address vTokenAddress;\\n        uint256 assetUnit; // usually 1e18\\n        uint256 lastPrice; // record latest collateral price\\n        AggregatorV3Interface priceFeed; // asset price feed for xxx/USDT\\n    }\\n    \\n    // all registered collaterals for OURO\\n    CollateralInfo [] private collaterals;\\n    \\n    // a mapping to track the balance of assets;\\n    mapping (address =\\u003e uint256) private _assetsBalance;\\n    \\n    // whitelist for deposit assets \\n    bool public whiteListEnabled;\\n    mapping (address =\\u003e bool) private _whitelist;\\n    \\n    /**\\n     * ======================================================================================\\n     * \\n     * VIEW FUNCTIONS\\n     * \\n     * ======================================================================================\\n     */\\n     \\n    /**\\n     * @dev get specific collateral balance\\n     */\\n    function getAssetBalance(address token) external override view returns(uint256) { return _assetsBalance[token]; }\\n    \\n    /**\\n     * @dev get specific collateral info\\n     */\\n    function getCollateral(address token) external override view returns (\\n        address vTokenAddress,\\n        uint256 assetUnit, // usually 1e18\\n        uint256 lastPrice, // record latest collateral price\\n        AggregatorV3Interface priceFeed // asset price feed for xxx/USDT\\n    ) {\\n        (CollateralInfo memory collateral, bool valid) = _findCollateral(token);\\n        if (valid) {\\n            return (\\n                collateral.vTokenAddress,\\n                collateral.assetUnit,\\n                collateral.lastPrice,\\n                collateral.priceFeed\\n            );\\n        }\\n    }\\n\\n    /** \\n     * @dev get system defined OURO price\\n     */\\n    function getPrice() public view override returns(uint256) { return ouroPrice; }\\n    \\n    /**\\n     * @dev get asset price in USDT for 1 unit of asset\\n     */\\n    function getAssetPrice(AggregatorV3Interface feed) public override view returns(uint256) {\\n        // query price from chainlink\\n        (, int latestPrice, , , ) = feed.latestRoundData();\\n\\n        // avert negative price\\n        _require(latestPrice \\u003e 0);\\n        \\n        // return price corrected to USD decimal\\n        // always align the price to USD decimal, which is 1e18 on BSC and 1e6 on Ethereum\\n        return uint256(latestPrice)\\n                        .mul(USD_UNIT)\\n                        .div(10**uint256(feed.decimals()));\\n    }\\n\\n    /**\\n     * @dev returns OURO required to swap given assets out\\n     */\\n    function getOuroIn(uint256 amount, address token) external override view returns(uint256) {\\n        (CollateralInfo memory collateral, bool valid) = _findCollateral(token);\\n        _require(valid);\\n        return _lookupAssetValueInOURO(collateral.priceFeed, collateral.assetUnit, amount);\\n    }\\n\\n    /**\\n     * @dev returns assets required to mint given amount of OURO out\\n     */\\n    function getAssetsIn(uint256 amountOURO, address token) external override view returns(uint256) {\\n        (CollateralInfo memory collateral, bool valid) = _findCollateral(token);\\n        _require(valid);\\n\\n        // ouro USD value\\n        uint256 ouroValue = amountOURO\\n                            .mul(ouroPrice)\\n                            .div(OURO_PRICE_UNIT);\\n\\n        // get 1 unit(collateral.assetUnit) asset value in USD \\n        uint256 assetUnitPrice = getAssetPrice(collateral.priceFeed);\\n\\n        // assets required\\n        return ouroValue\\n                            .mul(collateral.assetUnit)\\n                            .div(assetUnitPrice);\\n    }\\n    \\n     /**\\n     * ======================================================================================\\n     * \\n     * SYSTEM FUNCTIONS\\n     * \\n     * ======================================================================================\\n     */\\n     \\n    receive() external payable {}\\n    \\n    // code size cheaper version of require\\n    function _require(bool condition, string memory text) private pure {\\n        require (condition, text);\\n    }\\n    \\n    function _require(bool condition) private pure {\\n        require (condition);\\n    }\\n\\n    modifier checkWhiteList() {\\n        if (whiteListEnabled) {\\n            _require(_whitelist[msg.sender]);\\n        }        \\n        _;\\n    }\\n    \\n    constructor() public {\\n        lastResortFund = msg.sender;\\n        // approve xvs to router\\n        IERC20(xvsAddress).safeApprove(address(router), MAX_UINT256);\\n        // approve ogs to router\\n        IERC20(ogsContract).safeApprove(address(router), MAX_UINT256);\\n        // approve ouro to router\\n        IERC20(ouroContract).safeApprove(address(router), MAX_UINT256);\\n    }\\n    \\n    /**\\n     * @dev set fund of last resort address\\n     */\\n    function setLastResortFund(address account) external onlyOwner {\\n        _require(account != address(0));\\n        lastResortFund = account;\\n        emit LastResortFundSet(account);\\n    }\\n\\n    /**\\n     * @dev adjust OGS buy back ratio\\n     */\\n    function setOGSBuyBackRatio(uint ratio) external onlyOwner {\\n        _require(ratio \\u003e= 0 \\u0026\\u0026 ratio \\u003c= 100);\\n        OGSbuyBackRatio = ratio;\\n        emit OGSbuyBackRatioSet(ratio);\\n    }\\n\\n    /**\\n     * @dev adjust rebase period\\n     */\\n    function setRebasePeriod(uint period) external onlyOwner {\\n        _require(period \\u003e= 1 hours \\u0026\\u0026 period \\u003c= 24 hours);\\n        rebasePeriod = period;\\n        emit RebasePeriodSet(period);\\n    }\\n\\n    /**\\n     * @dev owner add new collateral\\n     */\\n    function newCollateral(\\n        address token, \\n        address vTokenAddress,\\n        uint8 assetDecimal,\\n        AggregatorV3Interface priceFeed\\n        ) external onlyOwner\\n    {\\n        (, bool exist) = _findCollateral(token);\\n        _require(!exist);\\n        if (address(token) != WBNB) {\\n            _require(IVToken(vTokenAddress).underlying() == token, \\\"vtoken\\\");\\n        }\\n\\n        uint256 currentPrice = getAssetPrice(priceFeed);\\n        \\n        // create collateral info \\n        CollateralInfo memory info;\\n        info.token = token;\\n        info.vTokenAddress = vTokenAddress;\\n        info.assetUnit = 10 ** uint256(assetDecimal);\\n        info.lastPrice = currentPrice;\\n        info.priceFeed = priceFeed;\\n\\n        collaterals.push(info);\\n        \\n        // approve ERC20 collateral to swap router \\u0026 vToken\\n        if (address(token) != WBNB) {\\n            IERC20(token).safeApprove(address(router), 0);\\n            IERC20(token).safeIncreaseAllowance(address(router), MAX_UINT256);\\n            \\n            IERC20(token).safeApprove(vTokenAddress, 0);\\n            IERC20(token).safeIncreaseAllowance(vTokenAddress, MAX_UINT256);\\n        }\\n        \\n        // enter markets\\n        address[] memory venusMarkets = new address[](1);\\n        venusMarkets[0] = vTokenAddress;\\n        IVenusDistribution(unitroller).enterMarkets(venusMarkets);\\n\\n        // log\\n        emit NewCollateral(token);\\n    }\\n    \\n    /**\\n     * @dev owner remove collateral\\n     */\\n    function removeCollateral(address token) external onlyOwner {\\n        uint n = collaterals.length;\\n        for (uint i=0;i\\u003cn;i++) {\\n            if (collaterals[i].token == token){\\n                \\n                // found! revoke router \\u0026 vToken allowance to 0\\n                if (address(token) != WBNB) {\\n                    IERC20(token).safeApprove(address(router), 0);\\n                    IERC20(token).safeApprove(collaterals[i].vTokenAddress, 0);\\n                }\\n                \\n                // exit venus markets\\n                IVenusDistribution(unitroller).exitMarket(collaterals[i].vTokenAddress);\\n                \\n                // copy the last element [n-1] to [i],\\n                collaterals[i] = collaterals[n-1];\\n                // and pop out the last element\\n                collaterals.pop();\\n                \\n                // log\\n                emit RemoveCollateral(token);\\n                \\n                return;\\n            }\\n        } \\n        \\n        revert(\\\"nonexistent\\\");\\n    }\\n    \\n    /**\\n     * @dev owner reset allowance to maximum\\n     * to avert uint256 exhausting\\n     */\\n    function resetAllowances() external onlyOwner {\\n        uint n = collaterals.length;\\n        for (uint i=0;i\\u003cn;i++) {\\n            IERC20 token = IERC20(collaterals[i].token);\\n            if (address(token) != WBNB) {\\n                // re-approve asset to venus\\n                token.safeApprove(address(router), 0);\\n                token.safeIncreaseAllowance(address(router), MAX_UINT256);\\n                \\n                token.safeApprove(collaterals[i].vTokenAddress, 0);\\n                token.safeIncreaseAllowance(collaterals[i].vTokenAddress, MAX_UINT256);\\n            }\\n        }\\n        \\n        // re-approve xvs to router\\n        IERC20(xvsAddress).safeApprove(address(router), 0);\\n        IERC20(xvsAddress).safeIncreaseAllowance(address(router), MAX_UINT256);\\n        \\n        // re-approve ogs to router\\n        IERC20(ogsContract).safeApprove(address(router), 0);\\n        IERC20(ogsContract).safeIncreaseAllowance(address(router), MAX_UINT256);\\n        \\n        // re-approve ouro to router\\n        IERC20(ouroContract).safeApprove(address(router), 0);\\n        IERC20(ouroContract).safeIncreaseAllowance(address(router), MAX_UINT256);\\n        \\n        // log\\n        emit AllowanceReset();\\n    }\\n         \\n     /**\\n      * @dev change ouro revenue distribution contract address\\n      * in case of severe bug\\n      */\\n     function changeOURODist(address newContract) external onlyOwner {\\n         _require (IOURODist(newContract).isDist());\\n         ouroDistContact = IOURODist(newContract);\\n         \\n         emit OuroDistChanged(newContract);\\n     }\\n    \\n    /**\\n     * @dev toggle deposit whitelist enabled\\n     */\\n    function toggleWhiteList() external onlyOwner {\\n        whiteListEnabled = whiteListEnabled?false:true;\\n        \\n        emit WhiteListToggled(whiteListEnabled);\\n    }\\n    \\n    /**\\n     * @dev set to whiteist\\n     */\\n    function setToWhiteList(address account, bool allow) external onlyOwner {\\n        _whitelist[account] = allow;\\n        \\n        emit WhiteListSet(account, allow);\\n    }\\n\\n    /**\\n     * @dev emergency withdraw the vTokens, only when severe contract vulnerability found.\\n     */\\n    function emergencyWithdraw(address to) external onlyOwner {\\n        uint n = collaterals.length;\\n        for (uint i=0;i\\u003cn;i++) {            \\n            // withdraw all tokens\\n            uint256 amount = IERC20(collaterals[i].vTokenAddress).balanceOf(address(this));\\n            if (amount \\u003e 0) {\\n                IERC20(collaterals[i].vTokenAddress).safeTransfer(to, amount);\\n            }\\n        }\\n\\n        // log\\n        emit EmergencyWithdraw(msg.sender, to);\\n    }\\n    \\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     **/\\n    function pause() onlyOwner external { _pause(); }\\n\\n    /**\\n    * @dev called by the owner to unpause, returns to normal state\\n    */\\n    function unpause() onlyOwner external { _unpause(); }\\n    \\n    /**\\n     * ======================================================================================\\n     * \\n     * OURO\\u0027s collateral deposit \\u0026 withdraw\\n     *\\n     * ======================================================================================\\n     */\\n    /**\\n     * @dev user deposit assets and receive OURO\\n     * @notice users need approve() assets to this contract\\n     * returns OURO minted\\n     * the minimum amount of OURO willing to receive is given as minAmountOuro.\\n     */\\n    function deposit(address token, uint256 amountAsset, uint256 minAmountOuro) \\n        external \\n        override \\n        payable \\n        checkWhiteList \\n        nonReentrant \\n        whenNotPaused \\n        returns (uint256 OUROMinted) {\\n\\n        // ouro balance of user BEFORE deposit\\n        uint256 amountOuroMinted = IERC20(ouroContract).balanceOf(msg.sender);\\n\\n        // deposit\\n        _deposit(token, amountAsset); \\n\\n        // diff of ouro balance of user AFTER deposit\\n        amountOuroMinted = IERC20(ouroContract).balanceOf(msg.sender).sub(amountOuroMinted);\\n\\n        _require(amountOuroMinted \\u003e= minAmountOuro);\\n\\n        return amountOuroMinted;\\n    }\\n\\n    function _deposit(address token, uint256 amountAsset) private {\\n        // locate collateral\\n        (CollateralInfo memory collateral, bool valid) = _findCollateral(token);\\n        _require(valid);\\n\\n        // for native token, replace amountAsset with use msg.value instead\\n        if (token == WBNB) {\\n            amountAsset = msg.value;\\n        }\\n        \\n        // non-0 deposit check\\n        _require(amountAsset \\u003e 0);\\n\\n        // get equivalent OURO value\\n        uint256 assetValueInOuro = _lookupAssetValueInOURO(collateral.priceFeed, collateral.assetUnit, amountAsset);\\n        \\n        // check periodical OURO issuance limit\\n        uint periodN = block.timestamp.sub(issueFrom).div(ouroIssuePeriod);\\n        if (periodN \\u003c issueSchedule.length) { // still in control\\n            _require(assetValueInOuro.add(IERC20(ouroContract).totalSupply()) \\n                        \\u003c=\\n                    uint256(issueSchedule[periodN]).mul(issueUnit),\\n                    \\\"limited\\\"\\n            );\\n        }\\n        \\n        // transfer token assets to this contract\\n        // @notice for ERC20 assets, users need to approve() to this reserve contract \\n        if (token != WBNB) {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amountAsset);\\n        }\\n                                        \\n        // mint OURO to sender\\n        IOUROToken(ouroContract).mint(msg.sender, assetValueInOuro);\\n        \\n        // update asset balance\\n        _assetsBalance[token] = _assetsBalance[token].add(amountAsset);\\n\\n        // finally we farm the assets received\\n        _supply(collateral.token, collateral.vTokenAddress, amountAsset);\\n        \\n        // log\\n        emit Deposit(msg.sender, assetValueInOuro);\\n    }\\n    \\n    /**\\n     * @dev farm the user\\u0027s deposit\\n     */\\n    function _supply(address token, address vTokenAddress, uint256 amountAsset) internal {\\n        if (token == WBNB) {\\n            IVBNB(vTokenAddress).mint{value: amountAsset}();\\n        } else {\\n            IVToken(vTokenAddress).mint(amountAsset);\\n        }\\n    }\\n    \\n    /**\\n     * @dev user swap his OURO back to assets\\n     * @notice users need approve() OURO assets to this contract\\n     * the max amount of OURO willing to swap in is given by maxAmountOuro\\n     */\\n    function withdraw(address token, uint256 amountAsset, uint256 maxAmountOuro) external override nonReentrant returns (uint256 OUROTaken) {\\n        // ouro balance of user BEFORE deposit\\n        uint256 amountOuroTaken = IERC20(ouroContract).balanceOf(msg.sender);\\n\\n        // withdraw\\n        _withdraw(token, amountAsset); \\n\\n        // diff of ouro balance of user AFTER withdraw\\n        amountOuroTaken = amountOuroTaken.sub(IERC20(ouroContract).balanceOf(msg.sender));\\n\\n        _require(amountOuroTaken \\u003c= maxAmountOuro);\\n\\n        return amountOuroTaken;\\n    }\\n\\n    function _withdraw(address token, uint256 amountAsset) private { \\n        // non 0 check\\n        _require(amountAsset \\u003e 0);\\n        _require(_assetsBalance[token] \\u003e 0);\\n        \\n        // locate collateral\\n        (CollateralInfo memory collateral, bool valid) = _findCollateral(token);\\n        _require(valid);\\n\\n        // CAP amountAsset to maximum available\\n        amountAsset = amountAsset \\u003e _assetsBalance[token] ? _assetsBalance[token]: amountAsset;\\n\\n        // substract asset balance\\n        _assetsBalance[token] = _assetsBalance[token].sub(amountAsset);\\n        \\n        // transfer user\\u0027s equivalent OURO token to this contract directly, and burn OURO\\n        uint256 assetValueInOuro = _lookupAssetValueInOURO(collateral.priceFeed, collateral.assetUnit, amountAsset);\\n        IERC20(ouroContract).safeTransferFrom(msg.sender, address(this), assetValueInOuro);\\n        IOUROToken(ouroContract).burn(assetValueInOuro);\\n        \\n        // Find out the exact number of assets redeemed to return to caller\\n        //--------------------------------------------------------------------------------\\n        // balance - BEFORE ( normally should be 0 )\\n        uint256 amountRedeemed;\\n        if (token == WBNB) {\\n            amountRedeemed = address(this).balance;\\n        } else {\\n            amountRedeemed = IERC20(token).balanceOf(address(this));\\n        }\\n\\n        // redeem assets\\n        _redeemSupply(collateral.vTokenAddress, amountAsset);\\n\\n        // balance - AFTER\\n        if (token == WBNB) {\\n            amountRedeemed = address(this).balance.sub(amountRedeemed);\\n            msg.sender.sendValue(amountRedeemed);\\n        } else {\\n            amountRedeemed = IERC20(token).balanceOf(address(this)).sub(amountRedeemed);\\n            IERC20(token).safeTransfer(msg.sender, amountRedeemed);\\n        }\\n        //--------------------------------------------------------------------------------\\n\\n        // log withdraw\\n        emit Withdraw(msg.sender, address(token), amountAsset);\\n    }\\n    \\n    /**\\n     * @dev redeem assets from farm\\n     */\\n    function _redeemSupply(address vTokenAddress, uint256 amountAsset) internal {\\n        _require(IVToken(vTokenAddress).redeemUnderlying(amountAsset) == 0,\\\"venus\\\");\\n    }\\n\\n    /**\\n     * @dev find the given collateral info\\n     */\\n    function _findCollateral(address token) internal view returns (CollateralInfo memory, bool) {\\n        uint n = collaterals.length;\\n        for (uint i=0;i\\u003cn;i++) {\\n            if (collaterals[i].token == token){\\n                return (collaterals[i], true);\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * @dev find the given asset value priced in OURO\\n     */\\n    function _lookupAssetValueInOURO(AggregatorV3Interface priceFeed, uint256 assetUnit, uint256 amountAsset) internal view returns (uint256 amountOURO) {\\n        // get lastest asset value in USD\\n        uint256 assetUnitPrice = getAssetPrice(priceFeed);\\n        \\n        // compute total USD value\\n        uint256 assetValueInUSD = amountAsset\\n                                                    .mul(assetUnitPrice)\\n                                                    .div(assetUnit);\\n                                                    \\n        // convert asset USD value to OURO value\\n        uint256 assetValueInOuro = assetValueInUSD.mul(OURO_PRICE_UNIT)\\n                                                    .div(ouroPrice);\\n                                                    \\n        return assetValueInOuro;\\n    }\\n\\n    /**\\n     * ======================================================================================\\n     * \\n     * OURO\\u0027s stablizer\\n     *\\n     * ======================================================================================\\n     */\\n     \\n    // 1. The system will only mint new OGS and sell them for collateral when the value of the \\n    //    assets held in the pool is more than 3% less than the value of the issued OURO.\\n    // 2. The system will only use excess collateral in the pool to conduct OGS buy back and \\n    //    burn when the value of the assets held in the pool is 3% higher than the value of the issued OURO\\n    uint public rebalanceThreshold = 30;  // milli(1/1000)\\n    uint public OGSbuyBackRatio = 70; // 70% to buy back OGS\\n\\n    // record last Rebase time\\n    uint public lastRebaseTimestamp = block.timestamp;\\n    \\n    // rebase period\\n    uint public rebasePeriod = 6 hours;\\n\\n    // multiplier\\n    uint internal constant MULTIPLIER = 1e18;\\n    \\n    /**\\n     * @dev rebase entry\\n     * public method for all external caller\\n     */\\n    function rebase() public {\\n        // only from EOA or owner address\\n        _require((msg.sender == owner()) || (!msg.sender.isContract() \\u0026\\u0026 msg.sender == tx.origin));\\n\\n        // rebase period check for non-owner\\n        // owner of this contract has the right to rebase without period check\\n        if (msg.sender != owner()) {\\n            _require(block.timestamp \\u003e lastRebaseTimestamp + rebasePeriod, \\\"aggressive\\\");\\n        }\\n                \\n        // update rebase time\\n        lastRebaseTimestamp = block.timestamp;\\n        \\n        // rebase collaterals\\n        _rebase();\\n\\n        // book keeping after rebase\\n        if (block.timestamp \\u003e ouroLastPriceUpdate + ouroPriceResetPeriod) {\\n            // record price at month begins\\n            ouroPriceAtMonthStart = ouroPrice;\\n            ouroLastPriceUpdate = block.timestamp;\\n        }\\n\\n        // log\\n        emit Rebased(msg.sender);\\n    }\\n \\n    /**\\n     * @dev rebase is the stability dynamics for OURO\\n     */\\n    function _rebase() internal {\\n        // get total collateral value priced in USD\\n        uint256 totalCollateralValue = _getTotalCollateralValue();\\n        // get total issued OURO value priced in USD\\n        uint256 totalIssuedOUROValue =              ouroContract.totalSupply()\\n                                                    .mul(getPrice())\\n                                                    .div(OURO_PRICE_UNIT);\\n        \\n        // compute values deviates\\n        if (totalCollateralValue \\u003e= totalIssuedOUROValue.mul(1000+rebalanceThreshold).div(1000)) {\\n            _handleExcessiveValue(totalCollateralValue, totalIssuedOUROValue);\\n          \\n        } else if (totalCollateralValue \\u003c= totalIssuedOUROValue.mul(1000-rebalanceThreshold).div(1000)) {\\n            // collaterals has less value to OURO value, mint new OGS to buy assets\\n            uint256 valueDeviates = totalIssuedOUROValue.sub(totalCollateralValue);\\n            \\n            // rebalance the collaterals\\n            _executeRebalance(false, valueDeviates);\\n        }\\n    }\\n    \\n    /**\\n     * @dev function to handle excessive value\\n     */\\n    function _handleExcessiveValue(uint256 totalCollateralValue, uint256 totalIssuedOUROValue) internal {\\n        // collaterals has excessive value to OURO value, \\n        // 70% of the extra collateral would be used to BUY BACK OGS on secondary markets \\n        // and conduct a token burn\\n        uint256 excessiveValue = totalCollateralValue.sub(totalIssuedOUROValue);\\n                                                    \\n        // check if price has already reached monthly limit \\n        uint256 priceUpperLimit =               ouroPriceAtMonthStart\\n                                                .mul(100+appreciationLimit)\\n                                                .div(100);\\n                                        \\n        // conduct an ouro default price change                                \\n        if (ouroPrice \\u003c priceUpperLimit) {\\n            // However, since there is a 3% limit on how much the OURO Default Exchange Price can increase per month, \\n            // only [100,000,000*0.03 = 3,000,000] USD worth of excess assets can be utilized. This 3,000,000 USD worth of \\n            // assets will remain in the Reserve Pool, while the remaining [50,000,000-3,000,000=47,000,000] USD worth \\n            // of assets will be used for OGS buyback and burns. \\n            \\n            // (limit - current ouro price) / current ouro price\\n            // eg : (1.03 - 1.01) / 1.01 = 0.0198\\n            uint256 ouroRisingSpace =           priceUpperLimit.sub(ouroPrice)  // non-negative substraction\\n                                                .mul(MULTIPLIER)\\n                                                .div(ouroPrice);\\n\\n            // a) maxiumum values required to raise price to limit; (totalIssuedOUROValue * 0.0198)\\n            uint256 ouroApprecationValueLimit = ouroRisingSpace\\n                                                .mul(totalIssuedOUROValue)\\n                                                .div(MULTIPLIER);\\n            \\n            // b) maximum excessive value usable (30%)\\n            uint256 maximumUsableValue =        excessiveValue\\n                                                .mul(100-OGSbuyBackRatio)\\n                                                .div(100);\\n            \\n            // use the smaller one from a) \\u0026 b) to appreciate OURO\\n            uint256 valueToAppreciate = ouroApprecationValueLimit \\u003c maximumUsableValue?ouroApprecationValueLimit:maximumUsableValue;\\n            \\n            // IMPORTANT: value appreciation:\\n            // ouroPrice = ouroPrice * (totalOUROValue + appreciateValue) / totalOUROValue\\n            ouroPrice =                         ouroPrice\\n                                                .mul(totalIssuedOUROValue.add(valueToAppreciate))\\n                                                .div(totalIssuedOUROValue);\\n            // log\\n            emit Appreciation(ouroPrice);\\n            \\n            // substract excessive value which has used to appreciate OURO price\\n            excessiveValue = excessiveValue.sub(valueToAppreciate);\\n        }\\n        \\n        // after price appreciation, if we still have excessive value\\n        if (excessiveValue \\u003e 0) {\\n            // rebalance the collaterals\\n            _executeRebalance(true, excessiveValue);\\n        }\\n    }\\n    \\n    /**\\n     * @dev value deviates, execute buy back operations\\n     * valueDeviates is priced in USD\\n     */\\n    function _executeRebalance(bool isExcessive, uint256 valueDeviates) internal {\\n        // step 1. sum total deviated collateral value \\n        uint256 totalCollateralValueDeviated;\\n        for (uint i=0;i\\u003ccollaterals.length;i++) {\\n            CollateralInfo memory collateral = collaterals[i];\\n            \\n            // check new price of the assets \\u0026 omit those not deviated\\n            uint256 newPrice = getAssetPrice(collateral.priceFeed);\\n            if (isExcessive) {\\n                // omit assets deviated negatively\\n                if (newPrice \\u003c collateral.lastPrice) {\\n                    continue;\\n                }\\n            } else {\\n                // omit assets deviated positively\\n                if (newPrice \\u003e collateral.lastPrice) {\\n                    continue;\\n                }\\n            }\\n            \\n            // accumulate value in USD\\n            totalCollateralValueDeviated += newPrice\\n                                                .mul(_assetsBalance[collateral.token])\\n                                                .div(collateral.assetUnit);\\n        }\\n        \\n        // step 2. buyback operations in pro-rata basis\\n        for (uint i=0;i\\u003ccollaterals.length;i++) {\\n            CollateralInfo memory collateral = collaterals[i];\\n        \\n            // check new price of the assets \\u0026 omit those not deviated\\n            uint256 newPrice = getAssetPrice(collateral.priceFeed);\\n            if (isExcessive) {\\n                // omit assets deviated negatively\\n                if (newPrice \\u003c collateral.lastPrice) {\\n                    continue;\\n                }\\n            } else {\\n                // omit assets deviated positively\\n                if (newPrice \\u003e collateral.lastPrice) {\\n                    continue;\\n                }\\n            }\\n            \\n            // calc slot value in USD\\n            uint256 slotValue = newPrice\\n                                                .mul(_assetsBalance[collateral.token])\\n                                                .div(collateral.assetUnit);\\n            \\n            // calc pro-rata buy back value(in USD) for this collateral\\n            uint256 slotBuyBackValue = slotValue.mul(valueDeviates)\\n                                                .div(totalCollateralValueDeviated);\\n                                \\n            // non zero check\\n            if (slotBuyBackValue \\u003e 0) {\\n                // execute different buyback operations\\n                if (isExcessive) {\\n                    _buybackOGS(\\n                        collateral.token, \\n                        collateral.vTokenAddress,\\n                        collateral.assetUnit,\\n                        collateral.priceFeed,\\n                        slotBuyBackValue\\n                    );\\n                } else {\\n                    _buybackCollateral(\\n                        collateral.token, \\n                        collateral.vTokenAddress,\\n                        collateral.assetUnit,\\n                        collateral.priceFeed,\\n                        slotBuyBackValue\\n                    );\\n                }\\n            }\\n        }\\n\\n        // step 3. update price reference point\\n        for (uint i=0;i\\u003ccollaterals.length;i++) {\\n            collaterals[i].lastPrice = getAssetPrice(collaterals[i].priceFeed);\\n        }\\n    }\\n\\n    /**\\n     * @dev get total collateral value in USD\\n     */\\n    function _getTotalCollateralValue() internal view returns(uint256) {\\n        uint256 totalCollateralValue;\\n        for (uint i=0;i\\u003ccollaterals.length;i++) {\\n            CollateralInfo memory collateral = collaterals[i];\\n            totalCollateralValue += getAssetPrice(collateral.priceFeed)\\n                                    .mul(_assetsBalance[collateral.token])\\n                                    .div(collateral.assetUnit);\\n        }\\n        \\n        return totalCollateralValue;\\n    }\\n    \\n    /**\\n     * @dev buy back OGS with collateral\\n     * 1. to form an insurance fund (50%)\\n     * 2. conduct a ogs burn(50%)\\n     */\\n    function _buybackOGS(address token ,address vTokenAddress, uint256 assetUnit, AggregatorV3Interface priceFeed, uint256 slotValue) internal {\\n        uint256 collateralToRedeem = slotValue\\n                                        .mul(assetUnit)\\n                                        .div(getAssetPrice(priceFeed));\\n         \\n        // balance - before redeeming \\n        uint256 redeemedAmount;\\n        if (token == WBNB) {\\n            redeemedAmount = address(this).balance;\\n        } else {\\n            redeemedAmount = IERC20(token).balanceOf(address(this));\\n        }\\n        \\n        // redeem supply from farming\\n        // NOTE:\\n        //  if venus has insufficient liquidity, this will return non 0, but the process continues\\n        IVToken(vTokenAddress).redeemUnderlying(collateralToRedeem);\\n        \\n        // balance - after redeeming\\n        if (token == WBNB) {\\n            redeemedAmount = address(this).balance.sub(redeemedAmount);\\n        } else {\\n            redeemedAmount = IERC20(token).balanceOf(address(this)).sub(redeemedAmount);\\n        }\\n\\n        // accounting\\n        _assetsBalance[token] = _assetsBalance[token].sub(redeemedAmount);\\n\\n        // split assets allocation\\n        uint256 assetToInsuranceFund = redeemedAmount.mul(50).div(100);\\n        uint256 assetToBuyBackOGS = redeemedAmount.sub(assetToInsuranceFund);\\n        \\n        // allocation a)\\n        // swap to BUSD to form last resort insurance fund (50%)\\n        if (assetToInsuranceFund \\u003e0) {\\n            if (token == busdContract) {\\n                // transfer assetToInsuranceFund(50%) to last resort fund\\n                IERC20(busdContract).safeTransfer(lastResortFund, assetToInsuranceFund);\\n            } else {\\n                address[] memory path;\\n                if (token == WBNB) {\\n                    // path: WBNB -\\u003e BUSD\\n                    path = new address[](2);\\n                    path[0] = token;\\n                    path[1] = busdContract;\\n                } else {\\n                    // path: token -\\u003e WBNB -\\u003e BUSD\\n                    path = new address[](3);\\n                    path[0] = token;\\n                    path[1] = WBNB;\\n                    path[2] = busdContract;\\n                }\\n                \\n                // swap USD out\\n                if (token == WBNB) {\\n                    router.swapExactETHForTokens{value:assetToInsuranceFund}(\\n                        0, \\n                        path, \\n                        address(this), \\n                        block.timestamp.add(600)\\n                    );\\n                    \\n                } else {\\n                    router.swapExactTokensForTokens(\\n                        assetToInsuranceFund,\\n                        0, \\n                        path, \\n                        address(this), \\n                        block.timestamp.add(600)\\n                    );\\n                }\\n                \\n                // transfer all swapped USD to last resort fund\\n                uint256 amountUSD = IERC20(busdContract).balanceOf(address(this));\\n                IERC20(busdContract).safeTransfer(lastResortFund, amountUSD);\\n            }\\n        }\\n        \\n        // allocation b)\\n        // conduct a OGS burning process\\n        // the path to find how many OGS can be swapped\\n        address[] memory path;\\n        if (token == busdContract) {\\n            // path: BUSD -\\u003e OGS\\n            path = new address[](2);\\n            path[0] = token;\\n            path[1] = address(ogsContract);\\n        } else if (token == WBNB) {\\n            // path: WBNB -\\u003e BUSD -\\u003e OGS\\n            path = new address[](3);\\n            path[0] = token;\\n            path[1] = busdContract;\\n            path[2] = address(ogsContract);\\n        } else {\\n            // path: token -\\u003e WBNB -\\u003e BUSD -\\u003e OGS\\n            path = new address[](4);\\n            path[0] = token;\\n            path[1] = WBNB; \\n            path[2] = busdContract;\\n            path[3] = address(ogsContract);\\n        }\\n        \\n        // swap OGS out\\n        uint [] memory amounts;\\n        if (assetToBuyBackOGS \\u003e 0) {\\n            if (token == WBNB) {\\n                amounts = router.swapExactETHForTokens{value:assetToBuyBackOGS}(\\n                    0, \\n                    path, \\n                    address(this), \\n                    block.timestamp.add(600)\\n                );\\n                \\n            } else {\\n                amounts = router.swapExactTokensForTokens(\\n                    assetToBuyBackOGS,\\n                    0, \\n                    path, \\n                    address(this), \\n                    block.timestamp.add(600)\\n                );\\n            }\\n            \\n            // burn OGS\\n            ogsContract.burn(amounts[amounts.length - 1]);\\n                    \\n            // log\\n            emit OGSBurned(amounts[amounts.length - 1]);\\n        }\\n    }\\n    \\n    /**\\n     * @dev buy back collateral with OGS\\n     * slotValue is priced in BUSD \\n     */\\n    function _buybackCollateral(address token ,address vTokenAddress, uint256 assetUnit, AggregatorV3Interface priceFeed, uint256 slotValue) internal {\\n        uint256 collateralToBuyBack = slotValue\\n                                        .mul(assetUnit)\\n                                        .div(getAssetPrice(priceFeed));\\n                                             \\n        // the path to find how many OGS required to swap collateral out\\n        address[] memory path;\\n        if (token == busdContract) {\\n            // path: OGS-\\u003e BUSD\\n            path = new address[](2);\\n            path[0] = address(ogsContract);\\n            path[1] = token;\\n        } else if (token == WBNB) {\\n            // path: OGS-\\u003e BUSD -\\u003e WBNB\\n            path = new address[](3);\\n            path[0] = address(ogsContract);\\n            path[1] = busdContract; // use USD to bridge\\n            path[2] = token;\\n        } else {\\n            // path: OGS-\\u003e BUSD -\\u003e WBNB -\\u003e collateral\\n            path = new address[](4);\\n            path[0] = address(ogsContract);\\n            path[1] = busdContract; // use USD to bridge\\n            path[2] = WBNB;\\n            path[3] = token;\\n        }\\n        \\n        if (collateralToBuyBack \\u003e 0) {\\n            // calc amount OGS required to swap out given collateral\\n            uint [] memory amounts = router.getAmountsIn(collateralToBuyBack, path);\\n            uint256 ogsRequired = amounts[0];\\n                        \\n            // mint OGS to this contract to buy back collateral           \\n            // NOTE: ogs contract MUST authorized THIS contract the privilege to mint\\n            ogsContract.mint(address(this), ogsRequired);\\n    \\n            // swap collateral out\\n            if (token == WBNB) {\\n                amounts = router.swapExactTokensForETH(\\n                    ogsRequired,\\n                    0,\\n                    path, \\n                    address(this), \\n                    block.timestamp.add(600)\\n                );\\n            } else {\\n                amounts = router.swapExactTokensForTokens(\\n                    ogsRequired,\\n                    0, \\n                    path, \\n                    address(this), \\n                    block.timestamp.add(600)\\n                );\\n            }\\n            \\n            uint256 swappedOut = amounts[amounts.length - 1];\\n            \\n            // as we brought back the collateral, farm the asset\\n            _supply(token, vTokenAddress, swappedOut);\\n            \\n            // accounting\\n            _assetsBalance[token] = _assetsBalance[token].add(swappedOut);\\n            \\n            // log\\n            emit CollateralBroughtBack(token, swappedOut);\\n        }\\n    }\\n    \\n    /**\\n     * ======================================================================================\\n     * \\n     * OURO\\u0027s farming revenue distribution\\n     *\\n     * ======================================================================================\\n     */\\n\\n     /**\\n      * @dev a public function accessible to anyone to distribute revenue\\n      */\\n     function distributeRevenue() external {\\n         // only from EOA\\n         _require(!msg.sender.isContract() \\u0026\\u0026 msg.sender == tx.origin);\\n         \\n         _distributeXVS();\\n         _distributeAssetRevenue();\\n                 \\n        // log \\n        emit RevenueDistributed();\\n     }\\n     \\n     function _distributeXVS() internal {\\n        // get venus markets\\n        address[] memory venusMarkets = new address[](collaterals.length);\\n        for (uint i=0;i\\u003ccollaterals.length;i++) {\\n            venusMarkets[i] = collaterals[i].vTokenAddress;\\n        }\\n        \\n        // balance - before\\n        uint256 xvsAmount = IERC20(xvsAddress).balanceOf(address(this));\\n\\n        // claim venus XVS reward\\n        IVenusDistribution(unitroller).claimVenus(address(this), venusMarkets);\\n\\n        // and exchange XVS to OGS\\n        // XVS -\\u003e WBNB -\\u003e BUSD -\\u003e OGS\\n        address[] memory path = new address[](4);\\n        path[0] = xvsAddress;\\n        path[1] = WBNB;\\n        path[2] = busdContract;\\n        path[3] = address(ogsContract);\\n\\n        // balance - after swap all XVS to OGS\\n        xvsAmount = IERC20(xvsAddress).balanceOf(address(this)).sub(xvsAmount);\\n\\n        if (xvsAmount \\u003e 0) {\\n            // swap OGS out\\n            uint [] memory amounts = router.swapExactTokensForTokens(\\n                xvsAmount,\\n                0, \\n                path, \\n                address(this), \\n                block.timestamp.add(600)\\n            );\\n            uint256 ogsAmountOut = amounts[amounts.length - 1];\\n    \\n            // burn OGS\\n            ogsContract.burn(ogsAmountOut);\\n        }\\n                \\n        // log\\n        emit XVSDist(xvsAmount);\\n     }\\n     \\n     function _distributeAssetRevenue() internal {   \\n        // distribute assets revenue \\n        uint n = collaterals.length;\\n        for (uint i=0;i\\u003cn;i++) {\\n            CollateralInfo memory collateral = collaterals[i];\\n            // get underlying balance\\n            uint256 farmBalance = IVToken(collateral.vTokenAddress).balanceOfUnderlying(address(this));\\n            \\n            // revenue generated\\n            if (farmBalance \\u003e _assetsBalance[collateral.token]) {        \\n                // the diff is the revenue\\n                uint256 revenue = farmBalance.sub(_assetsBalance[collateral.token]);\\n\\n                // balance - before\\n                uint256 redeemedAmount;\\n                if (collateral.token == WBNB) {\\n                    redeemedAmount = address(this).balance;\\n                } else {\\n                    redeemedAmount = IERC20(collateral.token).balanceOf(address(this));\\n                }\\n                \\n                // redeem asset\\n                // NOTE: \\n                //  just use redeemUnderlying w/o return value check here.\\n                IVToken(collateral.vTokenAddress).redeemUnderlying(revenue);\\n\\n                // get actual revenue redeemed and\\n                // transfer asset to ouro revenue distribution contract\\n                if (collateral.token == WBNB) {\\n                    // balance - after\\n                    redeemedAmount = address(this).balance.sub(redeemedAmount);\\n                    payable(address(ouroDistContact)).sendValue(redeemedAmount);\\n                } else {\\n                    // balance - after\\n                    redeemedAmount = IERC20(collateral.token).balanceOf(address(this)).sub(redeemedAmount);\\n                    IERC20(collateral.token).safeTransfer(address(ouroDistContact), redeemedAmount);\\n                }\\n                \\n                // notify ouro revenue contract\\n                if (redeemedAmount \\u003e 0) {\\n                    ouroDistContact.revenueArrival(collateral.token, redeemedAmount);\\n                }\\n            }\\n        }\\n     }\\n    \\n    /**\\n     * ======================================================================================\\n     * \\n     * OURO Reserve\\u0027s events\\n     *\\n     * ======================================================================================\\n     */\\n     event Deposit(address account, uint256 ouroAmount);\\n     event Withdraw(address account, address token, uint256 assetAmount);\\n     event Appreciation(uint256 price);\\n     event Rebased(address account);\\n     event NewCollateral(address token);\\n     event RemoveCollateral(address token);\\n     event CollateralBroughtBack(address token, uint256 amount);\\n     event OGSBurned(uint ogsAmount);\\n     event AllowanceReset();\\n     event XVSDist(uint256 amount);\\n     event RevenueDistributed();\\n     event LastResortFundSet(address account);\\n     event OuroDistChanged(address account);\\n     event WhiteListToggled(bool enabled);\\n     event WhiteListSet(address account, bool allow);\\n     event EmergencyWithdraw(address account, address to);\\n     event OGSbuyBackRatioSet(uint256 ratio);\\n     event RebasePeriodSet(uint256 period);\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AllowanceReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Appreciation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralBroughtBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ouroAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LastResortFundSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ogsAmount\",\"type\":\"uint256\"}],\"name\":\"OGSBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"OGSbuyBackRatioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OuroDistChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"RebasePeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Rebased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RevenueDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"WhiteListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"WhiteListToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"XVSDist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OGSbuyBackRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OURO_PRICE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appreciationLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"changeOURODist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOuro\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"OUROMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAssetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOURO\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAssetsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getOuroIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"issueSchedule\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastResortFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"assetDecimal\",\"type\":\"uint8\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"newCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogsContract\",\"outputs\":[{\"internalType\":\"contract IOGSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ouroContract\",\"outputs\":[{\"internalType\":\"contract IOUROToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ouroDistContact\",\"outputs\":[{\"internalType\":\"contract IOURODist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ouroIssuePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ouroLastPriceUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ouroPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ouroPriceAtMonthStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ouroPriceResetPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setLastResortFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setOGSBuyBackRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setRebasePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteListEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountOuro\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"OUROTaken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xvsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OUROReserve", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://481598b55924cc4797aaaad63b62dc6f06eeca13bbd834f6c72c9b5c67df64c1"}