{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BitcoinBingo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\ncontract BitcoinBingo is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  AggregatorV3Interface public priceFeed;\\n  IERC20 public prizeToken;\\n\\n  uint256 public prizeFee;\\n  uint256 public feeDecimal;\\n  uint8 public bingoDecimal;\\n  uint256 public bufferSeconds;\\n  uint256 public intervalLockSeconds; // interval in seconds till Friday midnight\\n  uint256 public intervalCloseSeconds; // interval in seconds till Sunday midnight\\n\\n  address public operatorAddress; // address of the operator\\n\\n  uint256 public currentEpoch; // current epoch for prediction round\\n  uint256 public oracleLatestRoundId; // converted from uint80 (Chainlink)\\n  uint256 public oracleUpdateAllowance = 300; // seconds\\n\\n  uint256 public companyPrize = 1000_00_0000_0000_0000_0000; // 1000 * 10e18\\n\\n  address public accumulator;\\n  address public prizeDepositer;\\n\\n\\n  struct Round {\\n    uint256 epoch;\\n    uint256 startTimestamp;\\n    uint256 lockTimestamp;\\n    uint256 closeTimestamp;\\n    int256 closePrice;\\n    uint256 closeOracleId;\\n    uint256 totalAmount;\\n    bool bingoLocked; // default false\\n    bool oracleCalled; // default false\\n    bool prizeDeposited;\\n  }\\n\\n  struct ManagerObj {\\n    uint256 index;\\n    bool exist;\\n  }\\n\\n  // epoch => Round\\n  mapping(uint256 => Round) public rounds;\\n  // account => epoch => number of bingo\\n  mapping(address => mapping(uint256 => uint8)) public userRounds;\\n  mapping(address => mapping(uint256 => bool)) public userFreeRounds;\\n  // twitter, discord, telegram\\n  mapping(string => uint8) public socialDic;\\n  mapping(address => mapping(uint256 => mapping (uint8 => bool))) public userSocialFreeRounds;\\n  // epoch => price => accounts\\n  mapping(uint256 => mapping(int256 => address[])) public priceRounds;\\n  \\n  mapping (address => ManagerObj) private _manageAccess;\\n  address[] private _managerLists;\\n\\n  // number of extra bingo => USDC\\n  mapping (uint8 => uint256) public extraStrategies;\\n  uint8[] public availableExtraBingos;\\n\\n  event StartRound(uint256 indexed epoch);\\n  event EndRound(uint256 indexed epoch);\\n  event LockRound(uint256 indexed epoch, uint256 indexed roundId, int256 price);\\n  event BingoEvt(address user, uint256 indexed epoch, uint256 indexed roundId, int256 price);\\n\\n  modifier onlyManager() {\\n    require(msg.sender == owner() || _manageAccess[msg.sender].exist, \\\"!manager\\\");\\n    _;\\n  }\\n\\n  modifier onlyOperator() {\\n    require(msg.sender == operatorAddress, \\\"Not operator\\\");\\n    _;\\n  }\\n\\n  modifier notContract() {\\n    require(!_isContract(msg.sender), \\\"Contract not allowed\\\");\\n    require(msg.sender == tx.origin, \\\"Proxy contract not allowed\\\");\\n    _;\\n  }\\n\\n  constructor(address _priceFeed, address _prizeToken) {\\n    priceFeed = AggregatorV3Interface(_priceFeed);\\n    prizeToken = IERC20(_prizeToken);\\n\\n    prizeFee = 500;\\n    feeDecimal = 1000;\\n    bingoDecimal = 6;\\n    \\n    bufferSeconds = 30;\\n    intervalLockSeconds = 432000;\\n    intervalCloseSeconds = 604800;\\n\\n    operatorAddress = 0x5e1f49A1349dd35FACA241eB192c6c2EDF47EF46;\\n    accumulator = 0x75c6D683A7d45bbb0A31F2249c12a11fA26bE9eA;\\n    prizeDepositer = 0x320e75Db7D2a624bd9DEa117C3092D69F20D8988;\\n    _manageAccess[0x320e75Db7D2a624bd9DEa117C3092D69F20D8988] = ManagerObj(0, true);\\n    _managerLists.push(0x320e75Db7D2a624bd9DEa117C3092D69F20D8988);\\n\\n    availableExtraBingos.push(1);\\n    availableExtraBingos.push(5);\\n    extraStrategies[1] = 1_00_0000_0000_0000_0000;\\n    extraStrategies[5] = 3_00_0000_0000_0000_0000;\\n\\n    socialDic[\\\"twitter\\\"] = 1;\\n    socialDic[\\\"discord\\\"] = 2;\\n    socialDic[\\\"telegram\\\"] = 3;\\n    socialDic[\\\"tvl\\\"] = 4;\\n\\n    _startRound(companyPrize);\\n  }\\n\\n  function bingoBTC(uint256 epoch, int256[] memory prices, uint8 index) external notContract {\\n    require(epoch == currentEpoch, \\\"Bet is too early/late\\\");\\n    require(_bettable(epoch), \\\"Round not bettable\\\");\\n\\n    uint256 bingoBetAmount = extraStrategies[index];\\n    uint256 bingoLen = prices.length;\\n    require(bingoLen == index, \\\"Wrong prices\\\");\\n    require(bingoBetAmount > 0, \\\"No extra free bingo\\\");\\n\\n    require(prizeToken.allowance(msg.sender, address(this)) >= bingoBetAmount, 'Btcbingo: Bingo token is not approved');\\n    prizeToken.safeTransferFrom(msg.sender, address(this), bingoBetAmount);\\n    uint256 treasurySplit = bingoBetAmount * prizeFee / feeDecimal;\\n    prizeToken.safeTransfer(accumulator, treasurySplit);\\n    Round storage round = rounds[epoch];\\n    round.totalAmount = round.totalAmount + bingoBetAmount - treasurySplit;\\n\\n    userRounds[msg.sender][epoch] += uint8(bingoLen);\\n    \\n    for (uint256 i=0; i<bingoLen; i++) {\\n      int256 price = prices[i];\\n      priceRounds[epoch][price].push(msg.sender);\\n      emit BingoEvt(msg.sender, epoch, userRounds[msg.sender][epoch]-i, price);\\n    }\\n  }\\n\\n  function bingoBTCViaOperator(uint256 epoch, int256 price, address account) external onlyOperator {\\n    require(epoch == currentEpoch, \\\"Bet is too early/late\\\");\\n    require(_bettable(epoch), \\\"Round not bettable\\\");\\n    \\n    require(userFreeRounds[account][epoch] == false, \\\"Btcbingo: You can do only once bingo\\\");\\n\\n    userRounds[msg.sender][epoch] += 1;\\n    userFreeRounds[account][epoch] = true;\\n\\n    priceRounds[epoch][price].push(account);\\n\\n    emit BingoEvt(account, epoch, 0, price);\\n  }\\n\\n  function bingoBTCViaOperatorSocial(uint256 epoch, int256 price, address account, string memory social) external onlyOperator {\\n    require(epoch == currentEpoch, \\\"Bet is too early/late\\\");\\n    require(_bettable(epoch), \\\"Round not bettable\\\");\\n    \\n    require(socialDic[social] != 0, \\\"Btcbingo: Not registered social\\\");\\n    uint8 socialIndex = socialDic[social];\\n    require(userSocialFreeRounds[account][epoch][socialIndex] == false, \\\"Btcbingo: You can do only once social bingo\\\");\\n\\n    userRounds[msg.sender][epoch] += 1;\\n    userSocialFreeRounds[account][epoch][socialIndex] = true;\\n\\n    priceRounds[epoch][price].push(account);\\n\\n    emit BingoEvt(account, epoch, 0, price);\\n  }\\n\\n  function executeRound() external onlyOperator {\\n    // CurrentEpoch refers to previous round (n-1)\\n    require(rounds[currentEpoch].lockTimestamp != 0, \\\"Can only end round after round has locked\\\");\\n    require(block.timestamp >= rounds[currentEpoch].closeTimestamp, \\\"Can only end round after closeTimestamp\\\");\\n    require(\\n      block.timestamp <= rounds[currentEpoch].closeTimestamp + bufferSeconds,\\n      \\\"Can only end round within bufferSeconds\\\"\\n    );\\n\\n    Round storage round = rounds[currentEpoch];\\n    round.closeTimestamp = block.timestamp;\\n    emit EndRound(currentEpoch);\\n\\n    uint256 nextJackpot = companyPrize;\\n    uint256 winnerLen = priceRounds[currentEpoch][round.closePrice].length;\\n    if (winnerLen > 0) {\\n      uint256 rewardAmount = round.totalAmount / winnerLen;\\n      for (uint256 i=0; i<winnerLen; i++) {\\n        address acc = priceRounds[currentEpoch][round.closePrice][i];\\n        uint256 prizeBal2 = prizeToken.balanceOf(address(this));\\n        if (prizeBal2 >= rewardAmount) {\\n          prizeToken.safeTransfer(acc, rewardAmount);\\n        }\\n      }\\n    }\\n    else {\\n      nextJackpot = round.totalAmount + companyPrize;\\n    }\\n\\n    // Increment currentEpoch to current round (n)\\n    currentEpoch = currentEpoch + 1;\\n    _startRound(nextJackpot);\\n  }\\n\\n  function forceExecuteRound(uint256 _intervalLockSeconds, uint256 _intervalCloseSeconds, uint256 _jackpotSize) external onlyOperator {\\n    int256 currentPrice = 0;\\n    Round storage round = rounds[currentEpoch];\\n    round.closeTimestamp = block.timestamp;\\n    round.closePrice = currentPrice;\\n    round.closeOracleId = 0;\\n    round.oracleCalled = false;\\n\\n    emit EndRound(currentEpoch);\\n\\n    currentEpoch = currentEpoch + 1;\\n\\n    Round storage cround = rounds[currentEpoch];\\n    cround.startTimestamp = block.timestamp;\\n    cround.lockTimestamp = block.timestamp + _intervalLockSeconds;\\n    cround.closeTimestamp = block.timestamp + _intervalCloseSeconds;\\n    cround.epoch = currentEpoch;\\n    cround.totalAmount = _jackpotSize;\\n\\n    emit StartRound(currentEpoch);\\n  }\\n\\n  /**\\n    * @notice Lock running round\\n    * @dev Callable by operator\\n    */\\n  function genesisLockRound() external onlyOperator {\\n    (uint80 currentRoundId, int256 currentPrice) = _getPriceFromOracle();\\n\\n    oracleLatestRoundId = uint256(currentRoundId);\\n\\n    require(rounds[currentEpoch].startTimestamp != 0, \\\"Can only lock round after round has started\\\");\\n    require(block.timestamp >= rounds[currentEpoch].lockTimestamp, \\\"Can only lock round after lockTimestamp\\\");\\n    require(\\n      block.timestamp <= rounds[currentEpoch].lockTimestamp + bufferSeconds,\\n      \\\"Can only lock round within bufferSeconds\\\"\\n    );\\n\\n    currentPrice = currentPrice / (int256(10) ** bingoDecimal) * (int256(10) ** bingoDecimal);\\n    \\n    Round storage round = rounds[currentEpoch];\\n    round.lockTimestamp = block.timestamp;\\n    round.bingoLocked = true;\\n    round.closePrice = currentPrice;\\n    round.closeOracleId = currentRoundId;\\n    round.oracleCalled = true;\\n\\n    emit LockRound(currentEpoch, currentRoundId, currentPrice);\\n  }\\n\\n  function depoistPrizeFromSupplyer() public onlyOperator {\\n    _depoistPrize(prizeDepositer);\\n  }\\n\\n  function depoistPrize() public {\\n    _depoistPrize(msg.sender);\\n  }\\n\\n  function _depoistPrize(address _funder) private {\\n    Round storage round = rounds[currentEpoch];\\n    require(round.prizeDeposited == false, 'Btcbingo: Prize token is deposited');\\n    uint256 curBal = prizeToken.balanceOf(address(this));\\n    uint256 fundingBal = prizeToken.balanceOf(_funder);\\n    uint256 amount = round.totalAmount - curBal;\\n    if (amount > fundingBal) {\\n      amount = fundingBal;\\n    }\\n\\n    require(prizeToken.allowance(_funder, address(this)) >= amount, 'Btcbingo: Prize token is not approved');\\n\\n    prizeToken.safeTransferFrom(_funder, address(this), amount);\\n    curBal = prizeToken.balanceOf(address(this));\\n    if (curBal >= round.totalAmount) {\\n      round.prizeDeposited = true;\\n    }\\n  }\\n\\n  function removePrizeToken() public onlyOwner {\\n    prizeToken.safeTransfer(msg.sender, prizeToken.balanceOf(address(this)));\\n  }\\n\\n  function getAllExtraBingos() public view returns(uint8[] memory) {\\n    return availableExtraBingos;\\n  }\\n\\n\\n  function setManager(address usraddress, bool access) public onlyOwner {\\n    if (access == true) {\\n      if ( ! _manageAccess[usraddress].exist) {\\n        uint256 newId = _managerLists.length;\\n        _manageAccess[usraddress] = ManagerObj(newId, true);\\n        _managerLists.push(usraddress);\\n      }\\n    }\\n    else {\\n      if (_manageAccess[usraddress].exist) {\\n        address lastObj = _managerLists[_managerLists.length - 1];\\n        _managerLists[_manageAccess[usraddress].index] = _managerLists[_manageAccess[lastObj].index];\\n        _managerLists.pop();\\n        delete _manageAccess[usraddress];\\n      }\\n    }\\n  }\\n\\n  function setPriceFeed(address _priceFeed) public onlyManager {\\n    priceFeed = AggregatorV3Interface(_priceFeed);\\n  }\\n  function setPrizeToken(address _prizeToken) public onlyManager {\\n    prizeToken = IERC20(_prizeToken);\\n  }\\n  function setTreasuryFee(uint256 _prizeFee, uint256 _feeDecimal) public onlyManager {\\n    prizeFee = _prizeFee;\\n    feeDecimal = _feeDecimal;\\n  }\\n  function setBingoDecimal(uint8 _bingoDecimal) public onlyManager {\\n    bingoDecimal = _bingoDecimal;\\n  }\\n  function setBufferSeconds(uint256 _bufferSeconds) public onlyManager {\\n    bufferSeconds = _bufferSeconds;\\n  }\\n  function setIntervalLockSeconds(uint256 _intervalLockSeconds) public onlyManager {\\n    intervalLockSeconds = _intervalLockSeconds;\\n  }\\n  function setIntervalCloseSeconds(uint256 _intervalCloseSeconds) public onlyManager {\\n    require(_intervalCloseSeconds >= intervalLockSeconds, \\\"Btcbingo: Wrong close timestamp\\\");\\n    intervalCloseSeconds = _intervalCloseSeconds;\\n  }\\n  function setCompanyPrize(uint256 _companyPrize) public onlyManager {\\n    Round storage round = rounds[currentEpoch];\\n    round.totalAmount = round.totalAmount - companyPrize + _companyPrize;\\n    companyPrize = _companyPrize;\\n  }\\n  function setAccumulator(address _accumulator) public onlyManager {\\n    accumulator = _accumulator;\\n  }\\n  function setPrizeDepositer(address _prizeDepositer) public onlyManager {\\n    prizeDepositer = _prizeDepositer;\\n  }\\n  function setOperator(address _operatorAddress) public onlyManager {\\n    operatorAddress = _operatorAddress;\\n  }\\n  function changeExtraStrategy(uint8 index, uint256 amount) public onlyManager {\\n    require(extraStrategies[index] != 0, \\\"Not Exist strategy\\\");\\n    extraStrategies[index] = amount;\\n  }\\n  function addExtraStrategy(uint8 index, uint256 amount) public onlyManager {\\n    require(extraStrategies[index] == 0, \\\"Already Exist strategy\\\");\\n    extraStrategies[index] = amount;\\n    availableExtraBingos.push(index);\\n  }\\n  function removedExtraStrategy(uint8 index) public onlyManager {\\n    require(extraStrategies[index] != 0, \\\"Not Exist strategy\\\");\\n    uint256 last = availableExtraBingos.length - 1;\\n    for (uint i=0; i<=last; i++) {\\n      if (availableExtraBingos[i] == index) {\\n        availableExtraBingos[i] = availableExtraBingos[last];\\n        break;\\n      }\\n    }\\n    availableExtraBingos.pop();\\n    extraStrategies[index] = 0;\\n  }\\n  function addSocial(string memory _social, uint8 _index) public onlyManager {\\n    require(socialDic[_social] == 0, \\\"Already Exist Social\\\");\\n    socialDic[_social] = _index;\\n  }\\n  function removeSocial(string memory _social) public onlyManager {\\n    require(socialDic[_social] != 0, \\\"Not Existing Social\\\");\\n    socialDic[_social] = 0;\\n  }\\n\\n  function _startRound(uint256 _jackpotSize) internal {\\n    Round storage cround = rounds[currentEpoch];\\n    cround.startTimestamp = block.timestamp;\\n    cround.lockTimestamp = block.timestamp + intervalLockSeconds;\\n    cround.closeTimestamp = block.timestamp + intervalCloseSeconds;\\n    cround.epoch = currentEpoch;\\n    cround.totalAmount = _jackpotSize;\\n\\n    emit StartRound(currentEpoch);\\n  }\\n\\n  /**\\n    * @notice Determine if a round is valid for receiving bets\\n    * Round must have started and locked\\n    * Current timestamp must be within startTimestamp and closeTimestamp\\n    */\\n  function _bettable(uint256 epoch) internal view returns (bool) {\\n    return\\n      rounds[epoch].startTimestamp != 0 &&\\n      rounds[epoch].lockTimestamp != 0 &&\\n      block.timestamp > rounds[epoch].startTimestamp &&\\n      block.timestamp < rounds[epoch].lockTimestamp;\\n  }\\n\\n  /**\\n    * @notice Get latest recorded price from oracle\\n    * If it falls below allowed buffer or has not updated, it would be invalid.\\n    */\\n  function _getPriceFromOracle() internal view returns (uint80, int256) {\\n    uint256 leastAllowedTimestamp = block.timestamp + oracleUpdateAllowance;\\n    (uint80 roundId, int256 price, , uint256 timestamp, ) = priceFeed.latestRoundData();\\n    require(timestamp <= leastAllowedTimestamp, \\\"Oracle update exceeded max timestamp allowance\\\");\\n    require(\\n      uint256(roundId) > oracleLatestRoundId,\\n      \\\"Oracle update roundId must be larger than oracleLatestRoundId\\\"\\n    );\\n    return (roundId, price);\\n  }\\n\\n  /**\\n    * @notice Returns true if `account` is a contract.\\n    * @param account: account address\\n    */\\n  function _isContract(address account) internal view returns (bool) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"BingoEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"EndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"LockRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"StartRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addExtraStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_social\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"addSocial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableExtraBingos\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"prices\",\"type\":\"int256[]\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"bingoBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"bingoBTCViaOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"social\",\"type\":\"string\"}],\"name\":\"bingoBTCViaOperatorSocial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bingoDecimal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeExtraStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depoistPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depoistPrizeFromSupplyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"extraStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intervalLockSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intervalCloseSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jackpotSize\",\"type\":\"uint256\"}],\"name\":\"forceExecuteRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisLockRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllExtraBingos\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalCloseSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalLockSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleLatestRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUpdateAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceRounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeDepositer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removePrizeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_social\",\"type\":\"string\"}],\"name\":\"removeSocial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"removedExtraStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"closePrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"closeOracleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bingoLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"oracleCalled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"prizeDeposited\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accumulator\",\"type\":\"address\"}],\"name\":\"setAccumulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_bingoDecimal\",\"type\":\"uint8\"}],\"name\":\"setBingoDecimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bufferSeconds\",\"type\":\"uint256\"}],\"name\":\"setBufferSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_companyPrize\",\"type\":\"uint256\"}],\"name\":\"setCompanyPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intervalCloseSeconds\",\"type\":\"uint256\"}],\"name\":\"setIntervalCloseSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intervalLockSeconds\",\"type\":\"uint256\"}],\"name\":\"setIntervalLockSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usraddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizeDepositer\",\"type\":\"address\"}],\"name\":\"setPrizeDepositer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizeToken\",\"type\":\"address\"}],\"name\":\"setPrizeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prizeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDecimal\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"socialDic\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userFreeRounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRounds\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"userSocialFreeRounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BitcoinBingo", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000264990fbd0a4796a3e3d8e37c4d5f87a3aca5ebf0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}