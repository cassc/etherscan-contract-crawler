{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LPB5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ninterface IWBNB {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\\r\\ncontract LPB5 is Ownable, ReentrancyGuard {\\r\\n    address public lpToken;\\r\\n    uint256 public threshold = 1 ether;\\r\\n    mapping(address => uint256) public lpShares;\\r\\n    address[] public participants;\\r\\n    mapping(address => bool) public isParticipant;\\r\\n    mapping(address => uint256) public userIndex;\\r\\n    address public authorizedContract;\\r\\n    IWBNB public wbnbToken = IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\r\\n    uint256 public totalLP;\\r\\n    uint256 public totalLPDistributionIn;\\r\\n    uint256 public DistributionInIndex;\\r\\n\\r\\n    bool public distributionInProgress = false;\\r\\n    uint256 public currentDistributionIndex = 0;\\r\\n    uint256 public maxBatchSize = 50;\\r\\n    uint256 public wbnbConvertThreshold = 1 ether;\\r\\n    address public previous_user;\\r\\n\\r\\n    mapping(address => uint256) private _released;\\r\\n\\r\\n    bool public closed = false;\\r\\n    bool public closed2 = false;\\r\\n\\r\\n    event RewardsDistributed(uint256 totalAmount, address[] recipients, uint256[] amounts);\\r\\n    event ParticipantAdded(address participant);\\r\\n    event ParticipantRemoved(address participant);\\r\\n    event ThresholdUpdated(uint256 newThreshold);\\r\\n    event AuthorizedContractUpdated(address newAuthorizedContract);\\r\\n    event LPTokenUpdated(address newLPToken);\\r\\n    event DistributionStarted();\\r\\n    event DistributionEnded();\\r\\n\\r\\n    modifier onlyAuthorizedContract() {\\r\\n        require(msg.sender == authorizedContract, \\\"Only authorized contract can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isContract(address _addr) internal view returns (bool) {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    receive() external payable nonReentrant {\\r\\n\\r\\n        if (!closed) {\\r\\n            if (address(this).balance >= threshold) {\\r\\n                if (!distributionInProgress && totalLP > 0 && participants.length > 0) {\\r\\n                    totalLPDistributionIn = totalLP;\\r\\n                    DistributionInIndex = participants.length;\\r\\n                    distributionInProgress = true;\\r\\n                    emit DistributionStarted();\\r\\n                    return;\\r\\n                }else if (distributionInProgress) {\\r\\n                    _distributeRewards();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _distributeRewards() internal {\\r\\n        if (totalLPDistributionIn > 0 && DistributionInIndex > 0) {\\r\\n            uint256 totalDistributed = 0;\\r\\n            uint256 maxPayable = 0;\\r\\n            if (DistributionInIndex > currentDistributionIndex && (currentDistributionIndex + maxBatchSize) > DistributionInIndex) {\\r\\n                maxPayable = DistributionInIndex - currentDistributionIndex;\\r\\n            }else{\\r\\n                maxPayable = currentDistributionIndex + maxBatchSize;\\r\\n            }\\r\\n            for (uint256 i = currentDistributionIndex; i < maxPayable; i++) {\\r\\n                address payable account = payable(participants[i]);\\r\\n                uint256 payment = _releasable(account);\\r\\n                if (payment > 0) {\\r\\n                    _released[account] += payment;\\r\\n                    payable(account).call{value: payment}(\\\"\\\");\\r\\n                    totalDistributed += payment;\\r\\n                }\\r\\n            }\\r\\n            currentDistributionIndex += maxBatchSize;\\r\\n\\r\\n            if (currentDistributionIndex >= participants.length) {\\r\\n                distributionInProgress = false;\\r\\n                currentDistributionIndex = 0;\\r\\n                totalLPDistributionIn = 0;\\r\\n                DistributionInIndex = 0;\\r\\n            }\\r\\n        }else{\\r\\n            distributionInProgress = false;\\r\\n            currentDistributionIndex = 0;\\r\\n            totalLPDistributionIn = 0;\\r\\n            DistributionInIndex = 0;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function storeLPBalance(address user) external onlyAuthorizedContract {\\r\\n        if (!closed2 && !isContract(user) && user != address(0)) {\\r\\n            _storeLPBalance(user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _storeLPBalance(address user) internal {\\r\\n\\r\\n        if(user != address(0)){\\r\\n            if (previous_user == address(0)) {\\r\\n                previous_user = user;\\r\\n            }\\r\\n\\r\\n            uint256 newLPBalance = IERC20(lpToken).balanceOf(previous_user);\\r\\n            uint256 oldLPBalance = lpShares[previous_user];\\r\\n\\r\\n            if (newLPBalance > 0 && newLPBalance != oldLPBalance) {\\r\\n                if (oldLPBalance == 0) {\\r\\n                    participants.push(previous_user);\\r\\n                    userIndex[previous_user] = participants.length - 1;\\r\\n                    emit ParticipantAdded(previous_user);\\r\\n                }\\r\\n                lpShares[previous_user] = newLPBalance;\\r\\n                totalLP = totalLP - oldLPBalance + newLPBalance;\\r\\n            } else if (newLPBalance == 0) {\\r\\n                if (!distributionInProgress && isParticipant[previous_user]) {\\r\\n                    _removeParticipant(previous_user);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            isParticipant[previous_user] = true;\\r\\n            previous_user = user;\\r\\n\\r\\n            if (wbnbToken.balanceOf(address(this)) >= wbnbConvertThreshold) {\\r\\n                wbnbToken.withdraw(wbnbToken.balanceOf(address(this)));\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function _removeParticipant(address user) internal {\\r\\n        if (participants.length == 0) return;\\r\\n        uint256 userIndexToRemove = userIndex[user];\\r\\n        if (userIndexToRemove < participants.length - 1) {\\r\\n            address lastUser = participants[participants.length - 1];\\r\\n            participants[userIndexToRemove] = lastUser;\\r\\n            userIndex[lastUser] = userIndexToRemove;\\r\\n        }\\r\\n        participants.pop();\\r\\n        lpShares[user] = 0;\\r\\n        emit ParticipantRemoved(user);\\r\\n    }\\r\\n\\r\\n    function _releasable(address account) private view returns (uint256) {\\r\\n\\r\\n        if (totalLPDistributionIn == 0) return 0;\\r\\n        return (threshold * lpShares[account]) / totalLPDistributionIn;\\r\\n    }\\r\\n\\r\\n    function setThreshold(uint256 _threshold) external onlyOwner {\\r\\n        threshold = _threshold;\\r\\n        emit ThresholdUpdated(_threshold);\\r\\n    }\\r\\n\\r\\n    function addlpSharesAndparticipants(address[] memory _participants) external onlyOwner {\\r\\n        require(_participants.length > 0, \\\"Recipients and amounts length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _participants.length; i++) {\\r\\n            _storeLPBalance(_participants[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimBalance() external onlyOwner nonReentrant {\\r\\n        require(!distributionInProgress, \\\"Distribution is in progress\\\");\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function claimToken(address token, uint256 amount) external onlyOwner {\\r\\n        require(token != address(lpToken), \\\"Cannot claim the LP tokens\\\");\\r\\n        require(!distributionInProgress, \\\"Distribution is in progress\\\");\\r\\n        IERC20(token).transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function setAuthorizedContract(address _authorizedContract) external onlyOwner {\\r\\n        authorizedContract = _authorizedContract;\\r\\n        emit AuthorizedContractUpdated(_authorizedContract);\\r\\n    }\\r\\n\\r\\n    function setLPToken(address _lpToken) external onlyOwner {\\r\\n        lpToken = _lpToken;\\r\\n        emit LPTokenUpdated(_lpToken);\\r\\n    }\\r\\n\\r\\n    function setWbnbConvertThreshold(uint256 _wbnbConvertThreshold) external onlyOwner {\\r\\n        wbnbConvertThreshold = _wbnbConvertThreshold;\\r\\n    }\\r\\n\\r\\n    function setMaxBatchSize(uint256 _maxBatchSize) external onlyOwner {\\r\\n        maxBatchSize = _maxBatchSize;\\r\\n    }\\r\\n\\r\\n    function getParticipants() external view returns (address[] memory) {\\r\\n        return participants;\\r\\n    }\\r\\n\\r\\n    function getParticipantsLength() external view returns (uint256) {\\r\\n        return participants.length;\\r\\n    }\\r\\n\\r\\n    function setClosed(bool _closed) external onlyOwner {\\r\\n        closed = _closed;\\r\\n    }\\r\\n\\r\\n    function setClosed2(bool _closed2) external onlyOwner {\\r\\n        closed2 = _closed2;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAuthorizedContract\",\"type\":\"address\"}],\"name\":\"AuthorizedContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLPToken\",\"type\":\"address\"}],\"name\":\"LPTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DistributionInIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_participants\",\"type\":\"address[]\"}],\"name\":\"addlpSharesAndparticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closed2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDistributionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipantsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isParticipant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previous_user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizedContract\",\"type\":\"address\"}],\"name\":\"setAuthorizedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_closed\",\"type\":\"bool\"}],\"name\":\"setClosed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_closed2\",\"type\":\"bool\"}],\"name\":\"setClosed2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"setLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBatchSize\",\"type\":\"uint256\"}],\"name\":\"setMaxBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wbnbConvertThreshold\",\"type\":\"uint256\"}],\"name\":\"setWbnbConvertThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"storeLPBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPDistributionIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbConvertThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbToken\",\"outputs\":[{\"internalType\":\"contract IWBNB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LPB5", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}