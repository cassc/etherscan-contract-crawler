{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Xchain/WXPCToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {size := extcodesize(account)}\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success,) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address internal _owner;\\n    address private _lastOwner;\\n    uint256 public olt;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function lockOwner(uint256 time) public onlyOwner {\\n        olt = block.timestamp + time;\\n        _lastOwner = _owner;\\n        _owner = address(0);\\n        emit OwnershipTransferred(_owner, address(0));\\n    }\\n\\n    function lastOwner() public view returns (address) {\\n        require(_lastOwner == _msgSender(), \\\"Ownable: permission denied\\\");\\n        return _lastOwner;\\n    }\\n\\n    function unLockOwner() public {\\n        require(_lastOwner == _msgSender(), \\\"Ownable: permission denied\\\");\\n        require(block.timestamp >= olt, \\\"Ownable: permission denied\\\");\\n        _owner = _lastOwner;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB)\\n    external\\n    returns (address pair);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external\\n    returns (\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidity\\n    );\\n}\\n\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n        if (valueIndex != 0) {// Equivalent to contains(set, value)\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n            bytes32 lastvalue = set._values[lastIndex];\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1;\\n            // All indexes are 1-based\\n            set._values.pop();\\n            delete set._indexes[value];\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\\ncontract TokenReceiver {\\n    address public owner;\\n    address public spender;\\n    address public token;\\n    constructor (address token_, address spender_, address owner_) public {\\n        owner = owner_;\\n        spender = spender_;\\n        token = token_;\\n        IERC20(token).approve(spender, 10 ** 12 * 10 ** 18);\\n    }\\n    function increase() public {\\n        require(msg.sender == owner, \\\"permission denied\\\");\\n        IERC20(token).approve(spender, 10 ** 12 * 10 ** 18);\\n    }\\n\\n    function donateDust(address addr, uint256 amount) public {\\n        require(msg.sender == owner, \\\"permission denied\\\");\\n        TransferHelper.safeTransfer(addr, msg.sender, amount);\\n    }\\n\\n    function donateEthDust(uint256 amount) public {\\n        require(msg.sender == owner, \\\"permission denied\\\");\\n        TransferHelper.safeTransferETH(msg.sender, amount);\\n    }\\n\\n    function transferOwner(address newOwner) public {\\n        require(msg.sender == owner, \\\"permission denied\\\");\\n        owner = newOwner;\\n    }\\n}\\n\\ninterface IRelationshipList {\\n    function root() external view returns (address);\\n    function referee(address account) external view returns (address);\\n}\\n\\ncontract WXPCToken is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public ecology;\\n\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint8 private _decimals = 18;\\n    uint256 private _tTotal = 1000000000 * 10 ** 18;\\n    string private _name = \\\"WXPC\\\";\\n    string private _symbol = \\\"WXPC\\\";\\n\\n    mapping(address => bool) private _isExcludedFromFee;\\n\\n    uint public addPriceTokenAmount = 10000;\\n    bool public minEnable = true;\\n    uint256 public minAmount = 1;\\n    address public constant HOLE = address(0xdEaD);\\n\\n    address public noRewardAddr = 0x494aAFf178eCB94886D012e1232AF2d2B630ba44;\\n\\n    mapping(address => bool) public ibf;\\n    mapping(address => bool) public ibt;\\n    mapping(address => bool) public iwf;\\n    mapping(address => bool) public iwt;\\n\\n    struct Interest {\\n        uint256 index;\\n        uint256 period;\\n        uint256 lastSendTime;\\n        uint minAward;\\n        uint award;\\n        uint sendCount;\\n        IERC20 token;\\n        EnumerableSet.AddressSet tokenHolder;\\n    }\\n\\n    address public fromAddress;\\n    address public toAddress;\\n\\n    address public marketReceiver;\\n    address public lpReceiver;\\n\\n    Interest private lpInterest;\\n    address public uniswapV2Router;\\n    address public uniswapV2Pair;\\n    address public usdt;\\n    address public holder;\\n    mapping(address => bool) public ammPairs;\\n\\n    bool inSwapAndLiquify;\\n\\n    uint256[5] rebateFees = [uint256(10), uint256(5), uint256(5), uint256(5) ,uint256(5)];\\n\\n    function name() public override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public override view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _tOwned[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    constructor(\\n        address _router,\\n        address _usdt,\\n        address _ecology\\n    ) public {\\n        usdt = _usdt;\\n        uniswapV2Router = _router;\\n        uniswapV2Pair = IUniswapV2Factory(IUniswapV2Router02(_router).factory())\\n        .createPair(address(this), usdt);\\n\\n        ammPairs[uniswapV2Pair] = true;\\n\\n        _initLimitStrategy(uniswapV2Pair, _msgSender());\\n\\n        marketReceiver = address (new TokenReceiver(address(usdt), address(this), msg.sender));\\n        lpReceiver = address(new TokenReceiver(address(usdt), address(this), msg.sender));\\n\\n        lpInterest.token = IERC20(uniswapV2Pair);\\n        lpInterest.lastSendTime = block.timestamp;\\n        lpInterest.minAward = 1e18;\\n        lpInterest.period = 600;\\n        lpInterest.sendCount = 50;\\n        _tOwned[_msgSender()] = _tTotal;\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n\\n        ecology = _ecology;\\n    }\\n\\n    function _initLimitStrategy(address pair, address owner) private {\\n        ibf[pair] = true;\\n        ibt[pair] = true;\\n        iwf[owner] = true;\\n        iwt[owner] = true;\\n        _isExcludedFromFee[owner] = true;\\n    }\\n\\n    function _isLiquidity(address from, address to) internal view returns (bool isAdd, bool isDel) {\\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\\n        uint r0;\\n        uint bal0;\\n        if (token0 == usdt) {\\n            (r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\\n            bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\\n        } else {\\n            token0 = IUniswapV2Pair(address(uniswapV2Pair)).token1();\\n            (, r0,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\\n            bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\\n        }\\n        if (ammPairs[to]) {\\n            if (token0 != address(this) && bal0 > r0) {\\n                isAdd = bal0 - r0 > addPriceTokenAmount;\\n            }\\n        }\\n        if (ammPairs[from]) {\\n            if (token0 != address(this) && bal0 < r0) {\\n                isDel = r0 - bal0 > 0;\\n            }\\n        }\\n    }\\n\\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount) private {\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount);\\n        emit Transfer(sender, recipient, tAmount);\\n    }\\n\\n    function _transferWithFee(address from, address to, uint256 amount, bool takeFee) private {\\n        /// fee\\n        if (takeFee) {\\n            uint256 lpFee = amount.mul(20).div(1000);\\n            _tokenTransfer(from, address(this), lpFee);\\n            lpInterest.award = lpInterest.award + lpFee;\\n            uint256 burnFee = amount.mul(5).div(1000);\\n            _tokenTransfer(from, HOLE, burnFee);\\n            uint256 marketFee = amount.mul(5).div(1000);\\n            _tokenTransfer(from, ecology, marketFee);\\n\\n            amount = amount.sub(lpFee).sub(burnFee).sub(marketFee);\\n        }\\n        if (minEnable) {\\n            if (ammPairs[to] && _tOwned[from] - minAmount <= amount) {\\n                amount = _tOwned[from] - minAmount;\\n            }\\n            if (!ammPairs[to] && !ammPairs[from] && _tOwned[from] - minAmount <= amount) {\\n                amount = _tOwned[from] - minAmount;\\n            }\\n        }\\n        _tokenTransfer(from, to, amount);\\n    }\\n\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        require(!ibf[from] || iwt[to], \\\"ERC20: transfer refuse by from\\\");\\n        require(!ibt[to] || iwf[from], \\\"ERC20: transfer refuse by to\\\");\\n\\n        bool isAddLiquidity;\\n        bool isDelLiquidity;\\n        (isAddLiquidity, isDelLiquidity) = _isLiquidity(from, to);\\n\\n        bool takeFee = false;\\n        if (ammPairs[from] && !_isExcludedFromFee[to] && !isDelLiquidity) {\\n            takeFee = true;\\n        }\\n        if (ammPairs[to] && !_isExcludedFromFee[from] && !isAddLiquidity) {\\n            takeFee = true;\\n        }\\n\\n        _transferWithFee(from, to, amount, takeFee);\\n\\n        if (fromAddress == address(0)) fromAddress = from;\\n        if (toAddress == address(0)) toAddress = to;\\n        if (!ammPairs[fromAddress]) {\\n            _setEst(lpInterest, fromAddress);\\n        }\\n        if (!ammPairs[toAddress]) {\\n            _setEst(lpInterest, toAddress);\\n        }\\n        fromAddress = from;\\n        toAddress = to;\\n        if (\\n            from != address(this)\\n            && lpInterest.lastSendTime + lpInterest.period < block.timestamp\\n            && lpInterest.award > 0\\n            && lpInterest.award <= IERC20(address(this)).balanceOf(address(this))\\n            && lpInterest.token.totalSupply() > 1e17) {\\n\\n            lpInterest.lastSendTime = block.timestamp;\\n            _processEst();\\n        }\\n    }\\n\\n    function _setEst(Interest storage est, address owner) private {\\n        if (owner == address(0) || owner == HOLE) {\\n            // not allow 0 or hole\\n            return;\\n        }\\n        if (est.tokenHolder.contains(owner)) {\\n            if (est.token.balanceOf(owner) == 0) {\\n                est.tokenHolder.remove(owner);\\n            }\\n            return;\\n        }\\n        if (est.token.balanceOf(owner) > 0) {\\n            est.tokenHolder.add(owner);\\n        }\\n    }\\n\\n    function _processEst() private {\\n        uint256 shareholderCount = lpInterest.tokenHolder.length();\\n\\n        if (shareholderCount == 0) return;\\n\\n        uint256 nowBalance = lpInterest.award;\\n        uint256 surplusAmount = nowBalance;\\n        uint256 iterations = 0;\\n        uint index = lpInterest.index;\\n        uint sendedCount = 0;\\n        uint sendCountLimit = lpInterest.sendCount;\\n\\n        uint ts = lpInterest.token.totalSupply();\\n        ts = ts - lpInterest.token.balanceOf(noRewardAddr) - lpInterest.token.balanceOf(HOLE) - lpInterest.token.balanceOf(address(0));\\n        while (sendedCount < sendCountLimit && iterations < shareholderCount) {\\n            if (index >= shareholderCount) {\\n                index = 0;\\n            }\\n            address shareholder = lpInterest.tokenHolder.at(index);\\n            if (shareholder != noRewardAddr && shareholder != HOLE && shareholder != address(0)) {\\n                uint256 amount = nowBalance.mul(lpInterest.token.balanceOf(shareholder)).div(ts);\\n                if (IERC20(address(this)).balanceOf(address(this)) < amount || surplusAmount < amount) break;\\n                if (amount >= lpInterest.minAward) {\\n                    surplusAmount -= amount;\\n                    IERC20(address(this)).transfer(shareholder, amount);\\n                }\\n            }\\n            sendedCount++;\\n            iterations++;\\n            index++;\\n        }\\n        lpInterest.index = index;\\n        lpInterest.award = surplusAmount;\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function setIsExcludedFromFee(address account, bool status) public onlyOwner {\\n        _isExcludedFromFee[account] = status;\\n    }\\n\\n    function setStatus(address account, uint256 bw, uint256 ft, bool status) public onlyOwner {\\n        if (bw == 0) {\\n            if (ft == 0) {\\n                ibf[account] = status;\\n            } else {\\n                ibt[account] = status;\\n            }\\n        } else {\\n            if (ft == 0) {\\n                iwf[account] = status;\\n            } else {\\n                iwt[account] = status;\\n            }\\n        }\\n    }\\n\\n    function getStatus(address account) public view returns (bool blackFrom, bool blackTo, bool whiteFrom, bool whiteTo, bool feeWhite) {\\n        blackFrom = ibf[account];\\n        blackTo = ibt[account];\\n        whiteFrom = iwf[account];\\n        whiteTo = iwt[account];\\n        feeWhite = _isExcludedFromFee[account];\\n    }\\n\\n    function lpInterestInfo(uint256 i) public view returns (\\n        uint256 index,\\n        uint256 period,\\n        uint256 lastSendTime,\\n        uint minAward,\\n        uint award,\\n        uint sendCount,\\n        address token,\\n        address member\\n    ) {\\n        index = lpInterest.index;\\n        period = lpInterest.period;\\n        lastSendTime = lpInterest.lastSendTime;\\n        minAward = lpInterest.minAward;\\n        award = lpInterest.award;\\n        sendCount = lpInterest.sendCount;\\n        token = address(lpInterest.token);\\n        member = lpInterest.tokenHolder.at(i);\\n    }\\n\\n    function setLpInterestParams(uint256 lastSendTime, uint minAward, uint period, uint sendCount) public onlyOwner {\\n        lpInterest.lastSendTime = lastSendTime;\\n        lpInterest.minAward = minAward;\\n        lpInterest.period = period;\\n        lpInterest.sendCount = sendCount;\\n    }\\n\\n    function removeLpReward(address addr) public onlyOwner {\\n        lpInterest.tokenHolder.remove(addr);\\n    }\\n\\n    function setMinEnable(bool status) public onlyOwner  {\\n        minEnable = status;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecology\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecology\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"blackFrom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blackTo\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whiteFrom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whiteTo\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"feeWhite\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ibf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ibt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"iwf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"iwt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lockOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"lpInterestInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSendTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noRewardAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"olt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeLpReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastSendTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendCount\",\"type\":\"uint256\"}],\"name\":\"setLpInterestParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMinEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ft\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unLockOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WXPCToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000009d8be3b70b6b0b139cf59935ca035b483f333791", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}