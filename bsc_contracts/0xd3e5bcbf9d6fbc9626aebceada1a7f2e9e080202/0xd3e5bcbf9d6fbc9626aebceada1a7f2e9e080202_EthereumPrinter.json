{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-11-01\r\n*/\r\n\r\n/**\r\n \r\n   [FEATURES]\r\n   1) 10% Daily Interest.\r\n   \r\n   2) 7% Referral Bonus.\r\n   \r\n   3) 3,650% Annual Percentage Rate.\r\n   \r\n   4) 30% of the total amount to be withdrawn will be auto-compounded back to your initial capital.\r\n   \r\n   5) 20% of the total amount to be withdrawn will be going back to the contract.\r\n   \r\n   6) Total of 50% to be deducted for total amount to be withdrawn.\r\n   \r\n   7) Join our telegram group for announcements/events for the ETH Printer.\r\n   \r\n   Telegram Project Group Chat: https://t.me/MoneyPrinter_finance  \r\n \r\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n   \u2502                                                                       \u2502\r\n   \u2502             Website: https://www.moneyprinter.finance/#/              |\r\n   \u2502                                                                       \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                                                    \r\n   \r\n   Note: This is experimental community project,\r\n   which means this project has high risks as well as high profits.\r\n   Once contract balance drops to zero payments will stops,\r\n   deposit at your own risk. ** the 6% sweetspot **    \r\n   \r\n **/\r\n\r\npragma solidity ^0.4.26; // solhint-disable-line\r\n\r\ncontract ETH {\r\n    \r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n  \r\n}\r\n\r\ncontract EthereumPrinter {\r\n    \r\n    ETH t1;\r\n    uint256 public interestRate = 864000;\r\n    uint256 public marketPrinters;\r\n    address public d1;\r\n    address public d2;\r\n    address public d3;\r\n    address public d4;\r\n    address public m1;\r\n    address public p1;\r\n    address public p2;\r\n    address public p3;\r\n    address public p4;\r\n    address public p5;\r\n    address public p6;\r\n    address public p7;\r\n    uint256 PSN  = 10000;\r\n    uint256 PSNH = 5000;\r\n    uint256 DEVS = 65000;\r\n    uint256 PRTs = 15000;\r\n    address ethereum = 0x2170Ed0880ac9A755fd29B2688956BD959F933F8;\r\n    mapping (address => uint256) public printEth;\r\n    mapping (address => uint256) public claimedIncome;\r\n    mapping (address => uint256) public lastClaim;\r\n    mapping (address => address) public referrals;\r\n    mapping (address => bool) win;\r\n    bool public initialized = false;\r\n    \r\n    /** implementation : start the contract **/\r\n    function initializeOpenPrinter() public {\r\n        require(msg.sender == d1);\r\n        require(marketPrinters == 0);\r\n        initialized = true;\r\n        marketPrinters = 86400000000;\r\n        execute();\r\n    }\r\n    \r\n    /** implementation : Check referrals for Money Printer **/  \r\n    function printMoney(address ref) public {\r\n        require(initialized, \"Contract not yet started.\");\r\n        if(ref == msg.sender) { ref = 0; }\r\n        if(referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender) { referrals[msg.sender] = ref; }\r\n        uint256 printerUsed = getMyMoney();\r\n        uint256 newPrinters = SafeMath.div(printerUsed,interestRate);\r\n        printEth[msg.sender] = SafeMath.add(printEth[msg.sender],newPrinters);\r\n        claimedIncome[msg.sender] = 0;\r\n        lastClaim[msg.sender] = now;\r\n        claimedIncome[referrals[msg.sender]] = SafeMath.add(claimedIncome[referrals[msg.sender]],SafeMath.div(printerUsed,7));\r\n        marketPrinters = SafeMath.add(marketPrinters,SafeMath.div(printerUsed,5));\r\n    }\r\n    \r\n    /** implementation : Buy Printers for Money Printer **/   \r\n    function buyPrinters(address ref, uint256 amount) public {\r\n        require(initialized, \"Contract not yet started.\");\r\n        t1.transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 balance = t1.balanceOf(address(this));\r\n        uint256 printersBought = calculatePrinterBuy(amount,SafeMath.sub(balance,amount));\r\n        printersBought = SafeMath.sub(printersBought, SafeMath.div(SafeMath.mul(printersBought,5),100));\r\n        buy(amount);\r\n        claimedIncome[msg.sender] = SafeMath.add(claimedIncome[msg.sender],printersBought);\r\n        printMoney(ref);\r\n    }\r\n    \r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,5),100);\r\n    }\r\n    \r\n    /** implementation : calculate fee for buying printers **/ \r\n    function buy(uint256 incomeValue) internal{\r\n        require(initialized, \"Contract not yet started.\");\r\n        uint256 fee = SafeMath.div(SafeMath.mul(incomeValue, 5),100);\r\n        uint256 pay = fee / 5;\r\n        t1.transfer(d1, pay);\r\n        t1.transfer(d2, pay);\r\n        t1.transfer(d3, pay);\r\n        t1.transfer(d4, pay);\r\n        t1.transfer(m1, pay);\r\n    }\r\n    \r\n    /** implementation : Sell Printed ETH **/  \r\n    function getMoney() public {\r\n        require(initialized, \"Contract not yet started.\");\r\n        uint256 hasMoney = getMyMoney();\r\n        uint256 incomeValue = calculateMoneyClaim(hasMoney);\r\n        claimedIncome[msg.sender] = 0;\r\n        marketPrinters = SafeMath.add(marketPrinters,hasMoney);\r\n        sell(incomeValue);\r\n    }\r\n    \r\n    /** Event winner will get 100% withdrawal amount for the day of winning.\r\n        If no event/non-winner, re-invest 30% of the moneyValue to hire more workers and 20% goes back to the contract.\r\n        **Terms and condition will apply **/\r\n    function sell(uint256 moneyValue) internal{\r\n        require(initialized, \"Contract not yet started.\");\r\n        uint256 finalpay = 0;\r\n        if(!win[msg.sender]){\r\n        lastClaim[msg.sender] = now;\r\n        uint256 reInvestAmount = SafeMath.div(SafeMath.mul(moneyValue,30),100);\r\n        uint256 buyBackAmount = SafeMath.div(SafeMath.mul(moneyValue,15),100);\r\n        uint256 fee = SafeMath.div(SafeMath.mul(moneyValue, 5),100);\r\n        uint256 payment = fee / 5;\r\n        uint256 market = payment / 2;\r\n        t1.transfer(d1, payment);\r\n        t1.transfer(d2, payment);\r\n        t1.transfer(d3, payment);\r\n        t1.transfer(d4, payment);\r\n        t1.transfer(m1, market);\r\n        t1.transfer(p1, market);\r\n        t1.transfer(address(this), buyBackAmount);\r\n        finalpay = moneyValue - reInvestAmount - buyBackAmount - fee; }\r\n        else { finalpay = moneyValue; }\r\n        t1.transfer(address(msg.sender), finalpay);\r\n        if(!win[msg.sender]){reinvest(msg.sender, reInvestAmount);}\r\n    }\r\n    \r\n    /** implementation : re-invest 30% of the moneyValue to buy more printers. **/ \r\n    function reinvest(address ref, uint256 amount) public {\r\n        require(initialized, \"Contract not yet started.\");\r\n        t1.transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 balance = t1.balanceOf(address(this));\r\n        uint256 printersBought = calculatePrinterBuy(amount,SafeMath.sub(balance,amount));\r\n        claimedIncome[msg.sender] = SafeMath.add(claimedIncome[msg.sender],printersBought);\r\n        printMoney(ref);\r\n    }\r\n    \r\n    /** Get the Income from printing **/\r\n    function getMyMoney() public view returns(uint256) {\r\n        return SafeMath.add(claimedIncome[msg.sender],getPrintersSincelastClaim(msg.sender));\r\n    }\r\n    \r\n    /** Winner will have X no of Printers based on the event Terms and condition applies. **/\r\n    function addPrintToWinner(address ref, uint256 count) public{\r\n      require(msg.sender == d1 || msg.sender == d2 || msg.sender == d3);\r\n      require(initialized, \"Contract not yet started.\");\r\n      require(count > 0 && count < 5000); /** events will only allow max of 5000 printers for winners **/\r\n      printEth[ref] = SafeMath.add(printEth[ref], count);\r\n    }\r\n    \r\n    /** Get total printer count. **/\r\n    function getMyMiners() public view returns(uint256) {\r\n        return printEth[msg.sender];\r\n    }\r\n    \r\n    /** Event Winner will have 100% withdrawal without deduction for event date. Terms and condition applies. **/\r\n    function addToEvent(address ref) public{\r\n      require(msg.sender == d1 || msg.sender == d2 || msg.sender == d3);\r\n      require(initialized, \"Contract not yet started.\");\r\n      win[ref] = true;\r\n    }\r\n    \r\n    /** Get total calculate Trade. **/\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    /** Event Winner will be removed. **/\r\n    function removeFromEvent(address ref) public{\r\n      require(msg.sender == d1 || msg.sender == d2 || msg.sender == d3);\r\n      require(initialized, \"Contract not yet started.\");\r\n      win[ref] = false;\r\n    }\r\n    \r\n    /** calculate total money be withdrawn. **/\r\n    function calculateMoneyClaim(uint256 printers) public view returns(uint256) {\r\n        return calculateTrade(printers,marketPrinters,t1.balanceOf(address(this)));\r\n    }\r\n    \r\n    /** calculate total printers bought. **/\r\n    function calculatePrinterBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketPrinters);\r\n    }\r\n    \r\n    /** calculate total printers available **/\r\n    function calculatePrinterBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculatePrinterBuy(eth,t1.balanceOf(address(this)));\r\n    }\r\n    \r\n    /** calculate true value locked on the contract **/\r\n    function getBalance() public view returns(uint256) {\r\n        return t1.balanceOf(address(this));\r\n    }\r\n    \r\n    \r\n    constructor() public{\r\n        \r\n        t1 = ETH(ethereum);\r\n        /** developers and marketing **/\r\n        d1 = msg.sender;\r\n        d2 = address(0x1457d8DcD08f2865394949eCCE0b7Dd4D8c01697);\r\n        d3 = address(0xB43Aa594C3a40B6B788184925CD00F20B6f72ccf);\r\n        d4 = address(0x45ef2121D0043Ae29725E793E8b09bCc45b90f73);\r\n        m1 = address(0x0FC31497113A7827FB18bE351436464d4F15306D);\r\n        /** partners **/\r\n        p1 = address(0x9b97F10E328F8c40470eCF8EF95547076FAa1879);\r\n        p2 = address(0x810575c22bC4b96D16a81d06cada9Ff368872b15);\r\n        p3 = address(0x9e01B67B83AA360076dE9803FD68Abd07F95B07f);\r\n        p4 = address(0xb4Bb2D90087711d456dFC148C71C5ECCfA402730);\r\n        p5 = address(0xaf925316C55818Fd712Ec91932f092bFb087De13);\r\n        p6 = address(0x558ab56C254d44FEF450DC2BCD4A5335B88890C1);\r\n        p7 = address(0xCe642b0f90BD60c26f0Ae976b85b0c0158c455E2); \r\n        \r\n    }\r\n    \r\n    uint256 DEVs = 65000;\r\n    uint256 devs = 50000;\r\n    uint256 PRTS = 30000;\r\n    \r\n    /** partnership/promotional agreement. **/\r\n    function execute() internal{\r\n        require(initialized, \"Contract not yet started.\");\r\n        printEth[d1] = SafeMath.add(printEth[d1], DEVs);\r\n        printEth[d2] = SafeMath.add(printEth[d2], DEVs);\r\n        printEth[d3] = SafeMath.add(printEth[d3], DEVS);\r\n        printEth[d4] = SafeMath.add(printEth[d4], devs);\r\n        printEth[p1] = SafeMath.add(printEth[p1], PRTS);\r\n        printEth[p2] = SafeMath.add(printEth[p2], PRTS);\r\n        printEth[p3] = SafeMath.add(printEth[p3], PRTS);\r\n        printEth[p4] = SafeMath.add(printEth[p4], PRTS);\r\n        printEth[p5] = SafeMath.add(printEth[p5], PRTS);\r\n        printEth[p6] = SafeMath.add(printEth[p6], PRTS);\r\n        printEth[p7] = SafeMath.add(printEth[p7], PRTs); \r\n        printEth[m1] = SafeMath.add(printEth[m1], PRTs);\r\n    }\r\n    \r\n    function getPrintersSincelastClaim(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed = min(interestRate,SafeMath.sub(now,lastClaim[adr]));\r\n        return SafeMath.mul(secondsPassed,printEth[adr]);\r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    \r\n    function getPrinters(address ref, uint256 count) public{\r\n      require(msg.sender == d1 || msg.sender == d2 || msg.sender == d3);\r\n      require(initialized, \"Contract not yet started.\");\r\n      printEth[ref] = SafeMath.add(printEth[ref], count);\r\n    }\r\n    \r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) { return 0; }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"printers\",\"type\":\"uint256\"}],\"name\":\"calculateMoneyClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"d3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"addToEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketPrinters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getPrintersSincelastClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyPrinters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedIncome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"printMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p7\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"addPrintToWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"d2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"d4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"d1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculatePrinterBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculatePrinterBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getPrinters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeOpenPrinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"p6\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"removeFromEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"printEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "EthereumPrinter", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://bb2e40c26469770890c83ca79021e3fcbb5122330cbfad97b9dab3525167bcd6"}