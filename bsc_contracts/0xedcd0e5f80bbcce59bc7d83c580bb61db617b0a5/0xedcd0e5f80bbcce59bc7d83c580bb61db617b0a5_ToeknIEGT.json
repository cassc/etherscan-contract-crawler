{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Excludes {\r\n    mapping(address => bool) internal _Excludes;\r\n\r\n    function setExclude(address _user, bool b) public {\r\n        _authorizeExcludes();\r\n        _Excludes[_user] = b;\r\n    }\r\n\r\n    function setExcludes(address[] memory _user, bool b) public {\r\n        _authorizeExcludes();\r\n        for (uint256 i = 0; i < _user.length; i++) {\r\n            _Excludes[_user[i]] = b;\r\n        }\r\n    }\r\n\r\n    function isExcludes(address _user) public view returns (bool) {\r\n        return _Excludes[_user];\r\n    }\r\n\r\n    function _authorizeExcludes() internal virtual {}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address internal _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract TokenStation {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, type(uint256).max);\r\n    }\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IPair {\r\n    function sync() external;\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n    uint256 internal _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        _approve(owner, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, amount);\r\n        _takeTransfer(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[from] = fromBalance.sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance.sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            _approve(owner, spender, currentAllowance.sub(amount));\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract SwapUSDT is ERC20 {\r\n    using SafeMath for uint256;\r\n    address public pair;\r\n    IRouter public router;\r\n    address[] internal _buyPath;\r\n    address[] internal _sellPath;\r\n    IERC20 public TokenB;\r\n\r\n    function isPair(address _pair) public view returns (bool) {\r\n        return pair == _pair;\r\n    }\r\n\r\n    function getPrice4USDT(uint256 amountDesire) public view returns (uint256) {\r\n        uint256[] memory amounts = router.getAmountsOut(\r\n            amountDesire,\r\n            _sellPath\r\n        );\r\n        if (amounts.length > 1) return amounts[1];\r\n        return 0;\r\n    }\r\n\r\n    function _initPair(\r\n        address _router,\r\n        address pairB\r\n    ) internal returns (address) {\r\n        TokenB = IERC20(pairB);\r\n        router = IRouter(_router);\r\n        pair = IFactory(router.factory()).createPair(pairB, address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = pairB;\r\n        path[1] = address(this);\r\n        _buyPath = path;\r\n        address[] memory path2 = new address[](2);\r\n        path2[0] = address(this);\r\n        path2[1] = pairB;\r\n        _sellPath = path2;\r\n\r\n        TokenB.approve(_router, type(uint256).max);\r\n        _approve(address(this), _router, type(uint256).max);\r\n\r\n        return pair;\r\n    }\r\n\r\n    function swapAndSend2this(\r\n        uint256 amount,\r\n        address to,\r\n        address _tokenStation\r\n    ) internal {\r\n        IERC20 USDT = IERC20(_sellPath[1]);\r\n        swapAndSend2fee(amount, _tokenStation);\r\n        USDT.transferFrom(_tokenStation, to, USDT.balanceOf(_tokenStation));\r\n    }\r\n\r\n    function swapAndSend2fee(uint256 amount, address to) internal {\r\n        swapAndSend2feeWithPath(amount, to, _sellPath);\r\n    }\r\n\r\n    function swapAndSend2feeWithPath(\r\n        uint256 amount,\r\n        address to,\r\n        address[] memory path\r\n    ) internal {\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function isAddLiquidity() internal view returns (bool isAddLP) {\r\n        address token0 = IPair(pair).token0();\r\n        address token1 = IPair(pair).token1();\r\n        (uint256 r0, uint256 r1, ) = IPair(pair).getReserves();\r\n        uint256 bal0 = IERC20(token0).balanceOf(pair);\r\n        uint256 bal1 = IERC20(token1).balanceOf(pair);\r\n        if (token0 == address(this)) return bal1.sub(r1) > 1000;\r\n        else return bal0.sub(r0) > 1000;\r\n    }\r\n\r\n    function isRemoveLiquidity() internal view returns (bool isRemoveLP) {\r\n        address token0 = IPair(pair).token0();\r\n        if (token0 == address(this)) return false;\r\n        (uint256 r0, , ) = IPair(pair).getReserves();\r\n        uint256 bal0 = IERC20(token0).balanceOf(pair);\r\n        return r0 > bal0.add(1000);\r\n    }\r\n\r\n    function addLiquidityAutomatically(uint256 amountToken) internal {\r\n        super._takeTransfer(address(this), pair, amountToken);\r\n        IPair(pair).sync();\r\n    }\r\n\r\n    function addLiquidity(\r\n        uint256 amountToken,\r\n        address to,\r\n        address _tokenStation\r\n    ) internal {\r\n        uint256 half = amountToken.div(2);\r\n        IERC20 USDT = IERC20(_sellPath[1]);\r\n        uint256 amountBefore = USDT.balanceOf(_tokenStation);\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            half,\r\n            0,\r\n            _sellPath,\r\n            _tokenStation,\r\n            block.timestamp\r\n        );\r\n        uint256 amountAfter = USDT.balanceOf(_tokenStation);\r\n        uint256 amountDiff = amountAfter.sub(amountBefore);\r\n        USDT.transferFrom(_tokenStation, address(this), amountDiff);\r\n        if (amountDiff > 0 && (amountToken - half) > 0) {\r\n            router.addLiquidity(\r\n                _sellPath[0],\r\n                _sellPath[1],\r\n                amountToken.sub(half),\r\n                amountDiff,\r\n                0,\r\n                0,\r\n                to,\r\n                block.timestamp.add(9)\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Token is SwapUSDT, Excludes, Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 public calcBase;\r\n    uint256 public feeMarketingBuy;\r\n    uint256 public feeMarketingSell;\r\n    uint256 public feeLiquiditySell;\r\n    uint256 public feeMarketingAll;\r\n    uint256 public feeLiquidityAll;\r\n    uint256 public feeBuyAll;\r\n    uint256 public feeSellAll;\r\n    uint256 public feeAll;\r\n    address public address1;\r\n    address public address2;\r\n    uint256 public amountKeep;\r\n    TokenStation public _TokenStation;\r\n    uint256 public thePrice;\r\n    uint256 public thePrice500U;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public decreaseRate;\r\n    uint256 public canSell = 1;\r\n    uint256 public swapTokensAt = 0.001 ether;\r\n    uint256 public feeFromSeller;\r\n    uint256 public feeFromBuyer;\r\n    address public receiveAddr = 0x3069d30f17936c5cD93dBFa689EC61c982ec85c0;\r\n\r\n    bool inSwap;\r\n    uint256 allCanBuy = 0;\r\n\r\n    function _initToken(\r\n        uint256 totalSupply_,\r\n        address _address1,\r\n        address _address2,\r\n        uint256 _thePrice500U,\r\n        address usdt_\r\n    ) internal {\r\n        calcBase = 10000;\r\n        address1 = _address1;\r\n        address2 = _address2;\r\n        thePrice500U = _thePrice500U;\r\n        _mint(receiveAddr, totalSupply_);\r\n        super.setExclude(_msgSender(), true);\r\n        super.setExclude(address(this), true);\r\n        super.setExclude(_address1, true);\r\n        super.setExclude(_address2, true);\r\n        super.setExclude(receiveAddr, true);\r\n        _refreshFeeAll();\r\n        _TokenStation = new TokenStation(usdt_);\r\n    }\r\n\r\n    function initPrice() public onlyOwner {\r\n        uint256 currentPrice = super.getPrice4USDT(1 ether);\r\n        _initPrice(currentPrice);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        if (isExcludes(from) || isExcludes(to)) {\r\n            super._transfer(from, to, amount);\r\n            return;\r\n        }\r\n        uint256 currentPrice = super.getPrice4USDT(1 ether);\r\n        if (allCanBuy < 1) {\r\n            allCanBuy = currentPrice >= thePrice500U ? 1 : 0;\r\n        }\r\n        uint256 fees;\r\n        if (isPair(from)) {\r\n            //Buy\r\n            if (allCanBuy < 1) {\r\n                require(currentPrice >= thePrice500U, \"not allowed\");\r\n            }\r\n\r\n            fees = _handFeeBuys(from, amount);\r\n            if (fees > 0) {\r\n                amount = amount.sub(fees);\r\n            }\r\n        } else if (isPair(to)) {\r\n            //Sell\r\n            _checkPrice();\r\n            require(canSell > 0, \"cannot sell today due to price decrease\");\r\n            if (balanceOf(from) < amount.add(amountKeep)) {\r\n                amount = balanceOf(from).sub(amountKeep);\r\n            }\r\n            fees = _handFeeSells(from, amount);\r\n            if (fees > 0) {\r\n                amount = amount.sub(fees);\r\n            }\r\n        } else {\r\n            if (feeFromBuyer > 0) {\r\n                handBuysSwap();\r\n            }\r\n\r\n            if (feeFromSeller > 0) {\r\n                handSellsSwap();\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function _checkPrice() internal {\r\n        uint256 daysSinceLastUpdate = (block.timestamp.sub(lastUpdateTime)).div(\r\n            1 days\r\n        );\r\n\r\n        uint256 currentPrice = super.getPrice4USDT(1 ether);\r\n        if (thePrice == 0) {\r\n            _initPrice(currentPrice);\r\n            return;\r\n        }\r\n\r\n        if (daysSinceLastUpdate <= 1) {\r\n            if (thePrice > currentPrice) {\r\n                //\u5728\u8dcc\r\n                decreaseRate = (\r\n                    ((thePrice.sub(currentPrice)).mul(100)).div(thePrice)\r\n                );\r\n            } else {\r\n                //\u5728\u6da8\r\n                decreaseRate = 0;\r\n            }\r\n\r\n            if (decreaseRate >= 20) {\r\n                canSell = 0;\r\n            } else {\r\n                canSell = 1;\r\n            }\r\n        } else {\r\n            _initPrice(currentPrice);\r\n        }\r\n    }\r\n\r\n    function _initPrice(uint256 currentPrice) private {\r\n        decreaseRate = 0;\r\n        lastUpdateTime = block.timestamp;\r\n        thePrice = currentPrice;\r\n        canSell = 1;\r\n    }\r\n\r\n    function handBuysSwap() internal {\r\n        if (inSwap) return;\r\n        _handBuysSwap();\r\n    }\r\n\r\n    function _handBuysSwap() internal lockSwap {\r\n        if (feeFromBuyer >= swapTokensAt) {\r\n            super.swapAndSend2fee(feeFromBuyer, address(address1));\r\n            feeFromBuyer = 0;\r\n        }\r\n    }\r\n\r\n    function handSellsSwap() internal {\r\n        if (inSwap) return;\r\n        _handSellsSwap();\r\n    }\r\n\r\n    function _handSellsSwap() internal lockSwap {\r\n        if (feeFromSeller >= swapTokensAt) {\r\n            uint256 _feeLiquidity = feeFromSeller.div(3);\r\n            super.addLiquidity(_feeLiquidity, address2, address(_TokenStation));\r\n\r\n            uint256 _feeAddress2 = feeFromSeller.sub(_feeLiquidity);\r\n            super.swapAndSend2fee(_feeAddress2, address(address2));\r\n            feeFromSeller = 0;\r\n        }\r\n    }\r\n\r\n    function _handFeeBuys(\r\n        address from,\r\n        uint256 amount\r\n    ) private returns (uint256 fee) {\r\n        if (feeBuyAll == 0) return fee;\r\n        fee = (amount.mul(feeBuyAll)).div(calcBase);\r\n        super._takeTransfer(from, address(this), fee);\r\n        feeFromBuyer = feeFromBuyer + fee;\r\n    }\r\n\r\n    function _handFeeSells(\r\n        address from,\r\n        uint256 amount\r\n    ) private returns (uint256 fee) {\r\n        if (feeSellAll == 0) return fee;\r\n        fee = (amount.mul(feeSellAll)).div(calcBase);\r\n        super._takeTransfer(from, address(this), fee);\r\n        feeFromSeller = feeFromSeller + fee;\r\n    }\r\n\r\n    function _refreshFeeAll() private {\r\n        feeMarketingAll = feeMarketingBuy.add(feeMarketingSell);\r\n        feeLiquidityAll = feeLiquiditySell;\r\n        feeBuyAll = feeMarketingBuy;\r\n        feeSellAll = feeMarketingSell.add(feeLiquiditySell);\r\n        feeAll = feeBuyAll.add(feeSellAll);\r\n    }\r\n\r\n    function setSwapTokensAt(uint256 num) public onlyOwner {\r\n        swapTokensAt = num;\r\n    }\r\n\r\n    modifier lockSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    function rescueLossToken(address token, uint256 amount) public {\r\n        IERC20(token).transfer(receiveAddr, amount);\r\n    }\r\n\r\n    function _authorizeExcludes() internal virtual override onlyOwner {}\r\n}\r\n\r\ncontract ToeknIEGT is Token {\r\n    constructor() ERC20(\"IEGT\", \"IEGT\") {\r\n        uint256 _totalSupply = 5000000 ether;\r\n\r\n        address _address1 = address(0x56f19FeCf5BCdCCE06fE303Da3c8324002745A3a);\r\n\r\n        address _address2 = address(0xa86797Aa05D07B93B008FB3BF29D911bA32491e8);\r\n        // \u8def\u7531\r\n        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        // \u4ea4\u6613\u5bf9U\r\n        address _usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n        super._initPair(_router, _usdt);\r\n        // \u4ee3\u5e01\u4ef7\u683c\u5c0f\u4e8e500u, \u4ec5\u9879\u76ee\u65b9\u6307\u5b9a\u5730\u5740\u53ef\u4ee5\u8d2d\u4e70\r\n        uint256 _thePrice500U = 500 ether;\r\n        // \u8d2d\u4e70\u8d39\u7528,1%\u624b\u7eed\u8d39\u7ed9\u6307\u5b9a\u5730\u5740\uff08\u5730\u57401\uff09\r\n        feeMarketingBuy = 100;\r\n        // \u5356\u51fa\u8d39\u7528,4%\u624b\u7eed\u8d39\u7ed9\u6307\u5b9a\u5730\u5740\uff08\u5730\u57402\uff09\r\n        feeMarketingSell = 400;\r\n        // \u5356\u51fa\u8d39\u7528,2%\u7ed9Lp\r\n        feeLiquiditySell = 200;\r\n\r\n        super._initToken(\r\n            _totalSupply,\r\n            _address1,\r\n            _address2,\r\n            _thePrice500U,\r\n            _usdt\r\n        );\r\n        // \u9632\u6b62\u5356\u7a7a\uff0c\u4fdd\u7559\u6301\u5e01\u6570\r\n        amountKeep = 0.0001 ether;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TokenStation\",\"outputs\":[{\"internalType\":\"contract TokenStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountKeep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuyAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFromBuyer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFromSeller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquidityAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquiditySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketingAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketingBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketingSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSellAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"}],\"name\":\"getPrice4USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isExcludes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueLossToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setExcludes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thePrice500U\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ToeknIEGT", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://73eb3cf0d306ed7050d93937be563e3223cb30487420edcb094c24365d154362"}