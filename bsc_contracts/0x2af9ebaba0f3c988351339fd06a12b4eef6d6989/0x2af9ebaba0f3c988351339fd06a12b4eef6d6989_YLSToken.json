{"SourceCode": "pragma solidity =0.6.6;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'math-mul-overflow');\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, 'math-div-overflow');\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, 'math-mod-overflow');\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract YLSToken is IERC20 {\r\n    \r\n    event Release(address indexed from, uint value);\r\n    \r\n    event AddedBlackList(address _user);\r\n    \r\n    using SafeMath for uint;\r\n\r\n    address private _owner ;\r\n    string private override constant _name = \"Y luxurious\";\r\n    string private override constant _symbol = \"YLS\";\r\n    uint8 private override constant _decimals = 18;\r\n    uint  private override _totalSupply ;\r\n    uint private _init = 10000 * 10**18;\r\n    uint private _groups = 500 * 10**18;\r\n    uint private _community = 500 * 10**18;\r\n    uint private _sum_release = 9000 * 10**18;\r\n    uint private _released = 0;\r\n    uint private _group_per_release = 50 * 10**18;\r\n    \r\n    mapping (address => uint256) public isBlackListed;\r\n    \r\n    struct ReleaseInfo {\r\n        uint256 per_timestamp;\r\n        uint256 sum;\r\n        uint256 per_release;\r\n        uint256 left;\r\n    }\r\n    \r\n    struct FreezeStruct {\r\n        uint256 max_time ; // max release time\r\n        uint256 released_time ;// this time of release;\r\n        uint256 last_timestamp ; // last timestamp of release;\r\n        uint256 per_timestamp ;\r\n        uint256 per_release ; // release number per time;\r\n    }\r\n    \r\n    ReleaseInfo[] private releaseInfo ;\r\n    \r\n    uint256 public phase = 0 ;\r\n    \r\n    uint256 public phaseLeftBalance = 0;//this phase left.\r\n    \r\n    bool public phaseStart = false;//if phase started\r\n    \r\n    mapping(uint256 => mapping(address=>FreezeStruct)) private userInfo;\r\n    \r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    uint256 private _half_year = 15552000;//half year time\r\n    \r\n    uint256 private _month = 2592000;//one month time\r\n    \r\n    uint256 private _phase_times = 10;//every phase ervery user release times.\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function getTimestamp() public view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n    \r\n    function addBlackList (address _evilUser) public  {\r\n        require(msg.sender == _owner,\"permission error\");\r\n        require(isBlackListed[_evilUser] == 0,\"address already in black list.\");\r\n        isBlackListed[_evilUser] = block.timestamp;\r\n        emit AddedBlackList(_evilUser);\r\n    }\r\n    \r\n    \r\n    function startPhase()public returns (bool){\r\n        require(msg.sender == _owner,\"permission error\");\r\n        phaseStart = true;\r\n    }\r\n    \r\n    function stopPhase()public returns (bool){\r\n        require(msg.sender == _owner,\"permission error\");\r\n        phaseStart = false;\r\n    }\r\n    \r\n    function addPhase(uint256 maxBalance,uint256 perBalance)public returns (bool){\r\n        if(phase>0){\r\n            require(releaseInfo[phase].left==0,\"last phase not end.\");\r\n        }\r\n        require(msg.sender == _owner,\"permission error\");\r\n        require(maxBalance.add(_released)<=_sum_release,\"balance overflow\");\r\n        require(maxBalance.mod(perBalance)==0,\"math:can not div to integer.\");\r\n        require(perBalance.mod(_phase_times)==0,\"math:can not div to integer.\");\r\n        releaseInfo.push(ReleaseInfo({\r\n            per_timestamp : _month,\r\n            sum : maxBalance,\r\n            per_release : perBalance,\r\n            left : maxBalance\r\n        }));\r\n        phaseLeftBalance = maxBalance;\r\n        _released = _released.add(maxBalance);\r\n        phase = phase + 1;\r\n        phaseStart = true;\r\n    }\r\n    \r\n    function buy(address to)public returns (bool){\r\n        require(msg.sender == _owner,\"permission error\");\r\n        require(phase>0,\"phase error.\");\r\n        require(phaseStart,\"phase not start.\");\r\n        ReleaseInfo storage info = releaseInfo[phase];\r\n        require(info.left>=info.per_release.mul(_phase_times),\"no enough balance\");\r\n        FreezeStruct storage freezeStruct = userInfo[phase][to];\r\n        require(freezeStruct.last_timestamp==0&&freezeStruct.max_time==0,\"address already buys.\");\r\n        info.left = info.left.sub(info.per_release.mul(_phase_times));\r\n        phaseLeftBalance = phaseLeftBalance.sub(info.per_release.mul(_phase_times));\r\n        userInfo[phase][to].max_time=_phase_times;\r\n        userInfo[phase][to].released_time=1;\r\n        userInfo[phase][to].last_timestamp=block.timestamp;\r\n        userInfo[phase][to].per_timestamp=_month;\r\n        userInfo[phase][to].per_release=info.per_release;\r\n        _balances[to] = _balances[to].add(info.per_release);\r\n        emit Release(to, info.per_release);\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        for(uint256 i = 0 ;i<= phase;i++){\r\n            FreezeStruct storage freezeStruct = userInfo[i][account];\r\n            if(block.timestamp>=freezeStruct.last_timestamp){\r\n                if(freezeStruct.last_timestamp!=0&&freezeStruct.max_time!=0){\r\n                    uint256 checkTime = block.timestamp;\r\n                    if(isBlackListed[account]>0){\r\n                        checkTime = isBlackListed[account];\r\n                    }\r\n                    if(checkTime>freezeStruct.last_timestamp){\r\n                        uint256 releaseTimes = checkTime.sub( freezeStruct.last_timestamp)\r\n                                    .div(freezeStruct.per_timestamp);\r\n                        if(releaseTimes>freezeStruct.max_time.sub( freezeStruct.released_time)){\r\n                            releaseTimes = freezeStruct.max_time.sub(freezeStruct.released_time);\r\n                        }\r\n                        balance = balance.add(releaseTimes.mul(freezeStruct.per_release));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        _totalSupply = _init;\r\n        _balances[msg.sender] = _balances[msg.sender].add(_community);\r\n        emit Transfer(address(0), msg.sender, _community);\r\n        _initGroup(_month,_groups,_group_per_release,block.timestamp.add(_half_year));\r\n    }\r\n    \r\n    function _initGroup(uint per_timestamp,uint sum,uint per_release,uint start_release) private {\r\n        releaseInfo.push(ReleaseInfo({\r\n            per_timestamp : per_timestamp,\r\n            sum : sum,\r\n            per_release : per_release,\r\n            left : 0\r\n        }));\r\n        userInfo[phase][msg.sender].max_time=_phase_times;\r\n        userInfo[phase][msg.sender].released_time=0;\r\n        userInfo[phase][msg.sender].last_timestamp=start_release.sub(_month);\r\n        userInfo[phase][msg.sender].per_timestamp=_month;\r\n        userInfo[phase][msg.sender].per_release=per_release;\r\n    }\r\n    \r\n    function _release(address from) private {\r\n        for(uint256 i = 0 ;i<= phase;i++){\r\n            FreezeStruct storage freezeStruct = userInfo[i][from];\r\n            if(block.timestamp>=freezeStruct.last_timestamp){\r\n                if(freezeStruct.last_timestamp!=0&&freezeStruct.max_time!=0){\r\n                    uint256 checkTime = block.timestamp;\r\n                    if(isBlackListed[from]>0){\r\n                        checkTime = isBlackListed[from];\r\n                    }\r\n                    if(checkTime>freezeStruct.last_timestamp){\r\n                        uint256 releaseTimes = checkTime.sub( freezeStruct.last_timestamp)\r\n                                    .div(freezeStruct.per_timestamp);\r\n                        if(releaseTimes>freezeStruct.max_time.sub( freezeStruct.released_time)){\r\n                            releaseTimes = freezeStruct.max_time.sub( freezeStruct.released_time);\r\n                        }\r\n                        if(releaseTimes>0){\r\n                            userInfo[i][from].released_time = freezeStruct.released_time.add( releaseTimes);\r\n                            userInfo[i][from].last_timestamp = \r\n                                freezeStruct.last_timestamp.add( releaseTimes.mul(freezeStruct.per_timestamp));\r\n                            _balances[from] = _balances[from].add(releaseTimes.mul(freezeStruct.per_release));\r\n                            emit Release(from, releaseTimes.mul(freezeStruct.per_release));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    function _mint(address to, uint value) private  {\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) private {\r\n        _balances[from] = _balances[from].sub(value);\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        _release(from);\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\r\n        if (_allowances[from][msg.sender] != uint(-1)) {\r\n            _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perBalance\",\"type\":\"uint256\"}],\"name\":\"addPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseLeftBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phaseStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPhase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YLSToken", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://72fe20d20712e67376499534496ce3c69810ea716323ca7d13cc8f472a504e2a"}