{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC1155 {\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)external view returns (uint256[] memory);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from,address to,uint256 id,uint256 amount,bytes calldata data) external;\r\n    function safeBatchTransferFrom(address from,address to,uint256[] calldata ids,uint256[] calldata amounts,bytes calldata data) external;\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n// Inheritancea\r\ninterface IStakingRewards {\r\n    // Views\r\n    function getRewardForDuration() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // Mutative\r\n    function stake() external;\r\n    function exit() external;\r\n\r\n    // EVENTS\r\n    event Exit(address indexed user);\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n}\r\n\r\ninterface IERC721 {\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_) external;\r\n    function getHashrateByTokenId(uint256 tokenId_) external view returns(uint256);\r\n    function feedFBXOnlyPrice() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function mintNFTTo(uint256 degree,address to) external;\r\n}\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\nabstract contract ERC165 is IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\ninterface IERC1155Receiver is IERC165 {\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\ncontract ForthBoxErc1155_StakingRewards is ERC165,IStakingRewards, Ownable, ReentrancyGuard,IERC1155Receiver {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name = \"ForthBoxErc1155 DeFi\";\r\n    string private _symbol = \"Erc1155 DeFi\";\r\n\r\n    IERC1155 public stakingToken;\r\n    IERC721 public rewardsTokenNFT;\r\n\r\n    uint256 public rewardsDuration = 60 days;\r\n    uint256 public lastUpdateTime;\r\n\r\n    struct sStakeProperty {\r\n        uint256 _Num;\r\n        uint256 _UpdataTime;\r\n    }\r\n\r\n    mapping(address => sStakeProperty) private _stakePropertys;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    uint256 private _totalSupply=0;\r\n    uint256 public stakePrice = 3000e18;\r\n    uint256 public totalNum = 2300;\r\n    uint256 public maxStakeNumPerAdress = 1;\r\n    uint256 public alreadyStakeNum = 0;\r\n    bool public start = false;   \r\n\r\n    mapping (address => bool) private _Is_WhiteContractArr;\r\n    address[] private _WhiteContractArr;\r\n\r\n    constructor() {\r\n        rewardsTokenNFT = IERC721(0x95cbF549f2b03a7cbB8825c92645891165B41D7D);\r\n        stakingToken = IERC1155(0x1d64E85a41a711a6aeF17792A660b3E69a7dA758);\r\n\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function stakeTime(address account) external view returns (uint256) {\r\n        return _stakePropertys[account]._UpdataTime;\r\n    }\r\n    function getRewardForDuration() external view returns (uint256) {\r\n        return totalNum;\r\n    }\r\n    function stakeNum(address account) external view returns (uint256) {\r\n        return _stakePropertys[account]._Num;\r\n    }\r\n\r\n    function onERC1155Received(address,address,uint256,uint256,bytes calldata\r\n    ) external pure returns (bytes4)\r\n    {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata\r\n    ) external pure returns (bytes4){\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function isWhiteContract(address account) public view returns (bool) {\r\n        if(!account.isContract()) return true;\r\n        return _Is_WhiteContractArr[account];\r\n    }\r\n    function getWhiteAccountNum() public view returns (uint256){\r\n        return _WhiteContractArr.length;\r\n    }\r\n    function getWhiteAccountIth(uint256 ith) public view returns (address WhiteAddress){\r\n        require(ith <_WhiteContractArr.length, \"Defi: not in White Adress\");\r\n        return _WhiteContractArr[ith];\r\n    }\r\n    function getParameters(address account) public view returns (uint256[] memory){\r\n        uint256[] memory paraList = new uint256[](uint256(12));\r\n        paraList[0]= alreadyStakeNum;\r\n        paraList[1]= totalNum;\r\n        paraList[2]= _balances[account];\r\n        paraList[3]= _totalSupply;\r\n        paraList[4]= stakePrice;\r\n        paraList[5]= _stakePropertys[account]._Num;\r\n        paraList[6]= _stakePropertys[account]._UpdataTime;\r\n\r\n        paraList[7]= maxTokenNum[0]-minTokenNum[0];\r\n        paraList[8]= maxTokenNum[1]-minTokenNum[1];\r\n        paraList[9]= maxTokenNum[2]-minTokenNum[2];\r\n        paraList[10]= maxTokenNum[3]-minTokenNum[3];\r\n        paraList[11]= maxTokenNum[4]-minTokenNum[4];\r\n        return paraList;\r\n    }\r\n\r\n    //---write---//\r\n    uint256 public erc1155TokenId = 1;\r\n    uint256[5] public maxTokenNum =[1000,600,400,200,100];\r\n    uint256[5] public minTokenNum =[0,0,0,0,0];\r\n    uint256[5] public tokenDegree =[5,6,7,8,0];\r\n    uint256[5] public tokenCost =[15,20,30,45,100];\r\n    uint256 mType=1;\r\n    function stake() external nonReentrant {\r\n        require(mType > 0, \"Defi:buy type wrong\");\r\n        require(mType <=5, \"Defi:Cannot stake 0\");\r\n        require(start, \"Defi:not start\");\r\n        require(minTokenNum[mType-1].add(1) <= maxTokenNum[mType-1], \"Defi:stake num exceed max number\");\r\n        require(_stakePropertys[_msgSender()]._Num.add(1) <= maxStakeNumPerAdress, \"Defi:stake num exceed max number\");\r\n        require(isWhiteContract(_msgSender()), \"Defi: Contract not in white list!\");\r\n\r\n        stakingToken.safeTransferFrom(msg.sender, address(this),erc1155TokenId, tokenCost[mType-1],\"\");\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].add(tokenCost[mType-1]);\r\n        _totalSupply = _totalSupply.add(tokenCost[mType-1]);\r\n        \r\n        _stakePropertys[_msgSender()]._Num = _stakePropertys[_msgSender()]._Num.add(1);\r\n        _stakePropertys[_msgSender()]._UpdataTime = block.timestamp;\r\n        minTokenNum[mType-1] = minTokenNum[mType-1].add(1); \r\n\r\n        alreadyStakeNum = alreadyStakeNum.add(1); \r\n        if(mType<=4){\r\n            rewardsTokenNFT.mintNFTTo(tokenDegree[mType-1], _msgSender());\r\n        }\r\n        else{\r\n            for(uint256 i=0; i<4; ++i) {\r\n                rewardsTokenNFT.mintNFTTo(tokenDegree[i], _msgSender());\r\n            }\r\n        }\r\n\r\n        emit Staked(msg.sender, mType);\r\n    }\r\n   //\u53d6\u51fa\u4ee3\u5e01\u548c\u5956\u52b1\r\n    function exit() external nonReentrant {\r\n        require(block.timestamp >= _stakePropertys[_msgSender()]._UpdataTime + rewardsDuration,\"Defi: can only exit exceed rewards Duration!\");\r\n        require(_balances[msg.sender] > 0, \"Defi: not stake\");\r\n        require(start, \"Defi:not start\");\r\n        require(isWhiteContract(_msgSender()), \"Defi: Contract not in white list!\");\r\n   \r\n        uint256 stakeAmount = _balances[msg.sender];\r\n        _totalSupply = _totalSupply.sub(_balances[msg.sender] );\r\n        _balances[msg.sender] = 0;\r\n        _stakePropertys[_msgSender()]._Num=0;\r\n        if(stakeAmount>0)  stakingToken.safeTransferFrom(address(this),msg.sender,erc1155TokenId, stakeAmount,\"\");\r\n        emit Exit(_msgSender());\r\n    }\r\n\r\n    //---write onlyOwner---//\r\n    function setTokens(address _rewardNFTsToken,address _stakingToken,uint256 _rewardsDuration) external onlyOwner {\r\n        rewardsTokenNFT = IERC721(_rewardNFTsToken);\r\n        stakingToken = IERC1155(_stakingToken);\r\n        rewardsDuration = _rewardsDuration;\r\n    }\r\n\r\n    function notifyRewardAmount(uint256 tMaxStakeNumPerAdress,uint256 tErc1155TokenId,bool tStart,uint256 tType) external onlyOwner{\r\n        maxStakeNumPerAdress = tMaxStakeNumPerAdress;\r\n        start = tStart;\r\n        erc1155TokenId = tErc1155TokenId;\r\n        lastUpdateTime = block.timestamp;\r\n        mType = tType;\r\n    }\r\n    function addWhiteAccount(address account) external onlyOwner{\r\n        require(!_Is_WhiteContractArr[account], \"Defi:Account is already White list\");\r\n        require(account.isContract(), \"Defi: not Contract Adress\");\r\n        _Is_WhiteContractArr[account] = true;\r\n        _WhiteContractArr.push(account);\r\n    }\r\n    function removeWhiteAccount(address account) external onlyOwner{\r\n        require(_Is_WhiteContractArr[account], \"Defi:Account is already out White list\");\r\n        for (uint256 i = 0; i < _WhiteContractArr.length; i++){\r\n            if (_WhiteContractArr[i] == account){\r\n                _WhiteContractArr[i] = _WhiteContractArr[_WhiteContractArr.length - 1];\r\n                _WhiteContractArr.pop();\r\n                _Is_WhiteContractArr[account] = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alreadyStakeNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155TokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"}],\"name\":\"getWhiteAccountIth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"WhiteAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteAccountNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeNumPerAdress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tMaxStakeNumPerAdress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tErc1155TokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tStart\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tType\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsTokenNFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardNFTsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenDegree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ForthBoxErc1155_StakingRewards", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://90e8fb7bb378ff796b26d3328f980f0c000a121691244704d6555ee6aeccfed0"}