{"SourceCode": "// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a98814b930910220d5b5ba25ed2d4dcf45e48315/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a98814b930910220d5b5ba25ed2d4dcf45e48315/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a98814b930910220d5b5ba25ed2d4dcf45e48315/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a98814b930910220d5b5ba25ed2d4dcf45e48315/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name = \"CatzCoin\";\r\n    string private _symbol = \"CATZ\";\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: catzCoin.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract CATZCoin is ERC20 {\r\n    \r\n    constructor ()  ERC20() {\r\n      // Set Contract's State\r\n      _totalSupply = 100000000000 * (10 ** uint256(decimals()));\r\n      _tokenMarketingAddress = 0x0b967f76D15aBf9Fd32f584c905E96Ac38eE69Fd;\r\n      _tokenExchangeAddress = 0x6520a4bEB513B96f9b2081874BC777229AeA0A5b;\r\n      _catzCoinCreationTime = block.timestamp;\r\n      _teamAddresses = [0xD1257dd8e2b87338f1618BF04Bba37a1C477cC78, 0x05196A0001B5552C7bC3e1f34EeA5255d1519d93, 0x3343b8C53676EbF357830910f233304BF60a0ce9, 0xB7332A228329896a3B286b8670880A3cA313094d];\r\n\r\n      _mint(address(this), _totalSupply);\r\n      \r\n      // Liquidity Allocation\r\n      exchangeLiquidity = (balanceOf(address(this)) * 40) / 100;\r\n      airDropLiquidity = (balanceOf(address(this)) * 15) / 100;\r\n      marketingLiquidity = (balanceOf(address(this)) * 5) / 100;\r\n      burnLiquidity = (balanceOf(address(this)) * 20) / 100;\r\n      teamDevLiquidity = (balanceOf(address(this)) * 20) / 100;\r\n      \r\n      //Vest EndTimes\r\n      uint256 _secondsInAMonth = 2628288;\r\n      firstVestEndTime = block.timestamp + (_secondsInAMonth * 3);\r\n      secondVestEndTime = block.timestamp + (_secondsInAMonth * 6);\r\n      thirdVestEndTime = block.timestamp + (_secondsInAMonth * 9);\r\n      fourthVestEndTime = block.timestamp + (_secondsInAMonth * 12);\r\n      \r\n      //Burn EndTimes\r\n      firstBurnTime = block.timestamp + (_secondsInAMonth * 6);\r\n      secondBurnTime = block.timestamp + (_secondsInAMonth * 12);\r\n      thirdBurnTime = block.timestamp + (_secondsInAMonth * 18);\r\n      fourthBurnTime = block.timestamp + (_secondsInAMonth * 24);\r\n      \r\n      //initate liquidity\r\n      _initateDevLiquidity();\r\n      _initiateExchangeLiquidity();\r\n    }\r\n    \r\n    //ERC20 State\r\n    address _tokenMarketingAddress;\r\n    address _tokenExchangeAddress;\r\n    uint256 _totalSupply;\r\n    uint256 _catzCoinCreationTime;\r\n    address[] _teamAddresses;\r\n    \r\n    //Token Allocation\r\n    uint256 exchangeLiquidity;\r\n    uint256 airDropLiquidity;\r\n    uint256 marketingLiquidity;\r\n    uint256 burnLiquidity;\r\n    uint256 teamDevLiquidity;\r\n    \r\n    //burn Mechanism\r\n    uint256 firstBurnTime;\r\n    uint256 secondBurnTime;\r\n    uint256 thirdBurnTime;\r\n    uint256 fourthBurnTime;\r\n    uint256 tokensBurnt;\r\n    bool firstBurnCompleted;\r\n    bool secondBurnCompleted;\r\n    bool thirdBurnCompleted;\r\n    bool fourthBurnCompleted;\r\n    \r\n    //vest Mechanism\r\n    uint256 firstVestEndTime;\r\n    uint256 secondVestEndTime;\r\n    uint256 thirdVestEndTime;\r\n    uint256 fourthVestEndTime;\r\n    uint256 tokensDistributed;\r\n    bool initDevBalCompleted;\r\n    bool firstVestCompleted;\r\n    bool secondVestCompleted;\r\n    bool thirdVestCompleted;\r\n    bool fourthVestCompleted;\r\n      \r\n    \r\n    function _initateDevLiquidity () private {\r\n        uint256 _teamDevLiquidityForInitiate = (teamDevLiquidity * 50) / 100;\r\n        uint256 _tokenDevSplit = _teamDevLiquidityForInitiate / _teamAddresses.length;\r\n        for (uint i; i < _teamAddresses.length; i++) {\r\n            _transfer(address(this), _teamAddresses[i], _tokenDevSplit);\r\n            teamDevLiquidity -= _tokenDevSplit;\r\n        }\r\n    }\r\n    function _initiateExchangeLiquidity () private {\r\n        _transfer(address(this), _tokenExchangeAddress, exchangeLiquidity);\r\n    }\r\n    function useMarketingFunds (address[] memory addressesReceiving, uint256[] memory amounts) public {\r\n        require (msg.sender == _tokenMarketingAddress, \"You must be the marketing Manager\");\r\n        require (addressesReceiving.length == amounts.length, \"Arrays must be equal in length\");\r\n        uint256 _totalAmount;\r\n        for (uint i; i < addressesReceiving.length; i++) {\r\n            _totalAmount += amounts[i];\r\n        } \r\n        require (_totalAmount <= marketingLiquidity, \"insufficient Balance\");\r\n        marketingLiquidity -= _totalAmount;\r\n        for (uint i; i < addressesReceiving.length; i++) {\r\n            _transfer(address(this), addressesReceiving[i], amounts[i]);\r\n        }\r\n    }\r\n    function airDropCatz (address[] memory addressesReceiving, uint256[] memory amounts) public {\r\n        require (msg.sender == _tokenMarketingAddress, \"You must be the marketing Manager\");\r\n        require (addressesReceiving.length == amounts.length, \"Arrays must be equal in length\");\r\n        uint256 _totalAmount;\r\n        for (uint i; i < addressesReceiving.length; i++) {\r\n            _totalAmount += amounts[i];\r\n        } \r\n        require (_totalAmount <= airDropLiquidity, \"insufficient Balance\");\r\n        airDropLiquidity -= _totalAmount;\r\n        for (uint i; i < addressesReceiving.length; i++) {\r\n            _transfer(address(this), addressesReceiving[i], amounts[i]);\r\n        }\r\n    }\r\n    function releaseVesting () public {\r\n        require(fourthVestCompleted != true, \"All Vesting has been distributed\");\r\n        uint256 _teamDevCheckpoint = (teamDevLiquidity * 25) / 100;\r\n        uint256 _tokenDevSplit = _teamDevCheckpoint / _teamAddresses.length;\r\n        //Vest 1\r\n        if (block.timestamp >= firstVestEndTime && firstVestCompleted != true) {\r\n            for (uint i; i < _teamAddresses.length; i++) {\r\n                _transfer(address(this), _teamAddresses[i], _tokenDevSplit);\r\n                tokensDistributed += _tokenDevSplit;\r\n            }\r\n            firstVestCompleted = true;\r\n            \r\n        //Vest 2\r\n        }else if (block.timestamp >= secondVestEndTime && secondVestCompleted != true) {\r\n            for (uint i; i < _teamAddresses.length; i++) {\r\n                _transfer(address(this), _teamAddresses[i], _tokenDevSplit);\r\n                tokensDistributed += _tokenDevSplit;\r\n            }\r\n            secondVestCompleted = true;\r\n            \r\n        //Vest 3\r\n        }else if (block.timestamp >= thirdVestEndTime && thirdVestCompleted != true) {\r\n            for (uint i; i < _teamAddresses.length; i++) {\r\n                _transfer(address(this), _teamAddresses[i], _tokenDevSplit);\r\n                tokensDistributed += _tokenDevSplit;\r\n            }\r\n            thirdVestCompleted = true;\r\n            \r\n        //Vest 4\r\n        }else if (block.timestamp >= fourthVestEndTime && fourthVestCompleted != true) {\r\n            for (uint i; i < _teamAddresses.length; i++) {\r\n                _transfer(address(this), _teamAddresses[i], _tokenDevSplit);\r\n                tokensDistributed += _tokenDevSplit;\r\n            }\r\n            fourthVestCompleted = true;\r\n        }\r\n    }\r\n    function burnCatzCoin () public {\r\n        require(fourthBurnCompleted != true, \"All allocated tokens to be burned have been burned\");\r\n        uint256 _liquidityToBurn = (burnLiquidity * 25) / 100;\r\n        //burn 1\r\n        if (block.timestamp >= firstBurnTime && firstBurnCompleted != true) {\r\n            _burn(address(this), _liquidityToBurn);\r\n            firstBurnCompleted = true;\r\n            tokensBurnt += _liquidityToBurn;\r\n            \r\n        //burn 2\r\n        }else if (block.timestamp >= secondBurnTime && secondBurnCompleted != true) {\r\n            _burn(address(this), _liquidityToBurn);\r\n            secondBurnCompleted = true;\r\n            tokensBurnt += _liquidityToBurn;\r\n            \r\n        //burn 3\r\n        }else if (block.timestamp >= thirdBurnTime && thirdBurnCompleted != true) {\r\n            _burn(address(this), _liquidityToBurn);\r\n            thirdBurnCompleted = true;\r\n            tokensBurnt += _liquidityToBurn;\r\n            \r\n        //burn 4\r\n        }else if (block.timestamp >= fourthBurnTime && fourthBurnCompleted != true) {\r\n            _burn(address(this), _liquidityToBurn);\r\n            fourthBurnCompleted = true;\r\n            tokensBurnt += _liquidityToBurn;\r\n        }\r\n    }\r\n    function getTimeBeforeNextVest () public view returns(uint256 timeBeforeVest) {\r\n        if (firstVestCompleted != true && secondVestCompleted != true && thirdVestCompleted != true && fourthVestCompleted != true) {\r\n            return firstVestEndTime - block.timestamp;\r\n            \r\n        //burn 2\r\n        }else if (firstVestCompleted == true && secondVestCompleted != true && thirdVestCompleted != true && fourthVestCompleted != true) {\r\n            return secondVestEndTime - block.timestamp;\r\n            \r\n        //burn 3\r\n        }else if ( secondVestCompleted == true && thirdVestCompleted != true && fourthVestCompleted != true) {\r\n            return thirdVestEndTime - block.timestamp;\r\n            \r\n        //burn 4\r\n        }else if ( thirdVestCompleted == true && fourthVestCompleted != true) {\r\n            return fourthVestEndTime - block.timestamp;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    function getTimeBeforeNextBurn () public view returns(uint256 timeBeforeBurn) {\r\n        if (firstBurnCompleted != true && secondBurnCompleted != true && thirdBurnCompleted != true && fourthBurnCompleted != true) {\r\n            return firstBurnTime - block.timestamp;\r\n            \r\n        //burn 2\r\n        }else if (firstBurnCompleted == true && secondBurnCompleted != true && thirdBurnCompleted != true && fourthBurnCompleted != true) {\r\n            return secondBurnTime - block.timestamp;\r\n            \r\n        //burn 3\r\n        }else if (secondBurnCompleted == true && thirdBurnCompleted != true && fourthBurnCompleted != true) {\r\n            return thirdBurnTime - block.timestamp;\r\n            \r\n        //burn 4\r\n        }else if (thirdBurnCompleted == true && fourthBurnCompleted != true) {\r\n            return fourthBurnTime - block.timestamp;\r\n        }else {\r\n            return 0;\r\n        }\r\n    }\r\n        \r\n    function getAirDropLiquidity () public view returns(uint256) {\r\n        return airDropLiquidity;\r\n    }\r\n    function getMarketingLiquidity () public view returns(uint256) {\r\n        return marketingLiquidity;\r\n    }\r\n    function getBurnLiquidity () public view returns(uint256) {\r\n        return burnLiquidity - tokensBurnt;\r\n    }\r\n    function getTeamDevLiquidity () public view returns(uint256) {\r\n        return teamDevLiquidity - tokensDistributed;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesReceiving\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airDropCatz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnCatzCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAirDropLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTeamDevLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeBeforeNextBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeBeforeBurn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeBeforeNextVest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeBeforeVest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesReceiving\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"useMarketingFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CATZCoin", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1cb8c3346e917fc9fbb3235ab01290a36826cb3fe76bebb2c36840743e57b94"}