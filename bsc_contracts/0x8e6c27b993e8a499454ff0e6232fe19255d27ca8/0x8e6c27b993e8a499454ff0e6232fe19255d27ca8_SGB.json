{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SignedMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(int256 value) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: contracts/SmartGoldBullion.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\ninterface TeamData {\r\n    function getUserReferrer(address _userAddr) external view returns (address);\r\n    function getUserRank(address _userAddr) external view returns (uint256);\r\n    function getTeamUsers(address _userAddr, uint256 _generation) external view returns (address[] memory);\r\n    function updateRank(address _userAddr, uint256 _newRank) external;\r\n}\r\n\r\ncontract SGB is Ownable {\r\n\r\n    using Strings for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 private startTime = 1697731200;\r\n    address private teamDataContract = 0x9b61c01F4d5F478c4B51DCC63a0A55761495dAff;\r\n\r\n    address private dev;\r\n    address private salesReceiver;\r\n\r\n    address private immutable usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    address private immutable sgc = 0x7E197abf80487299A1375bca225f6155890bc28A;\r\n\r\n    uint256 private immutable timeStep = 1 days;\r\n\r\n    uint256 public baseROI = 10;\r\n    uint256 public divider = 1000;\r\n    uint256 public maxEarnMultiplier = 3;\r\n    \r\n    uint256 public referDepth = 300;\r\n    uint256 public dynamicBonus = 5;\r\n    uint256 public dynamicBonus1 = 350;\r\n    uint256 public dynamicBonus2 = 300;\r\n    uint256 public vipBonus = 20;\r\n    uint256 public bonusDivider = 1000;\r\n    uint256 public exchangeSGCTxn = 1;\r\n\r\n    uint256 private sgcPrice = 1000;\r\n\r\n    uint256 public investUSDTWeight = 900;\r\n    uint256 public investCreditWeight = 100;\r\n\r\n    uint256 public reinvestCreditWeight = 500;\r\n    uint256 public reinvestSGCWeight = 500;\r\n    uint256 public reinvestMultiplier = 1500;\r\n\r\n    uint256[] public package = [150e18, 450e18, 1500e18, 4500e18];\r\n    uint256[] public salesRequired = [0, 0, 5000e18, 10000e18, 20000e18, 60000e18, 240000e18];\r\n    uint256[] public requiredVIP = [0, 0, 0, 2, 2, 3, 4];\r\n\r\n    struct TokenBalance {\r\n        uint256 usdt;\r\n        uint256 credit;\r\n        uint256 reinvest;\r\n        uint256 transfer;\r\n        uint256 convertedTSGC;\r\n        uint256 lockedSGC;\r\n    }\r\n    mapping(address=>TokenBalance) public tokenBalance;\r\n\r\n    struct InvestmentInfo {\r\n        uint256 totalInvestment;\r\n        uint256 activeInvestment;\r\n        uint256 lastClaim;\r\n        uint256 maxEarning;\r\n        uint256 withdrew;\r\n        uint256 totalSales;\r\n    }\r\n    mapping(address=>InvestmentInfo) public investmentInfo;\r\n\r\n    struct PayoutInfo {\r\n        uint256 txnID;\r\n        address receiver;\r\n        uint256 amount;\r\n        bool completed;\r\n    }\r\n    mapping(uint256=>PayoutInfo[]) private payoutInfos;\r\n\r\n    mapping(uint256=>uint256) public dayTotalInvest;\r\n    mapping(uint256=>address[]) public dayInvestors;\r\n    mapping(uint256=>uint256) public dayTotalReinvest;\r\n    mapping(uint256=>address[]) public dayReinvestors;\r\n    mapping(address=>mapping(uint256=>uint256)) private userDayEarning;\r\n    mapping(uint256=>uint256) public roiByDay;\r\n    mapping(address=>bool) private admin;\r\n\r\n    event UserWithdraw(address _userAddr, uint256 _withdrewAmount, uint256 _day, uint256 _timeStamp);\r\n\r\n    constructor (\r\n        address _dev,\r\n        address _sales\r\n    ) {\r\n        dev = _dev;\r\n        salesReceiver = _sales;\r\n    }\r\n\r\n    function invest(address _userAddr, uint256 _package, uint256 _gen, bool _toggle) external {\r\n\r\n        require(msg.sender == _userAddr || admin[msg.sender] || msg.sender == owner(), \"No permission to execute.\");\r\n        uint256 usdtNeed = package[_package]*investUSDTWeight/divider;\r\n        uint256 usdtBalance = IERC20(usdt).balanceOf(_userAddr);\r\n        require(usdtBalance >= usdtNeed, \"Insufficient USDT balance.\");\r\n\r\n        uint256 csgcNeed = (package[_package]*investCreditWeight/divider);\r\n        require(tokenBalance[_userAddr].credit >= csgcNeed, \"Insufficient credit-sgc.\");\r\n\r\n        tokenBalance[_userAddr].credit -= csgcNeed;\r\n        IERC20(usdt).safeTransferFrom(_userAddr, address(this), usdtNeed);\r\n\r\n        if (investmentInfo[_userAddr].totalInvestment == 0) {\r\n            investmentInfo[_userAddr].lastClaim = block.timestamp;\r\n        }\r\n        investmentInfo[_userAddr].totalInvestment += package[_package];\r\n        investmentInfo[_userAddr].activeInvestment += package[_package];\r\n        investmentInfo[_userAddr].maxEarning += (package[_package]*maxEarnMultiplier);\r\n\r\n        uint256 curDay = getCurDay();\r\n        dayTotalInvest[curDay] += package[_package];\r\n        dayInvestors[curDay].push(_userAddr);\r\n\r\n        if (_toggle == true) {\r\n            updateUserRanking(_userAddr, _gen);\r\n            calculateUplineBonus(_userAddr, package[_package]);\r\n        }\r\n\r\n    }\r\n\r\n    function airdrop(address _userAddr, uint256 _package, uint256 _gen, bool _toggle) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        if (investmentInfo[_userAddr].totalInvestment == 0) {\r\n            investmentInfo[_userAddr].lastClaim = block.timestamp;\r\n        }\r\n        investmentInfo[_userAddr].totalInvestment += package[_package];\r\n        investmentInfo[_userAddr].activeInvestment += package[_package];\r\n        investmentInfo[_userAddr].maxEarning += (package[_package]*maxEarnMultiplier);\r\n        uint256 curDay = getCurDay();\r\n        dayTotalInvest[curDay] += package[_package];\r\n        dayInvestors[curDay].push(_userAddr);\r\n        if (_toggle == true) {\r\n            updateUserRanking(_userAddr, _gen);\r\n            calculateUplineBonus(_userAddr, package[_package]);\r\n        }\r\n    }\r\n\r\n    function reinvest(address _userAddr, uint256 _amount, uint256 _gen, bool _toggle) public {\r\n\r\n        require(msg.sender == _userAddr || admin[msg.sender] || msg.sender == owner(), \"No permission to execute.\");\r\n        claimROI(_userAddr);\r\n\r\n        uint256 rsgcNeed = _amount*reinvestCreditWeight/divider;\r\n        require(tokenBalance[_userAddr].reinvest >= rsgcNeed, \"Insufficient reinvest-sgc.\");\r\n\r\n        uint256 sgcNeed = (_amount*reinvestSGCWeight/divider);\r\n        uint256 sgcBalance = IERC20(sgc).balanceOf(_userAddr);\r\n        require(sgcBalance >= sgcNeed, \"Insufficient SGC balance.\");\r\n\r\n        tokenBalance[_userAddr].reinvest -= rsgcNeed;\r\n        IERC20(sgc).safeTransferFrom(_userAddr, address(this), sgcNeed);\r\n\r\n        investmentInfo[_userAddr].activeInvestment += (_amount*reinvestMultiplier/divider);\r\n\r\n        if (_toggle == true) {\r\n            updateUserRanking(_userAddr, _gen);\r\n            calculateUplineBonus(_userAddr, _amount);\r\n        }\r\n\r\n        uint256 curDay = getCurDay();\r\n        dayTotalReinvest[curDay] += _amount;\r\n        dayReinvestors[curDay].push(_userAddr);\r\n\r\n    }\r\n\r\n    function updateUserRanking(address _userAddr, uint256 _gen) public {\r\n        uint256 rank = TeamData(teamDataContract).getUserRank(_userAddr);\r\n        uint256 vipMembers = checkDownlineVIP(_userAddr, _gen);\r\n        uint256 eligibleRank;\r\n        for (uint256 i = rank; i < salesRequired.length; i++) {\r\n            if (investmentInfo[_userAddr].activeInvestment > 0) {\r\n                if (investmentInfo[_userAddr].totalSales >= salesRequired[i] && vipMembers >= requiredVIP[i]) {\r\n                    eligibleRank = i;\r\n                }\r\n            }\r\n        }\r\n        if (eligibleRank > rank) {\r\n            TeamData(teamDataContract).updateRank(_userAddr, eligibleRank);\r\n        }\r\n    }\r\n\r\n    function checkDownlineVIP(address _userAddr, uint256 _generation) public view returns (uint256) {\r\n        address[] memory teamUsers = TeamData(teamDataContract).getTeamUsers(_userAddr, _generation);\r\n        uint256 userRank = TeamData(teamDataContract).getUserRank(_userAddr);\r\n        uint256 VIPcount = 0;\r\n        for (uint256 i = 0; i < teamUsers.length; i++) {\r\n            uint256 teamUserRank = TeamData(teamDataContract).getUserRank(teamUsers[i]);\r\n            if (userRank > 1) {\r\n                if (teamUserRank >= userRank-1) {\r\n                    VIPcount++;\r\n                }\r\n            }\r\n        }\r\n        return VIPcount;\r\n    }\r\n\r\n    function calculateUplineBonus(address _userAddr, uint256 _amount) private {\r\n        address upline = TeamData(teamDataContract).getUserReferrer(_userAddr);\r\n        uint256 downlineRank = TeamData(teamDataContract).getUserRank(_userAddr);\r\n\r\n        for (uint256 i = 0; i < referDepth; i++) {\r\n            if (upline != address(0)) {\r\n                uint256 uplineRank = TeamData(teamDataContract).getUserRank(upline);\r\n                if (investmentInfo[upline].activeInvestment > 0 && uplineRank > 0) {\r\n                    if (uplineRank == 1) {\r\n                        uint256 reward = _amount*dynamicBonus/bonusDivider;\r\n                        if (i < 5) {\r\n                            IERC20(sgc).safeTransfer(upline, (reward*dynamicBonus1/bonusDivider));\r\n                            tokenBalance[upline].reinvest += (reward*dynamicBonus1/bonusDivider);\r\n                            tokenBalance[upline].usdt += (reward*dynamicBonus2/bonusDivider);\r\n                        }\r\n                    } else if (uplineRank > 1 && uplineRank == downlineRank) {\r\n                        uint256 reward = _amount*dynamicBonus/bonusDivider;\r\n                        if (i < 10) {\r\n                            IERC20(sgc).safeTransfer(upline, (reward*dynamicBonus1/bonusDivider));\r\n                            tokenBalance[upline].reinvest += (reward*dynamicBonus1/bonusDivider);\r\n                            tokenBalance[upline].usdt += (reward*dynamicBonus2/bonusDivider);\r\n                        }\r\n                    } else if (uplineRank > 1) {\r\n                        uint256 reward = _amount*vipBonus/bonusDivider;\r\n                        IERC20(sgc).safeTransfer(upline, (reward*dynamicBonus1/bonusDivider));\r\n                        tokenBalance[upline].reinvest += (reward*dynamicBonus1/bonusDivider);\r\n                        tokenBalance[upline].usdt += (reward*dynamicBonus2/bonusDivider);\r\n                    }\r\n                }\r\n                investmentInfo[upline].totalSales += _amount;\r\n                if (upline == dev) break;\r\n                downlineRank = uplineRank;\r\n                upline = TeamData(teamDataContract).getUserReferrer(upline);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setReinvestCreditWeight(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        reinvestCreditWeight = _newValue;\r\n    }\r\n\r\n    function setReInvestSGCWeight(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        reinvestSGCWeight = _newValue;\r\n    }\r\n\r\n    function setReinvestMultiplier(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        reinvestMultiplier = _newValue;\r\n    }\r\n\r\n    function setSalesRequired(uint256[] memory _newValues) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        salesRequired = _newValues;\r\n    }\r\n\r\n    function setRequiredVIP(uint256[] memory _newValues) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        requiredVIP = _newValues;\r\n    }\r\n\r\n    // Token Balance\r\n    function getTokenBalanceByAddr(address _userAddr) external view returns (TokenBalance memory) {\r\n        return tokenBalance[_userAddr];\r\n    }\r\n\r\n    // USDT\r\n    function setUserUSDT(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_userAddr].usdt = _value;\r\n    }\r\n\r\n    function increaseUserUSDT(address _receiver, uint256 _increaseAmount) public {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_receiver].usdt += _increaseAmount;\r\n    }\r\n\r\n    function decreaseUserUSDT(address _spender, uint256 _decreaseAmount) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        require(tokenBalance[_spender].usdt >= _decreaseAmount, \"User insufficient credit points.\");\r\n        tokenBalance[_spender].usdt -= _decreaseAmount;\r\n    }\r\n\r\n    function getUserUSDT(address _userAddr) external view returns (uint256) {\r\n        return tokenBalance[_userAddr].usdt;\r\n    }\r\n\r\n    // SGC\r\n    function buySGC(uint256 _amount) external {\r\n        uint256 buyPrice = _amount*sgcPrice/divider;\r\n        IERC20(usdt).safeTransferFrom(msg.sender, address(this), buyPrice);\r\n        IERC20(sgc).safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    // C-SGC\r\n    function buyCredit(uint256 _amount) external {\r\n        uint256 buyPrice = _amount*sgcPrice/1000;\r\n        IERC20(usdt).safeTransferFrom(msg.sender, address(this), buyPrice);\r\n        tokenBalance[msg.sender].credit += _amount;\r\n    }\r\n\r\n    function sellCredit(uint256 _amount) external {\r\n        require(tokenBalance[msg.sender].credit >= _amount, \"Insufficient credit to sell.\");\r\n        uint256 sellPrice = _amount*sgcPrice;\r\n        tokenBalance[msg.sender].credit -= _amount;\r\n        tokenBalance[msg.sender].usdt += sellPrice;\r\n    }\r\n\r\n    function transferCredit(address _receiver, uint256 _amount) external {\r\n        require(tokenBalance[msg.sender].credit >= _amount, \"Insufficient credit for transfer.\");\r\n        tokenBalance[msg.sender].credit -= _amount;\r\n        tokenBalance[_receiver].credit += _amount;\r\n    }\r\n\r\n    function getUserCredit(address _userAddr) external view returns (uint256) {\r\n        return tokenBalance[_userAddr].credit;\r\n    }\r\n\r\n    function increaseCredit(address _receiver, uint256 _increaseAmount) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_receiver].credit += _increaseAmount;\r\n    }\r\n\r\n    function decreaseCredit(address _spender, uint256 _decreaseAmount) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        require(tokenBalance[_spender].credit >= _decreaseAmount, \"User insufficient credit points.\");\r\n        tokenBalance[_spender].credit -= _decreaseAmount;\r\n    }\r\n\r\n    function setUserCredit(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_userAddr].credit = _value;\r\n    }\r\n\r\n    // R-SGC\r\n    function getUserReinvest(address _userAddr) external view returns (uint256) {\r\n        return tokenBalance[_userAddr].reinvest;\r\n    }\r\n\r\n    function increaseReinvest(address _receiver, uint256 _increaseAmount) public {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_receiver].reinvest += _increaseAmount;\r\n    }\r\n\r\n    function decreaseReinvest(address _spender, uint256 _decreaseAmount) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        require(tokenBalance[_spender].reinvest >= _decreaseAmount, \"User insufficient reinvest points.\");\r\n        tokenBalance[_spender].reinvest -= _decreaseAmount;\r\n    }\r\n\r\n    function setUserReinvest(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_userAddr].reinvest = _value;\r\n    }\r\n\r\n    // T-SGC\r\n    function getUserTransfer(address _userAddr) external view returns(uint256) {\r\n        return tokenBalance[_userAddr].transfer;\r\n    }\r\n\r\n    function increaseTransfer(address _receiver, uint256 _increaseAmount) public {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_receiver].transfer += _increaseAmount;\r\n    }\r\n\r\n    function decreaseTransfer(address _spender, uint256 _decreaseAmount) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        require(tokenBalance[_spender].transfer >= _decreaseAmount, \"User insufficient transfer points.\");\r\n        tokenBalance[_spender].transfer -= _decreaseAmount;\r\n    }\r\n\r\n    function setUserTransfer(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_userAddr].transfer = _value;\r\n    }\r\n\r\n    function getUserLockedSGC(address _userAddr) external view returns(uint256) {\r\n        return tokenBalance[_userAddr].lockedSGC;\r\n    }\r\n\r\n    function increaseLockedSGC(address _receiver, uint256 _increaseAmount) public {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_receiver].lockedSGC += _increaseAmount;\r\n    }\r\n\r\n    function decreaseLockedSGC(address _spender, uint256 _decreaseAmount) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        require(tokenBalance[_spender].lockedSGC >= _decreaseAmount, \"User insufficient locked SGC.\");\r\n        tokenBalance[_spender].lockedSGC -= _decreaseAmount;\r\n    }\r\n\r\n    function setUserLockedSGC(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_userAddr].lockedSGC = _value;\r\n    }\r\n\r\n    function getUserConvertedTSGC(address _userAddr) external view returns(uint256) {\r\n        return tokenBalance[_userAddr].convertedTSGC;\r\n    }\r\n\r\n    function increaseConvertedTSGC(address _receiver, uint256 _increaseAmount) public {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_receiver].convertedTSGC += _increaseAmount;\r\n    }\r\n\r\n    function decreaseConvertedTSGC(address _spender, uint256 _decreaseAmount) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        require(tokenBalance[_spender].convertedTSGC >= _decreaseAmount, \"User insufficient locked SGC.\");\r\n        tokenBalance[_spender].convertedTSGC -= _decreaseAmount;\r\n    }\r\n\r\n    function setUserConvertedTSGC(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        tokenBalance[_userAddr].convertedTSGC = _value;\r\n    }\r\n\r\n    function swapToCredit(uint256 _exchangeAmount) external {\r\n        uint256 userLastClaim = getUserLastClaim(msg.sender);\r\n        if (block.timestamp >= userLastClaim + timeStep) {\r\n            claimROI(msg.sender);\r\n        }\r\n        require(tokenBalance[msg.sender].transfer >= _exchangeAmount, \"User insufficient transfer points.\");\r\n        tokenBalance[msg.sender].transfer -= _exchangeAmount;\r\n        tokenBalance[msg.sender].credit += _exchangeAmount;\r\n    }\r\n\r\n    function contractSwapToCredit(address _userAddr, uint256 _exchangeAmount) external {\r\n        require(msg.sender == _userAddr || admin[msg.sender] || msg.sender == owner(), \"No permission to execute.\");\r\n        uint256 userLastClaim = getUserLastClaim(_userAddr);\r\n        if (block.timestamp >= userLastClaim + timeStep) {\r\n            claimROI(_userAddr);\r\n        }\r\n        require(tokenBalance[_userAddr].transfer >= _exchangeAmount, \"User insufficient transfer points.\");\r\n        tokenBalance[_userAddr].transfer -= _exchangeAmount;\r\n        tokenBalance[_userAddr].credit += _exchangeAmount;\r\n    }\r\n\r\n    function swapToSGC(uint256 _exchangeAmount) external {\r\n        uint256 userLastClaim = getUserLastClaim(msg.sender);\r\n        if (block.timestamp >= userLastClaim + timeStep) {\r\n            claimROI(msg.sender);\r\n        }\r\n        require(tokenBalance[msg.sender].transfer >= _exchangeAmount, \"User insufficient transfer points.\");\r\n        tokenBalance[msg.sender].transfer -= _exchangeAmount;\r\n        tokenBalance[msg.sender].convertedTSGC += _exchangeAmount;\r\n        uint256 dailyRelease = _exchangeAmount*10/100;\r\n        uint256 today = getCurDay();\r\n        for (uint256 i = 0; i < 10; i++) {\r\n            payoutInfos[today+i].push(PayoutInfo(exchangeSGCTxn, msg.sender, dailyRelease, false));\r\n        }\r\n        exchangeSGCTxn++;\r\n    }\r\n\r\n    function contractSwapToSGC(address _userAddr, uint256 _exchangeAmount) external {\r\n        require(msg.sender == _userAddr || admin[msg.sender] || msg.sender == owner(), \"No permission to execute.\");\r\n        uint256 userLastClaim = getUserLastClaim(_userAddr);\r\n        if (block.timestamp >= userLastClaim + timeStep) {\r\n            claimROI(_userAddr);\r\n        }\r\n        require(tokenBalance[_userAddr].transfer >= _exchangeAmount, \"User insufficient transfer points.\");\r\n        tokenBalance[_userAddr].transfer -= _exchangeAmount;\r\n        tokenBalance[_userAddr].convertedTSGC += _exchangeAmount;\r\n        uint256 dailyRelease = _exchangeAmount*10/100;\r\n        uint256 today = getCurDay();\r\n        for (uint256 i = 0; i < 10; i++) {\r\n            payoutInfos[today+i].push(PayoutInfo(exchangeSGCTxn, _userAddr, dailyRelease, false));\r\n        }\r\n        exchangeSGCTxn++;\r\n    }\r\n\r\n    function distributeSGCPayout(uint256 _day) external {\r\n        require(getCurDay() >= _day, \"Invalid Day.\");\r\n        for (uint256 i = 0; i < payoutInfos[_day].length; i++) {\r\n            if (payoutInfos[_day][i].completed == false) {\r\n                address sgcReceiver = payoutInfos[_day][i].receiver;\r\n                tokenBalance[sgcReceiver].lockedSGC -= payoutInfos[_day][i].amount;\r\n                IERC20(sgc).safeTransfer(sgcReceiver, payoutInfos[_day][i].amount);\r\n                payoutInfos[_day][i].completed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPayoutDetails(uint256 _day) external view returns(PayoutInfo[] memory) {\r\n        return payoutInfos[_day];\r\n    }\r\n\r\n    // Investment Management\r\n    function setUserTotalInvestment(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        investmentInfo[_userAddr].totalInvestment = _value;\r\n    }\r\n\r\n    function getUserTotalInvestment(address _userAddr) external view returns (uint256) {\r\n        return investmentInfo[_userAddr].totalInvestment;\r\n    }\r\n\r\n    function setUserActiveInvestment(address _userAddr, uint256 _value) public {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        investmentInfo[_userAddr].activeInvestment = _value;\r\n    }\r\n\r\n    function getUserActiveInvestment(address _userAddr) public view returns (uint256) {\r\n        return investmentInfo[_userAddr].activeInvestment;\r\n    }\r\n\r\n    function setUserMaxEarning(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        investmentInfo[_userAddr].maxEarning = _value;\r\n    }\r\n\r\n    function getUserMaxEarning(address _userAddr) external view returns (uint256) {\r\n        return investmentInfo[_userAddr].maxEarning;\r\n    }\r\n\r\n    function setUserWithdrew(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        investmentInfo[_userAddr].withdrew = _value;\r\n    }\r\n\r\n    function getUserWithdrew(address _userAddr) external view returns (uint256) {\r\n        return investmentInfo[_userAddr].withdrew;\r\n    }\r\n\r\n    function setUserLastClaim(address _userAddr, uint256 _value) public {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        investmentInfo[_userAddr].lastClaim = _value;\r\n    }\r\n\r\n    function getUserLastClaim(address _userAddr) public view returns (uint256) {\r\n        return investmentInfo[_userAddr].lastClaim;\r\n    }\r\n\r\n    function setUserTotalSales(address _userAddr, uint256 _value) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        investmentInfo[_userAddr].totalSales = _value;\r\n    }\r\n\r\n    function getUserTotalSales(address _userAddr) external view returns (uint256) {\r\n        return investmentInfo[_userAddr].totalSales;\r\n    }\r\n\r\n    function setPackage(uint256[] memory _newValues) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        package = _newValues;\r\n    }\r\n\r\n    function setInvestUSDTWeight(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        investUSDTWeight = _newValue;\r\n    }\r\n    \r\n    function setInvestCreditWeight(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        investCreditWeight = _newValue;\r\n    }\r\n\r\n    function setReferDepth(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        referDepth = _newValue;\r\n    }\r\n\r\n    function setDynamicBonus(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        dynamicBonus = _newValue;\r\n    }\r\n\r\n    function setVIPBonus(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        vipBonus = _newValue;\r\n    }\r\n\r\n    function setBonusDivider(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        bonusDivider = _newValue;\r\n    }\r\n\r\n    function setDynamicBonus1(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        dynamicBonus1 = _newValue;\r\n    }\r\n\r\n    function setDynamicBonus2(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        dynamicBonus2 = _newValue;\r\n    }\r\n\r\n    function setBaseROI(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        baseROI = _newValue;\r\n    }\r\n\r\n    function setDivider(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        divider = _newValue;\r\n    }\r\n\r\n    function setMaxEarnMultiplier(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        maxEarnMultiplier = _newValue;\r\n    }\r\n\r\n    function setTeamDataContract(address _contractAddr) external onlyOwner {\r\n        teamDataContract = _contractAddr;\r\n    }\r\n\r\n    function setDev(address _Addr) external onlyOwner {\r\n        dev = _Addr;\r\n    }\r\n\r\n    function setSalesWallet(address _Addr) external onlyOwner {\r\n        salesReceiver = _Addr;\r\n    }\r\n\r\n    function manageAdmin(address _wallet, bool _state) external onlyOwner {\r\n        admin[_wallet] = _state;\r\n    }\r\n\r\n    function checkAdmin(address _wallet) external view returns (bool) {\r\n        return admin[_wallet];\r\n    }\r\n    \r\n    function setSGCPrice(uint256 _newValue) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        sgcPrice = _newValue;\r\n    }\r\n\r\n    function getUserEarningByDay(address _userAddr, uint256 _day) external view returns (uint256) {\r\n        return userDayEarning[_userAddr][_day];\r\n    }\r\n\r\n    function getSGCPrice() external view returns (uint256) {\r\n        return sgcPrice;\r\n    }\r\n\r\n    function getCurDay() public view returns(uint256) {\r\n        return (block.timestamp - startTime) / timeStep;\r\n    }\r\n\r\n    function withdrawSales() external onlyOwner {\r\n        uint256 balance = IERC20(usdt).balanceOf(address(this));\r\n        require(balance > 0, \"Contract insufficient balance.\");\r\n        IERC20(usdt).safeTransfer(salesReceiver, balance);\r\n    }\r\n\r\n    function withdrawTokenToAddress(address withdrawTokenAddr, address receiver, uint256 amount) external onlyOwner {\r\n        uint256 balance = IERC20(withdrawTokenAddr).balanceOf(address(this));\r\n        require(balance >= amount, \"Contract insufficient balance.\");\r\n        IERC20(withdrawTokenAddr).safeTransfer(receiver, amount);\r\n    }\r\n\r\n    function getROIByDay(uint256 _day) public view returns(uint256) {\r\n        return roiByDay[_day];\r\n    }\r\n\r\n    function getROI(uint256 _day) public view returns (uint256) {\r\n        uint256 roi = baseROI;\r\n        if (roiByDay[_day] > 0) {\r\n            roi = roiByDay[_day];\r\n        }\r\n        return roi;\r\n    }\r\n\r\n    function getAutoROI(address _userAddr) public view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        uint256 tsgc;\r\n        uint256 rsgc;\r\n        uint256 usd;\r\n        uint256 lastClaim = getUserLastClaim(_userAddr);\r\n        uint256 unclaimedDays;\r\n        uint256 userInvestment = getUserActiveInvestment(_userAddr);\r\n        if (lastClaim > 0) {\r\n            unclaimedDays = (block.timestamp-lastClaim)/timeStep;\r\n            for (uint256 i = 0; i < unclaimedDays; i++) {\r\n                uint256 daySinceStart = (lastClaim-startTime) / timeStep;\r\n                uint256 roiPercent = getROI(daySinceStart+i);\r\n                uint256 roi = userInvestment*roiPercent/divider;\r\n                tsgc += roi*dynamicBonus1/divider;\r\n                rsgc += roi*dynamicBonus1/divider;\r\n                usd += roi*dynamicBonus2/divider;\r\n                userInvestment -= roi;\r\n            }\r\n        }\r\n        return (userInvestment, unclaimedDays, tsgc, rsgc, usd);\r\n    }\r\n\r\n    function claimROI(address _userAddr) public {\r\n        require(msg.sender == _userAddr || admin[msg.sender] || msg.sender == owner(), \"No permission to execute.\");\r\n        uint256 userLastClaim = getUserLastClaim(_userAddr);\r\n        (uint256 activeInvestAmount, uint256 unclaimedDays, uint256 tsgc, uint256 rsgc, uint256 usd) = getAutoROI(_userAddr);\r\n        increaseTransfer(_userAddr, tsgc);\r\n        increaseReinvest(_userAddr, rsgc);\r\n        increaseUserUSDT(_userAddr, usd);\r\n        setUserActiveInvestment(_userAddr, activeInvestAmount);\r\n        setUserLastClaim(_userAddr, userLastClaim+(unclaimedDays*timeStep));\r\n    }\r\n\r\n    function withdraw(address _userAddr, uint256 _amount) public {\r\n        uint256 userLastClaim = getUserLastClaim(_userAddr);\r\n        if (block.timestamp >= userLastClaim + timeStep) {\r\n            claimROI(_userAddr);\r\n        }\r\n        uint256 balance = IERC20(usdt).balanceOf(address(this));\r\n        require(balance >= _amount, \"Contract insufficient balance.\");\r\n        require(tokenBalance[_userAddr].usdt >= _amount, \"User insufficient USDT.\");\r\n        tokenBalance[_userAddr].usdt -= _amount;\r\n        IERC20(usdt).safeTransfer(_userAddr, _amount);\r\n        investmentInfo[_userAddr].withdrew += _amount;\r\n        emit UserWithdraw(_userAddr, _amount, getCurDay(), block.timestamp);\r\n    }\r\n\r\n    function setROIByDay(uint256 _day, uint256 _roi) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        roiByDay[_day] = _roi;\r\n    }\r\n\r\n    function setROIByDayRange(uint256 _startDay, uint256 _endDay, uint256 _roi) external {\r\n        require(admin[msg.sender] || msg.sender == owner(), \"Only admin or owner can execute.\");\r\n        for (uint256 i = _startDay; i < _endDay; i++) {\r\n            roiByDay[i] = _roi;\r\n        }\r\n    }\r\n\r\n    function getTokenBalance(address wallet, address token) public view returns(uint256) {\r\n        return IERC20(token).balanceOf(wallet);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sales\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrewAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_package\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buySGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"checkAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"checkDownlineVIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"claimROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeAmount\",\"type\":\"uint256\"}],\"name\":\"contractSwapToCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeAmount\",\"type\":\"uint256\"}],\"name\":\"contractSwapToSGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayInvestors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayReinvestors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayTotalInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayTotalReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseConvertedTSGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseLockedSGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decreaseAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseUserUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"distributeSGCPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicBonus1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicBonus2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeSGCTxn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getAutoROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getPayoutDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txnID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"internalType\":\"struct SGB.PayoutInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getROIByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSGCPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getTokenBalanceByAddr\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"convertedTSGC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedSGC\",\"type\":\"uint256\"}],\"internalType\":\"struct SGB.TokenBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserActiveInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserConvertedTSGC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getUserEarningByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserLockedSGC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserMaxEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserTotalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserTotalSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUserWithdrew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseConvertedTSGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseLockedSGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseUserUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_package\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investCreditWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investUSDTWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investmentInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEarning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrew\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"manageAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEarnMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"package\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referDepth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_toggle\",\"type\":\"bool\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestCreditWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestSGCWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredVIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roiByDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"salesRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setBaseROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setBonusDivider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Addr\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setDivider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setDynamicBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setDynamicBonus1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setDynamicBonus2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setInvestCreditWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setInvestUSDTWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxEarnMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newValues\",\"type\":\"uint256[]\"}],\"name\":\"setPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roi\",\"type\":\"uint256\"}],\"name\":\"setROIByDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roi\",\"type\":\"uint256\"}],\"name\":\"setROIByDayRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setReInvestSGCWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setReferDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setReinvestCreditWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setReinvestMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newValues\",\"type\":\"uint256[]\"}],\"name\":\"setRequiredVIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setSGCPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newValues\",\"type\":\"uint256[]\"}],\"name\":\"setSalesRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Addr\",\"type\":\"address\"}],\"name\":\"setSalesWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"setTeamDataContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserActiveInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserConvertedTSGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserLastClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserLockedSGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserMaxEarning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserTotalInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserTotalSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUserWithdrew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setVIPBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeAmount\",\"type\":\"uint256\"}],\"name\":\"swapToCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeAmount\",\"type\":\"uint256\"}],\"name\":\"swapToSGC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"convertedTSGC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedSGC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gen\",\"type\":\"uint256\"}],\"name\":\"updateUserRanking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SGB", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000962c19d629ab949e8eab96c723225c330deff1b1000000000000000000000000b504075136cee19f9e8673f253e6e485711b48cc", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd44114e09e256d1f041ba39f01e866ad5e78c774f4cd1d5c890b4208ef27c1d"}