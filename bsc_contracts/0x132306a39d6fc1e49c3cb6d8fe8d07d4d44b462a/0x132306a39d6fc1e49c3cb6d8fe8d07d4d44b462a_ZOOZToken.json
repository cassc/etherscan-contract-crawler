{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\n/*\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2001   \u2588\u2588\u2001\r\n\u2001\u2001\u2001\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2588\u2001\u2001    \u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001 \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2001\r\n  \u2588\u2588\u2588\u2001\u2001 \u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001  \u2588\u2588\u2588\u2001\u2001        \u2588\u2588\u2001   \u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2001\u2001 \u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2001 \u2588\u2588\u2001\r\n \u2588\u2588\u2588\u2001\u2001  \u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001 \u2588\u2588\u2588\u2001\u2001         \u2588\u2588\u2001   \u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2588\u2588\u2001 \u2588\u2588\u2001\u2001\u2001\u2001  \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001       \u2588\u2588\u2001   \u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001 \u2001\u2588\u2588\u2588\u2588\u2001\r\n\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001 \u2001\u2001\u2001\u2001\u2001\u2001\u2001  \u2001\u2001\u2001\u2001\u2001\u2001\u2001 \u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001       \u2001\u2001\u2001    \u2001\u2001\u2001\u2001\u2001\u2001\u2001 \u2001\u2001\u2001  \u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2001  \u2001\u2001\u2001\u2001\u2001                                                                           \r\n\r\nWebSite: https://zooz.finance\r\nGitHub: https://github.com/coalichain/ZOOZToken\r\n*/\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev PinkAntiBot Interface\r\n */\r\ninterface IPinkAntiBot {\r\n  function setTokenOwner(address owner) external;\r\n\r\n  function onPreTransferCheck(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n}\r\n\r\n/**\r\n * @dev ZOOZ Token \r\n */\r\ncontract ZOOZToken is Ownable, IERC20 {\r\n\tIPinkAntiBot public pinkAntiBot;\r\n\tbool public antiBotEnabled = false;\r\n\t\t\r\n\tmapping (address => mapping (address => uint256)) private allowances;\r\n    mapping (address => Holder) internal balances;\r\n\r\n\tmapping (address => bool) internal pairs;\r\n    mapping (address => mapping (address => bool)) internal botAddresses;\r\n    mapping (address => mapping (address => bool)) internal blockedAddresses;\r\n\t\r\n\tstring public constant name = 'Coalichain Token';\r\n    string public constant symbol = 'ZOOZ';\r\n    uint8 public constant decimals = 9;\r\n\tuint256 public constant totalsupply = 770 * 10**6 * 10**9;\r\n\r\n\taddress public rewardsAddress = address(0x9b155721e11a564aC3Cf5f624147531fC6Cb44dB);\t\r\n\taddress public managerAddress = address(0xBC00823a2cE063f5CcF07Eaa207f416E022794e8);\t\r\n\t\r\n\taddress public governance1Address = address(0);\t\r\n\taddress public governance2Address = address(0);\t\r\n\taddress public governance3Address = address(0);\t\r\n\t\r\n\tevent RewardAddressChanged(\r\n        address rewardsAddress\r\n    );\t\r\n\t\r\n\tevent ManagerAddressChanged(\r\n        address managerAddress\r\n    );\r\n\t\r\n\tevent GovernanceAddressChanged(\r\n        address governance,\r\n\t\tuint number\r\n    );\r\n\t\r\n\tevent PairAddressAdded(\r\n        address pairAddress\r\n    );\r\n\t\r\n\tevent PairAddressRemoved(\r\n        address pairAddress\r\n    );\r\n\t\r\n\tevent BotAddressAdded(\r\n        address botAddress\r\n\t);\t\r\n\t\r\n\tevent BotAddressRemoved(\r\n        address botAddress\r\n    );\r\n\t\r\n\tevent AddressBlocked(\r\n        address blockedAddress\r\n    );\r\n\t\r\n\tevent AddressUnblocked(\r\n        address unblockedAddress\r\n    );\r\n\r\n\tmodifier onlyManager() {\r\n        require(managerAddress == _msgSender() || owner() == _msgSender(), \"ZOOZ: caller is not allowed\");\r\n        _;\r\n    }\r\n\t\r\n\tmodifier onlyGovernance() {\r\n        require(governance1Address == _msgSender() \r\n\t\t\t\t|| governance2Address == _msgSender() \r\n\t\t\t\t|| governance3Address == _msgSender() \r\n\t\t\t\t|| owner() == _msgSender(), \"ZOOZ: caller is not allowed\");\r\n        _;\r\n    }\r\n\t\r\n\tstruct Holder {\r\n        uint256 token;  \r\n\t\tuint timestamp;\r\n    }\r\n\t\r\n\tstruct HolderView {\r\n\t\taddress addr;\r\n        uint256 token;  \r\n\t\tuint timestamp;\r\n    }\r\n\r\n\tconstructor(bool activePinkAntiBot) {\r\n\t\tif(activePinkAntiBot) {\r\n            antiBotEnabled = true;\r\n\t\t\tpinkAntiBot = IPinkAntiBot(0x8EFDb3b642eb2a20607ffe0A56CFefF6a95Df002);\r\n\t\t\tpinkAntiBot.setTokenOwner(_msgSender());\r\n\t\t}\r\n\r\n\t\tbalances[_msgSender()].token = totalsupply;\r\n\t\tbalances[_msgSender()].timestamp = block.timestamp;\r\n\t\t\r\n\t\temit Transfer(address(0), _msgSender(), totalsupply);\r\n\t}\r\n\t\t \r\n\tfunction totalSupply() public pure override returns (uint256)  {\r\n\t\treturn totalsupply;\r\n    }\r\n\t\r\n\tfunction balanceOf(address account) public view override returns (uint256)  {\r\n\t\treturn balances[account].token;\r\n    }\r\n\t\r\n\tfunction timestampOf(address account) public view returns (uint256)  {\r\n\t\treturn balances[account].timestamp;\r\n    }\r\n\t\r\n\tfunction balancesOf(address[] memory accounts) public view returns (HolderView[] memory)  {\r\n\t\tHolderView[] memory tmp = new HolderView[](accounts.length);\r\n\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            tmp[i].token = balances[accounts[i]].token;\r\n            tmp[i].timestamp = balances[accounts[i]].timestamp;\r\n            tmp[i].addr = accounts[i];\r\n        }\r\n\r\n        return tmp;\r\n    }\r\n\t\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\t\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(!_isBlockedAddress(sender) && !_isBlockedAddress(recipient), \"This address is blocked, contact the governance team\");\r\n\t\t\r\n\t\tif (antiBotEnabled)\r\n\t\t\tpinkAntiBot.onPreTransferCheck(sender, recipient, amount);\r\n\t\t\r\n\t\tbool shouldBeExcludedFromFees = _isItBotAddress(sender) || _isItBotAddress(recipient);\r\n\t\t\r\n\t\tif(!shouldBeExcludedFromFees && pairs[recipient]) {\r\n\t\t\tuint fees = _getFees(balances[sender].timestamp);\r\n\t\t\t\r\n\t\t\tuint256 rewardAmount = amount * fees / 100;\r\n\t\t\tamount = amount - rewardAmount;\r\n\r\n\t\t\t_stdTransfer(sender, rewardsAddress, rewardAmount);\r\n\t\t}\r\n\t\t\r\n\t\t_holdDateHook(sender, recipient);\r\n\t\t_stdTransfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev determine if addr is blocked or not\r\n\t*/\r\n\tfunction _isBlockedAddress(address addr) internal view returns(bool) {\r\n\t\treturn blockedAddresses[addr][governance1Address] \r\n\t\t\t\t&& blockedAddresses[addr][governance2Address] \r\n\t\t\t\t&& blockedAddresses[addr][governance3Address];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev determine if addr is a bot or not\r\n\t*/\r\n\tfunction _isItBotAddress(address addr) internal view returns(bool) {\r\n\t\treturn botAddresses[addr][governance1Address] \r\n\t\t\t\t&& botAddresses[addr][governance2Address] \r\n\t\t\t\t&& botAddresses[addr][governance3Address];\r\n\t}\r\n\t \r\n\t/**\r\n     * @dev get fees depending on the hold time\r\n     */\r\n\tfunction _getFees(uint timestamp) internal view returns(uint256) {\r\n\t\tif(timestamp == 0 || timestamp >= block.timestamp) \r\n\t\t\treturn 14;\r\n\r\n\t\tuint diff = block.timestamp - timestamp;\r\n\r\n\t\t// 1 Week\r\n\t\tif(diff <= 1 weeks) \r\n\t\t\treturn 14;\r\n\r\n\t\t// 1 Month\r\n\t\tif(diff <= 30 days) \r\n\t\t\treturn 10;\t\t\r\n\r\n\t\t// 3 Months\r\n\t\tif(diff <= 90 days) \r\n\t\t\treturn 5;\r\n\r\n\t\t// 6 Months\r\n\t\tif(diff <= 180 days) \r\n\t\t\treturn 2;\r\n\r\n\t\t// > 6 Months\r\n\t\treturn 0; \r\n\t}\t\r\n\r\n\t/**\r\n     * @dev change sender and recipiend timestamp wallet date \r\n     */\r\n\tfunction _holdDateHook(address sender, address recipient) internal {\r\n\t\tif(balances[recipient].timestamp == 0)\r\n\t\t\tbalances[recipient].timestamp = block.timestamp;\r\n\t\t\t\r\n\t\tbalances[sender].timestamp = block.timestamp;\r\n    }\r\n\t\r\n\t/**\r\n     * @dev standard erc20 transfer \r\n     */\r\n\tfunction _stdTransfer(address sender, address recipient, uint256 amount) private {\r\n\t\tif(amount == 0)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tbalances[sender].token = balances[sender].token - amount;\r\n\t\tbalances[recipient].token = balances[recipient].token + amount;\r\n\t\t\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev change manager address\r\n     */\r\n\tfunction setManagerAddress(address newAddress) public onlyManager()  {\r\n\t\trequire(newAddress != address(0), \"Manager Address can't be the zero address\");\r\n\r\n\t\tmanagerAddress = newAddress;\r\n\t\t\r\n\t\temit ManagerAddressChanged(managerAddress);\r\n    }\t\r\n\t\r\n\t/**\r\n     * @dev change rewards address\r\n     */\r\n\tfunction setRewardsTeamAddress(address newAddress) public onlyManager()  {\r\n\t\trequire(newAddress != address(0), \"Rewards Address can't be the zero address\");\r\n\r\n\t\trewardsAddress = newAddress;\r\n\t\t\r\n\t\temit RewardAddressChanged(rewardsAddress);\r\n    }\r\n\t\r\n\t/**\r\n     * @dev block or unblock an holder\r\n     */\r\n\tfunction setBlockedAddress(address holderAddress, bool blocked) public onlyGovernance()  {\r\n\t\trequire(holderAddress != address(0), \"HolderAddress can't be the zero address\");\r\n\t\t\t\r\n        blockedAddresses[holderAddress][_msgSender()] = blocked;\r\n\t\t \t\t\r\n\t\tif(blocked) {\r\n\t\t\temit AddressBlocked(holderAddress);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\temit AddressUnblocked(holderAddress);\r\n    }\t\r\n\t\r\n\t/**\r\n     * @dev add or remove bot \r\n     */\r\n\tfunction setBotAddress(address botAddress, bool isbot) public onlyGovernance()  {\r\n\t\trequire(botAddress != address(0), \"BotAddress can't be the zero address\");\r\n\t\t\r\n\t\tbotAddresses[botAddress][_msgSender()] = isbot;\r\n\r\n\t\tif(isbot) {\r\n\t\t\temit BotAddressAdded(botAddress);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\temit BotAddressRemoved(botAddress);\r\n    }\t\r\n\t\r\n\t/**\r\n     * @dev add or remove pair address \r\n     */\r\n\tfunction setPair(address pairAddress, bool isPair) public onlyManager()  {\r\n        require(pairAddress != address(0), \"PairAddress can't be the zero address\");\r\n\r\n        pairs[pairAddress] = isPair;\r\n\t\t\r\n\t\tif(isPair) {\r\n\t\t\temit PairAddressAdded(pairAddress);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\temit PairAddressRemoved(pairAddress);\r\n    }\t\r\n\t\r\n\t/**\r\n     * @dev enabled or disabled pinksale antibot system\r\n     */\r\n\tfunction setEnableAntiBot(bool enable) external onlyManager() {\r\n\t\tantiBotEnabled = enable;\r\n\t}\r\n\t\r\n\t/**\r\n     * @dev add or remove gouvernance\r\n     */\r\n\tfunction setGovernance(address governanceAddress, uint number) public onlyOwner()  {\r\n\t\trequire(governanceAddress != address(0), \"GovernanceAddress can't be the zero address\");\r\n\t\trequire(number >= 1 && number <= 3, \"Number must be 1, 2 or 3\");\r\n\t\t\r\n\t\tif(number == 1) \r\n\t\t\tgovernance1Address = governanceAddress;\r\n\t\tif(number == 2) \r\n\t\t\tgovernance2Address = governanceAddress;\r\n\t\tif(number == 3) \r\n\t\t\tgovernance3Address = governanceAddress;\r\n\t\t\r\n\t\temit GovernanceAddressChanged(governanceAddress, number);\r\n    }\t\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"activePinkAntiBot\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blockedAddress\",\"type\":\"address\"}],\"name\":\"AddressBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unblockedAddress\",\"type\":\"address\"}],\"name\":\"AddressUnblocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"BotAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"BotAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"GovernanceAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"ManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"PairAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"PairAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardsAddress\",\"type\":\"address\"}],\"name\":\"RewardAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"balancesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct ZOOZToken.HolderView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance3Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkAntiBot\",\"outputs\":[{\"internalType\":\"contract IPinkAntiBot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"setBlockedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isbot\",\"type\":\"bool\"}],\"name\":\"setBotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setEnableAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPair\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setRewardsTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"timestampOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalsupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZOOZToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c194e331892eec97fe60c2610a80323c912877696daec5baf35fafdd1cc7621a"}