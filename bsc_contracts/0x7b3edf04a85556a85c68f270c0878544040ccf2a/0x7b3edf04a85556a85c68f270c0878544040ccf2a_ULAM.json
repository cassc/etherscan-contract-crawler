{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface Token {\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ULAM is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) public _addrMiningAmount;\r\n    mapping (address => uint256) public _addrMiningDispersedAmount;\r\n    \r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 1414213562 * 10**_decimals;\r\n    uint256 private _tFeeTotal;\r\n    \r\n    \r\n    uint256 private _taxFeeOnBuy = 0;  \r\n    uint256 private _taxFeeOnSell = 0; \r\n    uint256 private _taxFee;\r\n    uint256 public _getRewardFee;\r\n    uint256 public _addLiquidityBuyRate;\r\n    uint256 public _addLiquiditySellRate;\r\n\r\n    \r\n    string private constant _name = \"ULAM\";\r\n    string private constant _symbol = \"ULAM\";\r\n    \r\n    \r\n\r\n    address payable private _reserverAddressBuy;\r\n    address payable private _reserverAddressSell;\r\n    address payable private _expandFeeAddress;\r\n    address payable public _addLiquidityAddr;\r\n    address public _rewardFeeAddress;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    mapping (address => bool) private uniswapV2Pair;\r\n    \r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n\r\n    uint private _swapBuySell;\r\n    \r\n    \r\n    \r\n    constructor (address routerAddress) {\r\n        _rOwned[_msgSender()] = _tTotal;\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        //uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\r\n        emit Transfer(address(0x0000000000000000000000000000000000000000), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        //require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        _taxFee = 0; \r\n        if (from != owner() && to != owner()) {\r\n            if (from != _addLiquidityAddr && to != _addLiquidityAddr) {\r\n         \r\n                _swapBuySell = 2;\r\n\r\n                if(uniswapV2Pair[from]==true && to != address(uniswapV2Router)) {\r\n                    _taxFee = _taxFeeOnBuy; \r\n                    _swapBuySell = 1;\r\n                }\r\n        \r\n                if (uniswapV2Pair[to]==true && from != address(uniswapV2Router)) {\r\n                    _taxFee = _taxFeeOnSell; \r\n                    _swapBuySell = 0;\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        _tokenTransfer(from,to,amount);\r\n    }\r\n\r\n\r\n    \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\r\n        _transferStandard(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function setNewReserverAddressBuy(address payable addr) public onlyOwner() {\t\r\n        _reserverAddressBuy = addr;\r\n    }\r\n\r\n    \r\n\r\n    function getReserverAddressBuy() public view returns (address) {\t\r\n        return _reserverAddressBuy;\r\n    }\r\n\r\n    function setNewReserverAddressSell(address payable addr) public onlyOwner() {\t\r\n        _reserverAddressSell = addr;\r\n    }\r\n\r\n    function getReserverAddressSell() public view returns (address) {\t\r\n        return _reserverAddressSell;\r\n    }\r\n\r\n    function setNewExpandFeeAddress(address payable addr) public onlyOwner() {\t\r\n        _expandFeeAddress = addr;\r\n    }\r\n\r\n    function getExpandFeeAddress() public view returns (address) {\t\r\n        return _expandFeeAddress;\r\n    }\r\n\r\n    function setNewRouterAddress(address payable router) public onlyOwner() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n\r\n    function setAddLiquidityAddr(address payable addr) public onlyOwner() {\r\n        _addLiquidityAddr = addr;\r\n    }\r\n    \r\n    function setAddLiquidityBuyRate(uint256 amount) public onlyOwner() {\r\n        require(amount<=_taxFeeOnBuy);\r\n        _addLiquidityBuyRate = amount;\r\n    }\r\n\r\n    function setAddLiquiditySellRate(uint256 amount) public onlyOwner() {\r\n        require(amount<=_taxFeeOnSell);\r\n        _addLiquiditySellRate = amount;\r\n    }\r\n\r\n    function setAddLiquidityRateAndFee(uint256 amountAddLiquidityBuyRate,uint256 amountAddLiquiditySellRate,uint256 amountTaxFeeOnBuy,uint256 amountTaxFeeOnSell) public onlyOwner() {\r\n        require(amountAddLiquidityBuyRate<=amountTaxFeeOnBuy);\r\n        require(amountAddLiquiditySellRate<=amountTaxFeeOnSell);\r\n        _addLiquidityBuyRate = amountAddLiquidityBuyRate;\r\n        _addLiquiditySellRate = amountAddLiquiditySellRate;\r\n        _taxFeeOnBuy = amountTaxFeeOnBuy;\r\n        _taxFeeOnSell = amountTaxFeeOnSell;\r\n    }\r\n\r\n    function setUniswapV2Pair(address payable addr) public onlyOwner() {\r\n        uniswapV2Pair[addr] = true;\r\n    }\r\n\r\n    function deleteUniswapV2Pair(address payable addr) public onlyOwner() {\r\n        uniswapV2Pair[addr]=false;\r\n    }\r\n    \r\n    function getUniswapV2Pair(address addr) public view returns (bool) {\t\r\n        return uniswapV2Pair[addr];\r\n    }\r\n\r\n    \r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        ( uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount); \r\n        \r\n        if (tFee>0 && _swapBuySell==0){\r\n            require(tAmount<balanceOf(sender)*9/10);    \r\n        }\r\n        _rOwned[sender] = _rOwned[sender].sub(tAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(tTransferAmount);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if (tFee>0){\r\n            if (_swapBuySell==1){\r\n                if (_addLiquidityBuyRate>0){\r\n                    _rOwned[_reserverAddressBuy] = _rOwned[_reserverAddressBuy].add(tFee.div(_taxFee).mul(_taxFee-_addLiquidityBuyRate));\r\n                    emit Transfer(sender, _reserverAddressBuy, tFee.div(_taxFee).mul(_taxFee-_addLiquidityBuyRate));\r\n                    _rOwned[_addLiquidityAddr] = _rOwned[_addLiquidityAddr].add(tFee.div(_taxFee).mul(_addLiquidityBuyRate));\r\n                    emit Transfer(sender, _addLiquidityAddr, tFee.div(_taxFee).mul(_addLiquidityBuyRate));\r\n                }else{\r\n                    _rOwned[_reserverAddressBuy] = _rOwned[_reserverAddressBuy].add(tFee);\r\n                    emit Transfer(sender, _reserverAddressBuy, tFee);\r\n                }\r\n                \r\n            }\r\n            if (_swapBuySell==0){\r\n                if (_addLiquiditySellRate>0){\r\n                    _rOwned[_reserverAddressSell] = _rOwned[_reserverAddressSell].add(tFee.div(_taxFee).mul(_taxFee-_addLiquiditySellRate));\r\n                    emit Transfer(sender, _reserverAddressSell, tFee.div(_taxFee).mul(_taxFee-_addLiquiditySellRate));\r\n                    _rOwned[_addLiquidityAddr] = _rOwned[_addLiquidityAddr].add(tFee.div(_taxFee).mul(_addLiquiditySellRate));\r\n                    emit Transfer(sender, _addLiquidityAddr, tFee.div(_taxFee).mul(_addLiquiditySellRate));\r\n                }else{\r\n                    _rOwned[_reserverAddressSell] = _rOwned[_reserverAddressSell].add(tFee);\r\n                    emit Transfer(sender, _reserverAddressSell, tFee);\r\n                }\r\n            }            \r\n        } \r\n        \r\n    }\r\n\r\n\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount, _taxFee);\r\n        return (tTransferAmount, tFee);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 taxFee) private pure returns (uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        return (tTransferAmount, tFee);\r\n    }\r\n\r\n    \r\n    function setFeeBuy(uint256 taxFeeOnBuy) public onlyOwner {\r\n        require(taxFeeOnBuy>=_addLiquidityBuyRate);\r\n        _taxFeeOnBuy = taxFeeOnBuy;\r\n    }\r\n\r\n    function getFeeBuy() public view returns(uint256) {\r\n        return _taxFeeOnBuy;\r\n    }\r\n\r\n    function setFeeSell(uint256 taxFeeOnSell) public onlyOwner {\r\n        require(taxFeeOnSell>=_addLiquiditySellRate);\r\n        _taxFeeOnSell = taxFeeOnSell;\r\n    }\r\n\r\n    function getFeeSell() public view returns(uint256) {\r\n        return _taxFeeOnSell;\r\n    }\r\n\r\n\r\n\r\n    mapping (address => address) private _expand;\r\n    uint256 private _expandFee = 20 * 10**_decimals;\r\n    \r\n    function getExpandFee() public view returns (uint256) {\r\n        return  _expandFee;\r\n    }\r\n\r\n    function setExpandFee(uint256 fee) public onlyOwner{\r\n        require(_msgSender() == owner());\r\n        _expandFee = fee;\r\n    }\r\n\r\n    function setExpandAddress(address addr) public {\r\n        require(_expand[addr] == 0x0000000000000000000000000000000000000000,\"The invitee already has a superior!\");\r\n        if (_msgSender() != owner()){\r\n            require(_expand[_msgSender()] != 0x0000000000000000000000000000000000000000,\"Superior error!\");\r\n        }\r\n        require(balanceOf(_msgSender())>=_expandFee,\"Insufficient balance\");\r\n        _transfer(_msgSender(), _expandFeeAddress, _expandFee);\r\n        _expand[addr] = _msgSender();  \r\n\r\n    }\r\n\r\n    function setExpandAddressNull(address addr) public onlyOwner{\r\n        require(_msgSender() == owner());\r\n        _expand[addr] = 0x0000000000000000000000000000000000000000;  \r\n    }\r\n\r\n    function expand(address addr) public view returns (address) {\r\n        return _expand[addr];\r\n    }\r\n    function getSwapReward() public {\r\n        _transfer(_msgSender(), _rewardFeeAddress, _getRewardFee);\r\n    }\r\n\r\n    function setRewardFeeAddress(address addr) public onlyOwner{\r\n        _rewardFeeAddress = addr;\r\n    }\r\n    function setGetRewardFee(uint256 amount) public onlyOwner{\r\n        _getRewardFee = amount; \r\n    }\r\n\r\n    function mining(uint256 amount) public {\r\n        require(amount>0);\r\n        require(balanceOf(_msgSender())>=amount,\"Insufficient balance\");\r\n        _transfer(_msgSender(), address(this), amount);\r\n        _addrMiningAmount[_msgSender()] = _addrMiningAmount[_msgSender()].add(amount);\r\n    }\r\n\r\n    function drawMining(uint256 amount) public {\r\n        require(amount>0);\r\n        require(_addrMiningAmount[_msgSender()]-amount>=0);\r\n\r\n        _addrMiningAmount[_msgSender()] = _addrMiningAmount[_msgSender()].sub(amount);\r\n        _transfer(address(this),_msgSender(), amount);\r\n    }\r\n\r\n    function getMiningReward() public {\r\n        _transfer(_msgSender(), _rewardFeeAddress, _getRewardFee);\r\n    }\r\n    function getMining() public {\r\n        _transfer(_msgSender(), _rewardFeeAddress, _getRewardFee);\r\n    }\r\n\r\n\r\n    function miningDispersed(uint256 amount) public {\r\n        require(amount>0);\r\n        require(balanceOf(_msgSender())>=amount,\"Insufficient balance\");\r\n        _transfer(_msgSender(), address(this), amount);\r\n        _addrMiningDispersedAmount[_msgSender()] = _addrMiningDispersedAmount[_msgSender()].add(amount);\r\n    }\r\n\r\n    function drawMiningDispersed(uint256 amount) public {\r\n        require(amount>0);\r\n        require(_addrMiningDispersedAmount[_msgSender()]-amount>=0);\r\n\r\n        _addrMiningDispersedAmount[_msgSender()] = _addrMiningDispersedAmount[_msgSender()].sub(amount);\r\n        _transfer(address(this),_msgSender(), amount);\r\n        \r\n    }\r\n\r\n    function getMiningDispersed() public {\r\n        _transfer(_msgSender(), _rewardFeeAddress, _getRewardFee);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addLiquidityAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addLiquidityBuyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addLiquiditySellRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addrMiningAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addrMiningDispersedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deleteUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawMiningDispersed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"expand\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpandFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpandFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningDispersed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserverAddressBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserverAddressSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUniswapV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"miningDispersed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddLiquidityAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityBuyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAddLiquidityBuyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAddLiquiditySellRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTaxFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTaxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityRateAndFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAddLiquiditySellRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setExpandAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setExpandAddressNull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setExpandFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setFeeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFeeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setGetRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNewExpandFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNewReserverAddressBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNewReserverAddressSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setNewRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setRewardFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ULAM", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d0902963d82628d37c0b55ff8fb0425f88615146e116f17993d2943c113041ab"}