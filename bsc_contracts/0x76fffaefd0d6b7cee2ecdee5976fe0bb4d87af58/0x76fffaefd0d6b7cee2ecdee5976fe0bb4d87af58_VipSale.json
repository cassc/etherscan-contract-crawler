{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract AbsSale is Ownable {\r\n    struct SaleInfo {\r\n        uint256 price;\r\n        uint256 duration;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 endTime;\r\n        bool superVip;\r\n    }\r\n\r\n    address public _cashAddress;\r\n\r\n    SaleInfo[] private _saleInfo;\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    uint256 private _totalAmount;\r\n    uint256 public constant MAX = ~uint256(0);\r\n\r\n    mapping(address => address) public _invitor;\r\n    mapping(uint256 => uint256) public _inviteFee;\r\n    mapping(uint256 => uint256) public _superVipInviteFee;\r\n    uint256 public _superVipInviteLength = 3;\r\n\r\n    uint256 private _totalInviteAmount;\r\n    string private _priceSymbol;\r\n\r\n    uint256 private _maxVipNum;\r\n\r\n    constructor(string memory Symbol, address CashAddress){\r\n        _priceSymbol = Symbol;\r\n        _cashAddress = CashAddress;\r\n\r\n        _saleInfo.push(SaleInfo(3 ether / 100, 1 days));\r\n        _saleInfo.push(SaleInfo(15 ether / 100, 7 days));\r\n        _saleInfo.push(SaleInfo(3 ether, MAX));\r\n\r\n        _superVipInviteFee[0] = 3000;\r\n        _superVipInviteFee[1] = 2000;\r\n        _superVipInviteFee[2] = 1000;\r\n\r\n        _inviteFee[0] = 1000;\r\n    }\r\n\r\n    function buy(uint256 saleId, address invitor) external payable {\r\n        address account = msg.sender;\r\n        SaleInfo storage sale = _saleInfo[saleId];\r\n        UserInfo storage userInfo = _userInfo[account];\r\n\r\n        if (userInfo.endTime == 0) {\r\n            UserInfo storage invitorInfo = _userInfo[invitor];\r\n            if (invitorInfo.endTime > 0) {\r\n                _invitor[account] = invitor;\r\n            }\r\n        }\r\n\r\n        uint256 endTime = userInfo.endTime;\r\n        require(endTime != MAX, \"Max\");\r\n        if (sale.duration == MAX) {\r\n            userInfo.endTime = MAX;\r\n            _maxVipNum++;\r\n        } else {\r\n            if (endTime < block.timestamp) {\r\n                userInfo.endTime = block.timestamp + sale.duration;\r\n            } else {\r\n                userInfo.endTime = endTime + sale.duration;\r\n            }\r\n        }\r\n\r\n        uint256 price = sale.price;\r\n        require(msg.value >= price, \"price\");\r\n\r\n        userInfo.amount += price;\r\n        _totalAmount += price;\r\n\r\n        uint256 cashAmount = price;\r\n        uint256 len = _superVipInviteLength;\r\n        address current = account;\r\n        uint256 invitorAmount;\r\n        for (uint256 i; i < len; ++i) {\r\n            invitor = _invitor[current];\r\n            if (address(0) == invitor) {\r\n                break;\r\n            }\r\n            if (_userInfo[invitor].superVip) {\r\n                invitorAmount = price * _superVipInviteFee[i] / 10000;\r\n            } else {\r\n                invitorAmount = price * _inviteFee[i] / 10000;\r\n            }\r\n\r\n            if (invitorAmount > 0) {\r\n                invitor.call{value : invitorAmount}(\"\");\r\n                _totalInviteAmount += invitorAmount;\r\n                cashAmount -= invitorAmount;\r\n            }\r\n            current = invitor;\r\n        }\r\n\r\n        _cashAddress.call{value : cashAmount}(\"\");\r\n    }\r\n\r\n    function addUserVipTime(address account, uint256 time) external onlyOwner {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 endTime = userInfo.endTime;\r\n        require(endTime != MAX, \"Max\");\r\n        if (time == MAX) {\r\n            userInfo.endTime = MAX;\r\n        } else {\r\n            if (endTime < block.timestamp) {\r\n                userInfo.endTime = block.timestamp + time;\r\n            } else {\r\n                userInfo.endTime = endTime + time;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setUserVipTime(address account, uint256 time) external onlyOwner {\r\n        require(time > 0, \"t0\");\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        userInfo.endTime = time;\r\n    }\r\n\r\n    function setUserVipTimes(address[] memory accounts, uint256[] memory times) external onlyOwner {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len;) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            require(times[i] > 0, \"t0\");\r\n            userInfo.endTime = times[i];\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function allSales() external view returns (\r\n        uint256[] memory price, uint256[] memory duration\r\n    ){\r\n        uint256 len = getSaleLength();\r\n        price = new uint256[](len);\r\n        duration = new uint256[](len);\r\n        for (uint256 i; i < len;) {\r\n            (price[i], duration[i]) = getSaleInfo(i);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function getSaleLength() public view returns (uint256){\r\n        return _saleInfo.length;\r\n    }\r\n\r\n    function getSaleInfo(uint256 sid) public view returns (\r\n        uint256 price, uint256 duration\r\n    ) {\r\n        SaleInfo storage sale = _saleInfo[sid];\r\n        price = sale.price;\r\n        duration = sale.duration;\r\n    }\r\n\r\n    function shopInfo() external view returns (\r\n        uint256 priceDecimals, string memory priceSymbol, uint256 timestamp,\r\n        uint256 totalAmount, uint256 totalInviteAmount, uint256 maxVipNum\r\n    ){\r\n        priceDecimals = 18;\r\n        priceSymbol = _priceSymbol;\r\n        timestamp = block.timestamp;\r\n        totalAmount = _totalAmount;\r\n        totalInviteAmount = _totalInviteAmount;\r\n        maxVipNum = _maxVipNum;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setCashAddress(address adr) external onlyOwner {\r\n        _cashAddress = adr;\r\n    }\r\n\r\n    function setPriceSymbol(string memory Symbol) external onlyOwner {\r\n        _priceSymbol = Symbol;\r\n    }\r\n\r\n    function setPrice(uint256 saleId, uint256 price) external onlyOwner {\r\n        _saleInfo[saleId].price = price;\r\n    }\r\n\r\n    function setDuration(uint256 saleId, uint256 duration) external onlyOwner {\r\n        _saleInfo[saleId].duration = duration;\r\n    }\r\n\r\n    function addSale(uint256 price, uint256 duration) external onlyOwner {\r\n        _saleInfo.push(SaleInfo(price, duration));\r\n    }\r\n\r\n    function setInviteLength(uint256 len) external onlyOwner {\r\n        _superVipInviteLength = len;\r\n    }\r\n\r\n    function setInviteFee(uint256 i, uint256 fee) external onlyOwner {\r\n        _inviteFee[i] = fee;\r\n    }\r\n\r\n    function setSuperVipInviteFee(uint256 i, uint256 fee) external onlyOwner {\r\n        _superVipInviteFee[i] = fee;\r\n    }\r\n\r\n    function setSuperVip(address account, bool enable) external onlyOwner {\r\n        _userInfo[account].superVip = enable;\r\n    }\r\n\r\n    function claimBalance(address to) external onlyOwner {\r\n        address payable addr = payable(to);\r\n        addr.transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address erc20Address, address to, uint256 amount) external onlyOwner {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        erc20.transfer(to, amount);\r\n    }\r\n\r\n    function getUserInfo(address account) external view returns (\r\n        uint256 amount,\r\n        uint256 endTime,\r\n        uint256 balance,\r\n        uint256 blockTime,\r\n        bool isSuperVip\r\n    ){\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        amount = userInfo.amount;\r\n        endTime = userInfo.endTime;\r\n        balance = account.balance;\r\n        blockTime = block.timestamp;\r\n        isSuperVip = userInfo.superVip;\r\n    }\r\n}\r\n\r\ncontract VipSale is AbsSale {\r\n    constructor() AbsSale(\r\n    //Symbol\r\n        \"BNB\",\r\n    //Cash\r\n        address(0x93712cBBcCEce8c587e762F56292A5397C75AFaA)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cashAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_superVipInviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_superVipInviteLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"addUserVipTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allSales\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"price\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"duration\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sid\",\"type\":\"uint256\"}],\"name\":\"getSaleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSuperVip\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCashAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"setInviteLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Symbol\",\"type\":\"string\"}],\"name\":\"setPriceSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSuperVip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setSuperVipInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setUserVipTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"times\",\"type\":\"uint256[]\"}],\"name\":\"setUserVipTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shopInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"priceSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInviteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVipNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VipSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc89055603f2627b0cf66a514bba25d059ad3958675323bdabf689b458a718e1"}