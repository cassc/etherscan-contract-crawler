{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Governable is Initializable {\r\n    address public governor;\r\n\r\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\r\n\r\n    /**\r\n     * @dev Contract initializer.\r\n     * called once by the factory at time of deployment\r\n     */\r\n    function initialize(address governor_) virtual public initializer {\r\n        governor = governor_;\r\n        emit GovernorshipTransferred(address(0), governor);\r\n    }\r\n\r\n    modifier governance() {\r\n        require(msg.sender == governor);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to relinquish control of the contract.\r\n     * @notice Renouncing to governorship will leave the contract without an governor.\r\n     * It will not be possible to call the functions with the `governance`\r\n     * modifier anymore.\r\n     */\r\n    function renounceGovernorship() public governance {\r\n        emit GovernorshipTransferred(governor, address(0));\r\n        governor = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function transferGovernorship(address newGovernor) public governance {\r\n        _transferGovernorship(newGovernor);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newGovernor.\r\n     * @param newGovernor The address to transfer governorship to.\r\n     */\r\n    function _transferGovernorship(address newGovernor) internal {\r\n        require(newGovernor != address(0));\r\n        emit GovernorshipTransferred(governor, newGovernor);\r\n        governor = newGovernor;\r\n    }\r\n}\r\n\r\n\r\ncontract Configurable is Governable {\r\n\r\n    mapping (bytes32 => uint) internal config;\r\n    \r\n    function getConfig(bytes32 key) public view returns (uint) {\r\n        return config[key];\r\n    }\r\n    function getConfig(bytes32 key, uint index) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ index)];\r\n    }\r\n    function getConfig(bytes32 key, address addr) public view returns (uint) {\r\n        return config[bytes32(uint(key) ^ uint(addr))];\r\n    }\r\n\r\n    function _setConfig(bytes32 key, uint value) internal {\r\n        if(config[key] != value)\r\n            config[key] = value;\r\n    }\r\n    function _setConfig(bytes32 key, uint index, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function _setConfig(bytes32 key, address addr, uint value) internal {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n    \r\n    function setConfig(bytes32 key, uint value) external governance {\r\n        _setConfig(key, value);\r\n    }\r\n    function setConfig(bytes32 key, uint index, uint value) external governance {\r\n        _setConfig(bytes32(uint(key) ^ index), value);\r\n    }\r\n    function setConfig(bytes32 key, address addr, uint value) public governance {\r\n        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n  /**\r\n   * @dev Fallback function.\r\n   * Implemented entirely in `_fallback`.\r\n   */\r\n  fallback () payable external {\r\n    _fallback();\r\n  }\r\n  \r\n  receive () payable external {\r\n    _fallback();\r\n  }\r\n\r\n  /**\r\n   * @return The Address of the implementation.\r\n   */\r\n  function _implementation() virtual internal view returns (address);\r\n\r\n  /**\r\n   * @dev Delegates execution to an implementation contract.\r\n   * This is a low level function that doesn't return to its internal call site.\r\n   * It will return to the external caller whatever the implementation returns.\r\n   * @param implementation Address to delegate.\r\n   */\r\n  function _delegate(address implementation) internal {\r\n    assembly {\r\n      // Copy msg.data. We take full control of memory in this inline assembly\r\n      // block because it will not return to Solidity code. We overwrite the\r\n      // Solidity scratch pad at memory position 0.\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      // Call the implementation.\r\n      // out and outsize are 0 because we don't know the size yet.\r\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n      // Copy the returned data.\r\n      returndatacopy(0, 0, returndatasize())\r\n\r\n      switch result\r\n      // delegatecall returns 0 on error.\r\n      case 0 { revert(0, returndatasize()) }\r\n      default { return(0, returndatasize()) }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function that is run as the first thing in the fallback function.\r\n   * Can be redefined in derived contracts to add functionality.\r\n   * Redefinitions must call super._willFallback().\r\n   */\r\n  function _willFallback() virtual internal {\r\n      \r\n  }\r\n\r\n  /**\r\n   * @dev fallback implementation.\r\n   * Extracted to enable manual triggering.\r\n   */\r\n  function _fallback() internal {\r\n    if(OpenZeppelinUpgradesAddress.isContract(msg.sender) && msg.data.length == 0 && gasleft() <= 2300)         // for receive ETH only from other contract\r\n        return;\r\n    _willFallback();\r\n    _delegate(_implementation());\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\nabstract contract BaseUpgradeabilityProxy is Proxy {\r\n  /**\r\n   * @dev Emitted when the implementation is upgraded.\r\n   * @param implementation Address of the new implementation.\r\n   */\r\n  event Upgraded(address indexed implementation);\r\n\r\n  /**\r\n   * @dev Storage slot with the address of the current implementation.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return impl Address of the current implementation\r\n   */\r\n  function _implementation() override internal view returns (address impl) {\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrades the proxy to a new implementation.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _upgradeTo(address newImplementation) internal {\r\n    _setImplementation(newImplementation);\r\n    emit Upgraded(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the implementation address of the proxy.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function _setImplementation(address newImplementation) internal {\r\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n\r\n    bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title BaseAdminUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * All external functions in this contract must be guarded by the\r\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\r\n * feature proposal that would enable this to be done automatically.\r\n */\r\ncontract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Emitted when the administration has been transferred.\r\n   * @param previousAdmin Address of the previous admin.\r\n   * @param newAdmin Address of the new admin.\r\n   */\r\n  event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n\r\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the `msg.sender` is the admin.\r\n   * If it is, it will run the function. Otherwise, it will delegate the call\r\n   * to the implementation.\r\n   */\r\n  modifier ifAdmin() {\r\n    if (msg.sender == _admin()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The address of the proxy admin.\r\n   */\r\n  function admin() external ifAdmin returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  /**\r\n   * @return The address of the implementation.\r\n   */\r\n  function implementation() external ifAdmin returns (address) {\r\n    return _implementation();\r\n  }\r\n\r\n  /**\r\n   * @dev Changes the admin of the proxy.\r\n   * Only the current admin can call this function.\r\n   * @param newAdmin Address to transfer proxy administration to.\r\n   */\r\n  function changeAdmin(address newAdmin) external ifAdmin {\r\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\r\n    emit AdminChanged(_admin(), newAdmin);\r\n    _setAdmin(newAdmin);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy.\r\n   * Only the admin can call this function.\r\n   * @param newImplementation Address of the new implementation.\r\n   */\r\n  function upgradeTo(address newImplementation) external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n  }\r\n\r\n  /**\r\n   * @dev Upgrade the backing implementation of the proxy and call a function\r\n   * on the new implementation.\r\n   * This is useful to initialize the proxied contract.\r\n   * @param newImplementation Address of the new implementation.\r\n   * @param data Data to send as msg.data in the low level call.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   */\r\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\r\n    _upgradeTo(newImplementation);\r\n    (bool success,) = newImplementation.delegatecall(data);\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @return adm The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the address of the proxy admin.\r\n   * @param newAdmin Address of the new proxy admin.\r\n   */\r\n  function _setAdmin(address newAdmin) internal {\r\n    bytes32 slot = ADMIN_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newAdmin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Only fall back when the sender is not the admin.\r\n   */\r\n  function _willFallback() virtual override internal {\r\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\r\n    //super._willFallback();\r\n  }\r\n}\r\n\r\ninterface IAdminUpgradeabilityProxyView {\r\n  function admin() external view returns (address);\r\n  function implementation() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with a constructor for initializing\r\n * implementation and init data.\r\n */\r\nabstract contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract constructor.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _logic, bytes memory _data) public payable {\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n  \r\n  //function _willFallback() virtual override internal {\r\n    //super._willFallback();\r\n  //}\r\n}\r\n\r\n\r\n/**\r\n * @title AdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with a constructor for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\r\n  /**\r\n   * Contract constructor.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  constructor(address _admin, address _logic, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n  \r\n  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\r\n    super._willFallback();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title InitializableUpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\r\n * implementation and init data.\r\n */\r\nabstract contract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n  /**\r\n   * @dev Contract initializer.\r\n   * @param _logic Address of the initial implementation.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address _logic, bytes memory _data) public payable {\r\n    require(_implementation() == address(0));\r\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\r\n    _setImplementation(_logic);\r\n    if(_data.length > 0) {\r\n      (bool success,) = _logic.delegatecall(_data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * @title InitializableAdminUpgradeabilityProxy\r\n * @dev Extends from BaseAdminUpgradeabilityProxy with an initializer for \r\n * initializing the implementation, admin, and init data.\r\n */\r\ncontract InitializableAdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, InitializableUpgradeabilityProxy {\r\n  /**\r\n   * Contract initializer.\r\n   * @param _logic address of the initial implementation.\r\n   * @param _admin Address of the proxy administrator.\r\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address _admin, address _logic, bytes memory _data) public payable {\r\n    require(_implementation() == address(0));\r\n    InitializableUpgradeabilityProxy.initialize(_logic, _data);\r\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\r\n    _setAdmin(_admin);\r\n  }\r\n  \r\n  function _willFallback() override(Proxy, BaseAdminUpgradeabilityProxy) internal {\r\n    super._willFallback();\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface IProxyFactory {\r\n    function productImplementation() external view returns (address);\r\n    function productImplementations(bytes32 name) external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title ProductProxy\r\n * @dev This contract implements a proxy that \r\n * it is deploied by ProxyFactory, \r\n * and it's implementation is stored in factory.\r\n */\r\ncontract ProductProxy is Proxy {\r\n    \r\n  /**\r\n   * @dev Storage slot with the address of the ProxyFactory.\r\n   * This is the keccak-256 hash of \"eip1967.proxy.factory\" subtracted by 1, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 internal constant FACTORY_SLOT = 0x7a45a402e4cb6e08ebc196f20f66d5d30e67285a2a8aa80503fa409e727a4af1;\r\n\r\n  function productName() virtual public pure returns (bytes32) {\r\n    return 0x0;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the factory address of the ProductProxy.\r\n   * @param newFactory Address of the new factory.\r\n   */\r\n  function _setFactory(address newFactory) internal {\r\n    require(OpenZeppelinUpgradesAddress.isContract(newFactory), \"Cannot set a factory to a non-contract address\");\r\n\r\n    bytes32 slot = FACTORY_SLOT;\r\n\r\n    assembly {\r\n      sstore(slot, newFactory)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the factory.\r\n   * @return factory Address of the factory.\r\n   */\r\n  function _factory() internal view returns (address factory) {\r\n    bytes32 slot = FACTORY_SLOT;\r\n    assembly {\r\n      factory := sload(slot)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev Returns the current implementation.\r\n   * @return Address of the current implementation\r\n   */\r\n  function _implementation() virtual override internal view returns (address) {\r\n    address factory = _factory();\r\n    if(OpenZeppelinUpgradesAddress.isContract(factory))\r\n        return IProxyFactory(factory).productImplementations(productName());\r\n    else\r\n        return address(0);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title InitializableProductProxy\r\n * @dev Extends ProductProxy with an initializer for initializing\r\n * factory and init data.\r\n */\r\ncontract InitializableProductProxy is ProductProxy {\r\n  /**\r\n   * @dev Contract initializer.\r\n   * @param factory Address of the initial factory.\r\n   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n   * It should include the signature and the parameters of the function to be called, as described in\r\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n   */\r\n  function initialize(address factory, bytes memory data) public payable {\r\n    require(_factory() == address(0));\r\n    assert(FACTORY_SLOT == bytes32(uint256(keccak256('eip1967.proxy.factory')) - 1));\r\n    _setFactory(factory);\r\n    if(data.length > 0) {\r\n      (bool success,) = _implementation().delegatecall(data);\r\n      require(success);\r\n    }\r\n  }  \r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary OpenZeppelinUpgradesAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    //function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\ncontract Constants {\r\n    bytes32 internal constant _LongOption_      = 'LongOption';\r\n    bytes32 internal constant _ShortOption_     = 'ShortOption';\r\n    bytes32 internal constant _feeRate_         = 'feeRate';\r\n    bytes32 internal constant _feeRecipient_    = 'feeRecipient';\r\n    bytes32 internal constant _uniswapRounter_  = 'uniswapRounter';\r\n    bytes32 internal constant _mintOnlyBy_      = 'mintOnlyBy';\r\n}\r\n\r\ncontract OptionFactory is Configurable, Constants {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    mapping(bytes32 => address) public productImplementations;\r\n    mapping(address => mapping(address => mapping(address => mapping(uint => mapping(uint => address))))) public longs;\r\n    mapping(address => mapping(address => mapping(address => mapping(uint => mapping(uint => address))))) public shorts;\r\n    address[] public allLongs;\r\n    address[] public allShorts;\r\n    \r\n    function length() public view returns (uint) {\r\n        return allLongs.length;\r\n    }\r\n\r\n    function initialize(address _governor, address _implLongOption, address _implShortOption, address _feeRecipient, address _mintOnlyBy) public initializer {\r\n        super.initialize(_governor);\r\n        productImplementations[_LongOption_]    = _implLongOption;\r\n        productImplementations[_ShortOption_]   = _implShortOption;\r\n        config[_feeRate_]                       = 0.005 ether;               //0.002 ether;        // 0.2%\r\n        config[_feeRecipient_]                  = uint(_feeRecipient);\r\n        config[_uniswapRounter_]                = uint(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);\r\n        config[_mintOnlyBy_]                    = uint(_mintOnlyBy);\r\n    }\r\n\r\n    function upgradeProductImplementationsTo(address _implLongOption, address _implShortOption) external governance {\r\n        productImplementations[_LongOption_] = _implLongOption;\r\n        productImplementations[_ShortOption_] = _implShortOption;\r\n    }\r\n    \r\n    function createOption(bool _private, address _collateral, address _underlying, uint _strikePrice, uint _expiry) public returns (address long, address short) {\r\n        require(_collateral != _underlying, 'IDENTICAL_ADDRESSES');\r\n        require(_collateral != address(0) && _underlying != address(0), 'ZERO_ADDRESS');\r\n        require(_strikePrice != 0, 'ZERO_STRIKE_PRICE');\r\n        require(_expiry > now, 'Cannot create an expired option');\r\n\r\n        address creator = _private ? tx.origin : address(0);\r\n        require(longs[creator][_collateral][_underlying][_strikePrice][_expiry] == address(0), 'SHORT_PROXY_EXISTS');     // single check is sufficient\r\n\r\n        bytes32 salt = keccak256(abi.encodePacked(creator, _collateral, _underlying, _strikePrice, _expiry));\r\n\r\n        bytes memory bytecode = type(LongProxy).creationCode;\r\n        assembly {\r\n            long := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        InitializableProductProxy(payable(long)).initialize(address(this), abi.encodeWithSignature('initialize(address,address,address,uint256,uint256)', creator, _collateral, _underlying, _strikePrice, _expiry));\r\n        \r\n        bytecode = type(ShortProxy).creationCode;\r\n        assembly {\r\n            short := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        InitializableProductProxy(payable(short)).initialize(address(this), abi.encodeWithSignature('initialize(address,address,address,uint256,uint256)', creator, _collateral, _underlying, _strikePrice, _expiry));\r\n\r\n        longs [creator][_collateral][_underlying][_strikePrice][_expiry] = long;\r\n        shorts[creator][_collateral][_underlying][_strikePrice][_expiry] = short;\r\n        allLongs.push(long);\r\n        allShorts.push(short);\r\n        emit OptionCreated(creator, _collateral, _underlying, _strikePrice, _expiry, long, short, allLongs.length);\r\n    }\r\n    event OptionCreated(address indexed creator, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, address long, address short, uint count);\r\n    \r\n    function mint(bool _private, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) public returns (address long, address short, uint vol) {\r\n        require(config[_mintOnlyBy_] == 0 || address(config[_mintOnlyBy_]) == msg.sender, 'mint denied');\r\n        address creator = _private ? tx.origin : address(0);\r\n        long  = longs [creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        short = shorts[creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        if(short == address(0))                                                                      // single check is sufficient\r\n            (long, short) = createOption(_private, _collateral, _underlying, _strikePrice, _expiry);\r\n        \r\n        IERC20(_collateral).safeTransferFrom(msg.sender, short, volume);\r\n        ShortOption(short).mint_(msg.sender, volume);\r\n        LongOption(long).mint_(msg.sender, volume);\r\n        vol = volume;\r\n        \r\n        emit Mint(msg.sender, _private, _collateral, _underlying, _strikePrice, _expiry, long, short, vol);\r\n    }\r\n    event Mint(address indexed seller, bool _private, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, address long, address short, uint vol);\r\n    \r\n    function mint(address longOrShort, uint volume) external returns (address, address, uint) {\r\n        LongOption long = LongOption(longOrShort);\r\n        return mint(long.creator()!=address(0), long.collateral(), long.underlying(), long.strikePrice(), long.expiry(), volume);\r\n    }\r\n\r\n    function burn(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) public returns (address long, address short, uint vol) {\r\n        long  = longs [_creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        short = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        require(short != address(0), 'ZERO_ADDRESS');                                        // single check is sufficient\r\n\r\n        LongOption(long).burn_(msg.sender, volume);\r\n        ShortOption(short).burn_(msg.sender, volume);\r\n        vol = volume;\r\n        \r\n        emit Burn(msg.sender, _creator, _collateral, _underlying, _strikePrice, _expiry, vol);\r\n    }\r\n    event Burn(address indexed seller, address _creator, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, uint vol);\r\n\r\n    function burn(address longOrShort, uint volume) external returns (address, address, uint) {\r\n        LongOption long = LongOption(longOrShort);\r\n        return burn(long.creator(), long.collateral(), long.underlying(), long.strikePrice(), long.expiry(), volume);\r\n    }\r\n\r\n    function calcExerciseAmount(address _long, uint volume) public view returns (uint) {\r\n        return calcExerciseAmount(volume, LongOption(_long).strikePrice());\r\n    }\r\n    function calcExerciseAmount(uint volume, uint _strikePrice) public pure returns (uint) {\r\n        return volume.mul(_strikePrice).div(1 ether);\r\n    }\r\n    \r\n    function _exercise(address buyer, address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume, address[] memory path) internal returns (uint vol, uint fee, uint amt) {\r\n        require(now <= _expiry, 'Expired');\r\n        \r\n        address long  = longs[_creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        LongOption(long).burn_(buyer, volume);\r\n        \r\n        address short = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        amt = calcExerciseAmount(volume, _strikePrice);\r\n        if(path.length == 0) {\r\n            IERC20(_underlying).safeTransferFrom(buyer, short, amt);\r\n            (vol, fee) = ShortOption(short).exercise_(buyer, volume);\r\n        } else {\r\n            (vol, fee) = ShortOption(short).exercise_(address(this), volume);\r\n            IERC20(_collateral).safeApprove(address(config[_uniswapRounter_]), vol);\r\n            uint[] memory amounts = IUniswapV2Router01(config[_uniswapRounter_]).swapTokensForExactTokens(amt, vol, path, short, now);\r\n            vol = vol.sub(amounts[0]);\r\n            IERC20(_collateral).safeTransfer(buyer, vol);\r\n            amt = 0;\r\n        }\r\n        emit Exercise(buyer, _collateral, _underlying, _strikePrice, _expiry, volume, vol, fee, amt);\r\n    }\r\n    event Exercise(address indexed buyer, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, uint volume, uint vol, uint fee, uint amt);\r\n    \r\n    function exercise_(address buyer, address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume, address[] calldata path) external returns (uint vol, uint fee, uint amt) {\r\n        address long  = longs[_creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        require(msg.sender == long, 'Only LongOption');\r\n        \r\n        return _exercise(buyer, _creator, _collateral, _underlying, _strikePrice, _expiry, volume, path);\r\n    }\r\n    \r\n    function exercise(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume, address[] calldata path) external returns (uint vol, uint fee, uint amt) {\r\n        return _exercise(msg.sender, _creator, _collateral, _underlying, _strikePrice, _expiry, volume, path);\r\n    }\r\n    \r\n    function exercise(address _long, uint volume, address[] memory path) public returns (uint vol, uint fee, uint amt) {\r\n        LongOption long = LongOption(_long);\r\n        return _exercise(msg.sender, long.creator(), long.collateral(), long.underlying(), long.strikePrice(), long.expiry(), volume, path);\r\n    }\r\n\r\n    function exercise(address _long, uint volume) public returns (uint vol, uint fee, uint amt) {\r\n        LongOption long = LongOption(_long);\r\n        return _exercise(msg.sender, long.creator(), long.collateral(), long.underlying(), long.strikePrice(), long.expiry(), volume, new address[](0));\r\n    }\r\n\r\n    function exercise(address long, address[] calldata path) external returns (uint vol, uint fee, uint amt) {\r\n        return exercise(long, LongOption(long).balanceOf(msg.sender), path);\r\n    }\r\n\r\n    function exercise(address long) external returns (uint vol, uint fee, uint amt) {\r\n        return exercise(long, LongOption(long).balanceOf(msg.sender), new address[](0));\r\n    }\r\n\r\n    function settleable(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) public view returns (uint vol, uint col, uint fee, uint und) {\r\n        address short = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        return ShortOption(short).settleable(volume);\r\n    }\r\n    function settleable(address short, uint volume) public view returns (uint vol, uint col, uint fee, uint und) {\r\n        return ShortOption(short).settleable(volume);\r\n    }\r\n    function settleable(address seller, address short) public view returns (uint vol, uint col, uint fee, uint und) {\r\n        return ShortOption(short).settleable(seller);\r\n    }\r\n    \r\n    function settle(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) external returns (uint vol, uint col, uint fee, uint und) {\r\n        address short = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        return settle(short, volume);\r\n    }\r\n    function settle(address short, uint volume) public returns (uint vol, uint col, uint fee, uint und) {\r\n        return ShortOption(short).settle_(msg.sender, volume);\r\n    }\r\n    function settle(address short) external returns (uint vol, uint col, uint fee, uint und) {\r\n        return settle(short, ShortOption(short).balanceOf(msg.sender));\r\n    }\r\n    \r\n    function emitSettle(address seller, address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint vol, uint col, uint fee, uint und) external {\r\n        address short  = shorts[_creator][_collateral][_underlying][_strikePrice][_expiry];\r\n        require(msg.sender == short, 'Only ShortOption');\r\n        emit Settle(seller, _creator, _collateral, _underlying, _strikePrice, _expiry, vol, col, fee, und);\r\n    }\r\n    event Settle(address indexed seller, address _creator, address indexed _collateral, address indexed _underlying, uint _strikePrice, uint _expiry, uint vol, uint col, uint fee, uint und);\r\n}\r\n\r\ncontract LongProxy is InitializableProductProxy, Constants {\r\n    function productName() override public pure returns (bytes32) {\r\n        return _LongOption_;\r\n    }\r\n}\r\n\r\ncontract ShortProxy is InitializableProductProxy, Constants {\r\n    function productName() override public pure returns (bytes32) {\r\n        return _ShortOption_;\r\n    }\r\n}\r\n\r\n\r\ncontract LongOption is ERC20UpgradeSafe {\r\n    using SafeMath for uint;\r\n    \r\n    address public factory;\r\n    address public creator;\r\n    address public collateral;\r\n    address public underlying;\r\n    uint public strikePrice;\r\n    uint public expiry;\r\n\r\n    function initialize(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry) external initializer {\r\n        (string memory name, string memory symbol) = spellNameAndSymbol(_collateral, _underlying, _strikePrice, _expiry);\r\n        __ERC20_init(name, symbol);\r\n        _setupDecimals(ERC20UpgradeSafe(_collateral).decimals());\r\n\r\n        factory = msg.sender;\r\n        creator = _creator;\r\n        collateral = _collateral;\r\n        underlying = _underlying;\r\n        strikePrice = _strikePrice;\r\n        expiry = _expiry;\r\n    }\r\n    \r\n    function spellNameAndSymbol(address _collateral, address _underlying, uint _strikePrice, uint _expiry) public view returns (string memory name, string memory symbol) {\r\n        //return ('Helmet.Insure ETH long put option strike 500 USDC or USDC long call option strike 0.002 ETH expiry 2020/10/10', 'USDC(0.002ETH)201010');\r\n        return('Helmet.Insure Long Option Token', 'Long');\r\n    }\r\n\r\n    modifier onlyFactory {\r\n        require(msg.sender == factory, 'Only Factory');\r\n        _;\r\n    }\r\n    \r\n    function mint_(address _to, uint volume) external onlyFactory {\r\n        _mint(_to, volume);\r\n    }\r\n    \r\n    function burn_(address _from, uint volume) external onlyFactory {\r\n        _burn(_from, volume);\r\n    }\r\n    \r\n    function burn(uint volume) external {\r\n        _burn(msg.sender, volume);\r\n    }\r\n    function burn() external {\r\n        _burn(msg.sender, balanceOf(msg.sender));\r\n    }\r\n    \r\n    function exercise(uint volume, address[] memory path) public returns (uint vol, uint fee, uint amt) {\r\n        return OptionFactory(factory).exercise_(msg.sender, creator, collateral, underlying, strikePrice, expiry, volume, path);\r\n    }\r\n\r\n    function exercise(uint volume) public returns (uint vol, uint fee, uint amt) {\r\n        return exercise(volume, new address[](0));\r\n    }\r\n\r\n    function exercise(address[] calldata path) external returns (uint vol, uint fee, uint amt) {\r\n        return exercise(balanceOf(msg.sender), path);\r\n    }\r\n\r\n    function exercise() external returns (uint vol, uint fee, uint amt) {\r\n        return exercise(balanceOf(msg.sender), new address[](0));\r\n    }\r\n}\r\n\r\ncontract ShortOption is ERC20UpgradeSafe, Constants {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    \r\n    address public factory;\r\n    address public creator;\r\n    address public collateral;\r\n    address public underlying;\r\n    uint public strikePrice;\r\n    uint public expiry;\r\n\r\n    function initialize(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry) external initializer {\r\n        (string memory name, string memory symbol) = spellNameAndSymbol(_collateral, _underlying, _strikePrice, _expiry);\r\n        __ERC20_init(name, symbol);\r\n        _setupDecimals(ERC20UpgradeSafe(_collateral).decimals());\r\n\r\n        factory = msg.sender;\r\n        creator = _creator;\r\n        collateral = _collateral;\r\n        underlying = _underlying;\r\n        strikePrice = _strikePrice;\r\n        expiry = _expiry;\r\n    }\r\n\r\n    function spellNameAndSymbol(address _collateral, address _underlying, uint _strikePrice, uint _expiry) public view returns (string memory name, string memory symbol) {\r\n        //return ('Helmet.Insure ETH short put option strike 500 USDC or USDC short call option strike 0.002 ETH expiry 2020/10/10', 'USDC(0.002ETH)201010s');\r\n        return('Helmet.Insure Short Option Token', 'Short');\r\n    }\r\n\r\n    modifier onlyFactory {\r\n        require(msg.sender == factory, 'Only Factory');\r\n        _;\r\n    }\r\n    \r\n    function mint_(address _to, uint volume) external onlyFactory {\r\n        _mint(_to, volume);\r\n    }\r\n    \r\n    function burn_(address _from, uint volume) external onlyFactory {\r\n        _burn(_from, volume);\r\n        IERC20(collateral).safeTransfer(_from, volume);\r\n    }\r\n    \r\n    function calcFee(uint volume) public view returns (address recipient, uint fee) {\r\n        uint feeRate = OptionFactory(factory).getConfig(_feeRate_);\r\n        recipient = address(OptionFactory(factory).getConfig(_feeRecipient_));\r\n        \r\n        if(feeRate != 0 && recipient != address(0))\r\n            fee = volume.mul(feeRate).div(1 ether);\r\n        else\r\n            fee = 0;\r\n    }\r\n    \r\n    function _payFee(uint volume) internal returns (uint) {\r\n        (address recipient, uint fee) = calcFee(volume);\r\n        if(recipient != address(0) && fee > 0)\r\n            IERC20(collateral).safeTransfer(recipient, fee);\r\n        return fee;\r\n    }\r\n    \r\n    function exercise_(address buyer, uint volume) external onlyFactory returns (uint vol, uint fee) {\r\n        fee = _payFee(volume);\r\n        vol = volume.sub(fee);\r\n        IERC20(collateral).safeTransfer(buyer, vol);\r\n    }\r\n    \r\n    function settle_(address seller, uint volume) external onlyFactory returns (uint vol, uint col, uint fee, uint und) {\r\n        return _settle(seller, volume);\r\n    }\r\n    \r\n    function settleable(address seller) public view returns (uint vol, uint col, uint fee, uint und) {\r\n        return settleable(balanceOf(seller));\r\n    }\r\n    \r\n    function settleable(uint volume) public view returns (uint vol, uint col, uint fee, uint und) {\r\n        uint colla = IERC20(collateral).balanceOf(address(this));\r\n        uint under = IERC20(underlying).balanceOf(address(this));\r\n        if(now <= expiry) {\r\n            address long  = OptionFactory(factory).longs(creator, collateral, underlying, strikePrice, expiry);\r\n            uint waived = colla.sub(IERC20(long).totalSupply());\r\n            uint exercised = totalSupply().sub(colla);\r\n            uint we = waived.add(exercised);\r\n            if(we == 0)\r\n                return (0, 0, 0, 0);\r\n            vol = volume <= we ? volume : we;\r\n            col = waived.mul(vol).div(we);\r\n            und = under.mul(vol).div(we);\r\n        } else {\r\n            vol = volume <= totalSupply() ? volume : totalSupply();\r\n            col = colla.mul(vol).div(totalSupply());\r\n            und = under.mul(vol).div(totalSupply());\r\n        }\r\n        (, fee) = calcFee(col);\r\n        col = col.sub(fee);\r\n    }\r\n    \r\n    function _settle(address seller, uint volume) internal returns (uint vol, uint col, uint fee, uint und) {\r\n        (vol, col, fee, und) = settleable(volume);\r\n        _burn(seller, vol);\r\n        _payFee(col.add(fee));\r\n        IERC20(collateral).safeTransfer(seller, col);\r\n        IERC20(underlying).safeTransfer(seller, und);\r\n        OptionFactory(factory).emitSettle(seller, creator, collateral, underlying, strikePrice, expiry, vol, col, fee, und);\r\n    }\r\n    \r\n    function settle(uint volume) external returns (uint vol, uint col, uint fee, uint und) {\r\n        return _settle(msg.sender, volume);\r\n    }\r\n    \r\n    function settle() external returns (uint vol, uint col, uint fee, uint und) {\r\n        return _settle(msg.sender, balanceOf(msg.sender));\r\n    }\r\n}\r\n\r\n\r\ncontract Constants2 {\r\n    address internal constant _DAI_                 = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    bytes32 internal constant _ecoAddr_             = 'ecoAddr';\r\n    bytes32 internal constant _ecoRatio_            = 'ecoRatio';\r\n}\r\n\r\nstruct Ask {\r\n    uint    askID;\r\n    address seller;\r\n    address long;\r\n    uint    volume;\r\n    address settleToken;\r\n    uint    price;\r\n    uint    remain;\r\n}\r\n\r\nstruct Bid {\r\n    uint    bidID;\r\n    uint    askID;\r\n    address buyer;\r\n    uint    volume;\r\n    uint    amount;\r\n    uint    remain;\r\n}\r\n\r\ncontract OptionOrder is Configurable, Constants, Constants2 {\r\n    using Address for address payable;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n    \r\n\tbytes32 internal constant _disableCancle_   = 'disableCancle';\r\n\tbytes32 internal constant _allowContract_   = 'allowContract';\r\n\tbytes32 internal constant _allowlist_       = 'allowlist';\r\n\tbytes32 internal constant _blocklist_       = 'blocklist';\r\n\r\n    address public factory;\r\n    mapping(uint => Ask) public asks;\r\n    mapping(uint => Bid) public bids;\r\n    uint public asksN;\r\n    uint public bidsN;\r\n    \r\n    address public farm;\r\n    address public reward;\r\n    mapping(address => uint) public settledRewards;\r\n    mapping(address => uint) public claimedRewards;\r\n\tuint public begin;\r\n\tuint public span;\r\n\tuint public lep;            // 1: linear, 2: exponential, 3: power\r\n\tuint public times;\r\n\tuint public period;\r\n\tuint public frequency;\r\n\tuint public lasttime;\r\n\t\r\n\tmapping(address => mapping(address => uint)) public rewardThreshold;\r\n\r\n    function initialize(address _governor, address _factory, address _farm, address _reward, address _ecoAddr) public initializer {\r\n        super.initialize(_governor);\r\n        factory = _factory;\r\n        farm    = _farm;\r\n        reward  = _reward;\r\n        config[_ecoAddr_]  = uint(_ecoAddr);\r\n        config[_ecoRatio_] = 0.181818181818181818 ether;    //  5% / 27.5% \r\n        config[_feeRate_]  = 0.1 ether;                     // 10%\r\n        \r\n\t    //IFarm(farm).crop();                       // just check\r\n\t    IERC20(_reward).totalSupply();           // just check\r\n\r\n        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\r\n        setRewardThreshold(_DAI_, weth, 500 ether);\r\n    }\r\n    \r\n    function setRewardThreshold(address _collateral, address _underlying, uint volume) public governance {\r\n        rewardThreshold[_collateral][_underlying] = volume;\r\n    }\r\n\r\n    function setBegin(uint _lep, uint _period, uint _span, uint _begin) virtual external governance {\r\n        lep     = _lep;         // 1: linear, 2: exponential, 3: power\r\n        period  = _period;\r\n        span    = _span;\r\n        begin   = _begin;\r\n        lasttime= _begin;\r\n        times   = 0;\r\n    }\r\n    \r\n    function sellOnETH(bool _private, address _underlying, uint _strikePrice, uint _expiry, address settleToken, uint price) virtual external payable returns (uint askID) {\r\n        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\r\n        IWETH(weth).deposit{value: msg.value}();\r\n        return sell(_private, weth, _underlying, _strikePrice, _expiry, msg.value, settleToken, price);\r\n    }\r\n    \r\n    function sell(bool _private, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume, address settleToken, uint price) virtual public returns (uint askID) {\r\n        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\r\n        if(_collateral != weth || IERC20(_collateral).balanceOf(address(this)) < volume)\r\n            IERC20(_collateral).safeTransferFrom(msg.sender, address(this), volume);\r\n        IERC20(_collateral).safeApprove(factory, volume);\r\n        (address long, address short, uint vol) = OptionFactory(factory).mint(_private, _collateral, _underlying, _strikePrice, _expiry, volume);\r\n        \r\n        //address creator = _private ? tx.origin : address(0);\r\n        //address short = OptionFactory(factory).shorts(creator, _collateral, _underlying, _strikePrice, _expiry);\r\n        IERC20(short).safeTransfer(msg.sender, vol);\r\n\r\n        //address long = OptionFactory(factory).longs(creator, _collateral, _underlying, _strikePrice, _expiry);\r\n        return _sell(long, vol, settleToken, price);\r\n    }\r\n    \r\n    function sell(address long, uint volume, address settleToken, uint price) virtual public returns (uint askID) {\r\n        IERC20(long).safeTransferFrom(msg.sender, address(this), volume);\r\n        return _sell(long, volume, settleToken, price);\r\n    }\r\n    \r\n    function _sell(address long, uint volume, address settleToken, uint price) virtual internal returns (uint askID) {\r\n        askID = asksN++;\r\n        asks[askID] = Ask(askID, msg.sender, long, volume, settleToken, price, volume);\r\n        \r\n        emit Sell(askID, msg.sender, long, volume, settleToken, price);\r\n    }\r\n    event Sell(uint askID, address indexed seller, address indexed long, uint volume, address indexed settleToken, uint price);\r\n    \r\n    function reprice(uint askID, uint newPrice) virtual external returns (uint newAskID) {\r\n        require(asks[askID].seller != address(0), 'Nonexistent ask order');\r\n        require(asks[askID].seller == msg.sender, 'Not yours ask Order');\r\n        \r\n        newAskID = asksN++;\r\n        asks[newAskID] = Ask(newAskID, asks[askID].seller, asks[askID].long, asks[askID].remain, asks[askID].settleToken, newPrice, asks[askID].remain);\r\n        asks[askID].remain = 0;\r\n        \r\n        emit Reprice(askID, newAskID, asks[newAskID].seller, asks[newAskID].long, asks[newAskID].volume, asks[newAskID].settleToken, asks[askID].price, newPrice);\r\n    }\r\n    event Reprice(uint askID, uint newAskID, address indexed seller, address indexed long, uint volume, address indexed settleToken, uint price, uint newPrice);\r\n    \r\n    function cancel(uint askID) virtual external returns (uint vol) {\r\n        require(asks[askID].seller != address(0), 'Nonexistent ask order');\r\n        require(asks[askID].seller == msg.sender, 'Not yours ask Order');\r\n        require(config[_disableCancle_] == 0, 'disable cancle');\r\n        \r\n        vol = asks[askID].remain;\r\n        IERC20(asks[askID].long).safeTransfer(msg.sender, vol);\r\n        asks[askID].remain = 0;\r\n\r\n        emit Cancel(askID, msg.sender, asks[askID].long, vol);\r\n    }\r\n    event Cancel(uint askID, address indexed seller, address indexed long, uint vol);\r\n    \r\n    function calcFee(uint volume) public view returns (address recipient, uint fee) {\r\n        uint feeRate = getConfig(_feeRate_);\r\n        recipient = address(OptionFactory(factory).getConfig(_feeRecipient_));\r\n        \r\n        if(feeRate != 0 && recipient != address(0))\r\n            fee = volume.mul(feeRate).div(1 ether);\r\n        else\r\n            fee = 0;\r\n    }\r\n    \r\n    function buy(uint askID, uint volume) virtual public returns (uint bidID, uint vol, uint amt) {\r\n        require(asks[askID].seller != address(0), 'Nonexistent ask order');\r\n        vol = volume;\r\n        if(vol > asks[askID].remain)\r\n            vol = asks[askID].remain;\r\n            \r\n        amt = vol.mul(asks[askID].price).div(1 ether);\r\n        (address recipient, uint fee) = calcFee(amt);\r\n        amt = amt.sub(fee);\r\n        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\r\n        address settleToken = asks[askID].settleToken;\r\n        if(settleToken != weth || address(this).balance < amt.add(fee)) {\r\n            IERC20(settleToken).safeTransferFrom(msg.sender, asks[askID].seller, amt);\r\n            if(recipient != address(0) && fee > 0)\r\n                IERC20(settleToken).safeTransferFrom(msg.sender, recipient, fee);\r\n        } else {\r\n            payable(asks[askID].seller).transfer(amt);\r\n            if(recipient != address(0) && fee > 0)\r\n                payable(recipient).transfer(fee);\r\n        }\r\n        asks[askID].remain = asks[askID].remain.sub(vol);\r\n        IERC20(asks[askID].long).safeTransfer(msg.sender, vol);\r\n        \r\n        bidID = bidsN++;\r\n        bids[bidID] = Bid(bidID, askID, msg.sender, vol, amt, vol);\r\n        \r\n        emit Buy(bidID, askID, msg.sender, vol, amt);\r\n    }\r\n    event Buy(uint bidID, uint askID, address indexed buyer, uint vol, uint amt);\r\n    \r\n    function buyInETH(uint askID, uint volume) virtual external payable returns (uint bidID, uint vol, uint amt) {\r\n        require(asks[askID].seller != address(0), 'Nonexistent ask order');\r\n        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\r\n        require(asks[askID].settleToken == weth, 'settleToken is NOT WETH');\r\n\r\n        vol = volume;\r\n        if(vol > asks[askID].remain)\r\n            vol = asks[askID].remain;\r\n            \r\n        amt = vol.mul(asks[askID].price).div(1 ether);\r\n        require(msg.value >= amt, 'value is too low');\r\n        \r\n        (bidID, vol, amt) = buy(askID, vol);\r\n        \r\n        if(msg.value > amt)\r\n            msg.sender.transfer(msg.value.sub(amt));\r\n    }\r\n    \r\n    function exercise(uint bidID) virtual external returns (uint vol, uint fee, uint amt) {\r\n        return exercise(bidID, bids[bidID].remain, new address[](0));\r\n    }\r\n    function exercise(uint bidID, address[] calldata path) virtual external returns (uint vol, uint fee, uint amt) {\r\n        return exercise(bidID, bids[bidID].remain, path);\r\n    }\r\n    function exercise(uint bidID, uint volume) virtual public returns (uint vol, uint fee, uint amt) {\r\n        return exercise(bidID, volume, new address[](0));\r\n    }\r\n    function exercise(uint bidID, uint volume, address[] memory path) virtual public returns (uint vol, uint fee, uint amt) {\r\n        require(bids[bidID].buyer != address(0), 'Nonexistent bid order');\r\n        if(volume > bids[bidID].remain)\r\n            volume = bids[bidID].remain;\r\n        bids[bidID].remain = bids[bidID].remain.sub(volume);\r\n        \r\n        address long = asks[bids[bidID].askID].long;\r\n        IERC20(long).safeTransferFrom(msg.sender, address(this), volume);\r\n        \r\n        if(path.length == 0) {\r\n            amt = OptionFactory(factory).calcExerciseAmount(long, volume);\r\n            address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\r\n            address underlying = LongOption(long).underlying();\r\n            if(underlying != weth || IERC20(underlying).balanceOf(address(this)) < amt)\r\n                IERC20(underlying).safeTransferFrom(msg.sender, address(this), amt);\r\n            IERC20(underlying).safeApprove(factory, amt);\r\n        }\r\n        \r\n        (vol, fee, amt) = OptionFactory(factory).exercise(long, volume, path);\r\n        IERC20(LongOption(long).collateral()).safeTransfer(msg.sender, vol);\r\n\r\n        _settleReward(msg.sender, LongOption(long).collateral(), LongOption(long).underlying(), volume);\r\n        emit Exercise(bidID, msg.sender, vol, fee, amt);\r\n    }\r\n    event Exercise(uint bidID, address indexed buyer, uint vol, uint fee, uint amt);\r\n    \r\n    function exerciseETH(uint bidID, uint volume) virtual public payable returns (uint vol, uint fee, uint amt) {\r\n        require(bids[bidID].buyer != address(0), 'Nonexistent bid order');\r\n        address long = asks[bids[bidID].askID].long;\r\n        address underlying = LongOption(long).underlying();\r\n        address weth = IUniswapV2Router01(OptionFactory(factory).getConfig(_uniswapRounter_)).WETH();\r\n        require(underlying == weth, 'underlying is NOT WETH');\r\n\r\n        if(volume > bids[bidID].remain)\r\n            volume = bids[bidID].remain;\r\n        amt = OptionFactory(factory).calcExerciseAmount(long, volume);\r\n        require(msg.value >= amt, 'value is too low');\r\n        \r\n        IWETH(weth).deposit{value: amt}();\r\n        (vol, fee, amt) = exercise(bidID, volume, new address[](0));\r\n        \r\n        if(msg.value > amt)\r\n            msg.sender.transfer(msg.value.sub(amt));\r\n    }\r\n    function exerciseETH(uint bidID) virtual external payable returns (uint vol, uint fee, uint amt) {\r\n        return exerciseETH(bidID, bids[bidID].remain);\r\n    }\r\n\r\n    function waive(uint bidID) virtual external {\r\n        waive(bidID, bids[bidID].remain);\r\n    }\r\n    function waive(uint bidID, uint volume) virtual public returns (uint vol) {\r\n        vol = volume;\r\n        if(vol > bids[bidID].remain)\r\n            vol = bids[bidID].remain;\r\n        bids[bidID].remain = bids[bidID].remain.sub(vol);\r\n\r\n        address long = asks[bids[bidID].askID].long;\r\n        IERC20(long).safeTransferFrom(msg.sender, address(this), vol);\r\n        LongOption(long).burn(vol);\r\n        \r\n        _settleReward(msg.sender, LongOption(long).collateral(), LongOption(long).underlying(), vol);\r\n        emit Waive(bidID, msg.sender, vol);\r\n    }\r\n    event Waive(uint bidID, address indexed buyer, uint vol);\r\n    \r\n    function _settleReward(address buyer, address _collateral, address _underlying, uint volume) virtual internal returns (uint amt) {\r\n        if(begin == 0 || begin >= now)\r\n            return 0;\r\n            \r\n        amt = settleableReward(_collateral, _underlying, volume);\r\n        if(amt == 0)\r\n            return 0;\r\n\r\n        _updateFrequency();\r\n\r\n        settledRewards[buyer] = settledRewards[buyer].add(amt);\r\n        \r\n        uint a = 0;\r\n        address addr = address(config[_ecoAddr_]);\r\n        uint ratio = config[_ecoRatio_];\r\n        if(addr != address(0) && ratio != 0) {\r\n            a = amt.mul(ratio).div(1 ether);\r\n            settledRewards[addr] = settledRewards[addr].add(a);\r\n        }\r\n\r\n        settledRewards[address(0)] = settledRewards[address(0)].add(amt).add(a);\r\n\r\n        emit SettleReward(buyer, _collateral, _underlying, volume, amt, settledRewards[buyer]);\r\n    }\r\n    event SettleReward(address indexed buyer, address indexed _collateral, address indexed _underlying, uint volume, uint amt, uint settled);\r\n\r\n    function settleableReward(address _collateral, address _underlying, uint volume) public view returns (uint) {\r\n        uint threshold = rewardThreshold[_collateral][_underlying];\r\n        if(threshold == 0 || volume < threshold)\r\n            return 0;\r\n        else\r\n            return settleableReward();\r\n    }\r\n    function settleableReward() public view returns (uint amt) {\r\n        if(begin == 0 || begin >= now)\r\n            return 0;\r\n            \r\n        amt = IERC20(reward).allowance(farm, address(this)).add(claimedRewards[address(0)]).sub(settledRewards[address(0)]);\r\n        \r\n        // calc settleable in period\r\n        if(lep == 3) {                                                              // power\r\n            //uint r0 = amt.mul(period).div(now.add(span).sub(begin));\r\n            //uint r1 = amt.mul(period).div(now.add(span).sub(begin).add(period));\r\n            //amt = r0.sub(r1);\r\n            uint y = period.mul(1 ether).div(lasttime.add(span).sub(begin));\r\n            amt = amt.mul(1 ether).div(y);\r\n            y = period.mul(1 ether).div(now.add(span).sub(begin));\r\n            y = y.mul(y).div(1 ether);\r\n            amt = amt.mul(y).div(1 ether);\r\n        } else if(lep == 2) {                                                       // exponential\r\n            if(period < span)\r\n                amt = amt.mul(period).div(span);\r\n        }else if(now.add(period) < begin.add(span))                                 // linear\r\n            amt = amt.mul(period).div(begin.add(span).sub(now));\r\n        else if(now >= begin.add(span))\r\n            amt = 0;\r\n    \r\n        amt = amt.mul(1 ether).div(calcFrequency());\r\n    }\r\n    \r\n    function calcFrequency() public view returns (uint f) {\r\n        if(now < begin.add(period))\r\n            if(now > begin)\r\n                f = times.add(1 ether).mul(period).div(now.sub(begin));\r\n            else\r\n                f = uint(-1);\r\n        else\r\n            if(lasttime.add(period) > now)\r\n                f = lasttime.add(period).sub(now).mul(frequency).div(period).add(1 ether);\r\n            else\r\n                f = 1 ether;\r\n    }\r\n    \r\n    function _updateFrequency() internal returns(uint) {\r\n        frequency = calcFrequency();\r\n        times = times.add(1 ether);\r\n        lasttime = now;\r\n    }\r\n\r\n    function getReward() external {\r\n        claim();\r\n    }\r\n    function claim() virtual public returns (uint amt) {\r\n        require(getConfig(_blocklist_, msg.sender) == 0, 'In blocklist');\r\n        bool isContract = msg.sender.isContract();\r\n        require(!isContract || config[_allowContract_] != 0 || getConfig(_allowlist_, msg.sender) != 0, 'No allowContract');\r\n\r\n        amt = claimable(msg.sender);\r\n        IERC20(reward).safeTransferFrom(farm, msg.sender, amt);\r\n        claimedRewards[msg.sender] = settledRewards[msg.sender];\r\n        claimedRewards[address(0)] = claimedRewards[address(0)].add(amt);\r\n        \r\n        emit Claim(msg.sender, amt, claimedRewards[msg.sender]);\r\n    }\r\n    event Claim(address indexed seller, uint amt, uint claimed);\r\n\r\n    function earned(address account) external view returns (uint256) {\r\n        return claimable(account);\r\n    }\r\n    function claimable(address buyer) public view returns (uint) {\r\n        return settledRewards[buyer].sub(claimedRewards[buyer]);\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract Insurer is Configurable {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    address public order;\r\n    \r\n    function initialize(address _governor, address _order) public initializer {\r\n        super.initialize(_governor);\r\n        order = _order;\r\n    }\r\n    \r\n    function sell(bool _private, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume, address settleToken, uint price) virtual public governance returns (uint askID) {\r\n        IERC20(_collateral).approve(order, volume);\r\n        return OptionOrder(order).sell(_private, _collateral, _underlying, _strikePrice, _expiry, volume, settleToken, price);\r\n    }\r\n    \r\n    function sell(address long, uint volume, address settleToken, uint price) virtual public governance returns (uint askID) {\r\n        IERC20(LongOption(long).collateral()).approve(order, volume);\r\n        return OptionOrder(order).sell(long, volume, settleToken, price);\r\n    }\r\n    \r\n    function reprice(uint askID, uint newPrice) virtual external governance returns (uint newAskID) {\r\n        return OptionOrder(order).reprice(askID, newPrice);\r\n    }\r\n\r\n    function cancel(uint askID) virtual external governance returns (uint vol) {\r\n        return OptionOrder(order).cancel(askID);\r\n    }\r\n    \r\n    function mint(bool _private, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) public returns (address long, address short, uint vol) {\r\n        IERC20(_collateral).approve(OptionOrder(order).factory(), volume);\r\n        return OptionFactory(OptionOrder(order).factory()).mint(_private, _collateral, _underlying, _strikePrice, _expiry, volume);\r\n    }\r\n\r\n    function mint(address longOrShort, uint volume) external returns (address, address, uint) {\r\n        IERC20(LongOption(longOrShort).collateral()).approve(OptionOrder(order).factory(), volume);\r\n        return OptionFactory(OptionOrder(order).factory()).mint(longOrShort, volume);\r\n    }\r\n\r\n    function burn(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) public governance returns (address long, address short, uint vol) {\r\n        return OptionFactory(OptionOrder(order).factory()).burn(_creator, _collateral, _underlying, _strikePrice, _expiry, volume);\r\n    }\r\n\r\n    function burn(address longOrShort, uint volume) external governance returns (address, address, uint) {\r\n        return OptionFactory(OptionOrder(order).factory()).burn(longOrShort, volume);\r\n    }\r\n    \r\n    function burn(address token) external governance returns (uint vol) {\r\n        require(now >= 1613404800, 'should after 2021-02-15 24:00:00 GST+8');\r\n        address BurnAddress = 0x000000000000000000000000000000000000dEaD;\r\n        vol = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).safeTransfer(BurnAddress, vol);\r\n    }\r\n\r\n    function settle(address _creator, address _collateral, address _underlying, uint _strikePrice, uint _expiry, uint volume) external governance returns (uint vol, uint col, uint fee, uint und) {\r\n        return OptionFactory(OptionOrder(order).factory()).settle(_creator, _collateral, _underlying, _strikePrice, _expiry, volume);\r\n    }\r\n    function settle(address short, uint volume) public governance returns (uint vol, uint col, uint fee, uint und) {\r\n        return OptionFactory(OptionOrder(order).factory()).settle(short, volume);\r\n    }\r\n    function settle(address short) external governance returns (uint vol, uint col, uint fee, uint und) {\r\n        return OptionFactory(OptionOrder(order).factory()).settle(short);\r\n    }\r\n}", "ABI": "[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LongProxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x0098f14dea97f399f9dfeb125991c6b6280234d2", "SwarmSource": "ipfs://cedcc7507fbd64d56253c7705d0fd9c0a4f6bf0b2760f1468152048e296868b6"}