{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KryxiviaStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./libs/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IBEP20.sol\\\";\\r\\n\\r\\npragma solidity >= 0.8.0;\\r\\n\\r\\nstruct StakingDetails {\\r\\n    uint256 amount;\\r\\n    uint256 start_block;\\r\\n    uint256 end_block;\\r\\n    bool validated;\\r\\n}\\r\\n\\r\\ncontract KryxiviaStaking {\\r\\n\\r\\n    // Use alias imports\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n\\r\\n    // Kryxivia coin hash: 0x2223bf1d7c19ef7c06dab88938ec7b85952ccd89\\r\\n    address                             private _kryxiviaCoin;\\r\\n\\r\\n    // Decimal point of the Kryxivia coin\\r\\n    uint256                             private _coinDecimal = 1e18;\\r\\n\\r\\n    // Staking contract manager: 0x605639FfFdBf3747A886fbFd47B159BF88263394\\r\\n    address                             private _kryxiviaManager;\\r\\n\\r\\n    // State of the contract: active per default\\r\\n    bool                                public _stakingState = true;\\r\\n\\r\\n    // Total amount of blocks needed to lock KXA\\r\\n    uint256                             public _amountOfTotalBlocks;\\r\\n\\r\\n    // Minimum required to lock KXA token\\r\\n    uint256                             public _minimumRequiredLock;\\r\\n\\r\\n    // Total amount of KXA locked\\r\\n    uint256                             public _totalLocked;\\r\\n\\r\\n    // Total numbers of stakers in the contract\\r\\n    uint256                             public _lockersIndex;\\r\\n\\r\\n    // Count of total stakers in the contract\\r\\n    uint256                             public _stakersCount;\\r\\n\\r\\n    // Array of lockers addresses for Alpha selection\\r\\n    address[]                             public _lockersAddress;\\r\\n\\r\\n    // List of stakers in the contract\\r\\n    mapping(address => StakingDetails)  public _stakers;\\r\\n\\r\\n\\r\\n    constructor(address kryxiviaCoin, address kryxiviaManager)\\r\\n    {\\r\\n        _kryxiviaCoin = kryxiviaCoin;\\r\\n        _kryxiviaManager = kryxiviaManager;\\r\\n\\r\\n        // average of blocks number per month on the Binance smart chain network\\r\\n        _amountOfTotalBlocks = 832399;\\r\\n        \\r\\n        // minimum amount of KXA to lock per default is 15k KXA\\r\\n        uint256 defaultAmount = 15000;\\r\\n        _minimumRequiredLock = (defaultAmount).mul(_coinDecimal);\\r\\n    }\\r\\n\\r\\n\\r\\n    // ******* GETTERS (READ ONLY) *******\\r\\n\\r\\n        /*\\r\\n        ** Return the minimum required to be able to lock in the KXA contract\\r\\n        */\\r\\n        function getMinimumRequiredLock() public view returns(uint256) {\\r\\n            return _minimumRequiredLock;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Return total blocks to be past before unlock\\r\\n        */\\r\\n        function getTotalBlocks() public view returns(uint256) {\\r\\n            return _amountOfTotalBlocks;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Return the state of the staking contract (can lock or not)\\r\\n        */\\r\\n        function getStakingState() public view returns(bool) {\\r\\n            return _stakingState;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Return visibility on if a specific address is whitelisted for the alpha access\\r\\n        */\\r\\n        function getValidatedState(address addr) public view returns(bool) {\\r\\n            return _stakers[addr].validated;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Total KXA locked amount for a specific address\\r\\n        */\\r\\n        function getAddrLockAmount(address addr) public view returns(uint256) {\\r\\n            return _stakers[addr].amount;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Get lock date for a specific address\\r\\n        */\\r\\n        function getAddrStartBlock(address addr) public view returns(uint256) {\\r\\n            return _stakers[addr].start_block;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Get end date for a specific address\\r\\n        */\\r\\n        function getAddrEndBlock(address addr) public view returns(uint256) {\\r\\n            return _stakers[addr].end_block;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Return the public address of the index locker\\r\\n        */\\r\\n        function getLockerIndexAddress(uint256 index) public view returns(address) {\\r\\n            return _lockersAddress[index];\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Get total array index lockers\\r\\n        */\\r\\n        function getLockersIndex() public view returns(uint256) {\\r\\n            return _lockersIndex;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Get total stakers active in the contract\\r\\n        */\\r\\n        function getTotalStakers() public view returns(uint256) {\\r\\n            return _stakersCount;\\r\\n        }\\r\\n\\r\\n    // ******* GETTERS (READ ONLY) *******\\r\\n\\r\\n\\r\\n    // ******* SETTERS (READ/WRITE) *******\\r\\n    \\r\\n        /*\\r\\n        ** Update the minimum amount of KXA needed to lock in the contract\\r\\n        */\\r\\n        function setMinimumRequiredLock(uint256 amountKxa) public {\\r\\n            require(\\r\\n                msg.sender == _kryxiviaManager,\\r\\n                \\\"Only the Kryxivia manager can update minimum lock required\\\");\\r\\n            _minimumRequiredLock = amountKxa;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Update the staking contract state (only for manager)\\r\\n        */\\r\\n        function setStakingState(bool state) public {\\r\\n            require(\\r\\n                msg.sender == _kryxiviaManager,\\r\\n                \\\"Only the Kryxivia manager can update staking state\\\");\\r\\n            _stakingState = state;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Update validation state for accessing the alpha (only for manager)\\r\\n        */\\r\\n        function setValidatedState(address addr, bool state) public {\\r\\n            require(\\r\\n                msg.sender == _kryxiviaManager,\\r\\n                \\\"Only the Kryxivia manager can update validation state\\\");\\r\\n            _stakers[addr].validated = state;\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Set total amounts of blocks needed past before being able to unlock KXA\\r\\n        */\\r\\n        function setTotalBlocks(uint256 amountOfBlocks) public {\\r\\n            require(\\r\\n                msg.sender == _kryxiviaManager,\\r\\n                \\\"Only the Kryxivia manager can update total amount of blocks needed for unlock\\\");\\r\\n            _amountOfTotalBlocks = amountOfBlocks; \\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Stake Kryxivia Coin in the staking contract\\r\\n        */\\r\\n        function stakeKXA(uint256 amountToLock) public {\\r\\n            IBEP20 kxaToken = IBEP20(_kryxiviaCoin);\\r\\n            require(\\r\\n                _stakers[msg.sender].amount == 0,\\r\\n                \\\"You already staked KXA in the contract, please unstake first!\\\");\\r\\n            require(\\r\\n                amountToLock >= _minimumRequiredLock,\\r\\n                \\\"Not enough KXA to fit requirements\\\"\\r\\n            );\\r\\n            require(\\r\\n                kxaToken.balanceOf(msg.sender) >= amountToLock,\\r\\n                \\\"Insufficient funds from the sender\\\");\\r\\n            require(\\r\\n                kxaToken.transferFrom(msg.sender, address(this), amountToLock) == true,\\r\\n                 \\\"Error transferFrom on the contract\\\");\\r\\n            \\r\\n            _stakers[msg.sender].start_block = block.number;\\r\\n            _stakers[msg.sender].end_block = block.number.add(_amountOfTotalBlocks);\\r\\n            _stakers[msg.sender].amount = amountToLock;\\r\\n            _totalLocked = _totalLocked.add(amountToLock);\\r\\n            _lockersAddress.push(msg.sender);\\r\\n            _lockersIndex = _lockersIndex.add(1);\\r\\n            _stakersCount = _stakersCount.add(1);\\r\\n        }\\r\\n\\r\\n        /*\\r\\n        ** Unstake Kryxivia Coin in the staking contract\\r\\n        */\\r\\n        function unStakeKXA() public {\\r\\n            IBEP20 kxaToken = IBEP20(_kryxiviaCoin);\\r\\n            uint256 stakedAmount = _stakers[msg.sender].amount;\\r\\n\\r\\n            require (\\r\\n                stakedAmount > 0,\\r\\n                \\\"You did not locked any KXA in the staking contract!\\\"\\r\\n            );\\r\\n            require(\\r\\n                block.number >= _stakers[msg.sender].end_block,\\r\\n                \\\"You cant unlock your KXA yet!\\\"\\r\\n            );\\r\\n            require(\\r\\n                kxaToken.balanceOf(address(this)) >= stakedAmount,\\r\\n                \\\"Not enough KXA funds in the staking contract\\\"\\r\\n            );\\r\\n\\r\\n            _stakers[msg.sender].amount = 0;\\r\\n            _totalLocked = _totalLocked.sub(stakedAmount);\\r\\n            _stakersCount = _stakersCount.sub(1);\\r\\n            require(\\r\\n                kxaToken.transfer(msg.sender, stakedAmount) == true,\\r\\n                \\\"Error transfer on the contract\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n\\r\\n    // ******* SETTERS (READ/WRITE) *******\\r\\n}\"\r\n    },\r\n    \"contracts/libs/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kryxiviaCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kryxiviaManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_amountOfTotalBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lockersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumRequiredLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_block\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"validated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakingState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddrEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddrLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddrStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLockerIndexAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumRequiredLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getValidatedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountKxa\",\"type\":\"uint256\"}],\"name\":\"setMinimumRequiredLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setStakingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfBlocks\",\"type\":\"uint256\"}],\"name\":\"setTotalBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setValidatedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToLock\",\"type\":\"uint256\"}],\"name\":\"stakeKXA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStakeKXA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KryxiviaStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002223bf1d7c19ef7c06dab88938ec7b85952ccd89000000000000000000000000605639fffdbf3747a886fbfd47b159bf88263394", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}