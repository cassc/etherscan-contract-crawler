{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/MiningV6/MiningReconcile.sol\r\n\r\n\r\n//0x83F88dbC1e1CAbE185Eb12cF98400F47a83764C9\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract MiningReconcile is Pausable, Ownable {\r\n\r\n    mapping ( address => bool ) public allowedContracts;\r\n\r\n    mapping(uint => address) public mining_contracts;\r\n    mapping(uint => bool) public version_allowed;\r\n\r\n    address public airdropCon;\r\n    address public stakeCon;\r\n    uint public miningFees;\r\n    uint public maxCliamsBatch;\r\n\r\n    mapping(uint=> mapping(uint => bool)) public minedByNft;\r\n    mapping(address=> mapping(uint => bool)) public minedByWallet;\r\n    mapping(uint=> uint) public minedByNftNbr;\r\n    mapping(address=> uint) public minedByWalletNbr;\r\n    \r\n    constructor() Ownable()  {\r\n        mining_contracts[1] = 0x7D5Dacc91772078EeC7d48cAF21d51D221fC5a28;\r\n        mining_contracts[2] = 0x4Dd499133887AD0e901918e310B09c778aEC9b3d;\r\n        mining_contracts[3] = 0x8dF8bC74251a2b345ec4756BF87a2Aa726927f78;\r\n        mining_contracts[4] = 0x0e3d770F97Ee2dbEE301bfb68CF3A833696cb434;\r\n        airdropCon = 0x0463AE91155a6Dc9140d3A63D9D18a998542d0fa;\r\n        stakeCon = 0x922c94B201B22058f11041551C7A7B623DD94e8e;\r\n        version_allowed[2] = true;\r\n        version_allowed[3] = true;\r\n        version_allowed[4] = true;\r\n        miningFees = 530000000000000;\r\n        maxCliamsBatch = 10;\r\n    }\r\n\r\n    struct shareData{\r\n        address _owner;\r\n        uint shares;\r\n        uint32 day;\r\n        uint32 month;\r\n        uint32 year;\r\n        uint _days;\r\n    }\r\n\r\n    struct submittedData{\r\n        uint shares;\r\n        uint _days;\r\n        uint32 day;\r\n        uint32 month;\r\n        uint32 year;\r\n    }\r\n    event claimEvent(uint _version, address _owner, uint _tkn,uint _totalShares,uint _totalDays, uint _totalRatio);\r\n\r\n\r\n\r\n    function getPendingClaimsNbr(address _user, uint _tkn, uint _version) public view returns (uint){\r\n        if(_version >=4) return IMining(mining_contracts[_version]).getPendingClaimsNbr(_user);        \r\n        return IMining(mining_contracts[_version]).getPendingClaimsNbr(_tkn);\r\n        \r\n    }\r\n    function getPendingClaims(address _user, uint _tkn, uint _version) public view returns (IMining.submittedDataMining[] memory){\r\n        if(_version >=4) return IMining(mining_contracts[_version]).getPendingClaims(_user);        \r\n        return IMining(mining_contracts[_version]).getPendingClaims(_tkn);\r\n    }\r\n    function getDayShares (uint _day, uint _version) public view returns (uint){\r\n        return IMining(mining_contracts[_version]).getDayShares(_day);\r\n    }\r\n    function claim(address _user_, uint _tkn_, uint _version_) public payable whenNotPaused returns (uint _totalShares,uint _totalDays, uint _totalRatio){\r\n        require(msg.value >= miningFees, \"Not enough funds; check fees!\");\r\n        require(version_allowed[_version_] == true, \"Version not allowed\");\r\n        uint _version = _version_;\r\n        address _user = _user_;\r\n        uint _tkn = _tkn_;\r\n        IMining.submittedDataMining[] memory array = getPendingClaims(_user, _tkn, _version);\r\n        uint32 ratio_multiplier = 1000000;\r\n        uint mined;\r\n        uint claimsToProcess;\r\n        if(_version >=4){\r\n            mined = minedByWalletNbr[_user];\r\n        }else{\r\n            mined = minedByNftNbr[_tkn];\r\n            _user = ownerOfToken(_tkn);\r\n        } \r\n        require(array.length > 0, \"Nothing to claim\");\r\n        require(array.length > mined, \"Already claimed\");\r\n        claimsToProcess = mined + maxCliamsBatch;\r\n        uint end = claimsToProcess > array.length ? array.length : claimsToProcess;\r\n        uint totalRatio = 0;\r\n        uint totalShares = 0;\r\n        uint totalDays = 0;\r\n        for (uint i = mined; i < end; i++) {\r\n            totalRatio += (array[i].shares*ratio_multiplier)/getDayShares(array[i]._days, _version);\r\n            totalShares += array[i].shares;\r\n            totalDays ++;\r\n            if(_version >=4){\r\n                minedByWalletNbr[_user] ++;\r\n            }else{\r\n                minedByNftNbr[_tkn] ++;\r\n            } \r\n        }\r\n        IAirdrop(airdropCon).claimTokens(_user, uint32(totalRatio));\r\n        emit claimEvent(_version, _user, _tkn, totalShares, totalDays, totalRatio);\r\n        _totalShares = totalShares;\r\n        _totalDays = totalDays;\r\n        _totalRatio = totalRatio;\r\n    }\r\n    \r\n    //ADMIN\r\n    function getMinedByNft(uint _tkn, uint _day) public view returns (bool){return minedByNft[_tkn][_day];}\r\n    function getMinedByWallet(address _user, uint _day) public view returns (bool){return minedByWallet[_user][_day];}\r\n    function getMinedByNftNbr(uint _tkn) public view returns (uint){return minedByNftNbr[_tkn];}\r\n    function getMinedByWalletNbr(address _user) public view returns (uint){return minedByWalletNbr[_user];}\r\n    function ownerOfToken(uint _tkn) public view returns(address){\r\n        (address _owner,,,,,) = IStake(stakeCon).ownerOf(_tkn);\r\n        return _owner;\r\n    }\r\n    //ADMIN\r\n    function setMaxBatch(uint _v) public onlyOwner{maxCliamsBatch = _v;}\r\n    function setMiningFees(uint _v) public onlyOwner{miningFees = _v;}\r\n    function setMiningContract(uint _version, address _addr) public onlyOwner{mining_contracts[_version] = _addr;}\r\n    function setAirdropContract(address _addr) public onlyOwner{airdropCon = _addr;}\r\n    function setStakeContract(address _addr) public onlyOwner{stakeCon = _addr;}\r\n    //\r\n    \r\n    //TRANSFER\r\n    // ALLOW\r\n    function pause() public onlyOwner {_pause();}\r\n    function unpause() public onlyOwner {_unpause();}\r\n    modifier onlyAllowedContract (){\r\n        require(allowedContracts[msg.sender] == true);\r\n        _;\r\n    }\r\n    function allowContract ( address _addr ) onlyOwner public {allowedContracts[_addr ] = true;}    \r\n    function disallowContract ( address _addr ) onlyOwner public {allowedContracts[_addr ] = false;}\r\n    // ALLOW\r\n}\r\n\r\n\r\ninterface IMining {\r\n    struct shareDataMining {address _owner;uint shares;uint32 day;uint32 month;uint32 year;uint _days;}\r\n    struct submittedDataMining {uint shares;uint _days;uint32 day;uint32 month;uint32 year;}\r\n    //V4\r\n    function getPendingClaimsNbr (address _owner) external view returns (uint);\r\n    function getPendingClaims (address _owner) external view returns (submittedDataMining[] memory _array);\r\n    function claim (string memory _tkn, address _owner) payable external returns ( bool );\r\n    //\r\n    function getPendingClaimsNbr (uint tokenId) external view returns (uint);\r\n    function getPendingClaims (uint tokenId) external view returns (submittedDataMining[] memory _array);\r\n    function claim (string memory _tkn, uint256 tokenId) payable external returns ( bool );\r\n    //\r\n    function getDayShares (uint _day) external view returns (uint);\r\n}\r\ninterface IAirdrop {\r\n    function claimTokens(address addr, uint32 ratio) external returns (bool);\r\n}\r\ninterface IStake {\r\n    function ownerOf (uint256 tokenId) external view returns (address _owner, address _int_wallet ,uint32 _day, uint32 _month, uint32 _year, uint32 _days);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tkn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalRatio\",\"type\":\"uint256\"}],\"name\":\"claimEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropCon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"allowContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tkn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_version_\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"disallowContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"getDayShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tkn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getMinedByNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tkn\",\"type\":\"uint256\"}],\"name\":\"getMinedByNftNbr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getMinedByWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMinedByWalletNbr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tkn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"getPendingClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"day\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"month\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"year\",\"type\":\"uint32\"}],\"internalType\":\"struct IMining.submittedDataMining[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tkn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"getPendingClaimsNbr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCliamsBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minedByNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minedByNftNbr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minedByWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minedByWalletNbr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mining_contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tkn\",\"type\":\"uint256\"}],\"name\":\"ownerOfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAirdropContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setMaxBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setMiningFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setStakeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeCon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"version_allowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MiningReconcile", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c837ef874132c8e820984b9c9125131ffd3f9bff096e56db649bb6ec1ba77df0"}