{"SourceCode": "// Dependency file: src/interfaces/IAxelarGateway.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity 0.8.9;\r\n\r\ninterface IAxelarGateway {\r\n    /**********\\\r\n    |* Events *|\r\n    \\**********/\r\n\r\n    event TokenSent(\r\n        address indexed sender,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        string symbol,\r\n        uint256 amount\r\n    );\r\n\r\n    event ContractCall(\r\n        address indexed sender,\r\n        string destinationChain,\r\n        string destinationContractAddress,\r\n        bytes32 indexed payloadHash,\r\n        bytes payload\r\n    );\r\n\r\n    event ContractCallWithToken(\r\n        address indexed sender,\r\n        string destinationChain,\r\n        string destinationContractAddress,\r\n        bytes32 indexed payloadHash,\r\n        bytes payload,\r\n        string symbol,\r\n        uint256 amount\r\n    );\r\n\r\n    event Executed(bytes32 indexed commandId);\r\n\r\n    event TokenDeployed(string symbol, address tokenAddresses);\r\n\r\n    event ContractCallApproved(\r\n        bytes32 indexed commandId,\r\n        string sourceChain,\r\n        string sourceAddress,\r\n        address indexed contractAddress,\r\n        bytes32 indexed payloadHash,\r\n        bytes32 sourceTxHash,\r\n        uint256 sourceEventIndex\r\n    );\r\n\r\n    event ContractCallApprovedWithMint(\r\n        bytes32 indexed commandId,\r\n        string sourceChain,\r\n        string sourceAddress,\r\n        address indexed contractAddress,\r\n        bytes32 indexed payloadHash,\r\n        string symbol,\r\n        uint256 amount,\r\n        bytes32 sourceTxHash,\r\n        uint256 sourceEventIndex\r\n    );\r\n\r\n    event TokenFrozen(string symbol);\r\n\r\n    event TokenUnfrozen(string symbol);\r\n\r\n    event AllTokensFrozen();\r\n\r\n    event AllTokensUnfrozen();\r\n\r\n    event AccountBlacklisted(address indexed account);\r\n\r\n    event AccountWhitelisted(address indexed account);\r\n\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /******************\\\r\n    |* Public Methods *|\r\n    \\******************/\r\n\r\n    function sendToken(\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function callContract(\r\n        string calldata destinationChain,\r\n        string calldata contractAddress,\r\n        bytes calldata payload\r\n    ) external;\r\n\r\n    function callContractWithToken(\r\n        string calldata destinationChain,\r\n        string calldata contractAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function isContractCallApproved(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        address contractAddress,\r\n        bytes32 payloadHash\r\n    ) external view returns (bool);\r\n\r\n    function isContractCallAndMintApproved(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        address contractAddress,\r\n        bytes32 payloadHash,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    function validateContractCall(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes32 payloadHash\r\n    ) external returns (bool);\r\n\r\n    function validateContractCallAndMint(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes32 payloadHash,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /***********\\\r\n    |* Getters *|\r\n    \\***********/\r\n\r\n    function allTokensFrozen() external view returns (bool);\r\n\r\n    function implementation() external view returns (address);\r\n\r\n    function tokenAddresses(string memory symbol) external view returns (address);\r\n\r\n    function tokenFrozen(string memory symbol) external view returns (bool);\r\n\r\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\r\n\r\n    function adminEpoch() external view returns (uint256);\r\n\r\n    function adminThreshold(uint256 epoch) external view returns (uint256);\r\n\r\n    function admins(uint256 epoch) external view returns (address[] memory);\r\n\r\n    /*******************\\\r\n    |* Admin Functions *|\r\n    \\*******************/\r\n\r\n    function freezeToken(string calldata symbol) external;\r\n\r\n    function unfreezeToken(string calldata symbol) external;\r\n\r\n    function freezeAllTokens() external;\r\n\r\n    function unfreezeAllTokens() external;\r\n\r\n    function upgrade(\r\n        address newImplementation,\r\n        bytes32 newImplementationCodeHash,\r\n        bytes calldata setupParams\r\n    ) external;\r\n\r\n    /**********************\\\r\n    |* External Functions *|\r\n    \\**********************/\r\n\r\n    function setup(bytes calldata params) external;\r\n\r\n    function execute(bytes calldata input) external;\r\n}\r\n\r\n\r\n// Dependency file: src/EternalStorage.sol\r\n\r\n\r\n// pragma solidity 0.8.9;\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n    mapping(bytes32 => uint256) private _uintStorage;\r\n    mapping(bytes32 => string) private _stringStorage;\r\n    mapping(bytes32 => address) private _addressStorage;\r\n    mapping(bytes32 => bytes) private _bytesStorage;\r\n    mapping(bytes32 => bool) private _boolStorage;\r\n    mapping(bytes32 => int256) private _intStorage;\r\n\r\n    // *** Getter Methods ***\r\n    function getUint(bytes32 key) public view returns (uint256) {\r\n        return _uintStorage[key];\r\n    }\r\n\r\n    function getString(bytes32 key) public view returns (string memory) {\r\n        return _stringStorage[key];\r\n    }\r\n\r\n    function getAddress(bytes32 key) public view returns (address) {\r\n        return _addressStorage[key];\r\n    }\r\n\r\n    function getBytes(bytes32 key) public view returns (bytes memory) {\r\n        return _bytesStorage[key];\r\n    }\r\n\r\n    function getBool(bytes32 key) public view returns (bool) {\r\n        return _boolStorage[key];\r\n    }\r\n\r\n    function getInt(bytes32 key) public view returns (int256) {\r\n        return _intStorage[key];\r\n    }\r\n\r\n    // *** Setter Methods ***\r\n    function _setUint(bytes32 key, uint256 value) internal {\r\n        _uintStorage[key] = value;\r\n    }\r\n\r\n    function _setString(bytes32 key, string memory value) internal {\r\n        _stringStorage[key] = value;\r\n    }\r\n\r\n    function _setAddress(bytes32 key, address value) internal {\r\n        _addressStorage[key] = value;\r\n    }\r\n\r\n    function _setBytes(bytes32 key, bytes memory value) internal {\r\n        _bytesStorage[key] = value;\r\n    }\r\n\r\n    function _setBool(bytes32 key, bool value) internal {\r\n        _boolStorage[key] = value;\r\n    }\r\n\r\n    function _setInt(bytes32 key, int256 value) internal {\r\n        _intStorage[key] = value;\r\n    }\r\n\r\n    // *** Delete Methods ***\r\n    function _deleteUint(bytes32 key) internal {\r\n        delete _uintStorage[key];\r\n    }\r\n\r\n    function _deleteString(bytes32 key) internal {\r\n        delete _stringStorage[key];\r\n    }\r\n\r\n    function _deleteAddress(bytes32 key) internal {\r\n        delete _addressStorage[key];\r\n    }\r\n\r\n    function _deleteBytes(bytes32 key) internal {\r\n        delete _bytesStorage[key];\r\n    }\r\n\r\n    function _deleteBool(bytes32 key) internal {\r\n        delete _boolStorage[key];\r\n    }\r\n\r\n    function _deleteInt(bytes32 key) internal {\r\n        delete _intStorage[key];\r\n    }\r\n}\r\n\r\n\r\n// Root file: src/AxelarGatewayProxy.sol\r\n\r\n\r\npragma solidity 0.8.9;\r\n\r\n// import { IAxelarGateway } from 'src/interfaces/IAxelarGateway.sol';\r\n\r\n// import { EternalStorage } from 'src/EternalStorage.sol';\r\n\r\ncontract AxelarGatewayProxy is EternalStorage {\r\n    error InvalidImplementation();\r\n    error SetupFailed();\r\n\r\n    /// @dev Storage slot with the address of the current factory. `keccak256('eip1967.proxy.implementation') - 1`.\r\n    bytes32 internal constant KEY_IMPLEMENTATION =\r\n        bytes32(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc);\r\n\r\n    constructor(address gatewayImplementation, bytes memory params) {\r\n        _setAddress(KEY_IMPLEMENTATION, gatewayImplementation);\r\n\r\n        if (gatewayImplementation.code.length == 0) revert InvalidImplementation();\r\n\r\n        (bool success, ) = gatewayImplementation.delegatecall(\r\n            abi.encodeWithSelector(IAxelarGateway.setup.selector, params)\r\n        );\r\n\r\n        if (!success) revert SetupFailed();\r\n    }\r\n\r\n    function setup(bytes calldata params) external {}\r\n\r\n    fallback() external payable {\r\n        address implementation = getAddress(KEY_IMPLEMENTATION);\r\n\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        revert('NO_ETHER');\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gatewayImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetupFailed\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AxelarGatewayProxy", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000004f4495243837681061c4743b74b3eedf548d56a5000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006a000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000000080000000000000000000000003f5876a2b06e54949ab106651ab6694d0289b2b40000000000000000000000009256fd872118ed3a97754b0fb42c15015d17e0cc0000000000000000000000005c8ef9ca7b43c93ac4a146bef77fafbc7d3e69b70000000000000000000000001486157d505c7f7e546ad00e3e2eee25bf665c9b0000000000000000000000002ec991b5c0b742abd9d2ea31fe6c14a85e91c821000000000000000000000000f505462a29e36e26f25ef0175ca1ecba09cc118f000000000000000000000000027c1882b975e2cd771ae068b0389fa38b9dda7300000000000000000000000030932ac1f0477fbd63e4c5be1928f367a58a45a100000000000000000000000000000000000000000000000000000000000000100000000000000000000000000e4a6cdc2b6cf3d02a00d3b372377d30fc8b028200000000000000000000000008a5329dd815f87b69e46d9f1ea4e12a0346c4010000000000000000000000000a91a920bbc81fab977a809f0bd1c4a6781611160000000000000000000000003486178cd8c440576f0619d6c5097cd3063a0e8c000000000000000000000000dfcb456a14782edd2a2c948405c10460118f032600000000000000000000000014ef4eb9ed3d7440526c4b8be855bd114ef1cf93000000000000000000000000ee2fadc8e16577b34ff6d0d68df0e815778e166f00000000000000000000000031b92bb58d414855852300a8b697caa704cec0c100000000000000000000000050918130c6cf7ab2e2a29eeabef4cc73bfa50849000000000000000000000000ae58b14c545d02f63f0f5e086619f8715c030690000000000000000000000000af5f8b43190371e127d0d5cee0d0d2f9cd5945e900000000000000000000000073a9bc13e2c67c425423f51c0c969922aa010c9f0000000000000000000000007eb6bd3cccce521cd7979a420961a0a725c74d3f000000000000000000000000b366aeccef24372ffdbce3a0de89ad5635fbc815000000000000000000000000dddbe7765ef7e2e034bf27d3621dc6866e785cec000000000000000000000000e8ce9e79b5db4811abcdfe0190b283df7719807a00000000000000000000000000000000000000000000000000000000000000140000000000000000000000004c515e0c2fa8925095b991a0aef902c1751187550000000000000000000000009ae284f3f32746d9fc9b0e55a9bbc719e870e37b000000000000000000000000e87d96daf902c1840a056f16375bfc6be075386d0000000000000000000000004db5fd52b0e03690104f47fe6719ce61ec2956cc000000000000000000000000bbd364e8f38578f1db359c27714b60e65ac0a14e00000000000000000000000026047f7095dfc936e5e773cf6800fdae05ef2a35000000000000000000000000c2946e387b48c5a51ba515cedb484c6a723cd330000000000000000000000000fee015be8e80e9d3f706b2f4dd0d200aea247edc000000000000000000000000c0236b720f321d9f132cd0203c5459dc862ee9390000000000000000000000001966cc74833797b296c967c571f9ba4fde87a44a000000000000000000000000d2b8c7f3d70e414393be37133bf80e027854159c000000000000000000000000833cefbb16e81ccef2c73a26eb1114148fc03edb00000000000000000000000049fff061d9a5acd1a5ba5c0f326a5e7afb453de80000000000000000000000001f6d7885bbf6ccbb87d68f762dabaf8f13c75f7d000000000000000000000000d2e5c4243f8867af41a5f902f3e8ebea4074135c0000000000000000000000001cae8f01fb406e2b377a44ed91473aee3325a2eb000000000000000000000000e055db700fff43c9ff23d15af8a6a531d6ed612b0000000000000000000000003303d811ea3da99dacf6b72392c44479d1d3a7b10000000000000000000000001b276bf0007bc2686d7e1b095cc038966466764900000000000000000000000012508d1aa6b82f9f4a0ea5ed60bf8ed9ac92212b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x99b5fa03a5ea4315725c43346e55a6a6fbd94098", "SwarmSource": "ipfs://5a355cec3230a9343989e15d12d9f74b674d5c2ef1048d71d471266ecbc89bcb"}