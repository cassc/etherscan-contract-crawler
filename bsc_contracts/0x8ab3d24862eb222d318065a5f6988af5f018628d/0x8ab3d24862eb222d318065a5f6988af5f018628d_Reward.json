{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Reward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\n\\r\\ncontract Reward is Ownable {\\r\\n  address public deployer;\\r\\n  uint256 public totalDeposited;\\r\\n\\r\\n  uint256 public constant YEAR_SECOND = 31577600;\\r\\n  uint256 public rewardRate;\\r\\n\\r\\n  IERC20 public rewardToken;\\r\\n\\r\\n  mapping(address => uint256) public stakingBalance;\\r\\n  mapping(address => uint256) public startTime;\\r\\n  mapping(address => uint256) public userReward;\\r\\n  mapping(address => uint256) public userWithdrawn;\\r\\n\\r\\n  event RewardsWithdrawal(address indexed to, uint256 amount);\\r\\n  event LogWithdrawToken(address token, address account, uint256 amount);\\r\\n  event LogUpdateDeployerAddress(address newDeployer);\\r\\n  event Deposit(address user, uint256 amount);\\r\\n  event AddStaker(address indexed staker, uint256 amount, uint256 startTime);\\r\\n  event UpdateStaker(address indexed staker, uint256 amount, uint256 startTime);\\r\\n\\r\\n  constructor(address _rewardToken, uint256 _rewardRate) {\\r\\n    require(_rewardToken != address(0), 'RewardsToken Address 0 validation');\\r\\n    rewardRate = _rewardRate;\\r\\n    rewardToken = IERC20(_rewardToken);\\r\\n    deployer = _msgSender();\\r\\n  }\\r\\n\\r\\n  modifier onlyDeployer() {\\r\\n    require(\\r\\n      deployer == _msgSender() || owner() == _msgSender(),\\r\\n      'Caller is not the deployer'\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function _calculateRewards(address _staker) internal view returns (uint256) {\\r\\n    uint256 timeDiff = block.timestamp - startTime[_staker];\\r\\n    uint256 reward = stakingBalance[_staker] * rewardRate * timeDiff;\\r\\n    return reward / (YEAR_SECOND * 100);\\r\\n  }\\r\\n\\r\\n  function getTotalRewards(address _staker) public view returns (uint256) {\\r\\n    uint256 reward = _calculateRewards(_staker);\\r\\n    uint256 total = userReward[_staker] + reward;\\r\\n    return total;\\r\\n  }\\r\\n\\r\\n  function withdrawRewards() external {\\r\\n    address _staker = _msgSender();\\r\\n    uint256 toWithdraw = _calculateRewards(_staker);\\r\\n    uint256 total = userReward[_staker] + toWithdraw;\\r\\n\\r\\n    // this is only for first time user withdraw\\r\\n    // after this, userReward will be 0\\r\\n    // and user withdrawn will be also 0\\r\\n\\r\\n    require(total > userWithdrawn[_staker], 'No rewards to withdraw');\\r\\n\\r\\n    require(\\r\\n      toWithdraw <= rewardToken.balanceOf(address(this)),\\r\\n      'Incufficient funds'\\r\\n    );\\r\\n\\r\\n    require(toWithdraw > 0, 'Incufficient rewards balance');\\r\\n    startTime[_staker] = block.timestamp;\\r\\n    userReward[_staker] = 0;\\r\\n    userWithdrawn[_staker] = 0;\\r\\n    rewardToken.transfer(_staker, total);\\r\\n    emit RewardsWithdrawal(_staker, total);\\r\\n  }\\r\\n\\r\\n  function withdrawToken(\\r\\n    address token,\\r\\n    address account,\\r\\n    uint256 amount\\r\\n  ) external onlyDeployer {\\r\\n    require(amount <= IERC20(token).balanceOf(account), 'Incufficient funds');\\r\\n    if (token == address(rewardToken)) {\\r\\n      require(amount <= totalDeposited, 'Incufficient funds');\\r\\n      totalDeposited -= amount;\\r\\n    }\\r\\n    IERC20(token).transfer(account, amount);\\r\\n    emit LogWithdrawToken(token, account, amount);\\r\\n  }\\r\\n\\r\\n  function updateDeployerAddress(address newDeployer) external onlyDeployer {\\r\\n    require(deployer != newDeployer, 'Already set to this value');\\r\\n    require(newDeployer != address(0), 'Address 0 validation');\\r\\n    deployer = newDeployer;\\r\\n    emit LogUpdateDeployerAddress(newDeployer);\\r\\n  }\\r\\n\\r\\n  function deposit(uint256 amount) external onlyDeployer {\\r\\n    require(amount > 0, 'Cant be 0');\\r\\n    require(\\r\\n      rewardToken.allowance(msg.sender, address(this)) >= amount,\\r\\n      'Insufficient allowance.'\\r\\n    );\\r\\n\\r\\n    totalDeposited += amount;\\r\\n    rewardToken.transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n    emit Deposit(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  function _addStaker(\\r\\n    address _staker,\\r\\n    uint256 _amount,\\r\\n    uint256 _userReward,\\r\\n    uint256 _userWithdrawn,\\r\\n    uint256 _startTime\\r\\n  ) internal {\\r\\n    require(_startTime > 0 || _startTime <= block.timestamp, 'invalid time');\\r\\n    stakingBalance[_staker] = _amount;\\r\\n    startTime[_staker] = _startTime;\\r\\n    userReward[_staker] = _userReward;\\r\\n    userWithdrawn[_staker] = _userWithdrawn;\\r\\n    emit AddStaker(_staker, _amount, _startTime);\\r\\n  }\\r\\n\\r\\n  function addStaker(\\r\\n    address[] memory _stakers,\\r\\n    uint256[] memory _amounts,\\r\\n    uint256[] memory _userReward,\\r\\n    uint256[] memory _userWithdrawn,\\r\\n    uint256[] memory _startTimes\\r\\n  ) external onlyDeployer {\\r\\n    require(\\r\\n      _stakers.length == _amounts.length &&\\r\\n        _stakers.length == _userReward.length &&\\r\\n        _stakers.length == _userWithdrawn.length &&\\r\\n        _stakers.length == _startTimes.length,\\r\\n      'Array length mismatch'\\r\\n    );\\r\\n    for (uint256 i = 0; i < _stakers.length; i++) {\\r\\n      _addStaker(\\r\\n        _stakers[i],\\r\\n        _amounts[i],\\r\\n        _userReward[i],\\r\\n        _userWithdrawn[i],\\r\\n        _startTimes[i]\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function updateStaker(\\r\\n    address _staker,\\r\\n    uint256 _amount,\\r\\n    uint256 _userReward,\\r\\n    uint256 _userWithdrawn,\\r\\n    uint256 _startTime\\r\\n  ) external onlyDeployer {\\r\\n    require(_startTime > 0 || _startTime <= block.timestamp, 'invalid time');\\r\\n    stakingBalance[_staker] = _amount;\\r\\n    userReward[_staker] = _userReward;\\r\\n    userWithdrawn[_staker] = _userWithdrawn;\\r\\n    startTime[_staker] = _startTime;\\r\\n    emit UpdateStaker(_staker, _amount, _startTime);\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"AddStaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDeployer\",\"type\":\"address\"}],\"name\":\"LogUpdateDeployerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"UpdateStaker\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"YEAR_SECOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userReward\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userWithdrawn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTimes\",\"type\":\"uint256[]\"}],\"name\":\"addStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDeployer\",\"type\":\"address\"}],\"name\":\"updateDeployerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Reward", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dd534480782ecf53e4a5257b0f3c37702a0bad610000000000000000000000000000000000000000000000000000000000000008", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}