{"SourceCode": "pragma solidity ^0.8.0; \r\n//SPDX-License-Identifier: UNLICENSED\r\n    library SafeMath { \r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0; \r\n            }\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c; \r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n             uint256 c = a / b;\r\n             return c; \r\n        }\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b; \r\n        }\r\n\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c; \r\n        }\r\n    }\r\n\r\n    interface Erc20Token {//konwnsec//ERC20 \u63a5\u53e3\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address _who) external view returns (uint256);\r\n        function transfer(address _to, uint256 _value) external;\r\n        function allowance(address _owner, address _spender) external view returns (uint256);\r\n        function transferFrom(address _from, address _to, uint256 _value) external;\r\n        function approve(address _spender, uint256 _value) external; \r\n        function burnFrom(address _from, uint256 _value) external; \r\n        function mint(uint256 amount) external  returns (bool);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n    \r\n \r\n\r\n\r\n\r\n    contract Base {\r\n        using SafeMath for uint;\r\n\r\n\r\n        Erc20Token constant internal _USDTIns = Erc20Token(0xA469aBe4Fb1a748f4D3B5e68C79b488685d36C01); \r\n        Erc20Token constant internal _LRIns = Erc20Token(0x18574784a47cA034fdc146C57Ae13D86AB1Ad4C3); \r\n\r\n        address  _owner;\r\n        address  _operator;\r\n\r\n   \r\n        \r\n        modifier onlyOwner() {\r\n            require(msg.sender == _owner, \"Permission denied\"); _;\r\n        }\r\n     \r\n\r\n  \r\n        function transferOwnership(address newOwner) public onlyOwner {\r\n            require(newOwner != address(0));\r\n            _owner = newOwner;\r\n        }\r\n\r\n \r\n        receive() external payable {}  \r\n}\r\n\r\n\r\n\r\n \r\n\r\ncontract DataPlayer is Base{\r\n       using SafeMath for uint;\r\n      \r\n\r\n    struct Player{\r\n            uint256 id; \r\n            address addr; \r\n            address superior; \r\n        \r\n    }\r\n    mapping(address => mapping(uint256 => uint256)) public PlayerPackage; \r\n\r\n\r\n    mapping(uint256 => uint256)  public PackagePrice;\r\n\r\n\r\n    mapping(address => bool)  public isNode;\r\n\r\n\r\n\r\n\r\n\r\n\r\n    uint256 public LimitJ = 20; \r\n    uint256 public LimitY = 40; \r\n    uint256 public LimitT = 100; \r\n    uint256 public PlayerCount; \r\n\r\n \r\n \r\n    mapping(address => Player) public _player; \r\n\r\n\r\n    address public ProjectPartyWallet = 0xE685af29b4352c2658C50CE4d49B02F006eAb148; \r\n    address public LP = 0x7DB94316a60A0F577448bd3d7CCc44564d3b78B0; \r\n \r\n \r\n \r\n  \r\n\r\n \r\n}\r\n\r\n\r\n\r\n\r\n \r\ncontract RUNPackage is DataPlayer {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint256) public _RunAddrMap; \r\n    mapping(uint256 => uint256) public Price;\r\n    constructor()\r\n     {\r\n        _owner = msg.sender; \r\n        _operator = msg.sender; \r\n        Price[3] = 10000e18;\r\n        Price[2] = 5000e18;\r\n        Price[1] = 1500e18;\r\n    }\r\n \r\n\r\n      function setPrice(uint256 price,uint256 PackageType  ) public onlyOwner  { \r\n        Price[PackageType] = price;\r\n    }\r\n\r\n    function setaddress(address addr ) public onlyOwner  { \r\n        ProjectPartyWallet = addr;\r\n    }\r\n\r\n  function setLP(address addr ) public onlyOwner  { \r\n        LP = addr;\r\n    }\r\n\r\n  function  PlayeRegistry(  address superior) external {\r\n        uint256 id = _RunAddrMap[msg.sender];\r\n        if (id == 0) {\r\n            PlayerCount++;\r\n            _RunAddrMap[msg.sender] = PlayerCount;\r\n            _player[msg.sender].id  = PlayerCount;\r\n            _player[msg.sender].addr = msg.sender;\r\n            id = _RunAddrMap[superior];\r\n            if (id > 0 && superior != msg.sender) {\r\n                _player[msg.sender].superior = superior;\r\n             }\r\n        }\r\n    }\r\n\r\n\r\n \r\n// \u8d2d\u4e70\u5957\u9910\r\n    function BUYnode(uint256 PackageType ,address superior ) public{\r\n\r\n         \r\n        require(!isNode[msg.sender], \"isNode\");\r\n\r\n\r\n        require(PackageType > 0 && PackageType <4, \"out\");  \r\n\r\n\r\n        if(PackageType == 3){\r\n            require(LimitJ > 0, \"Package sell out\");  \r\n            LimitJ = LimitJ.sub(1);\r\n        }else if(PackageType == 2){\r\n            require(LimitY > 0, \"Package sell out\");  \r\n            LimitY = LimitY.sub(1);\r\n        }else if(PackageType == 1){\r\n            require(LimitT > 0, \"Package sell out\");  \r\n            LimitT = LimitT.sub(1);\r\n        }\r\n        uint256  TU = Price[PackageType].div(20);\r\n        _USDTIns.transferFrom(msg.sender, superior,TU);\r\n        _USDTIns.transferFrom(msg.sender, ProjectPartyWallet,Price[PackageType].sub(TU));\r\n        isNode[msg.sender] = true;\r\n    }\r\n\r\n\r\n\r\n    function Withdraw(uint256 balance ,address Player ) public  onlyOwner{\r\n        _LRIns.transferFrom(ProjectPartyWallet, Player,balance);\r\n    }\r\n\r\n\r\n\r\n    function get_Price() public view returns(uint256) {\r\n\r\n        uint256 usdtBalance = _USDTIns.balanceOf(address(LP));\r\n        uint256 SpireBalance = _LRIns.balanceOf(address(LP));\r\n        if(usdtBalance == 0){\r\n             return  0;\r\n        }else{\r\n            return  SpireBalance.mul(10000000).div(usdtBalance);\r\n        }\r\n    }\r\n\r\n\r\n    function get_l( ) public view returns(uint256) {\r\n         uint256 OutAddressBalance = _LRIns.balanceOf(ProjectPartyWallet);\r\n         uint256 AllBalance = _LRIns.totalSupply();\r\n        return  (AllBalance -  OutAddressBalance );\r\n\r\n    }\r\n\r\n    function get_NodePrice() public view  returns(uint256,uint256,uint256) { \r\n        return (Price[3],Price[2],Price[1]);\r\n    }\r\n\r\n\r\n     function get_ISNode(address Player) public view  returns(bool) { \r\n        return isNode[Player];\r\n    }\r\n\r\n\r\n    function get_dEaDAddressBalance( ) public view returns(uint256) {\r\n        uint256 dEaDAddressBalance = _LRIns.balanceOf(address(0x000000000000000000000000000000000000dEaD));\r\n        return dEaDAddressBalance;\r\n    }\r\n\r\n    function WithdrawFZ(uint256 balance) public {\r\n  \r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"PackageType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"}],\"name\":\"BUYnode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LimitJ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LimitT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LimitY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PackagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"}],\"name\":\"PlayeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PlayerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PlayerPackage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ProjectPartyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Player\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawFZ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_RunAddrMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_player\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Player\",\"type\":\"address\"}],\"name\":\"get_ISNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_NodePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_Price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_dEaDAddressBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_l\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PackageType\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RUNPackage", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e73e113003bc5a98bb25c0e4b73040eadb905cac53527c37eb71f157d2fdbae"}