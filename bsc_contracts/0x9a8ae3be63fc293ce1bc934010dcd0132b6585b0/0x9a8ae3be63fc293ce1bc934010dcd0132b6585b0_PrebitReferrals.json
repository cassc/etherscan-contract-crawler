{"SourceCode": "{\"Ownable.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"},\"Referral.sol\":{\"content\":\"//Refferal Contract Prebit - Beta Version 0.1\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract PrebitReferrals is Ownable {\\n    ///\\n    address[] public allowedContracts;\\n\\n    modifier onlyAllowedContract() {\\n        require(\\n            isContractAllowed(msg.sender),\\n            \\\"Caller is not an allowed contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function addAllowedContract(address _contractAddress) public onlyOwner {\\n        allowedContracts.push(_contractAddress);\\n    }\\n\\n    function removeAllowedContract(address _contractAddress) public onlyOwner {\\n        for (uint256 i = 0; i \\u003c allowedContracts.length; i++) {\\n            if (allowedContracts[i] == _contractAddress) {\\n                // Remove the contract address from the array\\n                allowedContracts[i] = allowedContracts[\\n                    allowedContracts.length - 1\\n                ];\\n                allowedContracts.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function isContractAllowed(address _contractAddress)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i \\u003c allowedContracts.length; i++) {\\n            if (allowedContracts[i] == _contractAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    //Patents ///////////////\\n\\n    struct Referrals {\\n        uint256 code;\\n        address parent;\\n        address tparent;\\n        bool valid;\\n    }\\n\\n    mapping(address =\\u003e Referrals) public userReferralCode; // Mapping to track user\\u0027s referral codes\\n    mapping(uint256 =\\u003e address) public referralCodeToAddress; // Mapping to track used referral codes\\n    event ReferralCodeGenerated(address indexed user, uint256 referralCode);\\n\\n    function generateReferralCode(uint256 _parentCode) public {\\n        if (!userReferralCode[msg.sender].valid) {\\n            uint256 referralCode = uint256(\\n                keccak256(abi.encodePacked(msg.sender, block.timestamp))\\n            ) % 1000000;\\n            while (referralCodeToAddress[referralCode] != address(0)) {\\n                referralCode = (referralCode + 1) % 1000000;\\n            }\\n\\n            address parentAddress;\\n            address tparentAddress;\\n            if (\\n                _parentCode \\u003e 0 \\u0026\\u0026\\n                referralCodeToAddress[_parentCode] != address(0)\\n            ) {\\n                parentAddress = referralCodeToAddress[_parentCode];\\n\\n                if (userReferralCode[parentAddress].parent != address(0)) {\\n                    tparentAddress = userReferralCode[parentAddress].parent;\\n                } else {\\n                    tparentAddress = address(0);\\n                }\\n            } else {\\n                parentAddress = address(0);\\n                tparentAddress = address(0);\\n            }\\n\\n            userReferralCode[msg.sender] = Referrals(\\n                referralCode,\\n                parentAddress,\\n                tparentAddress,\\n                true\\n            );\\n            referralCodeToAddress[referralCode] = msg.sender;\\n\\n            emit ReferralCodeGenerated(msg.sender, referralCode);\\n        }\\n    }\\n\\n    function generateReferralCodeWithContract(\\n        uint256 _parentCode,\\n        address _user\\n    ) public onlyAllowedContract {\\n        if (!userReferralCode[_user].valid) {\\n            uint256 referralCode = uint256(\\n                keccak256(abi.encodePacked(_user, block.timestamp))\\n            ) % 1000000;\\n            while (referralCodeToAddress[referralCode] != address(0)) {\\n                referralCode = (referralCode + 1) % 1000000;\\n            }\\n\\n            address parentAddress;\\n            address tparentAddress;\\n            if (\\n                _parentCode \\u003e 0 \\u0026\\u0026\\n                referralCodeToAddress[_parentCode] != address(0)\\n            ) {\\n                parentAddress = referralCodeToAddress[_parentCode];\\n\\n                if (userReferralCode[parentAddress].parent != address(0)) {\\n                    tparentAddress = userReferralCode[parentAddress].parent;\\n                } else {\\n                    tparentAddress = address(0);\\n                }\\n            } else {\\n                parentAddress = address(0);\\n                tparentAddress = address(0);\\n            }\\n\\n            userReferralCode[_user] = Referrals(\\n                referralCode,\\n                parentAddress,\\n                tparentAddress,\\n                true\\n            );\\n            referralCodeToAddress[referralCode] = _user;\\n\\n            emit ReferralCodeGenerated(_user, referralCode);\\n        }\\n    }\\n\\n    function userReferralCodeCheck(address _user) public view returns (bool) {\\n        if (userReferralCode[_user].valid) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function userReferralCodeToAddress(uint256 _code)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return referralCodeToAddress[_code];\\n    }\\n\\n    function getUserTparent(address _user) public view returns (address) {\\n        return userReferralCode[_user].tparent;\\n    }\\n\\n    function getUserParent(address _user) public view returns (address) {\\n        return userReferralCode[_user].parent;\\n    }\\n   \\n}\\n\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"}],\"name\":\"ReferralCodeGenerated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentCode\",\"type\":\"uint256\"}],\"name\":\"generateReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_parentCode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"generateReferralCodeWithContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTparent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"isContractAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralCodeToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"removeAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReferralCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tparent\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userReferralCodeCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"userReferralCodeToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrebitReferrals", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aeb970b3b18a487f53b25c3e55e742d0a4f3dc4ef07bd44c4c0439a47f72d2ea"}