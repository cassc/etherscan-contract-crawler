{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.8;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Owner {\r\n\r\n    address private owner;\r\n\r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n\r\n    // modifier to check if caller is owner\r\n    modifier isOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address\r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IERC1155{\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ncontract Marketplace is Owner, ReentrancyGuard {\r\n\r\n    address public payTokenContract;\r\n\r\n    uint256 public sellFeePercentage; // example: 500 = 5%\r\n    address public walletReceivingSellfee;\r\n\r\n    bool public lockNewSellOrders;\r\n    uint256 public totalOrders;\r\n    mapping(uint256 => SellOrder) public marketList;\r\n    mapping(address => uint256[]) public mySellOrders;\r\n\r\n    struct SellOrder {\r\n        uint256 token_id;\r\n        uint256 price;\r\n        address seller;\r\n        bool status; // false:closed, true: open\r\n        address buyer;\r\n        address contractAddress; // nft contract \r\n    }\r\n\r\n    // Events\r\n    event OrderAdded(\r\n        uint256 order_id,\r\n        uint256 indexed token_id,\r\n        address indexed seller,\r\n        uint256 price,\r\n        address contractAddress\r\n    );\r\n    event OrderSuccessful(\r\n        uint256 order_id,\r\n        uint256 indexed token_id,\r\n        address indexed seller,\r\n        uint256 price,\r\n        address indexed buyer,\r\n        address contractAddress\r\n    );\r\n    event OrderCanceled(\r\n        uint256 order_id,\r\n        uint256 indexed token_id,\r\n        address indexed seller,\r\n        uint256 price,\r\n        address contractAddress\r\n    );\r\n    event SetSellFee(uint256 oldValue, uint256 newValue);\r\n\r\n    constructor(address _walletReceivingSellfee, uint256 _sellFeePercentage, address _payTokenContract) {\r\n        setFeeWallets(_walletReceivingSellfee);\r\n        modifySellFeePercentage(_sellFeePercentage);\r\n        payTokenContract = _payTokenContract;\r\n    }\r\n\r\n    function setFeeWallets(address _walletReceivingSellfee) public isOwner {\r\n        walletReceivingSellfee = _walletReceivingSellfee;\r\n    }\r\n\r\n    function modifyLockNewSellOrders(bool _newValue) external isOwner{\r\n        lockNewSellOrders = _newValue;\r\n    }\r\n\r\n    function setTotalOrders(uint256 _newValue) external isOwner{\r\n        totalOrders = _newValue;\r\n    }\r\n\r\n    function modifySellFeePercentage(uint256 _newVal) public isOwner {\r\n        require(_newVal <= 9900, \"the new value should range from 0 to 9900\");\r\n        emit SetSellFee(sellFeePercentage, _newVal);\r\n        sellFeePercentage = _newVal;\r\n    }\r\n\r\n    function getSellFee(uint256 _amount) public view returns(uint256){\r\n        return (_amount*sellFeePercentage)/(10**4);\r\n    }\r\n\r\n    function newSellOrder(uint256 _token_id, uint256 _price, address _contractAddress) external returns (uint256) {\r\n        address IERC1155Contract = _contractAddress;\r\n        require(lockNewSellOrders == false, \"cannot currently create new sales orders\");\r\n        require(IERC1155(IERC1155Contract).balanceOf(msg.sender, _token_id) >= 1, \"you don't have enough balance to sell\");\r\n        require(_price > 0, \"price must be greater than 0\");\r\n        IERC1155(IERC1155Contract).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _token_id,\r\n            1,\r\n            \"\"\r\n        );\r\n\r\n        uint256 newOrderId = totalOrders+1;\r\n        marketList[newOrderId] = SellOrder(\r\n            _token_id,\r\n            _price,\r\n            msg.sender,\r\n            true,\r\n            address(0),\r\n            _contractAddress\r\n        );\r\n        mySellOrders[msg.sender].push(newOrderId);\r\n        totalOrders = totalOrders + 1;\r\n        emit OrderAdded(newOrderId, _token_id, msg.sender, _price, _contractAddress);\r\n        return newOrderId;\r\n    }\r\n\r\n    function queryLengthOrdersOf(address _account) external view returns (uint256) {\r\n        return mySellOrders[_account].length;\r\n    }\r\n\r\n    function cancelSellOrder(uint256 _orderId) external nonReentrant{\r\n        require(marketList[_orderId].seller == msg.sender, \"you are not authorized to cancel this order\");\r\n        require(marketList[_orderId].status == true, \"this order sell already closed\");\r\n        address IERC1155Contract = marketList[_orderId].contractAddress;\r\n\r\n        marketList[_orderId].status = false;\r\n        IERC1155(IERC1155Contract).safeTransferFrom(\r\n            address(this),\r\n            marketList[_orderId].seller,\r\n            marketList[_orderId].token_id,\r\n            1,\r\n            \"\"\r\n        );\r\n        emit OrderCanceled(_orderId, marketList[_orderId].token_id, marketList[_orderId].seller, marketList[_orderId].price, marketList[_orderId].contractAddress);\r\n    }\r\n\r\n    function buy(uint256 _orderId) external nonReentrant{\r\n        require(msg.sender != address(0) && msg.sender != marketList[_orderId].seller, \"current sender is already owner of this token\");\r\n        require(marketList[_orderId].status == true, \"this sell order is closed\");\r\n        address IERC1155Contract = marketList[_orderId].contractAddress;\r\n\r\n        marketList[_orderId].status = false;\r\n        marketList[_orderId].buyer = msg.sender;\r\n\r\n        uint256 sellFee = getSellFee(marketList[_orderId].price);\r\n        uint256 sellerProfit = marketList[_orderId].price - sellFee;\r\n        IERC20(payTokenContract).transferFrom(msg.sender, marketList[_orderId].seller, sellerProfit);\r\n        IERC20(payTokenContract).transferFrom(msg.sender, walletReceivingSellfee, sellFee);\r\n\r\n        IERC1155(IERC1155Contract).safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            marketList[_orderId].token_id,\r\n            1,\r\n            \"\"\r\n        );\r\n        emit OrderSuccessful(_orderId, marketList[_orderId].token_id, marketList[_orderId].seller, marketList[_orderId].price, msg.sender, marketList[_orderId].contractAddress);\r\n    }\r\n\r\n    function reverseOrders(uint256[] memory _orders_id) external isOwner{\r\n        address IERC1155Contract;\r\n        for (uint256 i=0; i<_orders_id.length; i++) {\r\n            if(marketList[_orders_id[i]].status == true){\r\n                IERC1155Contract = marketList[_orders_id[i]].contractAddress;\r\n                marketList[_orders_id[i]].status = false;\r\n                IERC1155(IERC1155Contract).safeTransferFrom(\r\n                    address(this),\r\n                    marketList[_orders_id[i]].seller,\r\n                    marketList[_orders_id[i]].token_id,\r\n                    1,\r\n                    \"\"\r\n                );\r\n                emit OrderCanceled(_orders_id[i], marketList[_orders_id[i]].token_id, marketList[_orders_id[i]].seller, marketList[_orders_id[i]].price, marketList[_orders_id[i]].contractAddress);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletReceivingSellfee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payTokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"OrderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"order_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"OrderSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SetSellFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"cancelSellOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockNewSellOrders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"modifyLockNewSellOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"modifySellFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mySellOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"newSellOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payTokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"queryLengthOrdersOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orders_id\",\"type\":\"uint256[]\"}],\"name\":\"reverseOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletReceivingSellfee\",\"type\":\"address\"}],\"name\":\"setFeeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setTotalOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceivingSellfee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f17685ac29d8b26590453808fc0e2fa14df7871200000000000000000000000000000000000000000000000000000000000001f40000000000000000000000003810a078aa274ea6d06a480588eff8fe517220a4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://94475b9fe5a74a7be6b9de103d252004616fef7118e2e3ae19d7eb0fc370e8bb"}