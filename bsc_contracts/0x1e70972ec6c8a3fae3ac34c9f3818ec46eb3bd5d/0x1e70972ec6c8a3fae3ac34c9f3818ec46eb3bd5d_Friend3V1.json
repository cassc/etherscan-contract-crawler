{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Friend3V1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Friend3V1 is Ownable {\\n    address public protocolFeeDestination;\\n    uint256 public protocolFeePercent;\\n    uint256 public subjectFeePercent;\\n\\n    event Trade(\\n        address trader,\\n        address subject,\\n        bool isBuy,\\n        uint256 ticketAmount,\\n        uint256 ethAmount,\\n        uint256 protocolEthAmount,\\n        uint256 subjectEthAmount,\\n        uint256 supply\\n    );\\n\\n    mapping(address => mapping(address => uint256)) public ticketsBalance;\\n\\n    mapping(address => uint256) public ticketsSupply;\\n\\n    function setFeeDestination(address _feeDestination) public onlyOwner {\\n        protocolFeeDestination = _feeDestination;\\n    }\\n\\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\\n        protocolFeePercent = _feePercent;\\n    }\\n\\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\\n        subjectFeePercent = _feePercent;\\n    }\\n\\n    function getPrice(\\n        uint256 supply,\\n        uint256 amount\\n    ) public pure returns (uint256) {\\n        uint256 sum1 = supply == 0\\n            ? 0\\n            : ((supply - 1) * (supply) * (2 * (supply - 1) + 1)) / 6;\\n        uint256 sum2 = supply == 0 && amount == 1\\n            ? 0\\n            : ((supply - 1 + amount) *\\n                (supply + amount) *\\n                (2 * (supply - 1 + amount) + 1)) / 6;\\n        uint256 summation = sum2 - sum1;\\n        return (summation * 1 ether) / 1600;\\n    }\\n\\n    function getBuyPrice(\\n        address ticketsSubject,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        return getPrice(ticketsSupply[ticketsSubject], amount);\\n    }\\n\\n    function getSellPrice(\\n        address ticketsSubject,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        return getPrice(ticketsSupply[ticketsSubject] - amount, amount);\\n    }\\n\\n    function getBuyPriceAfterFee(\\n        address ticketsSubject,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        uint256 price = getBuyPrice(ticketsSubject, amount);\\n        uint256 protocolFee = (price * protocolFeePercent) / 1 ether;\\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\\n        return price + protocolFee + subjectFee;\\n    }\\n\\n    function getSellPriceAfterFee(\\n        address ticketsSubject,\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        uint256 price = getSellPrice(ticketsSubject, amount);\\n        uint256 protocolFee = (price * protocolFeePercent) / 1 ether;\\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\\n        return price - protocolFee - subjectFee;\\n    }\\n\\n    function buyTickets(address ticketsSubject, uint256 amount) public payable {\\n        uint256 supply = ticketsSupply[ticketsSubject];\\n        require(\\n            supply > 0 || ticketsSubject == msg.sender,\\n            \\\"Only the creator of the ticket can buy the first ticket\\\"\\n        );\\n        uint256 price = getPrice(supply, amount);\\n        uint256 protocolFee = (price * protocolFeePercent) / 1 ether;\\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\\n        require(\\n            msg.value >= price + protocolFee + subjectFee,\\n            \\\"Insufficient payment\\\"\\n        );\\n        ticketsBalance[ticketsSubject][msg.sender] =\\n            ticketsBalance[ticketsSubject][msg.sender] +\\n            amount;\\n        ticketsSupply[ticketsSubject] = supply + amount;\\n        emit Trade(\\n            msg.sender,\\n            ticketsSubject,\\n            true,\\n            amount,\\n            price,\\n            protocolFee,\\n            subjectFee,\\n            supply + amount\\n        );\\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\n        (bool success2, ) = ticketsSubject.call{value: subjectFee}(\\\"\\\");\\n        require(success1 && success2, \\\"Unable to send funds\\\");\\n    }\\n\\n    function sellTickets(\\n        address ticketsSubject,\\n        uint256 amount\\n    ) public payable {\\n        uint256 supply = ticketsSupply[ticketsSubject];\\n        require(supply > amount, \\\"Cannot sell the last ticket\\\");\\n        uint256 price = getPrice(supply - amount, amount);\\n        uint256 protocolFee = (price * protocolFeePercent) / 1 ether;\\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\\n        require(\\n            ticketsBalance[ticketsSubject][msg.sender] >= amount,\\n            \\\"Insufficient tickets\\\"\\n        );\\n        ticketsBalance[ticketsSubject][msg.sender] =\\n            ticketsBalance[ticketsSubject][msg.sender] -\\n            amount;\\n        ticketsSupply[ticketsSubject] = supply - amount;\\n        emit Trade(\\n            msg.sender,\\n            ticketsSubject,\\n            false,\\n            amount,\\n            price,\\n            protocolFee,\\n            subjectFee,\\n            supply - amount\\n        );\\n        (bool success1, ) = msg.sender.call{\\n            value: price - protocolFee - subjectFee\\n        }(\\\"\\\");\\n        (bool success2, ) = protocolFeeDestination.call{value: protocolFee}(\\\"\\\");\\n        (bool success3, ) = ticketsSubject.call{value: subjectFee}(\\\"\\\");\\n        require(success1 && success2 && success3, \\\"Unable to send funds\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticketsSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticketsSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticketsSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticketsSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticketsSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticketsSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketsSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Friend3V1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bafd25a664b5fe0792e8dccb709cd6231821f523274d2180c9beda496b1034f6"}