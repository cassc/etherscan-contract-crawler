{"SourceCode": "{\"Nemt.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\nimport \\\"./RootPort.sol\\\";\\r\\n\\r\\ncontract Base is RootPort {\\r\\n  uint public basicRate;\\r\\n  uint256 internal blockReward;\\r\\n\\r\\n  constructor () public {\\r\\n    basicRate = 600;\\r\\n    blockReward = 60*PPT;\\r\\n  }\\r\\n}\\r\\n\\r\\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\ncontract Nemt is Base {\\r\\n  uint internal START;\\r\\n  uint internal STAGE;\\r\\n  uint256 internal MX;\\r\\n\\r\\n  uint public randomKey;\\r\\n  uint internal lastProof;\\r\\n\\r\\n  mapping (uint =\\u003e uint256) internal blockPayouts;\\r\\n\\r\\n  uint constant MXPACK = 10*10**6;\\r\\n  uint constant ANNSEC = 365*24*60*60;\\r\\n\\r\\n  constructor () public {\\r\\n    START = now;\\r\\n    STAGE = now;\\r\\n    randomKey = 16**32;\\r\\n    lastProof = now+60;\\r\\n    balanceOf[address(0)] = 10**9*PPT;\\r\\n    author = \\\"ASINERUM INTERNATIONAL\\\";\\r\\n    name = \\\"ETHEREUM MINEABLE TOKEN WITH NO GOVERNANCE @NAKED V9\\\";\\r\\n    symbol = \\\"NEMT9\\\";\\r\\n  }\\r\\n\\r\\n  function numgen (uint nonce)\\r\\n  internal view returns (uint num) {\\r\\n    return numgen (nonce, randomKey);\\r\\n  }\\r\\n\\r\\n  function keygen (uint nonce)\\r\\n  internal view returns (uint num) {\\r\\n    return keygen (nonce, randomKey);\\r\\n  }\\r\\n\\r\\n  function VP2 (uint sec)\\r\\n  internal view returns (uint) {\\r\\n    uint tar = totalSupply**2*now;\\r\\n    uint max = (ANNSEC*PPT)**2*START;\\r\\n    return (tar\\u003emax?max:tar)/(max/sec)+60;\\r\\n  }\\r\\n\\r\\n  function nonced (uint nonce)\\r\\n  internal returns (bool checked) {\\r\\n    checked = keygen(nonce)%basicRate==randomKey%basicRate;\\r\\n    if (checked) randomKey = numgen (nonce);\\r\\n  }\\r\\n\\r\\n  function rise (address to, uint256 value)\\r\\n  internal {\\r\\n    move (address(0), to, value);\\r\\n    totalSupply += value;\\r\\n  }\\r\\n\\r\\n  function mine (uint nonce) public returns (bool success) {\\r\\n    if (now-STAGE\\u003eANNSEC/2||totalSupply-MX\\u003eMXPACK*PPT/2) {\\r\\n      blockReward = blockReward/2;\\r\\n      basicRate = basicRate*2;\\r\\n      MX = totalSupply;\\r\\n      STAGE = now;\\r\\n    }\\r\\n    uint256 reward;\\r\\n    if (blockPayouts[block.number]==0) {\\r\\n      if (nonced(nonce)) {\\r\\n        uint tpart = VP2 (3600);\\r\\n        uint timepast = now-lastProof;\\r\\n        reward = blockReward*timepast/tpart;\\r\\n        blockPayouts[block.number] = reward;\\r\\n        lastProof = now;\\r\\n      }\\r\\n    }\\r\\n    if (reward\\u003e0) rise (msg.sender, reward);\\r\\n    return true;\\r\\n  }\\r\\n}\"},\"Root.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ncontract Root {\\r\\n  string public name;\\r\\n  string public symbol;\\r\\n  uint8 public decimals;\\r\\n  uint256 public totalSupply;\\r\\n  mapping (address =\\u003e uint256) public balanceOf;\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) public allowance; //V2\\r\\n\\r\\n  string public author;\\r\\n  uint256 internal PPT;\\r\\n\\r\\n  mapping (address =\\u003e mapping (bytes32 =\\u003e uint[])) public refnosOf; //V9\\r\\n\\r\\n  mapping (uint =\\u003e Market) public markets;\\r\\n  struct Market {\\r\\n    bool buytoken;\\r\\n    address maker;\\r\\n    uint256 value;\\r\\n    uint256 ppe;\\r\\n    uint time; }\\r\\n\\r\\n  uint constant NOS = 25; //V9\\r\\n\\r\\n  event Transfer (address indexed fromAddress, address indexed toAddress, uint256 txPenny);\\r\\n  event Approval (address indexed ownerAddress, address indexed spenderAddress, uint256 txPenny); //V2\\r\\n  event Sale (uint refno, bool indexed buy, address indexed maker, uint256 indexed ppe, uint time);\\r\\n  event Get (uint indexed refno, address indexed taker, uint256 value); //\\u003cSale\\u003e\\r\\n\\r\\n  constructor () public {\\r\\n    decimals = 18;\\r\\n    PPT = 10**uint256(decimals);\\r\\n  }\\r\\n\\r\\n  function ethered (uint256 value)\\r\\n  internal view returns (bool) {\\r\\n    require (msg.value*value==0\\u0026\\u0026msg.value+value\\u003e0, \\\"#values\\\");\\r\\n    require (value\\u003c=totalSupply, \\\"#value\\\");\\r\\n    return msg.value\\u003e0?true:false;\\r\\n  }\\r\\n\\r\\n  function addNo (string key, uint refno)\\r\\n  internal {\\r\\n    require (refno\\u003e0);\\r\\n    bytes32 pid = keccak256(abi.encodePacked(key,msg.value\\u003e0?\\\"E\\\":\\\"T\\\"));\\r\\n    refnosOf[msg.sender][pid].push(refno);\\r\\n    refnosOf[0x0][pid].push(refno);\\r\\n  } //V8\\u00269\\r\\n\\r\\n  function move (address from, address to, uint256 value)\\r\\n  internal {\\r\\n    require (value\\u003c=balanceOf[from]);\\r\\n    require (balanceOf[to]+value\\u003ebalanceOf[to]);\\r\\n    uint256 sum = balanceOf[from]+balanceOf[to];\\r\\n    balanceOf[from] -= value;\\r\\n    balanceOf[to] += value;\\r\\n    assert (balanceOf[from]+balanceOf[to]==sum);\\r\\n    emit Transfer (from, to, value);\\r\\n  }\\r\\n\\r\\n  function transfer (address to, uint256 value) public returns (bool success) {\\r\\n    move (msg.sender, to, value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom (address from, address to, uint256 value) public returns (bool success) {\\r\\n    require (value \\u003c= allowance[from][msg.sender]);\\r\\n    allowance[from][msg.sender] -= value;\\r\\n    move (from, to, value);\\r\\n    return true;\\r\\n  } //V2\\r\\n\\r\\n  function approve (address spender, uint256 value) public returns (bool success) {\\r\\n    allowance[msg.sender][spender] = value;\\r\\n    emit Approval (msg.sender, spender, value);\\r\\n    return true;\\r\\n  } //V2\\r\\n\\r\\n  function post (uint refno, uint256 value, uint256 ppe, uint time) public payable returns (bool success) {\\r\\n    require (markets[refno].maker==0x0, \\\"#refno\\\");\\r\\n    require (ppe\\u003e0\\u0026\\u0026ppe\\u003ctotalSupply, \\\"#rate\\\");\\r\\n    require (time==0||time\\u003enow, \\\"#time\\\");\\r\\n    Market memory mi;\\r\\n    mi.buytoken = ethered (value);\\r\\n    mi.value = msg.value+value;\\r\\n    mi.maker = msg.sender;\\r\\n    mi.time = time;\\r\\n    mi.ppe = ppe;\\r\\n    markets[refno] = mi;\\r\\n    if (!mi.buytoken) move (msg.sender, address(this), value);\\r\\n    emit Sale (refno, mi.buytoken, mi.maker, mi.ppe, mi.time);\\r\\n    addNo (\\\"post\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function unpost (uint refno) public returns (bool success) {\\r\\n    Market storage mi = markets[refno];\\r\\n    require (mi.value\\u003e0, \\\"#data\\\");\\r\\n    require (mi.maker==msg.sender, \\\"#user\\\");\\r\\n    require (mi.time==0||mi.time\\u003cnow, \\\"#time\\\");\\r\\n    if (mi.buytoken) mi.maker.transfer (mi.value);\\r\\n    else move (address(this), mi.maker, mi.value);\\r\\n    mi.value = 0;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function acquire (uint refno, uint256 value) public payable returns (bool success) {\\r\\n    bool buytoken = ethered (value);\\r\\n    Market storage mi = markets[refno];\\r\\n    require (mi.maker!=0x0, \\\"#refno\\\");\\r\\n    require (mi.value\\u003e0\\u0026\\u0026mi.ppe\\u003e0, \\\"#data\\\");\\r\\n    require (mi.time==0||mi.time\\u003e=now, \\\"#time\\\");\\r\\n    require (mi.buytoken==!buytoken, \\\"#request\\\");\\r\\n    uint256 pre = mi.value;\\r\\n    uint256 remit;\\r\\n    if (buytoken) {\\r\\n      remit = msg.value*mi.ppe/PPT;\\r\\n      require (remit\\u003e0\\u0026\\u0026remit\\u003c=mi.value, \\\"#volume\\\");\\r\\n      move (address(this), msg.sender, remit);\\r\\n      mi.maker.transfer (msg.value);\\r\\n    } else {\\r\\n      remit = value*PPT/mi.ppe;\\r\\n      require (remit\\u003e0\\u0026\\u0026remit\\u003c=mi.value, \\\"#volume\\\");\\r\\n      move (msg.sender, mi.maker, value);\\r\\n      msg.sender.transfer (remit);\\r\\n    }\\r\\n    mi.value -= remit;\\r\\n    assert (mi.value+remit==pre);\\r\\n    emit Get (refno, msg.sender, remit);\\r\\n    addNo (\\\"acquire\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function b2i (bytes32 bstr)\\r\\n  internal pure returns (uint num) {\\r\\n    for (uint index=0; index\\u003cbstr.length; index++) {\\r\\n      num += uint(bstr[index])*(16**(index*2)+1);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function keygen (uint nonce, uint key, uint256 uai) public pure returns (uint num) {\\r\\n    num = b2i (keccak256 (abi.encodePacked (uai, key, nonce))); //V6\\r\\n  }\\r\\n\\r\\n  function keygen (uint nonce, uint key)\\r\\n  internal view returns (uint num) {\\r\\n    num = keygen (nonce, key, uint256(uint160 (address (msg.sender)))); //V6\\r\\n  }\\r\\n\\r\\n  function numgen (uint nonce, uint key)\\r\\n  internal view returns (uint num) {\\r\\n    num = b2i (keccak256 (abi.encodePacked (key, nonce, block.number, blockhash(block.number-1), block.coinbase, msg.sender, gasleft(), now)));\\r\\n  }\\r\\n\\r\\n  function refnos (address ua, string key, string form, uint skip) public view returns (uint size, uint[NOS] nos) {\\r\\n    uint[] memory therefno = refnosOf[ua][keccak256(abi.encodePacked(key,form))];\\r\\n    size = therefno.length;\\r\\n    if (size\\u003c=skip) return;\\r\\n    uint start = size-skip;\\r\\n    start = start\\u003eNOS ? start-NOS : 0;\\r\\n    for (uint i=0; i\\u003cNOS \\u0026\\u0026 start+i\\u003csize-skip; i++) {\\r\\n      nos[i] = therefno[start+i];\\r\\n    }\\r\\n  } //V8\\u00269\\r\\n}\"},\"RootPort.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./Root.sol\\\";\\r\\n\\r\\ncontract RootPort is Root {\\r\\n  mapping (uint =\\u003e Offer) public offers;\\r\\n  struct Offer {\\r\\n    bool eth;\\r\\n    bool bid;\\r\\n    uint open;\\r\\n    uint close;\\r\\n    uint stock;\\r\\n    address maker;\\r\\n    address taker;\\r\\n    uint256 price;\\r\\n    uint256 value; //\\u003cfund\\u003e\\r\\n    string name; }\\r\\n\\r\\n  mapping (uint =\\u003e Play) public games;\\r\\n  struct Play {\\r\\n    bool eth;\\r\\n    uint close;\\r\\n    address maker;\\r\\n    uint256 value; //\\u003cfund\\u003e\\r\\n    uint[3] pcts;\\r\\n    uint result;\\r\\n    string name; }\\r\\n\\r\\n  mapping (uint =\\u003e Safe) public saves;\\r\\n  struct Safe {\\r\\n    bool eth;\\r\\n    uint open;\\r\\n    address maker;\\r\\n    address taker;\\r\\n    uint256 value; }\\r\\n\\r\\n  event Sell (uint refno, bool ETH, address indexed maker, uint indexed close, uint256 price, string name);\\r\\n  event Game (uint refno, bool ETH, address indexed maker, uint indexed close, string name);\\r\\n  event Save (uint refno, bool ETH, address indexed maker, address indexed taker);\\r\\n  event Buy (uint indexed refno, address indexed taker, uint256 value); //\\u003cSell\\u003e\\r\\n  event Bid (uint indexed refno, address indexed taker, uint256 value); //\\u003cSell\\u003e\\r\\n  event Win (uint indexed refno, address indexed taker, uint256 value); //\\u003cSell\\u003e\\r\\n  event Bet (uint indexed refno, address indexed taker, uint256 value, uint indexed bet);\\r\\n  event Re (bytes32 indexed hash, bool ETH, address indexed maker, address taker, uint256 value);\\r\\n\\r\\n  function re (bytes32 hash, address to, uint256 value) public payable returns (bool success) {\\r\\n    bool eth = ethered (value);\\r\\n    if (eth) to.transfer (msg.value);\\r\\n    else move (msg.sender, to, value);\\r\\n    emit Re (hash, eth, msg.sender, to, msg.value+value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function offer (uint refno, bool bid, uint open, uint close, uint stock, uint256 price, uint256 value, string name, string note) public payable returns (bool success) {\\r\\n    if (open\\u003cnow) open=now+3600;\\r\\n    if (close\\u003copen) close=open+86400;\\r\\n    require (offers[refno].maker==0x0, \\\"#refno\\\");\\r\\n    note = \\\"\\\";\\r\\n    Offer memory oi;\\r\\n    oi.eth = ethered (value);\\r\\n    oi.bid = bid;\\r\\n    oi.open = open;\\r\\n    oi.close = close;\\r\\n    oi.stock = stock;\\r\\n    oi.price = price;\\r\\n    oi.maker = msg.sender;\\r\\n    oi.value = msg.value+value;\\r\\n    oi.name = name;\\r\\n    offers[refno] = oi;\\r\\n    if (!oi.eth) move (msg.sender, address(this), value);\\r\\n    emit Sell (refno, oi.eth, oi.maker, oi.close, oi.price, oi.name);\\r\\n    addNo (\\\"offer\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function reoffer (uint refno, uint restock) public returns (bool success) {\\r\\n    Offer storage oi = offers[refno];\\r\\n    require (oi.value\\u003e0, \\\"#data\\\");\\r\\n    require (oi.close\\u003enow, \\\"#time\\\");\\r\\n    require (oi.maker==msg.sender, \\\"#user\\\");\\r\\n    require (!oi.bid, \\\"#request\\\");\\r\\n    oi.stock = restock;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function unoffer (uint refno) public returns (bool success) {\\r\\n    Offer storage oi = offers[refno];\\r\\n    require (oi.value\\u003e0, \\\"#data\\\");\\r\\n    require (oi.open\\u003enow||oi.close+3*86400\\u003cnow, \\\"#time\\\");\\r\\n    require (oi.maker==msg.sender, \\\"#user\\\");\\r\\n    if (oi.eth) oi.maker.transfer (oi.value);\\r\\n    else move (address(this), oi.maker, oi.value);\\r\\n    oi.value = 0;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function order (uint refno, uint256 value, string note) public payable returns (bool success) {\\r\\n    bool eth = ethered (value);\\r\\n    uint256 amount = msg.value+value;\\r\\n    Offer storage oi = offers[refno];\\r\\n    require (oi.eth==eth, \\\"#request\\\");\\r\\n    require (!oi.bid, \\\"#offer\\\");\\r\\n    require (oi.value\\u003e0, \\\"#data\\\");\\r\\n    require (oi.open\\u003cnow\\u0026\\u0026oi.close\\u003enow, \\\"#time\\\");\\r\\n    require (oi.price\\u003e0\\u0026\\u0026oi.price\\u003c=amount, \\\"#price\\\");\\r\\n    uint qty = amount/oi.price;\\r\\n    require (oi.stock\\u003e=qty, \\\"#stock\\\");\\r\\n    uint256 changes = amount-qty*oi.price;\\r\\n    oi.stock -= qty;\\r\\n    note = \\\"\\\";\\r\\n    if (eth) {\\r\\n      oi.maker.transfer (msg.value-changes);\\r\\n      if (changes\\u003e0) msg.sender.transfer (changes);\\r\\n    } else move (msg.sender, oi.maker, value-changes);\\r\\n    emit Buy (refno, msg.sender, amount-changes);\\r\\n    addNo (\\\"order\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function bid (uint refno, uint256 value) public payable returns (bool success) {\\r\\n    bool eth = ethered (value);\\r\\n    uint256 amount = msg.value+value;\\r\\n    Offer storage oi = offers[refno];\\r\\n    require (oi.bid, \\\"#offer\\\");\\r\\n    require (oi.value\\u003e0, \\\"#data\\\");\\r\\n    require (oi.price\\u003c=amount, \\\"#price\\\");\\r\\n    if (oi.price\\u003camount) {\\r\\n      require (oi.open\\u003cnow\\u0026\\u0026oi.close\\u003enow, \\\"#time\\\");\\r\\n      oi.taker = msg.sender;\\r\\n      oi.price = amount;\\r\\n      emit Bid (refno, msg.sender, amount);\\r\\n    } else {\\r\\n      require (oi.close\\u003cnow, \\\"#status\\\");\\r\\n      require (oi.eth==eth, \\\"#request\\\");\\r\\n      require (oi.taker==msg.sender, \\\"#winner\\\");\\r\\n      if (oi.eth) {\\r\\n        oi.maker.transfer (oi.value+msg.value);\\r\\n      } else {\\r\\n        move (address(this), oi.maker, oi.value);\\r\\n        move (msg.sender, oi.maker, value);\\r\\n      }\\r\\n      oi.value = 0;\\r\\n      emit Win (refno, msg.sender, amount);\\r\\n    }\\r\\n    addNo (\\\"bid\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function game (uint refno, uint close, uint256 value, uint[3] pcts, string name, string note) public payable returns (bool success) {\\r\\n    if (close\\u003cnow) close=now+86400;\\r\\n    require (games[refno].maker==0x0, \\\"#refno\\\");\\r\\n    note = \\\"\\\";\\r\\n    Play memory pi;\\r\\n    pi.eth = ethered (value);\\r\\n    pi.close = close;\\r\\n    pi.maker = msg.sender;\\r\\n    pi.value = msg.value+value;\\r\\n    pi.pcts = pcts;\\r\\n    pi.name = name;\\r\\n    games[refno] = pi;\\r\\n    if (!pi.eth) move (msg.sender, address(this), value);\\r\\n    emit Game (refno, pi.eth, pi.maker, pi.close, pi.name);\\r\\n    addNo (\\\"game\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function GAME (uint refno) public view returns (uint[3] pcts) {\\r\\n    return games[refno].pcts;\\r\\n  }\\r\\n\\r\\n  function regame (uint refno, uint[3] pcts) public returns (bool success) {\\r\\n    Play storage pi = games[refno];\\r\\n    require (pi.value\\u003e0, \\\"#data\\\");\\r\\n    require (pi.close\\u003enow, \\\"#time\\\");\\r\\n    require (pi.maker==msg.sender, \\\"#user\\\");\\r\\n    pi.pcts = pcts;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function ungame (uint refno, uint result) public returns (bool success) {\\r\\n    require (result\\u003c3, \\\"#option\\\");\\r\\n    Play storage pi = games[refno];\\r\\n    require (pi.close\\u003cnow, \\\"#time\\\");\\r\\n    require (pi.maker==msg.sender, \\\"#user\\\");\\r\\n    pi.result = result;\\r\\n    if (pi.value\\u003e0) {\\r\\n      if (pi.eth) pi.maker.transfer (pi.value);\\r\\n      else move (address(this), pi.maker, pi.value);\\r\\n      pi.value = 0;\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function play (uint refno, uint bet, uint256 value) public payable returns (bool success) {\\r\\n    require (bet\\u003c3, \\\"#option\\\");\\r\\n    bool eth = ethered (value);\\r\\n    uint256 amount = msg.value+value;\\r\\n    Play storage pi = games[refno];\\r\\n    require (pi.eth==eth, \\\"#request\\\");\\r\\n    require (pi.value\\u003e0, \\\"#data\\\");\\r\\n    require (pi.close\\u003enow, \\\"#time\\\");\\r\\n    if (!pi.eth) move (msg.sender, address(this), value);\\r\\n    pi.value += amount;\\r\\n    emit Bet (refno, msg.sender, amount, bet);\\r\\n    addNo (\\\"play\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function save (uint refno, uint open, address taker, uint256 value, string note) public payable returns (bool success) {\\r\\n    if (open\\u003cnow) open=now+30*86400;\\r\\n    require (saves[refno].maker==0x0, \\\"#refno\\\");\\r\\n    note = \\\"\\\";\\r\\n    Safe memory si;\\r\\n    si.eth = ethered (value);\\r\\n    si.open = open;\\r\\n    si.maker = msg.sender;\\r\\n    si.taker = taker;\\r\\n    si.value = msg.value+value;\\r\\n    saves[refno] = si;\\r\\n    if (!si.eth) move (msg.sender, address(this), value);\\r\\n    emit Save (refno, si.eth, si.maker, si.taker);\\r\\n    addNo (\\\"save\\\", refno); //V8\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function unsave (uint refno, uint256 value) public returns (bool success) {\\r\\n    Safe storage si = saves[refno];\\r\\n    if (value==0) value = si.value;\\r\\n    require (si.value\\u003e=value\\u0026\\u0026value\\u003e0, \\\"#amount\\\");\\r\\n    require (si.taker==msg.sender, \\\"#user\\\");\\r\\n    require (si.open\\u003cnow, \\\"#time\\\");\\r\\n    if (si.eth) si.taker.transfer (value);\\r\\n    else move (address(this), si.taker, value);\\r\\n    si.value -= value;\\r\\n    return true;\\r\\n  }\\r\\n}\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"basicRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refnosOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"ungame\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"eth\",\"type\":\"bool\"},{\"name\":\"close\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saves\",\"outputs\":[{\"name\":\"eth\",\"type\":\"bool\"},{\"name\":\"open\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"taker\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randomKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"bid\",\"type\":\"bool\"},{\"name\":\"open\",\"type\":\"uint256\"},{\"name\":\"close\",\"type\":\"uint256\"},{\"name\":\"stock\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"offer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"}],\"name\":\"unoffer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"acquire\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"pcts\",\"type\":\"uint256[3]\"}],\"name\":\"regame\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"}],\"name\":\"unpost\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"close\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"pcts\",\"type\":\"uint256[3]\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"game\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"restock\",\"type\":\"uint256\"}],\"name\":\"reoffer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"}],\"name\":\"GAME\",\"outputs\":[{\"name\":\"pcts\",\"type\":\"uint256[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"eth\",\"type\":\"bool\"},{\"name\":\"bid\",\"type\":\"bool\"},{\"name\":\"open\",\"type\":\"uint256\"},{\"name\":\"close\",\"type\":\"uint256\"},{\"name\":\"stock\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"taker\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"re\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"order\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"name\":\"buytoken\",\"type\":\"bool\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"ppe\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"open\",\"type\":\"uint256\"},{\"name\":\"taker\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"save\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"uai\",\"type\":\"uint256\"}],\"name\":\"keygen\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unsave\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refno\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"ppe\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"post\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ua\",\"type\":\"address\"},{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"form\",\"type\":\"string\"},{\"name\":\"skip\",\"type\":\"uint256\"}],\"name\":\"refnos\",\"outputs\":[{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"nos\",\"type\":\"uint256[25]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ETH\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"close\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ETH\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"close\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"Game\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ETH\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"Save\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bet\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ETH\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Re\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txPenny\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txPenny\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buy\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"ppe\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"refno\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Get\",\"type\":\"event\"}]", "ContractName": "Nemt", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://15b67846eac0bb31c9e99435e588d196e4907d4e69c40e63f57dd6a22490e5ba"}