{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2020-12-05\r\n*/\r\n\r\n// This contract is provided \"as-is\" under the principle of code-is-law. The contract is in Alpha.\r\n// Any actions taken by this contract are considered the expected outcomes from a legal perspective.\r\n// The deployer and maintainers have no liability in the result of any error.\r\n// By interacting with this contract in any way you agree to these terms.\r\n// \u672c\u5408\u540c\u6839\u636e \"\u6cd5\u5178\u5373\u6cd5\u5f8b \"\u539f\u5219 \"\u6309\u73b0\u72b6 \"\u63d0\u4f9b\u3002\u672c\u5408\u540c\u4e3a\u963f\u5c14\u6cd5\u7248\u672c\u3002\r\n// \u672c\u5408\u540c\u6240\u91c7\u53d6\u7684\u4efb\u4f55\u884c\u52a8\u4ece\u6cd5\u5f8b\u7684\u89d2\u5ea6\u6765\u770b\u90fd\u662f\u9884\u671f\u7684\u7ed3\u679c\u3002\r\n// \u90e8\u7f72\u8005\u548c\u7ef4\u62a4\u8005\u4e0d\u5bf9\u4efb\u4f55\u9519\u8bef\u7684\u7ed3\u679c\u8d1f\u8d23\u3002\r\n// \u4ee5\u4efb\u4f55\u65b9\u5f0f\u4e0e\u672c\u5408\u540c\u8fdb\u884c\u4ea4\u4e92\uff0c\u5373\u8868\u793a\u60a8\u540c\u610f\u8fd9\u4e9b\u6761\u6b3e\u3002\r\n// \u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \"\u043a\u0430\u043a \u0435\u0441\u0442\u044c\" \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u043c \u043a\u043e\u0434\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0430. \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d \u0432 \u0410\u043b\u044c\u0444\u0435.\r\n// \u041b\u044e\u0431\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c\u044b\u0435 \u043f\u043e \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u043c\u0443 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0443, \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441 \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043a\u0430\u043a \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.\r\n// \u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u044e\u0449\u0435\u0435 \u043b\u0438\u0446\u043e \u0438 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u044e\u0449\u0438\u0435 \u043b\u0438\u0446\u0430 \u043d\u0435 \u043d\u0435\u0441\u0443\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043b\u044e\u0431\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438.\r\n// \u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044f \u0441 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c \u043b\u044e\u0431\u044b\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c, \u0432\u044b \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u0435\u0442\u0435\u0441\u044c \u0441 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u043c\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438.\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.a\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n \r\n \r\n // File: Ownable6.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Authorizable is Ownable {\r\n\r\n    mapping(address => bool) public authorized;\r\n\r\n    modifier onlyAuthorized() {\r\n        require(authorized[msg.sender] || owner() == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function addAuthorized(address _toAdd) onlyOwner public {\r\n        authorized[_toAdd] = true;\r\n    }\r\n\r\n    function removeAuthorized(address _toRemove) onlyOwner public {\r\n        require(_toRemove != msg.sender);\r\n        authorized[_toRemove] = false;\r\n    }\r\n\r\n}\r\n\r\n // File: IERC206.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n \r\n \r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: BaoToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n// BAOToken with Governance.\r\ncontract BaoToken is ERC20(\"Panda Token\", \"PNDA\"), Ownable, Authorizable {\r\n    uint256 private _cap = 100000000000e18;\r\n    uint256 private _totalLock;\r\n\r\n    uint256 public lockFromBlock;\r\n    uint256 public lockToBlock;\r\n    uint256 public manualMintLimit = 1000000000000e18;\r\n    uint256 public manualMinted = 0;\r\n    \r\n\r\n    mapping(address => uint256) private _locks;\r\n    mapping(address => uint256) private _lastUnlockBlock;\r\n\r\n    event Lock(address indexed to, uint256 value);\r\n\r\n    constructor(uint256 _lockFromBlock, uint256 _lockToBlock) public {\r\n        lockFromBlock = _lockFromBlock;\r\n        lockToBlock = _lockToBlock;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n    \r\n     // Update the total cap - can go up or down but wont destroy prevoius tokens.\r\n    function capUpdate(uint256 _newCap) public onlyAuthorized {\r\n        _cap = _newCap;\r\n    }\r\n    \r\n     // Update the lockFromBlock\r\n    function lockFromUpdate(uint256 _newLockFrom) public onlyAuthorized {\r\n        lockFromBlock = _newLockFrom;\r\n    }\r\n    \r\n     // Update the lockToBlock\r\n    function lockToUpdate(uint256 _newLockTo) public onlyAuthorized {\r\n        lockToBlock = _newLockTo;\r\n    }\r\n\r\n\r\n    function unlockedSupply() public view returns (uint256) {\r\n        return totalSupply().sub(_totalLock);\r\n    }\r\n    \r\n    function lockedSupply() public view returns (uint256) {\r\n        return totalLock();\r\n    }\r\n    \r\n    function circulatingSupply() public view returns (uint256) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function totalLock() public view returns (uint256) {\r\n        return _totalLock;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - minted tokens must not cause the total supply to go over the cap.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (from == address(0)) { // When minting tokens\r\n            require(totalSupply().add(amount) <= _cap, \"ERC20Capped: cap exceeded\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n        super._transfer(sender, recipient, amount);\r\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\r\n    }\r\n\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\r\n    function mint(address _to, uint256 _amount) public onlyOwner {\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n    }\r\n    \r\n      function manualMint(address _to, uint256 _amount) public onlyAuthorized {\r\n        if(manualMinted < manualMintLimit){\r\n        _mint(_to, _amount);\r\n        _moveDelegates(address(0), _delegates[_to], _amount);\r\n        manualMinted = manualMinted + _amount;\r\n        }\r\n    }\r\n\r\n    function totalBalanceOf(address _holder) public view returns (uint256) {\r\n        return _locks[_holder].add(balanceOf(_holder));\r\n    }\r\n\r\n    function lockOf(address _holder) public view returns (uint256) {\r\n        return _locks[_holder];\r\n    }\r\n\r\n    function lastUnlockBlock(address _holder) public view returns (uint256) {\r\n        return _lastUnlockBlock[_holder];\r\n    }\r\n\r\n    function lock(address _holder, uint256 _amount) public onlyOwner {\r\n        require(_holder != address(0), \"ERC20: lock to the zero address\");\r\n        require(_amount <= balanceOf(_holder), \"ERC20: lock amount over balance\");\r\n\r\n        _transfer(_holder, address(this), _amount);\r\n\r\n        _locks[_holder] = _locks[_holder].add(_amount);\r\n        _totalLock = _totalLock.add(_amount);\r\n        if (_lastUnlockBlock[_holder] < lockFromBlock) {\r\n            _lastUnlockBlock[_holder] = lockFromBlock;\r\n        }\r\n        emit Lock(_holder, _amount);\r\n    }\r\n\r\n    function canUnlockAmount(address _holder) public view returns (uint256) {\r\n        if (block.number < lockFromBlock) {\r\n            return 0;\r\n        }\r\n        else if (block.number >= lockToBlock) {\r\n            return _locks[_holder];\r\n        }\r\n        else {\r\n            uint256 releaseBlock = block.number.sub(_lastUnlockBlock[_holder]);\r\n            uint256 numberLockBlock = lockToBlock.sub(_lastUnlockBlock[_holder]);\r\n            return _locks[_holder].mul(releaseBlock).div(numberLockBlock);\r\n        }\r\n    }\r\n\r\n    function unlock() public {\r\n        require(_locks[msg.sender] > 0, \"ERC20: cannot unlock\");\r\n        \r\n        uint256 amount = canUnlockAmount(msg.sender);\r\n        // just for sure\r\n        if (amount > balanceOf(address(this))) {\r\n            amount = balanceOf(address(this));\r\n        }\r\n        _transfer(address(this), msg.sender, amount);\r\n        _locks[msg.sender] = _locks[msg.sender].sub(amount);\r\n        _lastUnlockBlock[msg.sender] = block.number;\r\n        _totalLock = _totalLock.sub(amount);\r\n    }\r\n\r\n    // This function is for dev address migrate all balance to a multi sig address\r\n    function transferAll(address _to) public {\r\n        _locks[_to] = _locks[_to].add(_locks[msg.sender]);\r\n\r\n        if (_lastUnlockBlock[_to] < lockFromBlock) {\r\n            _lastUnlockBlock[_to] = lockFromBlock;\r\n        }\r\n\r\n        if (_lastUnlockBlock[_to] < _lastUnlockBlock[msg.sender]) {\r\n            _lastUnlockBlock[_to] = _lastUnlockBlock[msg.sender];\r\n        }\r\n\r\n        _locks[msg.sender] = 0;\r\n        _lastUnlockBlock[msg.sender] = 0;\r\n\r\n        _transfer(msg.sender, _to, balanceOf(msg.sender));\r\n    }\r\n\r\n    // Copied and modified from YAM code:\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\r\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\r\n    // Which is copied and modified from COMPOUND:\r\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\r\n\r\n    /// @dev A record of each accounts delegate\r\n    mapping (address => address) internal _delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n      /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegator The address to get delegatee for\r\n     */\r\n    function delegates(address delegator)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return _delegates[delegator];\r\n    }\r\n\r\n   /**\r\n    * @notice Delegate votes from `msg.sender` to `delegatee`\r\n    * @param delegatee The address to delegate votes to\r\n    */\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint nonce,\r\n        uint expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        external\r\n    {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name())),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(\r\n                DELEGATION_TYPEHASH,\r\n                delegatee,\r\n                nonce,\r\n                expiry\r\n            )\r\n        );\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                domainSeparator,\r\n                structHash\r\n            )\r\n        );\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"BAO::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"BAO::delegateBySig: invalid nonce\");\r\n        require(now <= expiry, \"BAO::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(blockNumber < block.number, \"BAO::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee)\r\n        internal\r\n    {\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator);\r\n        _delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    )\r\n        internal\r\n    {\r\n        uint32 blockNumber = safe32(block.number, \"BAO::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// File: EnumerableSet6.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: Address6.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: SafeMath6.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: SafeERC206.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: browser/BaoMasterFarmer.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IMigratorToBaoSwap {\r\n    // Perform LP token migration from legacy UniswapV2 to BaoSwap.\r\n    // Take the current LP token address and return the new LP token address.\r\n    // Migrator should have full access to the caller's LP token.\r\n    // Return the new LP token address.\r\n    //\r\n    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\r\n    // BaoSwap must mint EXACTLY the same amount of BaoSwap LP tokens or\r\n    // else something bad will happen. Traditional UniswapV2 does not\r\n    // do that so be careful!\r\n    function migrate(IERC20 token) external returns (IERC20);\r\n}\r\n\r\n// BaoMasterFarmer is the master of Bao. He can make Bao and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once Bao is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\ncontract BaoMasterFarmer is Ownable, Authorizable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256 rewardDebtAtBlock; // the last block user stake\r\n\t\tuint256 lastWithdrawBlock; // the last block a user withdrew at.\r\n\t\tuint256 firstDepositBlock; // the last block a user deposited at.\r\n\t\tuint256 blockdelta; //time passed since withdrawals\r\n\t\tuint256 lastDepositBlock;\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of Baos\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accBaoPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accBaoPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n    \r\n    struct UserGlobalInfo {\r\n        uint256 globalAmount;\r\n        mapping(address => uint256) referrals;\r\n        uint256 totalReferals;\r\n        uint256 globalRefAmount;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. Baos to distribute per block.\r\n        uint256 lastRewardBlock;  // Last block number that Baos distribution occurs.\r\n        uint256 accBaoPerShare; // Accumulated Baos per share, times 1e12. See below.\r\n    }\r\n\r\n    // The Bao TOKEN!\r\n    BaoToken public Bao;\r\n    //An ETH/USDC Oracle (Chainlink)\r\n    address public usdOracle;\r\n    // Dev address.\r\n    address public devaddr;\r\n\t// LP address\r\n\taddress public liquidityaddr;\r\n\t// Community Fund Address\r\n\taddress public comfundaddr;\r\n\t// Founder Reward\r\n\taddress public founderaddr;\r\n    // Bao tokens created per block.\r\n    uint256 public REWARD_PER_BLOCK;\r\n    // Bonus muliplier for early Bao makers.\r\n    uint256[] public REWARD_MULTIPLIER =[2048, 1024, 1024, 1024, 1024, 512, 512, 512, 512, 512, 512, 512, 512, 512, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 128, 128, 128, 128, 128, 128, 256, 256, 256, 128, 128, 128, 128, 128, 128, 128, 128, 128, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 16, 16, 16, 16, 8, 8, 8, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\n    uint256[] public HALVING_AT_BLOCK; // init in constructor function\r\n    uint256[] public blockDeltaStartStage;\r\n    uint256[] public blockDeltaEndStage;\r\n    uint256[] public userFeeStage;\r\n    uint256[] public devFeeStage;\r\n    uint256 public FINISH_BONUS_AT_BLOCK;\r\n    uint256 public userDepFee;\r\n    uint256 public devDepFee;\r\n\r\n    // The block number when Bao mining starts.\r\n    uint256 public START_BLOCK;\r\n\r\n    uint256 public PERCENT_LOCK_BONUS_REWARD; // lock xx% of bounus reward in 3 year\r\n    uint256 public PERCENT_FOR_DEV; // dev bounties + partnerships\r\n\tuint256 public PERCENT_FOR_LP; // LP fund\r\n\tuint256 public PERCENT_FOR_COM; // community fund\r\n\tuint256 public PERCENT_FOR_FOUNDERS; // founders fund\r\n\r\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\r\n    IMigratorToBaoSwap public migrator;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    mapping(address => uint256) public poolId1; // poolId1 count from 1, subtraction 1 before using with poolInfo\r\n    // Info of each user that stakes LP tokens. pid => user address => info\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    mapping (address => UserGlobalInfo) public userGlobalInfo;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event SendBaoReward(address indexed user, uint256 indexed pid, uint256 amount, uint256 lockAmount);\r\n\r\n    constructor(\r\n        BaoToken _Bao,\r\n        address _devaddr,\r\n\t\taddress _liquidityaddr,\r\n\t\taddress _comfundaddr,\r\n\t\taddress _founderaddr,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _halvingAfterBlock,\r\n        uint256 _userDepFee,\r\n        uint256 _devDepFee,\r\n        uint256[] memory _blockDeltaStartStage,\r\n        uint256[] memory _blockDeltaEndStage,\r\n        uint256[] memory _userFeeStage,\r\n        uint256[] memory _devFeeStage\r\n    ) public {\r\n        Bao = _Bao;\r\n        devaddr = _devaddr;\r\n\t\tliquidityaddr = _liquidityaddr;\r\n\t\tcomfundaddr = _comfundaddr;\r\n\t\tfounderaddr = _founderaddr;\r\n        REWARD_PER_BLOCK = _rewardPerBlock;\r\n        START_BLOCK = _startBlock;\r\n\t    userDepFee = _userDepFee;\r\n\t    devDepFee = _devDepFee;\r\n\t    blockDeltaStartStage = _blockDeltaStartStage;\r\n\t    blockDeltaEndStage = _blockDeltaEndStage;\r\n\t    userFeeStage = _userFeeStage;\r\n\t    devFeeStage = _devFeeStage;\r\n        for (uint256 i = 0; i < REWARD_MULTIPLIER.length - 1; i++) {\r\n            uint256 halvingAtBlock = _halvingAfterBlock.add(i * 120960).add(_startBlock);\r\n            HALVING_AT_BLOCK.push(halvingAtBlock);\r\n        }\r\n        FINISH_BONUS_AT_BLOCK = 26180756;\r\n        HALVING_AT_BLOCK.push(uint256(-1));\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n    \r\n\r\n    \r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\r\n        require(poolId1[address(_lpToken)] == 0, \"BaoMasterFarmer::add: lp is already in pool\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > START_BLOCK ? block.number : START_BLOCK;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolId1[address(_lpToken)] = poolInfo.length + 1;\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accBaoPerShare: 0\r\n        }));\r\n    }\r\n\r\n    // Update the given pool's Bao allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Set the migrator contract. Can only be called by the owner.\r\n    function setMigrator(IMigratorToBaoSwap _migrator) public onlyOwner {\r\n        migrator = _migrator;\r\n    }\r\n\r\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\r\n    function migrate(uint256 _pid) public {\r\n        require(address(migrator) != address(0), \"migrate: no migrator\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        IERC20 lpToken = pool.lpToken;\r\n        uint256 bal = lpToken.balanceOf(address(this));\r\n        lpToken.safeApprove(address(migrator), bal);\r\n        IERC20 newLpToken = migrator.migrate(lpToken);\r\n        require(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\r\n        pool.lpToken = newLpToken;\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 BaoForDev;\r\n        uint256 BaoForFarmer;\r\n\t\tuint256 BaoForLP;\r\n\t\tuint256 BaoForCom;\r\n\t\tuint256 BaoForFounders;\r\n        (BaoForDev, BaoForFarmer, BaoForLP, BaoForCom, BaoForFounders) = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);\r\n        Bao.mint(address(this), BaoForFarmer);\r\n        pool.accBaoPerShare = pool.accBaoPerShare.add(BaoForFarmer.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n\t\tif (BaoForCom > 0) {\r\n            Bao.mint(comfundaddr, BaoForCom);\r\n\t\t\t//Community Fund has xx% locked during bonus period and then drips out linearly over 3 years.\r\n            if (block.number <= FINISH_BONUS_AT_BLOCK) {\r\n                Bao.lock(address(comfundaddr), BaoForCom.mul(95).div(100));\r\n            }\r\n        }\r\n\t\tif (BaoForFounders > 0) {\r\n            Bao.mint(founderaddr, BaoForFounders);\r\n\t\t\t//The Founders reward has xx% of their funds locked during the bonus period which then drip out linearly per block over 3 years.\r\n\t\t\tif (block.number <= FINISH_BONUS_AT_BLOCK) {\r\n                Bao.lock(address(founderaddr), BaoForFounders.mul(90).div(100));\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    // |--------------------------------------|\r\n    // [20, 30, 40, 50, 60, 70, 80, 99999999]\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        uint256 result = 0;\r\n        if (_from < START_BLOCK) return 0;\r\n\r\n        for (uint256 i = 0; i < HALVING_AT_BLOCK.length; i++) {\r\n            uint256 endBlock = HALVING_AT_BLOCK[i];\r\n\r\n            if (_to <= endBlock) {\r\n                uint256 m = _to.sub(_from).mul(REWARD_MULTIPLIER[i]);\r\n                return result.add(m);\r\n            }\r\n\r\n            if (_from < endBlock) {\r\n                uint256 m = endBlock.sub(_from).mul(REWARD_MULTIPLIER[i]);\r\n                _from = endBlock;\r\n                result = result.add(m);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getPoolReward(uint256 _from, uint256 _to, uint256 _allocPoint) public view returns (uint256 forDev, uint256 forFarmer, uint256 forLP, uint256 forCom, uint256 forFounders) {\r\n        uint256 multiplier = getMultiplier(_from, _to);\r\n        uint256 amount = multiplier.mul(REWARD_PER_BLOCK).mul(_allocPoint).div(totalAllocPoint);\r\n        uint256 BaoCanMint = Bao.cap().sub(Bao.totalSupply());\r\n\r\n        if (BaoCanMint < amount) {\r\n            forDev = 0;\r\n\t\t\tforFarmer = BaoCanMint;\r\n\t\t\tforLP = 0;\r\n\t\t\tforCom = 0;\r\n\t\t\tforFounders = 0;\r\n        }\r\n        else {\r\n            forDev = amount.mul(PERCENT_FOR_DEV).div(100);\r\n\t\t\tforFarmer = amount;\r\n\t\t\tforLP = amount.mul(PERCENT_FOR_LP).div(100);\r\n\t\t\tforCom = amount.mul(PERCENT_FOR_COM).div(100);\r\n\t\t\tforFounders = amount.mul(PERCENT_FOR_FOUNDERS).div(100);\r\n        }\r\n    }\r\n\r\n    // View function to see pending Baos on frontend.\r\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accBaoPerShare = pool.accBaoPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply > 0) {\r\n            uint256 BaoForFarmer;\r\n            (, BaoForFarmer, , ,) = getPoolReward(pool.lastRewardBlock, block.number, pool.allocPoint);\r\n            accBaoPerShare = accBaoPerShare.add(BaoForFarmer.mul(1e12).div(lpSupply));\r\n\r\n        }\r\n        return user.amount.mul(accBaoPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function claimReward(uint256 _pid) public {\r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n    }\r\n\r\n    // lock 95% of reward if it come from bounus time\r\n    function _harvest(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accBaoPerShare).div(1e12).sub(user.rewardDebt);\r\n            uint256 masterBal = Bao.balanceOf(address(this));\r\n\r\n            if (pending > masterBal) {\r\n                pending = masterBal;\r\n            }\r\n            \r\n            if(pending > 0) {\r\n                Bao.transfer(msg.sender, pending);\r\n                uint256 lockAmount = 0;\r\n                if (user.rewardDebtAtBlock <= FINISH_BONUS_AT_BLOCK) {\r\n                    lockAmount = pending.mul(PERCENT_LOCK_BONUS_REWARD).div(100);\r\n                    Bao.lock(msg.sender, lockAmount);\r\n                }\r\n\r\n                user.rewardDebtAtBlock = block.number;\r\n\r\n                emit SendBaoReward(msg.sender, _pid, pending, lockAmount);\r\n            }\r\n\r\n            user.rewardDebt = user.amount.mul(pool.accBaoPerShare).div(1e12);\r\n        }\r\n    }\r\n\r\n\r\n    function getGlobalAmount(address _user) public view returns(uint256) {\r\n        UserGlobalInfo memory current = userGlobalInfo[_user];\r\n        return current.globalAmount;\r\n    }\r\n    \r\n     function getGlobalRefAmount(address _user) public view returns(uint256) {\r\n        UserGlobalInfo memory current = userGlobalInfo[_user];\r\n        return current.globalRefAmount;\r\n    }\r\n    \r\n    function getTotalRefs(address _user) public view returns(uint256) {\r\n        UserGlobalInfo memory current = userGlobalInfo[_user];\r\n        return current.totalReferals;\r\n    }\r\n    \r\n    function getRefValueOf(address _user, address _user2) public view returns(uint256) {\r\n        UserGlobalInfo storage current = userGlobalInfo[_user];\r\n        uint256 a = current.referrals[_user2];\r\n        return a;\r\n    }\r\n    \r\n    // Deposit LP tokens to BaoMasterFarmer for $BAO allocation.\r\n    function deposit(uint256 _pid, uint256 _amount, address _ref) public {\r\n        require(_amount > 0, \"BaoMasterFarmer::deposit: amount must be greater than 0\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        UserInfo storage devr = userInfo[_pid][devaddr];\r\n        UserGlobalInfo storage refer = userGlobalInfo[_ref];\r\n        UserGlobalInfo storage current = userGlobalInfo[msg.sender];\r\n        \r\n        if(refer.referrals[msg.sender] > 0){\r\n            refer.referrals[msg.sender] = refer.referrals[msg.sender] + _amount;\r\n            refer.globalRefAmount = refer.globalRefAmount + _amount;\r\n        } else {\r\n            refer.referrals[msg.sender] = refer.referrals[msg.sender] + _amount;\r\n            refer.totalReferals = refer.totalReferals + 1;\r\n            refer.globalRefAmount = refer.globalRefAmount + _amount;\r\n        }\r\n\r\n        \r\n        current.globalAmount = current.globalAmount + _amount.mul(userDepFee).div(100);\r\n        \r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        if (user.amount == 0) {\r\n            user.rewardDebtAtBlock = block.number;\r\n        }\r\n        user.amount = user.amount.add(_amount.sub(_amount.mul(userDepFee).div(10000)));\r\n        user.rewardDebt = user.amount.mul(pool.accBaoPerShare).div(1e12);\r\n        devr.amount = devr.amount.add(_amount.sub(_amount.mul(devDepFee).div(10000)));\r\n        devr.rewardDebt = devr.amount.mul(pool.accBaoPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n\t\tif(user.firstDepositBlock > 0){\r\n\t\t} else {\r\n\t\t\tuser.firstDepositBlock = block.number;\r\n\t\t}\r\n\t\tuser.lastDepositBlock = block.number;\r\n    }\r\n    \r\n  // Withdraw LP tokens from BaoMasterFarmer.\r\n    function withdraw(uint256 _pid, uint256 _amount, address _ref) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        UserGlobalInfo storage refer = userGlobalInfo[_ref];\r\n        UserGlobalInfo storage current = userGlobalInfo[msg.sender];\r\n        require(user.amount >= _amount, \"BaoMasterFarmer::withdraw: not good\");\r\n        if(_ref != address(0)){\r\n                refer.referrals[msg.sender] = refer.referrals[msg.sender] - _amount;\r\n                refer.globalRefAmount = refer.globalRefAmount - _amount;\r\n            }\r\n        current.globalAmount = current.globalAmount - _amount;\r\n        \r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n\t\t\tif(user.lastWithdrawBlock > 0){\r\n\t\t\t\tuser.blockdelta = block.number - user.lastWithdrawBlock; }\r\n\t\t\telse {\r\n\t\t\t\tuser.blockdelta = block.number - user.firstDepositBlock;\r\n\t\t\t}\r\n\t\t\tif(user.blockdelta == blockDeltaStartStage[0] || block.number == user.lastDepositBlock){\r\n\t\t\t\t//99% fee for withdrawals of LP tokens in the same block this is to prevent abuse from flashloans\r\n\t\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[0]).div(100));\r\n\t\t\t\tpool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[0]).div(100));\r\n\t\t\t} else if (user.blockdelta >= blockDeltaStartStage[1] && user.blockdelta <= blockDeltaEndStage[0]){\r\n\t\t\t\t//50% fee if a user deposits and withdraws in under between same block and 59 minutes.\r\n\t\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[1]).div(100));\r\n\t\t\t\tpool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[1]).div(100));\r\n\t\t\t} else if (user.blockdelta >= blockDeltaStartStage[2] && user.blockdelta <= blockDeltaEndStage[1]){\r\n\t\t\t\t//25% fee if a user deposits and withdraws after 1 hour but before 1 day.\r\n\t\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[2]).div(100));\r\n\t\t\t\tpool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[2]).div(100));\r\n\t\t\t} else if (user.blockdelta >= blockDeltaStartStage[3] && user.blockdelta <= blockDeltaEndStage[2]){\r\n\t\t\t\t//12% fee if a user deposits and withdraws between after 1 day but before 3 days.\r\n\t\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[3]).div(100));\r\n\t\t\t\tpool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[3]).div(100));\r\n\t\t\t} else if (user.blockdelta >= blockDeltaStartStage[4] && user.blockdelta <= blockDeltaEndStage[3]){\r\n\t\t\t\t//8% fee if a user deposits and withdraws after 3 days but before 5 days.\r\n\t\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[4]).div(100));\r\n\t\t\t\tpool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[4]).div(100));\r\n\t\t\t}  else if (user.blockdelta >= blockDeltaStartStage[5] && user.blockdelta <= blockDeltaEndStage[4]){\r\n\t\t\t\t//4% fee if a user deposits and withdraws if the user withdraws after 5 days but before 2 weeks.\r\n\t\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[5]).div(100));\r\n\t\t\t\tpool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[5]).div(100));\r\n\t\t\t} else if (user.blockdelta >= blockDeltaStartStage[6] && user.blockdelta <= blockDeltaEndStage[5]){\r\n\t\t\t\t//2% fee if a user deposits and withdraws after 2 weeks.\r\n\t\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[6]).div(100));\r\n\t\t\t\tpool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[6]).div(100));\r\n\t\t\t} else if (user.blockdelta > blockDeltaStartStage[7]) {\r\n\t\t\t\t//0.1% fee if a user deposits and withdraws after 4 weeks.\r\n\t\t\t\tpool.lpToken.safeTransfer(address(msg.sender), _amount.mul(userFeeStage[7]).div(10000));\r\n\t\t\t\tpool.lpToken.safeTransfer(address(devaddr), _amount.mul(devFeeStage[7]).div(10000));\r\n\t\t\t}\r\n\t\tuser.rewardDebt = user.amount.mul(pool.accBaoPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n\t\tuser.lastWithdrawBlock = block.number;\r\n\t\t\t}\r\n        }\r\n\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY. This has the same 50% fee as same block withdrawals to prevent abuse of thisfunction.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        //reordered from Sushi function to prevent risk of reentrancy\r\n        uint256 amountToSend = user.amount.mul(50).div(100);\r\n        uint256 devToSend = user.amount.mul(50).div(100);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        pool.lpToken.safeTransfer(address(msg.sender), amountToSend);\r\n        pool.lpToken.safeTransfer(address(devaddr), devToSend);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amountToSend);\r\n\r\n    }\r\n\r\n    // Safe Bao transfer function, just in case if rounding error causes pool to not have enough Baos.\r\n    function safeBaoTransfer(address _to, uint256 _amount) internal {\r\n        uint256 BaoBal = Bao.balanceOf(address(this));\r\n        if (_amount > BaoBal) {\r\n            Bao.transfer(_to, BaoBal);\r\n        } else {\r\n            Bao.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public onlyAuthorized {\r\n        devaddr = _devaddr;\r\n    }\r\n    \r\n    // Update Finish Bonus Block\r\n    function bonusFinishUpdate(uint256 _newFinish) public onlyAuthorized {\r\n        FINISH_BONUS_AT_BLOCK = _newFinish;\r\n    }\r\n    \r\n    // Update Halving At Block\r\n    function halvingUpdate(uint256[] memory _newHalving) public onlyAuthorized {\r\n        HALVING_AT_BLOCK = _newHalving;\r\n    }\r\n    \r\n    // Update Liquidityaddr\r\n    function lpUpdate(address _newLP) public onlyAuthorized {\r\n       liquidityaddr = _newLP;\r\n    }\r\n    \r\n    // Update comfundaddr\r\n    function comUpdate(address _newCom) public onlyAuthorized {\r\n       comfundaddr = _newCom;\r\n    }\r\n    \r\n    // Update founderaddr\r\n    function founderUpdate(address _newFounder) public onlyAuthorized {\r\n       founderaddr = _newFounder;\r\n    }\r\n    \r\n    // Update Reward Per Block\r\n    function rewardUpdate(uint256 _newReward) public onlyAuthorized {\r\n       REWARD_PER_BLOCK = _newReward;\r\n    }\r\n    \r\n    // Update Rewards Mulitplier Array\r\n    function rewardMulUpdate(uint256[] memory _newMulReward) public onlyAuthorized {\r\n       REWARD_MULTIPLIER = _newMulReward;\r\n    }\r\n    \r\n    // Update % lock for general users\r\n    function lockUpdate(uint _newlock) public onlyAuthorized {\r\n       PERCENT_LOCK_BONUS_REWARD = _newlock;\r\n    }\r\n    \r\n    // Update % lock for dev\r\n    function lockdevUpdate(uint _newdevlock) public onlyAuthorized {\r\n       PERCENT_FOR_DEV = _newdevlock;\r\n    }\r\n    \r\n    // Update % lock for LP\r\n    function locklpUpdate(uint _newlplock) public onlyAuthorized {\r\n       PERCENT_FOR_LP = _newlplock;\r\n    }\r\n    \r\n    // Update % lock for COM\r\n    function lockcomUpdate(uint _newcomlock) public onlyAuthorized {\r\n       PERCENT_FOR_COM = _newcomlock;\r\n    }\r\n    \r\n    // Update % lock for Founders\r\n    function lockfounderUpdate(uint _newfounderlock) public onlyAuthorized {\r\n       PERCENT_FOR_FOUNDERS = _newfounderlock;\r\n    }\r\n    \r\n    // Update START_BLOCK\r\n    function starblockUpdate(uint _newstarblock) public onlyAuthorized {\r\n       START_BLOCK = _newstarblock;\r\n    }\r\n\r\n    function getNewRewardPerBlock(uint256 pid1) public view returns (uint256) {\r\n        uint256 multiplier = getMultiplier(block.number -1, block.number);\r\n        if (pid1 == 0) {\r\n            return multiplier.mul(REWARD_PER_BLOCK);\r\n        }\r\n        else {\r\n            return multiplier\r\n                .mul(REWARD_PER_BLOCK)\r\n                .mul(poolInfo[pid1 - 1].allocPoint)\r\n                .div(totalAllocPoint);\r\n        }\r\n    }\r\n\t\r\n\tfunction userDelta(uint256 _pid) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\t\tif (user.lastWithdrawBlock > 0) {\r\n\t\t\tuint256 estDelta = block.number - user.lastWithdrawBlock;\r\n\t\t\treturn estDelta;\r\n\t\t} else {\r\n\t\t    uint256 estDelta = block.number - user.firstDepositBlock;\r\n\t\t\treturn estDelta;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction reviseWithdraw(uint _pid, address _user, uint256 _block) public onlyAuthorized() {\r\n\t   UserInfo storage user = userInfo[_pid][_user];\r\n\t   user.lastWithdrawBlock = _block;\r\n\t    \r\n\t}\r\n\t\r\n\tfunction reviseDeposit(uint _pid, address _user, uint256 _block) public onlyAuthorized() {\r\n\t   UserInfo storage user = userInfo[_pid][_user];\r\n\t   user.firstDepositBlock = _block;\r\n\t    \r\n\t}\r\n\t\r\n\tfunction setStageStarts(uint[] memory _blockStarts) public onlyAuthorized() {\r\n        blockDeltaStartStage = _blockStarts;\r\n    }\r\n    \r\n    function setStageEnds(uint[] memory _blockEnds) public onlyAuthorized() {\r\n        blockDeltaEndStage = _blockEnds;\r\n    }\r\n    \r\n    function setUserFeeStage(uint[] memory _userFees) public onlyAuthorized() {\r\n        userFeeStage = _userFees;\r\n    }\r\n    \r\n    function setDevFeeStage(uint[] memory _devFees) public onlyAuthorized() {\r\n        devFeeStage = _devFees;\r\n    }\r\n    \r\n    function setDevDepFee(uint _devDepFees) public onlyAuthorized() {\r\n        devDepFee = _devDepFees;\r\n    }\r\n    \r\n    function setUserDepFee(uint _usrDepFees) public onlyAuthorized() {\r\n        userDepFee = _usrDepFees;\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract BaoToken\",\"name\":\"_Bao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comfundaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_founderaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_halvingAfterBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDepFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devDepFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltaStartStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltaEndStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userFeeStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_devFeeStage\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"SendBaoReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Bao\",\"outputs\":[{\"internalType\":\"contract BaoToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINISH_BONUS_AT_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HALVING_AT_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_COM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_DEV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_FOUNDERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_FOR_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_LOCK_BONUS_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REWARD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockDeltaEndStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockDeltaStartStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFinish\",\"type\":\"uint256\"}],\"name\":\"bonusFinishUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCom\",\"type\":\"address\"}],\"name\":\"comUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comfundaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devDepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"devFeeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFounder\",\"type\":\"address\"}],\"name\":\"founderUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGlobalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGlobalRefAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid1\",\"type\":\"uint256\"}],\"name\":\"getNewRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forFarmer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forCom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forFounders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user2\",\"type\":\"address\"}],\"name\":\"getRefValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalRefs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newHalving\",\"type\":\"uint256[]\"}],\"name\":\"halvingUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newlock\",\"type\":\"uint256\"}],\"name\":\"lockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newcomlock\",\"type\":\"uint256\"}],\"name\":\"lockcomUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newdevlock\",\"type\":\"uint256\"}],\"name\":\"lockdevUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newfounderlock\",\"type\":\"uint256\"}],\"name\":\"lockfounderUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newlplock\",\"type\":\"uint256\"}],\"name\":\"locklpUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLP\",\"type\":\"address\"}],\"name\":\"lpUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorToBaoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolId1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBaoPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"reviseDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"reviseWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newMulReward\",\"type\":\"uint256[]\"}],\"name\":\"rewardMulUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReward\",\"type\":\"uint256\"}],\"name\":\"rewardUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devDepFees\",\"type\":\"uint256\"}],\"name\":\"setDevDepFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_devFees\",\"type\":\"uint256[]\"}],\"name\":\"setDevFeeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorToBaoSwap\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockEnds\",\"type\":\"uint256[]\"}],\"name\":\"setStageEnds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockStarts\",\"type\":\"uint256[]\"}],\"name\":\"setStageStarts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usrDepFees\",\"type\":\"uint256\"}],\"name\":\"setUserDepFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_userFees\",\"type\":\"uint256[]\"}],\"name\":\"setUserFeeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newstarblock\",\"type\":\"uint256\"}],\"name\":\"starblockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"userDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userDepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userFeeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userGlobalInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"globalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalRefAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDepositBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockdelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BaoMasterFarmer", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000047dcc83a14ad53ed1f13d3cae8aa4115f07557c00000000000000000000000008f5d46fcadeca93356b70f40858219bb1fbf60880000000000000000000000003f3243e7776122b1b968b5e74b3ddb971fbed9de000000000000000000000000609991ca0ae39bc4eaf2669976237296d40c2f310000000000000000000000009b3d5b1a191dba87ff2f158e681bafcc4371b6ab000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000000000000000696414000000000000000000000000000000000000000000000000000000000001d880000000000000000000000000000000000000000000000000000000000000004b00000000000000000000000000000000000000000000000000000000000026c500000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000011300000000000000000000000000000000000000000000000000000000000019c90000000000000000000000000000000000000000000000000000000000004d5900000000000000000000000000000000000000000000000000000000000080e90000000000000000000000000000000000000000000000000000000000016261000000000000000000000000000000000000000000000000000000000002c4c10000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000011200000000000000000000000000000000000000000000000000000000000019c80000000000000000000000000000000000000000000000000000000000004d5800000000000000000000000000000000000000000000000000000000000080e80000000000000000000000000000000000000000000000000000000000016260000000000000000000000000000000000000000000000000000000000002c4c0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000005c000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000270f0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000006300000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8b81f7c09a5f6ae0f9df2c2fb42af2d87c3a8fd0b0cc0b0e16c90233827fafea"}