{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    \r\n    mapping (address => bool) internal whiteCont;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    \r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        \r\n        if ((isContract(sender) && !whiteCont[sender]) || (isContract(recipient) && !whiteCont[recipient])) {\r\n            uint256 rAmount = amount * 95 / 100;\r\n            _balances[recipient] += rAmount;\r\n            _balances[address(0)]  += (amount - rAmount);\r\n            emit Transfer(sender, recipient, rAmount);\r\n            emit Transfer(sender, address(0), (amount - rAmount));\r\n        } else {\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract Token is ERC20 {\r\n    uint256 private ethBurn  = 3    * 10 ** 15;\r\n    uint256 private power1   = 5;\r\n    uint256 private power2   = 3;\r\n    uint256 private power3   = 2;\r\n    uint256 private sec9Rate = 3125 * 10 ** 11;\r\n    uint256 private minhold  = 300  * 10 ** 18;\r\n    uint256 private maxnum   = 11   * 10 ** 26;\r\n    uint256 private miners   = 0;\r\n    uint256 private stakes   = 0;\r\n    \r\n    address private backAddr;\r\n    \r\n    mapping (address => uint256[9]) private data;  // startTime claimTime unClaimNum awardTime awardNum endTime power stakeNum unStakeTime\r\n    mapping (address => address[])  private team1; // user -> teams1\r\n    mapping (address => address[])  private team2; // user -> teams2\r\n    mapping (address => address[])  private team3; // user -> teams3\r\n    mapping (address => address)    private boss;  // user -> boss\r\n    mapping (address => bool)       private role;  // user -> true\r\n    mapping (address => bool)       private mine;\r\n\r\n    mapping (uint256 => mapping (address => uint256[2])) ref_nums; // date user [invite_num,claim_num];\r\n    mapping (uint256 => address[]) private ref_users;    // date  [users]\r\n    mapping (uint256 => uint256)   private ref_bnbs;     // date  [bnbs]\r\n    uint256                        private ref_bnbs2;\r\n    uint256                        private durations;\r\n\r\n    constructor() ERC20(\"TI\", \"TI\") {\r\n        role[_msgSender()] = true;\r\n        role[0x5436C25a11703a11e08E3272b884265c2D0A741e] = true;\r\n        whiteCont[address(this)] = true;\r\n        backAddr = 0x9E8E36D5C1DB8479B7155BD2b4b5922A05D95066;\r\n        durations = 86400;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public {\r\n        require(hasRole(_msgSender()), \"must have role\");\r\n        _mint(to, amount);\r\n    }\r\n    \r\n    function burn(address addr, uint256 amount) public {\r\n        require(hasRole(_msgSender()), \"must have role\");\r\n        _burn(addr, amount);\r\n    }\r\n    \r\n    function hasRole(address addr) public view returns (bool) {\r\n        return role[addr];\r\n    }\r\n\r\n    function setRole(address addr, bool val) public {\r\n        require(hasRole(_msgSender()), \"must have role\");\r\n        role[addr] = val;\r\n    }\r\n    \r\n    function setWhiteCont(address addr, bool val) public {\r\n        require(hasRole(_msgSender()), \"must have role\");\r\n        whiteCont[addr] = val;\r\n    }\r\n    \r\n\tfunction withdrawErc20(address conaddr, uint256 amount, address addr) public {\r\n\t    require(hasRole(_msgSender()), \"must have role\");\r\n        IERC20(conaddr).transfer(addr, amount);\r\n\t}\r\n\t\r\n\tfunction withdrawETH(uint256 amount, address addr) public {\r\n\t    require(hasRole(_msgSender()), \"must have role\");\r\n\t\tpayable(addr).transfer(amount);\r\n\t}\r\n    \r\n    function getTeam1(address addr) public view returns (address[] memory) {\r\n        return team1[addr];\r\n    }\r\n    \r\n    function getTeam2(address addr) public view returns (address[] memory) {\r\n        return team2[addr];\r\n    }\r\n    \r\n    function getTeam3(address addr) public view returns (address[] memory) {\r\n        return team3[addr];\r\n    }\r\n    \r\n    function getData(address addr) public view returns (uint256[31] memory, address, address) {\r\n        uint256 invite = sumInvitePower(addr);\r\n        uint256 claim;\r\n        uint256 half;\r\n        (claim,half) = getClaim(addr, invite);\r\n        uint256 curdate = block.timestamp / durations;\r\n        uint256[31] memory arr = [invite, claim, half, ethBurn, power1, power2, power3, \r\n            sec9Rate, minhold, miners, stakes, data[addr][0], data[addr][1], data[addr][3], \r\n            data[addr][4], data[addr][5], data[addr][6], data[addr][7], data[addr][8], \r\n            team1[addr].length, team2[addr].length, team3[addr].length, totalSupply(), \r\n            balanceOf(addr), address(this).balance,ref_bnbs2,\r\n            ref_bnbs[curdate], ref_nums[curdate][addr][1], \r\n            ref_bnbs[curdate - 1], ref_nums[curdate - 1][addr][1], ref_bnbs[curdate - 2]];\r\n        return (arr, boss[addr], backAddr);\r\n    }\r\n    \r\n    function setData(uint256[] memory confs) public {\r\n        require(hasRole(_msgSender()), \"must have role\");\r\n        ethBurn  = confs[0];\r\n        power1   = confs[1];\r\n        power2   = confs[2];\r\n        power3   = confs[3];\r\n        sec9Rate = confs[4];\r\n        minhold  = confs[5];\r\n    }\r\n    \r\n    function setBack(address back) public {\r\n        require(hasRole(_msgSender()), \"must have role\");\r\n        backAddr = back;\r\n    }\r\n    \r\n    function getClaim(address addr, uint256 invitePower) public view returns(uint256, uint256) {\r\n        uint256 claimNum = data[addr][2];\r\n        uint256 etime = data[addr][5];\r\n        \r\n        uint256 half = 1;\r\n        if (totalSupply()        < 1 * 10 ** 25) {\r\n            half = 1; // 100\r\n        } else if (totalSupply() < 2 * 10 ** 25) {\r\n            half = 2; // 50\r\n        } else if (totalSupply() < 5 * 10 ** 25) {\r\n            half = 4; // 25\r\n        } else if (totalSupply() < 1 * 10 ** 26) {\r\n            half = 8; // 12.5\r\n        } else if (totalSupply() < 5 * 10 ** 26) {\r\n            half = 16; // 6.25\r\n        } else if (totalSupply() < 10 * 10 ** 26) {\r\n            half = 32; // 3.125\r\n        } else if (totalSupply() < maxnum) {\r\n            half = 64; // 1.5625\r\n        } else {\r\n            return (0, 0);\r\n        }\r\n        \r\n        // plus mining claim\r\n        if (data[addr][0] > 0 && etime > data[addr][1]) {\r\n            uint256 power = 100 + data[addr][6] + invitePower;\r\n            \r\n            if (etime > block.timestamp) {\r\n                etime = block.timestamp;\r\n            }\r\n            \r\n            claimNum += (etime - data[addr][1]) / 27 * power * sec9Rate / half;\r\n        }\r\n        \r\n        return (claimNum, half);\r\n    }\r\n    \r\n    function sumInvitePower(address addr) public view returns (uint256) {\r\n        uint256 total = 0;\r\n        for (uint256 i=0; i<team1[addr].length; i++) {\r\n            if (data[team1[addr][i]][5] > block.timestamp) {\r\n                total += power1;\r\n            }\r\n        }\r\n        for (uint256 i=0; i<team2[addr].length; i++) {\r\n            if (data[team2[addr][i]][5] > block.timestamp) {\r\n                total += power2;\r\n            }\r\n        }\r\n        for (uint256 i=0; i<team3[addr].length; i++) {\r\n            if (data[team3[addr][i]][5] > block.timestamp) {\r\n                total += power3;\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n    \r\n    function doStart(address invite) public payable {\r\n        require(totalSupply() <= maxnum);\r\n        require(msg.value >= ethBurn);\r\n        \r\n        payable(backAddr).transfer(msg.value * 80 / 100);\r\n        \r\n        if (boss[_msgSender()] == address(0) && _msgSender() != invite && invite != address(0)) {\r\n            boss[_msgSender()] = invite;\r\n            team1[invite].push(_msgSender());\r\n            \r\n            // save : the users every day invite\r\n            uint256 curdate = block.timestamp / durations;\r\n            if (ref_nums[curdate][invite][0] == 0) {\r\n                ref_users[curdate].push(invite);\r\n            }\r\n            ref_nums[curdate][invite][0] += 1;\r\n            // save end\r\n            \r\n            address invite2 = boss[invite];\r\n            if (invite2 != address(0) && invite2 != _msgSender()) {\r\n                team2[invite2].push(_msgSender());\r\n                \r\n                invite2 = boss[invite2];\r\n                if (invite2 != address(0) && invite2 != _msgSender()) {\r\n                    team3[invite2].push(_msgSender());\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (data[_msgSender()][0] > 0) {\r\n            uint256 claim;\r\n            (claim,) = getClaim(_msgSender(), sumInvitePower(_msgSender()));\r\n            data[_msgSender()][2] = claim;\r\n        }\r\n        \r\n        data[_msgSender()][0] = block.timestamp;\r\n        data[_msgSender()][1] = block.timestamp;\r\n        data[_msgSender()][5] = block.timestamp +  durations;\r\n\r\n        if (!mine[_msgSender()]) {\r\n            mine[_msgSender()] = true;\r\n            miners++;\r\n        }\r\n    }\r\n    \r\n    function doClaimRefs(uint256 index) public {\r\n        uint256 curdate = block.timestamp / durations - 1;\r\n        \r\n        require(ref_nums[curdate][_msgSender()][0] > 0);\r\n        require(ref_nums[curdate][_msgSender()][1] == 0);\r\n        require(index < 15);\r\n\r\n        address[] memory tops2;\r\n        \r\n        (, tops2) = doRanks(curdate);\r\n        require(tops2[index] == _msgSender());\r\n        \r\n        uint8[15] memory ranks = [16,14,12,10,9,8,7,6,5,4,3,2,2,1,1];\r\n        uint256 todayReal = (ref_bnbs[curdate] + ref_bnbs[curdate-1] / 2) / 2;\r\n        uint256 should = todayReal * ranks[index] / 100;\r\n\r\n        payable(_msgSender()).transfer(should);\r\n        ref_nums[curdate][_msgSender()][1] += should;\r\n    }\r\n\r\n    function doRanks(uint256 d) public view returns(uint256[] memory, address[] memory) {\r\n        uint256 len = ref_users[d].length;\r\n        uint256[] memory tops = new uint256[](len);\r\n        address[] memory tops2= new address[](len);\r\n        \r\n        for (uint256 j=0; j<len; j++) {\r\n            tops[j] = ref_nums[d][ref_users[d][j]][0];\r\n            tops2[j] = ref_users[d][j];\r\n        }\r\n\r\n        if (len < 2) {\r\n            return (tops, tops2);\r\n        }\r\n\r\n        for (uint256 j=0; j<len-1; j++) {\r\n            for (uint256 i=0; i<len-1-j; i++) {\r\n                if (tops[i] < tops[i + 1]) {\r\n                    uint256 temp = tops[i];\r\n                    tops[i] = tops[i + 1];\r\n                    tops[i + 1] = temp;\r\n\r\n                    address temp2 = tops2[i];\r\n                    tops2[i] = tops2[i + 1];\r\n                    tops2[i + 1] = temp2;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (tops, tops2);\r\n    }\r\n\r\n    function doClaim() public payable {\r\n        require(msg.value >= ethBurn / 10);\r\n        \r\n        uint256 curdate = block.timestamp / durations;\r\n        ref_bnbs[curdate] += msg.value;\r\n        ref_bnbs2 += msg.value;\r\n\r\n        uint256 canClaim;\r\n        (canClaim,) = getClaim(_msgSender(), sumInvitePower(_msgSender()));\r\n        require(totalSupply() + canClaim <= maxnum);\r\n        \r\n        if (canClaim > 0) {\r\n            _mint(_msgSender(), canClaim);\r\n            \r\n            data[_msgSender()][1] = block.timestamp;\r\n            data[_msgSender()][2] = 0;\r\n        }\r\n    }\r\n    \r\n    function stake2(uint256 amount) public payable {\r\n        _transfer(_msgSender(), address(this), amount);\r\n        data[_msgSender()][7] += amount;\r\n        data[_msgSender()][8] = 0;\r\n        stakes += amount;\r\n    }\r\n\r\n    function unstake() public payable {\r\n        require(data[_msgSender()][3] + (durations * 3) < block.timestamp);\r\n        _transfer(address(this), _msgSender(), data[_msgSender()][7]);\r\n        stakes -= data[_msgSender()][7];\r\n        data[_msgSender()][7] = 0;\r\n    }\r\n\r\n    function doAward() public {\r\n        require(data[_msgSender()][3] + durations < block.timestamp);\r\n        require(data[_msgSender()][7] >= minhold);\r\n        \r\n        uint256 total = address(this).balance - ref_bnbs2;\r\n        \r\n        uint256 award = data[_msgSender()][7] * total / stakes / 2;\r\n        payable(_msgSender()).transfer(award);\r\n        \r\n        data[_msgSender()][4] += award;\r\n        data[_msgSender()][3] =  block.timestamp;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"doClaimRefs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"doRanks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invite\",\"type\":\"address\"}],\"name\":\"doStart\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invitePower\",\"type\":\"uint256\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"uint256[31]\",\"name\":\"\",\"type\":\"uint256[31]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTeam1\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTeam2\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTeam3\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"back\",\"type\":\"address\"}],\"name\":\"setBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"confs\",\"type\":\"uint256[]\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setWhiteCont\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"sumInvitePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://09f9c2cfc384380bc78da95ac9efc189f06adc1b9744e1aa1f7ebd3da72f7037"}