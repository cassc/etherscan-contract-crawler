{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StrainzTokens/StrainzToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../StrainzNFT/StrainzNFT.sol\\\";\\n\\ncontract StrainzToken is ERC20 {\\n    StrainzMaster master;\\n\\n\\n    constructor()  ERC20(\\\"Strainz\\\", \\\"STRAINZ\\\") {\\n        master = StrainzMaster(msg.sender);\\n    }\\n    modifier onlyMaster() {\\n        require(msg.sender == address(master));\\n        _;\\n    }\\n    modifier onlyStrainzNFT {\\n        require(msg.sender == address(master.strainzNFT()));\\n        _;\\n    }\\n\\n    modifier onlyMarketplace {\\n        require(msg.sender == address(master.strainzMarketplace()));\\n        _;\\n    }\\n\\n    function decimals() public pure override returns(uint8) {\\n        return 0;\\n    }\\n\\n    function harvestMint(address receiver, uint amount) public onlyStrainzNFT {\\n        _mint(receiver, amount);\\n    }\\n\\n    function migrateMint(address receiver, uint amount) public onlyMaster {\\n        _mint(receiver, amount);\\n    }\\n\\n    function breedBurn(address account, uint amount) public onlyStrainzNFT {\\n        _burn(account, amount);\\n    }\\n\\n    function waterBurn(address account, uint amount) public onlyStrainzNFT {\\n        _burn(account, amount);\\n    }\\n\\n    function marketPlaceBurn(address account, uint amount) public onlyMarketplace {\\n        _burn(account, amount);\\n    }\\n\\n    function burn(uint amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/StrainzNFT/StrainzNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StrainzDNA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../StrainzMaster.sol\\\";\\nimport \\\"../v1/IStrainzV1.sol\\\";\\nimport \\\"./StrainMetadata.sol\\\";\\n\\ncontract StrainzNFT is ERC721Enumerable, StrainzDNA, IStrainMetadata {\\n\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n\\n    event Minted(uint tokenId);\\n    event Breed(uint parent1, uint parent2, uint child);\\n    event Composted(uint tokenId);\\n\\n\\n    uint public wateringPenaltyPerDay = 10; // %\\n    uint public growFactor = 255;\\n    uint public compostFactor = 100;\\n    uint public breedingCostFactor = 5;\\n    uint public breedFertilizerCost = 1000e18;\\n\\n\\n    mapping(uint => StrainMetadata) public strainData;\\n\\n    StrainzMaster master;\\n\\n    modifier onlyMaster {\\n        require(msg.sender == address(master));\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"Strainz\\\", \\\"STRAINZ\\\") {\\n        master = StrainzMaster(msg.sender);\\n    }\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"https://api.v2.strainz.tech/strain/\\\";\\n    }\\n\\n    function mintTo(address receiver, string memory prefix, string memory postfix, uint dna, uint generation, uint growRate) private returns (uint) {\\n        _tokenIdCounter.increment();\\n        uint tokenId = _tokenIdCounter.current();\\n        _mint(receiver, tokenId);\\n        strainData[tokenId] = StrainMetadata(tokenId, prefix, postfix, dna, generation, growRate, block.timestamp, growRate * breedingCostFactor);\\n        emit Minted(tokenId);\\n        return tokenId;\\n    }\\n\\n    // mint promotional unique strainz (will get custom images)\\n    function mintPromotion(address receiver, string memory prefix, string memory postfix, uint dna) public onlyMaster {\\n        mintTo(receiver, prefix, postfix, dna, 0, 255);\\n    }\\n\\n    // breed two strainz\\n    function breed(uint _first, uint _second, bool breedFertilizer) public {\\n        require(ownerOf(_first) == msg.sender && ownerOf(_second) == msg.sender);\\n        StrainMetadata storage strain1 = strainData[_first];\\n        StrainMetadata storage strain2 = strainData[_second];\\n\\n        uint strainzCost = (strain1.breedingCost + strain2.breedingCost) / 2;\\n\\n        // Burn cost\\n        master.strainzToken().breedBurn(msg.sender, strainzCost);\\n\\n        uint newStrainId = mixBreedMint(strain1, strain2, breedFertilizer);\\n        uint averageGrowRate = (strain1.growRate + strain2.growRate) / 2;\\n        // Burn fertilizer cost\\n        if (breedFertilizer && averageGrowRate >= 128) {\\n            master.seedzToken().breedBurn(msg.sender, breedFertilizerCost);\\n            master.strainzAccessory().breedAccessories(strain1.id, strain2.id, newStrainId);\\n        }\\n\\n\\n        emit Breed(strain1.id, strain2.id, newStrainId);\\n\\n    }\\n\\n    function mixBreedMint(StrainMetadata storage strain1, StrainMetadata storage strain2, bool breedFertilizer) private returns (uint) {\\n        uint newDNA = mixDNA(strain1.dna, strain2.dna);\\n        uint generation = max(strain1.generation, strain2.generation) + 1;\\n\\n        bool mix = block.number % 2 == 0;\\n\\n        strain1.breedingCost = strain1.breedingCost + strain1.growRate * breedingCostFactor;\\n        strain2.breedingCost = strain2.breedingCost + strain2.growRate * breedingCostFactor;\\n\\n        return mintTo(\\n            msg.sender,\\n            mix ? strain1.prefix : strain2.prefix,\\n            mix ? strain2.postfix : strain1.postfix,\\n            newDNA, generation,\\n            mixStat(strain1.growRate, strain2.growRate, breedFertilizer)\\n        );\\n    }\\n\\n\\n    function compost(uint strainId) public {\\n        require(ownerOf(strainId) == msg.sender);\\n        StrainMetadata storage strain = strainData[strainId];\\n        master.strainzAccessory().detachAll(strainId);\\n        _burn(strainId);\\n        master.seedzToken().compostMint(msg.sender, strain.growRate * 1e18 * compostFactor / 100);\\n        emit Composted(strainId);\\n    }\\n\\n    function getWateringCost(uint tokenId) public view returns (uint) {\\n        StrainMetadata storage strain = strainData[tokenId];\\n        uint currentGrowRate = getCurrentGrowRateForPlant(tokenId);\\n\\n        uint diff = strain.growRate - currentGrowRate;\\n\\n        uint amountOfPlants = balanceOf(ownerOf(tokenId));\\n        uint penalty = 1;\\n        if (amountOfPlants > 250) {\\n            penalty = 9;\\n        } else if (amountOfPlants > 200) {\\n            penalty = 8;\\n        } else if (amountOfPlants > 100) {\\n            penalty = 7;\\n        } else if (amountOfPlants > 50) {\\n            penalty = 5;\\n        } else if (amountOfPlants > 10) {\\n            penalty = 3;\\n        } else if (amountOfPlants > 5) {\\n            penalty = 2;\\n        }\\n\\n        return penalty * diff;\\n    }\\n\\n    function harvestAndWaterAll() public {\\n        uint numberOfTokens = balanceOf(msg.sender);\\n        require(numberOfTokens > 0);\\n        uint sum = 0;\\n        for (uint i = 0; i < numberOfTokens; i++) {\\n            StrainMetadata storage strain = strainData[tokenOfOwnerByIndex(msg.sender, i)];\\n            sum += harvestableAmount(strain.id) - getWateringCost(strain.id);\\n            strain.lastHarvest = block.timestamp;\\n        }\\n        master.strainzToken().harvestMint(msg.sender, sum);\\n    }\\n\\n\\n    function harvestableAmount(uint tokenId) public view returns (uint) {\\n        StrainMetadata storage strain = strainData[tokenId];\\n        uint timeSinceLastHarvest = block.timestamp - strain.lastHarvest;\\n\\n        uint fertilizerBonus = master.seedzToken().getHarvestableFertilizerAmount(tokenId, strain.lastHarvest);\\n\\n        uint accessoryBonus = master.strainzAccessory().getHarvestableAccessoryAmount(tokenId, timeSinceLastHarvest);\\n\\n        uint accumulatedAmount = getAccumulatedHarvestAmount(strain);\\n\\n        return accumulatedAmount + fertilizerBonus + accessoryBonus;\\n    }\\n\\n    function getAccumulatedHarvestAmount(StrainMetadata storage strain) private view returns (uint) {\\n        uint wateringRange = min(block.timestamp - strain.lastHarvest, 9 days);\\n\\n        uint growRate = strain.growRate * 1647058824;\\n\\n        uint harvestableSum = (((20 * growRate * wateringRange * 1 days) - (growRate * wateringRange * wateringRange))) / (20 * 1 days * 1 days) / 1000000000;\\n\\n        uint stagnationSum = 0;\\n        if (block.timestamp - strain.lastHarvest > 9 days) {\\n            stagnationSum = (block.timestamp - strain.lastHarvest + 9 days) * growRate * 10 / 100000000000 days;\\n        }\\n        return harvestableSum + stagnationSum;\\n    }\\n\\n    function getCurrentGrowRateForPlant(uint plantId) public view returns (uint) {\\n        StrainMetadata storage strain = strainData[plantId];\\n        uint timeSinceLastWatering = min(block.timestamp - strain.lastHarvest, 9 days);\\n        return max(16, strain.growRate - (strain.growRate * wateringPenaltyPerDay * timeSinceLastWatering / 100 days));\\n    }\\n\\n\\n    function max(uint a, uint b) private pure returns (uint) {\\n        if (a > b) {\\n            return a;\\n        } else return b;\\n    }\\n\\n    function min(uint a, uint b) private pure returns (uint) {\\n        if (a < b) {\\n            return a;\\n        } else return b;\\n    }\\n\\n    function mixStat(uint rate1, uint rate2, bool breedFertilizer) private pure returns (uint) {\\n        uint average = (rate1 + rate2) / 2;\\n        return breedFertilizer ? min(average + 10, 255) : (average > (25 + 16) ? average - 25 : 16);\\n    }\\n\\n    mapping(uint => bool) blacklist; // tokenId -> blacklisted\\n    mapping(address => bool) blacklistedUser; // address -> blacklisted\\n\\n    function blacklistCheaters(uint[] calldata tokens, address[] calldata users) public onlyMaster {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            blacklist[tokens[i]] = true;\\n        }\\n        for (uint i = 0; i < users.length; i++) {\\n            blacklistedUser[users[i]] = true;\\n        }\\n    }\\n\\n    IStrainzV1 strainzV1NFT = IStrainzV1(0x59516426a8BB328d2F546B05421CBc047042e38f);\\n    IERC20 strainzV1Token = IERC20(0x7F1AddbB144363730a433A21ACDaB7b36F988252);\\n\\n    function migrate(address user) public onlyMaster returns (uint) {\\n\\n\\n        uint numberOfStrainz = min(50, strainzV1NFT.balanceOf(user));\\n\\n        uint sumToHarvest = 0;\\n        bool userBlacklisted = blacklistedUser[user];\\n        //migrate NFT\\n        if (numberOfStrainz > 0) {\\n            for (uint i = 0; i < numberOfStrainz; i++) {\\n                uint id = strainzV1NFT.tokenOfOwnerByIndex(user, 0); // always the first token, because it gets transferred\\n                StrainMetadata memory strain = getV1Strain(id);\\n                strainzV1NFT.transferFrom(user, address(this), id); // burn v1\\n\\n\\n                if (!blacklist[id] && !userBlacklisted) {\\n                    uint timeSinceLastHarvest = block.timestamp - strain.lastHarvest;\\n                    uint amountToHarvest = (strain.growRate * 255 * timeSinceLastHarvest) / 24 weeks;\\n                    // old formular\\n                    sumToHarvest += amountToHarvest;\\n                    uint migratedId = mintTo(user, strain.prefix, strain.postfix, strain.dna, strain.generation, max(16, strain.growRate));\\n                    strainData[migratedId].breedingCost = getNewBreedingCost(strain);\\n\\n                    // accessories\\n                    bool hasJoint = getGene(strain.dna, 4) == 1;\\n                    bool hasSunglasses = getGene(strain.dna, 5) == 1;\\n                    bool hasEarring = getGene(strain.dna, 6) == 1;\\n                    if (hasJoint || hasSunglasses || hasEarring) {\\n                        master.strainzAccessory().migrateMint(migratedId, hasJoint, hasSunglasses, hasEarring);\\n                    }\\n\\n                }\\n            }\\n        }\\n\\n\\n        uint amountOfStrainzV1Tokens = strainzV1Token.balanceOf(user);\\n        strainzV1Token.transferFrom(user, address(this), amountOfStrainzV1Tokens);\\n        sumToHarvest += amountOfStrainzV1Tokens;\\n\\n        return userBlacklisted ? 0 : sumToHarvest;\\n    }\\n\\n    function getV1Strain(uint strainId) private view returns (StrainMetadata memory) {\\n        (uint id,\\n        string memory prefix,\\n        string memory postfix,\\n        uint dna,\\n        uint generation,\\n        uint growRate, // 0-255\\n        uint lastHarvest,\\n        uint breedingCost) = strainzV1NFT.strainData(strainId);\\n\\n        return StrainMetadata(id, prefix, postfix, dna, generation, max(16, growRate), lastHarvest, breedingCost);\\n    }\\n\\n    function getNewBreedingCost(StrainMetadata memory strain) private pure returns (uint) {\\n        if (strain.breedingCost == 1000) {\\n            return strain.growRate * 5;\\n        } else if (strain.breedingCost == 2000) {\\n            return strain.growRate * 5 * 2;\\n        } else if (strain.breedingCost == 4000) {\\n            return strain.growRate * 5 * 3;\\n        } else if (strain.breedingCost == 8000) {\\n            return strain.growRate * 5 * 4;\\n        } else if (strain.breedingCost == 16000) {\\n            return strain.growRate * 5 * 5;\\n        } else if (strain.breedingCost == 32000) {\\n            return strain.growRate * 5 * 6;\\n        } else {\\n            return strain.growRate * 5 * 7;\\n        }\\n    }\\n\\n    function setWateringPenalty(uint newPenalty) public onlyMaster {\\n        wateringPenaltyPerDay = newPenalty;\\n    }\\n\\n    function setGrowFactor(uint newGrowFactor) public onlyMaster {\\n        growFactor = newGrowFactor;\\n    }\\n\\n    function setCompostFactor(uint newCompostFactor) public onlyMaster {\\n        compostFactor = newCompostFactor;\\n    }\\n\\n    function setBreedFertilizerCost(uint newBreedFertilizerCost) public onlyMaster {\\n        breedFertilizerCost = newBreedFertilizerCost;\\n    }\\n\\n    function setBreedingCostFactor(uint newBreedingCostFactor) public onlyMaster {\\n        breedingCostFactor = newBreedingCostFactor;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StrainzNFT/StrainzDNA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract StrainzDNA {\\n\\n    struct DNAData {\\n        uint potGene;\\n        uint headGene;\\n        uint bodyGene;\\n        uint faceGene;\\n        uint jointGene;\\n        uint sunglassesGene;\\n        uint earringGene;\\n        uint redGene;\\n        uint greenGene;\\n        uint blueGene;\\n    }\\n\\n    function getGene(uint dna, uint n) public pure returns (uint) {\\n        return (dna / (10 ** (15 - n))) % 10;\\n    }\\n\\n\\n    function getBlueGene(uint dna) public pure returns (uint){\\n        return dna % 1000;\\n    }\\n\\n    function getGreenGene(uint dna) public pure returns (uint) {\\n        return (dna % 1000000 - (dna % 1000)) / 1000;\\n    }\\n\\n    function getRedGene(uint dna) public pure returns (uint) {\\n        return (dna % 1000000000 - (dna % 1000000)) / 1000000;\\n    }\\n\\n    function mixDNA(uint dna1, uint dna2) public view returns (uint) {\\n        uint randomValue = random(256);\\n        DNAData memory data = DNAData(\\n            ((getGene(dna1, 0) * getGene(dna2, 0) * randomValue) % 7) + 1, // pot\\n            ((getGene(dna1, 1) * getGene(dna2, 1) * randomValue) % 7) + 1, // head\\n            ((getGene(dna1, 2) * getGene(dna2, 2) * randomValue) % 6) + 1, // body\\n            ((getGene(dna1, 3) * getGene(dna2, 3) * randomValue) % 5) + 1, // face\\n            0, // joint (not used)\\n            0, // sunglass (not used)\\n            0, // earring (not used)\\n            (getRedGene(dna1) * getRedGene(dna2) + randomValue) % 256, // red\\n            (getGreenGene(dna1) * getGreenGene(dna2) + randomValue) % 256, // green\\n            (getBlueGene(dna1) * getBlueGene(dna2) + randomValue) % 256 // blue\\n        );\\n\\n\\n        uint newDNA = ((10 ** 15) * data.potGene) + ((10 ** 14) * data.headGene) + ((10 ** 13) * data.bodyGene)\\n        + ((10 ** 12) * data.faceGene) + ((10 ** 11) * data.jointGene) + ((10 ** 10) * data.sunglassesGene) + ((10 ** 9) * data.earringGene)\\n        + ((10 ** 6) * data.redGene) + ((10 ** 3) * data.greenGene) + (data.blueGene % 256);\\n\\n        return newDNA;\\n    }\\n\\n\\n    function clamp(uint value, uint min, uint max) public pure returns (uint) {\\n        return (value < min) ? min : (value > max) ? max : value;\\n    }\\n\\n    function random(uint range) internal view returns (uint) {\\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp))) % range;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StrainzMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StrainzNFT/StrainzNFT.sol\\\";\\nimport \\\"./StrainzTokens/StrainzToken.sol\\\";\\nimport \\\"./StrainzTokens/SeedzToken.sol\\\";\\nimport \\\"./StrainzAccessory.sol\\\";\\nimport \\\"./StrainzMarketplace.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract StrainzMaster is Ownable {\\n\\n    StrainzNFT public strainzNFT = new StrainzNFT();\\n    StrainzToken public strainzToken = new StrainzToken();\\n    SeedzToken public seedzToken = new SeedzToken(msg.sender);\\n    StrainzAccessory public strainzAccessory = new StrainzAccessory(msg.sender);\\n    StrainzMarketplace public strainzMarketplace = new StrainzMarketplace();\\n    constructor() {\\n\\n    }\\n\\n    bool migrationActive = true;\\n\\n    function migrate() public {\\n        require(migrationActive);\\n        uint amountToHarvest = strainzNFT.migrate(msg.sender);\\n        strainzToken.migrateMint(msg.sender, amountToHarvest);\\n    }\\n\\n    function setMigration(bool active) public onlyOwner {\\n        migrationActive = active;\\n    }\\n\\n    function setGrowFertilizerDetails(uint newCost, uint newBoost) public onlyOwner {\\n        seedzToken.setGrowFertilizerDetails(newCost, newBoost);\\n    }\\n\\n    function setBreedFertilizerCost(uint newBreedFertilizerCost) public onlyOwner {\\n        strainzNFT.setBreedFertilizerCost(newBreedFertilizerCost);\\n    }\\n    function setBreedingCostFactor(uint newBreedingCostFactor) public onlyOwner {\\n        strainzNFT.setBreedingCostFactor(newBreedingCostFactor);\\n    }\\n\\n    function createNewAccessory(uint bonus) public onlyOwner {\\n        strainzAccessory.createNewAccessory(bonus, msg.sender);\\n    }\\n\\n    function setAccessoryBonus(uint accessoryType, uint bonus) public onlyOwner {\\n        strainzAccessory.setAccessoryBonus(accessoryType, bonus);\\n    }\\n\\n    function setWateringPenalty(uint newPenalty) public onlyOwner {\\n        strainzNFT.setWateringPenalty(newPenalty);\\n    }\\n\\n    function setGrowFactor(uint newGrowFactor) public onlyOwner {\\n        strainzNFT.setGrowFactor(newGrowFactor);\\n    }\\n\\n    function setCompostFactor(uint newCompostFactor) public onlyOwner {\\n        strainzNFT.setCompostFactor(newCompostFactor);\\n    }\\n\\n    function blacklistCheaters(uint[] calldata tokens, address[] calldata users) public onlyOwner {\\n        strainzNFT.blacklistCheaters(tokens, users);\\n    }\\n\\n    function addSeedzPool(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\\n        seedzToken.add(_allocPoint, _lpToken, _withUpdate);\\n    }\\n    function setSeedzPool(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\\n        seedzToken.set(_pid, _allocPoint, _withUpdate);\\n    }\\n\\n    function setSeedzPerBlock(uint _seedzPerBlock) public onlyOwner {\\n        seedzToken.setSeedzPerBlock(_seedzPerBlock);\\n    }\\n    function mintPromotion(address receiver, string memory prefix, string memory postfix, uint dna) public onlyOwner {\\n        strainzNFT.mintPromotion(receiver, prefix, postfix, dna);\\n    }\\n\\n    function setMarketplaceFee(uint newFee) public onlyOwner {\\n        strainzMarketplace.setMarketplaceFee(newFee);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v1/IStrainzV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../StrainzNFT/StrainMetadata.sol\\\";\\n\\nabstract contract IStrainzV1 is IERC721Enumerable, IStrainMetadata {\\n    function harvestAll() public virtual;\\n    mapping(uint => StrainMetadata) public strainData;\\n}\\n\"\r\n    },\r\n    \"contracts/StrainzNFT/StrainMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStrainMetadata {\\n    struct StrainMetadata {\\n        uint id;\\n        string prefix;\\n        string postfix;\\n        uint dna;\\n        uint generation;\\n        uint growRate; // 0-255\\n        uint lastHarvest;\\n        uint breedingCost;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/StrainzTokens/SeedzToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../StrainzMaster.sol\\\";\\n\\ncontract SeedzToken is ERC20 {\\n\\n    StrainzMaster master;\\n    modifier onlyMaster() {\\n        require(msg.sender == address(master));\\n        _;\\n    }\\n    modifier onlyStrainzNFT() {\\n        require(msg.sender == address(master.strainzNFT()));\\n        _;\\n    }\\n\\n    mapping(uint => uint) public lastTimeGrowFertilizerUsedOnPlant;\\n\\n    event FertilizerBought(address buyer, uint plantId);\\n\\n    uint public growFertilizerCost = 500e18;\\n    uint public growFertilizerBoost = 100;\\n\\n    function buyGrowFertilizer(uint plantId) public {\\n        uint cost = growFertilizerCost;\\n\\n        require(balanceOf(msg.sender) >= cost);\\n        require(lastTimeGrowFertilizerUsedOnPlant[plantId] + 1 weeks < block.timestamp);\\n        _burn(msg.sender, cost);\\n        lastTimeGrowFertilizerUsedOnPlant[plantId] = block.timestamp;\\n        emit FertilizerBought(msg.sender, plantId);\\n    }\\n\\n    function setGrowFertilizerDetails(uint newCost, uint newBoost) public onlyMaster {\\n        growFertilizerCost = newCost;\\n        growFertilizerBoost = newBoost;\\n    }\\n    // LP Pools by Sushiswap: https://etherscan.io/address/0xc2edad668740f1aa35e4d8f227fb8e17dca888cd#code\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;     // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of SEEDZ\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accSeedzPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accSeedzPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken;           // Address of LP token contract.\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. SEEDZ to distribute per block.\\n        uint256 lastRewardBlock;  // Last block number that SEEDZ distribution occurs.\\n        uint256 accSeedzPerShare; // Accumulated SEEDZ per share, times 1e12. See below.\\n    }\\n\\n    // SEEDZ tokens created per block.\\n    uint256 public seedzPerBlock = 5e17;\\n\\n    function setSeedzPerBlock(uint _seedzPerBlock) public onlyMaster {\\n        massUpdatePools();\\n        seedzPerBlock = _seedzPerBlock;\\n\\n    }\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n\\n    constructor(address owner) ERC20(\\\"Seedz\\\", \\\"SEEDZ\\\") {\\n        master = StrainzMaster(msg.sender);\\n        _mint(owner, 125000 * 1e18); // initial liquidity\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyMaster {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint += _allocPoint;\\n        poolInfo.push(PoolInfo({\\n        lpToken : _lpToken,\\n        allocPoint : _allocPoint,\\n        lastRewardBlock : block.number,\\n        accSeedzPerShare : 0\\n        }));\\n    }\\n\\n    // Update the given pool's SEEDZ allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyMaster {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // View function to see pending SEEDZ on frontend.\\n    function pendingSeedz(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accSeedzPerShare = pool.accSeedzPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = block.number - pool.lastRewardBlock;\\n            uint256 seedzReward = multiplier * seedzPerBlock * pool.allocPoint / totalAllocPoint;\\n            accSeedzPerShare += seedzReward * 1e12 / lpSupply;\\n        }\\n        return (user.amount * accSeedzPerShare / 1e12) - user.rewardDebt;\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = block.number - pool.lastRewardBlock;\\n        uint256 seedzReward = multiplier * seedzPerBlock * pool.allocPoint / totalAllocPoint;\\n        _mint(address(this), seedzReward);\\n        pool.accSeedzPerShare += seedzReward * 1e12 / lpSupply;\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for SEEDZ allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = (user.amount * pool.accSeedzPerShare / 1e12) - user.rewardDebt;\\n            safeSeedzTransfer(msg.sender, pending);\\n        }\\n        pool.lpToken.transferFrom(address(msg.sender), address(this), _amount);\\n        user.amount += _amount;\\n        user.rewardDebt = user.amount * pool.accSeedzPerShare / 1e12;\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 pending = (user.amount * pool.accSeedzPerShare / 1e12) - user.rewardDebt;\\n        safeSeedzTransfer(msg.sender, pending);\\n        user.amount -= _amount;\\n        user.rewardDebt = user.amount * pool.accSeedzPerShare / 1e12;\\n\\n        pool.lpToken.transfer(address(msg.sender), _amount);\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.lpToken.transfer(address(msg.sender), amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Safe SEEDZ transfer function, just in case if rounding error causes pool to not have enough SEEDZ.\\n    function safeSeedzTransfer(address _to, uint256 _amount) internal {\\n        uint256 seedzBal = balanceOf(address(this));\\n        if (_amount > seedzBal) {\\n            _transfer(address(this), _to, seedzBal);\\n        } else {\\n            _transfer(address(this), _to, _amount);\\n        }\\n    }\\n\\n\\n    function compostMint(address receiver, uint amount) public onlyStrainzNFT {\\n        _mint(receiver, amount);\\n    }\\n\\n    function getHarvestableFertilizerAmount(uint strainId, uint lastHarvest) public view returns (uint) {\\n        uint fertilizerBonus = 0;\\n        uint fertilizerAttachTime = lastTimeGrowFertilizerUsedOnPlant[strainId];\\n        if (fertilizerAttachTime > 0) {\\n            uint start = max(fertilizerAttachTime, lastHarvest);\\n\\n            uint end = min(start + 1 weeks, block.timestamp);\\n\\n            fertilizerBonus = (end - start) * growFertilizerBoost / 1 days;\\n        }\\n        return fertilizerBonus;\\n    }\\n\\n    function breedBurn(address account, uint amount) public onlyStrainzNFT {\\n        _burn(account, amount);\\n    }\\n\\n\\n    function max(uint a, uint b) private pure returns (uint) {\\n        if (a > b) {\\n            return a;\\n        } else return b;\\n    }\\n\\n    function min(uint a, uint b) private pure returns (uint) {\\n        if (a < b) {\\n            return a;\\n        } else return b;\\n    }\\n\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/StrainzAccessory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./StrainzMaster.sol\\\";\\n\\n\\ncontract StrainzAccessory is ERC721Enumerable, IERC721Receiver {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n    // accessoryId -> accessoryType (Joint, Sunglasses, Earring, ...)\\n    mapping(uint => uint) public accessoryTypeByTokenId;\\n    // accessoryId -> time\\n    mapping(uint => uint) public timeOfLastAttachment;\\n\\n    // strainzNFT -> tokenIds\\n    mapping(uint => uint[]) public accessoriesByStrainId;\\n    function getAccessoriesByStrainId(uint strainId) public view returns (uint[] memory) {\\n        return accessoriesByStrainId[strainId];\\n    }\\n\\n\\n    uint numberOfAccessoryTypes = 0;\\n    mapping(uint => uint) public growBonusForType;\\n\\n    event AccessoryAttached(uint accessoryId, uint strainId);\\n\\n    StrainzMaster master;\\n    modifier onlyMaster {\\n        require(msg.sender == address(master));\\n        _;\\n    }\\n\\n    modifier onlyStrainzNFT {\\n        require(msg.sender == address(master.strainzNFT()));\\n        _;\\n    }\\n\\n    constructor(address owner) ERC721(\\\"Strainz Accessory\\\", \\\"ACCESSORY\\\") {\\n        master = StrainzMaster(msg.sender);\\n        createNewAccessory(10, owner);\\n        createNewAccessory(25, owner);\\n        createNewAccessory(50, owner);\\n    }\\n\\n    // creates new accessory (breeding)\\n    function mintAccessory(uint typeId, uint strainId) private {\\n        uint accessoryId = mint(typeId, address(this));\\n        accessoriesByStrainId[strainId].push(accessoryId);\\n        timeOfLastAttachment[accessoryId] = block.timestamp;\\n    }\\n\\n    // creates new accessory (migration)\\n    function migrateMint(uint strainId, bool hasJoint, bool hasSunglasses, bool hasEarring) public onlyStrainzNFT {\\n        if (hasJoint) {\\n            mintAccessory(3, strainId);\\n        }\\n        if (hasSunglasses) {\\n            mintAccessory(2, strainId);\\n        }\\n        if (hasEarring) {\\n            mintAccessory(1, strainId);\\n        }\\n\\n    }\\n\\n    // initial accessories\\n    function mint(uint typeId, address receiver) private returns (uint){\\n        require(typeId <= numberOfAccessoryTypes && typeId > 0);\\n        _tokenIdCounter.increment();\\n        uint accessoryId = _tokenIdCounter.current();\\n        _mint(receiver, accessoryId);\\n        accessoryTypeByTokenId[accessoryId] = typeId;\\n        return accessoryId;\\n    }\\n\\n    // attach accessory on plant\\n    function attachAccessory(uint accessoryId, uint strainId) public {\\n        require(ownerOf(accessoryId) == msg.sender);\\n        require(master.strainzNFT().ownerOf(strainId) == msg.sender);\\n        // no double accessories\\n        require(!sameTypeAlreadyAttached(accessoriesByStrainId[strainId], accessoryTypeByTokenId[accessoryId]));\\n\\n        transferFrom(msg.sender, address(this), accessoryId);\\n        accessoriesByStrainId[strainId].push(accessoryId);\\n        timeOfLastAttachment[accessoryId] = block.timestamp;\\n        emit AccessoryAttached(accessoryId, strainId);\\n    }\\n\\n    // detach accessory (compost)\\n    function detachAccessory(uint accessoryId, uint strainId) private {\\n        uint[] storage accessories = accessoriesByStrainId[strainId];\\n        int index = indexOf(accessories, accessoryId);\\n        require(index >= 0);\\n        remove(accessories, uint(index));\\n        _transfer(address(this), master.strainzNFT().ownerOf(strainId), accessoryId);\\n    }\\n\\n    function getHarvestableAccessoryAmount(uint strainId, uint timeSinceLastHarvest) public view returns (uint) {\\n        uint[] memory accessoryIds = getAccessoriesByStrainId(strainId);\\n\\n        uint accessoryBonus = 0;\\n        for (uint i = 0; i < accessoryIds.length; i++) {\\n            uint accessoryType = accessoryTypeByTokenId[accessoryIds[i]];\\n            uint boost = growBonusForType[accessoryType];\\n            uint timeOfAttachment = timeOfLastAttachment[accessoryIds[i]];\\n            if (timeOfAttachment == 0) {\\n                continue;\\n            }\\n            uint attachTime = min(block.timestamp - timeOfAttachment, timeSinceLastHarvest);\\n\\n            accessoryBonus += attachTime * boost / 1 days;\\n        }\\n        return accessoryBonus;\\n    }\\n\\n\\n    // detach all (compost)\\n    function detachAll(uint strainId) public onlyStrainzNFT {\\n        uint[] memory accessoryIds = accessoriesByStrainId[strainId];\\n        for (uint i = 0; i < accessoryIds.length; i++) {\\n            detachAccessory(accessoryIds[i], strainId);\\n        }\\n    }\\n\\n\\n    function sameTypeAlreadyAttached(uint[] storage array, uint newType) private view returns (bool) {\\n        for (uint i = 0; i < array.length; i++) {\\n            uint existingType = accessoryTypeByTokenId[array[i]];\\n            if (existingType == newType) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // generates accessories based on parents/fertilizer\\n    function breedAccessories(uint strain1Id, uint strain2Id, uint newStrainId) public onlyStrainzNFT {\\n        uint[] storage strain1Accessories = accessoriesByStrainId[strain1Id];\\n        uint[] storage strain2Accessories = accessoriesByStrainId[strain2Id];\\n\\n        for (uint i = 1; i <= numberOfAccessoryTypes; i++) {\\n            bool hasParent1 = sameTypeAlreadyAttached(strain1Accessories, i);\\n            bool hasParent2 = sameTypeAlreadyAttached(strain2Accessories, i);\\n            if (hasParent1 && hasParent2){\\n                mintAccessory(i, newStrainId);\\n            }\\n\\n        }\\n\\n    }\\n\\n    function createNewAccessory(uint bonus, address owner) public onlyMaster {\\n        require(numberOfAccessoryTypes < 10);\\n        numberOfAccessoryTypes++;\\n        growBonusForType[numberOfAccessoryTypes] = bonus;\\n        for (uint i = 0; i < 20; i++) {\\n            mint(numberOfAccessoryTypes, owner);\\n        }\\n    }\\n\\n    function setAccessoryBonus(uint accessoryType, uint bonus) public onlyMaster {\\n        growBonusForType[accessoryType] = bonus;\\n    }\\n\\n\\n    function max(uint a, uint b) private pure returns (uint) {\\n        if (a > b) {\\n            return a;\\n        } else return b;\\n    }\\n\\n    function min(uint a, uint b) private pure returns (uint) {\\n        if (a < b) {\\n            return a;\\n        } else return b;\\n    }\\n\\n    function remove(uint[] storage array, uint index) private {\\n        if (index >= array.length) {\\n            return;\\n        }\\n        array[index] = array[array.length - 1];\\n        array.pop();\\n    }\\n\\n    function indexOf(uint[] storage array, uint tokenId) private view returns (int) {\\n        for (uint i = 0; i < array.length; i++) {\\n            if (array[i] == tokenId) {\\n                return int(i);\\n            }\\n        }\\n        return - 1;\\n    }\\n\\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\\n\\n    function onERC721Received(address, address, uint256, bytes calldata) public pure override returns (bytes4) {\\n        return ERC721_RECEIVED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StrainzMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./StrainzTokens/StrainzToken.sol\\\";\\nimport \\\"./StrainzMaster.sol\\\";\\n\\ncontract StrainzMarketplace is IERC721Receiver {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tradeCounter;\\n    enum TradeStatus {\\n        Open, Closed, Cancelled\\n    }\\n    struct ERC721Trade {\\n        uint id;\\n        address poster;\\n        address nftContractAddress;\\n        uint tokenId;\\n        uint strainzTokenPrice;\\n        TradeStatus status;\\n        address buyer;\\n    }\\n\\n    event ERC721TradeStatusChange(uint tradeId, TradeStatus status);\\n\\n    mapping(uint => ERC721Trade) public erc721Trades;\\n    uint public marketplaceFee = 10;\\n\\n    StrainzMaster master;\\n    modifier onlyMaster {\\n        require(msg.sender == address(master));\\n        _;\\n    }\\n    constructor() {\\n        master = StrainzMaster(msg.sender);\\n    }\\n\\n    function setMarketplaceFee(uint newFee) public onlyMaster {\\n        marketplaceFee = newFee;\\n    }\\n\\n    function getTradeCount() public view returns (uint) {\\n        return _tradeCounter.current();\\n    }\\n\\n    function openERC721Trade(address nftContractAddress, uint tokenId, uint price) public {\\n        IERC721 nftContract = IERC721(nftContractAddress);\\n        require(nftContract.ownerOf(tokenId) == msg.sender);\\n        _tradeCounter.increment();\\n        nftContract.transferFrom(msg.sender, address(this), tokenId);\\n        uint id = _tradeCounter.current();\\n        erc721Trades[id] = ERC721Trade(id, msg.sender, nftContractAddress, tokenId, price, TradeStatus.Open, address(0));\\n\\n        emit ERC721TradeStatusChange(id, TradeStatus.Open);\\n    }\\n\\n    function executeERC721Trade(uint tradeId) public {\\n        ERC721Trade memory trade = erc721Trades[tradeId];\\n        require(trade.status == TradeStatus.Open);\\n        uint marketPlaceShare = trade.strainzTokenPrice * marketplaceFee / 100;\\n\\n        master.strainzToken().marketPlaceBurn(msg.sender, marketPlaceShare);\\n\\n        master.strainzToken().transferFrom(msg.sender, trade.poster, trade.strainzTokenPrice - marketPlaceShare);\\n        IERC721 nftContract = IERC721(trade.nftContractAddress);\\n        nftContract.safeTransferFrom(address(this), msg.sender, trade.tokenId);\\n\\n        erc721Trades[tradeId].status = TradeStatus.Closed;\\n        erc721Trades[tradeId].buyer = msg.sender;\\n        emit ERC721TradeStatusChange(tradeId, TradeStatus.Closed);\\n    }\\n\\n    function cancelERC721Trade(uint tradeId) public {\\n        ERC721Trade memory trade = erc721Trades[tradeId];\\n        require(msg.sender == trade.poster);\\n        require(trade.status == TradeStatus.Open);\\n        IERC721 nftContract = IERC721(trade.nftContractAddress);\\n        nftContract.transferFrom(address(this), trade.poster, trade.tokenId);\\n\\n        erc721Trades[tradeId].status = TradeStatus.Cancelled;\\n        emit ERC721TradeStatusChange(tradeId, TradeStatus.Cancelled);\\n    }\\n\\n\\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\\n\\n    function onERC721Received(address, address, uint256, bytes calldata) public pure override returns (bytes4) {\\n        return ERC721_RECEIVED;\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"breedBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"harvestMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"marketPlaceBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrateMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"waterBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StrainzToken", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}