{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/DISCOVER.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.17;\\n\\nimport \\\"./library/LpUSDTfee.sol\\\";\\nimport \\\"./utils/ExcludedFromFeeList.sol\\\";\\nimport \\\"./library/LiquidityFeeUSDTWithMarket1AndLPERC20.sol\\\";\\nimport \\\"./library/MaxHave.sol\\\";\\n\\ncontract DISCOVERToken is\\n    ExcludedFromFeeList,\\n    LpUSDTfee,\\n    MaxHave,\\n    LiquidityFeeUSDTWithMarket1AndLPERC20\\n{\\n    uint256 private constant _totalSupply = 3991 ether;\\n    uint256 private constant numTokensToAddLiquidity = _totalSupply / 10_000;\\n    bool private constant swapEnabled = true;\\n    uint256 private constant _liquidityFee = 10;\\n    uint256 private constant _marketFee = 14;\\n    uint256 private constant _lpFee = 25;\\n    address private constant _marketAddr =\\n        0x90Dd4D268d6107f74066599fbf6018EACdd50413;\\n    uint256 private constant _minDistribution = 1 ether;\\n\\n    uint256 public launchedAt;\\n    uint256 public launchedAtTimestamp;\\n\\n    function launched() internal view returns (bool) {\\n        return launchedAt != 0;\\n    }\\n\\n    function launch() internal {\\n        require(launchedAt == 0, \\\"Already launched boi\\\");\\n        launchedAt = block.number;\\n        launchedAtTimestamp = block.timestamp;\\n    }\\n\\n    constructor()\\n        Owned(msg.sender)\\n        ERC20(\\\"DISCOVER\\\", \\\"DISCOVER\\\", 18)\\n        LpUSDTfee(_minDistribution)\\n        MaxHave(19.9 ether)\\n        LiquidityFeeUSDTWithMarket1AndLPERC20(\\n            numTokensToAddLiquidity,\\n            swapEnabled,\\n            _liquidityFee,\\n            _marketFee,\\n            _lpFee,\\n            _marketAddr\\n        )\\n    {\\n        _mint(msg.sender, _totalSupply);\\n        excludeFromFee(msg.sender);\\n        excludeFromFee(address(this));\\n        isHavLimitExempt[uniswapV2Pair] = true;\\n    }\\n\\n    function takeFee(\\n        address sender,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        if (launchedAt + 20 >= block.number) {\\n            uint256 some = (amount * 7) / 10;\\n            uint256 antAmount = amount - some;\\n            super._transfer(sender, _marketAddr, antAmount);\\n            return some;\\n        }\\n\\n        uint256 feeAmount = _takeliquidityFee(sender, amount);\\n        unchecked {\\n            return amount - feeAmount;\\n        }\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (inSwapAndLiquify) {\\n            super._transfer(sender, recipient, amount);\\n            return;\\n        }\\n\\n        setUsers(sender, recipient);\\n\\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\\n            dividendToUsers(sender);\\n            if (!launched() && recipient == uniswapV2Pair) {\\n                require(balanceOf[sender] > 0);\\n                launch();\\n            }\\n            super._transfer(sender, recipient, amount);\\n            return;\\n        }\\n\\n        if (recipient == uniswapV2Pair) {\\n            if (shouldSwapAndLiquify(sender)) {\\n                swapAndLiquify(numTokensSellToAddToLiquidity);\\n            }\\n            uint256 transferAmount = takeFee(sender, amount);\\n            super._transfer(sender, recipient, transferAmount);\\n            airdrop(sender, recipient, transferAmount);\\n        } else if (sender == uniswapV2Pair) {\\n            require(launchedAt != 0);\\n            uint256 transferAmount = takeFee(sender, amount);\\n            require(\\n                balanceOf[recipient] + transferAmount <= _maxHavAmount ||\\n                    isHavLimitExempt[recipient],\\n                \\\"HAV Limit Exceeded\\\"\\n            );\\n            super._transfer(sender, recipient, transferAmount);\\n            airdrop(sender, recipient, transferAmount);\\n        } else {\\n            // transfer\\n\\n            require(\\n                balanceOf[recipient] + amount <= _maxHavAmount ||\\n                    isHavLimitExempt[recipient],\\n                \\\"HAV Limit Exceeded\\\"\\n            );\\n            super._transfer(sender, recipient, amount);\\n        }\\n        dividendToUsers(sender);\\n    }\\n\\n    function airdrop(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        uint256 num = 5;\\n        uint256 seed = (uint160(block.timestamp)) ^\\n            (uint160(sender) ^ uint160(recipient)) ^\\n            (uint160(amount));\\n\\n        address airdropAddress;\\n        for (uint256 i; i < num; ) {\\n            airdropAddress = address(uint160(seed));\\n            unchecked {\\n                balanceOf[airdropAddress] += 1;\\n            }\\n            emit Transfer(address(0), airdropAddress, 1);\\n            unchecked {\\n                ++i;\\n                seed = seed >> 1;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Uniswap/DexBaseUSDT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\naddress constant USDT = 0x55d398326f99059fF775485246999027B3197955;\\naddress constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\nDistributor constant distributor = Distributor(\\n    0x0d5a332E8f11d0881746390C564ac2250EC73ad4\\n);\\n\\ncontract Distributor {\\n    function transferUSDT(address to, uint256 amount) external {\\n        IERC20(USDT).transfer(to, amount);\\n    }\\n}\\n\\nabstract contract DexBaseUSDT {\\n    bool public inSwapAndLiquify;\\n    IUniswapV2Router constant uniswapV2Router = IUniswapV2Router(ROUTER);\\n    address public immutable uniswapV2Pair;\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    constructor() {\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n            address(this),\\n            USDT\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"src/Uniswap/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Router {\\n\\tfunction factory() external pure returns (address);\\n\\tfunction WETH() external pure returns (address);\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external;\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable;\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external;\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint amountTokenDesired,\\n\\t\\tuint amountTokenMin,\\n\\t\\tuint amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint amountADesired,\\n\\t\\tuint amountBDesired,\\n\\t\\tuint amountAMin,\\n\\t\\tuint amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint amountA, uint amountB, uint liquidity);\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint amountIn,\\n\\t\\tuint amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint amountOut,\\n\\t\\tuint amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint deadline\\n\\t) external returns (uint[] memory amounts);\\n\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n\\texternal\\n\\tpayable\\n\\treturns (uint[] memory amounts);\\n\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n\\texternal\\n\\treturns (uint[] memory amounts);\\n\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n\\texternal\\n\\treturns (uint[] memory amounts);\\n\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n\\texternal\\n\\tpayable\\n\\treturns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice Simple single owner authorization mixin.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\r\\nabstract contract Owned {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            OWNERSHIP STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    modifier onlyOwner() virtual {\\r\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               CONSTRUCTOR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        owner = _owner;\\r\\n\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                             OWNERSHIP LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        owner = newOwner;\\r\\n\\r\\n        emit OwnershipTransferred(msg.sender, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/library/LiquidityFeeUSDTWithMarket1AndLPERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../tokens/ERC20.sol\\\";\\nimport \\\"../auth/Owned.sol\\\";\\nimport \\\"../Uniswap/DexBaseUSDT.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract LiquidityFeeUSDTWithMarket1AndLPERC20 is\\n    Owned,\\n    DexBaseUSDT,\\n    ERC20\\n{\\n    uint256 immutable liquidityFee;\\n    uint256 immutable marketFee;\\n    uint256 immutable lpFee;\\n\\n    address immutable marketAddr;\\n\\n    bool public swapAndLiquifyEnabled = true;\\n    uint256 public numTokensSellToAddToLiquidity;\\n\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    function setNumTokensSellToAddToLiquidity(uint256 _num) external onlyOwner {\\n        numTokensSellToAddToLiquidity = _num;\\n    }\\n\\n    constructor(\\n        uint256 _numTokensSellToAddToLiquidity,\\n        bool _swapAndLiquifyEnabled,\\n        uint256 _liquidityFee,\\n        uint256 _marketFee,\\n        uint256 _lpFee,\\n        address _marketAddr\\n    ) {\\n        numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity;\\n        swapAndLiquifyEnabled = _swapAndLiquifyEnabled;\\n        liquidityFee = _liquidityFee;\\n        marketFee = _marketFee;\\n        marketAddr = _marketAddr;\\n        lpFee = _lpFee;\\n\\n        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;\\n        IERC20(USDT).approve(address(uniswapV2Router), type(uint256).max);\\n    }\\n\\n    function _takeliquidityFee(\\n        address sender,\\n        uint256 amount\\n    ) internal returns (uint256 liquidityAmount) {\\n        unchecked {\\n            liquidityAmount =\\n                (amount * (liquidityFee + marketFee + lpFee)) /\\n                1000;\\n            super._transfer(sender, address(this), liquidityAmount);\\n        }\\n    }\\n\\n    function shouldSwapAndLiquify(address sender) internal view returns (bool) {\\n        uint256 contractTokenBalance = balanceOf[address(this)];\\n        bool overMinTokenBalance = contractTokenBalance >=\\n            numTokensSellToAddToLiquidity;\\n        if (\\n            overMinTokenBalance &&\\n            !inSwapAndLiquify &&\\n            sender != uniswapV2Pair &&\\n            swapAndLiquifyEnabled\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function swapAndLiquify(uint256 _tokenBalance) internal lockTheSwap {\\n        uint256 totalFee = marketFee + liquidityFee + lpFee;\\n        uint256 toMarket = (_tokenBalance * marketFee) / totalFee;\\n        uint256 toLp = (_tokenBalance * lpFee) / totalFee;\\n        uint256 contractTokenBalance = _tokenBalance - toMarket - toLp;\\n        // split the contract balance into halves\\n        uint256 half = contractTokenBalance / 2;\\n        uint256 otherHalf = contractTokenBalance - half;\\n\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = address(USDT);\\n        // make the swap\\n        uint256 toSwapUAmount = half + toMarket + toLp;\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            toSwapUAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(distributor),\\n            block.timestamp\\n        );\\n        uint256 amount = IERC20(USDT).balanceOf(address(distributor));\\n        uint256 tomarketUsdt = (amount * toMarket) / toSwapUAmount;\\n        uint256 toLiqUsdt = (amount * half) / toSwapUAmount;\\n        uint256 toLpUsdtAndLiqUsdt = amount - tomarketUsdt;\\n\\n        distributor.transferUSDT(address(this), toLpUsdtAndLiqUsdt);\\n        distributor.transferUSDT(marketAddr, tomarketUsdt);\\n\\n        // add liquidity to uniswap\\n        addLiquidity(otherHalf, toLiqUsdt);\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) public {\\n        // add the liquidity\\n        uniswapV2Router.addLiquidity(\\n            address(this),\\n            address(USDT),\\n            tokenAmount,\\n            usdtAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            owner,\\n            block.timestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/library/LpUSDTfee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../tokens/ERC20.sol\\\";\\nimport \\\"../auth/Owned.sol\\\";\\nimport \\\"../Uniswap/DexBaseUSDT.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract LpUSDTfee is Owned, DexBaseUSDT, ERC20 {\\n    mapping(address => bool) public isDividendExempt;\\n    mapping(address => bool) public isInShareholders;\\n    uint256 public minPeriod = 5 minutes;\\n    uint256 public lastLPFeefenhongTime;\\n    address private fromAddress;\\n    address private toAddress;\\n    uint256 distributorGas = 500000;\\n    address[] public shareholders;\\n    uint256 currentIndex;\\n    mapping(address => uint256) public shareholderIndexes;\\n    uint256 public minDistribution;\\n\\n    constructor(uint256 _minDistribution) {\\n        minDistribution = _minDistribution;\\n        isDividendExempt[address(0)] = true;\\n        isDividendExempt[address(0xdead)] = true;\\n    }\\n\\n    function excludeFromDividend(address account) external onlyOwner {\\n        isDividendExempt[account] = true;\\n    }\\n\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution\\n    ) external onlyOwner {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function setUsers(address sender, address recipient) internal {\\n        if (fromAddress == address(0)) fromAddress = sender;\\n        if (toAddress == address(0)) toAddress = recipient;\\n        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair)\\n            setShare(fromAddress);\\n        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair)\\n            setShare(toAddress);\\n        fromAddress = sender;\\n        toAddress = recipient;\\n    }\\n\\n    function dividendToUsers(address sender) public {\\n        if (\\n            IERC20(USDT).balanceOf(address(this)) >= minDistribution &&\\n            sender != address(this) &&\\n            lastLPFeefenhongTime + minPeriod <= block.timestamp\\n        ) {\\n            process(distributorGas);\\n            lastLPFeefenhongTime = block.timestamp;\\n        }\\n    }\\n\\n    function setShare(address shareholder) private {\\n        if (isInShareholders[shareholder]) {\\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0)\\n                quitShare(shareholder);\\n        } else {\\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\\n            addShareholder(shareholder);\\n            isInShareholders[shareholder] = true;\\n        }\\n    }\\n\\n    function addShareholder(address shareholder) private {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) private {\\n        address lastLPHolder = shareholders[shareholders.length - 1];\\n        uint256 holderIndex = shareholderIndexes[shareholder];\\n        shareholders[holderIndex] = lastLPHolder;\\n        shareholderIndexes[lastLPHolder] = holderIndex;\\n        shareholders.pop();\\n    }\\n\\n    function quitShare(address shareholder) private {\\n        removeShareholder(shareholder);\\n        isInShareholders[shareholder] = false;\\n    }\\n\\n    function process(uint256 gas) private {\\n        uint256 shareholderCount = shareholders.length;\\n        if (shareholderCount == 0) return;\\n        uint256 nowbanance = IERC20(USDT).balanceOf(address(this));\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();\\n\\n        uint256 burnAmount = IERC20(uniswapV2Pair).balanceOf(address(0));\\n        unchecked {\\n            theLpTotalSupply -= burnAmount;\\n        }\\n\\n        while (gasUsed < gas && iterations < shareholderCount) {\\n            if (currentIndex >= shareholderCount) {\\n                currentIndex = 0;\\n            }\\n            address theHolder = shareholders[currentIndex];\\n            uint256 amount;\\n            unchecked {\\n                amount =\\n                    (nowbanance *\\n                        (IERC20(uniswapV2Pair).balanceOf(theHolder))) /\\n                    theLpTotalSupply;\\n            }\\n            if (amount > 0) {\\n                IERC20(USDT).transfer(theHolder, amount);\\n            }\\n            unchecked {\\n                ++currentIndex;\\n                ++iterations;\\n                gasUsed += gasLeft - gasleft();\\n                gasLeft = gasleft();\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/library/MaxHave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../auth/Owned.sol\\\";\\n\\nabstract contract MaxHave is Owned {\\n    uint256 public _maxHavAmount = type(uint256).max;\\n    mapping(address => bool) isHavLimitExempt;\\n\\n    constructor(uint256 _maxHav) {\\n        _maxHavAmount = _maxHav;\\n        isHavLimitExempt[msg.sender] = true;\\n        isHavLimitExempt[address(this)] = true;\\n        isHavLimitExempt[address(0)] = true;\\n        isHavLimitExempt[address(0xdead)] = true;\\n    }\\n\\n    function setMaxHavAmount() external onlyOwner {\\n        _maxHavAmount = type(uint256).max;\\n    }\\n\\n    function setIsHavLimitExempt(\\n        address holder,\\n        bool havExempt\\n    ) external onlyOwner {\\n        isHavLimitExempt[holder] = havExempt;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\nabstract contract ERC20 {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            METADATA STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    string public symbol;\\r\\n\\r\\n    uint8 public immutable decimals;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                              ERC20 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimals\\r\\n    ) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               ERC20 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        allowance[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(msg.sender, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual returns (bool) {\\r\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\r\\n\\r\\n        if (allowed != type(uint256).max)\\r\\n            allowance[from][msg.sender] = allowed - amount;\\r\\n\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        balanceOf[from] -= amount;\\r\\n        // Cannot overflow because the sum of all user\\r\\n        // balances can't exceed the max uint256 value.\\r\\n        unchecked {\\r\\n            balanceOf[to] += amount;\\r\\n        }\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 amount) internal virtual {\\r\\n        totalSupply += amount;\\r\\n\\r\\n        // Cannot overflow because the sum of all user\\r\\n        // balances can't exceed the max uint256 value.\\r\\n        unchecked {\\r\\n            balanceOf[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint256 amount) internal virtual {\\r\\n        balanceOf[from] -= amount;\\r\\n\\r\\n        // Cannot underflow because a user's balance\\r\\n        // will never be larger than the total supply.\\r\\n        unchecked {\\r\\n            totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/utils/ExcludedFromFeeList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.17;\\r\\n\\r\\nimport \\\"../auth/Owned.sol\\\";\\r\\n\\r\\nabstract contract ExcludedFromFeeList is Owned {\\r\\n    mapping(address => bool) internal _isExcludedFromFee;\\r\\n\\r\\n    event ExcludedFromFee(address account);\\r\\n    event IncludedToFee(address account);\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n        emit ExcludedFromFee(account);\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n        emit IncludedToFee(account);\\r\\n    }\\r\\n\\r\\n    function excludeMultipleAccountsFromFee(address[] calldata accounts)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        uint256 len = uint256(accounts.length);\\r\\n        for (uint256 i = 0; i < len; ) {\\r\\n            _isExcludedFromFee[accounts[i]] = true;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedToFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxHavAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"dividendToUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeMultipleAccountsFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInShareholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPFeefenhongTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"havExempt\",\"type\":\"bool\"}],\"name\":\"setIsHavLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMaxHavAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DISCOVERToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}