{"SourceCode": "// File: contracts/UsdtERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface UsdtERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n}\r\n\r\n// File: contracts/PayUSDT.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract PayUSDT {    \r\n    UsdtERC20 public tokenUsdt;\r\n    address public  receiver;\r\n    address public  owner;\r\n    uint256 public marketingFee;\r\n\r\n    event ProxyTransfer(address indexed from, address indexed to, string recoredId,uint256 value, uint256  marketingFee);\r\n\r\n    constructor(address _tokenUsdt, address _receiver, uint256 _marketingFee)  {\r\n        require(_marketingFee <= 10000,\"_marketingFee format error\");  \r\n        owner = msg.sender;\r\n        tokenUsdt = UsdtERC20(_tokenUsdt);\r\n        receiver = _receiver;\r\n        marketingFee = _marketingFee;\r\n    }\r\n\r\n\r\n    function setUSDT(address _tokenUsdt) external onlyOwner{\r\n        tokenUsdt = UsdtERC20(_tokenUsdt);\r\n    }\r\n\r\n    function setReceiver(address _receiver) external onlyOwner{\r\n        receiver = _receiver;\r\n    }\r\n\r\n    function setMarketingFee(uint256 _marketingFee) external onlyOwner{\r\n       marketingFee = _marketingFee;\r\n    }\r\n\r\n    function proxyTransfer(address to, uint256 amount, string memory recordId) public {\r\n        require(tokenUsdt.balanceOf(msg.sender) >= amount, \"not sufficient funds\");\r\n        require(queryAllowance() >= amount, \"not sufficient approve funds\");\r\n\r\n        uint256 marketingFeeAmount = amount * marketingFee / 10000;\r\n        uint256 toAmount = amount - marketingFeeAmount;\r\n        _transfer(receiver,marketingFeeAmount);\r\n        _transfer(to,toAmount);\r\n        emit ProxyTransfer(msg.sender, to, recordId,amount, marketingFee);\r\n    }\r\n\r\n    function _transfer(address to, uint256 amount) internal {\r\n        require(tokenUsdt.balanceOf(msg.sender) >= amount, \"not sufficient funds\");\r\n        require(queryAllowance() >= amount, \"not sufficient approve funds\");\r\n        tokenUsdt.transferFrom(msg.sender,to, amount);\r\n    }\r\n\r\n    function queryAllowance() public  view returns (uint256){\r\n        return  tokenUsdt.allowance(msg.sender,address(this));\r\n    }\r\n\r\n    modifier onlyOwner {\r\n      require(msg.sender == owner);\r\n      _;\r\n   }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenUsdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recoredId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"ProxyTransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recordId\",\"type\":\"string\"}],\"name\":\"proxyTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenUsdt\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUsdt\",\"outputs\":[{\"internalType\":\"contract UsdtERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PayUSDT", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000301e2df694581b3f0c024e9212c42f0557e8acc4000000000000000000000000000000000000000000000000000000000000012c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d297f4afb0adb03bdba42c2de2b3ab5c5b07d268a40d474759e787df84181271"}