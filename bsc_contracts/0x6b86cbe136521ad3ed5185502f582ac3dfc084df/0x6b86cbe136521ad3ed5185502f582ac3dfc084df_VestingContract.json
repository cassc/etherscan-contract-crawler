{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity 0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/VestingVac.sol\r\n\r\n\r\n\r\n/*** Proudly Developed By: Jaafar Krayem ***/\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\ncontract VestingContract {\r\n    address public vacTokenAddress;\r\n    address public owner;\r\n\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public vestingVault;\r\n\r\n    uint256 public totalVestingSchedules;\r\n\r\n    address[] public allBuyers;\r\n\r\n    struct VestingDetails {\r\n        address beneficiary;\r\n        uint256 totalAmount;\r\n        uint256 releasedAmount;\r\n        uint256 remainingTokens;\r\n        uint256 startDate;\r\n        uint256 lockPeriod;\r\n        uint256 percentageLock;\r\n        uint256 interval;\r\n        uint256 lastReleaseTime;\r\n    }\r\n\r\n    struct MergedVestingDetails {\r\n        address beneficiary;\r\n        uint256 totalAmount;\r\n        uint256 releasedAmount;\r\n        uint256 remainingTokens;\r\n        uint256 startDate;\r\n        uint256 lockPeriod;\r\n        uint256 lastReleaseTime;\r\n    }\r\n\r\n    mapping(uint256 => VestingDetails) public vestingSchedules;\r\n    mapping(address => MergedVestingDetails) public mergedVestingSchedules;\r\n    mapping(address => uint256[]) public beneficiarySaleIDs;\r\n    mapping(address => bool) public isAdmin;\r\n    mapping(address => bool) public isBuyer;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin[msg.sender], \"Not Admin\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _tokenAddress) {\r\n        vacTokenAddress = _tokenAddress;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function changeTokenAddress(address _token) external onlyOwner {\r\n        require(_token != address(0), \"Zero Address!\");\r\n        vacTokenAddress = _token;\r\n    }\r\n\r\n    function addAdmin(address _newAdmin) external onlyOwner {\r\n        require(_newAdmin != address(0), \"Zero Address\");\r\n        isAdmin[_newAdmin] = true;\r\n    }\r\n\r\n    function removeAdmin(address _newAdmin) external onlyOwner {\r\n        isAdmin[_newAdmin] = false;\r\n    }\r\n\r\n    function getBeneficiarySaleIDs(address _beneficiary)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return beneficiarySaleIDs[_beneficiary];\r\n    }\r\n\r\n    // Function to calculate all vested tokens for a specific beneficiary\r\n    function calculateVestedTokens(address _beneficiary)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 totalVested,\r\n            uint256 totalRemaining,\r\n            uint256 totalReleased\r\n        )\r\n    {\r\n        uint256[] memory saleIDs = beneficiarySaleIDs[_beneficiary];\r\n        for (uint256 i = 0; i < saleIDs.length; i++) {\r\n            VestingDetails memory details = vestingSchedules[saleIDs[i]];\r\n\r\n            totalVested += details.totalAmount;\r\n            totalRemaining += details.remainingTokens;\r\n            totalReleased += details.releasedAmount;\r\n        }\r\n        return (totalVested, totalRemaining, totalReleased);\r\n    }\r\n\r\n    function setVestingSchedule(\r\n        uint256 _saleID,\r\n        address _beneficiary,\r\n        uint256 _totalAmount,\r\n        uint256 _startDate,\r\n        uint256 _lockPeriod,\r\n        uint256 _percentageLock,\r\n        uint256 _interval\r\n    ) public onlyAdmin {\r\n        vestingSchedules[_saleID] = VestingDetails(\r\n            _beneficiary,\r\n            _totalAmount,\r\n            0, // released amount\r\n            _totalAmount, // remaining tokens\r\n            _startDate,\r\n            _lockPeriod,\r\n            _percentageLock,\r\n            _interval,\r\n            0\r\n        );\r\n        beneficiarySaleIDs[_beneficiary].push(_saleID);\r\n        vestingVault += _totalAmount;\r\n        totalVestingSchedules++;\r\n        if (!isBuyer[_beneficiary]) {\r\n            isBuyer[_beneficiary] = true;\r\n            allBuyers.push(_beneficiary);\r\n        }\r\n    }\r\n\r\n    function releaseVestedTokens(uint256 _saleID) public {\r\n        VestingDetails storage details = vestingSchedules[_saleID];\r\n        require(details.beneficiary == msg.sender, \"Not the beneficiary\");\r\n\r\n        uint256 timePassed = block.timestamp - details.startDate;\r\n        uint256 lockTime = details.lockPeriod * 1 days;\r\n\r\n        require(timePassed > lockTime, \"Tokens are still locked\");\r\n\r\n        uint256 intervalTime = details.interval * 1 days;\r\n        uint256 timeSinceLastRelease = block.timestamp -\r\n            details.lastReleaseTime;\r\n\r\n        uint256 intervalsPassed = timeSinceLastRelease / intervalTime;\r\n\r\n        require(\r\n            intervalsPassed > 0,\r\n            \"No intervals have passed since last release\"\r\n        );\r\n\r\n        uint256 amountPerInterval = (details.totalAmount *\r\n            details.percentageLock) / 100;\r\n        uint256 amountToRelease = intervalsPassed * amountPerInterval;\r\n\r\n        require(amountToRelease > 0, \"No tokens to release\");\r\n\r\n        // Update the released amount and last release time\r\n        details.releasedAmount += amountToRelease;\r\n        details.remainingTokens -= amountToRelease;\r\n        details.lastReleaseTime = block.timestamp;\r\n        vestingVault -= amountToRelease;\r\n\r\n        // Transfer the tokens\r\n        IERC20(vacTokenAddress).transfer(msg.sender, amountToRelease);\r\n    }\r\n\r\n    function mergeVestingSchedules(address _beneficiary) public onlyAdmin {\r\n        uint256[] memory saleIDs = getBeneficiarySaleIDs(_beneficiary);\r\n        uint256 totalAmount = 0;\r\n        uint256 highestLockPeriod = 0;\r\n        uint256 latestStartDate = 0;\r\n\r\n        for (uint256 i = 0; i < saleIDs.length; i++) {\r\n            uint256 saleID = saleIDs[i];\r\n            VestingDetails storage details = vestingSchedules[saleID];\r\n            totalAmount += details.totalAmount;\r\n            if (details.lockPeriod > highestLockPeriod) {\r\n                highestLockPeriod = details.lockPeriod;\r\n            }\r\n            if (details.startDate > latestStartDate) {\r\n                latestStartDate = details.startDate;\r\n            }\r\n            // Delete old saleID\r\n            delete vestingSchedules[saleID];\r\n        }\r\n\r\n        // Clear the saleIDs for this beneficiary\r\n        delete beneficiarySaleIDs[_beneficiary];\r\n\r\n        // Create new merged vesting schedule\r\n        MergedVestingDetails memory mergedDetails = MergedVestingDetails(\r\n            _beneficiary,\r\n            totalAmount,\r\n            0, // releasedAmount\r\n            totalAmount,\r\n            latestStartDate, // latest startDate\r\n            highestLockPeriod, // highest lockPeriod\r\n            0 // lastReleaseTime\r\n        );\r\n\r\n        mergedVestingSchedules[_beneficiary] = mergedDetails;\r\n    }\r\n\r\n    function releaseMergedVestedTokens() public {\r\n        MergedVestingDetails storage details = mergedVestingSchedules[\r\n            msg.sender\r\n        ];\r\n        require(details.beneficiary == msg.sender, \"Not the beneficiary\");\r\n\r\n        uint256 timePassed = block.timestamp - details.startDate;\r\n        uint256 lockTime = details.lockPeriod * 1 days;\r\n\r\n        require(timePassed > lockTime, \"Tokens are still locked\");\r\n\r\n        uint256 timeSinceLastRelease = block.timestamp -\r\n            details.lastReleaseTime;\r\n        uint256 intervalTime = 30 days;\r\n\r\n        require(timeSinceLastRelease >= intervalTime, \"Interval not reached\");\r\n\r\n        uint256 amountToRelease = (details.totalAmount * details.lockPeriod) /\r\n            100;\r\n\r\n        require(amountToRelease > 0, \"No tokens to release\");\r\n\r\n        // Update the released amount and last release time\r\n        details.releasedAmount += amountToRelease;\r\n        details.remainingTokens -= amountToRelease;\r\n        details.lastReleaseTime = block.timestamp;\r\n        vestingVault -= amountToRelease;\r\n\r\n        // Ensure the released amount doesn't exceed the total amount\r\n        if (details.releasedAmount > details.totalAmount) {\r\n            amountToRelease -= (details.releasedAmount - details.totalAmount);\r\n            details.releasedAmount = details.totalAmount;\r\n        }\r\n\r\n        // Transfer the tokens\r\n        IERC20(vacTokenAddress).transfer(msg.sender, amountToRelease);\r\n    }\r\n\r\n    // Function to get all vesting schedules for a specific user\r\n    function getVestingSchedulesForBuyer(address _buyer)\r\n        public\r\n        view\r\n        returns (VestingDetails[] memory)\r\n    {\r\n        uint256[] memory saleIDs = beneficiarySaleIDs[_buyer];\r\n        VestingDetails[] memory schedules = new VestingDetails[](\r\n            saleIDs.length\r\n        );\r\n\r\n        for (uint256 i = 0; i < saleIDs.length; i++) {\r\n            schedules[i] = vestingSchedules[saleIDs[i]];\r\n        }\r\n\r\n        return schedules;\r\n    }\r\n\r\n    // Function to return all vesting schedules for all buyers\r\n    function getAllVestingSchedules()\r\n        public\r\n        view\r\n        returns (VestingDetails[] memory)\r\n    {\r\n        // Allocate memory for all schedules based on the total number of vesting schedules\r\n        VestingDetails[] memory allSchedules = new VestingDetails[](\r\n            totalVestingSchedules\r\n        );\r\n        uint256 currentIndex = 0;\r\n\r\n        // Iterate over all buyers\r\n        for (\r\n            uint256 buyerIndex = 0;\r\n            buyerIndex < allBuyers.length;\r\n            buyerIndex++\r\n        ) {\r\n            // Fetch schedules for each buyer\r\n            VestingDetails[]\r\n                memory buyerSchedules = getVestingSchedulesForBuyer(\r\n                    allBuyers[buyerIndex]\r\n                );\r\n\r\n            // Iterate over each schedule for the buyer and add it to allSchedules\r\n            for (\r\n                uint256 scheduleIndex = 0;\r\n                scheduleIndex < buyerSchedules.length;\r\n                scheduleIndex++\r\n            ) {\r\n                allSchedules[currentIndex] = buyerSchedules[scheduleIndex];\r\n                currentIndex++;\r\n            }\r\n        }\r\n\r\n        return allSchedules;\r\n    }\r\n\r\n    // Function to return a range of vesting schedules for all buyers\r\n    function getVestingSchedulesInRange(uint256 startRange, uint256 endRange)\r\n        public\r\n        view\r\n        returns (VestingDetails[] memory)\r\n    {\r\n        require(endRange >= startRange, \"Invalid range\");\r\n        uint256 rangeSize = endRange - startRange + 1;\r\n\r\n        // Allocate memory for the schedules in the specified range\r\n        VestingDetails[] memory schedulesInRange = new VestingDetails[](\r\n            rangeSize\r\n        );\r\n        uint256 currentIndex = 0;\r\n        uint256 totalSchedulesCount = 0;\r\n\r\n        // Iterate over all buyers and their schedules\r\n        for (\r\n            uint256 buyerIndex = 0;\r\n            buyerIndex < allBuyers.length;\r\n            buyerIndex++\r\n        ) {\r\n            VestingDetails[]\r\n                memory buyerSchedules = getVestingSchedulesForBuyer(\r\n                    allBuyers[buyerIndex]\r\n                );\r\n\r\n            for (\r\n                uint256 scheduleIndex = 0;\r\n                scheduleIndex < buyerSchedules.length;\r\n                scheduleIndex++\r\n            ) {\r\n                if (\r\n                    totalSchedulesCount >= startRange &&\r\n                    totalSchedulesCount <= endRange\r\n                ) {\r\n                    schedulesInRange[currentIndex] = buyerSchedules[\r\n                        scheduleIndex\r\n                    ];\r\n                    currentIndex++;\r\n                }\r\n                totalSchedulesCount++;\r\n\r\n                // Break if the end of the range is reached\r\n                if (totalSchedulesCount > endRange) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Break the outer loop if the end of the range is reached\r\n            if (totalSchedulesCount > endRange) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return schedulesInRange;\r\n    }\r\n\r\n    function removeTrashTokens(address _tokenAddress) external onlyOwner {\r\n        require(_tokenAddress != vacTokenAddress, \"Cannot remove Vac tokens\");\r\n\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        require(balance > 0, \"No trash tokens to remove\");\r\n\r\n        // Transfer the tokens to the dead wallet\r\n        token.transfer(deadWallet, balance);\r\n    }\r\n\r\n    function withdrawTokenFromContract(address _tokenAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 balance;\r\n        IERC20 token;\r\n        if (_tokenAddress == vacTokenAddress) {\r\n            token = IERC20(vacTokenAddress);\r\n            uint256 vacAllowedBalance = (token.balanceOf(address(this))) -\r\n                vestingVault;\r\n            require(vacAllowedBalance > 0, \"Cannot withdraw vested VAC tokens\");\r\n            balance = vacAllowedBalance;\r\n        } else {\r\n            token = IERC20(_tokenAddress);\r\n            balance = token.balanceOf(address(this));\r\n        }\r\n\r\n        require(balance > 0, \"No trash tokens to remove\");\r\n\r\n        // Transfer the tokens to the owner wallet\r\n        token.transfer(msg.sender, balance);\r\n    }\r\n}\r\n\r\n                /*************************************************************\\\r\n                        Proudly Developed by Jaafar Krayem Copyright 2023\r\n                \\*************************************************************/", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBuyers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiarySaleIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReleased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllVestingSchedules\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingContract.VestingDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getBeneficiarySaleIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesForBuyer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingContract.VestingDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRange\",\"type\":\"uint256\"}],\"name\":\"getVestingSchedulesInRange\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingContract.VestingDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"mergeVestingSchedules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mergedVestingSchedules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseMergedVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleID\",\"type\":\"uint256\"}],\"name\":\"releaseVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeTrashTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVestingSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vacTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokenFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VestingContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004fb835f5c201ef5f141542bbddc26b7c466de488", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2d7c1f12cef44e092e2593737d92830d798ba888e647ce938056c82e807a05eb"}