{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/solidity-utils/src/contracts/transparent-proxy/TransparentProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {IOwnable} from './interfaces/IOwnable.sol';\\nimport {ITransparentProxyFactory} from './interfaces/ITransparentProxyFactory.sol';\\nimport {TransparentUpgradeableProxy} from './TransparentUpgradeableProxy.sol';\\nimport {ProxyAdmin} from './ProxyAdmin.sol';\\n\\n/**\\n * @title TransparentProxyFactory\\n * @author BGD Labs\\n * @notice Factory contract to create transparent proxies, both with CREATE and CREATE2\\n * @dev `create()` and `createDeterministic()` are not unified for clearer interface, and at the same\\n * time allowing `createDeterministic()` with salt == 0\\n * @dev Highly recommended to pass as `admin` on creation an OZ ProxyAdmin instance\\n **/\\ncontract TransparentProxyFactory is ITransparentProxyFactory {\\n  /// @inheritdoc ITransparentProxyFactory\\n  function create(address logic, address admin, bytes calldata data) external returns (address) {\\n    address proxy = address(new TransparentUpgradeableProxy(logic, admin, data));\\n\\n    emit ProxyCreated(proxy, logic, admin);\\n    return proxy;\\n  }\\n\\n  /// @inheritdoc ITransparentProxyFactory\\n  function createProxyAdmin(address adminOwner) external returns (address) {\\n    address proxyAdmin = address(new ProxyAdmin());\\n    IOwnable(proxyAdmin).transferOwnership(adminOwner);\\n\\n    emit ProxyAdminCreated(proxyAdmin, adminOwner);\\n    return proxyAdmin;\\n  }\\n\\n  /// @inheritdoc ITransparentProxyFactory\\n  function createDeterministic(\\n    address logic,\\n    address admin,\\n    bytes calldata data,\\n    bytes32 salt\\n  ) external returns (address) {\\n    address proxy = address(new TransparentUpgradeableProxy{salt: salt}(logic, admin, data));\\n\\n    emit ProxyDeterministicCreated(proxy, logic, admin, salt);\\n    return proxy;\\n  }\\n\\n  /// @inheritdoc ITransparentProxyFactory\\n  function createDeterministicProxyAdmin(\\n    address adminOwner,\\n    bytes32 salt\\n  ) external returns (address) {\\n    address proxyAdmin = address(new ProxyAdmin{salt: salt}());\\n    IOwnable(proxyAdmin).transferOwnership(adminOwner);\\n\\n    emit ProxyAdminDeterministicCreated(proxyAdmin, adminOwner, salt);\\n    return proxyAdmin;\\n  }\\n\\n  /// @inheritdoc ITransparentProxyFactory\\n  function predictCreateDeterministic(\\n    address logic,\\n    address admin,\\n    bytes calldata data,\\n    bytes32 salt\\n  ) public view returns (address) {\\n    return\\n      _predictCreate2Address(\\n        address(this),\\n        salt,\\n        type(TransparentUpgradeableProxy).creationCode,\\n        abi.encode(logic, admin, data)\\n      );\\n  }\\n\\n  /// @inheritdoc ITransparentProxyFactory\\n  function predictCreateDeterministicProxyAdmin(bytes32 salt) public view returns (address) {\\n    return _predictCreate2Address(address(this), salt, type(ProxyAdmin).creationCode, abi.encode());\\n  }\\n\\n  function _predictCreate2Address(\\n    address creator,\\n    bytes32 salt,\\n    bytes memory creationCode,\\n    bytes memory contructorArgs\\n  ) internal pure returns (address) {\\n    bytes32 hash = keccak256(\\n      abi.encodePacked(\\n        bytes1(0xff),\\n        creator,\\n        salt,\\n        keccak256(abi.encodePacked(creationCode, contructorArgs))\\n      )\\n    );\\n\\n    return address(uint160(uint256(hash)));\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/transparent-proxy/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * @param newOwner address of the new owner.\\n   * Can only be called by the current owner.\\n   **/\\n  function transferOwnership(address newOwner) external;\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   **/\\n  function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/transparent-proxy/interfaces/ITransparentProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITransparentProxyFactory {\\n  event ProxyCreated(address proxy, address indexed logic, address indexed proxyAdmin);\\n  event ProxyAdminCreated(address proxyAdmin, address indexed adminOwner);\\n  event ProxyDeterministicCreated(\\n    address proxy,\\n    address indexed logic,\\n    address indexed admin,\\n    bytes32 indexed salt\\n  );\\n  event ProxyAdminDeterministicCreated(\\n    address proxyAdmin,\\n    address indexed adminOwner,\\n    bytes32 indexed salt\\n  );\\n\\n  /**\\n   * @notice Creates a transparent proxy instance, doing the first initialization in construction\\n   * @dev Version using CREATE\\n   * @param logic The address of the implementation contract\\n   * @param admin The admin of the proxy.\\n   * @param data abi encoded call to the function with `initializer` (or `reinitializer`) modifier.\\n   *             E.g. `abi.encodeWithSelector(mockImpl.initialize.selector, 2)`\\n   *             for an `initialize` function being `function initialize(uint256 foo) external initializer;`\\n   * @return address The address of the proxy deployed\\n   **/\\n  function create(address logic, address admin, bytes memory data) external returns (address);\\n\\n  /**\\n   * @notice Creates a proxyAdmin instance, and transfers ownership to provided owner\\n   * @dev Version using CREATE\\n   * @param adminOwner The owner of the proxyAdmin deployed.\\n   * @return address The address of the proxyAdmin deployed\\n   **/\\n  function createProxyAdmin(address adminOwner) external returns (address);\\n\\n  /**\\n   * @notice Creates a transparent proxy instance, doing the first initialization in construction\\n   * @dev Version using CREATE2, so deterministic\\n   * @param logic The address of the implementation contract\\n   * @param admin The admin of the proxy.\\n   * @param data abi encoded call to the function with `initializer` (or `reinitializer`) modifier.\\n   *             E.g. `abi.encodeWithSelector(mockImpl.initialize.selector, 2)`\\n   *             for an `initialize` function being `function initialize(uint256 foo) external initializer;`\\n   * @param salt Value to be used in the address calculation, to be chosen by the account calling this function\\n   * @return address The address of the proxy deployed\\n   **/\\n  function createDeterministic(\\n    address logic,\\n    address admin,\\n    bytes memory data,\\n    bytes32 salt\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Deterministically create a proxy admin instance and transfers ownership to provided owner.\\n   * @dev Version using CREATE2, so deterministic\\n   * @param adminOwner The owner of the ProxyAdmin deployed.\\n   * @param salt Value to be used in the address calculation, to be chosen by the account calling this function\\n   * @return address The address of the proxy admin deployed\\n   **/\\n  function createDeterministicProxyAdmin(\\n    address adminOwner,\\n    bytes32 salt\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Pre-calculates and return the address on which `createDeterministic` will deploy a proxy\\n   * @param logic The address of the implementation contract\\n   * @param admin The admin of the proxy\\n   * @param data abi encoded call to the function with `initializer` (or `reinitializer`) modifier.\\n   *             E.g. `abi.encodeWithSelector(mockImpl.initialize.selector, 2)`\\n   *             for an `initialize` function being `function initialize(uint256 foo) external initializer;`\\n   * @param salt Value to be used in the address calculation, to be chosen by the account calling this function\\n   * @return address The pre-calculated address\\n   **/\\n  function predictCreateDeterministic(\\n    address logic,\\n    address admin,\\n    bytes calldata data,\\n    bytes32 salt\\n  ) external view returns (address);\\n\\n  /**\\n   * @notice Pre-calculates and return the address on which `createDeterministic` will deploy the proxyAdmin\\n   * @param salt Value to be used in the address calculation, to be chosen by the account calling this function\\n   * @return address The pre-calculated address\\n   **/\\n  function predictCreateDeterministicProxyAdmin(bytes32 salt) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/transparent-proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @dev OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts/tree/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n *\\n * BGD Labs adaptations:\\n * - Linting\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport './ERC1967Proxy.sol';\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n  /**\\n   * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n   * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n   */\\n  constructor(\\n    address _logic,\\n    address admin_,\\n    bytes memory _data\\n  ) payable ERC1967Proxy(_logic, _data) {\\n    _changeAdmin(admin_);\\n  }\\n\\n  /**\\n   * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n   */\\n  modifier ifAdmin() {\\n    if (msg.sender == _getAdmin()) {\\n      _;\\n    } else {\\n      _fallback();\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n   *\\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n   * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n   */\\n  function admin() external ifAdmin returns (address admin_) {\\n    admin_ = _getAdmin();\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n   *\\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n   * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n   */\\n  function implementation() external ifAdmin returns (address implementation_) {\\n    implementation_ = _implementation();\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   *\\n   * Emits an {AdminChanged} event.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n   */\\n  function changeAdmin(address newAdmin) external virtual ifAdmin {\\n    _changeAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrade the implementation of the proxy.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n   */\\n  function upgradeTo(address newImplementation) external ifAdmin {\\n    _upgradeToAndCall(newImplementation, bytes(''), false);\\n  }\\n\\n  /**\\n   * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n   * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n   * proxied contract.\\n   *\\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n   */\\n  function upgradeToAndCall(\\n    address newImplementation,\\n    bytes calldata data\\n  ) external payable ifAdmin {\\n    _upgradeToAndCall(newImplementation, data, true);\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.\\n   */\\n  function _admin() internal view virtual returns (address) {\\n    return _getAdmin();\\n  }\\n\\n  /**\\n   * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n   */\\n  function _beforeFallback() internal virtual override {\\n    require(\\n      msg.sender != _getAdmin(),\\n      'TransparentUpgradeableProxy: admin cannot fallback to proxy target'\\n    );\\n    super._beforeFallback();\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/transparent-proxy/ProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @dev OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts/tree/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n *\\n * BGD Labs adaptations:\\n * - Linting\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport './TransparentUpgradeableProxy.sol';\\nimport '../oz-common/Ownable.sol';\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n  /**\\n   * @dev Returns the current implementation of `proxy`.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function getProxyImplementation(\\n    TransparentUpgradeableProxy proxy\\n  ) public view virtual returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex'5c60da1b');\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Returns the current admin of `proxy`.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n    // We need to manually run the static call since the getter cannot be flagged as view\\n    // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n    (bool success, bytes memory returndata) = address(proxy).staticcall(hex'f851a440');\\n    require(success);\\n    return abi.decode(returndata, (address));\\n  }\\n\\n  /**\\n   * @dev Changes the admin of `proxy` to `newAdmin`.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the current admin of `proxy`.\\n   */\\n  function changeProxyAdmin(\\n    TransparentUpgradeableProxy proxy,\\n    address newAdmin\\n  ) public virtual onlyOwner {\\n    proxy.changeAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function upgrade(\\n    TransparentUpgradeableProxy proxy,\\n    address implementation\\n  ) public virtual onlyOwner {\\n    proxy.upgradeTo(implementation);\\n  }\\n\\n  /**\\n   * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n   * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n   *\\n   * Requirements:\\n   *\\n   * - This contract must be the admin of `proxy`.\\n   */\\n  function upgradeAndCall(\\n    TransparentUpgradeableProxy proxy,\\n    address implementation,\\n    bytes memory data\\n  ) public payable virtual onlyOwner {\\n    proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/transparent-proxy/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/** @dev OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts/tree/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n *\\n * BGD Labs adaptations:\\n * - Same exact version as OZ, only linting changes\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport './Proxy.sol';\\nimport './ERC1967Upgrade.sol';\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n  /**\\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n   *\\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n   * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n   */\\n  constructor(address _logic, bytes memory _data) payable {\\n    _upgradeToAndCall(_logic, _data, false);\\n  }\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _implementation() internal view virtual override returns (address impl) {\\n    return ERC1967Upgrade._getImplementation();\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/oz-common/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    _checkOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if the sender is not the owner.\\n   */\\n  function _checkOwner() internal view virtual {\\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/transparent-proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @dev OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts/tree/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n *\\n * BGD Labs adaptations:\\n * - Linting\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n  /**\\n   * @dev Delegates the current call to `implementation`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _delegate(address implementation) internal virtual {\\n    assembly {\\n      // Copy msg.data. We take full control of memory in this inline assembly\\n      // block because it will not return to Solidity code. We overwrite the\\n      // Solidity scratch pad at memory position 0.\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Call the implementation.\\n      // out and outsize are 0 because we don't know the size yet.\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data.\\n      returndatacopy(0, 0, returndatasize())\\n\\n      switch result\\n      // delegatecall returns 0 on error.\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n   * and {_fallback} should delegate.\\n   */\\n  function _implementation() internal view virtual returns (address);\\n\\n  /**\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\n   *\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\n   */\\n  function _fallback() internal virtual {\\n    _beforeFallback();\\n    _delegate(_implementation());\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n   * is empty.\\n   */\\n  receive() external payable virtual {\\n    _fallback();\\n  }\\n\\n  /**\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\n   *\\n   * If overridden should call `super._beforeFallback()`.\\n   */\\n  function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/transparent-proxy/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/** @dev OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts/tree/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n *\\n * BGD Labs adaptations:\\n * - This is an opinionated version, to be used on \\\"classic\\\" transparent upgradeable proxies (non UUPS/Beacon)\\n * - For the sake of simplification and gas savings on deployment, the functions/constants related with UUPS/Beacon have been removed\\n * - Moved declaration of `_ADMIN_SLOT` constant and `AdminChanged` event to the top\\n * - Linting\\n * - Removed imports not used anymore due to not have UUPS/Beacon logic\\n */\\n\\npragma solidity ^0.8.2;\\n\\nimport '../oz-common/Address.sol';\\nimport '../oz-common/StorageSlot.sol';\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n  /**\\n   * @dev Storage slot with the address of the current implementation.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _IMPLEMENTATION_SLOT =\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n  /**\\n   * @dev Storage slot with the admin of the contract.\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n   * validated in the constructor.\\n   */\\n  bytes32 internal constant _ADMIN_SLOT =\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n  /**\\n   * @dev Emitted when the implementation is upgraded.\\n   */\\n  event Upgraded(address indexed implementation);\\n\\n  /**\\n   * @dev Emitted when the admin account has changed.\\n   */\\n  event AdminChanged(address previousAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Returns the current implementation address.\\n   */\\n  function _getImplementation() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\n   */\\n  function _setImplementation(address newImplementation) private {\\n    require(Address.isContract(newImplementation), 'ERC1967: new implementation is not a contract');\\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeTo(address newImplementation) internal {\\n    _setImplementation(newImplementation);\\n    emit Upgraded(newImplementation);\\n  }\\n\\n  /**\\n   * @dev Perform implementation upgrade with additional setup call.\\n   *\\n   * Emits an {Upgraded} event.\\n   */\\n  function _upgradeToAndCall(\\n    address newImplementation,\\n    bytes memory data,\\n    bool forceCall\\n  ) internal {\\n    _upgradeTo(newImplementation);\\n    if (data.length > 0 || forceCall) {\\n      Address.functionDelegateCall(newImplementation, data);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the current admin.\\n   */\\n  function _getAdmin() internal view returns (address) {\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n  }\\n\\n  /**\\n   * @dev Stores a new address in the EIP1967 admin slot.\\n   */\\n  function _setAdmin(address newAdmin) private {\\n    require(newAdmin != address(0), 'ERC1967: new admin is the zero address');\\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n  }\\n\\n  /**\\n   * @dev Changes the admin of the proxy.\\n   *\\n   * Emits an {AdminChanged} event.\\n   */\\n  function _changeAdmin(address newAdmin) internal {\\n    emit AdminChanged(_getAdmin(), newAdmin);\\n    _setAdmin(newAdmin);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/oz-common/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/oz-common/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, 'Address: low-level call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data\\n  ) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), 'Address: call to non-contract');\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/oz-common/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      r.slot := slot\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@aave/core-v3/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"aave-address-book/=lib/aave-address-book/src/\",\r\n      \"aave-v3-core/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hyperlane-monorepo/=lib/hyperlane-monorepo/solidity/contracts/\",\r\n      \"nitro-contracts/=lib/nitro-contracts/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solidity-examples/=lib/solidity-examples/contracts/\",\r\n      \"solidity-utils/=lib/solidity-utils/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adminOwner\",\"type\":\"address\"}],\"name\":\"ProxyAdminCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adminOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"ProxyAdminDeterministicCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAdmin\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"ProxyDeterministicCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createDeterministic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createDeterministicProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminOwner\",\"type\":\"address\"}],\"name\":\"createProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictCreateDeterministic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictCreateDeterministicProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TransparentProxyFactory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}