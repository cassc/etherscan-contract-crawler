{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Forsage {\r\n\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        uint partnersCount;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    address public id1;\r\n}\r\n\r\ncontract XQoreStorage {\r\n    \r\n    using SafeERC20 for IERC20;\r\n\r\n    address payable public xQore;\r\n    address public owner;\r\n    \r\n\r\n    event CannotSendETH(address indexed to, uint value);\r\n\r\n    constructor(address ownerAddress) public {\r\n        xQore = payable(msg.sender);\r\n        owner = ownerAddress;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == xQore, \"XQoreStorage: receive(). XQore only\");\r\n    }\r\n\r\n    function transferTo(address to, uint value) public {\r\n        require(msg.sender == xQore);\r\n        (bool res , ) = to.call{value: value}(\"\");\r\n        if(!res) {\r\n            emit CannotSendETH(to, value);\r\n        }\r\n    }\r\n\r\n    function withdrawLostTokens(address tokenAddress) public {\r\n        require(msg.sender == owner);        \r\n        IERC20(tokenAddress).transfer(owner, IERC20(tokenAddress).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\ncontract XQoreBasic {\r\n    \r\n    // -----DON'T REMOVE-----------\r\n    address public impl;\r\n    address public contractOwner;\r\n    // -----------------------------\r\n\r\n    uint8 public MAX_LEVEL;\r\n\r\n    struct User {\r\n        uint id;\r\n        address referrer;\r\n        bool exists;\r\n        \r\n        mapping(uint8 => bool) activeX6Levels;        \r\n        mapping(uint8 => X6) x6Matrix;\r\n    }\r\n    \r\n    struct X6 {\r\n        address currentReferrerAddress;\r\n\r\n        address[3] firstLevelReferrals;\r\n        address[9] secondLevelReferrals;\r\n\r\n        uint128 reinvestCount;\r\n        bool blocked;\r\n    }\r\n\r\n    Forsage public forsage;\r\n    XQoreStorage public xQoreStorage;\r\n    \r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint8 => uint) public levelPrice;\r\n\r\n    address public owner;\r\n    address public multisig;\r\n\r\n    bool public locked;\r\n    \r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 level);\r\n    event Upgrade(address indexed user, address indexed referrer, uint8 level);\r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 level, uint8 place);\r\n    event MissedEthReceive(address indexed receiver, address indexed from, uint8 level);\r\n    event SentExtraEthDividends(address indexed _from, address indexed receiver, uint8 _level, uint _value);\r\n    event StoredETH(address indexed from, address indexed to, uint8 level, uint value);\r\n    event ReleasedETH(address indexed from, address indexed to, uint8 level, uint value);\r\n    event CannotSendETH(address indexed to, uint value);\r\n    event FeeSent(address indexed from, uint8 level, uint value);\r\n\r\n    function receiveEth() external payable {}\r\n}\r\n\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal virtual view returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback () payable external {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive () payable external {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     * \r\n     * If overriden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {\r\n    }\r\n}\r\n\r\n\r\ncontract XQoreProxy is Proxy {\r\n    \r\n    address public impl;\r\n    address public contractOwner;\r\n\r\n    modifier onlyContractOwner() { \r\n        require(msg.sender == contractOwner); \r\n        _; \r\n    }\r\n\r\n    constructor(address _impl) public {\r\n        impl = _impl;\r\n        contractOwner = msg.sender;\r\n    }\r\n    \r\n    function update(address newImpl) public onlyContractOwner {\r\n        impl = newImpl;\r\n    }\r\n\r\n    function removeOwnership() public onlyContractOwner {\r\n        contractOwner = address(0);\r\n    }\r\n    \r\n    function _implementation() internal override view returns (address) {\r\n        return impl;\r\n    }\r\n}\r\n\r\ncontract XQore is XQoreBasic {\r\n    \r\n    using SafeERC20 for IERC20;\r\n    \r\n    modifier onlyContractOwner() { \r\n        require(msg.sender == contractOwner, \"onlyOwner\"); \r\n        _; \r\n    }\r\n    \r\n    modifier onlyUnlocked() { \r\n        require(block.timestamp >= 1682607600, \"waiting for start time\");\r\n        _; \r\n    }\r\n \r\n    // FORSAGE - 0x5acc84a3e955Bdd76467d3348077d003f00fFB97\r\n    function init(address _forsage, address _multisig) public onlyContractOwner() {\r\n        require(forsage == Forsage(address(0)), \"already inited\");\r\n\r\n        multisig = _multisig;\r\n\r\n        MAX_LEVEL = 12;\r\n        \r\n        forsage = Forsage(_forsage);\r\n        \r\n        contractOwner = msg.sender;\r\n        \r\n        levelPrice[1] = 0.018e18;\r\n        levelPrice[2] = 0.024e18;\r\n        levelPrice[3] = 0.033e18;\r\n        levelPrice[4] = 0.046e18;\r\n        levelPrice[5] = 0.062e18;\r\n        levelPrice[6] = 0.088e18;\r\n        levelPrice[7] = 0.125e18;\r\n        levelPrice[8] = 0.175e18;\r\n        levelPrice[9] = 0.245e18;\r\n        levelPrice[10] = 0.345e18;\r\n        levelPrice[11] = 0.455e18;\r\n        levelPrice[MAX_LEVEL] = 0.644e18;\r\n        \r\n        owner = forsage.id1();\r\n        \r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            exists: true\r\n        });\r\n        \r\n        users[owner] = user;\r\n        idToAddress[1] = owner;\r\n        \r\n        for(uint8 i = 1; i <= MAX_LEVEL; i++) {\r\n            users[owner].activeX6Levels[i] = true;\r\n        }\r\n    \r\n        xQoreStorage = new XQoreStorage(contractOwner);\r\n    }\r\n    \r\n    function changeLock() external onlyContractOwner() {\r\n        locked = !locked;\r\n    }\r\n\r\n    receive() external payable onlyUnlocked {\r\n        //avoid payment loop\r\n        if(msg.sender == address(xQoreStorage)) {\r\n            return;\r\n        }\r\n\r\n        require(gasleft() > uint(400000), \"too low gas limit\");\r\n        uint8 _level = findRequestedLevel(msg.value);\r\n        require(_level > 0, \"invalid value\");\r\n\r\n        _buyNewLevel(msg.sender, _level);\r\n    }\r\n\r\n    function findRequestedLevel(uint value) public view returns(uint8 level) {\r\n        for (uint8 i = 1; i <= MAX_LEVEL; i++) {\r\n            if(levelPrice[i] == value) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function registrationExt() external payable onlyUnlocked() {\r\n        require(gasleft() > uint(400000), \"too low gas limit\");\r\n        _registration(msg.sender);\r\n    }\r\n\r\n    function registrationFor(address userAddress) external payable onlyUnlocked() {\r\n        require(gasleft() > uint(400000), \"too low gas limit\");\r\n        _registration(userAddress);\r\n    }\r\n\r\n    function buyNewLevel(uint8 level) external payable onlyUnlocked() {\r\n        require(gasleft() > uint(400000), \"too low gas limit\");\r\n        _buyNewLevel(msg.sender, level);\r\n    }\r\n\r\n    function buyNewLevelFor(address userAddress, uint8 level) external payable onlyUnlocked() {\r\n        require(gasleft() > uint(400000), \"too low gas limit\");\r\n        _buyNewLevel(userAddress, level);\r\n    }\r\n\r\n    function _buyNewLevel(address userAddress, uint8 level) internal {\r\n        // require(msg.sender == tx.origin, \"cannot be a contract\");\r\n\r\n        if (!isUserExists(userAddress)) {\r\n            return _registration(userAddress);\r\n        }\r\n\r\n        require(level > 1 && level <= MAX_LEVEL, \"invalid level\");\r\n        require(!users[userAddress].activeX6Levels[level], \"level already activated\");\r\n        require(users[userAddress].activeX6Levels[level-1], \"buy previous level first\");\r\n\r\n        require(msg.value == levelPrice[level], \"invalid price\"); // fee included;\r\n\r\n        if (users[userAddress].x6Matrix[level-1].blocked) {\r\n            users[userAddress].x6Matrix[level-1].blocked = false;\r\n        }\r\n\r\n        address freeX6Referrer = findFreeX6Referrer(userAddress, level);\r\n        \r\n        users[userAddress].activeX6Levels[level] = true;\r\n        updateX6Referrer(userAddress, freeX6Referrer, level, levelPrice[level]);\r\n        // controller.update(msg.sender, level, msg.value, 0);\r\n        \r\n        emit Upgrade(userAddress, freeX6Referrer, level);\r\n    }\r\n    \r\n    function _registration(address userAddress) private {\r\n    \r\n        (uint _id ,address referrerAddress, ) = forsage.users(userAddress);\r\n\r\n        require(referrerAddress != address(0), \"register in Forsage first\");\r\n        require(msg.value == levelPrice[1], \"registration cost 0.018 BNB\");\r\n        // depositToken.safeTransferFrom(msg.sender, address(this), levelPrice[1]);\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        // require(msg.sender == tx.origin, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: _id,\r\n            referrer: referrerAddress,\r\n            exists: true\r\n        });\r\n\r\n        users[userAddress] = user;\r\n\r\n        idToAddress[_id] = userAddress;\r\n        users[userAddress].activeX6Levels[1] = true;\r\n\r\n        address currentReferrer = findFreeX6Referrer(userAddress, 1);\r\n\r\n        updateX6Referrer(userAddress, currentReferrer, 1, levelPrice[1]);\r\n        // controller.update(userAddress, 1, msg.value, 0);\r\n        \r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n\r\n    function updateX6Referrer(address userAddress, address referrerAddress, uint8 level, uint ethValue) internal {\r\n        uint8 n = 0;\r\n        uint total2LevelUsers;\r\n\r\n        while(n < 3) {\r\n            if(users[referrerAddress].x6Matrix[level].firstLevelReferrals[n] == address(0)) {\r\n\r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[n] = userAddress;\r\n                emit NewUserPlace(userAddress, referrerAddress, level, n);\r\n                \r\n                //set current level\r\n                users[userAddress].x6Matrix[level].currentReferrerAddress = referrerAddress;\r\n                // users[userAddress].x6Matrix[level].currentReferrerIndex = n;\r\n\r\n                if (referrerAddress == owner) {\r\n                    sendDividends(userAddress, referrerAddress, level, ethValue/2);\r\n                    return sendDividends(userAddress, referrerAddress, level, ethValue/2);\r\n                } else {\r\n                    sendDividends(userAddress, referrerAddress, level, ethValue/2);\r\n                }\r\n                \r\n                address ref = users[referrerAddress].x6Matrix[level].currentReferrerAddress;\r\n\r\n                uint currentReferrerIndex;\r\n                for(uint8 i = 0; i < 3; i++) {\r\n                    if(users[ref].x6Matrix[level].firstLevelReferrals[i] == referrerAddress) {\r\n                        currentReferrerIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (currentReferrerIndex == 0) {\r\n                    users[ref].x6Matrix[level].secondLevelReferrals[n] = userAddress;\r\n                    emit NewUserPlace(userAddress, ref, level, n+3);\r\n                } else if (currentReferrerIndex == 1) {\r\n                    users[ref].x6Matrix[level].secondLevelReferrals[n+3] = userAddress;\r\n                    emit NewUserPlace(userAddress, ref, level, n+6);\r\n                } else if (currentReferrerIndex == 2) {\r\n                    users[ref].x6Matrix[level].secondLevelReferrals[n+6] = userAddress;\r\n                    emit NewUserPlace(userAddress, ref, level, n+9);\r\n                }\r\n\r\n                total2LevelUsers = 0;\r\n\r\n                for(uint i = 0; i < 9; i++) {\r\n                    if (users[ref].x6Matrix[level].secondLevelReferrals[i] != address(0)) {\r\n                        total2LevelUsers++;\r\n                    }\r\n                }\r\n\r\n                if(total2LevelUsers >= 8) {\r\n                    storeTokens(userAddress, ref, level, ethValue/2);\r\n                } else {\r\n                    // if(ref == owner) {\r\n                    //     sendOwnerETHDividends(userAddress, level);\r\n                    // }\r\n\r\n                    sendDividends(userAddress, ref, level,  ethValue/2);\r\n                }\r\n\r\n                if(total2LevelUsers == 9) {\r\n                    return reinvest(msg.sender, ref, level);\r\n                }\r\n\r\n                return;\r\n            }\r\n    \r\n            n++;\r\n        }\r\n\r\n        //---------------------------- SECOND LEVEL -------------------------------------\r\n\r\n        n = 0;\r\n        while(true) {\r\n            if (users[referrerAddress].x6Matrix[level].secondLevelReferrals[n] == address(0)) {\r\n                users[referrerAddress].x6Matrix[level].secondLevelReferrals[n] = userAddress;\r\n                emit NewUserPlace(userAddress, referrerAddress, level, n+3);\r\n                \r\n                //move to bottom\r\n                uint a;\r\n                if(n < 3) {\r\n                    a = 0;\r\n                } else if (n < 6) {\r\n                    a = 1;\r\n                } else {\r\n                    a = 2;\r\n                }\r\n\r\n                address currentReferrer = users[referrerAddress].x6Matrix[level].firstLevelReferrals[a];\r\n                users[currentReferrer].x6Matrix[level].firstLevelReferrals[n%3] = userAddress; \r\n\r\n                //set current level\r\n                users[userAddress].x6Matrix[level].currentReferrerAddress = currentReferrer;\r\n                // uint currentReferrerIndex = n%3;\r\n                emit NewUserPlace(userAddress, currentReferrer, level, n%3);\r\n\r\n                // if (referrerAddress == owner) {\r\n                //     return sendOwnerETHDividends(userAddress, level);\r\n                // }\r\n\r\n                sendDividends(userAddress, currentReferrer, level, ethValue/2);\r\n\r\n\r\n                total2LevelUsers = 0;\r\n\r\n                for (uint i = 0; i < 9; i++) {\r\n                    if (users[referrerAddress].x6Matrix[level].secondLevelReferrals[i] != address(0)) {\r\n                        total2LevelUsers++;\r\n                    }\r\n                }\r\n\r\n                if (total2LevelUsers >= 8) {\r\n                    storeTokens(userAddress, referrerAddress, level, ethValue/2);\r\n                } else {\r\n                    // if (referrerAddress == owner) {\r\n                    //     return sendOwnerETHDividends(userAddress, level);\r\n                    // }\r\n\r\n                    sendDividends(userAddress, referrerAddress, level, ethValue/2);\r\n                }\r\n\r\n                if (total2LevelUsers == 9) {\r\n                    return reinvest(msg.sender, referrerAddress, level);\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            if(n == 0) {\r\n                n = 3;\r\n            } else if(n==3) {\r\n                n = 6;\r\n            } else if(n==6) {\r\n                n = 1;\r\n            } else if(n==1) {\r\n                n = 4;\r\n            } else if(n==4) {\r\n                n = 7;\r\n            } else if(n==7) {\r\n                n = 2;\r\n            } else if(n==2) {\r\n                n = 5;\r\n            } else if(n==5) {\r\n                n = 8;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function reinvest(address caller, address userAddress, uint8 level) internal {\r\n        address referrer = findFreeX6Referrer(userAddress, level);\r\n\r\n        address[3] memory a3;\r\n        address[9] memory a9;\r\n        \r\n        users[userAddress].x6Matrix[level].currentReferrerAddress = referrer;\r\n        users[userAddress].x6Matrix[level].firstLevelReferrals = a3;\r\n        users[userAddress].x6Matrix[level].secondLevelReferrals = a9;\r\n        users[userAddress].x6Matrix[level].reinvestCount++;\r\n\r\n        if (userAddress == owner) {\r\n            xQoreStorage.transferTo(multisig, levelPrice[level]);\r\n            // controller.update(owner, level, levelPrice[level], 1);\r\n            emit ReleasedETH(userAddress, owner, level, levelPrice[level]);\r\n        } else {\r\n            xQoreStorage.transferTo(address(this), levelPrice[level]);\r\n            // controller.update(referrer, level, levelPrice[level], 1);\r\n            emit ReleasedETH(userAddress, referrer, level, levelPrice[level]);\r\n        }\r\n\r\n        // controller.update(userAddress, level, levelPrice[level], 2);\r\n\r\n        emit Reinvest(userAddress, referrer, caller, level);\r\n\r\n        if (level != MAX_LEVEL && !users[userAddress].activeX6Levels[level+1]) {\r\n            users[userAddress].x6Matrix[level].blocked = true;\r\n        }\r\n\r\n        if (referrer == address(0)) {\r\n            return;\r\n        }\r\n\r\n        updateX6Referrer(userAddress, referrer, level, levelPrice[level]);\r\n    }\r\n        \r\n    function findFreeX6Referrer(address userAddress, uint8 level) public view returns(address) {\r\n        if (userAddress == owner) {\r\n            return address(0);\r\n        }\r\n\r\n        address userBuf = userAddress;\r\n        uint maxIterations = 50;\r\n        uint iterations = 0;\r\n\r\n        while(true) {\r\n            ( , address ref, ) = forsage.users(userBuf);\r\n\r\n            iterations++;\r\n            if(iterations >= maxIterations || ref == owner) {\r\n                return owner;\r\n            }\r\n\r\n            userBuf = ref;\r\n\r\n            if(users[ref].referrer != address(0)) {\r\n                if(users[userBuf].exists && users[userBuf].activeX6Levels[level]) {\r\n                    return userBuf;\r\n                }\r\n            }\r\n        }\r\n\r\n        return owner;\r\n    }\r\n\r\n    function usersActiveX6Levels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeX6Levels[level];\r\n    }\r\n\r\n    function usersX6Matrix(address userAddress, uint8 level) public view returns(address currentReferrerAddress, address[3] memory firstLevelReferrals, address[9] memory secondLevelReferrals) {\r\n        return (\r\n            users[userAddress].x6Matrix[level].currentReferrerAddress,\r\n            users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n            users[userAddress].x6Matrix[level].secondLevelReferrals\r\n        );\r\n    }\r\n    \r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function findEthReceiver(address userAddress, address _from, uint8 level) private returns(address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n\r\n        uint8 iter = 0;\r\n        while (true) {\r\n            if (users[receiver].x6Matrix[level].blocked) {\r\n                emit MissedEthReceive(receiver, _from, level);\r\n                isExtraDividends = true;\r\n                receiver = users[receiver].x6Matrix[level].currentReferrerAddress;\r\n\r\n                iter++;\r\n                if(iter >= 25) {\r\n                    return (owner, isExtraDividends);\r\n                }\r\n            } else {\r\n                return (receiver, isExtraDividends);\r\n            }\r\n        }\r\n\r\n        return (owner, true);\r\n    }\r\n\r\n\r\n    function sendDividends(address _from, address _to, uint8 _level, uint _value) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(_to, _from, _level);\r\n        if(receiver == owner) {\r\n            receiver = multisig;\r\n        }\r\n        // require(_value > 0, \"smth wrong with value\");\r\n        // require(depositToken.balanceOf(address(this)) >= _value, \"smth wrong with balance\");\r\n        (bool res, ) = receiver.call{value: _value}(\"\");\r\n        if(!res) {\r\n            // revert(\"CannotSendETH\");\r\n            emit CannotSendETH(receiver, _value);\r\n        }\r\n        // depositToken.safeTransfer(receiver, _value);\r\n        if(isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, _level, _value);\r\n        }\r\n    }\r\n    \r\n    function storeTokens(address from, address to, uint8 level, uint value) private {\r\n        address addr = address(xQoreStorage);\r\n        (bool res,) = payable(addr).call{value: value}(\"\");\r\n        if(!res) {\r\n            // revert(\"CannotSendETH\");\r\n            emit CannotSendETH(to, value);\r\n        }\r\n        // depositToken.safeTransfer(address(xQoreStorage), value);\r\n        emit StoredETH(from, to, level, value);\r\n    }\r\n    \r\n    function withdrawLostTokens(address tokenAddress) public onlyContractOwner {\r\n        if (tokenAddress == address(0)) {\r\n            address(uint160(multisig)).transfer(address(this).balance);\r\n        } else {\r\n            IERC20(tokenAddress).transfer(multisig, IERC20(tokenAddress).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function withdrawStoredETH(address payable to, uint value) public onlyContractOwner {\r\n        xQoreStorage.transferTo(to, value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XQoreProxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004275f2edd1f74f88f67ba55dd450f98684695d87", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x46510b6534f632298523b8bab73fd98853c15f47", "SwarmSource": "ipfs://85aba1db847803901bc715a81cf626926fa5cca7499c8294dd938537d356a015"}