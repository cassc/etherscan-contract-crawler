{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/lando/tmp/tellor/tenet-core/contracts/ChefMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\nimport \\\"./ERC20/SafeERC20.sol\\\";\\nimport \\\"./Math/SafeMath.sol\\\";\\nimport \\\"./Common/Ownable.sol\\\";\\n\\ncontract ChefMaster is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;             \\n        uint256 rewardTokenDebt;    \\n        uint256 lastBlockNumber;    \\n    }\\n    // Info of each pool.\\n    struct PoolSettingInfo{\\n        address lpToken;            \\n        address tokenAddr;          \\n        address projectAddr;        \\n        uint256 tokenAmount;       \\n        uint256 startBlock;        \\n        uint256 endBlock;          \\n        uint256 tokenPerBlock;      \\n        uint256 tokenBonusEndBlock; \\n        uint256 tokenBonusMultipler;\\n    }\\n    struct PoolInfo {\\n        uint256 lastRewardBlock;  \\n        uint256 lpTokenTotalAmount;\\n        uint256 accTokenPerShare; \\n        uint256 userCount;\\n        uint256 amount;     \\n        uint256 mineTokenAmount;\\n    }\\n\\n    uint256 public emergencyWithdraw;\\n    uint256 public constant MINLPTOKEN_AMOUNT = 10;\\n    uint256 public constant PERSHARERATE = 1000000000000;\\n    PoolInfo[] public poolInfo;\\n    PoolSettingInfo[] public poolSettingInfo;\\n\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    mapping (address => UserInfo) public userInfoUserPool;\\n\\n    event AddPool(address indexed user, uint256 indexed pid, uint256 tokenAmount);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount,uint256 penddingToken);\\n    event DepositFrom(address indexed user, uint256 indexed pid, uint256 amount,address from,uint256 penddingToken);\\n    event MineLPToken(address indexed user, uint256 indexed pid, uint256 penddingToken);    \\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount,uint256 penddingToken);\\n\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    modifier onlyNotEmergencyWithdraw() {\\n        require(emergencyWithdraw == 0, \\\"onlyNotEmergencyWithdraw: emergencyWithdraw now\\\");\\n        _;\\n    }    \\n    function poolLength() public view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function set_emergencyWithdraw(uint256 _emergencyWithdraw) public onlyOwner {\\n        emergencyWithdraw = _emergencyWithdraw;\\n    }\\n\\n    function poolMultipler(uint256 _pid) public view returns (uint256) {\\n        require(_pid < poolInfo.length, \\\"poolMultipler: invalid pid\\\");\\n        PoolSettingInfo memory p = poolSettingInfo[_pid];\\n\\n        if (block.number < p.startBlock) return 0;\\n        if (block.number > p.endBlock) return 0;\\n        if (block.number < p.tokenBonusEndBlock) return p.tokenBonusMultipler;\\n        return 1;\\n    }\\n\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to,uint256 _end,uint256 _tokenBonusEndBlock,uint256 _tokenBonusMultipler) internal pure returns (uint256) {\\n        if (_to > _end) {\\n            _to = _end;\\n        }\\n        if (_from>_end) {\\n            return 0;\\n        } else if (_to <= _tokenBonusEndBlock) {\\n            return _to.sub(_from).mul(_tokenBonusMultipler);\\n        } else if (_from >= _tokenBonusEndBlock) {\\n            return _to.sub(_from);\\n        } else {\\n            return _tokenBonusEndBlock.sub(_from).mul(_tokenBonusMultipler).add(_to.sub(_tokenBonusEndBlock));\\n        }\\n    }\\n\\n    // Add Pool\\n    function add(address _lpToken,\\n            address _tokenAddr,\\n            uint256 _tokenAmount,\\n            uint256 _startBlock,\\n            uint256 _endBlockOffset,\\n            uint256 _tokenPerBlock,\\n            uint256 _tokenBonusEndBlockOffset,\\n            uint256 _tokenBonusMultipler) public onlyOwner {\\n        if(_startBlock == 0){\\n            _startBlock = block.number;\\n        }\\n        require(block.number <= _startBlock, \\\"add: startBlock invalid\\\");\\n        require(_endBlockOffset >= _tokenBonusEndBlockOffset, \\\"add: bonusEndBlockOffset invalid\\\");\\n        require(getMultiplier(_startBlock,_startBlock.add(_endBlockOffset),_startBlock.add(_endBlockOffset),_startBlock.add(_tokenBonusEndBlockOffset),_tokenBonusMultipler).mul(_tokenPerBlock) <= _tokenAmount, \\\"add: token amount invalid\\\");\\n        require(_tokenAmount > 0, \\\"add: tokenAmount invalid\\\");\\n        IERC20(_tokenAddr).safeTransferFrom(msg.sender,address(this), _tokenAmount);\\n\\n        uint256 pid = poolInfo.length;\\n        poolSettingInfo.push(PoolSettingInfo({\\n                lpToken: _lpToken,\\n                tokenAddr: _tokenAddr,\\n                projectAddr: msg.sender,\\n                tokenAmount:_tokenAmount,\\n                startBlock: _startBlock,\\n                endBlock: _startBlock.add(_endBlockOffset),\\n                tokenPerBlock: _tokenPerBlock,\\n                tokenBonusEndBlock: _startBlock.add(_tokenBonusEndBlockOffset),\\n                tokenBonusMultipler: _tokenBonusMultipler\\n            }));\\n        poolInfo.push(PoolInfo({\\n            lastRewardBlock: block.number > _startBlock ? block.number : _startBlock,\\n            accTokenPerShare: 0,\\n            lpTokenTotalAmount: 0,\\n            userCount: 0,\\n            amount: 0,\\n            mineTokenAmount: 0\\n        }));\\n\\n        emit AddPool(msg.sender, pid, _tokenAmount);\\n    }\\n\\n    function _updatePoolUserInfo(UserInfo storage user,uint256 _amount,uint256 _amountType) internal {\\n        if(_amountType == 1){\\n            user.amount = user.amount.add(_amount);\\n        }else if(_amountType == 2){\\n            user.amount = user.amount.sub(_amount);      \\n        }\\n        user.lastBlockNumber = block.number;\\n    }\\n\\n    function _minePoolToken(PoolInfo storage pool,PoolSettingInfo storage poolSetting) internal {\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        if (pool.lpTokenTotalAmount >= MINLPTOKEN_AMOUNT) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number,poolSetting.endBlock,poolSetting.tokenBonusEndBlock,poolSetting.tokenBonusMultipler);\\n            if(multiplier > 0){\\n                uint256 tokenReward = multiplier.mul(poolSetting.tokenPerBlock);\\n                pool.mineTokenAmount = pool.mineTokenAmount.add(tokenReward);\\n                pool.accTokenPerShare = pool.accTokenPerShare.add(tokenReward.mul(PERSHARERATE).div(pool.lpTokenTotalAmount));\\n            }\\n        }\\n        if(pool.lastRewardBlock < poolSetting.endBlock){\\n            if(block.number >= poolSetting.endBlock){\\n                if(poolSetting.tokenAmount.sub(pool.mineTokenAmount) > 0){\\n                    IERC20(poolSetting.tokenAddr).safeTransfer(poolSetting.projectAddr,poolSetting.tokenAmount.sub(pool.mineTokenAmount));\\n                }\\n            }\\n        }\\n        pool.lastRewardBlock = block.number;\\n    }\\n    function _withdrawTokenPool(address userAddr,PoolInfo storage pool,UserInfo storage user,PoolSettingInfo storage poolSetting) \\n            internal returns (uint256 pendingToken){\\n        if (user.amount >= MINLPTOKEN_AMOUNT) {\\n            pendingToken = user.amount.mul(pool.accTokenPerShare).div(PERSHARERATE).sub(user.rewardTokenDebt);\\n            if(pendingToken > 0){\\n                IERC20(poolSetting.tokenAddr).safeTransfer(userAddr, pendingToken);\\n            }\\n        }\\n    }\\n    function _updateTokenPoolUser(uint256 accTokenPerShare,UserInfo storage user,uint256 _amount,uint256 _amountType) internal {\\n        _updatePoolUserInfo(user,_amount,_amountType);\\n        user.rewardTokenDebt = user.amount.mul(accTokenPerShare).div(PERSHARERATE);\\n    }\\n\\n    // for token public\\n    function depositLPToken(uint256 _pid, uint256 _amount) public onlyNotEmergencyWithdraw {\\n        require(_amount > 0, \\\"depositLPToken: lpamount not good\\\");\\n        require(_pid < poolInfo.length, \\\"depositLPToken: invalid pid\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        PoolSettingInfo storage poolSetting = poolSettingInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        _minePoolToken(pool,poolSetting);\\n        (uint256 pendingToken) = _withdrawTokenPool(msg.sender,pool,user,poolSetting);\\n        if (user.amount < MINLPTOKEN_AMOUNT) {\\n            pool.userCount = pool.userCount.add(1);\\n        }\\n        IERC20(poolSetting.lpToken).safeTransferFrom(address(msg.sender), address(this), _amount);\\n        pool.lpTokenTotalAmount = pool.lpTokenTotalAmount.add(_amount);\\n        _updateTokenPoolUser(pool.accTokenPerShare,user,_amount,1);\\n        emit Deposit(msg.sender, _pid, _amount,pendingToken);\\n    }\\n    // for token public\\n    function withdrawLPToken(uint256 _pid, uint256 _amount) public {\\n        require(_amount > 0, \\\"withdrawLPToken: lpamount not good\\\");\\n        require(_pid < poolInfo.length, \\\"withdrawLPToken: invalid pid\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        PoolSettingInfo storage poolSetting = poolSettingInfo[_pid];\\n        require(user.amount >= _amount, \\\"withdrawLPToken: not good\\\");\\n        if (emergencyWithdraw == 0) {\\n            _minePoolToken(pool,poolSetting);\\n            (uint256 pendingToken) = _withdrawTokenPool(msg.sender,pool,user,poolSetting);\\n            _updateTokenPoolUser(pool.accTokenPerShare,user,_amount,2);\\n            emit Withdraw(msg.sender, _pid, _amount,pendingToken);\\n        } else {\\n            _updateTokenPoolUser(pool.accTokenPerShare,user,_amount,2);\\n            emit Withdraw(msg.sender, _pid, _amount,0);\\n        }\\n        IERC20(poolSetting.lpToken).safeTransfer(address(msg.sender), _amount);\\n        pool.lpTokenTotalAmount = pool.lpTokenTotalAmount.sub(_amount);\\n        if(user.amount < MINLPTOKEN_AMOUNT){\\n            pool.userCount = pool.userCount.sub(1);\\n        }\\n    }\\n    // for token public\\n    function mineLPToken(uint256 _pid) public onlyNotEmergencyWithdraw {\\n        require(_pid < poolInfo.length, \\\"mineLPToken: invalid pid\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        PoolSettingInfo storage poolSetting = poolSettingInfo[_pid];\\n        _minePoolToken(pool,poolSetting);\\n        (uint256 pendingToken) = _withdrawTokenPool(msg.sender,pool,user,poolSetting);\\n        _updateTokenPoolUser(pool.accTokenPerShare,user,0,0);\\n        emit MineLPToken(msg.sender, _pid, pendingToken);\\n    }\\n    // for token public\\n    function depositLPTokenFrom(address _from,uint256 _pid, uint256 _amount) public onlyNotEmergencyWithdraw {\\n        require(_amount > 0, \\\"depositLPTokenFrom: lpamount not good\\\");\\n        require(_pid < poolInfo.length, \\\"depositLPTokenFrom: invalid pid\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_from];\\n        PoolSettingInfo storage poolSetting = poolSettingInfo[_pid];\\n        _minePoolToken(pool,poolSetting);\\n        (uint256 pendingToken) = _withdrawTokenPool(_from,pool,user,poolSetting);\\n        if (user.amount < MINLPTOKEN_AMOUNT) {\\n            pool.userCount = pool.userCount.add(1);\\n        }\\n        IERC20(poolSetting.lpToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        pool.lpTokenTotalAmount = pool.lpTokenTotalAmount.add(_amount);\\n        _updateTokenPoolUser(pool.accTokenPerShare,user,_amount,1);\\n        emit DepositFrom(_from, _pid, _amount,msg.sender,pendingToken);\\n    }\\n\\n    function getUserInfo(uint256 _pid, address _user) public view returns (uint256[3] memory retData1) {\\n        require(_pid < poolInfo.length, \\\"getUserInfo: invalid pid\\\");\\n        UserInfo memory ui = userInfo[_pid][_user];\\n        retData1[0] = ui.amount;\\n        retData1[1] = ui.rewardTokenDebt;\\n        retData1[2] = ui.lastBlockNumber;\\n    }\\n    \\n    function getPoolAllInfo(uint256 _pid) public view returns (uint256[6] memory retData2,uint256[6] memory retData3) {\\n        require(_pid < poolInfo.length, \\\"getPoolAllInfo: invalid pid\\\");\\n\\n        (retData2) = getPoolSettingInfo(_pid);\\n        (retData3) = getPoolInfo(_pid);\\n    }\\n\\n    function getPoolSettingInfo(uint256 _pid) public view returns (uint256[6] memory retData2) {\\n        require(_pid < poolInfo.length, \\\"getPoolSettingInfo: invalid pid\\\");\\n        PoolSettingInfo memory psi = poolSettingInfo[_pid];\\n        retData2[0] = psi.tokenAmount;\\n        retData2[1] = psi.startBlock;\\n        retData2[2] = psi.endBlock;\\n        retData2[3] = psi.tokenPerBlock;\\n        retData2[4] = psi.tokenBonusEndBlock;\\n        retData2[5] = psi.tokenBonusMultipler;\\n    }\\n\\n    function getPoolInfo(uint256 _pid) public view returns (uint256[6] memory retData3) {\\n        require(_pid < poolInfo.length, \\\"getPoolInfo: invalid pid\\\");\\n        PoolInfo memory pi = poolInfo[_pid];\\n        retData3[0] = pi.lastRewardBlock;\\n        retData3[1] = pi.lpTokenTotalAmount;\\n        retData3[2] = pi.accTokenPerShare;\\n        retData3[3] = pi.userCount;\\n        retData3[4] = pi.amount;\\n        retData3[5] = pi.mineTokenAmount;\\n    }\\n    \\n    function getPendingToken(uint256 _pid, address _user) public view returns (uint256) {\\n        require(_pid < poolInfo.length, \\\"getPendingToken: invalid pid\\\");\\n        (uint256[6] memory retData2,uint256[6] memory retData3) = getPoolAllInfo(_pid);\\n        if(retData3[1] < MINLPTOKEN_AMOUNT){\\n            return 0;\\n        }\\n        uint256[6] memory _userInfo;\\n        UserInfo memory ui = userInfo[_pid][_user];\\n        _userInfo[0] = ui.amount;\\n        _userInfo[2] = ui.rewardTokenDebt;\\n        \\n        if(_userInfo[0] < MINLPTOKEN_AMOUNT){\\n            return 0;\\n        }        \\n        if (block.number > retData3[0] && retData3[1] != 0) {\\n            uint256 tokenReward = retData2[3].mul(getMultiplier(retData3[0], block.number,retData2[2],retData2[4],retData2[5]));\\n            retData3[2] = retData3[2].add(tokenReward.mul(1e12).div(retData3[1]));\\n        }\\n        return _userInfo[0].mul(retData3[2]).div(1e12).sub(_userInfo[2]);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lando/tmp/tellor/tenet-core/contracts/Common/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"/Users/lando/tmp/tellor/tenet-core/contracts/Common/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/lando/tmp/tellor/tenet-core/contracts/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"../Common/Context.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\"\r\n    },\r\n    \"/Users/lando/tmp/tellor/tenet-core/contracts/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"../Utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/Users/lando/tmp/tellor/tenet-core/contracts/Math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"/Users/lando/tmp/tellor/tenet-core/contracts/Utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penddingToken\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penddingToken\",\"type\":\"uint256\"}],\"name\":\"DepositFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penddingToken\",\"type\":\"uint256\"}],\"name\":\"MineLPToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penddingToken\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINLPTOKEN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERSHARERATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlockOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenBonusEndBlockOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenBonusMultipler\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositLPTokenFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolAllInfo\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"retData2\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256[6]\",\"name\":\"retData3\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"retData3\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolSettingInfo\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"retData2\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"retData1\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"mineLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mineTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolMultipler\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolSettingInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBonusMultipler\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emergencyWithdraw\",\"type\":\"uint256\"}],\"name\":\"set_emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfoUserPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChefMaster", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}