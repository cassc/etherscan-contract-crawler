{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"build/contracts/dba.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@uniswap/lib/contracts/libraries/TransferHelper.sol';\\nimport '../lib/dxba.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\ncontract TokenDba is ERC20{\\n    address public owner;\\n    address public devops;\\n    address public outSideFeeWallet;\\n    address public dailyRecv1399Wallet;\\n    address public swapFeeWallet;\\n    address public removeLpFeeWallet;\\n    address public transferFeeWallet;\\n    address public nftDbaWallet;\\n    address usdt;\\n    LibDXba.Lock public lockMessage; \\n    LibDXba.fee public moreFee;\\n    uint constant tokenAmount = 1399 ether;\\n    uint constant lockAmount = 2500000 ether;\\n    address constant public _routerAddr = 0x10ED43C718714eb63d5aA57B78B54704E256024E; \\n    IUniswapV2Router02 constant router = IUniswapV2Router02(_routerAddr);\\n    address public pair;\\n    bool inSolidity;\\n    bool isOpen;\\n    mapping(uint=>mapping(uint=>mapping(uint=>bool))) dailyUse;\\n    mapping(address=>bool) whiteList;\\n    mapping(address=>bool) allowList;\\n    modifier _owner {\\n        require(owner == msg.sender, \\\"You are no owner\\\");\\n        _;\\n    }\\n    modifier _devops {\\n        require(owner == msg.sender || devops == msg.sender, \\\"You are no devops\\\");\\n        _;\\n    }\\n    modifier dailyTrigger {\\n        uint[3] memory date = LibDXba.getDate(block.timestamp);\\n        require(!dailyUse[date[0]][date[1]][date[2]],\\\"can not trigger mint, please wait tomorrow\\\");\\n        _;\\n    }\\n    modifier allowTransaction(address _user) {\\n        if(isOpen && !allowList[_user]){ revert(\\\"The deal hasn't opened yet.\\\"); }\\n        _;\\n    }\\n    constructor(LibDXba.Init memory _init) ERC20(_init.name,_init.symbol) {\\n        \\n        _mint(address(this),_init.total * 1 ether);\\n        uint day = LibDXba.getDay(block.timestamp, 1646006400);\\n        \\n        _transfer(address(this), _init.grantsPurse, day * 1399 ether);\\n        _transfer(address(this),_init.institutionWallet,_init.institution * 1 ether);\\n        owner = msg.sender;\\n        devops = _init.devops;\\n        outSideFeeWallet = _init.outSideFeeWallet;\\n        dailyRecv1399Wallet = _init.dailyRecv1399Wallet;\\n        swapFeeWallet = _init.swapFeeWallet;\\n        removeLpFeeWallet = _init.removeLpFeeWallet;\\n        transferFeeWallet = _init.transferFeeWallet;\\n        nftDbaWallet = _init.nftDbaWallet;\\n        usdt = _init.usdt;\\n        pair = IUniswapV2Factory(router.factory()).createPair(address(this),usdt); \\n        moreFee.poundage = 4;\\n        moreFee.removeLiquidity = 6;\\n        moreFee.swap = 13;\\n        moreFee.offSite = 13;\\n        lockMessage.amount = lockAmount;\\n        allowList[address(this)] = true;\\n    }\\n    function changeWallet(LibDXba.wallet memory _wallet) public _devops {\\n        outSideFeeWallet = _wallet.outSideFeeWallet;\\n        swapFeeWallet = _wallet.swapFeeWallet;\\n        removeLpFeeWallet = _wallet.removeLpFeeWallet;\\n        dailyRecv1399Wallet = _wallet.dailyRecv1399Wallet;\\n        transferFeeWallet = _wallet.transferFeeWallet;\\n        nftDbaWallet = _wallet.nftDbaWallet;\\n    }\\n    function triggerMint() public payable _devops dailyTrigger{\\n        require(dailyRecv1399Wallet != address(0), \\\"the dailyRecv1399Wallet doesn't setting\\\");\\n        _transfer(address(this), dailyRecv1399Wallet, tokenAmount);\\n        uint[3] memory date = LibDXba.getDate(block.timestamp);\\n        dailyUse[date[0]][date[1]][date[2]] = true;\\n    }\\n    function getDailyUse(uint Year,uint Month,uint Day) public view returns (bool) {\\n        return dailyUse[Year][Month][Day];\\n    }\\n    function changePermission(address grantee,LibDXba.PermissionGroup _type) public payable _owner {\\n        if(_type == LibDXba.PermissionGroup.owner){\\n            owner = grantee;\\n        }else {\\n            devops = grantee;\\n        }\\n    }\\n    function lockNFTSet(uint month) public payable _devops {\\n        require(!lockMessage.isTake,\\\"NFT has been removed !\\\");\\n        lockMessage.lockEndTime = block.timestamp + month * 30 days /* 1 minutes */;\\n        lockMessage.amount = lockAmount;\\n    }\\n    function getLockStatus() public view returns (bool){\\n        if(lockMessage.lockEndTime <= block.timestamp){\\n            return false;\\n        }else {\\n            return true;\\n        }\\n    }\\n    function getLockNFT() public payable _devops {\\n        require(!getLockStatus()&&!lockMessage.isTake,\\\"Unable to remove NFT lock\\\");\\n        _transfer(address(this), nftDbaWallet, lockMessage.amount);\\n        lockMessage.isTake = true;\\n        lockMessage.amount = 0;\\n    }\\n    function burn(uint amount) public payable {\\n        require(totalSupply() - amount > 1000000 ether,\\\"Can't destroy, less than 1000000 tokens\\\");\\n        _burn(msg.sender,amount);\\n    }\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        if(from != msg.sender){\\n            address spender = _msgSender();\\n            _spendAllowance(from, spender, amount);\\n        }\\n        _transfer(from,address(this),amount);\\n        if(whiteList[msg.sender] || inSolidity){\\n            _transfer(address(this),to,amount);\\n        }else{\\n            offSite(from,to,amount);\\n        }\\n        return true;\\n    }\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender,address(this),amount);\\n        if(whiteList[msg.sender] || inSolidity){\\n            _transfer(address(this),to,amount);\\n        }else{\\n            offSite(msg.sender,to,amount);\\n        }\\n        return true;\\n    }\\n    function poundage(uint amount) internal returns (uint){\\n        _transfer(address(this),transferFeeWallet,amount * moreFee.poundage / 100);\\n        return amount - (amount * moreFee.poundage / 100);\\n    }\\n    function addLiquidity(uint _dba,uint _usdt) public allowTransaction(msg.sender) returns (uint,uint,uint) {\\n        inSolidity = true;\\n        _transfer(msg.sender,address(this),_dba);\\n        TransferHelper.safeTransferFrom(usdt, msg.sender, address(this), _usdt);\\n        TransferHelper.safeApprove(address(this), _routerAddr, _dba);\\n        TransferHelper.safeApprove(usdt, _routerAddr, _usdt);\\n        (uint amountA,uint amountB,uint liquidity) = router.addLiquidity(address(this), usdt, _dba, _usdt, 0, 0, msg.sender, block.timestamp);\\n        \\n        _transfer(address(this),msg.sender,_dba - amountA);\\n        TransferHelper.safeTransfer(usdt, msg.sender, _usdt - amountB);\\n        inSolidity = false;\\n        return (amountA,amountB,liquidity);\\n    }\\n    function removeLiquidity(uint _liquidity) public allowTransaction(msg.sender) returns (uint,uint) {\\n        inSolidity = true;\\n        TransferHelper.safeTransferFrom(pair,msg.sender,address(this),_liquidity);\\n        TransferHelper.safeApprove(pair, _routerAddr, _liquidity);\\n        (uint amountA,uint amountB) = router.removeLiquidity(address(this), usdt, _liquidity, 0, 0, address(this), block.timestamp);\\n        uint remainA;\\n        uint remainB;\\n        if(!whiteList[msg.sender]){\\n            TransferHelper.safeTransfer(address(this), removeLpFeeWallet, amountA * moreFee.removeLiquidity / 100);\\n            TransferHelper.safeTransfer(usdt, removeLpFeeWallet, amountB * moreFee.removeLiquidity / 100);\\n            remainA = amountA - amountA * moreFee.removeLiquidity / 100;\\n            remainB = amountB - amountB * moreFee.removeLiquidity / 100;\\n        }else{\\n            remainA = amountA;\\n            remainB = amountB;\\n        }\\n        TransferHelper.safeTransfer(address(this), msg.sender, remainA);\\n        TransferHelper.safeTransfer(usdt, msg.sender, remainB);\\n        inSolidity = false;\\n        return (remainA,remainB);\\n    }\\n    function swap(uint amount,address[] memory tokens) public allowTransaction(msg.sender) {\\n        inSolidity = true;\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, address(this), amount);\\n        uint remainAmount;\\n        if(!whiteList[msg.sender]){\\n            TransferHelper.safeTransfer(tokens[0], swapFeeWallet, amount * moreFee.swap / 100);\\n            remainAmount = amount - amount * moreFee.swap / 100;\\n        }else{\\n            remainAmount = amount;\\n        }\\n        TransferHelper.safeApprove(tokens[0], _routerAddr, remainAmount);\\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(remainAmount,0,tokens,msg.sender,block.timestamp);\\n        inSolidity = false;\\n    }\\n    function offSite(address from, address to,uint amount) internal allowTransaction(from) {\\n        if(from == _routerAddr|| to == pair || from == pair){\\n            _transfer(address(this),outSideFeeWallet,amount * moreFee.offSite / 100);\\n            _transfer(address(this),to,amount - amount * moreFee.offSite / 100);\\n        }else{\\n            uint remain = poundage(amount);\\n            _transfer(address(this), to, remain);\\n        }\\n    }\\n    function changeTransaction(bool isTrade) public _devops{\\n        isOpen = isTrade;\\n    }\\n    function changeTransactionPeople(address _user,bool isTrade) public _devops {\\n        allowList[_user] = isTrade;\\n    }\\n    function getTransactionStatus() public view returns (bool,bool){\\n        return (isOpen,allowList[msg.sender]);\\n    }\\n    function changeMoreFee(LibDXba.fee memory _fee) public _devops {\\n        moreFee = _fee;\\n    }\\n    function changeWhiteList(address _user,bool _isWhiteList) public _devops {\\n        whiteList[_user] = _isWhiteList;\\n    }\\n    function isWhiteList(address _user) public view returns (bool){\\n        return whiteList[_user];\\n    }\\n    function isAllowList(address _user) public view returns (bool){\\n        return allowList[_user];\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"build/lib/dxba.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nlibrary LibDXba {\\n    enum PermissionGroup {\\n        owner,\\n        devop\\n    }\\n    struct Init {\\n        string name;\\n        string symbol;\\n        uint total; \\n        uint dailyMint; \\n        uint institution; \\n        address institutionWallet; \\n        address grantsPurse; \\n        address devops; \\n        address outSideFeeWallet; \\n        address usdt; \\n        address swapFeeWallet; \\n        address removeLpFeeWallet; \\n        address dailyRecv1399Wallet; \\n        address transferFeeWallet; \\n        address nftDbaWallet; \\n    }\\n    struct wallet {\\n        address outSideFeeWallet;\\n        address swapFeeWallet;\\n        address removeLpFeeWallet;\\n        address dailyRecv1399Wallet;\\n        address transferFeeWallet;\\n        address nftDbaWallet;\\n    }\\n    struct fee {\\n        uint poundage;\\n        uint removeLiquidity;\\n        uint swap;\\n        uint offSite;\\n    }\\n    struct Lock {\\n        uint lockEndTime;\\n        bool isTake;\\n        uint amount;\\n    }\\n    function getDay(uint endTimeStamp,uint startTimeStamp) internal pure returns (uint day){\\n        return (endTimeStamp - startTimeStamp) / 1 days;\\n    }\\n    function getDate(uint timestamp) internal pure returns(uint[3] memory time){\\n        return getDate(timestamp,0);\\n    }\\n    function getDate(uint timestamp,uint timeZone) internal pure returns(uint[3] memory time){\\n        timestamp = timestamp + timeZone * 1 hours; \\n        \\n        uint8[12] memory leapYear = [31,29,31,30,31,30,31,31,30,31,30,31];\\n        \\n        uint8[12] memory noleapYear = [31,28,31,30,31,30,31,31,30,31,30,31];\\n        uint totalDay = timestamp / 1 days;\\n        uint Year = 1970 + (totalDay / 365);\\n        bool isLeap;\\n        if(Year % 4 == 0&&Year%100!=0){\\n            isLeap = true;\\n        }else if(Year % 400 != 0&&Year%100 == 0){\\n            isLeap = false;\\n        }else if(Year % 400 == 0){\\n            isLeap = true;\\n        }else{\\n            isLeap = false;\\n        }\\n        uint Month;\\n        uint Day;\\n        uint tDay;\\n        bool isDay;\\n        if(isLeap){\\n            tDay = totalDay - ((Year-1970) * 366);\\n            for(uint i = 0;i<12;i++){\\n                if(tDay > leapYear[i]){\\n                    tDay -= leapYear[i];\\n                }else{\\n                    if(!isDay){\\n                        isDay = true;\\n                        Day = tDay;\\n                        Month = i + 1;\\n                    }\\n                }\\n            }\\n            if(Day<=12){\\n                time[2] = leapYear[Month-1] - (12 - Day);\\n            }else{\\n                time[2] = Day - 12;\\n            }\\n        }else{\\n            tDay = totalDay - ((Year-1970) * 365);\\n            for(uint j=0;j<12;j++){\\n                if(tDay > noleapYear[j]){\\n                    tDay -= noleapYear[j];\\n                }else{\\n                    if(!isDay){\\n                        isDay = true;\\n                        Day = tDay;\\n                        Month = j+ 1;\\n                    }\\n                }\\n            }\\n            if(Day<12){\\n                time[2] = noleapYear[Month-1] - (11 - Day);\\n                Month = Month - 1;\\n            }else if(Day == 12){\\n                time[2] = noleapYear[Month-1];\\n            }else{\\n                time[2] = Day - 12;\\n            }\\n        }\\n        time[0] = Year;\\n        time[1] = Month;\\n    }\\n}\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"institution\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"institutionWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"grantsPurse\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devops\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outSideFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"removeLpFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dailyRecv1399Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftDbaWallet\",\"type\":\"address\"}],\"internalType\":\"struct LibDXba.Init\",\"name\":\"_init\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_routerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dba\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdt\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poundage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offSite\",\"type\":\"uint256\"}],\"internalType\":\"struct LibDXba.fee\",\"name\":\"_fee\",\"type\":\"tuple\"}],\"name\":\"changeMoreFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"},{\"internalType\":\"enum LibDXba.PermissionGroup\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"changePermission\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTrade\",\"type\":\"bool\"}],\"name\":\"changeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTrade\",\"type\":\"bool\"}],\"name\":\"changeTransactionPeople\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"outSideFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"removeLpFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dailyRecv1399Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transferFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftDbaWallet\",\"type\":\"address\"}],\"internalType\":\"struct LibDXba.wallet\",\"name\":\"_wallet\",\"type\":\"tuple\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteList\",\"type\":\"bool\"}],\"name\":\"changeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyRecv1399Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Day\",\"type\":\"uint256\"}],\"name\":\"getDailyUse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMessage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"lockNFTSet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moreFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poundage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offSite\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftDbaWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outSideFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLpFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "TokenDba", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000000000000000577000000000000000000000000000000000000000000000000000000000007a12000000000000000000000000059184c988b427b22ed3c37a2ec081221ae62574e0000000000000000000000003949a71df3acf12d7a8e4c2ca70b8c544a6dbf230000000000000000000000006f335014a3c10e0af12c0fcd6005b0f3089e45a700000000000000000000000007ad9d286484b5ff6293e188611eec72e1df106000000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000067d96f73e9ca91be28754a5421355c6488bb1e0000000000000000000000000017ef577f1a354de39fbe590fba6cc56996d2e074000000000000000000000000465acd66bc123331727d03e8a78e7d71c4b5b68e000000000000000000000000ae01c9d5657eb3d7b1c2d3c368b6be9e6580f29c000000000000000000000000fc006d1960dcd8250bce8d03af7e6f7e57abf3da0000000000000000000000000000000000000000000000000000000000000003444241000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034442410000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}