{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                0,\r\n                \"Address: low-level call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage)\r\n        private\r\n        pure\r\n    {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/interface/router2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint amountA,\r\n            uint amountB,\r\n            uint liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint amountToken,\r\n            uint amountETH,\r\n            uint liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\ninterface IPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface Idd {\r\n    function transferBack(address T_) external;\r\n}\r\n\r\ninterface IMar {\r\n    function externalCall(uint u_) external;\r\n}\r\n\r\n// File: contracts/interface/mpo.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface Iinvite {\r\n    function checkInviter(address) external view returns (address);\r\n\r\n    function checkTeam(address user_) external view returns (address[] memory);\r\n\r\n    function checkTeamLength(address user_) external view returns (uint);\r\n\r\n    function checkInviterOrign(address addr_) external view returns (address);\r\n}\r\n\r\ninterface IPreSale {\r\n    function preSaleTeam(address) external view returns (address[] memory);\r\n\r\n    function checkTeamLength(address user_) external view returns (uint);\r\n\r\n    function checkNftBouns(address) external view returns (uint, uint);\r\n\r\n    function calculate(address user_) external view returns (uint);\r\n\r\n    function userInfo(address)\r\n        external\r\n        view\r\n        returns (\r\n            bool isPreSale,\r\n            uint amount,\r\n            uint toClaim,\r\n            uint lastClaimedTime,\r\n            uint claimed\r\n        );\r\n\r\n    function checkPreSaleInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint,\r\n            uint,\r\n            uint,\r\n            uint\r\n        );\r\n\r\n    function checkPreSaleReceived()\r\n        external\r\n        view\r\n        returns (\r\n            uint,\r\n            uint,\r\n            uint,\r\n            uint\r\n        );\r\n}\r\n\r\ninterface Iido {\r\n    function checkTeamLength(address user_) external view returns (uint);\r\n\r\n    function checkNftBouns(address user_)\r\n        external\r\n        view\r\n        returns (uint limit, uint minted);\r\n\r\n    function mutiCheck(address user_)\r\n        external\r\n        view\r\n        returns (\r\n            uint[4] memory list,\r\n            bool[2] memory b,\r\n            uint[2] memory idoTime\r\n        );\r\n}\r\n\r\ninterface IMPOT {\r\n    function checkPhase() external view returns (uint);\r\n\r\n    function checkPhaseStatus() external view returns (bool);\r\n\r\n    function buyTBonusInfo(uint)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint,\r\n            uint,\r\n            uint,\r\n            uint\r\n        );\r\n\r\n    function checkPhaseUserBonus(uint phase_, address user_)\r\n        external\r\n        view\r\n        returns (uint);\r\n\r\n    function setBuyTokensBonusPhaseStatus(bool b_) external;\r\n}\r\n\r\ninterface IbuyTokenBonus {\r\n    function setThisRoundBonus(uint bonus_) external;\r\n\r\n    function setLowestHold(uint lowestHold_) external;\r\n}\r\n\r\n// File: hardhat-tutorial/contracts/MpoTokenV2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IautoPool {\r\n    function swapForUSDT(address, uint) external;\r\n\r\n    function addLiquidityAuto() external;\r\n}\r\n\r\ninterface Ia {\r\n    function distribute(uint amount_) external;\r\n}\r\n\r\ncontract MpoToken is ERC20, Ownable {\r\n    using Address for address;\r\n    // NEW ERC20\r\n    uint256 private _totalSupply;\r\n\r\n    // ADDRESS\r\n    address public PANCAKE_ROUTER;\r\n    address public PANCAKE_FACTORY;\r\n    address public Pair;\r\n    address public Usdt;\r\n    address public LiquidityWallet;\r\n    address public MarketingWallet;\r\n    address public MpoFinance;\r\n    address public IDO;\r\n    address public RDF;\r\n    address public INVITE;\r\n\r\n    // FINANCE\r\n    uint private phases;\r\n    bool public buringSwitch;\r\n    uint public debtRdf;\r\n    uint public debtMarketing;\r\n    uint public swapUToRdfLimit;\r\n    uint public swapUToMarketingLimit;\r\n    uint public addLiquidityLimit;\r\n    uint public tradeLimit;\r\n    uint public minimumSupply;\r\n\r\n    // FEE SETTING\r\n    struct BuyFee {\r\n        uint total;\r\n        uint devidends;\r\n        uint LiquidityWallet;\r\n        uint MarketingWallet;\r\n        uint rdfWallet;\r\n        uint burning;\r\n    }\r\n    struct SellFee {\r\n        uint total;\r\n        uint devidends;\r\n        uint LiquidityWallet;\r\n        uint MarketingWallet;\r\n        uint rdfWallet;\r\n        uint burning;\r\n    }\r\n    struct TransferFee {\r\n        uint total;\r\n        uint MarketingWallet;\r\n        uint burning;\r\n    }\r\n    BuyFee public buyFee;\r\n    SellFee public sellFee;\r\n    TransferFee public transferFee;\r\n\r\n    // SAFE SETTING\r\n    mapping(address => bool) private w;\r\n    mapping(address => bool) private transferW;\r\n    mapping(address => bool) public isPair;\r\n\r\n    // DEVIDENDS\r\n    bool private swaping;\r\n    uint public claimWait;\r\n    uint public diviendsLowestBalance;\r\n    uint constant magnitude = 2**128;\r\n    uint public gasForProcessing;\r\n    uint public lastProcessedIndex;\r\n    uint public swapTokensAtAmountLimit;\r\n    uint public magnifiedDividendPerShare;\r\n    uint public totalDividendsDistributed;\r\n\r\n    mapping(address => uint) public withdrawnDividends;\r\n    mapping(address => uint) public lastClaimTimes;\r\n    mapping(address => bool) public noDevidends;\r\n\r\n    // 2.0\r\n    uint public minHold;\r\n    address public blackHole;\r\n    bool public proxyBurning;\r\n\r\n    // 3.0\r\n    struct BuyTBonusInfo {\r\n        bool status;\r\n        uint startTime;\r\n    }\r\n    mapping(uint => BuyTBonusInfo) public buyTBonusInfo;\r\n    mapping(uint => mapping(address => uint)) private newBuyTBonus;\r\n    mapping(uint => uint[]) public bonusPercentage;\r\n\r\n    // 4.0\r\n    uint public absolutePrice;\r\n    mapping(uint => mapping(address => uint)) internal phaseBonusTotal;\r\n\r\n    // Dividend\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n    event Claim(\r\n        address indexed account,\r\n        uint256 amount,\r\n        bool indexed automatic\r\n    );\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n\r\n    // Finance\r\n    event WithdrawToMarketing(address indexed market, uint indexed amount);\r\n    event WithdrawToRDF(address indexed RDF, uint indexed amount);\r\n    event Bonus(uint indexed phase, address indexed user, uint indexed amount);\r\n\r\n    constructor() ERC20(\"MPO\", \"MPO\") {\r\n        buringSwitch = true;\r\n\r\n        // bsc main test\r\n        INVITE = 0x24A980baAc726f09D5c3EABf069bFbEB64236CF3;\r\n        PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        PANCAKE_FACTORY = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n        Usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n        setRdf(0xDF703A84c2277CF48883b664b2Def51eF0238913);\r\n        setIDO(0xE3cB7a55c90224C75B376007B53482324ff6a9ab);\r\n        setMpoFinance(0xeeEf201A58B32283dDb4e7876318657Fa330B114);\r\n        setMarketingWallet(0x0d9fA0535959676576388b87F57EBD72295005D2);\r\n        setLiquidityWallet(0xD6D7A6fE39E7F1A4C02b894c4d2B014E8b115680);\r\n\r\n        tradeLimit = 1000;\r\n        minimumSupply = 1000000000 ether;\r\n        swapUToRdfLimit = 2000000 ether;\r\n        addLiquidityLimit = 2000000 ether;\r\n        swapUToMarketingLimit = 2000000 ether;\r\n\r\n        address orgin = 0xeda68273911b0e6206a92377c29016fADB08b288;\r\n\r\n        transferW[orgin] = true;\r\n        transferW[msg.sender] = true;\r\n        transferW[address(this)] = true;\r\n\r\n        w[orgin] = true;\r\n        w[msg.sender] = true;\r\n        w[address(this)] = true;\r\n\r\n        _mint(msg.sender, 100000000000 ether);\r\n\r\n        setSellFee(99, 1, 1, 1, 95, 1);\r\n        setBuyFee(99, 1, 1, 1, 95, 1);\r\n        setTransferFee(3, 1, 2);\r\n\r\n        swapTokensAtAmountLimit = 10000 ether;\r\n        diviendsLowestBalance = 10000000 ether;\r\n        claimWait = 3600;\r\n\r\n        noDevidends[address(this)] = true;\r\n        noDevidends[address(0)] = true;\r\n        noDevidends[address(PANCAKE_ROUTER)] = true;\r\n        gasForProcessing = 300000;\r\n    }\r\n\r\n    ////////////////////////////////\r\n    ////////////// Map /////////////\r\n    ////////////////////////////////\r\n\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n    Map private tokenHoldersMap;\r\n\r\n    function setGasForProcessing(uint gas_) external onlyOwner {\r\n        gasForProcessing = gas_;\r\n    }\r\n\r\n    function get(address key) public view returns (uint256) {\r\n        return tokenHoldersMap.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(address key) public view returns (int256) {\r\n        if (!tokenHoldersMap.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int256(tokenHoldersMap.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(uint256 index) public view returns (address) {\r\n        return tokenHoldersMap.keys[index];\r\n    }\r\n\r\n    function size() public view returns (uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function set(address key, uint256 val) private {\r\n        if (tokenHoldersMap.inserted[key]) {\r\n            tokenHoldersMap.values[key] = val;\r\n        } else {\r\n            tokenHoldersMap.inserted[key] = true;\r\n            tokenHoldersMap.values[key] = val;\r\n            tokenHoldersMap.indexOf[key] = tokenHoldersMap.keys.length;\r\n            tokenHoldersMap.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(address key) private {\r\n        if (!tokenHoldersMap.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete tokenHoldersMap.inserted[key];\r\n        delete tokenHoldersMap.values[key];\r\n\r\n        uint256 index = tokenHoldersMap.indexOf[key];\r\n        uint256 lastIndex = tokenHoldersMap.keys.length - 1;\r\n        address lastKey = tokenHoldersMap.keys[lastIndex];\r\n\r\n        tokenHoldersMap.indexOf[lastKey] = index;\r\n        delete tokenHoldersMap.indexOf[key];\r\n\r\n        tokenHoldersMap.keys[index] = lastKey;\r\n        tokenHoldersMap.keys.pop();\r\n    }\r\n\r\n    ////////////////////////////////\r\n    ///////////// admin ////////////\r\n    ////////////////////////////////\r\n\r\n    // set bool\r\n    function setTransferW(address addr, bool b_) public onlyOwner {\r\n        transferW[addr] = b_;\r\n    }\r\n\r\n    function setW(address addr, bool b_) public onlyOwner {\r\n        w[addr] = b_;\r\n    }\r\n\r\n    function setNoDividends(address addr, bool b_) external onlyOwner {\r\n        noDevidends[addr] = b_;\r\n    }\r\n\r\n    function setIsPair(address Pair_, bool b_) external onlyOwner {\r\n        isPair[Pair_] = b_;\r\n    }\r\n\r\n    function setFinanceContract(address[] calldata addr_, bool b_)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint i; i < addr_.length; i++) {\r\n            transferW[addr_[i]] = b_;\r\n            w[addr_[i]] = b_;\r\n        }\r\n    }\r\n\r\n    function setBuringSwitch(\r\n        bool buringSwitch_,\r\n        address blackHole_,\r\n        bool proxyBurning_\r\n    ) external onlyOwner {\r\n        buringSwitch = buringSwitch_;\r\n        blackHole = blackHole_;\r\n        proxyBurning = proxyBurning_;\r\n    }\r\n\r\n    // set address\r\n    function setPair(address Pair_) external onlyOwner {\r\n        Pair = Pair_;\r\n        isPair[Pair_] = true;\r\n        noDevidends[Pair_];\r\n    }\r\n\r\n    function setSwapTokenAtAmountLimit(uint amount_) external onlyOwner {\r\n        swapTokensAtAmountLimit = amount_;\r\n    }\r\n\r\n    function setMarketingWallet(address market_) public onlyOwner {\r\n        MarketingWallet = market_;\r\n        w[market_] = true;\r\n        transferW[market_] = true;\r\n    }\r\n\r\n    function setRdf(address rdf_) public onlyOwner {\r\n        RDF = rdf_;\r\n        w[rdf_] = true;\r\n        transferW[rdf_] = true;\r\n    }\r\n\r\n    function setInvite(address invite_) public onlyOwner {\r\n        INVITE = invite_;\r\n    }\r\n\r\n    function setIDO(address ido_) public onlyOwner {\r\n        IDO = ido_;\r\n        w[ido_] = true;\r\n        transferW[ido_] = true;\r\n        noDevidends[ido_] = true;\r\n    }\r\n\r\n    function setMpoFinance(address MpoFinance_) public onlyOwner {\r\n        MpoFinance = MpoFinance_;\r\n        w[MpoFinance_] = true;\r\n        transferW[MpoFinance_] = true;\r\n        noDevidends[MpoFinance_] = true;\r\n    }\r\n\r\n    function setLiquidityWallet(address pool_) public onlyOwner {\r\n        LiquidityWallet = pool_;\r\n        w[pool_] = true;\r\n        transferW[pool_] = true;\r\n        noDevidends[pool_] = true;\r\n    }\r\n\r\n    // set uint\r\n    function setaddLiquidityLimit(uint u_) external onlyOwner {\r\n        addLiquidityLimit = u_;\r\n    }\r\n\r\n    function setDiviendsLowestBalance(uint u_) external onlyOwner {\r\n        diviendsLowestBalance = u_;\r\n    }\r\n\r\n    function setMinimumSupply(uint u_) external onlyOwner {\r\n        require(u_ < _totalSupply, \"to big\");\r\n        minimumSupply = u_;\r\n    }\r\n\r\n    function setClaimWait(uint u_) external onlyOwner {\r\n        claimWait = u_;\r\n    }\r\n\r\n    function setAbsolutePrice(uint u_) external onlyOwner {\r\n        absolutePrice = u_;\r\n    }\r\n\r\n    function setSwapUToMarketingLimit(uint u_) external onlyOwner {\r\n        swapUToMarketingLimit = u_;\r\n    }\r\n\r\n    function setSwapUToRdfLimit(uint u_) external onlyOwner {\r\n        swapUToRdfLimit = u_;\r\n    }\r\n\r\n    function setTransferFee(\r\n        uint total_,\r\n        uint MarketingWallet_,\r\n        uint burning_\r\n    ) public onlyOwner {\r\n        require(total_ == MarketingWallet_ + burning_, \"no match\");\r\n        transferFee = TransferFee({\r\n            total: total_,\r\n            MarketingWallet: MarketingWallet_,\r\n            burning: burning_\r\n        });\r\n    }\r\n\r\n    function setBuyFee(\r\n        uint total_,\r\n        uint devidends_,\r\n        uint LiquidityWallet_,\r\n        uint MarketingWallet_,\r\n        uint rdfWallet_,\r\n        uint burning_\r\n    ) public onlyOwner {\r\n        require(\r\n            total_ ==\r\n                (devidends_ +\r\n                    LiquidityWallet_ +\r\n                    MarketingWallet_ +\r\n                    rdfWallet_ +\r\n                    burning_),\r\n            \"no match\"\r\n        );\r\n        buyFee = BuyFee({\r\n            total: total_,\r\n            devidends: devidends_,\r\n            LiquidityWallet: LiquidityWallet_,\r\n            MarketingWallet: MarketingWallet_,\r\n            rdfWallet: rdfWallet_,\r\n            burning: burning_\r\n        });\r\n    }\r\n\r\n    function setSellFee(\r\n        uint total_,\r\n        uint devidends_,\r\n        uint LiquidityWallet_,\r\n        uint MarketingWallet_,\r\n        uint rdfWallet_,\r\n        uint burning_\r\n    ) public onlyOwner {\r\n        require(\r\n            total_ ==\r\n                (devidends_ +\r\n                    LiquidityWallet_ +\r\n                    MarketingWallet_ +\r\n                    rdfWallet_ +\r\n                    burning_),\r\n            \"no match\"\r\n        );\r\n        sellFee = SellFee({\r\n            total: total_,\r\n            devidends: devidends_,\r\n            LiquidityWallet: LiquidityWallet_,\r\n            MarketingWallet: MarketingWallet_,\r\n            rdfWallet: rdfWallet_,\r\n            burning: burning_\r\n        });\r\n    }\r\n\r\n    function setTradeLimit(uint limit_) external onlyOwner {\r\n        tradeLimit = limit_;\r\n    }\r\n\r\n    ////////////////////////////////\r\n    ///////////// Token ////////////\r\n    ////////////////////////////////\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address addr) public view override returns (uint) {\r\n        return tokenHoldersMap.values[addr];\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal override {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        uint balance = tokenHoldersMap.values[account];\r\n        _totalSupply += amount;\r\n        set(account, balance + amount);\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal override {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = tokenHoldersMap.values[account];\r\n        uint256 addressZeroBalance = tokenHoldersMap.values[address(0)];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            tokenHoldersMap.values[account] = accountBalance - amount;\r\n            tokenHoldersMap.values[address(0)] = addressZeroBalance + amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        uint256 senderBalance = tokenHoldersMap.values[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        set(sender, senderBalance - amount);\r\n        uint recipientBalance = tokenHoldersMap.values[recipient];\r\n        set(recipient, recipientBalance + amount);\r\n        if (balanceOf(sender) == 0) {\r\n            remove(sender);\r\n        }\r\n        uint tempDebt = (withdrawnDividends[sender] * amount) / senderBalance;\r\n        withdrawnDividends[recipient] += tempDebt;\r\n        withdrawnDividends[sender] -= tempDebt;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function burn(uint u_) public onlyOwner {\r\n        _burn(msg.sender, u_);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        uint fee;\r\n        if (!w[msg.sender] && !w[recipient] && !w[sender]) {\r\n            amount = checkLowestHold(sender, amount);\r\n            require(amount != 0, \"Minimum holding\");\r\n\r\n            if (\r\n                msg.sender == PANCAKE_ROUTER ||\r\n                isPair[msg.sender] ||\r\n                isPair[recipient]\r\n            ) {\r\n                {\r\n                    uint _total = totalSupply();\r\n                    uint _tradeLimit = _total / tradeLimit;\r\n                    require(amount <= _tradeLimit, \"out of tradeLimit\");\r\n                    fee = (sellFee.total * amount) / 100;\r\n                }\r\n                _transfer(\r\n                    sender,\r\n                    address(this),\r\n                    (((sellFee.devidends +\r\n                        sellFee.rdfWallet +\r\n                        sellFee.MarketingWallet) * amount) / 100)\r\n                );\r\n                _transfer(\r\n                    sender,\r\n                    LiquidityWallet,\r\n                    (sellFee.LiquidityWallet * amount) / 100\r\n                );\r\n\r\n                burnToken(sender, 1, amount);\r\n\r\n                SendDividends((sellFee.devidends * amount) / 100);\r\n                debtMarketing += (sellFee.MarketingWallet * amount) / 100;\r\n                debtRdf += (sellFee.rdfWallet * amount) / 100;\r\n\r\n                amount -= fee;\r\n            } else {\r\n                if (!transferW[sender] && !transferW[recipient]) {\r\n                    fee = (transferFee.total * amount) / 100;\r\n\r\n                    _transfer(\r\n                        sender,\r\n                        address(this),\r\n                        (transferFee.MarketingWallet * amount) / 100\r\n                    );\r\n\r\n                    burnToken(sender, 2, amount);\r\n\r\n                    debtMarketing +=\r\n                        (transferFee.MarketingWallet * amount) /\r\n                        100;\r\n                    amount -= fee;\r\n\r\n                    if (\r\n                        !isPair[sender] &&\r\n                        !isPair[recipient] &&\r\n                        Pair != address(0)\r\n                    ) {\r\n                        bool _bool = true;\r\n                        // Finance\r\n                        if (\r\n                            debtMarketing >= swapUToMarketingLimit ||\r\n                            debtRdf >= swapUToRdfLimit\r\n                        ) {\r\n                            processFinanceMar();\r\n                            processFinanceRdf();\r\n                            _bool = false;\r\n                        }\r\n\r\n                        // Auto\r\n                        if (_bool) {\r\n                            uint poolAmount = balanceOf(\r\n                                address(LiquidityWallet)\r\n                            );\r\n                            if (\r\n                                poolAmount >= addLiquidityLimit &&\r\n                                Pair != address(0)\r\n                            ) {\r\n                                IautoPool(LiquidityWallet).addLiquidityAuto();\r\n                                _bool = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        process(gasForProcessing);\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = allowance(sender, _msgSender());\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint fee;\r\n        // SWAP\r\n        if (isPair[msg.sender] || isPair[recipient]) {\r\n            // Buy\r\n            if (isPair[msg.sender]) {\r\n                bouns(recipient, amount);\r\n            }\r\n\r\n            if (!w[msg.sender] && !w[recipient]) {\r\n                {\r\n                    uint _total = totalSupply();\r\n                    uint _tradeLimit = _total * tradeLimit;\r\n                    require(amount <= _tradeLimit, \"out of tradeLimit\");\r\n                    fee = (buyFee.total * amount) / 100;\r\n                }\r\n\r\n                _transfer(\r\n                    msg.sender,\r\n                    address(this),\r\n                    ((buyFee.devidends +\r\n                        buyFee.MarketingWallet +\r\n                        buyFee.rdfWallet) * amount) / 100\r\n                );\r\n\r\n                _transfer(\r\n                    msg.sender,\r\n                    LiquidityWallet,\r\n                    (buyFee.LiquidityWallet * amount) / 100\r\n                );\r\n\r\n                burnToken(msg.sender, 0, amount);\r\n\r\n                SendDividends((buyFee.devidends * amount) / 100);\r\n                debtMarketing += (buyFee.MarketingWallet * amount) / 100;\r\n                debtRdf += (buyFee.rdfWallet * amount) / 100;\r\n\r\n                amount -= fee;\r\n            }\r\n        } else {\r\n            if (!transferW[msg.sender] && !transferW[recipient]) {\r\n                amount = checkLowestHold(msg.sender, amount);\r\n                require(amount != 0, \"Minimum holding\");\r\n\r\n                fee = (transferFee.total * amount) / 100;\r\n\r\n                _transfer(\r\n                    msg.sender,\r\n                    address(this),\r\n                    (transferFee.MarketingWallet * amount) / 100\r\n                );\r\n\r\n                burnToken(msg.sender, 2, amount);\r\n\r\n                debtMarketing += (transferFee.MarketingWallet * amount) / 100;\r\n                amount -= fee;\r\n\r\n                if (\r\n                    !isPair[msg.sender] &&\r\n                    !isPair[recipient] &&\r\n                    Pair != address(0)\r\n                ) {\r\n                    bool _bool = true;\r\n                    // Finance\r\n                    if (\r\n                        debtMarketing >= swapUToMarketingLimit ||\r\n                        debtRdf >= swapUToRdfLimit\r\n                    ) {\r\n                        processFinanceMar();\r\n                        processFinanceRdf();\r\n                        _bool = false;\r\n                    }\r\n\r\n                    // Auto\r\n                    if (_bool) {\r\n                        uint poolAmount = balanceOf(address(LiquidityWallet));\r\n                        if (\r\n                            poolAmount >= addLiquidityLimit &&\r\n                            Pair != address(0)\r\n                        ) {\r\n                            IautoPool(LiquidityWallet).addLiquidityAuto();\r\n                            _bool = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        process(gasForProcessing);\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // 0buy 1sell 2transfer\r\n    function burnToken(\r\n        address sender,\r\n        uint trade,\r\n        uint amount\r\n    ) internal {\r\n        uint burnFee;\r\n        uint _amount;\r\n        uint _total = totalSupply();\r\n\r\n        if (trade == 0) {\r\n            burnFee = buyFee.burning;\r\n        } else if (trade == 1) {\r\n            burnFee = sellFee.burning;\r\n        } else if (trade == 2) {\r\n            burnFee = transferFee.burning;\r\n        }\r\n\r\n        _amount = (burnFee * amount) / 100;\r\n\r\n        if (buringSwitch && proxyBurning && blackHole != address(0)) {\r\n            _transfer(sender, blackHole, _amount);\r\n        } else {\r\n            if (_total > minimumSupply && buringSwitch) {\r\n                if (_total - _amount >= minimumSupply) {\r\n                    _burn(sender, _amount);\r\n                } else if (_total - _amount < _total) {\r\n                    _burn(sender, (_total - minimumSupply));\r\n                    buringSwitch = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkLowestHold(address user_, uint amount)\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint ba = balanceOf(user_);\r\n\r\n        if (ba > minHold) {\r\n            if (amount + minHold >= ba) {\r\n                return (ba - minHold);\r\n            }\r\n        } else if (ba < minHold) {\r\n            return 0;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    ////////////////////////////////\r\n    /////////// Dividend ///////////\r\n    ////////////////////////////////\r\n    function SendDividends(uint256 amount) private {\r\n        distributeCAKEDividends(amount);\r\n    }\r\n\r\n    function distributeCAKEDividends(uint256 amount) internal {\r\n        require(totalSupply() > 0);\r\n\r\n        if (amount > 0) {\r\n            magnifiedDividendPerShare =\r\n                magnifiedDividendPerShare +\r\n                (amount * magnitude) /\r\n                totalSupply();\r\n            emit DividendsDistributed(msg.sender, amount);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed + amount;\r\n        }\r\n    }\r\n\r\n    function accumulativeDividendOf(address addr) public view returns (uint) {\r\n        return\r\n            (magnifiedDividendPerShare * tokenHoldersMap.values[addr]) /\r\n            magnitude;\r\n    }\r\n\r\n    function process(uint256 gas)\r\n        internal\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if (numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if (canAutoClaim(lastClaimTimes[account])) {\r\n                if (processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if (gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed + (gasLeft - newGasLeft);\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime_) private view returns (bool) {\r\n        if (lastClaimTime_ > block.timestamp) {\r\n            return false;\r\n        }\r\n\r\n        return (block.timestamp - lastClaimTime_) >= claimWait;\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (accumulativeDividendOf(_owner) <= withdrawnDividends[_owner]) {\r\n            return 0;\r\n        }\r\n        return accumulativeDividendOf(_owner) - withdrawnDividends[_owner];\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] =\r\n                withdrawnDividends[user] +\r\n                _withdrawableDividend;\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            if (\r\n                !isPair[user] &&\r\n                !noDevidends[user] &&\r\n                balanceOf(address(this)) > _withdrawableDividend\r\n            ) {\r\n                if (balanceOf(user) >= diviendsLowestBalance) {\r\n                    _transfer(address(this), user, _withdrawableDividend);\r\n                }\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    ////////////////////////////////\r\n    //////////// Finance ///////////\r\n    ////////////////////////////////\r\n\r\n    function swapTokensToFinance(uint256 tokenAmount_, address to_) private {\r\n        swaping = true;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = Usdt;\r\n\r\n        _approve(address(this), address(PANCAKE_ROUTER), tokenAmount_);\r\n        // make the swap\r\n        IRouter02(PANCAKE_ROUTER)\r\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount_,\r\n                100,\r\n                path,\r\n                to_,\r\n                block.timestamp\r\n            );\r\n        swaping = false;\r\n    }\r\n\r\n    function processFinanceRdf() internal {\r\n        if (debtRdf > swapUToRdfLimit && RDF != address(0)) {\r\n            withdrawToRdf();\r\n        }\r\n    }\r\n\r\n    function processFinanceMar() internal {\r\n        if (\r\n            debtMarketing > swapUToMarketingLimit &&\r\n            MarketingWallet != address(0)\r\n        ) {\r\n            withdrawToMarketingWallet();\r\n        }\r\n    }\r\n\r\n    function withdrawToMarketingWallet() public {\r\n        require(debtMarketing > swapUToMarketingLimit, \"debt not enough\");\r\n        uint ba = balanceOf(address(this));\r\n\r\n        if (ba >= debtMarketing && Pair != address(0) && !swaping) {\r\n            uint last = IERC20(Usdt).balanceOf(MarketingWallet);\r\n            swapTokensToFinance(debtMarketing, MarketingWallet);\r\n            debtMarketing = 0;\r\n            uint refresh = IERC20(Usdt).balanceOf(MarketingWallet);\r\n            Ia(MarketingWallet).distribute((refresh - last));\r\n            emit WithdrawToMarketing(MarketingWallet, (refresh - last));\r\n        }\r\n    }\r\n\r\n    function withdrawToRdf() public {\r\n        require(debtRdf > swapUToRdfLimit, \"debt not enough\");\r\n        uint ba = balanceOf(address(this));\r\n\r\n        if (ba >= debtRdf && Pair != address(0) && !swaping) {\r\n            uint last = IERC20(Usdt).balanceOf(RDF);\r\n            swapTokensToFinance(debtMarketing, RDF);\r\n            debtRdf = 0;\r\n            uint refresh = IERC20(Usdt).balanceOf(RDF);\r\n            emit WithdrawToRDF(RDF, (refresh - last));\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////\r\n    ///////// buyTokenBonus ////////\r\n    ////////////////////////////////\r\n\r\n    function checkPhase() external view returns (uint) {\r\n        return phases;\r\n    }\r\n\r\n    function checkPhaseStatus() external view returns (bool) {\r\n        return buyTBonusInfo[phases].status;\r\n    }\r\n\r\n    function checkPhaseUserBonus(uint phase_, address user_)\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        return newBuyTBonus[phase_][user_];\r\n    }\r\n\r\n    function checkPhaseBuyAmountTotal(uint phase_, address user_)\r\n        external\r\n        view\r\n        returns (uint)\r\n    {\r\n        return phaseBonusTotal[phase_][user_];\r\n    }\r\n\r\n    function setNewBuyTokensBonusPhase(\r\n        uint lowestHold_,\r\n        uint totalBonus_,\r\n        uint[] memory percentage_,\r\n        uint startTime_\r\n    ) external onlyOwner {\r\n        if (buyTBonusInfo[phases].status) {\r\n            buyTBonusInfo[phases].status = false;\r\n        }\r\n\r\n        phases += 1;\r\n\r\n        buyTBonusInfo[phases].status = true;\r\n        buyTBonusInfo[phases].startTime = startTime_;\r\n        bonusPercentage[phases] = percentage_;\r\n\r\n        IbuyTokenBonus(MpoFinance).setThisRoundBonus(totalBonus_);\r\n        IbuyTokenBonus(MpoFinance).setLowestHold(lowestHold_);\r\n    }\r\n\r\n    function setBuyTokensBonusPhaseStatus(bool b_) external onlyOwner {\r\n        buyTBonusInfo[phases].status = b_;\r\n    }\r\n\r\n    function bouns(address user_, uint amount_) internal returns (bool) {\r\n        if (\r\n            buyTBonusInfo[phases].status &&\r\n            block.timestamp > buyTBonusInfo[phases].startTime\r\n        ) {\r\n            address _use;\r\n            address _inv = Iinvite(INVITE).checkInviter(user_);\r\n            for (uint i; i < bonusPercentage[phases].length; i++) {\r\n                if (_inv == address(0)) {\r\n                    return true;\r\n                }\r\n\r\n                phaseBonusTotal[phases][_inv] += amount_;\r\n                newBuyTBonus[phases][_inv] +=\r\n                    (bonusPercentage[phases][i] * amount_) /\r\n                    100;\r\n\r\n                _use = _inv;\r\n                _inv = Iinvite(INVITE).checkInviter(_use);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"RDF\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToRDF\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IDO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MpoFinance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANCAKE_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANCAKE_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RDF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"absolutePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackHole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buringSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devidends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiquidityWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rdfWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burning\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyTBonusInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"checkPhaseBuyAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPhaseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"checkPhaseUserBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRdf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diviendsLowestBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"key\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"key\",\"type\":\"address\"}],\"name\":\"getIndexOfKey\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getKeyAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"magnifiedDividendPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noDevidends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyBurning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devidends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiquidityWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rdfWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burning\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u_\",\"type\":\"uint256\"}],\"name\":\"setAbsolutePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buringSwitch_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"blackHole_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"proxyBurning_\",\"type\":\"bool\"}],\"name\":\"setBuringSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devidends_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiquidityWallet_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingWallet_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rdfWallet_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burning_\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b_\",\"type\":\"bool\"}],\"name\":\"setBuyTokensBonusPhaseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u_\",\"type\":\"uint256\"}],\"name\":\"setClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u_\",\"type\":\"uint256\"}],\"name\":\"setDiviendsLowestBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"b_\",\"type\":\"bool\"}],\"name\":\"setFinanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas_\",\"type\":\"uint256\"}],\"name\":\"setGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ido_\",\"type\":\"address\"}],\"name\":\"setIDO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invite_\",\"type\":\"address\"}],\"name\":\"setInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pair_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b_\",\"type\":\"bool\"}],\"name\":\"setIsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market_\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u_\",\"type\":\"uint256\"}],\"name\":\"setMinimumSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MpoFinance_\",\"type\":\"address\"}],\"name\":\"setMpoFinance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lowestHold_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"percentage_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"}],\"name\":\"setNewBuyTokensBonusPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b_\",\"type\":\"bool\"}],\"name\":\"setNoDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pair_\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rdf_\",\"type\":\"address\"}],\"name\":\"setRdf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devidends_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LiquidityWallet_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingWallet_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rdfWallet_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burning_\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setSwapTokenAtAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u_\",\"type\":\"uint256\"}],\"name\":\"setSwapUToMarketingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u_\",\"type\":\"uint256\"}],\"name\":\"setSwapUToRdfLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"name\":\"setTradeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingWallet_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burning_\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b_\",\"type\":\"bool\"}],\"name\":\"setTransferW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b_\",\"type\":\"bool\"}],\"name\":\"setW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u_\",\"type\":\"uint256\"}],\"name\":\"setaddLiquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmountLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapUToMarketingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapUToRdfLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MarketingWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burning\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToRdf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MpoToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://69c383d9ccb052190b6d8a5d272edf21b5f3f6e7c907f54c24f5d6bf6f294c32"}