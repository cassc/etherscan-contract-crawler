{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\r\n}\r\n\r\nabstract contract ERC721 is ERC165, IERC721 {\r\n    using Address for address;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) external virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external virtual override {\r\n        _setApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == 0x01ffc9a7\r\n        || interfaceId == 0x80ac58cd\r\n        || interfaceId == 0x5b5e139f;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) external view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId;\r\n            // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex;\r\n            // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId;\r\n        // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex;\r\n        // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"0 owner\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ncontract ETHNFT is ERC721Enumerable, Ownable {\r\n    struct UserInfo {\r\n        uint256 totalReward;\r\n        uint256 claimedReward;\r\n        uint256 totalInviteReward;\r\n        uint256 claimedInviteReward;\r\n    }\r\n\r\n    mapping(uint256 => string) public _uris;\r\n    mapping(uint256 => uint256) public _properties;\r\n    mapping(address => bool) public _minter;\r\n    address public _cash;\r\n    uint256 public constant _baseId = 0;\r\n    uint256 public constant _baseId2 = 100000000;\r\n    mapping(uint256 => uint256) public _property;\r\n    mapping(uint256 => uint256) public _propertySupply;\r\n    mapping(uint256 => uint256[]) public _tokenIdLinks;\r\n    mapping(uint256 => uint256) private _tokenInitIds;\r\n    mapping(uint256 => uint256) private _tokenActiveTime;\r\n    uint256 private _initActiveTime;\r\n    uint256 private _activeTime = 20 days;\r\n    uint256 private _activeBufferTime = 22 days;\r\n\r\n    mapping(address => UserInfo) private _userInfo;\r\n    mapping(address => bool) public _admin;\r\n    address private _usdtAddress;\r\n    address private _tokenAddress;\r\n    ISwapFactory public _factory;\r\n    uint256 private _activeUsdtAmount;\r\n    uint256 private _reMintUsdtAmount;\r\n    address public _tokenReceiveAddress;\r\n    mapping(uint256 => bool) public _excludeCheckStatusNFT;\r\n    mapping(address => bool) public _excludeCheckStatus;\r\n\r\n    function batchMint(address to, uint256 num) public {\r\n        batchMintAndActive(to, num, false);\r\n    }\r\n\r\n    function batchMintAndActive(address to, uint256 num, bool isActive) public {\r\n        require(_minter[msg.sender], \"not minter\");\r\n        uint256 property = 1;\r\n        uint256 tokenId = _propertySupply[property] + 1 + _baseId;\r\n        uint256 blockTime = block.timestamp;\r\n        for (uint256 i; i < num;) {\r\n            _mint(to, tokenId);\r\n            _properties[tokenId] = property;\r\n            _tokenIdLinks[tokenId].push(tokenId);\r\n            _tokenInitIds[tokenId] = tokenId;\r\n            if (isActive) {\r\n                _tokenActiveTime[tokenId] = blockTime;\r\n            } else if (_initActiveTime > 0) {\r\n                _tokenActiveTime[tokenId] = blockTime;\r\n            }\r\n        unchecked{\r\n            ++tokenId;\r\n            ++i;\r\n        }\r\n        }\r\n        _propertySupply[property] += num;\r\n    }\r\n\r\n    function reMint(uint256 oldId, uint256 maxTokenAmount) external {\r\n        address account = msg.sender;\r\n        require(account == tx.origin, \"not origin\");\r\n        uint256 tokenAmount = tokenAmountOut(_reMintUsdtAmount, _tokenAddress);\r\n        require(tokenAmount <= maxTokenAmount, \"gt maxTokenAmount\");\r\n        IERC20(_tokenAddress).transferFrom(account, _tokenReceiveAddress, tokenAmount);\r\n        _reMint(oldId);\r\n    }\r\n\r\n    function reMint(uint256 oldId) external onlyAdmin {\r\n        _reMint(oldId);\r\n    }\r\n\r\n    function _reMint(uint256 oldId) private {\r\n        require(_initActiveTime > 0, \"notStart\");\r\n        (uint256 initId,uint256 lastId,uint256 activeTime) = tokenBaseInfo(oldId);\r\n        require(lastId == oldId, \"not lastId\");\r\n        uint256 blockTime = block.timestamp;\r\n        require(activeTime + _activeBufferTime < blockTime, \"active\");\r\n\r\n        address to = msg.sender;\r\n        uint256 property = 2;\r\n        uint256 tokenId = _propertySupply[property] + 1 + _baseId2;\r\n\r\n        _mint(to, tokenId);\r\n        _properties[tokenId] = property;\r\n        _tokenIdLinks[initId].push(tokenId);\r\n        _tokenInitIds[tokenId] = initId;\r\n        _tokenActiveTime[tokenId] = blockTime;\r\n\r\n        _propertySupply[property] += 1;\r\n    }\r\n\r\n    function activeNFT(uint256 tokenId, uint256 maxTokenAmount) external {\r\n        address account = msg.sender;\r\n        require(account == tx.origin, \"not origin\");\r\n        uint256 tokenAmount = tokenAmountOut(_activeUsdtAmount, _tokenAddress);\r\n        require(tokenAmount <= maxTokenAmount, \"gt maxTokenAmount\");\r\n        IERC20(_tokenAddress).transferFrom(account, _tokenReceiveAddress, tokenAmount);\r\n        _activeNFT(tokenId);\r\n    }\r\n\r\n    function activeNFT(uint256 tokenId) external onlyAdmin {\r\n        _activeNFT(tokenId);\r\n    }\r\n\r\n    function _activeNFT(uint256 tokenId) private {\r\n        require(_initActiveTime > 0, \"notStart\");\r\n        (,uint256 lastId,uint256 activeTime) = tokenBaseInfo(tokenId);\r\n        require(lastId == tokenId, \"not lastId\");\r\n        uint256 blockTime = block.timestamp;\r\n        require(activeTime + _activeBufferTime >= blockTime, \"inactive\");\r\n        _tokenActiveTime[tokenId] = blockTime;\r\n    }\r\n\r\n    function activeNFTAnyway(uint256 tokenId) external onlyAdmin {\r\n        _activeNFTAnyway(tokenId);\r\n    }\r\n\r\n    function _activeNFTAnyway(uint256 tokenId) private {\r\n        require(_initActiveTime > 0, \"notStart\");\r\n        (,uint256 lastId,) = tokenBaseInfo(tokenId);\r\n        require(lastId == tokenId, \"not lastId\");\r\n        _tokenActiveTime[tokenId] = block.timestamp;\r\n    }\r\n\r\n    function activeBufferNFTAnyway(uint256 tokenId) external onlyAdmin {\r\n        _activeBufferNFTAnyway(tokenId);\r\n    }\r\n\r\n    function _activeBufferNFTAnyway(uint256 tokenId) private {\r\n        require(_initActiveTime > 0, \"notStart\");\r\n        (,uint256 lastId,) = tokenBaseInfo(tokenId);\r\n        require(lastId == tokenId, \"not lastId\");\r\n        _tokenActiveTime[tokenId] = block.timestamp - _activeTime - 1;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {\r\n        if (_initActiveTime == 0) {\r\n            return _uris[_properties[tokenId]];\r\n        }\r\n        (, , ,bool isActive,) = tokenInfo(tokenId);\r\n        if (isActive) {\r\n            return _uris[_properties[tokenId]];\r\n        }\r\n        return _uris[0];\r\n    }\r\n\r\n    function setUri(uint256 property, string memory uri) external onlyOwner {\r\n        _uris[property] = uri;\r\n    }\r\n\r\n    function setMinter(address minter, bool enable) external onlyOwner {\r\n        _minter[minter] = enable;\r\n    }\r\n\r\n    function setAdmin(address admin, bool enable) external onlyOwner {\r\n        _admin[admin] = enable;\r\n    }\r\n\r\n    function setExcludeCheckStatus(address adr, bool enable) external onlyOwner {\r\n        _excludeCheckStatus[adr] = enable;\r\n    }\r\n\r\n    function setExcludeCheckStatusNFT(uint256 tokenId, bool enable) external onlyOwner {\r\n        uint256 initId = _tokenInitIds[tokenId];\r\n        uint256 lastId = getLastId(initId);\r\n        require(lastId == tokenId, \"not lastId\");\r\n        _excludeCheckStatusNFT[tokenId] = enable;\r\n    }\r\n\r\n    function setCash(address cash) external onlyFunder {\r\n        _cash = cash;\r\n    }\r\n\r\n    function setTokenAddress(address tokenAddress) external onlyOwner {\r\n        _tokenAddress = tokenAddress;\r\n    }\r\n\r\n    function setTokenReceiveAddress(address receiveAddress) external onlyOwner {\r\n        _tokenReceiveAddress = receiveAddress;\r\n    }\r\n\r\n    function setUsdtAddress(address usdtAddress) external onlyOwner {\r\n        _usdtAddress = usdtAddress;\r\n    }\r\n\r\n    function setActiveUsdtAmount(uint256 amount) external onlyOwner {\r\n        _activeUsdtAmount = amount * 10 ** IERC20(_usdtAddress).decimals();\r\n    }\r\n\r\n    function setInitActiveTime(uint256 time) external onlyOwner {\r\n        _initActiveTime = time;\r\n    }\r\n\r\n    function startActive() external onlyOwner {\r\n        require(0 == _initActiveTime, \"started\");\r\n        _initActiveTime = block.timestamp;\r\n    }\r\n\r\n    function setActiveTime(uint256 time) external onlyOwner {\r\n        _activeTime = time;\r\n    }\r\n\r\n    function setActiveBufferTime(uint256 time) external onlyOwner {\r\n        _activeBufferTime = time;\r\n    }\r\n\r\n    function setReMintUsdtAmount(uint256 amount) external onlyOwner {\r\n        _reMintUsdtAmount = amount * 10 ** IERC20(_usdtAddress).decimals();\r\n    }\r\n\r\n    function claimBalance(address to, uint256 amount) external onlyFunder {\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external onlyFunder {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || _cash == msg.sender, \"!Funder\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(_admin[msg.sender], \"!Admin\");\r\n        _;\r\n    }\r\n\r\n    function addReward(address account, uint256 reward) external {\r\n        require(_tokenAddress == msg.sender, \"not Token\");\r\n        _userInfo[account].totalReward += reward;\r\n    }\r\n\r\n    function addInviteReward(address invitor, uint256 reward) external {\r\n        require(_tokenAddress == msg.sender, \"not Token\");\r\n        _userInfo[invitor].totalInviteReward += reward;\r\n    }\r\n\r\n    function claimReward(address account) public {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 pendingReward = userInfo.totalReward - userInfo.claimedReward;\r\n        if (pendingReward > 0) {\r\n            userInfo.claimedReward += pendingReward;\r\n            IERC20(_usdtAddress).transfer(account, pendingReward);\r\n        }\r\n    }\r\n\r\n    function claimInviteReward(address account) public {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 pendingReward = userInfo.totalInviteReward - userInfo.claimedInviteReward;\r\n        if (pendingReward > 0) {\r\n            userInfo.claimedInviteReward += pendingReward;\r\n            IERC20(_usdtAddress).transfer(account, pendingReward);\r\n        }\r\n    }\r\n\r\n    function claimAllReward(address account) public {\r\n        claimReward(account);\r\n        claimInviteReward(account);\r\n    }\r\n\r\n    function activeSupply() public view returns (uint256){\r\n        return _propertySupply[1];\r\n    }\r\n\r\n    function initIdInfo(uint256 initId) public view returns (uint256 lastId, bool isActive, address nftOwner){\r\n        lastId = getLastId(initId);\r\n        uint256 activeTime = getActiveTime(lastId);\r\n        if (activeTime + _activeTime >= block.timestamp) {\r\n            isActive = true;\r\n        }\r\n        nftOwner = ownerOf(lastId);\r\n    }\r\n\r\n    function getIdLinkLength(uint256 initId) public view returns (uint256){\r\n        return _tokenIdLinks[initId].length;\r\n    }\r\n\r\n    function tokenInfo(uint256 tokenId) public view returns (uint256 initId, uint256 lastId, uint256 activeTime, bool isActive, address nftOwner){\r\n        (initId, lastId, activeTime) = tokenBaseInfo(tokenId);\r\n        if (activeTime + _activeTime >= block.timestamp && lastId == tokenId) {\r\n            isActive = true;\r\n        }\r\n        nftOwner = ownerOf(tokenId);\r\n    }\r\n\r\n    function tokenBaseInfo(uint256 tokenId) public view returns (uint256 initId, uint256 lastId, uint256 activeTime){\r\n        initId = getInitId(tokenId);\r\n        lastId = getLastId(initId);\r\n        activeTime = getActiveTime(tokenId);\r\n    }\r\n\r\n    function getInitId(uint256 tokenId) public view returns (uint256 initId){\r\n        initId = _tokenInitIds[tokenId];\r\n    }\r\n\r\n    function getLastId(uint256 initId) public view returns (uint256 lastId){\r\n        uint256[] storage idLinks = _tokenIdLinks[initId];\r\n        lastId = idLinks[idLinks.length - 1];\r\n    }\r\n\r\n    function getIdLinks(uint256 initId) public view returns (uint256[] memory idLinks){\r\n        idLinks = _tokenIdLinks[initId];\r\n    }\r\n\r\n    function getActiveTime(uint256 tokenId) public view returns (uint256 activeTime){\r\n        if (_excludeCheckStatusNFT[tokenId]) {\r\n            return block.timestamp;\r\n        }\r\n        activeTime = _tokenActiveTime[tokenId];\r\n        if (0 == activeTime) {\r\n            activeTime = _initActiveTime;\r\n        }\r\n    }\r\n\r\n    function checkActive(uint256[] memory tokenIds) public view returns (bool[] memory isActives, address[] memory nftOwners){\r\n        uint256 len = tokenIds.length;\r\n        isActives = new bool[](len);\r\n        nftOwners = new address[](len);\r\n        uint256 tokenId;\r\n        uint256 initId;\r\n        uint256 lastId;\r\n        uint256 activeTime;\r\n        for (uint256 i; i < len;) {\r\n            tokenId = tokenIds[i];\r\n            (initId, lastId, activeTime) = tokenBaseInfo(tokenId);\r\n            if (activeTime + _activeTime >= block.timestamp && lastId == tokenId) {\r\n                isActives[i] = true;\r\n            }\r\n            nftOwners[i] = ownerOf(tokenId);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function inActiveNFT(uint256[] memory tokenIds) external onlyAdmin {\r\n        uint256 len = tokenIds.length;\r\n        uint256 inActiveTime = block.timestamp - _activeBufferTime - 1;\r\n        for (uint256 i; i < len;) {\r\n            _tokenActiveTime[tokenIds[i]] = inActiveTime;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function getTimes() public view returns (uint256 activeTime, uint256 activeBufferTime, uint256 blockTime, uint initActiveTime){\r\n        activeTime = _activeTime;\r\n        activeBufferTime = _activeBufferTime;\r\n        blockTime = block.timestamp;\r\n        initActiveTime = _initActiveTime;\r\n    }\r\n\r\n    function tokenAmountOut(uint256 usdtAmount, address tokenAddress) public view returns (uint256){\r\n        address usdtAddress = _usdtAddress;\r\n        address lpAddress = _factory.getPair(usdtAddress, tokenAddress);\r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(lpAddress);\r\n        uint256 usdtBalance = IERC20(usdtAddress).balanceOf(lpAddress);\r\n        if (usdtBalance == 0) {\r\n            return 0;\r\n        }\r\n        return usdtAmount * tokenBalance / usdtBalance;\r\n    }\r\n\r\n    function getTokenInfo() external view returns (\r\n        address usdtAddress, uint256 usdtDecimals, string memory usdtSymbol,\r\n        address tokenAddress, uint256 tokenDecimals, string memory tokenSymbol,\r\n        uint256 activeUsdtAmount, uint256 activeTokenAmount,\r\n        uint256 reMintUsdtAmount, uint256 reMintTokenAmount\r\n    ){\r\n        usdtAddress = _usdtAddress;\r\n        usdtDecimals = IERC20(usdtAddress).decimals();\r\n        usdtSymbol = IERC20(usdtAddress).symbol();\r\n        tokenAddress = _tokenAddress;\r\n        tokenDecimals = IERC20(tokenAddress).decimals();\r\n        tokenSymbol = IERC20(tokenAddress).symbol();\r\n        activeUsdtAmount = _activeUsdtAmount;\r\n        activeTokenAmount = tokenAmountOut(activeUsdtAmount, tokenAddress);\r\n        reMintUsdtAmount = _reMintUsdtAmount;\r\n        reMintTokenAmount = tokenAmountOut(reMintUsdtAmount, tokenAddress);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._transfer(from, to, tokenId);\r\n        if (_excludeCheckStatus[from] || _excludeCheckStatus[to]) {\r\n            return;\r\n        }\r\n        if (_initActiveTime == 0) {\r\n            return;\r\n        }\r\n        if (_excludeCheckStatusNFT[tokenId]) {\r\n            return;\r\n        }\r\n        (,uint256 lastId,uint256 activeTime) = tokenBaseInfo(tokenId);\r\n        require(activeTime + _activeBufferTime >= block.timestamp && lastId == tokenId, \"inActive\");\r\n    }\r\n\r\n    function getUserInfo(address account) external view returns (\r\n        uint256 totalReward, uint256 claimedReward,\r\n        uint256 totalInviteReward, uint256 claimedInviteReward\r\n    ){\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        totalReward = userInfo.totalReward;\r\n        claimedReward = userInfo.claimedReward;\r\n        totalInviteReward = userInfo.totalInviteReward;\r\n        claimedInviteReward = userInfo.claimedInviteReward;\r\n    }\r\n\r\n    constructor() ERC721(\"EthereumGOD NFT\", \"EthereumGOD NFT\"){\r\n        _minter[address (0x5070Bc38A2dDEdC0Db22ce6199f04F302357EB7C)] = true;\r\n        _cash = address (0x5070Bc38A2dDEdC0Db22ce6199f04F302357EB7C);\r\n        _uris[0] = \"\";\r\n        _uris[1] = \"https://gateway.pinata.cloud/ipfs/QmdhtBiSCPEBQwXQKvD2GxCBMJQ5QQXXLbbFX8gVALjfFh/eth.json\";\r\n        _uris[2] = \"https://gateway.pinata.cloud/ipfs/QmdhtBiSCPEBQwXQKvD2GxCBMJQ5QQXXLbbFX8gVALjfFh/eth.json\";\r\n        //USDT\r\n        _usdtAddress = address(0x55d398326f99059fF775485246999027B3197955);\r\n        //SwapRouter\r\n        _factory = ISwapFactory(ISwapRouter(address(0x10ED43C718714eb63d5aA57B78B54704E256024E)).factory());\r\n        _activeUsdtAmount = 20 * 10 ** IERC20(_usdtAddress).decimals();\r\n        _reMintUsdtAmount = 100 * 10 ** IERC20(_usdtAddress).decimals();\r\n        //tokenReceiveAddress\r\n        _tokenReceiveAddress = address(0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseId2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludeCheckStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_excludeCheckStatusNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_factory\",\"outputs\":[{\"internalType\":\"contract ISwapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_minter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_properties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_property\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_propertySupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenIdLinks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenReceiveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_uris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"activeBufferNFTAnyway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenAmount\",\"type\":\"uint256\"}],\"name\":\"activeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"activeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"activeNFTAnyway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addInviteReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"batchMintAndActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"checkActive\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"isActives\",\"type\":\"bool[]\"},{\"internalType\":\"address[]\",\"name\":\"nftOwners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimInviteReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getActiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initId\",\"type\":\"uint256\"}],\"name\":\"getIdLinkLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initId\",\"type\":\"uint256\"}],\"name\":\"getIdLinks\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"idLinks\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getInitId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initId\",\"type\":\"uint256\"}],\"name\":\"getLastId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeBufferTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initActiveTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"usdtSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"activeUsdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reMintUsdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reMintTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInviteReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedInviteReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"inActiveNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initId\",\"type\":\"uint256\"}],\"name\":\"initIdInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenAmount\",\"type\":\"uint256\"}],\"name\":\"reMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"}],\"name\":\"reMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setActiveBufferTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setActiveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setActiveUsdtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cash\",\"type\":\"address\"}],\"name\":\"setCash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeCheckStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeCheckStatusNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setInitActiveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setReMintUsdtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"}],\"name\":\"setTokenReceiveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"property\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"}],\"name\":\"setUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenBaseInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ETHNFT", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2064b380df6d578067f393bcd7ecffcee03fdb5114bde8356b89bbdfffd488d0"}