{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-07-29\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\ncontract BSCGenious {\r\n    uint256 public constant EGGS_TO_HIRE_1MINERS = 1080000;\r\n    uint256 public constant REFERRAL = 20;\r\n    uint256 public constant PERCENTS_DIVIDER = 1000;\r\n    uint256 public constant TAX = 80;\r\n    uint256 public constant MARKET_EGGS_PERCENT_MUL = 4;\r\n    uint256 public constant MARKET_EGGS_PERCENT_DIV = 7;\r\n    uint256 public constant ROI_DIVISOR = 1e6;\r\n    uint256 public constant ROI_MAX_BONUS = 2000000;//200%\r\n    uint256 public constant ROI_COMPOUND_BONUS = 1034000;//+3.4%\r\n    uint256 public constant ROI_SELL_PENALTY = 500000;//-50%\r\n    uint256 public roiBoost = 1;//global roi boost will stay at 1 unless users decide otherwise\r\n\r\n    uint256 public constant MIN_INVEST_LIMIT = 0.05 ether; /** min. 0.05 BNB  **/\r\n    uint256 public constant WALLET_DEPOSIT_LIMIT = 2000 ether; /** max. 2000 BNB  **/\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n\r\n    uint256 public marketEggs = 1;\r\n\r\n    uint256 public constant COMPOUND_STEP = 8 hours; /** 8 Hours Compound Timer **/\r\n\tuint256 public constant CUTOFF_STEP = 48 hours; /** 48 Hours Rewards Accumulation Cut-Off **/\r\n    uint256 internal constant INIT = 1659708000;\r\n    uint256 internal constant NPV_unit = 1 gwei; // precision increase it too much and you drastically increase the chance of market_eggs overflow decrease it too much and you decrease the ROI. 10**9 is the perfect spot.\r\n\r\n    /* addresses */\r\n    address public owner;\r\n    address payable public taxCollector;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 miners;\r\n        uint256 claimedEggs;\r\n        uint256 lastHatch;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralEggRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 dailyCompoundBonus;\r\n        uint256 farmerCompoundCount;\r\n        uint256 lastWithdrawTime;\r\n        uint256 roiMultiplier;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n\r\n    constructor(address payable payment_splitter) {\r\n        owner = msg.sender;\r\n        taxCollector = payment_splitter;\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n\r\n    function contractStarted() internal view returns (bool){\r\n        return block.timestamp >= INIT;\r\n    }\r\n\r\n    // Compound Function\r\n    function rehireGardeners() external {\r\n        User storage user = users[msg.sender];\r\n        require(contractStarted(), \"Contract not started yet.\");\r\n        require((block.timestamp - user.lastHatch) >= COMPOUND_STEP, \"Tried to compound too early.\");\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 eggsForCompound = eggsUsed;\r\n\r\n        uint256 eggsUsedValue = calculateEggSell(eggsForCompound);\r\n        user.userDeposit += eggsUsedValue;\r\n        totalCompound += eggsUsedValue;\r\n        user.farmerCompoundCount += 1;\r\n\r\n        user.miners += eggsForCompound / EGGS_TO_HIRE_1MINERS;\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n        user.roiMultiplier = min(ROI_MAX_BONUS, (user.roiMultiplier * ROI_COMPOUND_BONUS) / ROI_DIVISOR);\r\n\r\n        uint256 additionalEggs = (eggsUsed * MARKET_EGGS_PERCENT_MUL) / MARKET_EGGS_PERCENT_DIV;\r\n        marketEggs += min(additionalEggs, type(uint256).max - marketEggs);\r\n    }\r\n\r\n    // Sell Function\r\n    function sellFlowers() external{\r\n        require(contractStarted(), \"Contract not started yet.\");\r\n        User storage user = users[msg.sender];\r\n        require((block.timestamp - user.lastHatch) >= COMPOUND_STEP, \"Tried to sell too early.\");\r\n        require(user.initialDeposit > 0, \"You have not invested yet.\");\r\n\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n\r\n        user.farmerCompoundCount = 0;\r\n        user.lastWithdrawTime = block.timestamp;\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n        user.roiMultiplier = (user.roiMultiplier * ROI_SELL_PENALTY) / ROI_DIVISOR;\r\n\r\n        if(getBalance() < eggValue) {\r\n            eggValue = getBalance();\r\n        }\r\n\r\n        uint256 eggsPayout = eggValue - payFees(eggValue);\r\n        payable(msg.sender).transfer(eggsPayout);\r\n        user.totalWithdrawn += eggsPayout;\r\n        totalWithdrawn += eggsPayout;\r\n    }\r\n\r\n\r\n    function calculatePayFees(uint256 eggValue) internal pure returns(uint256) {\r\n        uint256 tax = (eggValue * TAX) / PERCENTS_DIVIDER;\r\n        return tax;\r\n    }\r\n\r\n    /** Buy with BNB **/\r\n    function hireGardeners(address ref) external payable{\r\n        require(contractStarted(), \"Contract not started yet.\");\r\n        User storage user = users[msg.sender];\r\n        uint256 amount = msg.value;\r\n        require(amount >= MIN_INVEST_LIMIT, \"Mininum investment not met.\");\r\n        require(user.initialDeposit + amount <= WALLET_DEPOSIT_LIMIT, \"Max deposit limit reached.\");\r\n        uint256 netAmount = amount - payFees(amount);\r\n        totalStaked += netAmount;\r\n        uint256 eggsBought = calculateEggBuy(netAmount, getFairBalance()-netAmount);\r\n        // set multiplier to 1 on first buy\r\n        if (user.initialDeposit == 0) {\r\n            user.roiMultiplier = ROI_SELL_PENALTY;\r\n            user.lastHatch = block.timestamp;\r\n        }\r\n        user.userDeposit += amount;\r\n        user.initialDeposit += amount;\r\n        user.claimedEggs += eggsBought;\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (ref != msg.sender) {\r\n                user.referrer = ref;\r\n            }\r\n\r\n            address upline1 = user.referrer;\r\n            if (upline1 != address(0)) {\r\n                users[upline1].referralsCount += 1;\r\n            }\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                uint256 refRewards = (amount * REFERRAL) / PERCENTS_DIVIDER;\r\n                payable(upline).transfer(refRewards);\r\n                users[upline].referralEggRewards += refRewards;\r\n                totalRefBonus += refRewards;\r\n            }\r\n        }\r\n        uint256 eggsForCompound = getMyEggs();\r\n        user.miners += eggsForCompound / EGGS_TO_HIRE_1MINERS;\r\n        user.claimedEggs = 0;\r\n        user.userDeposit += calculateEggSell(getEggsSinceLastHatch(msg.sender));\r\n        user.lastHatch = block.timestamp;\r\n        totalCompound += eggsForCompound;\r\n\r\n        marketEggs += min(eggsForCompound, type(uint256).max - marketEggs); // this is for the very unlikely case of marketEggs getting close to 10**77\r\n\r\n        totalDeposits += 1;\r\n    }\r\n\r\n    function payFees(uint256 eggValue) internal returns(uint256){\r\n        uint256 tax = (eggValue * TAX) / PERCENTS_DIVIDER;\r\n        taxCollector.transfer(tax);\r\n        return tax;\r\n    }\r\n\r\n    function changeTaxColletor(address payable _taxCollector) public {\r\n        require(msg.sender == owner, \"Only admins can do that!\");\r\n        taxCollector = _taxCollector;\r\n    }\r\n\r\n    function getUserInfo(address _adr) external view returns(uint256 _initialDeposit, uint256 _userDeposit, uint256 _miners,\r\n     uint256 _claimedEggs, uint256 _lastHatch, address _referrer, uint256 _referrals, uint256 _totalWithdrawn, uint256 _referralEggRewards,\r\n     uint256 _farmerCompoundCount, uint256 _lastWithdrawTime, uint256 _roiMultiplier) {\r\n         _initialDeposit = users[_adr].initialDeposit;\r\n         _userDeposit = users[_adr].userDeposit;\r\n         _miners = users[_adr].miners;\r\n         _claimedEggs = users[_adr].claimedEggs;\r\n         _lastHatch = users[_adr].lastHatch;\r\n         _referrer = users[_adr].referrer;\r\n         _referrals = users[_adr].referralsCount;\r\n         _totalWithdrawn = users[_adr].totalWithdrawn;\r\n         _referralEggRewards = users[_adr].referralEggRewards;\r\n         _farmerCompoundCount = users[_adr].farmerCompoundCount;\r\n         _lastWithdrawTime = users[_adr].lastWithdrawTime;\r\n         _roiMultiplier = users[_adr].roiMultiplier;\r\n\t}\r\n\r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getFairBalance() public view returns(uint256) { // the new formula (in the beginning and on buys) is weak to force feed attacks. This function solves it.\r\n        return totalStaked - min(totalStaked, totalWithdrawn);\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) external view returns(uint256) {\r\n        uint256 userEggs = users[_adr].claimedEggs + getEggsSinceLastHatch(_adr);\r\n        return calculateEggSell(userEggs);\r\n    }\r\n\r\n    function calculateTrade(uint256 a, uint256 b, uint256 m) internal pure returns(uint256){\r\n        return (a * m) / (NPV_unit + b);\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        uint256 roiMultiplier = users[msg.sender].roiMultiplier * roiBoost;\r\n        return calculateTrade((roiMultiplier * eggs) / ROI_DIVISOR, marketEggs, getBalance());\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) external view returns(uint256){\r\n        return calculateEggBuy(eth-calculatePayFees(eth), getFairBalance());\r\n    }\r\n\r\n    /** How many miners and eggs per day user will receive based on AVAX deposit **/\r\n    function getEggsYield(uint256 amount) external view returns(uint256,uint256) {\r\n        uint256 eggsAmount = calculateEggBuy(amount , getFairBalance());\r\n        uint256 miners = eggsAmount / EGGS_TO_HIRE_1MINERS;\r\n        uint256 day = 1 days;\r\n        uint256 eggsPerDay = day * miners;\r\n        uint256 earningsPerDay = calculateEggSellForYield(eggsPerDay);\r\n        return(miners, earningsPerDay);\r\n    }\r\n\r\n    function calculateEggSellForYield(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs, marketEggs, getBalance());\r\n    }\r\n\r\n    function getSiteInfo() external view returns (uint256 _totalStaked, uint256 _totalDeposits, uint256 _totalCompound, uint256 _totalRefBonus) {\r\n        return (totalStaked, totalDeposits, totalCompound, totalRefBonus);\r\n    }\r\n\r\n    function getMyMiners() external view returns(uint256){\r\n        return users[msg.sender].miners;\r\n    }\r\n\r\n    function getMyEggs() public view returns(uint256){ // in this implementation getMyEggs/user.ClaimedEggs are useless. But let's keep this in case in the future we want to implement an egg airdrop.\r\n        return users[msg.sender].claimedEggs + getEggsSinceLastHatch(msg.sender);\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsSinceLastHatch = block.timestamp - users[adr].lastHatch;\r\n                            /** get min time. **/\r\n        uint256 cutoffTime = min(secondsSinceLastHatch, CUTOFF_STEP);\r\n        uint256 secondsPassed = min(EGGS_TO_HIRE_1MINERS, cutoffTime);\r\n        return secondsPassed * (users[adr].miners);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function setROIBoost(uint256 value) public {\r\n        require(msg.sender == owner, \"Only admins can do that!\");\r\n        require(1 <= value && value <= 3, \"New value is outside of limits\");\r\n        roiBoost = value;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payment_splitter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"COMPOUND_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EGGS_TO_HIRE_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_EGGS_PERCENT_DIV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_EGGS_PERCENT_MUL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROI_COMPOUND_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROI_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROI_MAX_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROI_SELL_PENALTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_taxCollector\",\"type\":\"address\"}],\"name\":\"changeTaxColletor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEggsYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFairBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_farmerCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roiMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hireGardeners\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rehireGardeners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roiBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFlowers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setROIBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxCollector\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmerCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BSCGenious", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cff090f1c0b420bb8bbc0762dbb5a1c63f5ff98d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ff3d737a0a6d55582b384cc4a11605839010c6d64b595b575b5354db2a6a25b3"}