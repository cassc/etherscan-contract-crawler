{"SourceCode": "/*\r\n\r\nFFFFF  TTTTTTT  M   M         GGGGG  U    U  RRRRR     U    U\r\nFF       TTT   M M M M       G       U    U  RR   R    U    U\r\nFFFFF    TTT   M  M  M      G  GGG   U    U  RRRRR     U    U\r\nFF       TTT   M  M  M   O  G    G   U    U  RR R      U    U\r\nFF       TTT   M     M       GGGGG    UUUU   RR  RRR    UUUU\r\n\r\n\r\n\r\n\t\t\t\t\t\tContact us at:\r\n\t\t\thttps://discord.com/invite/QpyfMarNrV\r\n\t\t\t\t\thttps://t.me/FTM1337\r\n\r\n\tCommunity Mediums:\r\n\t\thttps://medium.com/@ftm1337\r\n\t\thttps://twitter.com/ftm1337\r\n\r\n\tSPDX-License-Identifier: UNLICENSED\r\n\r\n\r\n\teTHENA.sol\r\n\r\n\teTHENA is a Liquid Staking Derivate for veTHE (Vote-Escrowed Thena NFT).\r\n\tIt can be minted by burning (veTHE) veNFTs.\r\n\teTHENA is an ERC20 based token.\r\n\tIt can be staked with Guru Network to earn pure BNB instead of multiple small tokens.\r\n\teTHENA can be further deposited into Kompound Protocol to mint iTHENA.\r\n\r\n\tiTHENA is a doubly-compounding interest-bearing veTHE at its core.\r\n\tiTHENA is an ERC4626 based token, which also adheres to the EIP20 Standard.\r\n\tiTHENA uses eTHENA's BNB yield to buyback more eTHENA from the open-market via JIT Aggregation.\r\n\r\n\tThe price (in THE) to mint eTHENA goes up every epoch due to positive rebasing.\r\n\tThis property gives iTHENA a \"hyper-compounding\" double-exponential trajectory against raw THE tokens.\r\n\r\n*/\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction transfer(address recipient, uint amount) external returns (bool);\r\n\tfunction balanceOf(address) external view returns (uint);\r\n\tfunction transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n}\r\ninterface IeTHENA is IERC20 {\r\n\tfunction mint(address w, uint a) external returns (bool);\r\n}\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\ninterface IVotingEscrow {\r\n\tstruct LockedBalance {\r\n\t\tint128 amount;\r\n\t\tuint end;\r\n\t}\r\n\tfunction create_lock_for(uint _value, uint _lock_duration, address _to) external returns (uint);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function locked(uint id) external view returns(LockedBalance memory);\r\n\tfunction token() external view returns (address);\r\n\tfunction merge(uint _from, uint _to) external;\r\n}\r\n\r\ncontract eTHENA_Depositor {\r\n\tstruct LockedBalance {\r\n\t\tint128 amount;\r\n\t\tuint end;\r\n\t}\r\n\taddress public dao;\r\n\tIeTHENA public eTHENA;\r\n\tIVotingEscrow public veTHE;\r\n\tuint public ID;\r\n\tuint public supplied;\r\n\tuint public converted;\r\n\tuint public minted;\r\n\t/// @notice ftm.guru simple re-entrancy check\r\n\tbool internal _locked;\r\n\tmodifier lock() {\r\n\t\trequire(!_locked,  \"Re-entry!\");\r\n\t\t_locked = true;\r\n\t\t_;\r\n\t\t_locked = false;\r\n\t}\r\n\tmodifier DAO() {\r\n\t\trequire(msg.sender==dao, \"Unauthorized!\");\r\n\t\t_;\r\n\t}\r\n\tevent Deposit(address indexed, uint indexed, uint, uint, uint);\r\n    function onERC721Received(address, address,  uint256, bytes calldata) external view returns (bytes4) {\r\n        require(msg.sender == address(veTHE), \"!veToken\");\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n\tfunction deposit(uint _id) public lock returns (uint) {\r\n\t\tuint _ts = eTHENA.totalSupply();\r\n\t\tIVotingEscrow.LockedBalance memory _main = veTHE.locked(ID);\r\n\t\trequire(_main.amount > 0, \"Dirty veNFT!\");\r\n\t\tint _ibase = _main.amount;\t//pre-cast to int\r\n\t\tuint256 _base = uint256(_ibase);\r\n\t\tveTHE.safeTransferFrom(msg.sender, address(this), _id);\r\n\t\tveTHE.merge(_id,ID);\r\n\t\tIVotingEscrow.LockedBalance memory _merged = veTHE.locked(ID);\r\n\t\tint _in = _merged.amount - _main.amount;\r\n\t\trequire(_in > 0, \"Dirty Deposit!\");\r\n\t\tuint256 _inc = uint256(_in);//cast to uint\r\n\t\tsupplied += _inc;\r\n\t\tconverted++;\r\n\t\t// If no eTHENA exists, mint it 1:1 to the amount of THE present inside the veNFT deposited\r\n\t\tif (_ts == 0 || _base == 0) {\r\n\t\t\teTHENA.mint(msg.sender, _inc);\r\n\t\t\temit Deposit(msg.sender, _id, _inc, _inc, block.timestamp);\r\n\t\t\tminted+=_inc;\r\n\t\t\treturn _inc;\r\n\t\t}\r\n\t\t// Calculate and mint the amount of eTHENA the veNFT is worth. The ratio will change overtime,\r\n\t\t// as eTHENA is minted when veTHE are deposited + gained from rebases\r\n\t\telse {\r\n\t\t\tuint256 _amt = (_inc * _ts) / _base;\r\n\t\t\teTHENA.mint(msg.sender, _amt);\r\n\t\t\temit Deposit(msg.sender, _id, _inc, _amt, block.timestamp);\r\n\t\t\tminted+=_amt;\r\n\t\t\treturn _amt;\r\n\t\t}\r\n\t}\r\n\tfunction initialize(uint _id) public DAO lock {\r\n\t\tIVotingEscrow.LockedBalance memory _main = veTHE.locked(_id);\r\n\t\trequire(_main.amount > 0, \"Dirty veNFT!\");\r\n\t\tint _iamt = _main.amount;\r\n\t\tuint _amt = uint(_iamt);\r\n\t\teTHENA.mint(msg.sender, _amt);\r\n\t\tID = _id;\r\n\t\tsupplied += _amt;\r\n\t\tconverted++;\r\n\t\tminted+=_amt;\r\n\t}\r\n\tfunction quote(uint _id) public view returns (uint) {\r\n\t\tuint _ts = eTHENA.totalSupply();\r\n\t\tIVotingEscrow.LockedBalance memory _main = veTHE.locked(ID);\r\n\t\tIVotingEscrow.LockedBalance memory _user = veTHE.locked(_id);\r\n\t\tif( ! (_main.amount > 0) ) {return 0;}\r\n\t\tint _ibase = _main.amount;\t//pre-cast to int\r\n\t\tuint256 _base = uint256(_ibase);\r\n\t\tint _in = _user.amount;\r\n\t\tif( ! (_in > 0) ) {return 0;}\r\n\t\tuint256 _inc = uint256(_in);//cast to uint\r\n\t\t// If no eTHENA exists, mint it 1:1 to the amount of THE present inside the veNFT deposited\r\n\t\tif (_ts == 0 || _base == 0) {\r\n\t\t\treturn _inc;\r\n\t\t}\r\n\t\t// Calculate and mint the amount of eTHENA the veNFT is worth. The ratio will change overtime,\r\n\t\t// as eTHENA is minted when veTHE are deposited + gained from rebases\r\n\t\telse {\r\n\t\t\tuint256 _amt = (_inc * _ts) / _base;\r\n\t\t\treturn _amt;\r\n\t\t}\r\n\t}\r\n\tfunction rawQuote(uint _inc) public view returns (uint) {\r\n\t\tuint _ts = eTHENA.totalSupply();\r\n\t\tIVotingEscrow.LockedBalance memory _main = veTHE.locked(ID);\r\n\t\tif( ! (_main.amount > 0) ) {return 0;}\r\n\t\tint _ibase = _main.amount;\t//pre-cast to int\r\n\t\tuint256 _base = uint256(_ibase);\r\n\t\t// If no eTHENA exists, mint it 1:1 to the amount of THE present inside the veNFT deposited\r\n\t\tif (_ts == 0 || _base == 0) {\r\n\t\t\treturn _inc;\r\n\t\t}\r\n\t\t// Calculate and mint the amount of eTHENA the veNFT is worth. The ratio will change overtime,\r\n\t\t// as eTHENA is minted when veTHE are deposited + gained from rebases\r\n\t\telse {\r\n\t\t\tuint256 _amt = (_inc * _ts) / _base;\r\n\t\t\treturn _amt;\r\n\t\t}\r\n\t}\r\n\tfunction price() public view returns (uint) {\r\n\t\treturn 1e32 / rawQuote(1e18);\r\n\t}\r\n\tfunction setDAO(address d) public DAO {\r\n\t\tdao = d;\r\n\t}\r\n\tfunction setID(uint _id) public DAO {\r\n\t\tID = _id;\r\n\t}\r\n\tfunction rescue(address _t, uint _a) public DAO lock {\r\n\t\tIERC20 _tk = IERC20(_t);\r\n\t\t_tk.transfer(dao, _a);\r\n\t}\r\n\tconstructor(address ve, address e) {\r\n\t\tdao=msg.sender;\r\n\t\tveTHE = IVotingEscrow(ve);\r\n\t\teTHENA = IeTHENA(e);\r\n\t}\r\n}\r\n\r\n/*\r\n\tCommunity, Services & Enquiries:\r\n\t\thttps://discord.gg/QpyfMarNrV\r\n\r\n\tPowered by Guru Network DAO ( \ud83e\uddbe , \ud83d\ude80 )\r\n\t\tSimplicity is the ultimate sophistication.\r\n*/", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"e\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eTHENA\",\"outputs\":[{\"internalType\":\"contract IeTHENA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inc\",\"type\":\"uint256\"}],\"name\":\"rawQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_t\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"d\",\"type\":\"address\"}],\"name\":\"setDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veTHE\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "eTHENA_Depositor", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004752c0f171affaf9913f62e3b187a271632213a9000000000000000000000000f632129620fbbb52125669f6fdb5a483c27c41bd", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://902569d3193db431f7cba3c05ddbe169b800c03dce0e8fe3831ce232a04e0122"}