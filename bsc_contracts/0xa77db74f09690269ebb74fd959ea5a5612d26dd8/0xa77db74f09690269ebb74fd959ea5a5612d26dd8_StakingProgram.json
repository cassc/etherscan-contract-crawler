{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Allows the owner to retrieve ETH or tokens sent to this contract by mistake.\r\n */\r\ncontract RecoverableFunds is Ownable {\r\n\r\n    function retrieveTokens(address recipient, address tokenAddress) public virtual onlyOwner {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transfer(recipient, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function retriveETH(address payable recipient) public virtual onlyOwner {\r\n        recipient.transfer(address(this).balance);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev TGDAO Staking\r\n */\r\ncontract TGDAOStaking is RecoverableFunds {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint public PERCENT_DIVIDER = 100;\r\n\r\n    struct StakeType {\r\n        bool active;\r\n        uint periodInDays;\r\n        uint apy;\r\n        uint finesPeriodsCount;\r\n        mapping(uint => uint) fineDays;\r\n        mapping(uint => uint) fines;\r\n    }\r\n\r\n    struct Staker {\r\n        bool exists;\r\n        mapping(uint => bool) closed;\r\n        mapping(uint => uint) amount;\r\n        mapping(uint => uint) amountAfter;\r\n        mapping(uint => uint) stakeType;\r\n        mapping(uint => uint) start;\r\n        mapping(uint => uint) finished;\r\n        uint count;\r\n        uint summerDeposit;\r\n        uint summerAfter;\r\n    }\r\n\r\n    uint public countOfStakeTypes;\r\n\r\n    StakeType[] public stakeTypes;\r\n\r\n    mapping(address => Staker) public stakers;\r\n\r\n    address[] public stakersAddresses;\r\n\r\n    uint public stakersAddressesCount;\r\n\r\n    IERC20 public token;\r\n\r\n    bool public firstConfigured;\r\n\r\n    event Deposit(address account, uint amount, uint stakingTypeIndex, uint stakeIndex);\r\n\r\n    event Withdraw(address account, uint amount, uint stakingTypeIndex, uint stakeIndex);\r\n\r\n    function configure(address tokenAddress) public onlyOwner {\r\n        require(!firstConfigured, \"Already configured\");\r\n\r\n        uint[] memory fineDays = new uint[](3);\r\n        uint[] memory fines = new uint[](3);\r\n\r\n        // 1st\r\n        fineDays[0] = 30;\r\n        fineDays[1] = 60;\r\n        fineDays[2] = 90;\r\n\r\n        fines[0] = 30;\r\n        fines[1] = 25;\r\n        fines[2] = 20;\r\n\r\n        addStakeTypeWithFines(3 * 30, 7, fines, fineDays);\r\n\r\n        // 2nd\r\n        fineDays[0] = 60;\r\n        fineDays[1] = 120;\r\n        fineDays[2] = 180;\r\n\r\n        fines[0] = 30;\r\n        fines[1] = 25;\r\n        fines[2] = 20;\r\n\r\n        addStakeTypeWithFines(6 * 30, 14, fines, fineDays);\r\n\r\n\r\n        // 3d\r\n        fineDays[0] = 120;\r\n        fineDays[1] = 240;\r\n        fineDays[2] = 360;\r\n\r\n        fines[0] = 30;\r\n        fines[1] = 25;\r\n        fines[2] = 20;\r\n\r\n        addStakeTypeWithFines(12 * 30, 21, fines, fineDays);\r\n        token = IERC20(tokenAddress);\r\n\r\n        firstConfigured = true;\r\n    }\r\n\r\n    function addStakeTypeWithFines(uint periodInDays, uint apy, uint[] memory fines, uint[] memory fineDays) public onlyOwner {\r\n        uint stakeTypeIndex = addStakeType(periodInDays, apy);\r\n        setStakeTypeFines(stakeTypeIndex, fines, fineDays);\r\n    }\r\n\r\n\r\n    function setStakeTypeFines(uint stakeTypeIndex, uint[] memory fines, uint[] memory fineDays) public onlyOwner {\r\n        require(stakeTypeIndex < countOfStakeTypes, \"Wrong stake type index\");\r\n        require(fines.length > 0, \"Fines array length must be greater than 0\");\r\n        require(fines.length == fineDays.length, \"Fines and fine days arrays must be equals\");\r\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\r\n        stakeType.finesPeriodsCount = fines.length;\r\n        for (uint i = 0; i < fines.length; i++) {\r\n            require(fines[i] <= 1000, \"Fines can't be more than 1000\");\r\n            stakeType.fines[i] = fines[i];\r\n            require(fineDays[i] <= 100000, \"Fine days can't be more than 10000\");\r\n            stakeType.fineDays[i] = fineDays[i];\r\n        }\r\n    }\r\n\r\n    function changeStakeType(uint stakeTypeIndex, bool active, uint periodInDays, uint apy) public onlyOwner {\r\n        require(stakeTypeIndex < countOfStakeTypes, \"Wrong stake type index\");\r\n        require(apy < 1000, \"Apy can't be grater than 1000\");\r\n        require(periodInDays < 100000, \"Apy can't be grater than 100000\");\r\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\r\n        stakeType.active = active;\r\n        stakeType.periodInDays = periodInDays;\r\n        stakeType.apy = apy;\r\n    }\r\n\r\n    function addStakeType(uint periodInDays, uint apy) public onlyOwner returns (uint) {\r\n        stakeTypes.push();\r\n        StakeType storage stakeType = stakeTypes[countOfStakeTypes++];\r\n        stakeType.active = true;\r\n        stakeType.periodInDays = periodInDays;\r\n        stakeType.apy = apy;\r\n        return countOfStakeTypes - 1;\r\n    }\r\n\r\n    function setToken(address tokenAddress) public onlyOwner {\r\n        token = IERC20(tokenAddress);\r\n    }\r\n\r\n    function deposit(uint8 stakeTypeIndex, uint256 amount) public returns (uint) {\r\n        require(stakeTypeIndex < countOfStakeTypes, \"Wrong stake type index\");\r\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\r\n        require(stakeType.active, \"Stake type not active\");\r\n\r\n        Staker storage staker = stakers[_msgSender()];\r\n        if (!staker.exists) {\r\n            staker.exists = true;\r\n            stakersAddresses.push(_msgSender());\r\n            stakersAddressesCount++;\r\n        }\r\n\r\n        token.transferFrom(_msgSender(), address(this), amount);\r\n\r\n        staker.closed[staker.count] = false;\r\n        staker.amount[staker.count] = amount;\r\n        staker.start[staker.count] = block.timestamp;\r\n        staker.stakeType[staker.count] = stakeTypeIndex;\r\n        staker.count += 1;\r\n        staker.summerDeposit += amount;\r\n\r\n        emit Deposit(_msgSender(), amount, stakeTypeIndex, staker.count - 1);\r\n\r\n        return staker.count;\r\n    }\r\n\r\n    function calculateWithdrawValue(address stakerAddress, uint stakeIndex) public view returns (uint) {\r\n        Staker storage staker = stakers[stakerAddress];\r\n        require(staker.exists, \"Staker not registered\");\r\n        require(!staker.closed[stakeIndex], \"Stake already closed\");\r\n\r\n        uint stakeTypeIndex = staker.stakeType[stakeIndex];\r\n        StakeType storage stakeType = stakeTypes[staker.stakeType[stakeTypeIndex]];\r\n        require(stakeType.active, \"Stake type not active\");\r\n\r\n        uint startTimestamp = staker.start[stakeIndex];\r\n        if (block.timestamp >= startTimestamp + stakeType.periodInDays * (1 days)) {\r\n            // Rewards calculation\r\n            return staker.amount[stakeIndex]  + staker.amount[stakeIndex]* stakeType.periodInDays * stakeType.apy / (365 * PERCENT_DIVIDER);\r\n        } else {\r\n            uint stakePeriodIndex = stakeType.finesPeriodsCount - 1;\r\n            for (uint i = stakeType.finesPeriodsCount; i > 0; i--) {\r\n                if (block.timestamp < startTimestamp + stakeType.fineDays[i - 1] * (1 days)) {\r\n                    stakePeriodIndex = i - 1;\r\n                }\r\n            }\r\n            // Fines calculation\r\n            return staker.amount[stakeIndex].mul(PERCENT_DIVIDER - stakeType.fines[stakePeriodIndex]).div(PERCENT_DIVIDER);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint8 stakeIndex) public {\r\n        Staker storage staker = stakers[_msgSender()];\r\n        staker.amountAfter[stakeIndex] = calculateWithdrawValue(_msgSender(), stakeIndex);\r\n\r\n        require(token.balanceOf(address(this)) >= staker.amountAfter[stakeIndex], \"Staking contract does not have enough funds! Owner should deposit funds...\");\r\n\r\n        staker.summerAfter = staker.summerAfter.add(staker.amountAfter[stakeIndex]);\r\n        staker.finished[stakeIndex] = block.timestamp;\r\n        staker.closed[stakeIndex] = true;\r\n\r\n        require(token.transfer(_msgSender(), staker.amountAfter[stakeIndex]), \"Can't transfer reward\");\r\n        uint stakeTypeIndex = staker.stakeType[stakeIndex];\r\n\r\n        emit Withdraw(_msgSender(), staker.amountAfter[stakeIndex], stakeTypeIndex, stakeIndex);\r\n    }\r\n\r\n    function withdrawAll(address to) public onlyOwner {\r\n        token.transfer(to, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function getStakeTypeFinePeriodAndFine(uint8 stakeTypeIndex, uint periodIndex) public view returns (uint, uint) {\r\n        require(stakeTypeIndex < countOfStakeTypes, \"Wrong stake type index\");\r\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\r\n        //require(stakeType.active, \"Stake type not active\");\r\n        require(periodIndex < stakeType.finesPeriodsCount, \"Requetsed period idnex greater than max period index\");\r\n        return (stakeType.fineDays[periodIndex], stakeType.fines[periodIndex]);\r\n    }\r\n\r\n    modifier stakerStakeChecks(address stakerAddress, uint stakeIndex) {\r\n        Staker storage staker = stakers[stakerAddress];\r\n        require(staker.exists, \"Staker not registered\");\r\n        require(stakeIndex < staker.count, \"Wrong stake index\");\r\n        _;\r\n    }\r\n\r\n    function getStakerStakeParams(address stakerAddress, uint stakeIndex) public view stakerStakeChecks(stakerAddress, stakeIndex)\r\n    returns (bool closed, uint amount, uint amountAfter, uint stakeType, uint start, uint finished) {\r\n        Staker storage staker = stakers[stakerAddress];\r\n\r\n        uint[] memory uintValues = new uint[](5);\r\n        uintValues[0] = staker.amount[stakeIndex];\r\n        uintValues[1] = staker.amountAfter[stakeIndex];\r\n        uintValues[2] = staker.stakeType[stakeIndex];\r\n        uintValues[3] = staker.start[stakeIndex];\r\n        uintValues[4] = staker.finished[stakeIndex];\r\n\r\n        return (staker.closed[stakeIndex], uintValues[0], uintValues[1], uintValues[2], uintValues[3], uintValues[4]);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev StakingProgram\r\n */\r\ncontract StakingProgram is RecoverableFunds {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint public constant PERCENT_DIVIDER = 100;\r\n\r\n    uint8 public constant WITHDRAW_KIND_ALL = 1;\r\n\r\n    uint8 public constant WITHDRAW_KIND_BY_PROGRAM = 0;\r\n\r\n    address public fineWallet;\r\n\r\n    bool public paused = false;\r\n\r\n    struct StakeType {\r\n        bool active;\r\n        uint periodInDays;\r\n        uint apy;\r\n        uint finesPeriodsCount;\r\n        mapping(uint => uint) fineDays;\r\n        mapping(uint => uint) fines;\r\n    }\r\n\r\n    struct Staker {\r\n        bool exists;\r\n        mapping(uint => bool) closed;\r\n        mapping(uint => uint) amount;\r\n        mapping(uint => uint) amountAfter;\r\n        mapping(uint => uint) stakeType;\r\n        mapping(uint => uint) start;\r\n        mapping(uint => uint) finished;\r\n        uint count;\r\n        uint summerDeposit;\r\n        uint summerAfter;\r\n    }\r\n\r\n    uint public copyCounter = 0;\r\n\r\n    uint public countOfStakeTypes;\r\n\r\n    StakeType[] public stakeTypes;\r\n\r\n    mapping(address => Staker) public stakers;\r\n\r\n    address[] public stakersAddresses;\r\n\r\n    uint public stakersAddressesCount;\r\n\r\n    IERC20 public token;\r\n\r\n    bool public firstConfigured;\r\n\r\n    event Deposit(address account, uint amount, uint stakingTypeIndex, uint stakeIndex);\r\n\r\n    event Withdraw(address account, uint amount, uint stakingTypeIndex, uint stakeIndex);\r\n\r\n    function configure(address tokenAddress, address inFineWallet) public onlyOwner {\r\n        require(!firstConfigured, \"Already configured\");\r\n\r\n        uint[] memory fineDays = new uint[](3);\r\n        uint[] memory fines = new uint[](3);\r\n\r\n        // 1st\r\n        fineDays[0] = 30;\r\n        fineDays[1] = 60;\r\n        fineDays[2] = 90;\r\n\r\n        fines[0] = 30;\r\n        fines[1] = 25;\r\n        fines[2] = 20;\r\n\r\n        addStakeTypeWithFines(3 * 30, 7, fines, fineDays);\r\n\r\n        // 2nd\r\n        fineDays[0] = 60;\r\n        fineDays[1] = 120;\r\n        fineDays[2] = 180;\r\n\r\n        fines[0] = 30;\r\n        fines[1] = 25;\r\n        fines[2] = 20;\r\n\r\n        addStakeTypeWithFines(6 * 30, 14, fines, fineDays);\r\n\r\n\r\n        // 3d\r\n        fineDays[0] = 120;\r\n        fineDays[1] = 240;\r\n        fineDays[2] = 360;\r\n\r\n        fines[0] = 30;\r\n        fines[1] = 25;\r\n        fines[2] = 20;\r\n\r\n        addStakeTypeWithFines(12 * 30, 21, fines, fineDays);\r\n\r\n        token = IERC20(tokenAddress);\r\n\r\n        fineWallet = inFineWallet;\r\n\r\n        firstConfigured = true;\r\n    }\r\n\r\n    function copyFromAnotherStakingProgram(address addressFrom, uint count) public onlyOwner {\r\n        TGDAOStaking anotherStakingProgram = TGDAOStaking(addressFrom);\r\n        uint[] memory uintValues = new uint[](3);\r\n        uintValues[0] = anotherStakingProgram.stakersAddressesCount();\r\n        require(uintValues[0] > copyCounter, \"Already copied\");\r\n        uintValues[1] = copyCounter + count;\r\n        uintValues[2] = uintValues[0];\r\n        if(uintValues[2] > uintValues[1]) {\r\n            uintValues[2] = uintValues[1];\r\n        }\r\n        for(uint i = copyCounter; i < uintValues[2]; i++) {\r\n            address stakerAddress = anotherStakingProgram.stakersAddresses(i);\r\n            (bool sourceStakerExists,\r\n            uint sourceStakerCount,\r\n            uint sourceStakerSummerDeposit,\r\n            uint sourceStakerSummerAfter) = anotherStakingProgram.stakers(stakerAddress);\r\n\r\n            stakersAddresses.push(stakerAddress);\r\n            stakersAddressesCount++;\r\n            Staker storage targetStaker = stakers[stakerAddress];\r\n\r\n            targetStaker.exists = sourceStakerExists;\r\n            targetStaker.count = sourceStakerCount;\r\n            targetStaker.summerDeposit = sourceStakerSummerDeposit;\r\n            targetStaker.summerAfter = sourceStakerSummerAfter;\r\n\r\n            for(uint j = 0; j < sourceStakerCount; j++) {\r\n                (bool sourceStakeClosed,\r\n                uint sourceStakeAmount,\r\n                uint sourceStakeAmountAfter,\r\n                uint sourceStakeStakeType,\r\n                uint sourceStakeStart,\r\n                uint sourceStakeFinished) = anotherStakingProgram.getStakerStakeParams(stakerAddress, j);\r\n                targetStaker.closed[j] = sourceStakeClosed;\r\n                targetStaker.amount[j] = sourceStakeAmount;\r\n                targetStaker.amountAfter[j] = sourceStakeAmountAfter;\r\n                targetStaker.stakeType[j] = sourceStakeStakeType;\r\n                targetStaker.start[j] = sourceStakeStart;\r\n                targetStaker.finished[j] = sourceStakeFinished;\r\n            }\r\n        }\r\n        copyCounter = uintValues[2];\r\n    }\r\n\r\n    function addStakeTypeWithFines(uint periodInDays, uint apy, uint[] memory fines, uint[] memory fineDays) public onlyOwner {\r\n        uint stakeTypeIndex = addStakeType(periodInDays, apy);\r\n        setStakeTypeFines(stakeTypeIndex, fines, fineDays);\r\n    }\r\n\r\n\r\n    function setStakeTypeFines(uint stakeTypeIndex, uint[] memory fines, uint[] memory fineDays) public onlyOwner {\r\n        require(stakeTypeIndex < countOfStakeTypes, \"Wrong stake type index\");\r\n        require(fines.length > 0, \"Fines array length must be greater than 0\");\r\n        require(fines.length == fineDays.length, \"Fines and fine days arrays must be equals\");\r\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\r\n        stakeType.finesPeriodsCount = fines.length;\r\n        for (uint i = 0; i < fines.length; i++) {\r\n            require(fines[i] <= 1000, \"Fines can't be more than 1000\");\r\n            stakeType.fines[i] = fines[i];\r\n            require(fineDays[i] <= 100000, \"Fine days can't be more than 10000\");\r\n            stakeType.fineDays[i] = fineDays[i];\r\n        }\r\n    }\r\n\r\n    function changeStakeType(uint stakeTypeIndex, bool active, uint periodInDays, uint apy) public onlyOwner {\r\n        require(stakeTypeIndex < countOfStakeTypes, \"Wrong stake type index\");\r\n        require(apy < 1000, \"Apy can't be grater than 1000\");\r\n        require(periodInDays < 100000, \"Apy can't be grater than 100000\");\r\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\r\n        stakeType.active = active;\r\n        stakeType.periodInDays = periodInDays;\r\n        stakeType.apy = apy;\r\n    }\r\n\r\n    function addStakeType(uint periodInDays, uint apy) public onlyOwner returns (uint) {\r\n        stakeTypes.push();\r\n        StakeType storage stakeType = stakeTypes[countOfStakeTypes++];\r\n        stakeType.active = true;\r\n        stakeType.periodInDays = periodInDays;\r\n        stakeType.apy = apy;\r\n        return countOfStakeTypes - 1;\r\n    }\r\n\r\n    function setFineWallet(address inFineWallet) public onlyOwner {\r\n        fineWallet = inFineWallet;\r\n    }\r\n\r\n    function setToken(address tokenAddress) public onlyOwner {\r\n        token = IERC20(tokenAddress);\r\n    }\r\n\r\n    function setPaused(bool inPaused) public onlyOwner {\r\n        paused = inPaused;\r\n    }\r\n\r\n    function deposit(uint8 stakeTypeIndex, uint256 amount) public notPaused returns (uint) {\r\n        require(stakeTypeIndex < countOfStakeTypes, \"Wrong stake type index\");\r\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\r\n        require(stakeType.active, \"Stake type not active\");\r\n\r\n        Staker storage staker = stakers[_msgSender()];\r\n        if (!staker.exists) {\r\n            staker.exists = true;\r\n            stakersAddresses.push(_msgSender());\r\n            stakersAddressesCount++;\r\n        }\r\n\r\n        token.transferFrom(_msgSender(), address(this), amount);\r\n\r\n        staker.closed[staker.count] = false;\r\n        staker.amount[staker.count] = amount;\r\n        staker.start[staker.count] = block.timestamp;\r\n        staker.stakeType[staker.count] = stakeTypeIndex;\r\n        staker.count += 1;\r\n        staker.summerDeposit += amount;\r\n\r\n        emit Deposit(_msgSender(), amount, stakeTypeIndex, staker.count - 1);\r\n\r\n        return staker.count;\r\n    }\r\n\r\n    function calculateWithdrawValue(address stakerAddress, uint stakeIndex, uint8 kind) public view returns (uint) {\r\n        Staker storage staker = stakers[stakerAddress];\r\n        require(staker.exists, \"Staker not registered\");\r\n        require(!staker.closed[stakeIndex], \"Stake already closed\");\r\n\r\n        uint stakeTypeIndex = staker.stakeType[stakeIndex];\r\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\r\n        require(stakeType.active, \"Stake type not active\");\r\n\r\n        if(kind == WITHDRAW_KIND_ALL) {\r\n            return staker.amount[stakeIndex];\r\n        }\r\n\r\n        uint startTimestamp = staker.start[stakeIndex];\r\n        if (block.timestamp >= startTimestamp + stakeType.periodInDays * (1 days)) {\r\n            // Rewards calculation\r\n            return staker.amount[stakeIndex]  + staker.amount[stakeIndex]* stakeType.periodInDays * stakeType.apy / (365 * PERCENT_DIVIDER);\r\n        } else {\r\n            uint stakePeriodIndex = stakeType.finesPeriodsCount - 1;\r\n            for (uint i = stakeType.finesPeriodsCount; i > 0; i--) {\r\n                if (block.timestamp < startTimestamp + stakeType.fineDays[i - 1] * (1 days)) {\r\n                    stakePeriodIndex = i - 1;\r\n                }\r\n            }\r\n            // Fines calculation\r\n            return staker.amount[stakeIndex].mul(PERCENT_DIVIDER - stakeType.fines[stakePeriodIndex]).div(PERCENT_DIVIDER);\r\n        }\r\n    }\r\n\r\n    function commonWithdraw(address to, address stakerAddress, uint8 stakeIndex, uint8 kind) private {\r\n        Staker storage staker = stakers[stakerAddress];\r\n        staker.amountAfter[stakeIndex] = calculateWithdrawValue(stakerAddress, stakeIndex, kind);\r\n\r\n        require(token.balanceOf(address(this)) >= staker.amountAfter[stakeIndex], \"Staking contract does not have enough funds! Owner should deposit funds...\");\r\n\r\n        staker.summerAfter = staker.summerAfter.add(staker.amountAfter[stakeIndex]);\r\n        staker.finished[stakeIndex] = block.timestamp;\r\n        staker.closed[stakeIndex] = true;\r\n\r\n        require(token.transfer(to, staker.amountAfter[stakeIndex]), \"Can't transfer reward\");\r\n        uint stakeTypeIndex = staker.stakeType[stakeIndex];\r\n\r\n        if(staker.amountAfter[stakeIndex] < staker.amount[stakeIndex]) {\r\n            uint fine = staker.amount[stakeIndex] - staker.amountAfter[stakeIndex];\r\n            require(token.transfer(fineWallet, fine), \"Can't transfer reward\");\r\n        }\r\n\r\n        emit Withdraw(stakerAddress, staker.amountAfter[stakeIndex], stakeTypeIndex, stakeIndex);\r\n    }\r\n\r\n    function adminWithdraw(address to, address stakerAddress, uint8 stakeIndex) public onlyOwner {\r\n        commonWithdraw(to, stakerAddress, stakeIndex, WITHDRAW_KIND_ALL);\r\n    }\r\n\r\n    function withdraw(uint8 stakeIndex) public notPaused {\r\n        commonWithdraw(_msgSender(), _msgSender(), stakeIndex, WITHDRAW_KIND_BY_PROGRAM);\r\n    }\r\n\r\n    function withdrawSpecified(address to, uint amount) public onlyOwner {\r\n        token.transfer(to, amount);\r\n    }\r\n\r\n    function withdrawAll(address to) public onlyOwner {\r\n        token.transfer(to, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function getStakeTypeFinePeriodAndFine(uint8 stakeTypeIndex, uint periodIndex) public view returns (uint, uint) {\r\n        require(stakeTypeIndex < countOfStakeTypes, \"Wrong stake type index\");\r\n        StakeType storage stakeType = stakeTypes[stakeTypeIndex];\r\n        //require(stakeType.active, \"Stake type not active\");\r\n        require(periodIndex < stakeType.finesPeriodsCount, \"Requetsed period idnex greater than max period index\");\r\n        return (stakeType.fineDays[periodIndex], stakeType.fines[periodIndex]);\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused, \"Deposit program paused\");\r\n        _;\r\n    }\r\n\r\n    modifier stakerStakeChecks(address stakerAddress, uint stakeIndex) {\r\n        Staker storage staker = stakers[stakerAddress];\r\n        require(staker.exists, \"Staker not registered\");\r\n        require(stakeIndex < staker.count, \"Wrong stake index\");\r\n        _;\r\n    }\r\n\r\n    function getStakerStakeParams(address stakerAddress, uint stakeIndex) public view stakerStakeChecks(stakerAddress, stakeIndex)\r\n    returns (bool closed, uint amount, uint amountAfter, uint stakeType, uint start, uint finished) {\r\n        Staker storage staker = stakers[stakerAddress];\r\n\r\n        uint[] memory uintValues = new uint[](5);\r\n        uintValues[0] = staker.amount[stakeIndex];\r\n        uintValues[1] = staker.amountAfter[stakeIndex];\r\n        uintValues[2] = staker.stakeType[stakeIndex];\r\n        uintValues[3] = staker.start[stakeIndex];\r\n        uintValues[4] = staker.finished[stakeIndex];\r\n\r\n        return (staker.closed[stakeIndex], uintValues[0], uintValues[1], uintValues[2], uintValues[3], uintValues[4]);\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingTypeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingTypeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_KIND_ALL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_KIND_BY_PROGRAM\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"addStakeType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"fines\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fineDays\",\"type\":\"uint256[]\"}],\"name\":\"addStakeTypeWithFines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stakeIndex\",\"type\":\"uint8\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"calculateWithdrawValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTypeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"changeStakeType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inFineWallet\",\"type\":\"address\"}],\"name\":\"configure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"copyCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"copyFromAnotherStakingProgram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countOfStakeTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fineWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstConfigured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeTypeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"periodIndex\",\"type\":\"uint256\"}],\"name\":\"getStakeTypeFinePeriodAndFine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakerStakeParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finished\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"retriveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inFineWallet\",\"type\":\"address\"}],\"name\":\"setFineWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTypeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"fines\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fineDays\",\"type\":\"uint256[]\"}],\"name\":\"setStakeTypeFines\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeTypes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"periodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finesPeriodsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"summerDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"summerAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakersAddressesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeIndex\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSpecified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingProgram", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0fc96830616636a6aefa41c4503ea7eecb8585eb240ce643eefb043a6260cdd6"}