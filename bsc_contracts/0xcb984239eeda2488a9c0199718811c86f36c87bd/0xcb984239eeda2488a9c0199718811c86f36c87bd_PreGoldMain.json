{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev The `account` is missing a role.\r\n     */\r\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\r\n\r\n    /**\r\n     * @dev The caller of a function is not the expected one.\r\n     *\r\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\r\n     */\r\n    error AccessControlBadConfirmation();\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     */\r\n    event RoleAdminChanged(\r\n        bytes32 indexed role,\r\n        bytes32 indexed previousAdminRole,\r\n        bytes32 indexed newAdminRole\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(\r\n        bytes32 indexed role,\r\n        address indexed account,\r\n        address indexed sender\r\n    );\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n  \r\n    function renounceRole(bytes32 role, address callerConfirmation) external;\r\n}\r\n\r\ninterface IERC165 {\r\n  \r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) hasRole;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IAccessControl).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function hasRole(bytes32 role, address account)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return _roles[role].hasRole[account];\r\n    }\r\n\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert AccessControlUnauthorizedAccount(account, role);\r\n        }\r\n    }\r\n\r\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    function grantRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    function revokeRole(bytes32 role, address account)\r\n        public\r\n        virtual\r\n        onlyRole(getRoleAdmin(role))\r\n    {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    function renounceRole(bytes32 role, address callerConfirmation)\r\n        public\r\n        virtual\r\n    {\r\n        if (callerConfirmation != _msgSender()) {\r\n            revert AccessControlBadConfirmation();\r\n        }\r\n\r\n        _revokeRole(role, callerConfirmation);\r\n    }\r\n\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account)\r\n        internal\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].hasRole[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account)\r\n        internal\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].hasRole[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract PreGoldMain is AccessControl, ReentrancyGuard {\r\n    uint256 public contractShare;\r\n    bytes32 public FeeWallet = keccak256(abi.encodePacked(\"FeeWallet\"));\r\n    address public airdropWallet;\r\n    address[] public chairPersons;\r\n    mapping(address => uint16) public chairPersonsPercentReward;\r\n    mapping(address => uint256) public chairPersonsReward;\r\n    IERC20 public immutable USDT;\r\n\r\n    uint64 public curentEventID;\r\n    uint256 public pregoldPrice;\r\n    uint256 public eventFee;\r\n    uint8 public rowsCount;\r\n    uint8 public pregoldValidCount;\r\n    address public feeWallet;\r\n\r\n    uint64 private temp;\r\n\r\n    mapping(uint64 => mapping(address => uint64)) public eventUserID;\r\n    mapping(uint64 => mapping(uint64 => GoldCard)) public eventUser;\r\n\r\n    mapping(uint64 => Pregold) public eachevent;\r\n\r\n    mapping(Rows => uint256) public eachRowsDeltaAmount;\r\n    mapping(Rows => uint8) public eachRowsPercent;\r\n\r\n    mapping(uint64 => mapping(Rows => uint64)) public winnerEachRows;\r\n    mapping(uint64 => mapping(Rows => uint8)) public winnerEachRowsPercent;\r\n\r\n    mapping(address => uint64[]) public lastEventInvolved;\r\n\r\n    enum Rows {\r\n        None,\r\n        GoldMine,\r\n        Row2,\r\n        Row3,\r\n        Row4,\r\n        Row5\r\n    }\r\n\r\n    enum Status {\r\n        Pending,\r\n        End\r\n    }\r\n\r\n    struct Pregold {\r\n        Status status;\r\n        uint256 openPredictTime;\r\n        uint256 closePredictTime;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 totalAmount;\r\n        bool priceSet;\r\n        uint256 finalPrice;\r\n        uint256 pregoldCount;\r\n        uint128[] predictPrices;\r\n        uint64 userCount;\r\n    }\r\n    struct GoldCard {\r\n        uint128[] predictPrices;\r\n        address owner;\r\n        uint8 count;\r\n    }\r\n    // TODO Buy\r\n    event PreGoldBuy(\r\n        address buyer,\r\n        uint128[] predictPrices,\r\n        uint256 curentEventID\r\n    );\r\n    event WinRow(address buyer, uint256 totalWin);\r\n    event NewEvent(uint64 curentId);\r\n\r\n    modifier buyDuration() {\r\n        uint256 open = eachevent[curentEventID].openPredictTime;\r\n        uint256 close = eachevent[curentEventID].closePredictTime;\r\n        require(block.timestamp >= open && block.timestamp <= close, \"closed\");\r\n        _;\r\n    }\r\n    modifier validPreGold(uint256 count) {\r\n        uint64 id = eventUserID[curentEventID][msg.sender];\r\n        uint8 pregoldCount = eventUser[curentEventID][id].count;\r\n        require(count + pregoldCount <= pregoldValidCount, \"done\");\r\n        _;\r\n    }\r\n    modifier rewardCheck() {\r\n        require(lastEventInvolved[msg.sender].length != 0);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _developer,\r\n        address _owner,\r\n        address _feeWallet,\r\n        address _partner1,\r\n        address _partner2,\r\n        address _partner3,\r\n        address _airdropWallet,\r\n        address _usdt\r\n    ) {\r\n        USDT = IERC20(_usdt);\r\n\r\n        _grantRole(FeeWallet, _feeWallet);\r\n\r\n        _grantRole(DEFAULT_ADMIN_ROLE, _owner);\r\n        eachRowsDeltaAmount[Rows(1)] = 50;\r\n        eachRowsDeltaAmount[Rows(2)] = 100;\r\n        eachRowsDeltaAmount[Rows(3)] = 200;\r\n        eachRowsDeltaAmount[Rows(4)] = 300;\r\n        eachRowsDeltaAmount[Rows(5)] = 400;\r\n\r\n        eachRowsPercent[Rows(1)] = 35;\r\n        eachRowsPercent[Rows(2)] = 20;\r\n        eachRowsPercent[Rows(3)] = 18;\r\n        eachRowsPercent[Rows(4)] = 15;\r\n        eachRowsPercent[Rows(5)] = 12;\r\n        airdropWallet = _airdropWallet;\r\n        feeWallet = _feeWallet;\r\n        chairPersons.push(_developer);\r\n        chairPersons.push(_owner);\r\n        chairPersons.push(_partner1);\r\n        chairPersons.push(_partner2);\r\n        chairPersons.push(_partner3);\r\n        chairPersonsPercentReward[_developer] = 30;\r\n        chairPersonsPercentReward[_owner] = 30;\r\n        chairPersonsPercentReward[_partner1] = 30;\r\n        chairPersonsPercentReward[_partner2] = 5;\r\n        chairPersonsPercentReward[_partner3] = 5;\r\n        pregoldPrice = 2e18;\r\n        eventFee = 2e17;\r\n        pregoldValidCount = 25;\r\n        rowsCount = 5;\r\n    }\r\n\r\n    function buyPregold(uint128[] calldata _predictPrices)\r\n        external\r\n        buyDuration\r\n        validPreGold(_predictPrices.length)\r\n    {\r\n        USDT.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            pregoldPrice * _predictPrices.length\r\n        );\r\n\r\n        USDT.transfer(airdropWallet, eventFee * _predictPrices.length);\r\n\r\n        if (eventUserID[curentEventID][msg.sender] == 0) {\r\n            lastEventInvolved[msg.sender].push(curentEventID);\r\n            eachevent[curentEventID].userCount++;\r\n            eventUserID[curentEventID][msg.sender] = eachevent[curentEventID]\r\n                .userCount;\r\n            eventUser[curentEventID][eachevent[curentEventID].userCount]\r\n                .owner = msg.sender;\r\n        }\r\n        uint64 userId = eventUserID[curentEventID][msg.sender];\r\n        eventUser[curentEventID][userId].count += uint8(_predictPrices.length);\r\n        eachevent[curentEventID].pregoldCount += _predictPrices.length;\r\n        eachevent[curentEventID].totalAmount +=\r\n            (pregoldPrice * _predictPrices.length) -\r\n            (_predictPrices.length * eventFee);\r\n\r\n        for (uint256 i = 0; i < _predictPrices.length; i++) {\r\n            eventUser[curentEventID][userId].predictPrices.push(\r\n                uint64(_predictPrices[i])\r\n            );\r\n            eachevent[curentEventID].predictPrices.push(\r\n                uint64(_predictPrices[i])\r\n            );\r\n        }\r\n        emit PreGoldBuy(msg.sender, _predictPrices, curentEventID);\r\n    }\r\n\r\n    function getReward() public rewardCheck nonReentrant {\r\n        uint64[] memory lastEventsInvolved = lastEventInvolved[msg.sender];\r\n        uint64 len = uint64(lastEventsInvolved.length);\r\n        if (eachevent[lastEventsInvolved[len - 1]].status != Status.End) {\r\n            len--;\r\n        }\r\n\r\n        uint256 totalReward;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            lastEventInvolved[msg.sender].pop();\r\n            uint64 id = lastEventsInvolved[i];\r\n            uint64 userId = eventUserID[id][msg.sender];\r\n            uint128[] memory predictPrices = eventUser[id][userId]\r\n                .predictPrices;\r\n\r\n            for (uint256 j = 0; j < predictPrices.length; j++) {\r\n                uint256 _reward = userReward(id, predictPrices[j]);\r\n\r\n                totalReward += _reward;\r\n            }\r\n        }\r\n        uint256 reward = totalReward / 10;\r\n        for (uint256 i = 0; i < chairPersons.length; i++) {\r\n            uint16 percent = chairPersonsPercentReward[chairPersons[i]];\r\n            uint256 _chairPersonsReward = (reward * percent) / 1000;\r\n            chairPersonsReward[chairPersons[i]] += _chairPersonsReward;\r\n        }\r\n        contractShare += reward;\r\n        totalReward -= reward;\r\n\r\n        USDT.transfer(msg.sender, totalReward);\r\n        emit WinRow(msg.sender, totalReward);\r\n    }\r\n\r\n    function startNewEvent(\r\n        uint256 endTime,\r\n        uint256 closeTime,\r\n        uint256 finalPrice,\r\n        uint64 start,\r\n        uint64 end\r\n    ) external onlyRole(FeeWallet) {\r\n        if (eachevent[curentEventID].pregoldCount > 0) {\r\n            require(end != 0);\r\n        }\r\n        if (curentEventID != 0) {\r\n            winReward(finalPrice, start, end);\r\n        }\r\n        if (\r\n            curentEventID == 0 || eachevent[curentEventID].status == Status.End\r\n        ) {\r\n            require(\r\n                eachevent[curentEventID].status == Status.End ||\r\n                    curentEventID == 0\r\n            );\r\n            _startNewEvent(endTime, closeTime);\r\n        }\r\n    }\r\n\r\n    function _startNewEvent(uint256 endTime, uint256 closeTime) internal {\r\n        curentEventID++;\r\n\r\n        for (uint256 i = 1; i <= rowsCount; i++) {\r\n            uint256 row = winnerEachRows[curentEventID - 1][Rows(i)];\r\n            winnerEachRowsPercent[curentEventID][Rows(i)] = eachRowsPercent[\r\n                Rows(i)\r\n            ];\r\n            if (row == 0) {\r\n                if (eachevent[curentEventID - 1].totalAmount > 0) {\r\n                    eachevent[curentEventID].totalAmount +=\r\n                        (eachevent[curentEventID - 1].totalAmount *\r\n                            eachRowsPercent[Rows(i)]) /\r\n                        100;\r\n                }\r\n            }\r\n        }\r\n        eachevent[curentEventID].status = Status.Pending;\r\n        eachevent[curentEventID].priceSet = false;\r\n        eachevent[curentEventID].finalPrice = 0;\r\n\r\n        eachevent[curentEventID].startTime = block.timestamp;\r\n        eachevent[curentEventID].openPredictTime = block.timestamp;\r\n        eachevent[curentEventID].closePredictTime = closeTime;\r\n        eachevent[curentEventID].endTime = endTime;\r\n        emit NewEvent(curentEventID);\r\n    }\r\n\r\n    function closeEvent(uint256 amount) internal {\r\n        eachevent[curentEventID].status = Status.End;\r\n        eachevent[curentEventID].priceSet = true;\r\n        eachevent[curentEventID].finalPrice = amount;\r\n    }\r\n\r\n    function winReward(\r\n        uint256 finalPrice,\r\n        uint64 start,\r\n        uint64 end\r\n    ) internal {\r\n        require(start == temp);\r\n        require(eachevent[curentEventID].status != Status.End);\r\n        for (uint64 i = start; i < end; ) {\r\n            uint128 amount = eachevent[curentEventID].predictPrices[i];\r\n            Rows userRow = checkReward(finalPrice, amount);\r\n            winnerEachRows[curentEventID][userRow]++;\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        temp = end;\r\n        if (eachevent[curentEventID].predictPrices.length == end) {\r\n            temp = 0;\r\n            closeEvent(finalPrice);\r\n        }\r\n    }\r\n\r\n    function checkReward(uint256 finalPrice, uint256 predictPrice)\r\n        internal\r\n        view\r\n        returns (Rows)\r\n    {\r\n        for (uint8 i = 1; i <= rowsCount; ) {\r\n            uint256 delta = eachRowsDeltaAmount[Rows(i)];\r\n            calculateDeltaAmount(predictPrice, finalPrice, delta);\r\n            if (calculateDeltaAmount(predictPrice, finalPrice, delta))\r\n                return Rows(i);\r\n            {\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        return Rows.None;\r\n    }\r\n\r\n    function calculateDeltaAmount(\r\n        uint256 amount,\r\n        uint256 finalAmount,\r\n        uint256 delta\r\n    ) internal pure returns (bool) {\r\n        if (amount > finalAmount - delta && amount <= finalAmount + delta) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function showUserReward(address user) public view returns (uint256) {\r\n        uint64[] memory lastEventsInvolved = lastEventInvolved[user];\r\n        uint64 len = uint64(lastEventsInvolved.length);\r\n        if (eachevent[lastEventsInvolved[len - 1]].status != Status.End) {\r\n            len--;\r\n        }\r\n\r\n        uint256 totalReward;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            uint64 id = lastEventsInvolved[i];\r\n            uint64 userId = eventUserID[id][user];\r\n            uint128[] memory predictPrices = eventUser[id][userId]\r\n                .predictPrices;\r\n\r\n            for (uint256 j = 0; j < predictPrices.length; j++) {\r\n                uint256 reward = userReward(id, predictPrices[j]);\r\n\r\n                totalReward += reward;\r\n            }\r\n        }\r\n\r\n        totalReward -= totalReward / 10;\r\n        return totalReward;\r\n    }\r\n\r\n    function userReward(uint64 eventID, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 totalReward;\r\n        uint256 totalAmount = eachevent[eventID].totalAmount;\r\n        uint256 finalPrice = eachevent[eventID].finalPrice;\r\n        Rows userRow = checkReward(finalPrice, amount);\r\n\r\n        if (userRow != Rows.None) {\r\n            uint64 count = winnerEachRows[eventID][userRow];\r\n            uint8 percent = winnerEachRowsPercent[eventID][userRow];\r\n\r\n            uint256 reward = ((totalAmount * percent) / 100) / count;\r\n            totalReward = reward;\r\n        }\r\n        return totalReward;\r\n    }\r\n\r\n    function userEventInfo(uint64 eventId, address sender)\r\n        public\r\n        view\r\n        returns (GoldCard memory)\r\n    {\r\n        uint64 userId = eventUserID[eventId][sender];\r\n        return eventUser[eventId][userId];\r\n    }\r\n\r\n    function changeChairPerson(\r\n        address _chairPerson,\r\n        uint8 _percent,\r\n        uint8 _index\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_chairPerson != chairPersons[0]);\r\n        uint256 reward = chairPersonsReward[chairPersons[_index]];\r\n        if (reward > 0) {\r\n            USDT.transfer(airdropWallet, reward);\r\n        }\r\n        chairPersonsPercentReward[_chairPerson] = _percent;\r\n        chairPersons[_index] = _chairPerson;\r\n    }\r\n\r\n    function changePercent(address _chairPerson, uint16 _percent)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(_chairPerson != chairPersons[0]);\r\n        chairPersonsPercentReward[_chairPerson] = _percent;\r\n    }\r\n\r\n    function chairPersonShare() external {\r\n        bool isChairPerson;\r\n        for (uint256 i = 0; i < chairPersons.length; i++) {\r\n            if (chairPersons[i] == msg.sender) {\r\n                isChairPerson = true;\r\n                break;\r\n            }\r\n        }\r\n        require(isChairPerson, \"just chairperson\");\r\n        uint256 reward = chairPersonsReward[msg.sender];\r\n        require(reward > 0, \"0\");\r\n        contractShare -= reward;\r\n        chairPersonsReward[msg.sender] = 0;\r\n        USDT.transfer(msg.sender, reward);\r\n    }\r\n\r\n    function addBalance(uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        USDT.transferFrom(msg.sender, address(this), amount);\r\n        eachevent[curentEventID].totalAmount += amount;\r\n    }\r\n\r\n    function changeFeeWallet(address _newFeeWallet)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        feeWallet = _newFeeWallet;\r\n    }\r\n\r\n    function changeAirdropWallet(address _newAirdropWallet)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        feeWallet = _newAirdropWallet;\r\n    }\r\n\r\n    function changePercents(Rows _index, uint8 _percent)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        eachRowsPercent[_index] = _percent;\r\n    }\r\n\r\n    function changePredictPrice(uint256 _pregoldPrice, uint256 _eventFee)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        pregoldPrice = _pregoldPrice;\r\n        eventFee = _eventFee;\r\n    }\r\n\r\n    function changepregoldValidCount(uint8 _pregoldValidCount)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        pregoldValidCount = _pregoldValidCount;\r\n    }\r\n\r\n    function changeEachRowsDeltaAmount(Rows _index, uint16 _delta)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        eachRowsDeltaAmount[_index] = _delta;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partner1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partner3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdropWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"curentId\",\"type\":\"uint64\"}],\"name\":\"NewEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"predictPrices\",\"type\":\"uint128[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curentEventID\",\"type\":\"uint256\"}],\"name\":\"PreGoldBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWin\",\"type\":\"uint256\"}],\"name\":\"WinRow\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeWallet\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"_predictPrices\",\"type\":\"uint128[]\"}],\"name\":\"buyPregold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chairPersonShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chairPersons\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chairPersonsPercentReward\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chairPersonsReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAirdropWallet\",\"type\":\"address\"}],\"name\":\"changeAirdropWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chairPerson\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_percent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"changeChairPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PreGoldMain.Rows\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_delta\",\"type\":\"uint16\"}],\"name\":\"changeEachRowsDeltaAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeWallet\",\"type\":\"address\"}],\"name\":\"changeFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chairPerson\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"changePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PreGoldMain.Rows\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_percent\",\"type\":\"uint8\"}],\"name\":\"changePercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pregoldPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventFee\",\"type\":\"uint256\"}],\"name\":\"changePredictPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pregoldValidCount\",\"type\":\"uint8\"}],\"name\":\"changepregoldValidCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curentEventID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PreGoldMain.Rows\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"eachRowsDeltaAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PreGoldMain.Rows\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"eachRowsPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"eachevent\",\"outputs\":[{\"internalType\":\"enum PreGoldMain.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"openPredictTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closePredictTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"priceSet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pregoldCount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"userCount\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"eventUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eventUserID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastEventInvolved\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pregoldPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pregoldValidCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rowsCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"showUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"end\",\"type\":\"uint64\"}],\"name\":\"startNewEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"userEventInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128[]\",\"name\":\"predictPrices\",\"type\":\"uint128[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"}],\"internalType\":\"struct PreGoldMain.GoldCard\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"userReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"enum PreGoldMain.Rows\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"winnerEachRows\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"enum PreGoldMain.Rows\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"winnerEachRowsPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PreGoldMain", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a263ec0ef7a5312c5370063d3b0e26b935bf48b000000000000000000000000d15a3bf751f4bf9735502b3be6f762341d16f5e20000000000000000000000004eb6a2dfc1ad03ec34b1f01a5087c1a106381942000000000000000000000000b069c56949140d7676554ae6b003476d0cd79b4a00000000000000000000000047ba2edbaf88371afce4bf5f609cb5f67ce15efd000000000000000000000000bb758079ac11b7e323672be03b1a4be65239428a0000000000000000000000001792f6dfdf93c2c0abefeec02f68b1ca902f114200000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9fd6915174c7aaa8e5d0fe6265985b8248307fcf661a939e5074a6639abd2f02"}