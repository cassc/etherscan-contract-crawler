{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdminPrivileges.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {IAdminPrivileges} from \\\"./interfaces/IAdminPrivileges.sol\\\";\\n\\n/**\\n * @title AdminPrivileges\\n * @author Tim Loh\\n * @notice Provides admin privileges role definitions that are inherited by other contracts\\n */\\ncontract AdminPrivileges is AccessControl, IAdminPrivileges {\\n    bytes32 public constant BACKOFFICE_ROLE_ADMIN_ROLE = keccak256(\\\"BACKOFFICE_ROLE_ADMIN_ROLE\\\");\\n    bytes32 public constant BACKOFFICE_GOVERNANCE_ROLE = keccak256(\\\"BACKOFFICE_GOVERNANCE_ROLE\\\");\\n    bytes32 public constant BACKOFFICE_CONTRACT_ADMIN_ROLE = keccak256(\\\"BACKOFFICE_CONTRACT_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant TENANT_ROLE_ADMIN_ROLE = keccak256(\\\"TENANT_ROLE_ADMIN_ROLE\\\");\\n    bytes32 public constant TENANT_GOVERNANCE_ROLE = keccak256(\\\"TENANT_GOVERNANCE_ROLE\\\");\\n    bytes32 public constant TENANT_CONTRACT_ADMIN_ROLE = keccak256(\\\"TENANT_CONTRACT_ADMIN_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"contracts/AdminWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\nimport {IAdminWallet} from \\\"./interfaces/IAdminWallet.sol\\\";\\n\\n/**\\n * @title AdminWallet\\n * @author Tim Loh\\n * @notice Provides an implementation of the admin wallet interface that is inherited by other contracts\\n */\\ncontract AdminWallet is IAdminWallet {\\n    address private _adminWallet;\\n\\n    /**\\n     * @inheritdoc IAdminWallet\\n     */\\n    function adminWallet() public view virtual override returns (address) {\\n        return _adminWallet;\\n    }\\n\\n    /**\\n     * @dev Change admin wallet that will receive the funds to a new wallet address\\n     * @param newWallet The new admin wallet address\\n     */\\n    function _setAdminWallet(address newWallet) internal virtual {\\n        require(newWallet != address(0), \\\"AdminWallet: new wallet\\\");\\n\\n        address oldWallet = _adminWallet;\\n        _adminWallet = newWallet;\\n\\n        emit AdminWalletChanged(oldWallet, newWallet, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdminPrivileges.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\n/**\\n * @title AdminPrivileges Interface\\n * @author Tim Loh\\n * @notice Interface for admin privileges role definitions that are inherited by other contracts\\n */\\ninterface IAdminPrivileges {\\n    // solhint-disable func-name-mixedcase\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function BACKOFFICE_ROLE_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function BACKOFFICE_GOVERNANCE_ROLE() external view returns (bytes32);\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function BACKOFFICE_CONTRACT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function TENANT_ROLE_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function TENANT_GOVERNANCE_ROLE() external view returns (bytes32);\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function TENANT_CONTRACT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    // solhint-enable func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdminWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\n/**\\n * @title AdminWallet Interface\\n * @author Tim Loh\\n * @notice Interface for admin wallet that will receive the funds\\n */\\ninterface IAdminWallet {\\n    /**\\n     * @notice Emitted when admin wallet has been changed from `oldWallet` to `newWallet`\\n     * @param oldWallet The wallet before the wallet was changed\\n     * @param newWallet The wallet after the wallet was changed\\n     * @param sender The address that changes the admin wallet\\n     */\\n    event AdminWalletChanged(address indexed oldWallet, address indexed newWallet, address indexed sender);\\n\\n    /**\\n     * @notice Returns the admin wallet address that will receive the funds\\n     * @return Admin wallet address\\n     */\\n    function adminWallet() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactoryImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IFactoryImplementation\\n * @author Tim Loh\\n * @notice Provides factory implementation type that is inherited by reference implementation contracts for matching\\n *         with corresponding factory contracts\\n */\\ninterface IFactoryImplementation {\\n    function factoryImplementationType() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVestingCustomRefund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IAdminPrivileges} from \\\"./IAdminPrivileges.sol\\\";\\nimport {IAdminWallet} from \\\"./IAdminWallet.sol\\\";\\nimport {IFactoryImplementation} from \\\"./IFactoryImplementation.sol\\\";\\n\\n/**\\n * @title IVestingCustomRefund\\n * @author Tim Loh\\n * @notice Interface for custom vesting with refund\\n */\\ninterface IVestingCustomRefund is IAccessControl, IAdminPrivileges, IAdminWallet, IFactoryImplementation {\\n    /**\\n     * @notice Emitted when refund window has been cancelled\\n     * @param sender The address that cancelled the refund\\n     * @param refundStartTimestamp Timestamp when cancelled refund window will start\\n     * @param refundDurationSeconds Duration of cancelled refund window in seconds\\n     * @param refundEndTimestamp Timestamp when cancelled refund window will end\\n     */\\n    event RefundWindowCancelled(\\n        address indexed sender,\\n        uint256 refundStartTimestamp,\\n        uint256 refundDurationSeconds,\\n        uint256 refundEndTimestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when refund window has been extended\\n     * @param sender The address that extended the refund window\\n     * @param newDurationSeconds Refund window duration in seconds after extension\\n     * @param newEndTimestamp Timestamp when refund window will end after extension\\n     * @param oldDurationSeconds Refund window duration in seconds before extension\\n     * @param oldEndTimestamp Timestamp when refund window will end before extension\\n     */\\n    event RefundWindowExtended(\\n        address indexed sender,\\n        uint256 newDurationSeconds,\\n        uint256 newEndTimestamp,\\n        uint256 oldDurationSeconds,\\n        uint256 oldEndTimestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when refund window has been set\\n     * @param sender The address that set the refund window\\n     * @param startTimestamp Timestamp when refund window will start\\n     * @param durationSeconds Refund window duration in seconds\\n     * @param endTimestamp Timestamp when refund window will end\\n     */\\n    event RefundWindowSet(\\n        address indexed sender,\\n        uint256 startTimestamp,\\n        uint256 durationSeconds,\\n        uint256 endTimestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when vesting schedule has been set\\n     * @param sender The address that set the vesting schedule\\n     * @param startTimestamps Array specifying the start timestamps of each period\\n     * @param percentReleases Array specifying the percentage of grant amount to be released for each period\\n     * @param durationsDays Array specifying the duration in days of each period\\n     */\\n    event ScheduleSet(\\n        address indexed sender,\\n        uint256[] startTimestamps,\\n        uint256[] percentReleases,\\n        uint256[] durationsDays\\n    );\\n\\n    /**\\n     * @notice Emitted when vested tokens have been released to `account`\\n     * @param account The address that received the released tokens\\n     * @param amount The amount of tokens in wei transferred to `account`\\n     */\\n    event TokensReleased(address indexed account, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when unused tokens have been transferred to the admin wallet\\n     * @param sender The address that initiated the transfer of unused tokens\\n     * @param unusedAmount The amount of tokens in wei transferred to the admin wallet\\n     * @param balanceInWei The amount of tokens in wei held by the custom vesting contract before transfer\\n     * @param totalReleasedAmount The total amount of tokens in wei that has been released so far\\n     * @param totalRevokedAmount The total amount of tokens in wei that has been revoked so far\\n     * @param totalRefundAmount The total amount of tokens in wei that has been refunded so far\\n     * @param totalGrantAmount The total vesting grant token amount in wei that has been added so far\\n     */\\n    event UnusedTokensTransferred(\\n        address indexed sender,\\n        uint256 unusedAmount,\\n        uint256 balanceInWei,\\n        uint256 totalReleasedAmount,\\n        uint256 totalRevokedAmount,\\n        uint256 totalRefundAmount,\\n        uint256 totalGrantAmount\\n    );\\n\\n    /**\\n     * @notice Emitted when vesting grant has been added\\n     * @param account The address that has the vesting grant added\\n     * @param grantAmount The grant token amount in wei\\n     * @param isRevocable `true` if vesting grant is revocable\\n     *                    `false` if vesting grant is not revocable\\n     */\\n    event VestingGrantAdded(address indexed account, uint256 grantAmount, bool isRevocable);\\n\\n    /**\\n     * @notice Emitted when vesting grant has been revoked\\n     * @param account The address that has the vesting grant revoked\\n     * @param remainderAmount The amount of tokens in wei that has been revoked for `account`\\n     * @param grantAmount The grant token amount in wei\\n     * @param refundedAmount The amount of tokens in wei that has been refunded to `account`\\n     * @param releasedAmount The amount of tokens in wei that has been released to `account`\\n     */\\n    event VestingGrantRevoked(\\n        address indexed account,\\n        uint256 remainderAmount,\\n        uint256 grantAmount,\\n        uint256 refundedAmount,\\n        uint256 releasedAmount\\n    );\\n\\n    /**\\n     * @notice Add vesting grant for `account`\\n     * @dev Must be called by tenant contract admin role\\n     * @dev grant can only be added before schedule start\\n     * @dev grant cannot be added if previous grant has been revoked\\n     * @dev isRevocable will be ignored if grant already added but amount allowed to accumulate\\n     * @param account The address that will have the vesting grant added\\n     * @param grantAmount The token amount in wei to be granted\\n     * @param isRevocable `true` if vesting grant is revocable\\n     *                    `false` if vesting grant is not revocable\\n     */\\n    function addVestingGrant(address account, uint256 grantAmount, bool isRevocable) external;\\n\\n    /**\\n     * @notice Batch add vesting grants for specified `accounts`\\n     * @dev Must be called by tenant contract admin role\\n     * @param accounts Array specifying the addresses that will have the vesting grants added\\n     * @param grantAmounts Array specifying the amount of tokens in wei to be granted for each account\\n     * @param isRevocables Array soecuftubg whether each grant is revocable\\n     */\\n    function addVestingGrantsBatch(\\n        address[] memory accounts,\\n        uint256[] memory grantAmounts,\\n        bool[] memory isRevocables\\n    ) external;\\n\\n    /**\\n     * @notice Pause user functions\\n     * @dev Must be called by tenant contract admin role\\n     */\\n    function pauseContract() external;\\n\\n    /**\\n     * @notice Release vested tokens to sender\\n     * @dev Can only release if vesting schedule is defined\\n     * @dev Can only release when vesting schedule has started\\n     * @dev Cannot release if grant has been revoked\\n     */\\n    function release() external;\\n\\n    /**\\n     * @notice Revoke vesting grant for `account`\\n     * @dev Must be called by tenant contract admin role\\n     * @dev Only revocable grants can be revoked\\n     * @param account The address that will have the vesting grant revoked\\n     */\\n    function revokeVestingGrant(address account) external;\\n\\n    /**\\n     * @notice Batch revoke vesting grants for specified `accounts`\\n     * @dev Must be called by tenant contract admin role\\n     * @dev Only revocable grants can be revoked\\n     * @param accounts Array specifying the addresses that will have the vesting grants revoked\\n     */\\n    function revokeVestingGrantsBatch(address[] memory accounts) external;\\n\\n    /**\\n     * @notice Change admin wallet that will receive funds to a new wallet address\\n     * @dev Must be called by tenant governance role\\n     * @param newWallet The new admin wallet\\n     */\\n    function setAdminWallet(address newWallet) external;\\n\\n    /**\\n     * @notice Set vesting schedule\\n     * @dev Must be called by tenant contract admin role\\n     * @param startTimestamps Array specifying the start timestamps of each period\\n     * @param percentReleases Array specifying the percentage of grant amount to be released for each period\\n     * @param durationsDays Array specifying the duration in days of each period\\n     */\\n    function setVestingSchedule(\\n        uint256[] calldata startTimestamps,\\n        uint256[] calldata percentReleases,\\n        uint256[] calldata durationsDays\\n    ) external;\\n\\n    /**\\n     * @notice Transfer unused tokens to the admin wallet\\n     * @dev Must be called by tenant contract admin role\\n     */\\n    function transferUnusedTokens() external;\\n\\n    /**\\n     * @notice Unpause user functions\\n     * @dev Must be called by tenant contract admin role\\n     */\\n    function unpauseContract() external;\\n\\n    /**\\n     * @notice Get whether multiple grant amounts is allowed to accumulate for the same user\\n     * @return Returns `true` if multiple grant amounts is allowed to accumulate for the same user,\\n     *                 `false` if a user can only have one grant\\n     */\\n    function allowAccumulate() external view returns (bool);\\n\\n    /**\\n     * @notice Get maximum number of grants allowed per batch\\n     * @return Returns maximum number of grants allowed per batch\\n     */\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function BATCH_MAX_NUM() external view returns (uint256); // solhint-disable-line func-name-mixedcase\\n\\n    /**\\n     * @notice Get maximum number of schedule entries allowed\\n     * @return Returns maximum number of schedule entries allowed\\n     */\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function SCHEDULE_MAX_ENTRIES() external view returns (uint256); // solhint-disable-line func-name-mixedcase\\n\\n    /**\\n     * @notice Get effective grant amount for `account`\\n     * @param account The address to check\\n     * @return grantAmountWei The effective grant amount in wei for `account`\\n     */\\n    function effectiveGrantAmountFor(address account) external view returns (uint256 grantAmountWei);\\n\\n    /**\\n     * @notice Get refund window\\n     * @return startTimestamp The start timestamp of refund window\\n     * @return durationSeconds The duration of refund window in seconds\\n     * @return endTimestamp The end timestamp of refund window\\n     */\\n    function getRefundWindow()\\n        external\\n        view\\n        returns (uint256 startTimestamp, uint256 durationSeconds, uint256 endTimestamp);\\n\\n    /**\\n     * @notice Get vesting schedule\\n     * @param startTimestamps Array specifying the start timestamps of each period\\n     * @param percentReleases Array specifying the percentage of grant amount to be released for each period\\n     * @param durationsDays Array specifying the duration in days of each period\\n     * @param endTimestamps Array specifying the end timestamps of each period\\n     */\\n    function getVestingSchedule()\\n        external\\n        view\\n        returns (\\n            uint256[] memory startTimestamps,\\n            uint256[] memory percentReleases,\\n            uint256[] memory durationsDays,\\n            uint256[] memory endTimestamps\\n        );\\n\\n    /**\\n     * @notice Check whether `account` has been refunded\\n     * @param account The address to check\\n     * @return hasRefunded `true` if `account` has been refunded\\n     */\\n    function hasRefundedFor(address account) external view returns (bool hasRefunded);\\n\\n    /**\\n     * @notice Check whether `account` has claimed before\\n     * @param account The address to check\\n     * @return hasReleased `true` if `account` has claimed before\\n     */\\n    function hasReleasedFor(address account) external view returns (bool hasReleased);\\n\\n    /**\\n     * @notice Check whether refund window already started at `atTimestamp`\\n     * @param atTimestamp The timestamp to check\\n     * @return hasStarted `true` if refund window already started at `atTimestamp`\\n     */\\n    function hasRefundWindowStarted(uint256 atTimestamp) external view returns (bool hasStarted);\\n\\n    /**\\n     * @notice Check whether vesting schedule already started at `atTimestamp`\\n     * @param atTimestamp The timestamp to check\\n     * @return hasStarted `true` if vesting schedule already started at `atTimestamp`\\n     */\\n    function hasVestingScheduleStarted(uint256 atTimestamp) external view returns (bool hasStarted);\\n\\n    /**\\n     * @notice Check whether refund window has been defined\\n     * @return isDefined `true` if refund window has been defined\\n     */\\n    function isRefundWindowDefined() external view returns (bool isDefined);\\n\\n    /**\\n     * @notice Check whether refund window is open now\\n     * @return isOpen `true` if refund window is open now\\n     */\\n    function isRefundWindowOpenNow() external view returns (bool isOpen);\\n\\n    /**\\n     * @notice Check whether vesting schedule has been defined\\n     * @return isDefined `true` if vesting schedule has been defined\\n     */\\n    function isVestingScheduleDefined() external view returns (bool isDefined);\\n\\n    /**\\n     * @notice Get current number of schedule entries\\n     * @return Returns current number of schedule entries\\n     */\\n    function numVestingScheduleEntries() external view returns (uint256);\\n\\n    /**\\n     * @notice Get refunded token amount for `account`\\n     * @param account The address to check\\n     * @return refundedAmount The token amount in wei that has been refunded to `account`\\n     */\\n    function refundedAmountFor(address account) external view returns (uint256 refundedAmount);\\n\\n    /**\\n     * @notice Get releasable token amount for `account`\\n     * @param account The address to check\\n     * @return releasableAmount The token amount in wei that is releasable for `account`\\n     */\\n    function releasableAmountFor(address account) external view returns (uint256 releasableAmount);\\n\\n    /**\\n     * @notice Get released token amount for `account`\\n     * @param account The address to check\\n     * @return releasedAmount The token amount in wei that has been released to `account`\\n     */\\n    function releasedAmountFor(address account) external view returns (uint256 releasedAmount);\\n\\n    /**\\n     * @notice Check whether vesting grant for `account` has been revoked\\n     * @param account The address to check\\n     * @return isRevoked `true` if vesting grant for `account` has been revoked\\n     */\\n    function revoked(address account) external view returns (bool isRevoked);\\n\\n    /**\\n     * @notice Get address of vesting token\\n     * @return Returns the address of vesting token\\n     */\\n    function tokenAddress() external view returns (address);\\n\\n    /**\\n     * @notice Get the number of decimals for vesting token\\n     * @return Returns the number of decimals for vesting token\\n     */\\n    function tokenDecimals() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total token amount of vesting grants\\n     * @return Returns the total token amount in wei of vesting grants\\n     */\\n    function totalGrantAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total token amount that has been refunded\\n     * @return Returns the total token amount in wei that has been refunded\\n     */\\n    function totalRefundAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total token amount that has been released\\n     * @return Returns the total token amount in wei that has been released\\n     */\\n    function totalReleasedAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total token amount that has been revoked\\n     * @return Returns the total token amount in wei that has been revoked\\n     */\\n    function totalRevokedAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Get unvested token amount for `account`\\n     * @param account The address to check\\n     * @return unvestedAmount The token amount in wei that has not vested yet for `account`\\n     */\\n    function unvestedAmountFor(address account) external view returns (uint256 unvestedAmount);\\n\\n    /**\\n     * @notice Get vested token amount for `account`\\n     * @param account The address to check\\n     * @return vestedAmount The token amount in wei that has vested for `account`\\n     */\\n    function vestedAmountFor(address account) external view returns (uint256 vestedAmount);\\n\\n    /**\\n     * @notice Get vesting grant for`account`\\n     * @param account The address to check\\n     * @return grantAmount The vesting grant token amount in wei for `account`\\n     * @return isRevocable `true` if vesting grant for `account` can be revoked\\n     * @return isRevoked `true` if vesting grant for `account` has been revoked\\n     * @return isActive `true` if vesting grant for `account` is active\\n     */\\n    function vestingGrantFor(\\n        address account\\n    ) external view returns (uint256 grantAmount, bool isRevocable, bool isRevoked, bool isActive);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVestingCustomRefundProject.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\nimport {IVestingCustomRefund} from \\\"./IVestingCustomRefund.sol\\\";\\n\\n/**\\n * @title IVestingCustomRefundProject\\n * @author Tim Loh\\n * @notice Interface for custom vesting with refund for project\\n */\\ninterface IVestingCustomRefundProject is IVestingCustomRefund {\\n    /**\\n     * @notice Emitted when tokens have been refunded to `account`\\n     * @param account The address that received the refund\\n     * @param refundAmount The amount to be refunded to `account`\\n     */\\n    event TokensRefunded(address indexed account, uint256 refundAmount);\\n\\n    /**\\n     * @notice Cancel refund window\\n     * @dev Must be called by contract usage role\\n     * @dev Can only cancel when refund window has not started yet\\n     */\\n    function cancelRefundWindow() external returns (bool isCancelled);\\n\\n    /**\\n     * @notice Extend refund window\\n     * @dev Must be called by contract usage role\\n     * @dev Can only extend when refund window is open\\n     * @param newDurationSeconds New refund window duration in seconds\\n     */\\n    function extendRefundWindow(uint256 newDurationSeconds) external returns (bool isExtended);\\n\\n    /**\\n     * @notice Refund specified amount of tokens to `account`\\n     * @dev Can only refund if vesting schedule is defined\\n     * @dev Can only refund when refund window is open\\n     * @dev Cannot refund if grant has been revoked\\n     * @param account The address to receive the refunded amount of tokens\\n     * @param amount The token amount in wei to be refunded to `account`\\n     */\\n    function refund(address account, uint256 amount) external returns (bool isRefunded);\\n\\n    /**\\n     * @notice Set refund window\\n     * @dev Must be called by contract usage role\\n     * @dev Can only have one refund\\n     * @param startTimestamp Timestamp when refund window will start\\n     * @param durationSeconds Refund window duration in seconds\\n     */\\n    function setRefundWindow(uint256 startTimestamp, uint256 durationSeconds) external returns (bool isSet);\\n\\n    /**\\n     * @notice Get contract usage role definition\\n     * @return Returns contract usage role definition\\n     */\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function CONTRACT_USAGE_ROLE() external view returns (bytes32); // solhint-disable-line func-name-mixedcase\\n\\n    /**\\n     * @notice Get interface ID for IVestingCustomRefundProject interface\\n     * @return Returns interface ID for IVestingCustomRefundProject interface\\n     */\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function INTERFACE_ID() external view returns (bytes4); // solhint-disable-line func-name-mixedcase\\n\\n    /**\\n     * @notice Get token amount that is refundable for `account`\\n     * @param account The address to check\\n     * @return refundableAmount The token amount in wei that is refundedable for `account`\\n     */\\n    function refundableAmountFor(address account) external view returns (uint256 refundableAmount);\\n\\n    /**\\n     * @notice Checks whether this contract implements the interface defined by `interfaceId`\\n     * @dev ERC165\\n     * @return `true` if this contract implements the interface defined by `interfaceId`\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UnitConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\n/**\\n * @title UnitConverter\\n * @author Tim Loh\\n * @notice Converts given amount between Wei and number of decimal places\\n */\\nlibrary UnitConverter {\\n    uint256 public constant TOKEN_MAX_DECIMALS = 18;\\n\\n    /**\\n     * @notice Scale down given amount in Wei to given number of decimal places\\n     * @param weiAmount Amount in Wei\\n     * @param decimals Number of decimal places\\n     * @return decimalsAmount Amount in Wei scaled down to given number of decimal places\\n     */\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code\\n    // slither-disable-next-line dead-code\\n    function scaleWeiToDecimals(uint256 weiAmount, uint256 decimals) internal pure returns (uint256 decimalsAmount) {\\n        require(decimals <= TOKEN_MAX_DECIMALS, \\\"UnitConverter: decimals\\\");\\n\\n        if (decimals < TOKEN_MAX_DECIMALS && weiAmount > 0) {\\n            uint256 decimalsDiff = TOKEN_MAX_DECIMALS - decimals;\\n            decimalsAmount = weiAmount / 10 ** decimalsDiff;\\n        } else {\\n            decimalsAmount = weiAmount;\\n        }\\n    }\\n\\n    /**\\n     * @notice Scale up given amount in given number of decimal places to Wei\\n     * @param decimalsAmount Amount in number of decimal places\\n     * @param decimals Number of decimal places\\n     * @return weiAmount Amount in given number of decimal places scaled up to Wei\\n     */\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code\\n    // slither-disable-next-line dead-code\\n    function scaleDecimalsToWei(uint256 decimalsAmount, uint256 decimals) internal pure returns (uint256 weiAmount) {\\n        require(decimals <= TOKEN_MAX_DECIMALS, \\\"UnitConverter: decimals\\\");\\n\\n        if (decimals < TOKEN_MAX_DECIMALS && decimalsAmount > 0) {\\n            uint256 decimalsDiff = TOKEN_MAX_DECIMALS - decimals;\\n            weiAmount = decimalsAmount * 10 ** decimalsDiff;\\n        } else {\\n            weiAmount = decimalsAmount;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VestingCustomRefund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {UnitConverter} from \\\"./libraries/UnitConverter.sol\\\";\\nimport {AdminPrivileges} from \\\"./AdminPrivileges.sol\\\";\\nimport {AdminWallet} from \\\"./AdminWallet.sol\\\";\\nimport {IFactoryImplementation} from \\\"./interfaces/IFactoryImplementation.sol\\\";\\nimport {IVestingCustomRefund} from \\\"./interfaces/IVestingCustomRefund.sol\\\";\\n\\n/**\\n * @title VestingCustomRefund\\n * @author Tim Loh\\n * @notice Provides an implementation of custom vesting with refund interface\\n */\\ncontract VestingCustomRefund is Initializable, Pausable, AdminPrivileges, AdminWallet, IVestingCustomRefund {\\n    using SafeERC20 for IERC20;\\n    using UnitConverter for uint256;\\n\\n    struct CustomVestingScheduleEntry {\\n        uint256 percentRelease; // Percentage of grant amount to be released for period\\n        uint256 startTimestamp; // Start timestamp of period\\n        uint256 durationDays; // Duration in days for period\\n        uint256 endTimestamp; // End timestamp of period\\n    }\\n\\n    struct RefundWindow {\\n        uint256 startTimestamp; // Start timestamp of refund window\\n        uint256 durationSeconds; // Duration of refund window in seconds\\n        uint256 endTimestamp; // End timestamp of refund window\\n    }\\n\\n    struct VestingGrant {\\n        uint256 grantAmount; // Total number of tokens granted in wei\\n        // `true` if vesting grant can be revoked (e.g. gift), // `false` if cannot be revoked (e.g. purchased)\\n        bool isRevocable;\\n        bool isRevoked; // `true` if vesting grant has been revoked\\n        bool isActive; // `true` if vesting grant is active\\n    }\\n\\n    uint256 public constant BATCH_MAX_NUM = 100;\\n    uint256 public constant SCHEDULE_MAX_ENTRIES = 100;\\n\\n    uint256 public constant PERCENT_100_WEI = 100 ether;\\n    uint256 public constant SECONDS_IN_DAY = 86400;\\n    uint256 public constant TOKEN_MAX_DECIMALS = 18;\\n\\n    bool public allowAccumulate;\\n    uint256 public numVestingScheduleEntries;\\n    address public tokenAddress;\\n    uint256 public tokenDecimals;\\n    uint256 public totalGrantAmount;\\n    uint256 public totalRefundAmount;\\n    uint256 public totalReleasedAmount;\\n    uint256 public totalRevokedAmount;\\n\\n    RefundWindow private _refundWindow;\\n\\n    mapping(address => uint256) private _refunded;\\n    mapping(address => uint256) private _released;\\n    mapping(address => VestingGrant) private _vestingGrants;\\n    mapping(uint256 => CustomVestingScheduleEntry) private _vestingSchedule;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @param tokenAddress_ The address of vesting token\\n     * @param tokenDecimals_ The number of decimals for vesting token\\n     * @param allowAccumulate_ `true` if multiple grant amounts is allowed to accumulate for the same user,\\n     *                         `false` if a user can only have one grant\\n     * @param backofficeAdminAddress The address that will be assigned the backoffice role admin role and backoffice\\n     *                               contract admin role\\n     * @param tenantAdminAddress The address that will be assigned the tenant role admin role, tenant governance role\\n     *                           and tenant contract admin role\\n     */\\n    function initialize(\\n        address tokenAddress_,\\n        uint256 tokenDecimals_,\\n        bool allowAccumulate_,\\n        address backofficeAdminAddress,\\n        address tenantAdminAddress\\n    ) public virtual initializer {\\n        __VestingCustomRefund_init(\\n            tokenAddress_,\\n            tokenDecimals_,\\n            allowAccumulate_,\\n            backofficeAdminAddress,\\n            tenantAdminAddress\\n        );\\n    }\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code\\n    // slither-disable-start dead-code\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function __VestingCustomRefund_init(\\n        // solhint-disable-previous-line func-name-mixedcase\\n        address tokenAddress_,\\n        uint256 tokenDecimals_,\\n        bool allowAccumulate_,\\n        address backofficeAdminAddress,\\n        address tenantAdminAddress\\n    ) internal onlyInitializing {\\n        __VestingCustomRefund_init_unchained(\\n            tokenAddress_,\\n            tokenDecimals_,\\n            allowAccumulate_,\\n            backofficeAdminAddress,\\n            tenantAdminAddress\\n        );\\n    }\\n\\n    // slither-disable-end dead-code\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function __VestingCustomRefund_init_unchained(\\n        // solhint-disable-previous-line func-name-mixedcase\\n        address tokenAddress_,\\n        uint256 tokenDecimals_,\\n        bool allowAccumulate_,\\n        address backofficeAdminAddress,\\n        address tenantAdminAddress\\n    ) internal onlyInitializing {\\n        require(tokenAddress_ != address(0), \\\"VCR: token address\\\");\\n        require(tokenDecimals_ <= TOKEN_MAX_DECIMALS, \\\"VCR: token decimals\\\");\\n        require(backofficeAdminAddress != address(0), \\\"VCR: backoffice admin\\\");\\n        require(tenantAdminAddress != address(0), \\\"VCR: tenant admin\\\");\\n\\n        _setRoleAdmin(BACKOFFICE_ROLE_ADMIN_ROLE, BACKOFFICE_ROLE_ADMIN_ROLE);\\n        _setRoleAdmin(BACKOFFICE_CONTRACT_ADMIN_ROLE, BACKOFFICE_ROLE_ADMIN_ROLE);\\n        _setRoleAdmin(TENANT_ROLE_ADMIN_ROLE, TENANT_ROLE_ADMIN_ROLE);\\n        _setRoleAdmin(TENANT_GOVERNANCE_ROLE, TENANT_ROLE_ADMIN_ROLE);\\n        _setRoleAdmin(TENANT_CONTRACT_ADMIN_ROLE, TENANT_ROLE_ADMIN_ROLE);\\n\\n        _grantRole(BACKOFFICE_ROLE_ADMIN_ROLE, backofficeAdminAddress);\\n        _grantRole(BACKOFFICE_CONTRACT_ADMIN_ROLE, backofficeAdminAddress);\\n\\n        _grantRole(TENANT_ROLE_ADMIN_ROLE, tenantAdminAddress);\\n        _grantRole(TENANT_GOVERNANCE_ROLE, tenantAdminAddress);\\n        _grantRole(TENANT_CONTRACT_ADMIN_ROLE, tenantAdminAddress);\\n\\n        _setAdminWallet(tenantAdminAddress);\\n\\n        tokenAddress = tokenAddress_;\\n        tokenDecimals = tokenDecimals_;\\n\\n        allowAccumulate = allowAccumulate_;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function addVestingGrant(\\n        // solhint-disable-previous-line ordering\\n        address account,\\n        uint256 grantAmount,\\n        bool isRevocable\\n    ) external virtual override onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        _addVestingGrant(account, grantAmount, isRevocable);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function addVestingGrantsBatch(\\n        address[] memory accounts,\\n        uint256[] memory grantAmounts,\\n        bool[] memory isRevocables\\n    ) external virtual override onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        require(accounts.length > 0, \\\"VCR: empty\\\");\\n        require(accounts.length <= BATCH_MAX_NUM, \\\"VCR: exceed max\\\");\\n        require(grantAmounts.length == accounts.length, \\\"VCR: grant amounts length\\\");\\n        require(isRevocables.length == accounts.length, \\\"VCR: is revocables length\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addVestingGrant(accounts[i], grantAmounts[i], isRevocables[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function pauseContract() external virtual override onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function release() external virtual override whenNotPaused {\\n        uint256 releasableAmount = releasableAmountFor(msg.sender);\\n\\n        _release(msg.sender, releasableAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function revokeVestingGrant(address account) external virtual override onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        _revokeVestingGrant(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function revokeVestingGrantsBatch(\\n        address[] memory accounts\\n    ) external virtual override onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        require(accounts.length > 0, \\\"VCR: empty\\\");\\n        require(accounts.length <= BATCH_MAX_NUM, \\\"VCR: exceed max\\\");\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _revokeVestingGrant(accounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function setAdminWallet(address newWallet) external virtual override onlyRole(TENANT_GOVERNANCE_ROLE) {\\n        _setAdminWallet(newWallet);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function setVestingSchedule(\\n        uint256[] calldata startTimestamps,\\n        uint256[] calldata percentReleases,\\n        uint256[] calldata durationsDays\\n    ) external virtual override onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        require(startTimestamps.length > 0, \\\"VCR: empty\\\");\\n        require(startTimestamps.length <= SCHEDULE_MAX_ENTRIES, \\\"VCR: exceed max\\\");\\n        require(percentReleases.length == startTimestamps.length, \\\"VCR: percent length different\\\");\\n        require(durationsDays.length == startTimestamps.length, \\\"VCR: duration length different\\\");\\n        require(!hasVestingScheduleStarted(block.timestamp), \\\"VCR: already started\\\");\\n\\n        uint256 minTimestamp = block.timestamp;\\n        uint256 totalPercentRelease = 0;\\n\\n        for (uint256 i = 0; i < startTimestamps.length; i++) {\\n            require(percentReleases[i] > 0, \\\"VCR: zero percent\\\");\\n            require(startTimestamps[i] >= minTimestamp, \\\"VCR: invalid start timestamp\\\");\\n\\n            totalPercentRelease = totalPercentRelease + percentReleases[i];\\n            require(totalPercentRelease <= PERCENT_100_WEI, \\\"VCR: exceed 100%\\\");\\n\\n            if (durationsDays[i] > 0) {\\n                minTimestamp = startTimestamps[i] + durationsDays[i] * SECONDS_IN_DAY;\\n            } else {\\n                minTimestamp = startTimestamps[i];\\n            }\\n\\n            _vestingSchedule[i] = CustomVestingScheduleEntry({\\n                percentRelease: percentReleases[i],\\n                startTimestamp: startTimestamps[i],\\n                durationDays: durationsDays[i],\\n                endTimestamp: minTimestamp\\n            });\\n        }\\n\\n        require(totalPercentRelease == PERCENT_100_WEI, \\\"VCR: not 100%\\\");\\n\\n        numVestingScheduleEntries = startTimestamps.length;\\n\\n        emit ScheduleSet(msg.sender, startTimestamps, percentReleases, durationsDays);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function transferUnusedTokens() external virtual override onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        uint256 balanceInDecimals = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 balanceInWei = balanceInDecimals.scaleDecimalsToWei(tokenDecimals);\\n\\n        uint256 unusedAmount = balanceInWei +\\n            totalReleasedAmount +\\n            totalRevokedAmount +\\n            totalRefundAmount -\\n            totalGrantAmount;\\n        require(unusedAmount > 0, \\\"VCR: nothing to transfer\\\");\\n\\n        uint256 transferAmount = unusedAmount.scaleWeiToDecimals(tokenDecimals);\\n\\n        emit UnusedTokensTransferred(\\n            msg.sender,\\n            unusedAmount,\\n            balanceInWei,\\n            totalReleasedAmount,\\n            totalRevokedAmount,\\n            totalRefundAmount,\\n            totalGrantAmount\\n        );\\n\\n        IERC20(tokenAddress).safeTransfer(adminWallet(), transferAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function unpauseContract() external virtual override onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @inheritdoc IFactoryImplementation\\n     */\\n    function factoryImplementationType() external view virtual override returns (uint256 implementationType) {\\n        implementationType = 0x447e1a635045d08b78677dfba2a78564b566f402520e983a9ae65e8115b13d5b;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function getVestingSchedule()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (\\n            uint256[] memory startTimestamps,\\n            uint256[] memory percentReleases,\\n            uint256[] memory durationsDays,\\n            uint256[] memory endTimestamps\\n        )\\n    {\\n        startTimestamps = new uint256[](numVestingScheduleEntries);\\n        percentReleases = new uint256[](numVestingScheduleEntries);\\n        durationsDays = new uint256[](numVestingScheduleEntries);\\n        endTimestamps = new uint256[](numVestingScheduleEntries);\\n\\n        if (numVestingScheduleEntries > 0) {\\n            for (uint256 i = 0; i < numVestingScheduleEntries; i++) {\\n                startTimestamps[i] = _vestingSchedule[i].startTimestamp;\\n                percentReleases[i] = _vestingSchedule[i].percentRelease;\\n                durationsDays[i] = _vestingSchedule[i].durationDays;\\n                endTimestamps[i] = _vestingSchedule[i].endTimestamp;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function unvestedAmountFor(address account) external view virtual override returns (uint256 unvestedAmount) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n\\n        if (revoked(account)) {\\n            unvestedAmount = 0;\\n            return unvestedAmount;\\n        }\\n\\n        uint256 grantAmountWei = effectiveGrantAmountFor(account);\\n        uint256 vestedAmountWei = vestedAmountFor(account);\\n\\n        unvestedAmount = grantAmountWei - vestedAmountWei;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function effectiveGrantAmountFor(address account) public view virtual override returns (uint256 grantAmountWei) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        require(vestingGrant.isActive, \\\"VCR: inactive\\\");\\n\\n        uint256 refundedAmount = refundedAmountFor(account);\\n\\n        grantAmountWei = vestingGrant.grantAmount - refundedAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function getRefundWindow()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 startTimestamp, uint256 durationSeconds, uint256 endTimestamp)\\n    {\\n        startTimestamp = _refundWindow.startTimestamp;\\n        durationSeconds = _refundWindow.durationSeconds;\\n        endTimestamp = _refundWindow.endTimestamp;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function hasRefundedFor(address account) public view virtual override returns (bool hasRefunded) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n        require(_vestingGrants[account].isActive, \\\"VCR: inactive\\\");\\n\\n        hasRefunded = refundedAmountFor(account) > 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function hasReleasedFor(address account) public view virtual override returns (bool hasReleased) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n        require(_vestingGrants[account].isActive, \\\"VCR: inactive\\\");\\n\\n        hasReleased = releasedAmountFor(account) > 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function hasRefundWindowStarted(uint256 atTimestamp) public view virtual override returns (bool hasStarted) {\\n        require(atTimestamp > 0, \\\"VCR: timestamp\\\");\\n\\n        hasStarted = _refundWindow.startTimestamp > 0 && atTimestamp >= _refundWindow.startTimestamp;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function hasVestingScheduleStarted(uint256 atTimestamp) public view virtual override returns (bool hasStarted) {\\n        require(atTimestamp > 0, \\\"VCR: timestamp\\\");\\n\\n        hasStarted = numVestingScheduleEntries > 0 && atTimestamp >= _vestingSchedule[0].startTimestamp;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function isRefundWindowDefined() public view virtual override returns (bool isDefined) {\\n        isDefined = _refundWindow.startTimestamp > 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function isRefundWindowOpenNow() public view virtual override returns (bool isOpen) {\\n        isOpen =\\n            _refundWindow.startTimestamp > 0 &&\\n            _refundWindow.endTimestamp > 0 &&\\n            block.timestamp >= _refundWindow.startTimestamp &&\\n            block.timestamp < _refundWindow.endTimestamp;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function isVestingScheduleDefined() public view virtual override returns (bool isDefined) {\\n        isDefined = numVestingScheduleEntries > 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function refundedAmountFor(address account) public view virtual override returns (uint256 refundedAmount) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n\\n        refundedAmount = _refunded[account];\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function releasableAmountFor(address account) public view virtual override returns (uint256 releasableAmount) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n        require(hasVestingScheduleStarted(block.timestamp), \\\"VCR: not started\\\");\\n        require(!revoked(account), \\\"VCR: revoked\\\");\\n\\n        releasableAmount = vestedAmountFor(account) - releasedAmountFor(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function releasedAmountFor(address account) public view virtual override returns (uint256 releasedAmount) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n\\n        releasedAmount = _released[account];\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function revoked(address account) public view virtual override returns (bool isRevoked) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        require(vestingGrant.isActive, \\\"VCR: inactive\\\");\\n\\n        isRevoked = vestingGrant.isRevoked;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function vestedAmountFor(address account) public view virtual override returns (uint256 vestedAmount) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n\\n        if (numVestingScheduleEntries == 0 || _vestingSchedule[0].startTimestamp == 0) {\\n            return 0;\\n        }\\n\\n        if (block.timestamp < _vestingSchedule[0].startTimestamp) {\\n            return 0;\\n        }\\n\\n        if (revoked(account)) {\\n            return releasedAmountFor(account);\\n        }\\n\\n        uint256 grantAmountWei = effectiveGrantAmountFor(account);\\n\\n        if (block.timestamp >= _vestingSchedule[numVestingScheduleEntries - 1].endTimestamp) {\\n            return grantAmountWei;\\n        }\\n\\n        uint256 totalPercentRelease = _getTotalPercentRelease(block.timestamp);\\n\\n        // https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply\\n        // slither-disable-next-line divide-before-multiply\\n        uint256 totalReleaseAmount = (grantAmountWei * totalPercentRelease) / PERCENT_100_WEI;\\n        vestedAmount = totalReleaseAmount.scaleWeiToDecimals(tokenDecimals).scaleDecimalsToWei(tokenDecimals);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function vestingGrantFor(\\n        address account\\n    ) public view virtual override returns (uint256 grantAmount, bool isRevocable, bool isRevoked, bool isActive) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        grantAmount = vestingGrant.grantAmount;\\n        isRevocable = vestingGrant.isRevocable;\\n        isRevoked = vestingGrant.isRevoked;\\n        isActive = vestingGrant.isActive;\\n    }\\n\\n    /**\\n     * @notice Add vesting grant for `account`\\n     * @dev grant can only be added before schedule start\\n     * @dev grant cannot be added if previous grant has been revoked\\n     * @dev isRevocable will be ignored if grant already added but amount allowed to accumulate\\n     * @param account The address that will have the vesting grant added\\n     * @param grantAmount The grant token amount in wei\\n     * @param isRevocable `true` if vesting grant is revocable\\n     *                    `false` if vesting grant is not revocable\\n     */\\n    function _addVestingGrant(address account, uint256 grantAmount, bool isRevocable) internal virtual {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n        require(grantAmount > 0, \\\"VCR: zero grant amount\\\");\\n        require(!hasVestingScheduleStarted(block.timestamp), \\\"VCR: already started\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        require(allowAccumulate || !vestingGrant.isActive, \\\"VCR: already added\\\");\\n        require(!vestingGrant.isActive || !revoked(account), \\\"VCR: already revoked\\\");\\n\\n        uint256 truncatedGrantAmount = grantAmount.scaleWeiToDecimals(tokenDecimals).scaleDecimalsToWei(tokenDecimals);\\n        require(truncatedGrantAmount > 0, \\\"VCR: zero decimals grant amount\\\");\\n\\n        // https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop\\n        // slither-disable-next-line costly-loop\\n        totalGrantAmount += truncatedGrantAmount;\\n        // https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop\\n        // slither-disable-next-line calls-loop\\n        uint256 balanceInDecimals = IERC20(tokenAddress).balanceOf(address(this));\\n        require(balanceInDecimals > 0, \\\"VCR: zero balance\\\");\\n        uint256 balanceInWei = balanceInDecimals.scaleDecimalsToWei(tokenDecimals);\\n\\n        uint256 remainderAmount = balanceInWei +\\n            totalReleasedAmount +\\n            totalRevokedAmount +\\n            totalRefundAmount;\\n        require(remainderAmount >= totalGrantAmount, \\\"VCR: total grant > remainder\\\");\\n\\n        if (vestingGrant.isActive) {\\n            _vestingGrants[account].grantAmount = vestingGrant.grantAmount + truncatedGrantAmount;\\n            // _vestingGrants[account].isRevocable = isRevocable;\\n        } else {\\n            _vestingGrants[account] = VestingGrant({\\n                grantAmount: truncatedGrantAmount,\\n                isRevocable: isRevocable,\\n                isRevoked: false,\\n                isActive: true\\n            });\\n        }\\n\\n        emit VestingGrantAdded(account, truncatedGrantAmount, isRevocable);\\n    }\\n\\n    /**\\n     * @notice Cancel refund window\\n     * @dev Can only cancel when refund window has not started yet\\n     */\\n    function _cancelRefundWindow() internal virtual {\\n        require(isRefundWindowDefined(), \\\"VCR: no refund\\\");\\n        require(!hasRefundWindowStarted(block.timestamp), \\\"VCR: refund started\\\");\\n\\n        uint256 oldStartTimestamp = _refundWindow.startTimestamp;\\n        uint256 oldDurationSeconds = _refundWindow.durationSeconds;\\n        uint256 oldEndTimestamp = _refundWindow.endTimestamp;\\n\\n        _refundWindow.startTimestamp = 0;\\n        _refundWindow.durationSeconds = 0;\\n        _refundWindow.endTimestamp = 0;\\n\\n        emit RefundWindowCancelled(msg.sender, oldStartTimestamp, oldDurationSeconds, oldEndTimestamp);\\n    }\\n\\n    /**\\n     * @notice Extend refund window\\n     * @dev Can only extend when refund window is open\\n     * @param newDurationSeconds New refund window duration in seconds\\n     */\\n    function _extendRefundWindow(uint256 newDurationSeconds) internal virtual {\\n        require(newDurationSeconds > 0, \\\"VCR: new duration\\\");\\n        require(isRefundWindowOpenNow(), \\\"VCR: not open\\\");\\n\\n        uint256 oldEndTimestamp = _refundWindow.endTimestamp;\\n        uint256 newEndTimestamp = _refundWindow.startTimestamp + newDurationSeconds;\\n        require(newEndTimestamp > oldEndTimestamp, \\\"VCR: too short\\\");\\n\\n        uint256 oldDurationSeconds = _refundWindow.durationSeconds;\\n\\n        _refundWindow.durationSeconds = newDurationSeconds;\\n        _refundWindow.endTimestamp = newEndTimestamp;\\n\\n        emit RefundWindowExtended(msg.sender, newDurationSeconds, newEndTimestamp, oldDurationSeconds, oldEndTimestamp);\\n    }\\n\\n    /**\\n     * @notice Refund specified amount of tokens to `account`\\n     * @dev Can only refund when refund window is open\\n     * @dev Cannot refund if have previously refunded\\n     * @dev Cannot refund if have previously claimed\\n     * @param account The address to receive the refunded amount of tokens\\n     * @param amount The token amount in wei to be refunded to `account`\\n     */\\n    function _refund(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n        require(amount > 0, \\\"VCR: zero amount\\\");\\n        require(isRefundWindowOpenNow(), \\\"VCR: not open\\\");\\n\\n        _refunded[account] += amount;\\n        totalRefundAmount += amount;\\n    }\\n\\n    /**\\n     * @notice Release specified amount of tokens to `account`\\n     * @param account The address to receive the specified amount of tokens\\n     * @param amount The token amount in wei to be transferred to `account`\\n     */\\n    function _release(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n        require(amount > 0, \\\"VCR: zero amount\\\");\\n\\n        uint256 transferDecimalsAmount = amount.scaleWeiToDecimals(tokenDecimals);\\n        uint256 transferWeiAmount = transferDecimalsAmount.scaleDecimalsToWei(tokenDecimals);\\n\\n        _released[account] += transferWeiAmount;\\n        totalReleasedAmount += transferWeiAmount;\\n\\n        emit TokensReleased(account, transferWeiAmount);\\n\\n        IERC20(tokenAddress).safeTransfer(account, transferDecimalsAmount);\\n    }\\n\\n    /**\\n     * @notice Revoke vesting grant for `account`\\n     * @dev Only revocable grants can be revoked\\n     * @param account The address that will have the vesting grant revoked\\n     */\\n    function _revokeVestingGrant(address account) internal virtual {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        require(vestingGrant.isActive, \\\"VCR: inactive\\\");\\n        require(vestingGrant.isRevocable, \\\"VCR: not revocable\\\");\\n        require(!revoked(account), \\\"VCR: already revoked\\\");\\n\\n        uint256 refundedAmount = refundedAmountFor(account);\\n        uint256 releasedAmount = releasedAmountFor(account);\\n        uint256 remainderAmount = vestingGrant.grantAmount - refundedAmount - releasedAmount;\\n        // https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop\\n        // slither-disable-next-line costly-loop\\n        totalRevokedAmount += remainderAmount;\\n        _vestingGrants[account].isRevoked = true;\\n\\n        emit VestingGrantRevoked(account, remainderAmount, vestingGrant.grantAmount, refundedAmount, releasedAmount);\\n    }\\n\\n    /**\\n     * @notice Set refund window\\n     * @dev Can only have one refund\\n     * @param startTimestamp Timestamp when refund window will start\\n     * @param durationSeconds Refund window duration in seconds\\n     */\\n    function _setRefundWindow(uint256 startTimestamp, uint256 durationSeconds) internal virtual {\\n        require(startTimestamp > 0, \\\"VCR: start timestamp\\\");\\n        require(durationSeconds > 0, \\\"VCR: duration\\\");\\n        require(!hasRefundWindowStarted(block.timestamp), \\\"VCR: refund started\\\");\\n\\n        uint256 endTimestamp = startTimestamp + durationSeconds;\\n\\n        _refundWindow.startTimestamp = startTimestamp;\\n        _refundWindow.durationSeconds = durationSeconds;\\n        _refundWindow.endTimestamp = endTimestamp;\\n\\n        emit RefundWindowSet(msg.sender, startTimestamp, durationSeconds, endTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get total percentage to be released at specified timestamp\\n     * @param atTimestamp Specified timestamp\\n     * @return totalPercentRelease The total percentage to be released at specified timestamp\\n     */\\n    function _getTotalPercentRelease(uint256 atTimestamp) internal view virtual returns (uint256 totalPercentRelease) {\\n        totalPercentRelease = 0;\\n\\n        for (uint256 i = 0; i < numVestingScheduleEntries; i++) {\\n            if (atTimestamp < _vestingSchedule[i].startTimestamp) {\\n                break;\\n            }\\n\\n            if (atTimestamp >= _vestingSchedule[i].endTimestamp) {\\n                totalPercentRelease += _vestingSchedule[i].percentRelease;\\n            } else {\\n                uint256 durationSeconds = _vestingSchedule[i].durationDays * SECONDS_IN_DAY;\\n                uint256 percentRelease = (atTimestamp - _vestingSchedule[i].startTimestamp) *\\n                    _vestingSchedule[i].percentRelease;\\n\\n                // https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply\\n                // slither-disable-next-line divide-before-multiply\\n                totalPercentRelease = (totalPercentRelease * durationSeconds + percentRelease) / durationSeconds;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get token amount that is refundable for `account`\\n     * @param account The address to check\\n     * @return refundableAmount The token amount in wei that is refundedable for `account`\\n     */\\n    function _refundableAmountFor(address account) internal view virtual returns (uint256 refundableAmount) {\\n        require(account != address(0), \\\"VCR: zero account\\\");\\n        require(isVestingScheduleDefined(), \\\"VCR: undefined schedule\\\");\\n        require(!revoked(account), \\\"VCR: revoked\\\");\\n\\n        VestingGrant memory vestingGrant = _vestingGrants[account];\\n        // require(vestingGrant.isActive, \\\"VCR: inactive\\\"); // already checked in revoked()\\n\\n        refundableAmount = hasRefundedFor(account) || releasedAmountFor(account) > 0 ? 0 : vestingGrant.grantAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VestingCustomRefundProject.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// Copyright 2023 Enjinstarter\\npragma solidity 0.8.19;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {UnitConverter} from \\\"./libraries/UnitConverter.sol\\\";\\nimport {AccessControl} from \\\"./AdminPrivileges.sol\\\";\\nimport {VestingCustomRefund} from \\\"./VestingCustomRefund.sol\\\";\\nimport {IFactoryImplementation} from \\\"./interfaces/IFactoryImplementation.sol\\\";\\nimport {IVestingCustomRefund} from \\\"./interfaces/IVestingCustomRefund.sol\\\";\\nimport {IVestingCustomRefundProject} from \\\"./interfaces/IVestingCustomRefundProject.sol\\\";\\n\\n/**\\n * @title VestingCustomRefundProject\\n * @author Tim Loh\\n * @notice Provides an implementation of custom vesting with refund for project interface\\n */\\ncontract VestingCustomRefundProject is VestingCustomRefund, IVestingCustomRefundProject {\\n    using SafeERC20 for IERC20;\\n    using UnitConverter for uint256;\\n\\n    bytes32 public constant CONTRACT_USAGE_ROLE = keccak256(\\\"CONTRACT_USAGE_ROLE\\\");\\n\\n    bytes4 public constant INTERFACE_ID = type(IVestingCustomRefund).interfaceId;\\n\\n    address public projectWallet;\\n\\n    /**\\n     * @param tokenAddress_ The address of vesting token\\n     * @param tokenDecimals_ The number of decimals for vesting token\\n     * @param allowAccumulate_ `true` if multiple grant amounts is allowed to accumulate for the same user,\\n     *                         `false` if a user can only have one grant\\n     * @param backofficeAdminAddress The address that will be assigned the backoffice role admin role and backoffice\\n     *                               contract admin role\\n     * @param tenantAdminAddress The address that will be assigned the tenant role admin role, tenant governance role\\n     *                           and tenant contract admin role\\n     */\\n    function initialize(\\n        address tokenAddress_,\\n        uint256 tokenDecimals_,\\n        bool allowAccumulate_,\\n        address backofficeAdminAddress,\\n        address tenantAdminAddress\\n    ) public virtual override initializer {\\n        __VestingCustomRefundProject_init(\\n            tokenAddress_,\\n            tokenDecimals_,\\n            allowAccumulate_,\\n            backofficeAdminAddress,\\n            tenantAdminAddress\\n        );\\n    }\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function __VestingCustomRefundProject_init(\\n        // solhint-disable-previous-line func-name-mixedcase\\n        address tokenAddress_,\\n        uint256 tokenDecimals_,\\n        bool allowAccumulate_,\\n        address backofficeAdminAddress,\\n        address tenantAdminAddress\\n    ) internal onlyInitializing {\\n        __VestingCustomRefund_init_unchained(\\n            tokenAddress_,\\n            tokenDecimals_,\\n            allowAccumulate_,\\n            backofficeAdminAddress,\\n            tenantAdminAddress\\n        );\\n        __VestingCustomRefundProject_init_unchained();\\n    }\\n\\n    // https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions\\n    // slither-disable-next-line naming-convention\\n    function __VestingCustomRefundProject_init_unchained() internal onlyInitializing {\\n        // solhint-disable-previous-line func-name-mixedcase\\n        _setRoleAdmin(CONTRACT_USAGE_ROLE, BACKOFFICE_ROLE_ADMIN_ROLE);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function addVestingGrant(\\n        // solhint-disable-previous-line ordering\\n        address account,\\n        uint256 grantAmount,\\n        bool isRevocable\\n    ) external virtual override(VestingCustomRefund, IVestingCustomRefund) onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        require(account != address(0), \\\"VCRP: zero account\\\");\\n        require(projectWallet == address(0) || (account == projectWallet && allowAccumulate), \\\"VCRP: project wallet\\\");\\n\\n        projectWallet = account;\\n\\n        _addVestingGrant(account, grantAmount, isRevocable);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function addVestingGrantsBatch(\\n        address[] memory,\\n        uint256[] memory,\\n        bool[] memory\\n    ) external virtual override(VestingCustomRefund, IVestingCustomRefund) onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        require(false, \\\"VCRP: n/a\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefundProject\\n     */\\n    function cancelRefundWindow() external virtual override onlyRole(CONTRACT_USAGE_ROLE) returns (bool isCancelled) {\\n        _cancelRefundWindow();\\n        isCancelled = true;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefundProject\\n     */\\n    function extendRefundWindow(\\n        uint256 newDurationSeconds\\n    ) external virtual override onlyRole(CONTRACT_USAGE_ROLE) returns (bool isExtended) {\\n        require(newDurationSeconds > 0, \\\"VCRP: duration\\\");\\n        require(isVestingScheduleDefined(), \\\"VCRP: undefined schedule\\\");\\n\\n        (uint256 oldStartTimestamp, , ) = getRefundWindow();\\n        uint256 newEndTimestamp = oldStartTimestamp + newDurationSeconds;\\n        require(!hasVestingScheduleStarted(newEndTimestamp), \\\"VCRP: schedule started\\\");\\n\\n        _extendRefundWindow(newDurationSeconds);\\n        isExtended = true;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefundProject\\n     */\\n    function refund(\\n        address account,\\n        uint256 amount\\n    ) external virtual override whenNotPaused onlyRole(CONTRACT_USAGE_ROLE) returns (bool isRefunded) {\\n        require(account != address(0), \\\"VCRP: zero account\\\");\\n        require(amount > 0, \\\"VCRP: zero refund amount\\\");\\n\\n        uint256 maxRefundableAmount = _refundableAmountFor(projectWallet);\\n        uint256 transferDecimalsAmount = amount.scaleWeiToDecimals(tokenDecimals);\\n        uint256 transferWeiAmount = transferDecimalsAmount.scaleDecimalsToWei(tokenDecimals);\\n        require(transferWeiAmount > 0, \\\"VCRP: zero amount\\\");\\n        require(transferWeiAmount <= maxRefundableAmount, \\\"VCRP: exceed\\\");\\n\\n        _refund(projectWallet, transferWeiAmount);\\n\\n        emit TokensRefunded(account, transferWeiAmount);\\n\\n        IERC20(tokenAddress).safeTransfer(account, transferDecimalsAmount);\\n        isRefunded = true;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function revokeVestingGrant(\\n        address account\\n    ) external virtual override(VestingCustomRefund, IVestingCustomRefund) onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        require(account != address(0), \\\"VCRP: zero account\\\");\\n        require(account == projectWallet, \\\"VCRP: project wallet\\\");\\n\\n        projectWallet = address(0);\\n\\n        _revokeVestingGrant(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function revokeVestingGrantsBatch(\\n        address[] memory\\n    ) external virtual override(VestingCustomRefund, IVestingCustomRefund) onlyRole(TENANT_CONTRACT_ADMIN_ROLE) {\\n        require(false, \\\"VCRP: n/a\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefundProject\\n     */\\n    function setRefundWindow(\\n        uint256 startTimestamp,\\n        uint256 durationSeconds\\n    ) external virtual override onlyRole(CONTRACT_USAGE_ROLE) returns (bool isSet) {\\n        require(startTimestamp > block.timestamp, \\\"VCRP: start timestamp\\\");\\n        require(durationSeconds > 0, \\\"VCRP: duration\\\");\\n        require(isVestingScheduleDefined(), \\\"VCRP: undefined schedule\\\");\\n\\n        uint256 endTimestamp = startTimestamp + durationSeconds - 1;\\n        require(!hasVestingScheduleStarted(endTimestamp), \\\"VCRP: schedule started\\\");\\n\\n        _setRefundWindow(startTimestamp, durationSeconds);\\n        isSet = true;\\n    }\\n\\n    /**\\n     * @inheritdoc IFactoryImplementation\\n     */\\n    function factoryImplementationType()\\n        external\\n        view\\n        virtual\\n        override(VestingCustomRefund, IFactoryImplementation)\\n        returns (uint256 implementationType)\\n    {\\n        implementationType = 0x7866924b44039f57cc7e434c06f38cc0a54edaa38ef5e1e10233e9acd30773cc;\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefundProject\\n     */\\n    function refundableAmountFor(address account) external view virtual override returns (uint256 refundableAmount) {\\n        refundableAmount = _refundableAmountFor(account);\\n    }\\n\\n    /**\\n     * @inheritdoc IVestingCustomRefund\\n     */\\n    function releasableAmountFor(\\n        address account\\n    ) public view virtual override(VestingCustomRefund, IVestingCustomRefund) returns (uint256 releasableAmount) {\\n        require(account != address(0), \\\"VCRP: zero account\\\");\\n        require(hasVestingScheduleStarted(block.timestamp), \\\"VCRP: not started\\\");\\n        require(!revoked(account), \\\"VCRP: revoked\\\");\\n\\n        uint256 vestedAmount = vestedAmountFor(account);\\n        uint256 releasedAmount = releasedAmountFor(account);\\n\\n        releasableAmount = vestedAmount - releasedAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControl, IVestingCustomRefundProject) returns (bool) {\\n        return interfaceId == type(IVestingCustomRefundProject).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Get token amount that is refundable for `account`\\n     * @param account The address to check\\n     * @return refundableAmount The token amount in wei that is refundedable for `account`\\n     */\\n    function _refundableAmountFor(address account) internal view virtual override returns (uint256 refundableAmount) {\\n        require(account != address(0), \\\"VCRP: zero account\\\");\\n        require(isVestingScheduleDefined(), \\\"VCRP: undefined schedule\\\");\\n        require(!revoked(account), \\\"VCRP: revoked\\\");\\n\\n        (uint256 grantAmount, , , bool isActive) = vestingGrantFor(account);\\n        require(isActive, \\\"VCRP: inactive\\\");\\n\\n        if (hasVestingScheduleStarted(block.timestamp)) {\\n            return 0;\\n        }\\n\\n        refundableAmount = grantAmount - releasedAmountFor(account) - refundedAmountFor(account);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundDurationSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"RefundWindowCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDurationSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDurationSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"RefundWindowExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"RefundWindowSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"startTimestamps\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percentReleases\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"durationsDays\",\"type\":\"uint256[]\"}],\"name\":\"ScheduleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"TokensRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unusedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReleasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRevokedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalGrantAmount\",\"type\":\"uint256\"}],\"name\":\"UnusedTokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"grantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"VestingGrantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainderAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"grantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"name\":\"VestingGrantRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BACKOFFICE_CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BACKOFFICE_GOVERNANCE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BACKOFFICE_ROLE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BATCH_MAX_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_USAGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_100_WEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCHEDULE_MAX_ENTRIES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENANT_CONTRACT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENANT_GOVERNANCE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENANT_ROLE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_MAX_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"grantAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"addVestingGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"name\":\"addVestingGrantsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowAccumulate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRefundWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"effectiveGrantAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grantAmountWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDurationSeconds\",\"type\":\"uint256\"}],\"name\":\"extendRefundWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExtended\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryImplementationType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"implementationType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRefundWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"startTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentReleases\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"durationsDays\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endTimestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"}],\"name\":\"hasRefundWindowStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasStarted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRefundedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRefunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasReleasedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasReleased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"}],\"name\":\"hasVestingScheduleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasStarted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowAccumulate_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"backofficeAdminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenantAdminAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRefundWindowDefined\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isDefined\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRefundWindowOpenNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVestingScheduleDefined\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isDefined\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numVestingScheduleEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRefunded\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"refundableAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refundableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"refundedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refundedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasableAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeVestingGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"revokeVestingGrantsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRevoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setAdminWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSeconds\",\"type\":\"uint256\"}],\"name\":\"setRefundWindow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"startTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percentReleases\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"durationsDays\",\"type\":\"uint256[]\"}],\"name\":\"setVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGrantAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRevokedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferUnusedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unvestedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unvestedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestedAmountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"vestingGrantFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grantAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRevocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRevoked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VestingCustomRefundProject", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}