{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-09-08\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-08-13\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract StreetVendor {\r\n    struct Tower {\r\n        uint256  mana;\r\n        uint256  emeralds;\r\n        uint256  emeralds2;\r\n        uint256  yield;\r\n        uint256  timestamp;\r\n        uint256  hrs;\r\n        address  ref;\r\n        uint256  refs;\r\n        uint256  refDeps;\r\n        uint256  affiliateDeps;\r\n        uint8    treasury;\r\n        uint8[5] mages;\r\n        bool     isAffiliate;\r\n    }\r\n\r\n    mapping(address => Tower) public towers;\r\n\r\n    uint256 public totalMages;\r\n    uint256 public totalTowers;\r\n    uint256 public totalInvested;\r\n\r\n    address immutable public manager;\r\n\r\n    uint256 constant public FEE = 5; // 5%\r\n    uint256 constant public REFERRAL_MANA = 5; // Referral: 5% in mana\r\n\r\n    event addGem(address indexed recipient, uint256 amount, uint256 totalInvested);\r\n    event compoundCoin(address indexed recipient, uint256 amount);\r\n\r\n    constructor() {\r\n       manager = msg.sender;\r\n    }\r\n\r\n    function addMana(address ref) external payable {\r\n        uint256 mana = msg.value / 1e14; // 1 MANA = 0,0001 BNB\r\n        require(mana > 0, \"Zero mana\");\r\n        address user = msg.sender;\r\n        totalInvested += msg.value;\r\n        \r\n        if (towers[user].timestamp == 0) {\r\n            if(ref != address(0) && towers[ref].timestamp != 0) {\r\n                towers[user].ref = ref;\r\n                towers[ref].refs++;\r\n            }\r\n            totalTowers++;\r\n            towers[user].timestamp = block.timestamp;\r\n            towers[user].treasury = 0;\r\n        }\r\n\r\n        if(towers[user].ref != address(0)){\r\n            address refAddress = towers[user].ref;\r\n           \r\n                towers[refAddress].mana += (mana * REFERRAL_MANA) / 100; // Referral: 5% in mana\r\n                towers[refAddress].refDeps += mana;\r\n        }\r\n\r\n        towers[user].mana += mana;\r\n        payable(manager).transfer((msg.value * FEE) / 100);\r\n        emit addGem(msg.sender, msg.value, totalInvested);\r\n    }\r\n\r\n    function compound(uint256 emeralds) external {\r\n        address user = msg.sender;\r\n        require(emeralds <= towers[user].emeralds && emeralds > 0);\r\n        towers[user].emeralds -= emeralds;\r\n        uint256 amount = (emeralds * 12) / 1000; // 1 EMERALDS = 0,012 MANA\r\n        towers[user].mana += amount;\r\n        emit compoundCoin(msg.sender, emeralds);\r\n    }\r\n\r\n    function withdrawMoney(uint256 emeralds) external {\r\n        address user = msg.sender;\r\n        require(emeralds <= towers[user].emeralds && emeralds > 0);\r\n        towers[user].emeralds -= emeralds;\r\n        uint256 amount = emeralds * 1e12;\r\n        amount = address(this).balance < amount ? address(this).balance : amount;\r\n        uint256 feeTransfer = (amount * FEE) / 100;\r\n        payable(user).transfer(amount - feeTransfer);\r\n        payable(manager).transfer(feeTransfer);\r\n    }\r\n\r\n    function collectMoney() public {\r\n        address user = msg.sender;\r\n        syncTower(user);\r\n        towers[user].hrs = 0;\r\n        towers[user].emeralds += towers[user].emeralds2;\r\n        towers[user].emeralds2 = 0;\r\n    }\r\n\r\n    function upgradeTower(uint256 towerId) external {\r\n        require(towerId < 5, \"Max 5 towers\");\r\n        address user = msg.sender;\r\n        syncTower(user);\r\n        towers[user].mages[towerId]++;\r\n        totalMages++;\r\n        uint256 mages = towers[user].mages[towerId];\r\n        towers[user].mana -= getUpgradePrice(towerId, mages);\r\n        towers[user].yield += getYield(towerId, mages);\r\n    }\r\n\r\n    function upgradeTreasury() external {\r\n      address user = msg.sender;\r\n      uint8 treasuryId = towers[user].treasury + 1;\r\n      syncTower(user);\r\n      require(treasuryId < 5, \"Max 5 treasury\");\r\n      (uint256 price,) = getTreasure(treasuryId);\r\n      towers[user].mana -= price; \r\n      towers[user].treasury = treasuryId;\r\n    }\r\n\r\n\r\n\r\n    function getMages(address addr) external view returns (uint8[5] memory) {\r\n        return towers[addr].mages;\r\n    }\r\n\r\n    function syncTower(address user) internal {\r\n        require(towers[user].timestamp > 0, \"User is not registered\");\r\n        if (towers[user].yield > 0) {\r\n            (, uint256 treasury) = getTreasure(towers[user].treasury);\r\n            uint256 hrs = block.timestamp / 3600 - towers[user].timestamp / 3600;\r\n            if (hrs + towers[user].hrs > treasury) {\r\n                hrs = treasury - towers[user].hrs;\r\n            }\r\n            towers[user].emeralds2 += hrs * towers[user].yield;\r\n            towers[user].hrs += hrs;\r\n        }\r\n        towers[user].timestamp = block.timestamp;\r\n    }\r\n\r\n    function getUpgradePrice(uint256 towerId, uint256 mageId) internal pure returns (uint256) {\r\n        if (mageId == 1) return [690, 1900, 5900, 12900, 34900][towerId];\r\n        if (mageId == 2) return [790, 2390, 6900, 13900, 39900][towerId];\r\n        if (mageId == 3) return [990, 2900, 8600, 16900, 47500][towerId];\r\n        if (mageId == 4) return [1200, 3600, 10900, 21900, 59900][towerId];\r\n        if (mageId == 5) return [1490, 3990, 11990, 23900, 67500][towerId];\r\n        revert(\"Incorrect mageId\");\r\n    }\r\n\r\n    function getYield(uint256 towerId, uint256 mageId) internal pure returns (uint256) {\r\n        if (mageId == 1) return [66, 198, 669, 1585, 4649][towerId];\r\n        if (mageId == 2) return [77, 252, 792, 1729, 5394][towerId];\r\n        if (mageId == 3) return [97, 310, 1000, 2127, 6508][towerId];\r\n        if (mageId == 4) return [119, 390, 1284, 2790, 8321][towerId];\r\n        if (mageId == 5) return [150, 438, 1430, 3089, 9501][towerId];\r\n\r\n        revert(\"Incorrect mageId\");\r\n    }\r\n\r\n    function getTreasure(uint256 treasureId) internal pure returns (uint256, uint256) {\r\n      if(treasureId == 0) return (0, 24); // price | value\r\n      if(treasureId == 1) return (1000, 30);\r\n      if(treasureId == 2) return (1500, 36);\r\n      if(treasureId == 3) return (2000, 42);\r\n      if(treasureId == 4) return (2500, 48);\r\n      revert(\"Incorrect treasureId\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"}],\"name\":\"addGem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"compoundCoin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_MANA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"addMana\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"emeralds\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMages\",\"outputs\":[{\"internalType\":\"uint8[5]\",\"name\":\"\",\"type\":\"uint8[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"towers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mana\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emeralds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emeralds2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refDeps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateDeps\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"treasury\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isAffiliate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"towerId\",\"type\":\"uint256\"}],\"name\":\"upgradeTower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"emeralds\",\"type\":\"uint256\"}],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StreetVendor", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ff08f37bc384d51221dc5e55f07b7f7698441c40efbec1380bb3efcc5c92ee26"}