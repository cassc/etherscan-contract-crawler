{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returnData,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returnData.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returnData_size := mload(returnData)\\r\\n                    revert(add(32, returnData), returnData_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n}\\r\\n\"},\"Airdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IDSC.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\n\\r\\ncontract Airdrop is Ownable {\\r\\n    using SafeMath for uint;\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n    struct Lock {\\r\\n        uint256 openDay;\\r\\n        uint256 totalAmount;\\r\\n        uint256 releasedAmount;\\r\\n    }\\r\\n\\r\\n    // ERC20 basic token contract being held\\r\\n    IERC20Metadata public dsc;\\r\\n\\r\\n    address public rewardPayer;\\r\\n\\r\\n    uint256 public immutable directReleasePercent = 100;\\r\\n\\r\\n    uint256 public immutable lineRewardReleasePercent = 30;\\r\\n\\r\\n    uint256 public immutable releaseInterval = 30 days;\\r\\n\\r\\n    //uint256 public immutable releaseInterval = 5 minutes;\\r\\n\\r\\n    address[] public allUsers;\\r\\n\\r\\n    mapping (address =\\u003e mapping(uint256 =\\u003e Lock)) public rewardLocks;\\r\\n    mapping (address =\\u003e uint256) public rewardIndexStart;\\r\\n    mapping (address =\\u003e uint256) public rewardIndexEnd;\\r\\n\\r\\n    uint private endDate;\\r\\n    constructor(address _dsc, address _rewardPayer, uint _endDate) {\\r\\n        dsc = IERC20Metadata(_dsc);\\r\\n        rewardPayer = _rewardPayer;\\r\\n        endDate = _endDate;\\r\\n    }\\r\\n\\r\\n    function setEndDate(uint _endDate) external onlyOwner {\\r\\n        endDate = _endDate;\\r\\n    }\\r\\n\\r\\n    function setRewardPayer(address newPayer) external onlyOwner {\\r\\n        rewardPayer = newPayer;\\r\\n    }\\r\\n\\r\\n    function airdrop(address user, uint dscAmount) public {\\r\\n        require(block.timestamp \\u003c= endDate, \\\"Airdrop is closed\\\");\\r\\n        if (rewardIndexStart[user] == 0) {\\r\\n            allUsers.push(user);\\r\\n        }\\r\\n\\r\\n        uint directRelease = dscAmount.mul(directReleasePercent).div(1000);\\r\\n        Lock memory lock = Lock(block.timestamp, dscAmount, directRelease);\\r\\n        uint indexEnd = rewardIndexEnd[user];\\r\\n        rewardLocks[user][indexEnd] = lock;\\r\\n        rewardIndexEnd[user]++;\\r\\n        dsc.transferFrom(rewardPayer, address(this), dscAmount);\\r\\n        dsc.transfer(user, directRelease);\\r\\n    }\\r\\n\\r\\n    function locked(address user) public view returns (uint256 lockAmount) {\\r\\n        uint startIndex = rewardIndexStart[user];\\r\\n        uint endIndex = rewardIndexEnd[user];\\r\\n        for (uint i=startIndex; i\\u003cendIndex; i++) {\\r\\n            Lock memory lock = rewardLocks[user][i];\\r\\n            lockAmount += lock.totalAmount - lock.releasedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function released(address user) public view returns (uint256 releasedAmount) {\\r\\n        uint startIndex = rewardIndexStart[user];\\r\\n        uint endIndex = rewardIndexEnd[user];\\r\\n        for (uint i=startIndex; i\\u003cendIndex; i++) {\\r\\n            Lock memory lock = rewardLocks[user][i];\\r\\n            releasedAmount += lock.releasedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimForUser(address user, uint size) public returns (uint256 availableAmount) {\\r\\n        uint startIndex = rewardIndexStart[user];\\r\\n        uint nextIndex = startIndex;\\r\\n        uint interval = releaseInterval;\\r\\n        uint end = size \\u003e (rewardIndexEnd[user] - startIndex) ? rewardIndexEnd[user] : startIndex + size;\\r\\n        for (uint i=startIndex; i \\u003c end; i++) {\\r\\n            Lock memory lock = rewardLocks[user][i];\\r\\n            if (lock.openDay == 0) break;\\r\\n            if (block.timestamp \\u003c lock.openDay + interval) break;\\r\\n            uint releaseDate = lock.openDay + interval;\\r\\n\\r\\n            uint releasedTimes = ((block.timestamp - releaseDate) / interval) + 1;\\r\\n            uint releasedPercent = directReleasePercent + releasedTimes * lineRewardReleasePercent;\\r\\n            releasedPercent = releasedPercent \\u003e 1000 ? 1000 : releasedPercent;\\r\\n            uint releaseAmount = ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\\r\\n            if (releasedPercent == 1000) {\\r\\n                delete rewardLocks[user][i];\\r\\n                nextIndex = i+1;\\r\\n            } else if(releaseAmount \\u003e 0) {\\r\\n                rewardLocks[user][i].releasedAmount += releaseAmount;\\r\\n            }\\r\\n\\r\\n            availableAmount += releaseAmount;\\r\\n        }\\r\\n\\r\\n        if (startIndex != nextIndex) rewardIndexStart[user] = nextIndex;\\r\\n        if (availableAmount \\u003e 0) dsc.transfer(user, availableAmount);\\r\\n    }\\r\\n\\r\\n    function claim() public returns (uint256 availableAmount) {\\r\\n        availableAmount = claimForUser(msg.sender, ~uint256(0));\\r\\n    }\\r\\n\\r\\n    function available(address user) public view returns (uint256 availableAmount) {\\r\\n        uint startIndex = rewardIndexStart[user];\\r\\n        uint endIndex = rewardIndexEnd[user];\\r\\n        uint interval = releaseInterval;\\r\\n        uint lineReleasePercent = lineRewardReleasePercent;\\r\\n        for (uint i=startIndex; i \\u003c endIndex; i++) {\\r\\n            Lock memory lock = rewardLocks[user][i];\\r\\n            uint releaseDate = lock.openDay + interval;\\r\\n            if (block.timestamp \\u003c releaseDate) break;\\r\\n\\r\\n            uint releasedTimes = ((block.timestamp - releaseDate) / interval) + 1;\\r\\n            uint releasedPercent = directReleasePercent + releasedTimes * lineReleasePercent;\\r\\n            releasedPercent = releasedPercent \\u003e 1000 ? 1000 : releasedPercent;\\r\\n            availableAmount += ((lock.totalAmount * releasedPercent) / 1000) - lock.releasedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n    }\\r\\n\\r\\n    function timestamp() external view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function claimStuckTokens(address token) external onlyOwner {\\r\\n        require(token != address(dsc), \\\"Cannot claim DSC tokens\\\");\\r\\n        if (token == address(0x0)) {\\r\\n            (bool success, ) = address(msg.sender).call{ value: address(this).balance }(\\\"\\\");\\r\\n            require(success, \\\"Unable to send value, may have reverted\\\");\\r\\n        } else {\\r\\n            IERC20 ERC20token = IERC20(token);\\r\\n            uint256 balance = ERC20token.balanceOf(address(this));\\r\\n            ERC20token.transfer(msg.sender, balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function a_getAvailable(address user) external view returns (string memory) {\\r\\n        uint availableAmount = available(user);\\r\\n        return Strings.toString(availableAmount, dsc.decimals());\\r\\n    }\\r\\n\\r\\n    function a_getLocked(address user) external view returns (string memory) {\\r\\n        uint256 lockedAmount = locked(user);\\r\\n        return Strings.toString(lockedAmount, dsc.decimals());\\r\\n    }\\r\\n\\r\\n    function a_getReleased(address user) external view returns (string memory) {\\r\\n        uint256 releasedAmount = released(user);\\r\\n        return Strings.toString(releasedAmount, dsc.decimals());\\r\\n    }\\r\\n\\r\\n    function a_airdrop(address user, string memory dscString) external {\\r\\n        uint dscAmount = Strings.fromString(dscString, dsc.decimals());\\r\\n        return airdrop(user, dscAmount);\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IDSC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IDSC is IERC20 {\\r\\n    function selectUpNodes(address from) external view returns (address[] memory nodes);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Ownable {\\r\\n    mapping(address =\\u003e bool) public owners;\\r\\n    mapping(address =\\u003e uint) public applyCancelTimes;\\r\\n    constructor() {\\r\\n        owners[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owners[msg.sender], \\\"O1\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function applySetOwner(address owner) public onlyOwner {\\r\\n        require(owners[owner], \\u0027No need apply\\u0027);\\r\\n        applyCancelTimes[owner] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function cancelSetOwner(address owner) external onlyOwner {\\r\\n        require(owners[owner], \\u0027No need cancel\\u0027);\\r\\n        applyCancelTimes[owner] = 0;\\r\\n    }\\r\\n\\r\\n    function setOwner(address owner, bool flag) public onlyOwner {\\r\\n        if (!flag) {\\r\\n            require(applyCancelTimes[owner] != 0 \\u0026\\u0026 block.timestamp \\u003e applyCancelTimes[owner] + 10 days,\\r\\n                \\\"Not ready for change receiver\\\");\\r\\n            applyCancelTimes[owner] == 0;\\r\\n        }\\r\\n        owners[owner] = flag;\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n    unchecked {\\r\\n        z = x + y;\\r\\n        require(z \\u003e= x, \\u0027ds-math-add-overflow\\u0027);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(x \\u003e= y, \\u0027ds-math-sub-underflow\\u0027);\\r\\n        z = x - y;\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n    unchecked {\\r\\n        z = x * y;\\r\\n        require(y == 0 || z / y == x, \\u0027ds-math-mul-overflow\\u0027);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\u0027ds-math-div-overflow\\u0027);\\r\\n        return a / b;\\r\\n    }\\r\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function toString(uint256 value, uint8 decimals) internal pure returns (string memory) {\\r\\n        require(decimals \\u003e 0 \\u0026\\u0026 decimals \\u003c= 18, \\\"Invalid Decimals\\\");\\r\\n        string memory str = toString(value);\\r\\n        uint length = bytes(str).length;\\r\\n        uint count;\\r\\n        uint dotIndex;\\r\\n        if (length \\u003c= decimals) {\\r\\n            count = decimals + 2; // 19\\r\\n            dotIndex = 1;\\r\\n        } else {\\r\\n            count = length + 1;\\r\\n            dotIndex = length - decimals;\\r\\n        }\\r\\n\\r\\n        bytes memory buffer = new bytes(count);\\r\\n        uint left = length;\\r\\n        uint i = 0;\\r\\n        for (; i \\u003c dotIndex; i++) {\\r\\n            if (length \\u003c= decimals) {\\r\\n                buffer[i] = bytes1(uint8(48));\\r\\n            } else {\\r\\n                buffer[i] = bytes(str)[i];\\r\\n                left--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        buffer[i++] = bytes1(uint8(46));\\r\\n\\r\\n        for (; i \\u003c count; i++) {\\r\\n            if ((count - i) \\u003e left) {\\r\\n                buffer[i] = bytes1(uint8(48));\\r\\n            } else {\\r\\n                buffer[i] = bytes(str)[length - left];\\r\\n                left--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function fromString(string memory str, uint8 decimals) internal pure returns(uint256 value) {\\r\\n        uint dotIndex = bytes(str).length;\\r\\n        for (uint256 i = 0; i \\u003c bytes(str).length; i++) {\\r\\n            if (uint8(bytes(str)[i]) == 46) {\\r\\n                dotIndex = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(bytes(str).length - dotIndex \\u003c decimals, \\\"Invalid str\\\");\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c dotIndex; i++) {\\r\\n            if ((uint8(bytes(str)[i]) - 48) \\u003c 0 || (uint8(bytes(str)[i]) - 48) \\u003e 9) {\\r\\n                revert(\\\"Invalid number\\\");\\r\\n            }\\r\\n\\r\\n            value += (uint8(bytes(str)[i]) - 48) * 10**(decimals + dotIndex - i - 1);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = dotIndex + 1; i \\u003c bytes(str).length; i++) {\\r\\n            if ((uint8(bytes(str)[i]) - 48) \\u003c 0 || (uint8(bytes(str)[i]) - 48) \\u003e 9) {\\r\\n                revert(\\\"Invalid number\\\");\\r\\n            }\\r\\n\\r\\n            if (uint8(bytes(str)[i]) != 48) {\\r\\n                value += (uint8(bytes(str)[i]) - 48) * 10 ** (decimals - (i - dotIndex));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dsc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dscString\",\"type\":\"string\"}],\"name\":\"a_airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getAvailable\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getLocked\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"a_getReleased\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dscAmount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"applyCancelTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"applySetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"cancelSetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"claimForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directReleasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dsc\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lineRewardReleasePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardIndexEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardIndexStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"openDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"setEndDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPayer\",\"type\":\"address\"}],\"name\":\"setRewardPayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Airdrop", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a86a86b8acdc55812bec2971a2fc8a989455858c000000000000000000000000d486b2814a6651641743e4b2e84ff17a829d81570000000000000000000000000000000000000000000000000000000065badf00", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5748bf3e0fbfa1d555dcb9aaa8340086bd759b5cfbf4616c29f9a83efd065aaa"}