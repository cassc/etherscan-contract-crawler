{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-05-07\r\n*/\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Rebasable is Ownable {\r\n  address private _rebaser;\r\n\r\n  event TransferredRebasership(address indexed previousRebaser, address indexed newRebaser);\r\n\r\n  constructor() internal {\r\n    address msgSender = _msgSender();\r\n    _rebaser = msgSender;\r\n    emit TransferredRebasership(address(0), msgSender);\r\n  }\r\n\r\n  function Rebaser() public view returns(address) {\r\n    return _rebaser;\r\n  }\r\n\r\n  modifier onlyRebaser() {\r\n    require(_rebaser == _msgSender(), \"caller is not rebaser\");\r\n    _;\r\n  }\r\n\r\n  function transferRebasership(address newRebaser) public virtual onlyOwner {\r\n    require(newRebaser != address(0), \"new rebaser is address zero\");\r\n    emit TransferredRebasership(_rebaser, newRebaser);\r\n    _rebaser = newRebaser;\r\n  }\r\n}\r\n/* \r\n   SPDX-License-Identifier: MIT\r\n   Copyright 2021\r\n*/\r\n\r\n/// SWC-103:  Floating Pragma\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract SWIFTMOON is Ownable, Rebasable\r\n{\r\n    using SMOONSafeMath for uint256;\r\n\tusing Address for address;\r\n\t\r\n\tIUniswapV2Router02 public immutable _uniswapV2Router;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n    event Rebase(uint256 indexed epoch, uint256 scalingFactor);\r\n\r\n    event WhitelistFrom(address _addr, bool _whitelisted);\r\n    event WhitelistTo(address _addr, bool _whitelisted);\r\n    event UniswapPairAddress(address _addr, bool _whitelisted);\r\n\r\n    string public name     = \"SWIFTMOON\";\r\n    string public symbol   = \"SMOON\";\r\n    uint8  public decimals = 18;\r\n\r\n    address public BurnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\t\r\n    address public rewardAddress;\r\n\r\n    /**\r\n     * @notice Internal decimals used to handle scaling factor\r\n     */\r\n    uint256 public constant internalDecimals = 10**18;\r\n\r\n    /**\r\n     * @notice Used for percentage maths\r\n     */\r\n    uint256 public constant BASE = 10**18;\r\n\r\n    /**\r\n     * @notice Scaling factor that adjusts everyone's balances\r\n     */\r\n    uint256 public SMOONScalingFactor  = BASE;\r\n\r\n\tmapping (address => uint256) private _rOwned;\r\n\tmapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) internal _allowedFragments;\r\n\t\r\n\tmapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    mapping(address => bool) public whitelistFrom;\r\n    mapping(address => bool) public whitelistTo;\r\n    mapping(address => bool) public uniswapPairAddress;\r\n\taddress private currentPoolAddress;\r\n\taddress private currentPairTokenAddress;\r\n\taddress public uniswapETHPool;\r\n\taddress[] public futurePools;\r\n\r\n\r\n    uint256 initSupply = 10**8 * 10**18;\r\n    uint256 _totalSupply = 10**8 * 10**18;\r\n    uint16 public SELL_FEE = 5;\r\n    uint16 public TX_FEE = 0;\r\n    uint16 public BURN_TOP = 1;\r\n\tuint16 public BURN_BOTTOM = 3;\r\n\tuint256 private _tFeeTotal;\r\n\tuint256 private constant MAX = ~uint256(0);\r\n    uint256 private _rTotal = (MAX - (MAX % _totalSupply));\r\n\tuint16 public FYFee = 50;\r\n\tuint256 public _maxTxAmount = 10**8 * 10**18;\r\n\tuint256 public _minTokensBeforeSwap = 100 * 10**18;\r\n\tuint256 public _autoSwapCallerFee = 2 * 10**18;\r\n\tuint256 public liquidityRewardRate = 2;\r\n\t\r\n\tbool private inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n    bool public tradingEnabled;\r\n\t\r\n\tevent MaxTxAmountUpdated(uint256 maxTxAmount);\r\n\tevent TradingEnabled();\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        address indexed pairTokenAddress,\r\n        uint256 tokensSwapped,\r\n        uint256 pairTokenReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\tevent MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event AutoSwapCallerFeeUpdated(uint256 autoSwapCallerFee);\r\n\t\r\n\tmodifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(IUniswapV2Router02 uniswapV2Router)\r\n    public\r\n    Ownable()\r\n    Rebasable()\r\n    {\r\n\t\t_uniswapV2Router = uniswapV2Router;\r\n        \r\n        currentPoolAddress = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uniswapV2Router.WETH());\r\n        currentPairTokenAddress = uniswapV2Router.WETH();\r\n        uniswapETHPool = currentPoolAddress;\r\n\t\trewardAddress = address(this);\r\n        \r\n        updateSwapAndLiquifyEnabled(false);\r\n        \r\n        _rOwned[_msgSender()] = reflectionFromToken(_totalSupply, false);\r\n        \r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256)\r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function getSellBurn(uint256 value) public view returns (uint256)\r\n    {\r\n        uint256 nPercent = value.mul(SELL_FEE).divRound(100);\r\n        return nPercent;\r\n    }\r\n\r\n    function getTxBurn(uint256 value) public view returns (uint256)\r\n    {\r\n        uint256 nPercent = value.mul(TX_FEE).divRound(100);\r\n        return nPercent;\r\n    }\r\n\r\n    function _isWhitelisted(address _from, address _to) internal view returns (bool)\r\n    {\r\n        return whitelistFrom[_from]||whitelistTo[_to];\r\n    }\r\n\r\n    function _isUniswapPairAddress(address _addr) internal view returns (bool)\r\n    {\r\n        return uniswapPairAddress[_addr];\r\n    }\r\n\r\n    function setWhitelistedTo(address _addr, bool _whitelisted) external onlyOwner\r\n    {\r\n        emit WhitelistTo(_addr, _whitelisted);\r\n        whitelistTo[_addr] = _whitelisted;\r\n    }\r\n\r\n    function setTxFee(uint16 fee) external onlyOwner\r\n    {\r\n\t\trequire(fee < 90, 'SMOON: Transaction fee should be less than 90%');\r\n        TX_FEE = fee;\r\n    }\r\n\t\r\n\tfunction setFYFee(uint16 fee) external onlyOwner\r\n    {\r\n\t\trequire(fee > 2, 'SMOON: Frictionless yield fee should be less than 50%');\r\n        FYFee = fee;\r\n    }\r\n\r\n    function setSellFee(uint16 fee) external onlyOwner\r\n    {\r\n\t\trequire(fee < 90, 'SMOON: Sell fee should be less than 90%');\r\n        SELL_FEE = fee;\r\n    }\r\n\t\r\n    function setBurnTop(uint16 burntop) external onlyOwner\r\n    {\r\n        BURN_TOP = burntop;\r\n    }\r\n\t\r\n\tfunction setBurnBottom(uint16 burnbottom) external onlyOwner\r\n    {\r\n        BURN_BOTTOM = burnbottom;\r\n    }\r\n\t\r\n    function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyOwner\r\n    {\r\n        emit WhitelistFrom(_addr, _whitelisted);\r\n        whitelistFrom[_addr] = _whitelisted;\r\n    }\r\n\r\n    function setUniswapPairAddress(address _addr, bool _whitelisted) external onlyOwner \r\n\t{\r\n        emit UniswapPairAddress(_addr, _whitelisted);\r\n        uniswapPairAddress[_addr] = _whitelisted;\r\n    }\r\n\t\r\n\tfunction addfuturePool(address futurePool) external onlyOwner\r\n\t{\r\n\t\tIUniswapV2Pair(futurePool).sync();\r\n\t\tfuturePools.push(futurePool);\r\n\t}\r\n\r\n    function maxScalingFactor() external view returns (uint256)\r\n    {\r\n        return _maxScalingFactor();\r\n    }\r\n\r\n    function _maxScalingFactor() internal view returns (uint256)\r\n    {\r\n        // scaling factor can only go up to 2**256-1 = initSupply * SMOONScalingFactor\r\n        // this is used to check if SMOONScalingFactor will be too high to compute balances when rebasing.\r\n        return uint256(-1) / initSupply;\r\n    }\r\n\r\n   function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t// decrease allowance\r\n        _approve(sender, _msgSender(), _allowedFragments[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n\tfunction balanceOf(address account) public view returns (uint256) {\r\n\t  \r\n        if (_isExcluded[account]) return _tOwned[account].mul(SMOONScalingFactor).div(internalDecimals);\r\n        uint256 tOwned = tokenFromReflection(_rOwned[account]);\r\n\t\treturn _scaling(tOwned);\r\n\t}\r\n\r\n    function balanceOfUnderlying(address account) external view returns (uint256)\r\n    {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    \r\n    function allowance(address owner_, address spender) external view returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue)\r\n        {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        }\r\n        else\r\n        {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n\r\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"SMOON: approve from the zero address\");\r\n        require(spender != address(0), \"SMOON: approve to the zero address\");\r\n\r\n        _allowedFragments[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\t\r\n\tfunction isExcluded(address account) public view returns (bool) \r\n\t{\r\n        return _isExcluded[account];\r\n    }\r\n\t\r\n\tfunction totalFees() public view returns (uint256) \r\n\t{\r\n        return _tFeeTotal;\r\n    }\r\n\t\r\n\tfunction reflect(uint256 tAmount) public \r\n\t{\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        uint256 currentRate = _getRate();\r\n        uint256 TAmount = tAmount.mul(internalDecimals).div(SMOONScalingFactor);\r\n\t\tuint256 rAmount = TAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\t\r\n\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) \r\n\t{\r\n        require(tAmount <= _totalSupply, \"Amount must be less than supply\");\r\n        uint256 currentRate = _getRate();\r\n        uint256 TAmount = tAmount.mul(internalDecimals).div(SMOONScalingFactor);\r\n        uint256 fee = getTxBurn(TAmount);\r\n\t\tuint256 rAmount = TAmount.mul(currentRate);\r\n        if (!deductTransferFee) {\r\n            return rAmount;\r\n        } else {\r\n            (uint256 rTransferAmount,,,) = _getRValues(TAmount, fee, currentRate);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\t\r\n\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) \r\n\t{\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\t\r\n\tfunction excludeAccount(address account) external onlyOwner() \r\n\t{\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _rOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\t\r\n\tfunction includeAccount(address account) external onlyOwner() \r\n\t{\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _rOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\t\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) private \r\n\t{\r\n        \r\n\t\trequire(sender != address(0), \"SMOON: cannot transfer from the zero address\");\r\n        require(recipient != address(0), \"SMOON: cannot transfer to the zero address\");\r\n        require(amount > 0, \"SMOON: Transfer amount must be greater than zero\");\r\n\t\t\r\n\t\tif(sender != owner() && recipient != owner() && !inSwapAndLiquify) {\r\n            require(amount <= _maxTxAmount, \"SMOON: Transfer amount exceeds the maxTxAmount.\");\r\n            if((_msgSender() == currentPoolAddress || _msgSender() == address(_uniswapV2Router)) && !tradingEnabled)\r\n                require(false, \"SMOON: trading is disabled.\");\r\n        }\r\n        \r\n        if(!inSwapAndLiquify) {\r\n            uint256 lockedBalanceForPool = balanceOf(address(this));\r\n            bool overMinTokenBalance = lockedBalanceForPool >= _minTokensBeforeSwap;\r\n\t\t\tcurrentPairTokenAddress == _uniswapV2Router.WETH();\r\n            if (\r\n                overMinTokenBalance &&\r\n                msg.sender != currentPoolAddress &&\r\n                swapAndLiquifyEnabled\r\n            ) {\r\n                swapAndLiquifyForEth(lockedBalanceForPool);\r\n            }\r\n        }\r\n\t\t\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\t\r\n\treceive() external payable {}\r\n    \r\n    function swapAndLiquifyForEth(uint256 lockedBalanceForPool) private lockTheSwap {\r\n        // split the contract balance except swapCallerFee into halves\r\n        uint256 lockedForSwap = lockedBalanceForPool.sub(_autoSwapCallerFee);\r\n\t\tuint256 forLiquidity = lockedForSwap.divRound(liquidityRewardRate);\r\n\t\tuint256 forLiquidityReward = lockedForSwap.sub(forLiquidity);\r\n        uint256 half = forLiquidity.div(2);\r\n        uint256 otherHalf = forLiquidity.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        swapTokensForEth(half);\r\n        \r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidityForEth(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(_uniswapV2Router.WETH(), half, newBalance, otherHalf);\r\n        \r\n\t\t_transfer(address(this), uniswapETHPool, forLiquidityReward);\r\n        _transfer(address(this), tx.origin, _autoSwapCallerFee);\r\n    }\r\n    \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidityForEth(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\t\r\n\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) private \r\n\t{\r\n\t    uint256 currentRate =  _getRate();\r\n\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(SMOONScalingFactor);\r\n\t\tuint256 rAmount = TAmount.mul(currentRate);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t\r\n\t\tif(inSwapAndLiquify) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n\t\t}\r\n\t\t\r\n\t    else if (_isUniswapPairAddress(recipient))\r\n        {\r\n\t\t uint256 fee = getSellBurn(TAmount);\r\n\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\r\n\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\r\n\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\r\n\t\t_reflectFee(rFYFee, tFYFee);\r\n\t\t_transferStandardSell(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\r\n        }\r\n        else\r\n        {\r\n            if(!_isWhitelisted(sender, recipient))\r\n            {\r\n\t     uint256 fee = getTxBurn(TAmount);\r\n\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\r\n\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\r\n\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\r\n\t\t_reflectFee(rFYFee, tFYFee);\r\n\t\t_transferStandardTx(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\r\n            }\r\n            else\r\n            {           \r\n                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n                emit Transfer(sender, recipient, tAmount);\r\n             }\r\n        }\r\n    }\r\n    \r\n    function _transferStandardSell(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \r\n\t{\r\n            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);        \r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\r\n\t\t\r\n            emit Transfer(sender, recipient, _scaling(tTransferAmount));\r\n            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\r\n            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\r\n        \r\n    }\r\n    \r\n    function _transferStandardTx(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \r\n\t{        \r\n                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);                \r\n                _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\r\n\t\t\t\r\n                emit Transfer(sender, recipient, _scaling(tTransferAmount));\r\n                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\r\n                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\r\n        \r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private \r\n\t{\r\n\t\tuint256 currentRate =  _getRate();\r\n\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(SMOONScalingFactor);\r\n\t\tuint256 rAmount = TAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n\t\tif(inSwapAndLiquify) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n\t\t}\r\n\t\t\r\n\t\telse if(_isUniswapPairAddress(recipient))\r\n        {\r\n\t\t uint256 fee = getSellBurn(TAmount);\r\n\t\t(, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\r\n\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\r\n\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\r\n\t\t_reflectFee(rFYFee, tFYFee);\r\n\t\t_transferToExcludedSell(sender, recipient, tBurnFee, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\r\n        }\r\n        else\r\n        {\r\n            if(!_isWhitelisted(sender, recipient))\r\n            {\r\n\t     uint256 fee = getTxBurn(TAmount);\r\n\t\t(, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\r\n\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\r\n\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\r\n\t\t_reflectFee(rFYFee, tFYFee);\r\n        _transferToExcludedSell(sender, recipient, tBurnFee, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\r\n            }\r\n            else\r\n            {\r\n                _tOwned[recipient] = _tOwned[recipient].add(TAmount);\r\n                emit Transfer(sender, recipient, tAmount);\r\n             }\r\n        }\r\n    }\r\n    \r\n    function _transferToExcludedSell (address sender, address recipient, uint256 tBurnFee, uint256 tTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tRewardFee) private \r\n\t{\r\n            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\r\n            emit Transfer(sender, recipient, _scaling(tTransferAmount));\r\n            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\r\n            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\r\n        \r\n    }\r\n    \r\n    function _transferToExcludedTx (address sender, address recipient, uint256 tBurnFee, uint256 tTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tRewardFee) private \r\n\t{        \r\n                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\r\n                _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\r\n                emit Transfer(sender, recipient, _scaling(tTransferAmount));\r\n                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\r\n                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\r\n    }\r\n         \r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private \r\n\t{\r\n\t\tuint256 currentRate =  _getRate();\r\n\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(SMOONScalingFactor);\r\n\t\tuint256 rAmount = TAmount.mul(currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t\r\n\t\tif(inSwapAndLiquify) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n\t\t}\r\n\t\t\r\n\t\telse if(_isUniswapPairAddress(recipient))\r\n        {\r\n\t\t uint256 fee = getSellBurn(TAmount);\r\n\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\r\n\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\r\n\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\r\n\t\t_reflectFee(rFYFee, tFYFee);\r\n\t\t_transferFromExcludedSell(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\r\n        }\r\n        else\r\n        {\r\n            if(!_isWhitelisted(sender, recipient))\r\n            {\r\n\t     uint256 fee = getTxBurn(TAmount);\r\n\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\r\n\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\r\n\t\t_totalSupply = _totalSupply.sub(_scaling(tBurnFee));\r\n\t\t_reflectFee(rFYFee, tFYFee);\r\n\t\t_transferFromExcludedTx(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\r\n                \r\n            }\r\n            else\r\n            {\r\n                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n                emit Transfer(sender, recipient, tAmount);\r\n             }\r\n        }\r\n    }\r\n    \r\n    function _transferFromExcludedSell(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \r\n\t{\r\n            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\r\n            emit Transfer(sender, recipient, _scaling(tTransferAmount));\r\n            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\r\n            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\r\n    }\r\n    \r\n    function _transferFromExcludedTx(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 rRewardFee, uint256 tTransferAmount, uint256 tRewardFee) private \r\n\t{\r\n                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\r\n                _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\r\n                emit Transfer(sender, recipient, _scaling(tTransferAmount));\r\n                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\r\n                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\r\n    }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private \r\n\t{\r\n\t    uint256 currentRate =  _getRate();\r\n\t\tuint256 TAmount = tAmount.mul(internalDecimals).div(SMOONScalingFactor);\r\n\t\tuint256 rAmount = TAmount.mul(currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t\r\n\t\tif(inSwapAndLiquify) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n\t\t}\r\n\t\t\r\n        else if(_isUniswapPairAddress(recipient))\r\n        {\r\n\t\t uint256 fee = getSellBurn(TAmount);\r\n\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\r\n\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\r\n            _totalSupply = _totalSupply.sub(_scaling(tBurnFee));\r\n            _reflectFee(rFYFee, tFYFee);\r\n            _transferBothExcludedSell(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\r\n            \r\n        }\r\n        else\r\n        {\r\n            if(!_isWhitelisted(sender, recipient))\r\n            {\r\n\t     uint256 fee = getTxBurn(TAmount);\r\n\t\t(uint256 rTransferAmount, uint256 rBurnFee, uint256 rFYFee, uint256 rRewardFee) = _getRValues(rAmount, fee, currentRate);\r\n\t\t(uint256 tTransferAmount, uint256 tFYFee, uint256 tBurnFee, uint256 tRewardFee) = _getTValues(TAmount, fee);\r\n           _totalSupply = _totalSupply.sub(_scaling(tBurnFee));\r\n            _reflectFee(rFYFee, tFYFee);\r\n            _transferBothExcludedTx(sender, recipient, tBurnFee, rTransferAmount, rBurnFee, rRewardFee, tTransferAmount, tRewardFee);\r\n            }\r\n            else\r\n            {\r\n                _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n\t\t\t\t_tOwned[recipient] = _tOwned[recipient].add(TAmount);\r\n                emit Transfer(sender, recipient, tAmount);\r\n             }\r\n        }\r\n    }\r\n    \r\n    function _transferBothExcludedSell(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private \r\n\t{   \r\n            _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\r\n\t\t\t\r\n            emit Transfer(sender, recipient, _scaling(tTransferAmount));\r\n            emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\r\n            emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\r\n        \r\n    }\r\n    \r\n     function _transferBothExcludedTx(address sender, address recipient, uint256 tBurnFee, uint256 rTransferAmount, uint256 rBurnFee, uint256 tTransferAmount, uint256 rRewardFee, uint256 tRewardFee) private \r\n\t {\r\n                _rOwned[BurnAddress] = _rOwned[BurnAddress].add(rBurnFee);\r\n                _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n                _rOwned[rewardAddress] = _rOwned[rewardAddress].add(rRewardFee);\r\n\t\t\t\t\r\n                emit Transfer(sender, recipient, _scaling(tTransferAmount));\r\n                emit Transfer(sender, BurnAddress, _scaling(tBurnFee));\r\n                emit Transfer(sender, rewardAddress, _scaling(tRewardFee));\r\n     }\r\n\t \r\n\tfunction _scaling(uint256 amount) private view returns (uint256)\r\n\t\r\n\t{\r\n\t\tuint256 scaledAmount = amount.mul(SMOONScalingFactor).div(internalDecimals);\r\n\t\treturn(scaledAmount);\r\n\t}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private \r\n\t{\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getTValues(uint256 TAmount, uint256 fee) private view returns (uint256, uint256, uint256, uint256) \r\n\t{\r\n        uint256 tFYFee = TAmount.div(FYFee); \r\n\t\tuint256 tBurnFee = BURN_TOP*fee/BURN_BOTTOM;\r\n\t\tuint256 tRewardFee = fee.sub(tBurnFee);\r\n        uint256 tTransferAmount = TAmount.sub(tFYFee).sub(tBurnFee).sub(tRewardFee);\r\n        return (tTransferAmount, tFYFee, tBurnFee, tRewardFee);\r\n    }\r\n\t\r\n    function _getRValues(uint256 rAmount, uint256 fee, uint256 currentRate) private view returns (uint256, uint256, uint256, uint256) \r\n\t{\r\n        uint256 rFYFee = rAmount.div(FYFee);\r\n\t\tuint256 rBurnFee = (BURN_TOP*fee/BURN_BOTTOM).mul(currentRate);\r\n\t\tuint256 rRewardFee = fee.mul(currentRate).sub(rBurnFee);\r\n\t\tuint256 rTransferAmount = _getRValues2(rAmount, rFYFee, rBurnFee, rRewardFee);\r\n        return (rTransferAmount, rBurnFee, rFYFee, rRewardFee);\r\n    }\r\n\t\r\n\tfunction _getRValues2(uint256 rAmount, uint256 rFYFee, uint256 rBurnFee, uint256 rRewardFee) private pure returns (uint256) \r\n\t{\r\n        uint256 rTransferAmount = rAmount.sub(rFYFee).sub(rBurnFee).sub(rRewardFee);\r\n        return (rTransferAmount);\r\n    }\r\n\t\r\n\r\n    function _getRate() private view returns(uint256) \r\n\t{\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) \r\n\t{\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = initSupply;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, initSupply);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(initSupply)) return (_rTotal, initSupply);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _setRewardAddress(address rewards_) external onlyOwner\r\n    {\r\n        rewardAddress = rewards_;\r\n    }\r\n\r\n    /**\r\n    * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\r\n    *\r\n    * @dev The supply adjustment equals (totalSupply * DeviationFromTargetRate) / rebaseLag\r\n    *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\r\n    *      and targetRate is CpiOracleRate / baseCpi\r\n    */\r\n    function rebase(uint256 epoch, uint256 indexDelta, bool positive) external onlyRebaser returns (uint256)\r\n    {\r\n\t\tuint256 currentRate = _getRate();\r\n        if (!positive)\r\n        {\r\n\t\tuint256 newScalingFactor = SMOONScalingFactor.mul(BASE.sub(indexDelta)).div(BASE);\r\n\t\tSMOONScalingFactor = newScalingFactor;\r\n        _totalSupply = ((initSupply.sub(_rOwned[BurnAddress].div(currentRate))\r\n            .mul(SMOONScalingFactor).div(internalDecimals)));\r\n        emit Rebase(epoch, SMOONScalingFactor);\r\n\t\tIUniswapV2Pair(uniswapETHPool).sync();\r\n\t\tfor (uint256 i = 0; i < futurePools.length; i++) {\r\n\t\t\taddress futurePoolAddress = futurePools[i];\r\n\t\t\tIUniswapV2Pair(futurePoolAddress).sync();\r\n\t\t}\r\n        return _totalSupply;\r\n        }\r\n\t\t\r\n        else \r\n\t\t{\r\n        uint256 newScalingFactor = SMOONScalingFactor.mul(BASE.add(indexDelta)).div(BASE);\r\n        if (newScalingFactor < _maxScalingFactor())\r\n        {\r\n            SMOONScalingFactor = newScalingFactor;\r\n        }\r\n        else\r\n        {\r\n            SMOONScalingFactor = _maxScalingFactor();\r\n        }\r\n\r\n        _totalSupply = ((initSupply.sub(_rOwned[BurnAddress].div(currentRate))\r\n            .mul(SMOONScalingFactor).div(internalDecimals)));\r\n        emit Rebase(epoch, SMOONScalingFactor);\r\n\t\tIUniswapV2Pair(uniswapETHPool).sync();\r\n\t\tfor (uint256 i = 0; i < futurePools.length; i++) {\r\n\t\t\taddress futurePoolAddress = futurePools[i];\r\n\t\t\tIUniswapV2Pair(futurePoolAddress).sync();\r\n\t\t}\r\n        return _totalSupply;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getCurrentPoolAddress() public view returns(address) {\r\n        return currentPoolAddress;\r\n    }\r\n    \r\n    function getCurrentPairTokenAddress() public view returns(address) {\r\n        return currentPairTokenAddress;\r\n    }\r\n\t\r\n\tfunction _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        require(maxTxAmount >= 10**8 , 'SMOON: maxTxAmount should be greater than 0.1 SMOON');\r\n        _maxTxAmount = maxTxAmount;\r\n        emit MaxTxAmountUpdated(maxTxAmount);\r\n    }\r\n\t\r\n\tfunction _setMinTokensBeforeSwap(uint256 minTokensBeforeSwap) external onlyOwner() {\r\n        require(minTokensBeforeSwap >= 1 * 10**18 && minTokensBeforeSwap <= 2000 * 10**18, 'SMOON: minTokenBeforeSwap should be between 1 and 2000 SMOON');\r\n        require(minTokensBeforeSwap > _autoSwapCallerFee , 'SMOON: minTokenBeforeSwap should be greater than autoSwapCallerFee');\r\n        _minTokensBeforeSwap = minTokensBeforeSwap;\r\n        emit MinTokensBeforeSwapUpdated(minTokensBeforeSwap);\r\n    }\r\n\t\r\n\tfunction _setAutoSwapCallerFee(uint256 autoSwapCallerFee) external onlyOwner() {\r\n        require(autoSwapCallerFee >= 10**8, 'SMOON: autoSwapCallerFee should be greater than 0.1 SMOON');\r\n        _autoSwapCallerFee = autoSwapCallerFee;\r\n        emit AutoSwapCallerFeeUpdated(autoSwapCallerFee);\r\n    }\r\n\t\r\n\tfunction updateSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\t\r\n\tfunction _enableTrading() external onlyOwner() {\r\n        tradingEnabled = true;\r\n        TradingEnabled();\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SMOONSafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256)\r\n    {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n\r\n    function divRound(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        require(y != 0, \"Div by zero\");\r\n        uint256 r = x / y;\r\n        if (x % y != 0) {\r\n            r = r + 1;\r\n        }\r\n\r\n        return r;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapV2Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"autoSwapCallerFee\",\"type\":\"uint256\"}],\"name\":\"AutoSwapCallerFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scalingFactor\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairTokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRebaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRebaser\",\"type\":\"address\"}],\"name\":\"TransferredRebasership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"UniswapPairAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistTo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_BOTTOM\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_TOP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FYFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Rebaser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELL_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMOONScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TX_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoSwapCallerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoSwapCallerFee\",\"type\":\"uint256\"}],\"name\":\"_setAutoSwapCallerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"_setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"_setMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewards_\",\"type\":\"address\"}],\"name\":\"_setRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"futurePool\",\"type\":\"address\"}],\"name\":\"addfuturePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"futurePools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPairTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getSellBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getTxBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"positive\",\"type\":\"bool\"}],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"burnbottom\",\"type\":\"uint16\"}],\"name\":\"setBurnBottom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"burntop\",\"type\":\"uint16\"}],\"name\":\"setBurnTop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setFYFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"setTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setUniswapPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRebaser\",\"type\":\"address\"}],\"name\":\"transferRebasership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapETHPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapPairAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SWIFTMOON", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f162ad90558eeed715c1acf01816912063f756625260d4d8a245cb5577f66403"}