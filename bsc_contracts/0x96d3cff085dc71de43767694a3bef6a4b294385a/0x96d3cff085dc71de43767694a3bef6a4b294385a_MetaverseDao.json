{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev collections of functions ralted to the address type\r\n */\r\nlibrary Address {\r\n    \r\n    /**\r\n     * @dev returns true if `account` is a contract\r\n     */\r\n    function isContract(address account) internal view returns(bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly{\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    \r\n    /**\r\n     * @dev replacement for solidity's `transfer`: sends `amount` wei to `recipient`,\r\n     * forwarding all available gas and reverting on errors;\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance.\");\r\n        \r\n        (bool success,) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted.\");\r\n    }\r\n    \r\n    /**\r\n     * @dev performs a solidity function call using a low level `call`. A plain `call` is an\r\n     * unsafe replacement for a function call: use this function instead.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns(bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed.\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errMsg) internal returns(bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errMsg);\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    \r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errMsg) private returns(bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract.\");\r\n        \r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errMsg);\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n        if(!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n\r\n\r\n    function size(Map storage map) public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n    \r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\n\r\n\r\n// a library for performing various math operations\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow.\");\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow.\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errMsg) internal pure returns(uint256) {\r\n        require(b <= a, errMsg);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if(a == 0){\r\n            return 0;\r\n        }\r\n        \r\n        uint256 c = a * b;\r\n        require(c/a == b, \"SafeMath: mutiplication overflow.\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return div(a, b, \"SafeMath: division by zero.\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errMsg) internal pure returns(uint256) {\r\n        require(b > 0, errMsg);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero.\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errMsg) internal pure returns(uint256) {\r\n        require(b != 0, errMsg);\r\n        return a % b;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nlibrary SafeMathInt {\r\n    function add(int256 a, int256 b) internal pure returns(int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n    \r\n    function sub(int256 a, int256 b) internal pure returns(int256) {\r\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n        return a - b;\r\n    }\r\n    \r\n    function mul(int256 a, int256 b) internal pure returns(int256) {\r\n        require(!(a == -2**255 && b == -1) && !(b == -2**255 && a == -1));\r\n         int256 c = a * b;\r\n         require((b == 0) || (c/b == a));\r\n         return c;\r\n    }\r\n    \r\n    function div(int256 a, int256 b) internal pure returns(int256){\r\n        require(!(a == -2**255 && b == -1) && (b > 0));\r\n        return a/b;\r\n    }\r\n    \r\n    function toUint256Safe(int256 a) internal pure returns(uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns(int256){\r\n        int256 b = int256(a);\r\n        require(b >= 0, \"need >= 0\");\r\n        return b;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    /**\r\n     * @dev returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns(uint256);\r\n    \r\n    /**\r\n     * @dev returns the amount of tokens owned by account \r\n     */\r\n    function balanceOf(address account) external view returns(uint256);\r\n    \r\n    /**\r\n     * @dev moves amount tokens from the call's account to recipient.\r\n     * returns a bool value indicating whether the operation successed.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n    \r\n    /**\r\n     * @dev returns the remaining number of tokens that spender will be allowed to spend \r\n     * on behalf of owner through {transferFrom}. this is zero by default.\r\n     * \r\n     * his value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    \r\n    /**\r\n     * @dev sets amount as the allowance of spender over the caller's tokens. \r\n     * returns a bool value indicating whether the operation is successed.\r\n     * \r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n    \r\n    /**\r\n     * @dev moves amount tokens from sender to recipient using the allowance mechanism.\r\n     * amount is then deducted from the caller's allowance.\r\n     * \r\n     * returns a boolean value indicating whether the operation successed.\r\n     * \r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ninterface IDividendPayingToken {\r\n  \r\n  function dividendOf(address _owner) external view returns(uint256);\r\n\r\n  function withdrawDividend() external;\r\n\r\n  event DividendsDistributed(\r\n    address indexed from,\r\n    uint256 weiAmount\r\n  );\r\n\r\n  event DividendWithdrawn(\r\n    address indexed to,\r\n    uint256 weiAmount\r\n  );\r\n}\r\n\r\n\r\n\r\ninterface IDividendPayingTokenOptional {\r\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\r\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\r\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns(address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    \r\n    function _msgData() internal view virtual returns(bytes memory){\r\n        this;   // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    \r\n    event OwnershipTransferred(address indexed _previousOwner, address indexed newOwner);\r\n    \r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner.\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnerShip(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is zero address.\");\r\n        \r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n    \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view virtual returns(string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view virtual returns(uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns(uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns(uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public virtual override returns(bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view virtual override returns(uint256) {\r\n       return _allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns(bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns(bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance.\"));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decrease allowance bellow zero.\"));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address.\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance.\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev creates `amount` tokens and assign them to `account`, increasing the total supply.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to zero address.\");\r\n        \r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev destroys `amount` tokens from `account`, reducing the total supply.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address.\");\r\n        \r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance.\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address.\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address.\");\r\n        \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n    \r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes minting and burning.\r\n     */\r\n    function _beforeTokenTransfer(address sender, address recipient, uint256 amount) internal virtual { }\r\n    \r\n}\r\n\r\n\r\n\r\ncontract DividendPayingToken is ERC20, IDividendPayingToken, IDividendPayingTokenOptional {\r\n  using SafeMath for uint256;\r\n  using SafeMathUint for uint256;\r\n  using SafeMathInt for int256;\r\n\r\n\r\n  uint256 constant internal magnitude = 2**128;\r\n\r\n  uint256 internal magnifiedDividendPerShare;\r\n  uint256 internal lastAmount;\r\n  \r\n  address public dividendToken = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n\r\n  uint256 public totalDividendsDistributed;\r\n\r\n  \r\n  uint256 public _dividendLimitUsd = 3 * 10 ** 18;\r\n\r\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\r\n\r\n  }\r\n\r\n  receive() external payable { }\r\n\r\n  \r\n\r\n  function distributeDividends(uint256 amount) internal {\r\n    require(totalSupply() > 0);\r\n\r\n    if (amount > 0) {\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n        (amount).mul(magnitude) / totalSupply()\r\n      );\r\n      emit DividendsDistributed(msg.sender, amount);\r\n\r\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n    }\r\n  }\r\n\r\n  function withdrawDividend() public virtual override {\r\n    _withdrawDividendOfUser(payable(msg.sender));\r\n  }\r\n\r\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n    \r\n    if (_withdrawableDividend > _dividendLimitUsd) {\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n      bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\r\n\r\n      if(!success) {\r\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n        return 0;\r\n      }\r\n\r\n      return _withdrawableDividend;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n\r\n  function dividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawableDividendOf(_owner);\r\n  }\r\n\r\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n  }\r\n\r\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawnDividends[_owner];\r\n  }\r\n\r\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n      return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    \r\n  }\r\n\r\n  function _transfer(address from, address to, uint256 value) internal virtual override {\r\n    require(false);\r\n\r\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n  }\r\n\r\n  function _mint(address account, uint256 value) internal override {\r\n    super._mint(account, value);\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n    .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    \r\n  }\r\n\r\n  function _burn(address account, uint256 value) internal override {\r\n    super._burn(account, value);\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n    .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n\r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n    uint256 currentBalance = balanceOf(account);\r\n\r\n    if(newBalance > currentBalance) {\r\n      uint256 mintAmount = newBalance.sub(currentBalance);\r\n      _mint(account, mintAmount);\r\n    } else if(newBalance < currentBalance) {\r\n      uint256 burnAmount = currentBalance.sub(newBalance);\r\n      _burn(account, burnAmount);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract DividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public immutable minimumTokenBalanceForDividends;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event UnExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n    \r\n    event SendDividends(uint256 tokensSwapped,uint256 amount);\r\n\r\n    constructor() DividendPayingToken(\"METADAO_Dividend\", \"METADAO_Dividend2.0\") {\r\n        claimWait = 30 * 60;\r\n        minimumTokenBalanceForDividends = 0 * (10**19);\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    }\r\n\r\n    function _transfer(address, address, uint256)  internal pure override {\r\n        require(false, \"METADAO_Dividend: No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() public pure override {\r\n        require(false, \"METADAO_Dividend: withdrawDividend disabled.\");\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 300 && newClaimWait <= 86400, \"METADAO_Dividend: claimWait must be updated to between 5 mins and 24 hours\");\r\n        require(newClaimWait != claimWait, \"METADAO_Dividend: Cannot update claimWait to same value\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                        0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n                                    lastClaimTime.add(claimWait) :\r\n                                    0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n                                                    0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        if(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if(lastClaimTime > block.timestamp)  {\r\n            return false;\r\n        }\r\n\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n        if(excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n        if(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            tokenHoldersMap.set(account, newBalance);\r\n        }\r\n        else {\r\n            _setBalance(account, 0);\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n        \r\n        processAccount(account, true);\r\n        \r\n    }\r\n\r\n\r\n    function process(uint256 gas) public onlyOwner returns (uint256, uint256, uint256) {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if(numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if(canAutoClaim(lastClaimTimes[account])) {\r\n                if(processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if(gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if(amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function getExcludedFromDividends(address account) public view returns(bool) {\r\n        return excludedFromDividends[account];\r\n    }\r\n\r\n    function setDividendLimit(uint256 limit) public onlyOwner {\r\n        _dividendLimitUsd = limit;\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) public onlyOwner {\r\n        require(newToken != address(0), \"new address is zero address.\");\r\n        dividendToken = newToken;\r\n    }\r\n\r\n    function getWithdrawableDividendOf(address account) public view returns(uint256) {\r\n        return withdrawableDividendOf(account);\r\n    }\r\n\r\n    function swapAndDistributeDividends(address token) public onlyOwner {\r\n        uint256 usdt_before = IERC20(dividendToken).balanceOf(address(this));\r\n        uint256 tokenAmount = IERC20(token).balanceOf(address(this));\r\n        _swapTokensForUsdt(token, tokenAmount);\r\n        uint256 usdt_after = IERC20(dividendToken).balanceOf(address(this));\r\n        uint256 dividends = usdt_after.sub(usdt_before);\r\n        distributeDividends(dividends);\r\n        emit SendDividends(tokenAmount, dividends);\r\n    }\r\n\r\n    function _swapTokensForUsdt(address token, uint256 tokenAmount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = token;\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = dividendToken;\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp.add(180)\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract MetaverseDao is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private _balances;\r\n    address public pdcWbnbPair;// pair of this token and bnb\r\n    address public usdtWbnbPair;// pair of usdt and bnb\r\n    DividendTracker public dividendTracker;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address _blackhole = 0x000000000000000000000000000000000000dEaD;\r\n    address public _divReceiver;\r\n    \r\n    bool private inSwap = false;\r\n    uint256 private _maxTotal = 35 * 10 ** 7 * 10 ** 18 ;\r\n    uint256 private _maxSell = 1 * 10 ** 5 * 10 ** 18;// max amount to sell\r\n    uint256 public minimumAmountToSwap = 20 * 10 ** 18;// min (usdt) amount of tarcker to sell\r\n    uint8 private _decimals = 18;\r\n    uint256 public gasForProcessing = 300000;// gas for a dividend\r\n    uint256 public highestSellTaxRate = 45;\r\n    bool public enableFee = true;// Whether to charge transaction fees\r\n    bool public isAutoDividend = true;// Whether to automatically distribute dividends\r\n    uint256 constant internal priceMagnitude = 2 ** 64;\r\n    uint256 public basePrice;\r\n    uint256 public basePriceTimeInterval = 4320;\r\n    uint256 public basePricePreMin = 180;\r\n    uint256 public lastBasePriceTimestamp;\r\n    uint256 public startTimestamp;\r\n    uint256 public sellRateUpper = 100;\r\n    uint256 public sellRateBelow = 200;\r\n    uint256 public fixSellSlippage = 0;\r\n    uint256 public currentSellRate = 0;\r\n\r\n    constructor() ERC20(\"Metaverse-DAO\", \"METADAO2.0\") {\r\n        dividendTracker = new DividendTracker();\r\n        _divReceiver = address(dividendTracker);\r\n        uniswapV2Router = IUniswapV2Router02(router);\r\n        WBNB = uniswapV2Router.WETH();\r\n        startTimestamp = block.timestamp;\r\n\r\n        _mint(owner(), _maxTotal);\r\n\r\n        dividendTracker.excludeFromDividends(_blackhole);\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(owner());\r\n        dividendTracker.excludeFromDividends(_divReceiver);\r\n        dividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n\r\n        _isExcludedFromFee[_blackhole] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[_divReceiver] = true;\r\n        _isExcludedFromFee[address(uniswapV2Router)] = true;\r\n    }\r\n\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n    \r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(from != to, \"Sender and reciever must be different\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        //check max sell amount when selling, exclude tracker and owner\r\n        if(to == pdcWbnbPair && from != _divReceiver && from != owner()) {\r\n            require(amount <= _maxSell, \"Sell amount reach maximum.\");\r\n        }\r\n        \r\n        //check and update pairs\r\n        _checkLps();\r\n        \r\n        if((from == pdcWbnbPair || to == pdcWbnbPair) && enableFee) { \r\n            _updateBasePrice();\r\n            currentSellRate = _getSellTaxRate();\r\n        }\r\n\r\n        //Sell tokens in the tracker when sell base token\r\n        if(to == pdcWbnbPair){\r\n            if(!inSwap){\r\n                inSwap = true;\r\n                if(from != _divReceiver && isAutoDividend){\r\n                    _swapDividend();\r\n                }\r\n                inSwap = false;\r\n            }\r\n        }\r\n\r\n        if(to == pdcWbnbPair){\r\n            if(_isExcludedFromFee[from] || !enableFee){\r\n                super._transfer(from, to, amount);\r\n            } else {\r\n                _transferSellStandard(from, to, amount);\r\n            }\r\n        } else {\r\n            super._transfer(from, to, amount);\r\n        }\r\n        \r\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {}  catch {}\r\n        \r\n        if((from == pdcWbnbPair || to == pdcWbnbPair) && !inSwap && isAutoDividend) {\r\n            uint256 gas = gasForProcessing;\r\n\r\n            try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n            } catch {}\r\n        }\r\n    }\r\n\r\n    function _checkLps() private {\r\n        //create a uniswap pair for this new token\r\n        address _pdcWbnbPair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(this), WBNB);\r\n        if (pdcWbnbPair != _pdcWbnbPair) {\r\n            pdcWbnbPair = _pdcWbnbPair;\r\n            dividendTracker.excludeFromDividends(address(_pdcWbnbPair));\r\n        }\r\n        \r\n        address _usdtWbnbPair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(usdt), WBNB);\r\n        if (usdtWbnbPair != _usdtWbnbPair) {\r\n            usdtWbnbPair = _usdtWbnbPair;\r\n            dividendTracker.excludeFromDividends(address(_usdtWbnbPair));\r\n        }\r\n    }\r\n\r\n    function _updateBasePrice() private {\r\n        (uint256 _pdcReserve, uint256 _wbnbReserve) = _getPdcWbnbReserves();\r\n        if(_pdcReserve <= 0 || _wbnbReserve <= 0) return;\r\n\r\n        uint256 _currentPrice = getLpPriceNow();\r\n        if(lastBasePriceTimestamp == 0) {\r\n            lastBasePriceTimestamp = block.timestamp;\r\n            basePrice = _currentPrice;\r\n            return;\r\n        }\r\n\r\n        uint256 lastTimeMin = lastBasePriceTimestamp.div(60);\r\n        uint256 currentTimeMin = block.timestamp.div(60);\r\n        if(lastTimeMin == currentTimeMin) return;\r\n\r\n        uint256 startMin = startTimestamp.div(60);\r\n        uint256 minSinceBegin = currentTimeMin.sub(startMin).add(1);\r\n        uint256 timeInterval = basePriceTimeInterval;\r\n        \r\n        if (currentTimeMin > lastTimeMin) {\r\n            uint256 minSinceLast = currentTimeMin.sub(lastTimeMin);\r\n            if (minSinceBegin > timeInterval) {\r\n                if (minSinceLast > timeInterval) {\r\n                    basePrice = _currentPrice;\r\n                } else {\r\n                    basePrice = basePrice.mul(timeInterval.sub(minSinceLast)).div(timeInterval).add(_currentPrice.mul(minSinceLast).div(timeInterval));\r\n                }\r\n            } else {\r\n                uint256 denominator = minSinceBegin.add(basePricePreMin);\r\n                basePrice = basePrice.mul(denominator.sub(minSinceLast)).div(denominator).add(_currentPrice.mul(minSinceLast).div(denominator));\r\n            }\r\n        }\r\n\r\n        lastBasePriceTimestamp = block.timestamp;\r\n    }\r\n    \r\n    function getLpPriceNow() public view returns(uint256) {\r\n        (uint112 pwreserve0, uint112 pwreserve1, ) = IUniswapV2Pair(pdcWbnbPair).getReserves();\r\n        if(pwreserve0 == 0 || pwreserve1 == 0){\r\n            return 0;\r\n        }\r\n        address pwtoken0 = IUniswapV2Pair(pdcWbnbPair).token0();\r\n        uint256 pdPriceInWbnb;\r\n        if(pwtoken0 == address(this)){\r\n            pdPriceInWbnb = uint256(pwreserve1).mul(priceMagnitude).div(uint256(pwreserve0));\r\n        } else {\r\n            pdPriceInWbnb = uint256(pwreserve0).mul(priceMagnitude).div(uint256(pwreserve1));\r\n        }\r\n\r\n        (uint112 uwreserve0, uint112 uwreserve1, ) = IUniswapV2Pair(usdtWbnbPair).getReserves();\r\n        if(uwreserve0 == 0 || uwreserve1 == 0){\r\n            return 0;\r\n        }\r\n        address uwtoken0 = IUniswapV2Pair(usdtWbnbPair).token0();\r\n        uint256 wbnbPriceInUsdt;\r\n        if(uwtoken0 == WBNB){\r\n            wbnbPriceInUsdt = uint256(uwreserve1).mul(priceMagnitude).div(uint256(uwreserve0));\r\n        } else {\r\n            wbnbPriceInUsdt = uint256(uwreserve0).mul(priceMagnitude).div(uint256(uwreserve1));\r\n        }\r\n\r\n        return pdPriceInWbnb.mul(wbnbPriceInUsdt).div(priceMagnitude);\r\n    }\r\n    \r\n    function _getPdcWbnbReserves() private view returns(uint256 _pdcReserve, uint256 _wbnbReserve) {\r\n        (uint112 reserve0, uint112 reserve1, ) = IUniswapV2Pair(pdcWbnbPair).getReserves();\r\n        address token0 = IUniswapV2Pair(pdcWbnbPair).token0();\r\n        if(token0 == address(this)){\r\n            _pdcReserve = uint256(reserve0);\r\n            _wbnbReserve = uint256(reserve1);\r\n        } else {\r\n            _pdcReserve = uint256(reserve1);\r\n            _wbnbReserve = uint256(reserve0);\r\n        }\r\n    }\r\n\r\n    function _getWbnbUsdtReserves() private view returns(uint256 _wbnbReserve, uint256 _usdtReserve) {\r\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(usdtWbnbPair).getReserves();\r\n        address token0 = IUniswapV2Pair(usdtWbnbPair).token0();\r\n        if (token0 == WBNB) {\r\n            _wbnbReserve = uint256(reserve0);\r\n            _usdtReserve = uint256(reserve1);\r\n        } else {\r\n            _wbnbReserve = uint256(reserve1);\r\n            _usdtReserve = uint256(reserve0);\r\n        }\r\n    }\r\n\r\n    function _getAmountOutUsdt(uint256 tokenAmount) private view returns (uint256) {\r\n        if (tokenAmount <= 0) return 0;\r\n        (uint256 _pdcReserve, uint256 _wbnbReserve) = _getPdcWbnbReserves();\r\n        if (_wbnbReserve <= 0 || _pdcReserve <= 0) return 0;\r\n        uint256 wbnbOut = uint256(_getAmountOut(tokenAmount, _pdcReserve, _wbnbReserve));\r\n        \r\n        (uint256 _wbnbReserve1, uint256 _usdtReserve) = _getWbnbUsdtReserves();\r\n        if (_wbnbReserve1 <= 0 || _usdtReserve <= 0) return 0;\r\n        return uint256(_getAmountOut(wbnbOut, _wbnbReserve1, _usdtReserve)); \r\n    }\r\n\r\n    function _getAmountOutWbnb(uint256 tokenAmount) private view returns (uint256) {\r\n        if (tokenAmount <= 0) return 0;\r\n        (uint256 _pdcReserve, uint256 _wbnbReserve) = _getPdcWbnbReserves();\r\n        if (_wbnbReserve <= 0 || _pdcReserve <= 0) return 0;\r\n        return uint256(_getAmountOut(tokenAmount, _pdcReserve, _wbnbReserve));\r\n    }\r\n\r\n    function _getAmountInPd(uint256 amountOut) private view returns(uint256){\r\n        (uint256 _pdcReserve, uint256 _wbnbReserve) = _getPdcWbnbReserves();\r\n        if (_wbnbReserve <= 0 || _pdcReserve <= 0) return 0;\r\n        return uint256(_getAmountIn(amountOut, _pdcReserve, _wbnbReserve));\r\n    }\r\n\r\n    function _getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) private pure returns (uint amountIn) {\r\n        if (amountOut <= 0) return 0;\r\n        if (reserveIn <= 0) return 0;\r\n        if (reserveOut <= 0) return 0;\r\n        uint numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(9975);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    function _getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) private pure returns (uint amountOut) {\r\n        if (amountIn <= 0) return 0;\r\n        if (reserveIn <= 0) return 0;\r\n        if (reserveOut <= 0) return 0;\r\n        uint amountInWithFee = amountIn.mul(9975);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n    \r\n    // Sell tokens in the tracker\r\n    function _swapDividend() private {\r\n        uint256 divBal = balanceOf(_divReceiver);\r\n        uint256 divBalInUsdt = _getAmountOutUsdt(divBal);\r\n        if (divBalInUsdt >= minimumAmountToSwap) {\r\n            _approve(address(dividendTracker), address(uniswapV2Router), divBal + 10000);\r\n            dividendTracker.swapAndDistributeDividends(address(this));\r\n        }\r\n    }\r\n\r\n    function _transferSellStandard(address from, address to, uint256 amount) private {\r\n        uint256 totalFee = _getSellFees(amount);\r\n        uint256 transferAmount = amount.sub(totalFee);\r\n\r\n        super._transfer(from, _divReceiver, totalFee);\r\n        super._transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function _getSellFees(uint256 amount) private view returns (uint256) {\r\n        uint256 amountOutWbnb = _getAmountOutWbnb(amount);\r\n        uint256 amountOutWbnbAfterFee = amountOutWbnb.sub(amountOutWbnb.mul(currentSellRate).div(10000));\r\n        uint256 amountInPd = _getAmountInPd(amountOutWbnbAfterFee);\r\n        uint256 fee = amount.sub(amountInPd);\r\n        return fee;\r\n    }\r\n\r\n    function _getSellTaxRate() private view returns (uint256) {\r\n        if(fixSellSlippage > 0){\r\n            return _convertToSellSlippage(fixSellSlippage);\r\n        }\r\n\r\n        uint256 rate = getBasePriceRate();\r\n        if (rate == 0 || rate == 1000) {\r\n            return _convertToSellSlippage(100);\r\n        }\r\n        uint256 diff;\r\n        uint256 rateToReturn;\r\n        if (rate > 1000) {\r\n            diff = rate.sub(1000);\r\n            rateToReturn = diff.mul(sellRateUpper).div(100).add(100);\r\n            if (rateToReturn > highestSellTaxRate.mul(10)) {\r\n                return _convertToSellSlippage(highestSellTaxRate.mul(10));\r\n            } else {\r\n                return _convertToSellSlippage(rateToReturn);\r\n            }\r\n        }\r\n\r\n        diff = uint256(1000).sub(rate);\r\n        rateToReturn = diff.mul(sellRateBelow).div(100).add(100);\r\n        if (rateToReturn > highestSellTaxRate.mul(10)) {\r\n            return _convertToSellSlippage(highestSellTaxRate.mul(10));\r\n        } else {\r\n            return _convertToSellSlippage(rateToReturn);\r\n        }\r\n    }\r\n\r\n    function getSellTaxRate() public view returns (uint256) {\r\n        if(fixSellSlippage > 0){\r\n            return (fixSellSlippage);\r\n        }\r\n\r\n        uint256 rate = getBasePriceRate();\r\n        if (rate == 0 || rate == 1000) {\r\n            return (100);\r\n        }\r\n        uint256 diff;\r\n        uint256 rateToReturn;\r\n        if (rate > 1000) {\r\n            diff = rate.sub(1000);\r\n            rateToReturn = diff.mul(sellRateUpper).div(100).add(100);\r\n            if (rateToReturn > highestSellTaxRate.mul(10)) {\r\n                return (highestSellTaxRate.mul(10));\r\n            } else {\r\n                return (rateToReturn);\r\n            }\r\n        }\r\n\r\n        diff = uint256(1000).sub(rate);\r\n        rateToReturn = diff.mul(sellRateBelow).div(100).add(100);\r\n        if (rateToReturn > highestSellTaxRate.mul(10)) {\r\n            return (highestSellTaxRate.mul(10));\r\n        } else {\r\n            return (rateToReturn);\r\n        }\r\n    }\r\n\r\n    function _convertToSellSlippage(uint256 taxRate) private pure returns(uint256) {\r\n        return uint256(10000).sub(uint256(10000000).div(uint256(1000).add(taxRate)));\r\n    }\r\n\r\n    function getBasePriceRate() public view returns (uint256) {\r\n        uint256 basePriceNow = getBasePriceNow();\r\n        if (basePriceNow == 0) return 0;\r\n        uint256 lpPrice = getLpPriceNow();\r\n        if (lpPrice == 0) return 0;\r\n        return lpPrice.mul(1000).div(basePriceNow);\r\n    }\r\n\r\n    function getBasePriceNow() public view returns(uint256) {\r\n        uint256 _currentLpPrice = getLpPriceNow();\r\n        if (basePrice == 0) return _currentLpPrice;\r\n        uint256 lastTimeMin = lastBasePriceTimestamp.div(60);\r\n        uint256 currentTimeMin = block.timestamp.div(60);\r\n        uint256 timeInterval = basePriceTimeInterval;\r\n        if (currentTimeMin == lastTimeMin) {\r\n            return basePrice;\r\n        } else {\r\n            uint256 startMin = uint256(startTimestamp).div(60);\r\n            uint256 minSinceBegin = currentTimeMin.sub(startMin).add(1);\r\n            uint256 minSinceLast = currentTimeMin.sub(lastTimeMin);\r\n            if (minSinceBegin > timeInterval) {\r\n                if(minSinceLast > timeInterval) {\r\n                    return _currentLpPrice;\r\n                } else {\r\n                    return basePrice.mul(timeInterval.sub(minSinceLast)).div(timeInterval).add(_currentLpPrice.mul(minSinceLast).div(timeInterval));\r\n                }\r\n            } else {\r\n                uint256 denominator = minSinceBegin.add(basePricePreMin);\r\n                return basePrice.mul(denominator.sub(minSinceLast)).div(denominator).add(_currentLpPrice.mul(minSinceLast).div(denominator));\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setBasePriceTimeInterval(uint256 _basePriceTimeInterval) public onlyOwner{\r\n        basePriceTimeInterval = _basePriceTimeInterval;\r\n    }\r\n    \r\n    function setHighestSellTaxRate (uint256 _highestSellTaxRate) public onlyOwner{\r\n        highestSellTaxRate = _highestSellTaxRate;\r\n    }\r\n    \r\n    function setMinimumAmountToSwap(uint256 _minimumAmountToSwap) public onlyOwner{\r\n        minimumAmountToSwap = _minimumAmountToSwap;\r\n    }\r\n    \r\n    function setMaxSell(uint256 __maxSellAmount) public onlyOwner{\r\n        _maxSell = __maxSellAmount;\r\n    }\r\n    \r\n    function setIsAutoDividend(bool _isAutoDividend) public onlyOwner{\r\n        isAutoDividend = _isAutoDividend;\r\n    }\r\n\r\n    function updateDividendTracker(address newAddress) public onlyOwner {\r\n        require(newAddress != address(dividendTracker), \"The dividend tracker already has that address\");\r\n\r\n        DividendTracker newDividendTracker = DividendTracker(payable(newAddress));\r\n\r\n        require(newDividendTracker.owner() == address(this), \"The new dividend tracker must be owned by the this token contract\");\r\n\r\n        newDividendTracker.excludeFromDividends(_blackhole);\r\n        newDividendTracker.excludeFromDividends(owner());\r\n        newDividendTracker.excludeFromDividends(address(this));\r\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\r\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        newDividendTracker.excludeFromDividends(pdcWbnbPair);\r\n        newDividendTracker.excludeFromDividends(usdtWbnbPair);\r\n\r\n        _divReceiver = address(newDividendTracker);\r\n        _isExcludedFromFee[_divReceiver] = true;\r\n\r\n        dividendTracker = newDividendTracker;\r\n    }\r\n\r\n    function excludeFromFees(address _account, bool _excluded) public onlyOwner {\r\n        require(_isExcludedFromFee[_account] != _excluded, \"Account is already the value of 'excluded'\");\r\n        _isExcludedFromFee[_account] = _excluded;\r\n        emit ExcludeFromFees(_account, _excluded);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 _newValue) public onlyOwner {\r\n        require(_newValue >= 200000 && _newValue <= 500000, \"gasForProcessing must be between 200,000 and 500,000\");\r\n        require(_newValue != gasForProcessing, \"Cannot update gasForProcessing to same value\");\r\n        gasForProcessing = _newValue;\r\n        emit GasForProcessingUpdated(_newValue, gasForProcessing);\r\n    }\r\n\r\n    function setEnableFee(bool _enableFee) public onlyOwner{\r\n        enableFee = _enableFee;\r\n    }\r\n\r\n    function getExcludeFromFee(address addr) public view returns(bool) {\r\n        return _isExcludedFromFee[addr];\r\n    }\r\n\r\n    function updateFixSellSlippage(uint256 _fixSellSlippage) public onlyOwner{\r\n        fixSellSlippage = _fixSellSlippage;\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account) public view returns (uint256) {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function getExcludedFromDividends(address account) public view returns (bool){\r\n        return dividendTracker.getExcludedFromDividends(account);\r\n    }\r\n\r\n    function setDividendLimit(uint256 limit) public onlyOwner{\r\n        dividendTracker.setDividendLimit(limit);\r\n    }\r\n\r\n    function setDividendToken(address newToken) public onlyOwner{\r\n        dividendTracker.setDividendTokenAddress(newToken);\r\n    }\r\n\r\n    function updateClaimWait(uint256 claim) public onlyOwner{\r\n        dividendTracker.updateClaimWait(claim);\r\n    }\r\n\r\n    function getWithdrawableDividendOf(address account) public view returns(uint256) {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function excludeFromDividends(address addr) public onlyOwner{\r\n        dividendTracker.excludeFromDividends(addr);\r\n    }\r\n\r\n    function withdrawableDividendOf(address addr) public view returns(uint256) {\r\n        return dividendTracker.withdrawableDividendOf(addr);\r\n    }\r\n\r\n    function withdrawnDividendOf(address addr) public view returns(uint256) {\r\n        return dividendTracker.withdrawnDividendOf(addr);\r\n    }\r\n\r\n    function setSellRateUpper(uint256 newTax) public onlyOwner{\r\n        sellRateUpper = newTax;\r\n    }\r\n\r\n    function setSellRateBelow(uint256 newTax) public onlyOwner{\r\n        sellRateBelow = newTax;\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_divReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePricePreMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePriceTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSellRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixSellSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasePriceNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasePriceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpPriceNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getWithdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestSellTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBasePriceTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAmountToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pdcWbnbPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRateBelow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRateUpper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basePriceTimeInterval\",\"type\":\"uint256\"}],\"name\":\"setBasePriceTimeInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setDividendLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enableFee\",\"type\":\"bool\"}],\"name\":\"setEnableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highestSellTaxRate\",\"type\":\"uint256\"}],\"name\":\"setHighestSellTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAutoDividend\",\"type\":\"bool\"}],\"name\":\"setIsAutoDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__maxSellAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumAmountToSwap\",\"type\":\"uint256\"}],\"name\":\"setMinimumAmountToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"setSellRateBelow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"setSellRateUpper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claim\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fixSellSlippage\",\"type\":\"uint256\"}],\"name\":\"updateFixSellSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtWbnbPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaverseDao", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:f76dfe29d20e4205d5a337cfa95a646f8e460a07", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fcc7f98addefbd4357fc8e4f3fc51ed0263bfa92bb28185d25d8511067f57105"}