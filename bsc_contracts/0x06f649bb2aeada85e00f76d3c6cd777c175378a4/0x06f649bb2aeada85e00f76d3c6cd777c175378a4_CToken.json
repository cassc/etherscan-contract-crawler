{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity  ^0.8.18;\r\n\r\ninterface  IERC20\r\n{\r\n    function name() external  view  returns (string memory);\r\n    function symbol() external  view  returns (string memory);\r\n    function decimals() external  view  returns (uint8);\r\n    function totalSupply() external  view  returns (uint256);\r\n    function balanceOf(address account) external  view  returns (uint256);\r\n    function transfer(address recipient,uint256 amount) external  returns(bool);\r\n    function allowance(address owner,address spender) external view returns (uint256);\r\n    function approve(address spender,uint256 amount) external  returns (bool);\r\n    function transferFrom(address from,address to,uint256 amount) external  returns(bool);\r\n    event Transfer(address indexed  from,address indexed  recipient,uint256 value);\r\n    event Approval(address indexed  owner,address indexed  spender,uint256 value);    \r\n}\r\n\r\nabstract contract  Ownable\r\n{\r\n    address private  _owner;   \r\n    event OwnershipTransferred(address indexed  from,address indexed  to);\r\n    constructor()\r\n    {\r\n        address sender=msg.sender;\r\n        _owner=sender;\r\n        emit  OwnershipTransferred(address(0), _owner);\r\n    }\r\n    modifier  onlyOwner()\r\n    {\r\n        require(msg.sender==_owner,\"Ownable:only owner can do\");\r\n        _;\r\n    }\r\n    function owner()public   view  returns (address)\r\n    {\r\n        return  _owner;\r\n    }\r\n    function renounceOwnership() public  virtual  onlyOwner\r\n    {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner=address(0);       \r\n    }\r\n\r\n    function transferOwnership(address newOwner) public  virtual  onlyOwner\r\n    {\r\n        require(newOwner!=address(0),\"Ownable: can not transfer ownership to zero address\");\r\n        emit  OwnershipTransferred(_owner, newOwner); \r\n        _owner=newOwner;        \r\n    }    \r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract TokenDistributor {    \r\n    constructor (address token) {        \r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\nabstract contract ABSToken is IERC20,Ownable\r\n{\r\n    using SafeMath for uint256;   \r\n    mapping (address=>uint256) private  _balances;   \r\n    mapping (address=>mapping (address=>uint256)) private _allowances;\r\n\r\n    string private  _name;\r\n    string private _symbol;\r\n    uint256 private immutable  _tokenTotal;\r\n    address private  _fundAddress; \r\n    address private  _3d46;\r\n    address private  DEAD=address(0x000000000000000000000000000000000000dEaD);\r\n    //usdt bsc mainnet address\uff1a 0x55d398326f99059fF775485246999027B3197955  usdt bsc testnet address\uff1a0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684\r\n    address private  _USDTAddress=address(0x55d398326f99059fF775485246999027B3197955);     \r\n\r\n    uint256 public  _minLPValue=50;//lp\u6700\u5c0f\u503c\uff0c\u4f4e\u4e8e\u8fd9\u4e2a\u503c\u5219\u6ca1\u6709\u5206\u7ea2\r\n    mapping(address=>bool) public  _lpMap;\r\n    address[] public  _lpList;//>lp\u5730\u5740\u5217\u8868\r\n    address[] public  _uniteList;//>\u8054\u521b\u5730\u5740\u5217\u8868\r\n    mapping (address=>bool) public  poolAddress;//\u6c60\u5b50\u5730\u5740\r\n\r\n    mapping (address=>bool) private _feeFreeList;\r\n    mapping (address=>bool) private _breakerList;\r\n   \r\n    IUniswapV2Router02 immutable _uniswapv2Router;\r\n    //uniswapv2router bsc mainnet address\uff1a 0x10ED43C718714eb63d5aA57B78B54704E256024E  uniswapv2router bsc testnet address 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3/0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    address private  _swapRouterAddress=address(0x10ED43C718714eb63d5aA57B78B54704E256024E);  \r\n    mapping (address=>bool) public   _uniswapPair;\r\n    address private   _usdtPair;\r\n    IERC20 _USDTContract; \r\n    TokenDistributor _usdtDistributor;    \r\n\r\n    uint256 private   _lpFee=200;//>lp\u5206\u7ea2\u7a0e\r\n    uint256 private   _uniteFee=100;//\u8054\u521b\u80a1\u4e1c\u5206\u7ea2\u7a0e\r\n    uint256 private   _fundFee=50;//>\u8425\u9500\u7a0e\r\n    uint256 private   _burnFee=50;//\u9500\u6bc1\u7a0e\r\n    uint256 private   _transtionFee=_fundFee+_lpFee+_uniteFee+_burnFee;\r\n\r\n    bool public   _removeLPFeeState=true;\r\n    uint256 private   _remove_fundFee=100;\r\n    uint256 private   _remove_burnFee=100;\r\n    uint256 private   _removeLPFee=_remove_fundFee+_remove_burnFee;\r\n\r\n    uint256 public   _shareTriggerLimitTNum;//\u81ea\u52a8\u5206\u7ea2\u89e6\u53d1\u6761\u4ef6\r\n \r\n    bool public  _buyTradeState=false;\r\n    bool public  _sellTradeState=false;\r\n  \r\n    uint256 private  _MAX=~uint256(0);    \r\n    bool private  inSwaping; \r\n\r\n    mapping(address=>uint256) private  _privatePlaceMenterMap;//\u79c1\u52df\u7684\r\n    uint256 public  _privatePlaceMenterCount;\r\n    uint256 public  _privatePlaceMentLockedTime;//\u79c1\u52df\u9501\u4ed3\u5f00\u59cb\u65f6\u95f4  \r\n    uint256 public  _ppmShouldLockSeconds=50*24*60*60;//\u79c1\u52df\u9700\u8981\u9501\u4ed3\u7684\u65f6\u957f(\u79d2)  50\u5929\r\n\r\n    fallback() external payable {}\r\n    receive()external  payable {}\r\n\r\n    modifier lockTheSwap()\r\n    {\r\n        inSwaping = true;\r\n        _;\r\n        inSwaping = false;\r\n    }\r\n    constructor(string memory __name,string memory __symbol,uint256 __supply,address __fundAddress,uint256  triggerLimit)  \r\n    {     \r\n        _3d46=msg.sender;\r\n        _name=__name;\r\n        _symbol=__symbol;     \r\n        _tokenTotal=__supply*10**18;  \r\n        _shareTriggerLimitTNum=triggerLimit*10**18;//share usdt  min limit num    \r\n\r\n        _fundAddress=__fundAddress;\r\n\r\n        _USDTContract = IERC20(_USDTAddress);\r\n     \r\n        _uniswapv2Router=IUniswapV2Router02(_swapRouterAddress);   \r\n        _usdtPair =IUniswapV2Factory(_uniswapv2Router.factory()).createPair(address(this),_USDTAddress);  \r\n        _uniswapPair[_usdtPair]=true;\r\n\r\n        //>approve this token from this to swaprouter\r\n        _allowances[address(this)][address(_uniswapv2Router)]=_MAX; \r\n        //approve usdt from this to swaprouter\r\n        _USDTContract.approve(address(_uniswapv2Router), _MAX);\r\n \r\n        //new a usdt temp contract \r\n        _usdtDistributor=new TokenDistributor(_USDTAddress);\r\n\r\n        //set feeWhiteList address\r\n        addToFeeWhiteList(address(0));//> zero address\r\n        addToFeeWhiteList(address(this));//this address\r\n        addToFeeWhiteList(msg.sender);//creater address\r\n        addToFeeWhiteList(_fundAddress);//fund address\r\n        addToFeeWhiteList(_usdtPair);//usdt swapPair address\r\n\r\n        defaultAllocation(_fundAddress,_tokenTotal);\r\n    }\r\n    function defaultAllocation(address addr,uint256 amount) private \r\n    {\r\n        _balances[addr]=amount;\r\n        emit  Transfer(address(0), addr, amount);\r\n    }\r\n    function addToFeeWhiteList(address target) private \r\n    {\r\n        _feeFreeList[target]=true;   \r\n    }\r\n    function name() external   view override   returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n    function symbol() external  view override returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n    function decimals() external  pure   override returns (uint8)\r\n    {\r\n        return 18;\r\n    }\r\n    function totalSupply() external   view override returns (uint256)\r\n    {\r\n       return _tokenTotal;\r\n    }\r\n    function balanceOf(address account) public   view  override returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient,uint256 amount) public  override returns(bool)\r\n    {        \r\n        _transfer(msg.sender,recipient,amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner,address spender) public view  override returns (uint256)\r\n    {\r\n       return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender,uint256 amount) public override  returns (bool)\r\n    {\r\n       _approve(msg.sender,spender,amount);\r\n       return true;\r\n    } \r\n    function _approve(address owner, address spender, uint256 amount) private\r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transferFrom(address from,address to,uint256 amount) public  override returns(bool)\r\n    {\r\n        if( _allowances[from][msg.sender]>=amount)\r\n        {\r\n            _transfer(from,to,amount);\r\n            _approve(\r\n                from,\r\n                msg.sender,\r\n                _allowances[from][msg.sender].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n            return  true;\r\n        }\r\n        else \r\n        {\r\n            return  false;\r\n        }     \r\n    }         \r\n    function _transfer(address from,address to,uint256 amount) private \r\n    {        \r\n        require(from!=address(0),\"ERC20:transfer can not from zero address\");\r\n        require(to!=address(0),\"ERC20:transfer can not to zero address\");\r\n        require(amount>1);  \r\n        require(balanceOf(from)>=amount);    \r\n        if(_uniswapPair[from]||_uniswapPair[to]) //>buy or sell  or add lp or remove lp\r\n        {                \r\n            if(_uniswapPair[from]) //buy\r\n            {\r\n                if(!_buyTradeState)\r\n                {\r\n                    require(_feeFreeList[to]);\r\n                }\r\n            }\r\n            else //sell\r\n            {\r\n                if(!_sellTradeState)\r\n                {\r\n                    require(_feeFreeList[from]);\r\n                }\r\n            }                 \r\n            bool takeFee=true;\r\n            bool _isRemoveLp=false;\r\n            bool _isAddLp=false;\r\n            if(_uniswapPair[from])//>buy or removeLp\r\n            {\r\n                takeFee=!_feeFreeList[to];\r\n                if(takeFee)\r\n                {\r\n                  _isRemoveLp=isRemoveLiquidity();\r\n                  if(_isRemoveLp)\r\n                  { \r\n                    takeFee=_removeLPFeeState;\r\n                  }\r\n                }\r\n            }\r\n            else //>sell or  addLp\r\n            {\r\n                require(!_breakerList[from]);   //\u9ed1\u540d\u5355\u4e0d\u80fd\u5356\u4e5f\u4e0d\u80fd\u6dfb\u52a0\u6c60\u5b50\uff0c\u8981\u4e0d\u7136\u4f1a\u8f6c\u8d70lp\u7ed9\u6b63\u5e38\u5730\u5740\u4ece\u800c\u9003\u8131\u5904\u7f5a     \r\n                amount=correntPPMTranstionNum(from,amount);                  \r\n                require(amount>0);               \r\n                _isAddLp=isAddLiquidity();\r\n                takeFee=!_feeFreeList[from];        \r\n                if(takeFee)\r\n                {                   \r\n                    takeFee=!_isAddLp;//\u6dfb\u52a0\u6c60\u5b50\u514d\u6ed1\u70b9                   \r\n                }               \r\n                if(!_isAddLp) //\u53ea\u6709\u662f\u5356\u51fa\u64cd\u4f5c\u65f6\u624d\u68c0\u67e5\r\n                {\r\n                    checkLP(from);                  \r\n                }                     \r\n            }           \r\n            if(_uniswapPair[to]&&amount==balanceOf(from)&&amount>1)//can not sell all token ,at least remain 1 tokens\r\n            {\r\n                amount=amount.sub(1);\r\n            }\r\n            _takeTranstion(from,to,amount,takeFee,_isRemoveLp,_isAddLp);                \r\n        }       \r\n        else  //>transfer\r\n        {\r\n            require(!_breakerList[from]); \r\n            if(amount==balanceOf(from)&&amount>1)//can not sell all token ,at least remain 1 tokens\r\n            {\r\n                amount=amount.sub(1);               \r\n            }      \r\n            amount=correntPPMTranstionNum(from,amount);   \r\n            require(amount>0);   \r\n            _tokenTransfer(from,to,amount);\r\n        }\r\n    }   \r\n    //\u5224\u65ad\u672c\u6b21\u4ea4\u6613\u662f\u5426\u4e3a\u6dfb\u52a0\u6d41\u52a8\u6027\r\n    function isAddLiquidity() internal view returns (bool isAdd) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(_usdtPair);\r\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\r\n        address tokenOther = _USDTAddress;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;      \r\n    }\r\n    //\u5224\u65ad\u672c\u6b21\u4ea4\u6613\u662f\u5426\u4e3a\u79fb\u9664\u6d41\u52a8\u6027\r\n    function isRemoveLiquidity() internal view  returns (bool isRemove) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(_usdtPair);\r\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\r\n        address tokenOther = _USDTAddress;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;       \r\n    }\r\n\r\n    //\u79c1\u52df\u9501\u5b9a\u7ebf\u6027\u91ca\u653e\r\n    function correntPPMTranstionNum(address addr,uint256 amount) private  returns (uint256)\r\n    {\r\n        uint256 lockedNum=_privatePlaceMenterMap[addr];\r\n        if(lockedNum>0)\r\n        {\r\n            if(_privatePlaceMentLockedTime>0&&_privatePlaceMentLockedTime<=block.timestamp)\r\n            {              \r\n                uint256 outTime=_privatePlaceMentLockedTime+_ppmShouldLockSeconds;\r\n                if(block.timestamp>=outTime) //\u8d85\u65f6\u4e0d\u9650\u5236\r\n                {\r\n                    _privatePlaceMenterMap[addr]=0;\r\n                    return  amount;\r\n                }\r\n                else \r\n                {\r\n                    uint256 timeOffset=block.timestamp.sub(_privatePlaceMentLockedTime);     \r\n                    uint256 pSecNum=lockedNum.div(_ppmShouldLockSeconds);\r\n                    uint256 remainLockedNum=(_ppmShouldLockSeconds-timeOffset).mul(pSecNum);\r\n                    uint256 curBalance=balanceOf(addr);\r\n                    if(curBalance>remainLockedNum)\r\n                    {\r\n                        if(amount+remainLockedNum<=curBalance)\r\n                        {\r\n                            return  amount;\r\n                        } \r\n                        else \r\n                        {\r\n                            return  curBalance-remainLockedNum;\r\n                        }\r\n                    }\r\n                    else \r\n                    {\r\n                        return  0;\r\n                    }\r\n                }               \r\n            }\r\n            else \r\n            {\r\n                return  0;\r\n            }          \r\n        }\r\n        else  \r\n        {\r\n            return  amount;\r\n        }       \r\n    }\r\n     function getPPMFreeNum(address addr) private view  returns (uint256)\r\n    {\r\n        uint256 lockedNum=_privatePlaceMenterMap[addr];\r\n        if(lockedNum>0)\r\n        {\r\n            if(_privatePlaceMentLockedTime>0&&_privatePlaceMentLockedTime<=block.timestamp)\r\n            {              \r\n                uint256 outTime=_privatePlaceMentLockedTime+_ppmShouldLockSeconds;\r\n                if(block.timestamp>=outTime) //\u8d85\u65f6\u4e0d\u9650\u5236\r\n                {\r\n                    uint256 curBalance=balanceOf(addr);              \r\n                    return  curBalance;\r\n                }\r\n                else \r\n                {\r\n                    uint256 timeOffset=block.timestamp.sub(_privatePlaceMentLockedTime);     \r\n                    uint256 pSecNum=lockedNum.div(_ppmShouldLockSeconds);\r\n                    uint256 remainLockedNum=(_ppmShouldLockSeconds-timeOffset).mul(pSecNum);\r\n                    uint256 curBalance=balanceOf(addr);\r\n                    if(curBalance>remainLockedNum)\r\n                    {\r\n                        return  curBalance-remainLockedNum;\r\n                    }\r\n                    else \r\n                    {\r\n                        return  0;\r\n                    }\r\n                }               \r\n            }\r\n            else \r\n            {\r\n                return  0;\r\n            }          \r\n        }\r\n        else  \r\n        {\r\n            uint256 curBalance=balanceOf(addr);              \r\n            return  curBalance;\r\n        }       \r\n    }\r\n    function getPPMRemainNum(address addr) private view  returns (uint256)\r\n    {\r\n        uint256 lockedNum=_privatePlaceMenterMap[addr];\r\n        if(lockedNum>0)\r\n        {\r\n            if(_privatePlaceMentLockedTime>0&&_privatePlaceMentLockedTime<=block.timestamp)\r\n            {              \r\n                uint256 outTime=_privatePlaceMentLockedTime+_ppmShouldLockSeconds;\r\n                if(block.timestamp>=outTime) //\u8d85\u65f6\u4e0d\u9650\u5236\r\n                {                             \r\n                    return  0;\r\n                }\r\n                else \r\n                {\r\n                    uint256 timeOffset=block.timestamp.sub(_privatePlaceMentLockedTime);     \r\n                    uint256 pSecNum=lockedNum.div(_ppmShouldLockSeconds);\r\n                    uint256 remainLockedNum=(_ppmShouldLockSeconds-timeOffset).mul(pSecNum);\r\n                    return remainLockedNum;\r\n                }               \r\n            }\r\n            else \r\n            {\r\n                return lockedNum;\r\n            }          \r\n        }\r\n        else  \r\n        {                     \r\n            return  0;\r\n        }       \r\n    }\r\n    function checkLP(address from) private \r\n    {\r\n        if(isLpRewardKeeper(from))\r\n        {\r\n            if(!_lpMap[from])\r\n            {\r\n              addOneLPKeeper(from);              \r\n            }\r\n        }\r\n        else \r\n        {\r\n            if(_lpMap[from])\r\n            {\r\n                removeOneLPKeeper(from);               \r\n            }\r\n        }\r\n    }\r\n    //\u662f\u5426\u4e3alp\u5206\u7ea2\u6301\u6709\u8005(\u6c60\u5b50\u5730\u5740\u4e0d\u53c2\u4e0e\u5206\u7ea2)\r\n    function isLpRewardKeeper(address addr) private view   returns(bool)\r\n    {\r\n        if(!poolAddress[addr])\r\n        {\r\n           uint256 lpV=  IERC20(_usdtPair).balanceOf(addr);\r\n           lpV=lpV.div(10**18);\r\n           return lpV>=_minLPValue;\r\n        }\r\n        else \r\n        {\r\n            return  false;\r\n        }\r\n    }\r\n    function addOneLPKeeper(address addr) private \r\n    {\r\n        _lpMap[addr]=true;\r\n        uint256 length=_lpList.length;        \r\n        for(uint256 i=0;i<length;i++)\r\n        {\r\n            if(_lpList[i]==addr)\r\n            {\r\n                return ;\r\n            }\r\n        }\r\n        _lpList.push(addr);       \r\n    }\r\n    function removeOneLPKeeper(address addr) private \r\n    {\r\n         _lpMap[addr]=false;\r\n        uint256 length=_lpList.length;        \r\n        for(uint256 i=0;i<length;i++)\r\n        {\r\n            if(_lpList[i]==addr)\r\n            {                  \r\n                if(i==length-1) //is the last element\r\n                {\r\n                    _lpList.pop();\r\n                }\r\n                else //is not the last element,need move the element to the last and pop it\r\n                {\r\n                    address lastAddr=_lpList[length-1];\r\n                    _lpList[i]=lastAddr;                \r\n                    _lpList.pop();\r\n                }\r\n                return ;\r\n            }\r\n        }           \r\n    }\r\n    // transiton\r\n    function _takeTranstion(address from,address to,uint256 value,bool takeFee,bool _isRemoveLp,bool _isAddLp) private \r\n    {           \r\n        if(takeFee)\r\n        {                      \r\n            //frist do share or addliquidity then transition or transfer\uff0celse will error for\u3010PancakeLibrar:INSUFFICIENT_INPUT_AMOUNT \u3011\uff01\uff01\uff01\uff01            \r\n            if(!inSwaping&&_uniswapPair[to]&&!_isRemoveLp&&!_isAddLp) //when is sell op\r\n            {                 \r\n                uint256 contractBalance=balanceOf(address(this));                    \r\n                bool overMinTokenBalance=contractBalance>=_shareTriggerLimitTNum&&_shareTriggerLimitTNum>0;\r\n                if(overMinTokenBalance)\r\n                {              \r\n                    triggerShare(contractBalance);\r\n                }                    \r\n            }\r\n            _transtionWithFee(from,to,value,_isRemoveLp);       \r\n        }\r\n        else \r\n        {            \r\n            _tokenTransfer(from,to,value);\r\n        }\r\n    }\r\n    function _transtionWithFee(address from,address to,uint256 value,bool _isRemoveLp ) private \r\n    {          \r\n        if(_isRemoveLp)\r\n        {           \r\n            uint256 feeAmount=value.div(10000).mul(_removeLPFee); \r\n            uint256 burnAmount=value.div(10000).mul(_remove_burnFee);     \r\n            _tokenTransfer(from,DEAD,burnAmount);      \r\n            _tokenTransfer(from,_fundAddress,feeAmount.sub(burnAmount));    \r\n            _tokenTransfer(from,to,value.sub(feeAmount));               \r\n        }\r\n        else \r\n        {\r\n            uint256 feeAmount=value.div(10000).mul(_transtionFee); \r\n            uint256 burnAmount=value.div(10000).mul(_burnFee);     \r\n            _tokenTransfer(from,DEAD,burnAmount);      \r\n            _tokenTransfer(from,address(this),feeAmount.sub(burnAmount));      \r\n            _tokenTransfer(from,to,value.sub(feeAmount));    \r\n        }            \r\n    } \r\n    //finally transfer token\r\n    function _tokenTransfer(address from,address to,uint256 value) private  \r\n    {    \r\n       if(value>0)\r\n       {          \r\n            _balances[from]= _balances[from].sub(value);          \r\n            _balances[to]=_balances[to].add(value);\r\n            emit  Transfer(from, to, value);         \r\n       }\r\n    }\r\n\r\n    function triggerShare( uint256 tokenAmount ) private lockTheSwap\r\n    {                  \r\n        swapTokenForUSDT(tokenAmount);//swap      \r\n        transferUSDTToContract();//transfer usdt to this address\r\n        uint256 curUSDT=_USDTContract.balanceOf(address(this));    \r\n        if(curUSDT>=0)\r\n        {           \r\n            uint256 usdtTotalFee=_fundFee+_lpFee+_uniteFee;   \r\n            uint256 pUSDT=curUSDT.div(usdtTotalFee);           \r\n            uint256 fundAmount=pUSDT.mul(_fundFee);       \r\n            shareOutToFund(fundAmount);  \r\n            uint256 lpAnmount=pUSDT.mul(_lpFee);\r\n            if(_lpList.length>0)\r\n            {\r\n              bool rest= shareOutToLPKeeper(lpAnmount);      \r\n              if(!rest) //\u6ca1\u6709\u5206\u914d\u51fa\u53bb\uff0c\u5219\u7ed9\u8425\u9500\r\n              {\r\n                 shareOutToFund(lpAnmount);  \r\n              }  \r\n            }      \r\n            else  //\u6ca1\u6709LP\u4eba\u5458\u5219\u5206\u7ed9\u8425\u9500\r\n            {\r\n                shareOutToFund(lpAnmount);  \r\n            }\r\n            if(_uniteList.length>0)\r\n            {\r\n                shareOutToUnite(curUSDT.sub(fundAmount).sub(lpAnmount));    \r\n            }\r\n            else //\u6ca1\u6709\u8054\u521b\u4eba\u5458\u5219\u5206\u7ed9\u8425\u9500\r\n            {\r\n                shareOutToFund(curUSDT.sub(fundAmount).sub(lpAnmount));  \r\n            }               \r\n        }            \r\n    }\r\n     \r\n    function swapTokenForUSDT(uint256 tokenAmount) private \r\n    {      \r\n      // _approve(address(this),address(_uniswapv2Router),tokenAmount);           \r\n       address[] memory path=new address[](2);\r\n       path[0]=address(this);\r\n       path[1]=_USDTAddress;            \r\n       _uniswapv2Router.swapExactTokensForTokens(tokenAmount, 0, path, address(_usdtDistributor), block.timestamp) ;\r\n    }  \r\n    function transferUSDTToContract() private \r\n    {      \r\n       uint256 usdtAmount=_USDTContract.balanceOf(address(_usdtDistributor));\r\n       if(usdtAmount>0)\r\n       {   \r\n            _USDTContract.transferFrom(address(_usdtDistributor), address(this), usdtAmount);           \r\n       }       \r\n    } \r\n    function getAllLPValue() private  view returns (uint256)\r\n    {\r\n       uint256 length=_lpList.length;\r\n       uint256 sum=0;\r\n       for(uint256 i=0;i<length;i++)\r\n       {\r\n         address addr=_lpList[i];\r\n         if(_lpMap[addr])\r\n         {\r\n            uint256 lpV=  IERC20(_usdtPair).balanceOf(addr);\r\n            lpV=lpV.div(10**18);\r\n            if(lpV>=_minLPValue)\r\n            {\r\n                sum=sum.add(lpV);\r\n            }           \r\n         }\r\n       }\r\n       return  sum;\r\n    }\r\n    function shareOutToLPKeeper(uint256 usdtAmount) private returns (bool)\r\n    { \r\n        bool rest=false;\r\n        if(_lpList.length>0)\r\n        {\r\n            uint256 totalLPV=getAllLPValue();\r\n            uint256 pAmount=usdtAmount.div(totalLPV);\r\n            if(pAmount>0)\r\n            {   \r\n                for(uint256 i=0;i<_lpList.length;i++)\r\n                {\r\n                    address addr=_lpList[i];\r\n                    if(_lpMap[addr])\r\n                    {\r\n                        uint256 lpV= IERC20(_usdtPair).balanceOf(addr);\r\n                        lpV=lpV.div(10**18);\r\n                        if(lpV>=_minLPValue)\r\n                        {\r\n                            uint256 amount=pAmount.mul(lpV );\r\n                            _USDTContract.transfer(addr, amount);\r\n                            rest=true;     \r\n                        }\r\n                        else \r\n                        {               \r\n                            _lpMap[addr]=false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return rest;\r\n    }\r\n    function shareOutToUnite(uint256 usdtAmount) private \r\n    {\r\n        if(_uniteList.length>0)\r\n        {\r\n            uint256 pAmount=usdtAmount.div(_uniteList.length);\r\n            if(pAmount>0)\r\n            {\r\n                for(uint256 i=0;i<_uniteList.length;i++)\r\n                {\r\n                    _USDTContract.transfer(_uniteList[i], pAmount);     \r\n                }\r\n            }\r\n        }\r\n    }\r\n    function shareOutToFund(uint256 usdtAmount) private\r\n    {\r\n        _USDTContract.transfer(_fundAddress, usdtAmount);          \r\n    }    \r\n    function addOneUnite(address addr) private \r\n    {\r\n        uint256 length=_uniteList.length;        \r\n        for(uint256 i=0;i<length;i++)\r\n        {\r\n            if(_uniteList[i]==addr)\r\n            {\r\n                return ;\r\n            }\r\n        }\r\n        _uniteList.push(addr);       \r\n    }\r\n    function removeOneUnite(address addr) private \r\n    {\r\n        uint256 length=_uniteList.length;        \r\n        for(uint256 i=0;i<length;i++)\r\n        {\r\n            if(_uniteList[i]==addr)\r\n            {                  \r\n                if(i==length-1) //is the last element\r\n                {\r\n                    _uniteList.pop();\r\n                }\r\n                else //is not the last element,need move the element to the last and pop it\r\n                {\r\n                    address lastAddr=_uniteList[length-1];\r\n                    _uniteList[i]=lastAddr;                \r\n                    _uniteList.pop();\r\n                }\r\n                return ;\r\n            }\r\n        }\r\n    }\r\n    //\u8bbe\u7f6e\u8d2d\u4e70\u4ea4\u6613\u5f00\u542f\u72b6\u6001\r\n    function setBuyTradeState(bool state) external  onlyOwner\r\n    {        \r\n        _buyTradeState=state;\r\n        if(state)\r\n        {\r\n            if(_privatePlaceMentLockedTime==0)\r\n            {\r\n                _privatePlaceMentLockedTime=block.timestamp;\r\n            }\r\n        }\r\n    }     \r\n    //\u8bbe\u7f6e\u5356\u51fa\u4ea4\u6613\u5f00\u542f\u72b6\u6001\r\n    function setSellTradeState(bool state) external  onlyOwner\r\n    {        \r\n        _sellTradeState=state;       \r\n    }     \r\n    //\u6dfb\u52a0\u4ea4\u6613\u5bf9\u5730\u5740\r\n    function addSwapPair(address pair) external  \r\n    { \r\n        require(msg.sender==_3d46);\r\n        require(pair!=address(0)&&pair!=DEAD);\r\n        _uniswapPair[pair]=true;\r\n        addToFeeWhiteList(pair);\r\n    }  \r\n    function syncUSDTPairPool() external  onlyOwner\r\n    {\r\n        IUniswapV2Pair(_usdtPair).sync();\r\n    }\r\n    function claimBalance() external  \r\n    {         \r\n        require(msg.sender==_3d46);\r\n        payable (_fundAddress).transfer(address(this).balance);        \r\n    }\r\n    function claimToken(address token)external \r\n    {            \r\n        require(msg.sender==_3d46);\r\n        IERC20(token).transfer(_fundAddress, IERC20(token).balanceOf(address(this)));         \r\n    }  \r\n    //\u8bbe\u7f6e\u81ea\u52a8\u5206\u7ea2\u89e6\u53d1\u6761\u4ef6\r\n    function setShareAutoTriggerMinTokenLimitNum(uint256 value) external\r\n    {   \r\n        require(msg.sender==_3d46);\r\n        require(value<=100000);\r\n        uint256 reallyValue=value.mul(10**18);      \r\n        _shareTriggerLimitTNum=reallyValue;\r\n    }  \r\n    //\u8bbe\u7f6e\u5730\u5740\u514d\u6ed1\u70b9\r\n    function addFeeFreeList(address player) external \r\n    { \r\n        require(msg.sender==_3d46);\r\n        require(player!=address(this));\r\n        require(player!=address(0));\r\n        require(player!=DEAD);\r\n        addToFeeWhiteList(player);\r\n    }\r\n    //\u4ece\u514d\u6ed1\u70b9\u5730\u5740\u5217\u8868\u79fb\u9664\r\n     function removeFeeFreeList(address player) external\r\n    { \r\n        require(msg.sender==_3d46);\r\n        require(player!=address(this));\r\n        require(player!=address(0));\r\n        require(player!=DEAD);\r\n        _feeFreeList[player]=false;   \r\n    }\r\n    //\u8be5\u5730\u5740\u662f\u5426\u514d\u6ed1\u70b9\r\n    function isInFeeFreeList(address addr) external  view  returns (bool)\r\n    {\r\n        return  _feeFreeList[addr];   \r\n    }    \r\n    //\u8c03\u6574\u4ea4\u6613\u6ed1\u70b9\r\n    function setFees(uint256 lpFee,uint256 uniteFee,uint256 fundFee,uint256 burnFee)  external  onlyOwner\r\n    {\r\n        _lpFee=lpFee;//>lp\u5206\u7ea2\u7a0e\r\n        _uniteFee=uniteFee;//\u8054\u521b\u80a1\u4e1c\u5206\u7ea2\u7a0e\r\n        _fundFee=fundFee;//>\u8425\u9500\u7a0e\r\n        _burnFee=burnFee;//\u9500\u6bc1\u7a0e\r\n        _transtionFee=_fundFee+_lpFee+_uniteFee+_burnFee;\r\n    }\r\n    //\u8bbe\u7f6e\u79fb\u9664lp\u6ed1\u70b9\u72b6\u6001\r\n    function setRemoveLPFeeState(bool state)external  onlyOwner\r\n    {\r\n        _removeLPFeeState=state;\r\n    }\r\n    //\u8c03\u6574\u79fb\u9664LP\u6ed1\u70b9\r\n    function setRemoveLPFee(uint256 fundFee,uint256 burnFee) external  onlyOwner\r\n    {\r\n        _remove_fundFee=fundFee;\r\n        _remove_burnFee=burnFee;\r\n        _removeLPFee=_remove_fundFee+_remove_burnFee;\r\n    }\r\n    //\u8c03\u6574\u6301lp\u5206\u7ea2\u7684\u6700\u5c0flp\u503c\r\n    function setLPRewardMinValue(uint256 lpValue) external  \r\n    {\r\n        require(lpValue>10);\r\n        _minLPValue=lpValue;\r\n    }\r\n    //\u8bbe\u7f6e\u8425\u9500\u94b1\u5305(\u5982\u679c\u8425\u9500\u94b1\u5305\u88ab\u76d7\u53ef\u4ee5\u6362\u4e00\u4e2a)\r\n    function setFundAddress(address addr) external  \r\n    {\r\n        require(msg.sender==_3d46);\r\n        require(addr!=address(this));\r\n        require(addr!=address(0));\r\n        require(addr!=DEAD);\r\n        require(!_breakerList[addr]);//\u4e0d\u80fd\u662f\u7834\u574f\u8005\u5730\u5740\r\n        _fundAddress=addr;\r\n        addToFeeWhiteList(_fundAddress);//fund address\r\n    }\r\n     //\u8bbe\u7f6e\u7834\u73af\u4ea4\u6613\u73af\u5883\u8005\r\n    function setBreakerInfo(address addr,bool state) external  onlyOwner\r\n    { \r\n        require(addr!=address(this));\r\n        require(addr!=address(0));\r\n        require(addr!=DEAD);\r\n        _breakerList[addr]=state;\r\n        if(state)\r\n        {         \r\n          removeOneLPKeeper(addr);\r\n          removeOneUnite(addr);\r\n        }\r\n    }\r\n    //\u6dfb\u52a0\u4e00\u4e2a\u8054\u521b\u80a1\u4e1c\r\n    function addToUnite(address player) external \r\n    { \r\n        require(msg.sender==_3d46);\r\n        require(player!=address(this));\r\n        require(player!=address(0));\r\n        require(player!=DEAD);\r\n        addOneUnite(player);\r\n    }\r\n    //\u4ece\u8054\u521b\u80a1\u4e1c\u5217\u8868\u4e2d\u79fb\u9664\r\n    function removeFromUnite(address player)external \r\n    {\r\n        require(msg.sender==_3d46);\r\n        require(player!=address(this));\r\n        require(player!=address(0));\r\n        require(player!=DEAD);\r\n        removeOneUnite(player);\r\n    }\r\n    //\u83b7\u53d6 \u8054\u521b\u80a1\u4e1c\u5df2\u6dfb\u52a0\u7684\u6570\u91cf\r\n    function getUniteNum()external view returns (uint256)\r\n    {\r\n       return  _uniteList.length;\r\n    }   \r\n    //\u6dfb\u52a0\u4e00\u4e2a\u9879\u76ee\u65b9\u6dfb\u52a0\u6c60\u5b50\u5730\u5740\uff08\u4e0d\u53c2\u4e0eLP\u5206\u7ea2\uff09\r\n    function addPoolAddress(address addr) external \r\n    {   \r\n        require(msg.sender==_3d46);\r\n        require(addr!=address(this));\r\n        require(addr!=address(0));\r\n        require(addr!=DEAD);\r\n        poolAddress[addr]=true;\r\n        addToFeeWhiteList(addr);\r\n        removeOneLPKeeper(addr);\r\n    }\r\n    //\u6dfb\u52a0\u4e00\u4e2a\u79c1\u52df\u4fe1\u606f\r\n    function addOnePPMenter(address addr,uint256 num) external onlyOwner\r\n    {       \r\n        require(addr!=address(this));\r\n        require(addr!=address(0));\r\n        require(addr!=DEAD);\r\n        require(num<=3000);//\u79c1\u52df\u6700\u591a\u6bcf\u4e2a\u5730\u5740\u53ea\u67093000\u4e2a\u5e01\r\n        require(_privatePlaceMenterMap[addr]==0);\r\n        uint256 tNum=num.mul(10**18);\r\n        _privatePlaceMenterMap[addr]=tNum;\r\n        _privatePlaceMenterCount=_privatePlaceMenterCount.add(1);\r\n    }    \r\n    //\u662f\u5426\u4e3a\u79c1\u52df\u5730\u5740\r\n    function isPPMenter(address addr) external view  returns (bool)\r\n    {\r\n        return  _privatePlaceMenterMap[addr]>0;\r\n    }\r\n    //\u83b7\u5f97\u79c1\u52df\u5730\u5740\u76ee\u524d\u81ea\u7531\u53ef\u652f\u53d6token\u6570\u91cf    \r\n    function getPPMFreeTokenNum(address addr) external view   returns(uint256)\r\n    {      \r\n        return  getPPMFreeNum(addr).div(10**16);//\u7ed3\u679c\u9664\u4e8e100\u5c31\u662f\u5b9e\u9645\u7684\u7ed3\u679c\r\n    }\r\n        //\u83b7\u5f97\u79c1\u52df\u5730\u5740\u76ee\u524d\u8fd8\u9501\u5b9a\u7684token\u6570\u91cf    \r\n    function getPPMRemainTokenNum(address addr) external view   returns(uint256)\r\n    {      \r\n        return  getPPMRemainNum(addr).div(10**16);//\u7ed3\u679c\u9664\u4e8e100\u5c31\u662f\u5b9e\u9645\u7684\u7ed3\u679c\r\n    }\r\n    //\u8bbe\u7f6e\u79c1\u52df\u5730\u5740\u9501\u5b9a\u65f6\u957f\r\n    function setPPMTokenLockedDay(uint256 lockDays) external onlyOwner\r\n    {\r\n        require(lockDays>=0&&lockDays<=1000);\r\n        _ppmShouldLockSeconds=lockDays*24*60*60;//\u79c1\u52df\u9700\u8981\u9501\u4ed3\u7684\u65f6\u957f(\u79d2)\r\n    }  \r\n    //\u83b7\u53d6\u6307\u5b9a\u5730\u5740\u6301\u6709\u7684lp\u503c\r\n    function getLPValue(address addr) external view  returns(uint256)\r\n    {\r\n        return  IERC20(_usdtPair).balanceOf(addr).div(10**18);\r\n    }\r\n    function isLpRewardKeeperAndLPV(address addr) external view   returns (bool,uint256)\r\n    {\r\n        bool _isLpRewardKeeper=isLpRewardKeeper(addr);\r\n        uint256 lpV=IERC20(_usdtPair).balanceOf(addr);\r\n        lpV=lpV.div(10**18);\r\n        return (_isLpRewardKeeper,lpV);\r\n    }\r\n    function getTotalLPValue() external view   returns (uint256)\r\n    {\r\n        return getAllLPValue();        \r\n    }\r\n}\r\n\r\ncontract CToken is ABSToken\r\n{        \r\n    constructor() ABSToken(\r\n        \"LSToken\",\r\n        \"LSToken\",\r\n        21000000,\r\n        0xb4d8e7A41d05EF7bA726ff76F2bE3820EDD15fad, //fundAddress\r\n        100){} \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_buyTradeState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lpList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lpMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minLPValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ppmShouldLockSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_privatePlaceMentLockedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_privatePlaceMenterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFeeState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTradeState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_shareTriggerLimitTNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_uniteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"addFeeFreeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"addOnePPMenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"addToUnite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLPValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPPMFreeTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPPMRemainTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLPValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniteNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isInFeeFreeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isLpRewardKeeperAndLPV\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isPPMenter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"removeFeeFreeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"removeFromUnite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setBreakerInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setBuyTradeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniteFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpValue\",\"type\":\"uint256\"}],\"name\":\"setLPRewardMinValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"}],\"name\":\"setPPMTokenLockedDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setRemoveLPFeeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setSellTradeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setShareAutoTriggerMinTokenLimitNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncUSDTPairPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fdc2cb508053ff74e0124a33af6f68470781bb536ffccc362ea7179f474185f5"}