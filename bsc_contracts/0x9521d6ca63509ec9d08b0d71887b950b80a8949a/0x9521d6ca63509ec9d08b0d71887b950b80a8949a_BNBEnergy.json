{"SourceCode": "// bnbenergy.finance\r\n\r\n\r\n\r\n\r\n// \u2588\u2588\u2588\u2588\u2500\u2500\u2588\u2500\u2500\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2500\u2588\u2588\u2588\u2500\u2588\u2500\u2500\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2588\u2500\u2588\u2588\r\n// \u2588\u2500\u2500\u2588\u2588\u2500\u2588\u2588\u2500\u2588\u2500\u2588\u2500\u2500\u2588\u2588\u2500\u2588\u2500\u2500\u2500\u2588\u2588\u2500\u2588\u2500\u2588\u2500\u2500\u2500\u2588\u2500\u2500\u2588\u2500\u2588\u2500\u2500\u2500\u2500\u2500\u2588\u2588\u2588\r\n// \u2588\u2588\u2588\u2588\u2500\u2500\u2588\u2500\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2500\u2588\u2588\u2588\u2500\u2588\u2500\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2588\u2500\u2588\u2588\u2500\u2500\u2500\u2588\r\n// \u2588\u2500\u2500\u2588\u2588\u2500\u2588\u2500\u2500\u2588\u2500\u2588\u2500\u2500\u2588\u2588\u2500\u2588\u2500\u2500\u2500\u2588\u2500\u2500\u2588\u2500\u2588\u2500\u2500\u2500\u2588\u2500\u2588\u2500\u2500\u2588\u2500\u2500\u2588\u2500\u2500\u2500\u2588\r\n// \u2588\u2588\u2588\u2588\u2500\u2500\u2588\u2500\u2500\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2500\u2588\u2588\u2588\u2500\u2588\u2500\u2500\u2588\u2500\u2588\u2588\u2588\u2500\u2588\u2500\u2588\u2500\u2500\u2588\u2588\u2588\u2588\u2500\u2500\u2500\u2588\r\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2588\r\n\r\npragma solidity ^0.5.8; \r\n\r\ncontract BNBEnergy{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public POWER_TO_HIRE_1MINERS=2592000;\r\n    uint256[] public REFERRAL_PERCENTS = [50, 25, 5]; //5% - 2.5% - 0.5%\r\n    uint256 constant public PERCENTS_DIVIDER = 1000;\r\n    uint256 constant public PROJECT_FEE = 50;\r\n\tuint256 constant public DEVELOPER_FEE = 20;\r\n\tuint256 constant public MARKETING_FEE = 30;\r\n\t\r\n\tuint256 constant public TRIAL_VIP = 3 days;\r\n\tuint256 constant public COMPOUND_VIP_BONUS = 900; // 90%\r\n\tuint256 constant public REFERRAL_VIP_BONUS = 50; // 5%\r\n\tuint256 constant public POINTS_VIP_BONUS = 100; // 10%\r\n\t\r\n\tuint256 constant public VIP_PRICE_DAY = 20; // 2% from deposit\r\n\tuint256 constant public VIP_DISCOUNT_7DAYS = 70; // 7%\r\n\tuint256 constant public VIP_DISCOUNT_30DAYS = 170; // 17%\r\n\t\r\n\tuint256 constant DAILY_COMPOUND_BONUS_STEP = 20; // 2%\r\n\tuint256 constant DAYLY_COMPOUND_BONUS_MAX = 10; // 10 days\r\n\t\r\n\tuint256 public constant POWER_PER_POINT = 1e17; \r\n    uint256 public lotteryRound = 0;\r\n    uint256 public currentPot = 0;\r\n    uint256 public participants = 0;\r\n    uint256 public totalPoints = 0;\r\n    uint256 public LOTTERY_STEP = 6 hours; \r\n    uint256 public LOTTERY_START_TIME;\r\n    \r\n    uint256 public POINTS_FOR_LOTTERY = 20; //2%\r\n    \r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n\r\n    bool public initialized = false;\r\n\r\n    address payable private wallet;\r\n    address payable private devAddress;\r\n    address payable public marketing;\r\n\r\n    struct User {\r\n        uint256 initialBnbDeposit;\r\n        uint256 userBnbDeposit;\r\n        uint256 miners;\r\n        uint256 claimedPower;\r\n        uint256 lastUpgrade;\r\n        address referrer;\r\n        uint256 referrals;\r\n        uint256 refRewardsPower;\r\n        uint256 vipBuyTime;\r\n        uint256 vipBoughtDays;\r\n        uint256 dailyCompoundBonus;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n    \r\n    mapping(uint256 => mapping(address => uint256)) public pointsOwners; // round => address => amount of owned points\r\n    mapping(uint256 => mapping(uint256 => address)) public participantAdresses; // round => id => address\r\n\r\n\r\n    uint256 public marketPower;\r\n    \r\n    event onLotteryWinner(address indexed investor, uint256 pot, uint256 indexed round);\r\n\r\n    constructor(address payable _dev, address payable _wallet, address payable _marketing) public{\r\n        wallet = _wallet;\r\n        devAddress = _dev;\r\n        marketing = _marketing;    \r\n    }\r\n\r\n\r\n    function upgradePower(address ref, bool useCompoundVipBonus) public {\r\n        require(initialized);\r\n        \r\n        _checkVIP(msg.sender);\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (user.referrer == address(0)) {\r\n\t\t\tif (ref != msg.sender) {\r\n\t\t\t\tuser.referrer = ref;\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) { \r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].referrals = users[upline].referrals.add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n        uint256 powerUsed=getMyPower();\r\n        uint256 powerForReferrers = powerUsed;\r\n        \r\n        uint256 lotteryPower = powerUsed.mul(POINTS_FOR_LOTTERY).div(PERCENTS_DIVIDER);\r\n        \r\n        if(user.vipBoughtDays != 0) {\r\n            //user has VIP\r\n            lotteryPower = lotteryPower.add(lotteryPower.mul(POINTS_VIP_BONUS).div(PERCENTS_DIVIDER));\r\n        }\r\n        \r\n        _buyPoints(msg.sender, lotteryPower);\r\n\t\t\r\n        //VIP compound bonus\r\n        if(useCompoundVipBonus) {\r\n            \r\n            uint256 _dailyCompoundBonus = getDailyCompoundBonus(msg.sender, powerUsed);\r\n             \r\n            if(user.vipBoughtDays != 0) {\r\n                //user has VIP\r\n                powerUsed = powerUsed.add(powerUsed.mul(COMPOUND_VIP_BONUS).div(PERCENTS_DIVIDER));\r\n            }\r\n            \r\n          \r\n            \r\n            powerUsed = powerUsed.add(_dailyCompoundBonus);\r\n            \r\n            uint256 powerUsedValue = calculatePowerSell(powerUsed);\r\n            user.userBnbDeposit = user.userBnbDeposit.add(powerUsedValue);\r\n            \r\n        }\r\n        \r\n        \r\n\r\n        //send commissions\r\n        uint256 powerValue = calculatePowerSell(powerUsed);\r\n\r\n        uint256 walletFee = powerValue.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n        wallet.transfer(walletFee);\r\n        uint256 devFee = powerValue.mul(DEVELOPER_FEE).div(PERCENTS_DIVIDER);\r\n        devAddress.transfer(devFee);\r\n        uint256 marketingFee = powerValue.mul(MARKETING_FEE).div(PERCENTS_DIVIDER);\r\n        marketing.transfer(marketingFee);\r\n\r\n        //update final power\r\n        powerUsed = powerUsed.mul(9).div(10);\r\n        \r\n         //update daily compound bonus\r\n        if(now.sub(user.lastUpgrade) >= 1 days) {\r\n            if(user.dailyCompoundBonus <10) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n        }\r\n\r\n        //power accrual\r\n        uint256 newMiners=SafeMath.div(powerUsed,POWER_TO_HIRE_1MINERS);\r\n        user.miners=SafeMath.add(user.miners,newMiners);\r\n        user.claimedPower = 0;\r\n        user.lastUpgrade=now;\r\n        \r\n        //send referral powers\r\n\r\n        if (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {  \r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t        \r\n    \t\t\t\t\tuint256 powerAmount = powerForReferrers.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n    \t\t\t\t\t\r\n    \t\t\t\t\tif(users[upline].vipBoughtDays != 0) {\r\n\t\t\t\t            //user has VIP\r\n\t\t\t\t            powerAmount = powerAmount.add(powerAmount.mul(REFERRAL_VIP_BONUS).div(PERCENTS_DIVIDER));\r\n\t\t\t\t        }\r\n    \t\t\t\t\t\r\n    \t\t\t\t\tusers[upline].claimedPower = users[upline].claimedPower.add(powerAmount);\r\n                        users[upline].refRewardsPower = users[upline].refRewardsPower.add(powerAmount);\r\n\t\t\t\t\t\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n        \r\n        //boost market to nerf miners hoarding\r\n        marketPower=SafeMath.add(marketPower,SafeMath.div(powerUsed,5));\r\n    }\r\n    \r\n    \r\n    \r\n    function sellPower() public{\r\n        require(initialized);\r\n        \r\n        _checkVIP(msg.sender);\r\n\r\n        uint256 hasPower=getMyPower();\r\n        uint256 powerValue=calculatePowerSell(hasPower);\r\n        \r\n        uint256 lotteryPower = hasPower.mul(POINTS_FOR_LOTTERY).div(PERCENTS_DIVIDER);\r\n        \r\n        if(users[msg.sender].vipBoughtDays != 0) {\r\n            //user has VIP\r\n            \r\n            lotteryPower = lotteryPower.add(lotteryPower.mul(POINTS_VIP_BONUS).div(PERCENTS_DIVIDER));\r\n        }\r\n        \r\n        _buyPoints(msg.sender, lotteryPower);\r\n\r\n        users[msg.sender].claimedPower = 0;\r\n        users[msg.sender].lastUpgrade = now;\r\n        \r\n        // reset daily compound bonus\r\n        users[msg.sender].dailyCompoundBonus = 0;\r\n\r\n        marketPower=SafeMath.add(marketPower,hasPower);\r\n        \r\n        // check if contract has enough funds to pay\r\n        if(getBalance() < powerValue) {\r\n            powerValue = getBalance();\r\n        }\r\n        \r\n        msg.sender.transfer(powerValue);\r\n    }\r\n    \r\n  \r\n    function buyPower(address ref) public payable{\r\n        require(initialized);\r\n\r\n        uint256 powerBought=calculatePowerBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\r\n        \r\n        //trial vip to a new user\r\n        if(users[msg.sender].miners == 0) {\r\n            users[msg.sender].vipBuyTime = now;\r\n            users[msg.sender].vipBoughtDays = TRIAL_VIP;\r\n        }\r\n        \r\n        users[msg.sender].userBnbDeposit = users[msg.sender].userBnbDeposit.add(msg.value);\r\n        users[msg.sender].initialBnbDeposit = users[msg.sender].initialBnbDeposit.add(msg.value);\r\n        users[msg.sender].claimedPower=SafeMath.add(users[msg.sender].claimedPower,powerBought);\r\n        \r\n        totalStaked = totalStaked.add(msg.value);\r\n        totalDeposits = totalDeposits.add(1);\r\n        \r\n        upgradePower(ref, false);\r\n    }\r\n    \r\n     function _buyPoints(address userAddress, uint256 amount) private { // amount - Power for purchase\r\n    \r\n        require(amount != 0, \"zero purchase amount\");\r\n        \r\n        uint256 points = amount.mul(1e18).div(POWER_PER_POINT);\r\n        \r\n        if(pointsOwners[lotteryRound][userAddress] == 0) {\r\n            participantAdresses[lotteryRound][participants] = userAddress;\r\n            participants = participants.add(1);\r\n        }\r\n        \r\n        pointsOwners[lotteryRound][userAddress] = pointsOwners[lotteryRound][userAddress].add(points);\r\n        currentPot = currentPot.add(amount);\r\n        totalPoints = totalPoints.add(points);\r\n        \r\n        if(block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP || participants == 200){\r\n            _chooseWinner();\r\n        }\r\n    }\r\n    \r\n    function _chooseWinner() private {\r\n        \r\n       uint256[] memory init_range = new uint256[](participants);\r\n       uint256[] memory end_range = new uint256[](participants);\r\n       \r\n       uint256 last_range = 0;\r\n       \r\n       for(uint256 i = 0; i < participants; i++){\r\n           uint256 range0 = last_range.add(1);\r\n           uint256 range1 = range0.add(pointsOwners[lotteryRound][participantAdresses[lotteryRound][i]].div(1e18)); \r\n           \r\n           init_range[i] = range0;\r\n           end_range[i] = range1;\r\n           \r\n           last_range = range1;\r\n       }\r\n        \r\n       uint256 random = _getRandom().mod(last_range).add(1); \r\n       \r\n       for(uint256 i = 0; i < participants; i++){\r\n           if((random >= init_range[i]) && (random <= end_range[i])){\r\n               // winner found\r\n               \r\n               address winnerAddress = participantAdresses[lotteryRound][i];\r\n               \r\n               users[winnerAddress].claimedPower = users[winnerAddress].claimedPower.add(currentPot.mul(9).div(10));\r\n               \r\n               //fees\r\n               \r\n               uint256 powerValue = calculatePowerSell(currentPot);\r\n    \t\t   \r\n    \t\t   uint256 walletFee = powerValue.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n               wallet.transfer(walletFee);\r\n               uint256 devFee = powerValue.mul(DEVELOPER_FEE).div(PERCENTS_DIVIDER);\r\n               devAddress.transfer(devFee);\r\n               uint256 marketingFee = powerValue.mul(MARKETING_FEE).div(PERCENTS_DIVIDER);\r\n               marketing.transfer(marketingFee);\r\n              \r\n               // reset lotteryRound\r\n               \r\n               emit onLotteryWinner(winnerAddress, currentPot, lotteryRound);\r\n               \r\n               currentPot = 0;\r\n               lotteryRound = lotteryRound.add(1);\r\n               participants = 0;\r\n               totalPoints = 0;\r\n               LOTTERY_START_TIME = block.timestamp;\r\n               \r\n              \r\n\r\n               break;\r\n           }\r\n       }\r\n    }\r\n    \r\n    function _getRandom() private view returns(uint256){\r\n        \r\n        bytes32 _blockhash = blockhash(block.number-1);\r\n        \r\n        \r\n        return uint256(keccak256(abi.encode(_blockhash,block.timestamp,currentPot,block.difficulty,marketPower, address(this).balance)));\r\n    }\r\n    \r\n    function getDailyCompoundBonus(address _adr, uint256 amount) public view returns(uint256){\r\n        if(users[_adr].dailyCompoundBonus == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 totalBonus = users[_adr].dailyCompoundBonus.mul(DAILY_COMPOUND_BONUS_STEP); // How many % \r\n            uint256 result = amount.mul(totalBonus).div(PERCENTS_DIVIDER);\r\n            \r\n            return result;\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    function buyVIP(uint256 day) public payable {\r\n        \r\n        require(day >= 1, \"min. purchase is 1 day\");\r\n        require(users[msg.sender].miners > 0, \"user doesnt have active deposit\");\r\n        require(users[msg.sender].userBnbDeposit >= 1.5 ether, \"user deposit less 1.5 bnb\");\r\n        \r\n        _checkVIP(msg.sender);\r\n        \r\n        User storage user = users[msg.sender];\r\n        \r\n        \r\n        uint256 userFinalPrice = getFinalVipPrice(day,msg.sender);\r\n        \r\n        require(msg.value >= userFinalPrice, \"insufficient amount for VIP purchase\");\r\n        \r\n        \r\n        \r\n        // if user doesnt have VIP\r\n        if(user.vipBoughtDays == 0) {\r\n            user.vipBuyTime = now;\r\n            user.vipBoughtDays = day.mul(1 days); // days amount * unix time in 1 day  \r\n        } else {\r\n            //if user already has VIP\r\n            user.vipBoughtDays = user.vipBoughtDays.add(day.mul(1 days));\r\n        }\r\n        \r\n        uint256 walletFee = msg.value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n        wallet.transfer(walletFee);\r\n        uint256 devFee = msg.value.mul(DEVELOPER_FEE).div(PERCENTS_DIVIDER);\r\n        devAddress.transfer(devFee);\r\n        uint256 marketingFee = msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER);\r\n        marketing.transfer(marketingFee);\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n     function getUserPoints(address _userAddress) public view returns(uint256) {\r\n         \r\n         return pointsOwners[lotteryRound][_userAddress];\r\n    }\r\n    \r\n    function getLotteryTimer() public view returns(uint256) {\r\n        return LOTTERY_START_TIME.add(LOTTERY_STEP);\r\n    }\r\n    \r\n    function getVipRemainingTime(address adr) public view returns(uint256){\r\n        if(users[adr].vipBoughtDays != 0) {\r\n            \r\n            uint256 time = users[adr].vipBuyTime.add(users[adr].vipBoughtDays);\r\n            \r\n            if(time > now ) {\r\n                \r\n                return time.sub(now);\r\n                \r\n            } else {\r\n                \r\n                return 0;\r\n            }\r\n            \r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function getAvailableEarnings(address _adr) public view returns(uint256) {\r\n        uint256 userPower = SafeMath.add(users[_adr].claimedPower,getPowerSinceLastUpgrade(_adr));\r\n        \r\n        return calculatePowerSell(userPower);\r\n    }\r\n    \r\n    function getFinalVipPrice(uint256 day, address adr) public view returns(uint256) {\r\n        \r\n        User storage user = users[adr];\r\n        \r\n        uint256 dailyPrice = user.userBnbDeposit.mul(VIP_PRICE_DAY).div(PERCENTS_DIVIDER);\r\n        uint256 h = 1000;\r\n        \r\n        if(day < 7){\r\n            return dailyPrice.mul(day);\r\n        }\r\n        if(day>=7 && day < 30) {\r\n            return dailyPrice.mul(day).mul(h.sub(VIP_DISCOUNT_7DAYS)).div(PERCENTS_DIVIDER); // ( 1000 - 70 ) / 1000 = 93%\r\n        }\r\n        if(day>=30){\r\n            return dailyPrice.mul(day).mul(h.sub(VIP_DISCOUNT_30DAYS)).div(PERCENTS_DIVIDER); // ( 1000 - 170 ) / 1000 = 83%\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculatePowerSell(uint256 powers) public view returns(uint256){\r\n        return calculateTrade(powers,marketPower,address(this).balance);\r\n    }\r\n    function calculatePowerBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketPower);\r\n    }\r\n    function calculatePowerBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculatePowerBuy(eth,address(this).balance);\r\n    }\r\n\r\n    function seedMarket() public payable{\r\n        require(marketPower==0);\r\n        require(msg.sender == devAddress);\r\n        initialized=true;\r\n        marketPower=259200000000;\r\n        \r\n        LOTTERY_START_TIME = now;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function _checkVIP(address adr) private  {\r\n        User storage user = users[adr];\r\n        \r\n        if(now.sub(user.vipBuyTime) > user.vipBoughtDays) {\r\n            user.vipBoughtDays = 0;\r\n            user.vipBuyTime = 0;\r\n        }\r\n    }\r\n    \r\n    //How many power and bnb per day user will recieve for 0.01 BNB deposit\r\n    function getPowerYield() public view returns(uint256,uint256) {\r\n        uint256 powerAmount=calculatePowerBuy(0.01 ether ,SafeMath.sub(address(this).balance.add(0.01 ether),0.01 ether));\r\n        uint256 miners=SafeMath.div(powerAmount,POWER_TO_HIRE_1MINERS);\r\n        uint256 day = 1 days;\r\n        \r\n        uint256 powerPerDay = day.mul(miners);\r\n        uint256 bnbPerDay = calculatePowerSellForYield(powerPerDay);\r\n        \r\n        return(miners,bnbPerDay);\r\n    }\r\n    \r\n    function calculatePowerSellForYield(uint256 powers) public view returns(uint256){\r\n        return calculateTrade(powers,marketPower,address(this).balance.add(0.01 ether));\r\n    }\r\n    function getMyMiners() public view returns(uint256){\r\n        return users[msg.sender].miners;\r\n    }\r\n    function getMyPower() public view returns(uint256){\r\n        return SafeMath.add(users[msg.sender].claimedPower,getPowerSinceLastUpgrade(msg.sender));\r\n    }\r\n    function getPowerSinceLastUpgrade(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(POWER_TO_HIRE_1MINERS,SafeMath.sub(now,users[adr].lastUpgrade));\r\n        return SafeMath.mul(secondsPassed,users[adr].miners);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"powers\",\"type\":\"uint256\"}],\"name\":\"calculatePowerSellForYield\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"useCompoundVipBonus\",\"type\":\"bool\"}],\"name\":\"upgradePower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POINTS_VIP_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIP_DISCOUNT_7DAYS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOTTERY_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRIAL_VIP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIP_DISCOUNT_30DAYS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getVipRemainingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDailyCompoundBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_VIP_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pointsOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculatePowerBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculatePowerBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POWER_TO_HIRE_1MINERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"powers\",\"type\":\"uint256\"}],\"name\":\"calculatePowerSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POWER_PER_POINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPowerYield\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getPowerSinceLastUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellPower\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"initialBnbDeposit\",\"type\":\"uint256\"},{\"name\":\"userBnbDeposit\",\"type\":\"uint256\"},{\"name\":\"miners\",\"type\":\"uint256\"},{\"name\":\"claimedPower\",\"type\":\"uint256\"},{\"name\":\"lastUpgrade\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"referrals\",\"type\":\"uint256\"},{\"name\":\"refRewardsPower\",\"type\":\"uint256\"},{\"name\":\"vipBuyTime\",\"type\":\"uint256\"},{\"name\":\"vipBoughtDays\",\"type\":\"uint256\"},{\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIP_PRICE_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPOUND_VIP_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"},{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getFinalVipPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOTTERY_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participantAdresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POINTS_FOR_LOTTERY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLotteryTimer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyPower\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"buyVIP\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketPower\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dev\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_marketing\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pot\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"onLotteryWinner\",\"type\":\"event\"}]", "ContractName": "BNBEnergy", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b11d2acaff12ab764546ab5559864b69f3eccf6f00000000000000000000000067f55b0fe92a41ba51a0e83eb72f02c77591fbf1000000000000000000000000ac00fdf4942becb29fda2c5e50fe2877f3c3e12d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5bea4ad2357845af651f174c29bcb3be35d887fdd63d328a61f6f1c7fe61c2f7"}