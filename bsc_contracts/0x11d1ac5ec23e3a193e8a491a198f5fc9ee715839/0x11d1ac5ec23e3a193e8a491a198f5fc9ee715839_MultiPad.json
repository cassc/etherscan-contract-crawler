{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n//-----------------------------------------------------------------------------//\r\n//                             Name : MultiPad                                 //\r\n//                           Symbol : MPAD                                     //\r\n//                     Total Supply : 100,000,000                              //\r\n//                  Company Reserve : 25,000,000                               //\r\n//          Marketing and ecosystem : 20,000,000                               //\r\n//                             Team : 20,000,000                               //\r\n//                        Liquidity : 10,000,000                               //\r\n//                    IDO fundraise : 15,000,000                               //\r\n//       Partners & Early Investors : 10,000,000                               //\r\n//-----------------------------------------------------------------------------//\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IBEP20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Invalid values\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a,\"Invalid values\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,\"Invalid values\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract MultiPad is IBEP20 {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    //variable declaration\r\n    address private _owner;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    // Special business use case variables\r\n    mapping (address => bool) _whitelistedAddress;\r\n    mapping (address => uint256) _lockingTimeForSale;\r\n    mapping (address => uint256) _recordSale;\r\n    mapping (address => bool) _addressLocked;\r\n    mapping (address => uint256) _finalSoldAmount;\r\n    mapping (address => mapping(uint256 => bool)) reEntrance;\r\n    mapping (address => uint256) specialAddBal;\r\n    mapping (address => uint256) _contributionBNB;\r\n    mapping (address => mapping(uint256 => uint256)) _claimedByUser;\r\n    \r\n    address[] private _whitelistedUserAddresses;\r\n    uint256 private saleStartTime;\r\n    uint256 private saleEndTime;\r\n    uint256 private saleMinimumAmount;\r\n    uint256 private saleMaximumAmount;\r\n    uint256 private saleId = 0;\r\n    uint256 private tokenPrice;\r\n    uint256 private deploymentTime; \r\n    uint256 private pricePerToken;\r\n    uint256 private hardCap;\r\n    uint256 private decimalBalancer = 1000000000;\r\n    uint256 private IDOAvailable;\r\n\r\n    bool whitelistFlag = true;\r\n    address private Reserve = 0xEBBB942bdDe9a52d431E1abB5850759E53f8f757;\r\n    address private Marketing = 0x4DC30c64229758B210857547D9D84Dcc0e06c0EE;\r\n    address private Team1 = 0x307E2e4158fF2dF57efEaF853ed8a510c6599070;\r\n    address private Team2 = 0x3D75139af18Ee14a46F1d73228FA48CaCC39A791;\r\n    address private Liquidity = 0x1a8188c2b1eB3117571fB822A5B485B5b1dD559e;\r\n    address private IDO = 0x5a741a81C2633513B24bCC90380DFa542652FA34;\r\n    address private Partners = 0x83505249D8F696982BE7619E00c780bb0Cc6B948;\r\n    \r\n\r\n    \r\n    \r\n\r\n    constructor (string memory name, string memory symbol, uint256 totalSupply, address owner) public {\r\n        _name = name;\r\n        _symbol = symbol; \r\n        _totalSupply = totalSupply*(10**uint256(_decimals));\r\n        _balances[owner] = _totalSupply;\r\n        _owner = owner;\r\n        _addressLocked[Reserve] = true;\r\n        _addressLocked[Marketing] = true;\r\n        _addressLocked[Team1] = true;\r\n        _addressLocked[Liquidity] = true;\r\n        _addressLocked[Partners] = true;\r\n         deploymentTime =  block.timestamp;\r\n         initiateValues();\r\n    }\r\n    \r\n    function initiateValues() internal {\r\n        specialAddBal[Reserve] = 25000000*(10**uint256(_decimals));\r\n        specialAddBal[Marketing] = 20000000*(10**uint256(_decimals));\r\n        specialAddBal[Team1] = 18000000*(10**uint256(_decimals));\r\n        specialAddBal[Team2] = 2000000*(10**uint256(_decimals));\r\n        specialAddBal[Liquidity] = 10000000*(10**uint256(_decimals));\r\n        specialAddBal[IDO] = 15000000*(10**uint256(_decimals));\r\n        specialAddBal[Partners] = 10000000*(10**uint256(_decimals));\r\n        _transfer(_owner,Reserve,specialAddBal[Reserve]);\r\n        _transfer(_owner,Marketing,specialAddBal[Marketing]);\r\n        _transfer(_owner,Team1,specialAddBal[Team1]); \r\n        _transfer(_owner,Team2,specialAddBal[Team2]);\r\n        _transfer(_owner,Liquidity,specialAddBal[Liquidity]);       \r\n        _transfer(_owner,IDO,specialAddBal[IDO]);\r\n        _transfer(_owner,Partners,specialAddBal[Partners]);\r\n    }\r\n\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * View only functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public override view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) external override view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     * Transfer, allow and burn functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public override checkLockedAddresses(msg.sender) returns (bool) {\r\n            _transfer(msg.sender, to, value);\r\n            return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public override checkLockedAddresses(from) returns (bool) {\r\n             _transfer(from, to, value);\r\n             _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n             return true;\r\n    }\r\n\r\n     /**\r\n      * @dev Airdrop function to airdrop tokens. Best works upto 50 addresses in one time. Maximum limit is 200 addresses in one time.\r\n      * @param _addresses array of address in serial order\r\n      * @param _amount amount in serial order with respect to address array\r\n      */\r\n      function airdropByOwner(address[] memory _addresses, uint256[] memory _amount) external onlyOwner returns (bool){\r\n          require(_addresses.length == _amount.length,\"Invalid Array\");\r\n          uint256 count = _addresses.length;\r\n          uint256 airdropcount = 0;\r\n          for (uint256 i = 0; i < count; i++){\r\n               _transfer(msg.sender, _addresses[i], _amount[i]);\r\n               airdropcount = airdropcount.add(1);\r\n          }\r\n          return true;\r\n      }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0),\"Invalid to address\");\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) external override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0),\"Invalid address\");\r\n        require(owner != address(0),\"Invalid address\");\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0),\"Invalid account\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) external onlyOwner{\r\n        _burn(msg.sender, value);\r\n    }\r\n    \r\n    /*----------------------------------------------------------------------------\r\n     * Functions for owner\r\n     *----------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n    * @dev get address of smart contract owner\r\n    * @return address of owner\r\n    */\r\n    function getowner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to check if the message sender is owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"You are not authenticate to make this transfer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for modifier\r\n     */\r\n    function isOwner() internal view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ownership of the smart contract. For owner only\r\n     * @return request status\r\n      */\r\n    function transferOwnership(address newOwner) external onlyOwner returns (bool){\r\n        require(newOwner != address(0), \"Owner address cant be zero\");\r\n        _owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n    /* ----------------------------------------------------------------------------\r\n     *  Functions for Additional Business Logic For Owner Functions\r\n     * ----------------------------------------------------------------------------\r\n     */\r\n     \r\n     /**\r\n     * @dev Whitelist Addresses for further transactions\r\n     * @param _userAddresses  Array of user addresses\r\n     */\r\n     function whitelistUserAdress(address[] calldata _userAddresses) external onlyOwner returns(bool){\r\n         uint256 count = _userAddresses.length;\r\n         require(count < 201, \"Array Overflow\");    //Max 200 enteries at a time\r\n          for (uint256 i = 0; i < count; i++){\r\n               _whitelistedUserAddresses.push(_userAddresses[i]);\r\n               _whitelistedAddress[_userAddresses[i]] = true;\r\n          }\r\n         return true;\r\n     }\r\n     \r\n     /**\r\n     * @dev get the list of whitelisted addresses\r\n     */\r\n     function getWhitelistUserAdress() external view returns(address[] memory){\r\n         return _whitelistedUserAddresses;\r\n     }\r\n     \r\n     /**\r\n     * @dev Set sale parameters for users to buy new tokens\r\n     * @param _startTime Start time of the sale\r\n     * @param _endTime End time of the sale\r\n     * @param _minimumAmount Minimum accepted amount\r\n     * @param _maximumAmount Maximum accepted amount\r\n     */\r\n     function setSaleParameter(\r\n         uint256 _startTime,\r\n         uint256 _endTime,\r\n         uint256 _minimumAmount,\r\n         uint256 _maximumAmount,\r\n         bool _whitelistFlag\r\n         ) external onlyOwner returns(bool){\r\n          require(_startTime > 0 && _endTime > 0  && _minimumAmount > 0  && _maximumAmount > 0, \"Invalid Values\");\r\n          saleStartTime = _startTime;\r\n          saleEndTime = _endTime;\r\n          saleMinimumAmount = _minimumAmount;\r\n          saleMaximumAmount = _maximumAmount;\r\n          saleId = saleId.add(1);\r\n          whitelistFlag = _whitelistFlag;\r\n         return true;\r\n     }\r\n     \r\n     /**\r\n     * @dev Get Sale Details Description\r\n     */\r\n     function getSaleParameter() external view returns(\r\n         uint256 _startTime,\r\n         uint256 _endTime,\r\n         uint256 _minimumAmount,\r\n         uint256 _maximumAmount,\r\n         uint256 _saleId,\r\n         bool _whitelistFlag\r\n         ){\r\n          _startTime  =  saleStartTime;\r\n          _endTime = saleEndTime;\r\n          _minimumAmount = saleMinimumAmount;\r\n          _maximumAmount = saleMaximumAmount;\r\n          _saleId = saleId;\r\n          _whitelistFlag = whitelistFlag;\r\n     }\r\n     \r\n     /**\r\n     * @dev Owner can set token price\r\n     * @param _tokenPrice price of 1 Token\r\n     */\r\n     function setTokenPrice(\r\n         uint256 _tokenPrice\r\n         ) external onlyOwner returns(bool){\r\n          tokenPrice = _tokenPrice;\r\n         return true;\r\n     }\r\n     \r\n     /**\r\n     * @dev Get token price\r\n     */\r\n     function getTokenPrice() external view returns(uint256){\r\n          return tokenPrice;\r\n     }\r\n     \r\n     \r\n    /* ----------------------------------------------------------------------------\r\n     *  Functions for Additional Business Logic For Users \r\n     * ----------------------------------------------------------------------------\r\n     */    \r\n     \r\n    modifier checkSaleValidations(address _userAddress, uint256 _value){\r\n     if(whitelistFlag == true){    \r\n     require(_whitelistedAddress[_userAddress] == true, \"Address not Whitelisted\" );\r\n     }\r\n     require(saleStartTime < block.timestamp , \"Sale not started\");\r\n     require(saleEndTime > block.timestamp, \"Sale Ended\");\r\n     require(_contributionBNB[_userAddress].add(_value) >= saleMinimumAmount, \"Total amount should be more than minimum limit\");\r\n     require(_contributionBNB[_userAddress].add(_value) <= saleMaximumAmount, \"Total amount should be less than maximum limit\");\r\n     require(_value <= IDOAvailable, \"Hard Cap Reached\");\r\n        _;\r\n    }\r\n    \r\n    //Check the expected amount per bnb \r\n    function checkTokensExpected(uint256 _value) view external returns(uint256){\r\n        return _value.mul(tokenPrice).div(decimalBalancer);\r\n    }\r\n    \r\n    /*\r\n     * @dev Get Purchaseable amount\r\n     */\r\n      function getPurchaseableTokens() external view returns(uint256){\r\n         return hardCap;\r\n     }\r\n    \r\n    /*\r\n     * @dev Buy New tokens from the sale\r\n     */\r\n     function buyTokens() payable external checkSaleValidations(msg.sender, msg.value) returns(bool){\r\n         _trasferInLockingState(msg.sender, msg.value);\r\n         return true;\r\n     }\r\n     \r\n     /*\r\n      * @dev Internal function to achieve \r\n      */\r\n     function _trasferInLockingState(\r\n         address _userAddress,\r\n         uint256 _amountTransfer\r\n         ) internal returns(bool){\r\n        _lockingTimeForSale[_userAddress] = block.timestamp;\r\n        uint256 earnedTokens = _recordSale[_userAddress].add((_amountTransfer.mul(tokenPrice)).div(decimalBalancer));\r\n        _recordSale[_userAddress] = earnedTokens;\r\n        _finalSoldAmount[_userAddress] = earnedTokens;\r\n        _contributionBNB[_userAddress] = _contributionBNB[_userAddress].add(msg.value);\r\n        IDOAvailable = IDOAvailable.sub(earnedTokens);\r\n         return true;\r\n     }\r\n     \r\n     /*\r\n     * @dev Owner can set hard cap for IDO \r\n     */\r\n     function setIDOavailable(uint256 _IDOHardCap) external onlyOwner returns(bool){\r\n         require(_IDOHardCap <= balanceOf(IDO) && _IDOHardCap > 0, \"Value should not be more than IDO balance and greater than 0\" );\r\n         hardCap = _IDOHardCap;\r\n         IDOAvailable = _IDOHardCap;\r\n         return true;\r\n     }\r\n     \r\n    /*\r\n     * @dev Claim Purchased token by lock number \r\n     */\r\n    function claimPurchasedTokens(uint256 _lockNumber) external validateClaim(msg.sender,_lockNumber) returns (bool){\r\n        _transfer(IDO,msg.sender,_finalSoldAmount[msg.sender].div(4));\r\n        _recordSale[msg.sender] = _recordSale[msg.sender].sub(_finalSoldAmount[msg.sender].div(4));\r\n        reEntrance[msg.sender][_lockNumber] = true;\r\n        _claimedByUser[msg.sender][_lockNumber] = _finalSoldAmount[msg.sender].div(4);\r\n    }\r\n    \r\n    //validate claim tokens\r\n    modifier validateClaim(address _userAddress, uint256 _lockNumber)\r\n    {\r\n        require(_recordSale[_userAddress] > 0, \"Not sufficient purchase Balance\");\r\n        require(_lockNumber == 1 || _lockNumber == 2 || _lockNumber == 3 || _lockNumber == 4, \"Invalid Lock Number\");\r\n        if(_lockNumber == 1){   //Users will be able to withdraw tokens only after 1.5 hours of end time\r\n            require(block.timestamp > saleEndTime + 5400 && reEntrance[_userAddress][_lockNumber] != true, \"Insufficient Unlocked Tokens\");\r\n        }\r\n        if(_lockNumber == 2){    // 2 weeks\r\n            require(block.timestamp > saleEndTime + 1209600  && reEntrance[_userAddress][_lockNumber] != true , \"Insufficient Unlocked Tokens\");\r\n        }\r\n        if(_lockNumber == 3){    // 2 weeks\r\n            require(block.timestamp > saleEndTime  + 2419200 && reEntrance[_userAddress][_lockNumber] != true ,  \"Insufficient Unlocked Tokens\");\r\n        }\r\n        if(_lockNumber == 4){    // 2 weeks\r\n            require(block.timestamp > saleEndTime + 3628800 &&  reEntrance[_userAddress][_lockNumber] != true,  \"Insufficient Unlocked Tokens\");\r\n        }\r\n        _;\r\n    }\r\n    \r\n    /*\r\n     * @dev Check if the user address is whitelisted or not\r\n     */ \r\n    function checkWhitelistedAddress(address _userAddress) view external returns(bool){\r\n        require(_userAddress != address(0), \"addresses should not be 0\");\r\n        return _whitelistedAddress[_userAddress];\r\n    }\r\n    \r\n    /*\r\n     * @dev Check all locking addresses\r\n     */\r\n    modifier checkLockedAddresses(address _lockedAddresses){\r\n           require(_addressLocked[_lockedAddresses] != true, \"Locking Address\");\r\n       _;\r\n    }\r\n    \r\n    /*\r\n     * @dev withdraw special locked tokens for internal team \r\n     */\r\n    function withdrawSpecialLocked(address _toAddress, uint256 _amount) checkLockingRoles(msg.sender, _amount) external returns(bool){\r\n       _transfer(msg.sender, _toAddress, _amount);\r\n        specialAddBal[msg.sender] = specialAddBal[msg.sender].sub(_amount);\r\n    }\r\n    \r\n    /*\r\n     * @dev Admin can withdraw the bnb  \r\n     */\r\n    function withdrawBNB(uint256 _amount) external onlyOwner returns(bool){\r\n        msg.sender.transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n     * @dev Get user tokens by address \r\n     */\r\n    function getUserTokensBy(address _userAddress) external view returns(uint256 _div1, uint256 _div2, uint256 _div3, uint256 _div4){\r\n        uint256 division = _finalSoldAmount[_userAddress].div(4);\r\n        _div1 = division;\r\n        _div2 = division;\r\n        _div3 = division;\r\n        _div4 = division;\r\n        if(reEntrance[_userAddress][1] == true){\r\n            _div1 = 0;\r\n        }\r\n        if(reEntrance[_userAddress][2] == true){\r\n            _div2 = 0;\r\n        }\r\n        if(reEntrance[_userAddress][3] == true){\r\n            _div3 = 0;\r\n        }\r\n        if(reEntrance[_userAddress][4] == true){\r\n            _div4 = 0;\r\n        }\r\n        return(_div1,_div2,_div3,_div4);\r\n    }\r\n    \r\n    /*\r\n     * @dev Get contract BNb balance to display\r\n     */ \r\n    function checkContractBNBBalance() external view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    //get sold status\r\n    function getSoldStatus() external view returns(uint256 _totalAvailable, uint256 _currentAvailable){\r\n       _totalAvailable = hardCap;\r\n       _currentAvailable = IDOAvailable;\r\n    }\r\n    \r\n    function getAmountPurchased(address _userAddress) external view returns(uint256 _contribution, uint256 _allocation){\r\n       _contribution =  _contributionBNB[_userAddress];\r\n        _allocation = _finalSoldAmount[_userAddress];\r\n    }\r\n    \r\n    //check contract block.timestamp time \r\n    function checkContractTime() external view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n    \r\n    //Get the dates for unlock for buyers\r\n    function getClaimDates() view external returns(uint256 _d1, uint256 _d2, uint256 _d3, uint256 _d4){\r\n        _d1 = saleEndTime + 5400;   // After 1.5 hours of end sale\r\n        _d2 = saleEndTime + 1209600;\r\n        _d3 = saleEndTime + 2419200;\r\n        _d4 = saleEndTime + 3628800;\r\n        return(_d1, _d2, _d3, _d4);\r\n    }\r\n    \r\n    /*\r\n     * @dev Get claimed tokens by user address\r\n     */\r\n    function getClaimedTokensHistory(address _userAddress) view external returns(uint256 r1,uint256 r2, uint256 r3,uint256 r4){\r\n        r1 = _claimedByUser[_userAddress][1];\r\n        r2 = _claimedByUser[_userAddress][2];\r\n        r3 = _claimedByUser[_userAddress][3];\r\n        r4 = _claimedByUser[_userAddress][4];\r\n        return(r1, r2, r3, r4);\r\n    }\r\n    \r\n    /*\r\n     * @dev Set bnb price to display per token\r\n     */\r\n    function setBnbPricePerToken(uint256 _price) external onlyOwner returns(bool){\r\n        pricePerToken = _price;\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n     * @dev Get BNB price per token to display \r\n     */\r\n    function getBnbPricePerToken() view external returns(uint256){\r\n        return pricePerToken;\r\n    }\r\n   \r\n    // to check locked tokens for marketing address, Reserve, Partners, Liquidity and Team  \r\n    modifier checkLockingRoles(address _add, uint256 _amountRequested){\r\n        require(_add == Team1 || _add == Team2 || _add == Partners || _add == Liquidity || _add == Marketing || _add == Reserve , \"Only for Special Addresses\");\r\n        require(_amountRequested != 0, \"amount should be greater than 0\");\r\n       if(_add == Reserve){\r\n           require(block.timestamp > deploymentTime+31556926, \"Tokens are locked for 1 years from TGE\");\r\n         }\r\n       if(_add == Marketing){\r\n           if(block.timestamp > deploymentTime && block.timestamp < deploymentTime + 2629743){                                                   // First month from the deployment & 10%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 18000000000000000000000000, \"Amount exceded lock 1\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 2629743 && block.timestamp < deploymentTime + 5259486){                                         // Second month from the deployment & 10%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 16000000000000000000000000, \"Amount exceded lock 2\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 5259486 && block.timestamp < deploymentTime + 7889229){                                         // Third month from the deployment & 10%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 14000000000000000000000000, \"Amount exceded lock 3\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 7889229 && block.timestamp < deploymentTime + 10518972){                                        // Fourth month from the deployment & 10%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 12000000000000000000000000, \"Amount exceded lock 4\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 10518972 && block.timestamp < deploymentTime + 13148715){                                       // Fifth month from the deployment & 10%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 10000000000000000000000000, \"Amount exceded lock 5\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 13148715 && block.timestamp < deploymentTime + 15778458){                                       // Sixth month from the deployment & 10%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 8000000000000000000000000, \"Amount exceded lock 6\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 15778458 && block.timestamp < deploymentTime + 18408201){                                       // Seventh month from the deployment & 10% \r\n               require(specialAddBal[_add].sub(_amountRequested) >= 6000000000000000000000000, \"Amount exceded lock 7\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 18408201 && block.timestamp < deploymentTime + 21037944){                                       // Eighth month from the deployment & 10%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 4000000000000000000000000, \"Amount exceded lock 8\");\r\n           }\r\n           if(block.timestamp > deploymentTime + 21037944 && block.timestamp < deploymentTime + 23667687){                                       // Ninth month from the deployment & 10%\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 2000000000000000000000000, \"Amount exceded lock 9\");\r\n           }\r\n         }\r\n       if(_add == Team1){\r\n           if(block.timestamp > deploymentTime + 15778458 && block.timestamp < deploymentTime + 18408201){                                        // Sixth to Seventh Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1620000000000000000000000, \"Amount exceded lock 1\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 18408201 && block.timestamp < deploymentTime + 21037944){                                        // Seventh to Eighth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1440000000000000000000000, \"Amount exceded lock 2\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 21037944 && block.timestamp < deploymentTime + 23667687){                                        // Eighth to Ninth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1260000000000000000000000, \"Amount exceded lock 3\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 23667687 && block.timestamp < deploymentTime + 26297430){                                        // Ninth to Tenth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1080000000000000000000000, \"Amount exceded lock 4\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 26297430 && block.timestamp < deploymentTime + 28927173){                                        // Tenth to Eleventh Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 900000000000000000000000, \"Amount exceded lock 5\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 28927173 && block.timestamp < deploymentTime + 31556916){                                        // Eleventh to Twelveth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 720000000000000000000000, \"Amount exceded lock 6\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 31556916 && block.timestamp < deploymentTime + 34186659){                                        // Twelveth to Thirteenth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 540000000000000000000000, \"Amount exceded lock 7\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 34186659 && block.timestamp < deploymentTime + 36816402){                                        // Thirteenth to Fourteenth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 360000000000000000000000, \"Amount exceded lock 8\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 36816402 && block.timestamp < deploymentTime + 39446145){                                        // Fourteenth to Fifteenth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 180000000000000000000000, \"Amount exceded lock 9\");\r\n           }\r\n         }\r\n          if(_add == Team2){   \r\n           if(block.timestamp > deploymentTime + 15778458 && block.timestamp < deploymentTime + 18408201){                                          // Sixth to Seventh Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1800000000000000000000000, \"Amount exceded lock 1\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 18408201 && block.timestamp < deploymentTime + 21037944){                                         // Seventh to Eighth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1600000000000000000000000, \"Amount exceded lock 2\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 21037944 && block.timestamp < deploymentTime + 23667687){                                        // Eighth to Ninth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1400000000000000000000000, \"Amount exceded lock 3\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 23667687 && block.timestamp < deploymentTime + 26297430){                                        // Ninth to Tenth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1200000000000000000000000, \"Amount exceded lock 4\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 26297430 && block.timestamp < deploymentTime + 28927173){                                        // Tenth to Eleventh Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 1000000000000000000000000, \"Amount exceded lock 5\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 28927173 && block.timestamp < deploymentTime + 31556916){                                        // Eleventh to Twelveth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 800000000000000000000000, \"Amount exceded lock 6\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 31556916 && block.timestamp < deploymentTime + 34186659){                                        // Twelveth to Thirteenth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 600000000000000000000000, \"Amount exceded lock 7\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 34186659 && block.timestamp < deploymentTime + 36816402){                                        // Thirteenth to Fourteenth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 400000000000000000000000, \"Amount exceded lock 8\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 36816402 && block.timestamp < deploymentTime + 39446145){                                        // Fourteenth to Fifteenth Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 200000000000000000000000, \"Amount exceded lock 9\");\r\n           }\r\n         }\r\n         if(_add == Partners){ \r\n            if(block.timestamp > deploymentTime && block.timestamp < deploymentTime + 1209600){                                                     //One week\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 8000000000000000000000000, \"Amount exceded lock 1\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 1209600 && block.timestamp < deploymentTime + 2419200){                                           //Third week\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 6000000000000000000000000, \"Amount exceded lock 2\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 2419200 && block.timestamp < deploymentTime + 3628800){                                           //Fifth week\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 4000000000000000000000000, \"Amount exceded lock 3\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 3628800 && block.timestamp < deploymentTime + 4838400){                                            //Seventh week\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 2000000000000000000000000, \"Amount exceded lock 4\");\r\n           }\r\n         }\r\n         if(_add == Liquidity){\r\n             if(block.timestamp > deploymentTime && block.timestamp < deploymentTime + 2629743){                                                     //One to Two Month\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 8000000000000000000000000, \"Amount exceded lock 1\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 2629743 && block.timestamp < deploymentTime + 5259486){                                            //Two to Three week\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 6000000000000000000000000, \"Amount exceded lock 2\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 5259486 && block.timestamp < deploymentTime + 7889229){                                            //Three to Four week\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 4000000000000000000000000, \"Amount exceded lock 3\");\r\n           }\r\n            if(block.timestamp > deploymentTime + 7889229 && block.timestamp < deploymentTime + 6048000){                                            //Four to Fifth week\r\n               require(specialAddBal[_add].sub(_amountRequested) >= 2000000000000000000000000, \"Amount exceded lock 4\");\r\n           }\r\n         }\r\n        _;\r\n     }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkContractBNBBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkContractTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTokensExpected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"checkWhitelistedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockNumber\",\"type\":\"uint256\"}],\"name\":\"claimPurchasedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getAmountPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBnbPricePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_d1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_d2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_d3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_d4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getClaimedTokensHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurchaseableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelistFlag\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoldStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentAvailable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserTokensBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_div1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_div2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_div3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_div4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistUserAdress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setBnbPricePerToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_IDOHardCap\",\"type\":\"uint256\"}],\"name\":\"setIDOavailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelistFlag\",\"type\":\"bool\"}],\"name\":\"setSaleParameter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"}],\"name\":\"whitelistUserAdress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSpecialLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiPad", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000aeda753564624653529eed510f6732d4c9cd704000000000000000000000000000000000000000000000000000000000000000084d756c746950616400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d50414400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://46d09f3a2cac1c430b6f059ac7975484673f7b4e3a718243986770c9420220db"}