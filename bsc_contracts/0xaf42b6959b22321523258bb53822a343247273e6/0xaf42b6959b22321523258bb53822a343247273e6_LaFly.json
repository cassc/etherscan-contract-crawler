{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-03-12\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed owner, address indexed to, uint value);\r\n}\r\n \r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n  \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Auth {\r\n    address public owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    // function getOwner() public view returns (address) {\r\n    //     return owner;\r\n    // }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n     function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\nlibrary EnumerableSet {\r\n   \r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        \r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            \r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n    \r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    \r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    \r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   \r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    \r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n   \r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ncontract LaFly is Context, IERC20, Auth {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcludedFromHave;\r\n\r\n    mapping(address => bool) private _updated;\r\n   \r\n    uint8 private _decimals = 18;\r\n    uint256 private _tTotal;\r\n    uint256 public supply = 30000 * 10 ** 18;\r\n\r\n    string private _name = \"LaFly\";\r\n    string private _symbol = \"LF\";\r\n    \r\n    uint256 public _buyLpFee = 3;\r\n    uint256 public _sellLpFee = 3;\r\n\r\n    uint256 public _buyDaoFee = 1;\r\n    uint256 public _sellDaoFee = 1;\r\n    address public daoAddress = 0xBB252ceb94D3e96942E7c69A5Fb697a2C36322d7;\r\n\r\n    uint256 public _buyBurnFee = 4;\r\n    uint256 public _sellBurnFee = 6;\r\n    address public burnAddress = 0x44bc8E89A821f5E1e529E73F94824C5f5074571d;\r\n\r\n    uint256 public _buyCharityFee = 0;\r\n    uint256 public _sellCharityFee = 2;\r\n    address public charityAddress = 0x2C76A688D9B9456e64b193Bfc2014E970e787FCF;\r\n \r\n    uint256 public _buyShareFee = 2;\r\n    uint256 public _sellShareFee = 0;\r\n    uint256 internal _shareConfigNum = 4;\r\n    uint[] internal shareConfig = [3,1];\r\n\r\n    bool buyOpen;\r\n\r\n    uint256 public totalBuyFee = 10;\r\n    uint256 public totalSellFee = 12;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    mapping(address => bool) public ammPairs;\r\n\r\n    IERC20 public uniswapV2Pair;\r\n    address public wbnb;\r\n    address public usdt;\r\n\r\n    uint public recommeCondition = 1 * 10 ** 16;\r\n    uint public lpCondition = 1 * 10 ** 16;\r\n\r\n    mapping(address => bool) isBlackList;\r\n\r\n    uint256 public _maxHavAmount = 30 * 10**18;\r\n\r\n    address public initPoolAddress;\r\n\r\n    address constant rootAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    \r\n    mapping (address => address) public _recommerMapping;\r\n\r\n    uint256 currentIndex;\r\n    uint256 distributorGas = 500000;\r\n    uint256 public minPeriod = 3600;\r\n    uint256 public LPFeefenhong;\r\n\r\n    address private fromAddress;\r\n    address private toAddress;\r\n\r\n    uint256 launchedAt = 0;\r\n\r\n    EnumerableSet.AddressSet lpProviders;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = supply / 10000; // 0.01%\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    \r\n    constructor (\r\n        address _route,\r\n        address _usdt) Auth(msg.sender) public {\r\n        \r\n        usdt = _usdt;\r\n        initPoolAddress = owner;\r\n\r\n        _recommerMapping[rootAddress] = address(0xdeaddead);\r\n        _recommerMapping[owner] = rootAddress;\r\n        _recommerMapping[daoAddress] = rootAddress;\r\n        _recommerMapping[burnAddress] = rootAddress;\r\n        _recommerMapping[charityAddress] = rootAddress;\r\n       \r\n        _tOwned[owner] = supply;\r\n        _tTotal = supply;\r\n        \r\n        _isExcludedFromFee[owner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[rootAddress] = true;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_route);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        address bnbPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        wbnb = _uniswapV2Router.WETH();\r\n\r\n        uniswapV2Pair = IERC20(bnbPair);\r\n        ammPairs[bnbPair] = true;\r\n\r\n        _isExcludedFromHave[owner] = true;\r\n        _isExcludedFromHave[address(this)] = true;\r\n        _isExcludedFromHave[rootAddress] = true;\r\n        _isExcludedFromHave[address(uniswapV2Pair)] = true;\r\n\r\n        LPFeefenhong = block.timestamp;\r\n\r\n        emit Transfer(address(0), owner, _tTotal);\r\n    }\r\n\r\n    function setAddress(address _daoAddress, address _burnAddress, address _charityAddress)external authorized{\r\n        daoAddress = _daoAddress;\r\n        burnAddress = _burnAddress;\r\n        charityAddress = _charityAddress;\r\n    }\r\n\r\n    function addToBlackList(address user) external authorized {\r\n        isBlackList[user] = true;\r\n    }\r\n\r\n    function removeFromBlackList(address user) external authorized {\r\n        isBlackList[user] = false;\r\n    }\r\n\r\n    function setMaxHavAmount(uint256 maxHavAmount)external authorized{\r\n        _maxHavAmount = maxHavAmount;\r\n    }\r\n\r\n    function setBuyOpen() external authorized{\r\n        buyOpen = true;\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function setAmmPair(address pair,bool hasPair)external authorized{\r\n        ammPairs[pair] = hasPair;\r\n    }\r\n\r\n    function setCondition(uint rc,uint lc)external authorized{\r\n        recommeCondition = rc;\r\n        lpCondition = lc;\r\n    }\r\n\r\n    function setMinPeriod(uint period)external authorized{\r\n        minPeriod = period;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount)external authorized{\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function setExcludeFromFee(address account, bool _isExclude) public authorized {\r\n        _isExcludedFromFee[account] = _isExclude;\r\n    }\r\n\r\n    function setExcludedFromHave(address account, bool _isExclude) public authorized {\r\n        _isExcludedFromHave[account] = _isExclude;\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _take(uint256 tValue,address from,address to) private {\r\n        _tOwned[to] = _tOwned[to].add(tValue);\r\n        emit Transfer(from, to, tValue);\r\n    }\r\n    \r\n    function getForefathers(address owner,uint num) external view returns(address[] memory fathers){\r\n        fathers = new address[](num);\r\n        address parent  = owner;\r\n        for( uint i = 0; i < num; i++){\r\n            parent = _recommerMapping[parent];\r\n            if( parent == rootAddress || parent == address(0) ) break;\r\n            fathers[i] = parent;\r\n        }\r\n    }\r\n\r\n    function _takeShare(uint tShare,address from,address user) private {\r\n\r\n        address[] memory farthers = this.getForefathers(user,shareConfig.length);\r\n\r\n        uint len = farthers.length;\r\n\r\n        uint sended = 0;\r\n        for( uint i = 0; i < len; i++ ){\r\n            address parent = farthers[i];\r\n            if( parent == address(0)) break;\r\n            if( isBlackList[parent] ){\r\n                continue;\r\n            }\r\n            uint tv = tShare * shareConfig[i] / _shareConfigNum;\r\n            _tOwned[parent] = _tOwned[parent].add(tv);\r\n            emit Transfer(from, parent, tv);\r\n            sended += tv;\r\n        }  \r\n        \r\n        if( tShare > sended && tShare - sended > 10000 ){\r\n            _take(tShare - sended,from,address(this));\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function addRelationEx(address recommer,address user) internal {\r\n        if( \r\n            recommer != user \r\n            && _recommerMapping[user] == address(0x0) \r\n            && _recommerMapping[recommer] != address(0x0) ){\r\n                _recommerMapping[user] = recommer;\r\n        }       \r\n    }\r\n\r\n    function setFees(uint256 buyDaoFee, uint256 buyLpFee, uint256 buyShareFee, uint256 buyBurnFee, uint256 buyCharityFee,uint256 sellDaoFee, uint256 sellLpFee, uint256 sellShareFee, uint256 sellBurnFee, uint256 sellCharityFee) external authorized {\r\n        _buyDaoFee = buyDaoFee;\r\n        _buyLpFee = buyLpFee;\r\n        _buyShareFee = buyShareFee;\r\n        _buyBurnFee = buyBurnFee;\r\n        _buyCharityFee = buyCharityFee;\r\n        _sellDaoFee = sellDaoFee;\r\n        _sellLpFee = sellLpFee;\r\n        _sellShareFee = sellShareFee;\r\n        _sellBurnFee = sellBurnFee;\r\n        _sellCharityFee = sellCharityFee;\r\n        totalBuyFee = _buyDaoFee.add(_buyLpFee).add(_buyShareFee).add(_buyBurnFee).add(_buyCharityFee);\r\n        totalSellFee = _sellDaoFee.add(_sellLpFee).add(_sellShareFee).add(_sellBurnFee).add(_sellCharityFee);\r\n    }\r\n\r\n    struct Param{\r\n        bool takeFee;\r\n        uint tTransferAmount;\r\n        uint tContract;\r\n        uint tShare;\r\n        address user;\r\n    }\r\n\r\n     function _initParam(uint256 tAmount,Param memory param, address to) private view  {\r\n        uint tFee;\r\n        if( ammPairs[to]  ){\r\n            param.tContract = tAmount * (_sellDaoFee.add(_sellBurnFee).add(_sellCharityFee).add(_sellLpFee)) / 100;\r\n            param.tShare = tAmount * _sellShareFee / 100;\r\n            tFee = tAmount * totalSellFee / 100;\r\n        } else{\r\n            param.tContract = tAmount * (_buyDaoFee.add(_buyBurnFee).add(_buyCharityFee).add(_buyLpFee)) / 100;\r\n            param.tShare = tAmount * _buyShareFee / 100;\r\n            tFee = tAmount * totalBuyFee / 100;\r\n        }\r\n        param.tTransferAmount = tAmount.sub(tFee);\r\n    }\r\n\r\n    function _takeFee(Param memory param,address from)private {\r\n        if( param.tContract > 0 ){\r\n            _take(param.tContract, from, address(this));\r\n        }\r\n        if( param.tShare > 0 ){\r\n             _takeShare(param.tShare,from,param.user);\r\n        }\r\n    }\r\n\r\n    function shouldSwapBack(address to) internal view returns (bool) {\r\n        return ammPairs[to]\r\n        && !inSwap\r\n        && swapEnabled\r\n        && balanceOf(address(this)) >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        _allowances[address(this)][address(uniswapV2Router)] = swapThreshold;\r\n\r\n        uint256 amountToUsdt = swapThreshold.mul(3).div(10);\r\n        uint256 amountToBnb = swapThreshold.sub(amountToUsdt);\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = wbnb;\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToBnb,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        uint256 amountToDao = amountBNB.mul(1).div(7);\r\n        uint256 amountToBurn = amountBNB.mul(5).div(7);\r\n        uint256 amountToCharity = amountBNB.sub(amountToDao).sub(amountToBurn);\r\n\r\n        payable(daoAddress).transfer(amountToDao);\r\n        payable(burnAddress).transfer(amountToBurn);\r\n        payable(charityAddress).transfer(amountToCharity);\r\n\r\n        address[] memory pathToUsdt = new address[](3);\r\n        pathToUsdt[0] = address(this);\r\n        pathToUsdt[1] = wbnb;\r\n        pathToUsdt[2] = usdt;\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountToUsdt,\r\n            0,\r\n            pathToUsdt,\r\n            address(this),\r\n            block.timestamp\r\n        );   \r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if( ammPairs[from] ){\r\n            require(buyOpen == true, \"buy should be opened\");\r\n        }\r\n\r\n        if( isBlackList[from] ){\r\n            require(false,\"not allow\");\r\n        }\r\n\r\n        if(!_isExcludedFromHave[to] && !ammPairs[to]){\r\n            require(amount + balanceOf(to) <= _maxHavAmount,\"Transfer amount exceeds the maxHavAmount.\");\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        Param memory param;\r\n        param.tTransferAmount = amount;\r\n\r\n        if( ammPairs[from] ){\r\n            param.user = to;\r\n        } else {\r\n            param.user = address(this);\r\n        }\r\n\r\n        if( ammPairs[to] && IERC20(to).totalSupply() == 0  ){\r\n            require(from == initPoolAddress,\"not allow init\");\r\n        }   \r\n\r\n        if(inSwap){\r\n            return _tokenTransfer(from,to,amount,param); \r\n        }\r\n\r\n        if (\r\n            launchedAt > 0 &&\r\n            ammPairs[from] &&\r\n            !_isExcludedFromFee[to]\r\n        ) {\r\n            if (block.number - launchedAt < 5) {\r\n                revert(\"Sniper rejected.\");\r\n            }\r\n        }\r\n\r\n        if( \r\n            !isContract(to) \r\n            && _recommerMapping[to] == address(0) \r\n            && amount >= recommeCondition){\r\n            \r\n            if( ammPairs[from]  ){\r\n                addRelationEx(owner,to);\r\n            }else{\r\n                addRelationEx(from,to);\r\n            }\r\n        }\r\n\r\n        if(ammPairs[to] || ammPairs[from]){\r\n            takeFee = true;\r\n        }\r\n\r\n        if(_isExcludedFromFee[to] || _isExcludedFromFee[from]){\r\n            takeFee = false;\r\n        }\r\n\r\n        if(shouldSwapBack(to)){ swapBack(); }\r\n\r\n        param.takeFee = takeFee;\r\n        if( takeFee ){\r\n            _initParam(amount,param,to);\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,param);\r\n\r\n        if( address(uniswapV2Pair) != address(0) ){\r\n            if (fromAddress == address(0)) fromAddress = from;\r\n            if (toAddress == address(0)) toAddress = to;\r\n            if ( !ammPairs[fromAddress] ) setShare(fromAddress);\r\n            if ( !ammPairs[toAddress] ) setShare(toAddress);\r\n            fromAddress = from;\r\n            toAddress = to;\r\n\r\n            if (\r\n                from != address(this) \r\n                && LPFeefenhong.add(minPeriod) <= block.timestamp \r\n                && IBEP20(usdt).balanceOf(address(this)) > 0\r\n                && uniswapV2Pair.totalSupply() > 1000 ) {\r\n\r\n                process(distributorGas);\r\n                LPFeefenhong = block.timestamp;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount,Param memory param) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);\r\n        emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if(param.takeFee){\r\n            _takeFee(param,sender);\r\n        }\r\n    }\r\n    \r\n     function process(uint256 gas) private {\r\n        uint256 shareholderCount = lpProviders.length();\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        uint256 nowbanance = IBEP20(usdt).balanceOf(address(this));\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        uint ts = uniswapV2Pair.totalSupply();\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            uint256 amount = nowbanance.mul(uniswapV2Pair.balanceOf(lpProviders.at(currentIndex))).div(ts);\r\n\r\n            if (IBEP20(usdt).balanceOf(address(this)) < amount ) return;\r\n\r\n            if (amount >= lpCondition) {\r\n                IBEP20(usdt).transfer(lpProviders.at(currentIndex), amount);  \r\n            }\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (_updated[shareholder]) {\r\n            if (uniswapV2Pair.balanceOf(shareholder) == 0) quitShare(shareholder);\r\n            return;\r\n        }\r\n        if (uniswapV2Pair.balanceOf(shareholder) == 0) return;\r\n        lpProviders.add(shareholder);\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        lpProviders.remove(shareholder);\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPFeefenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDaoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyShareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHavAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_recommerMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDaoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellShareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"getForefathers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"fathers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recommeCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPair\",\"type\":\"bool\"}],\"name\":\"setAmmPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBuyOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lc\",\"type\":\"uint256\"}],\"name\":\"setCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExclude\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExclude\",\"type\":\"bool\"}],\"name\":\"setExcludedFromHave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyDaoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyShareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyCharityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDaoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellShareFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellCharityFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHavAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxHavAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LaFly", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa6d53deefaccab45336e62b14a535f8006bf356cb7d1945a8451bd335bc98d2"}