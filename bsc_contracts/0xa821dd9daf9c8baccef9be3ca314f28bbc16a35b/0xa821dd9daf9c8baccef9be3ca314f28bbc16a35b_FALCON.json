{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^ 0.8.20;\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns(address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns(bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\t_checkOwner();\r\n\t\t_;\r\n\t}\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns(address) {\r\n\t\treturn _owner;\r\n\t}\r\n\t/**\r\n\t * @dev Throws if the sender is not the owner.\r\n\t */\r\n\tfunction _checkOwner() internal view virtual {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t}\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\ninterface IERC20 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tfunction totalSupply() external view returns(uint256);\r\n\tfunction balanceOf(address account) external view returns(uint256);\r\n\tfunction transfer(address to, uint256 amount) external returns(bool);\r\n\tfunction allowance(address owner, address spender) external view returns(uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns(bool);\r\n\tfunction transferFrom(address from, address to, uint256 amount) external returns(bool);\r\n}\r\n\r\n\r\ninterface OWN {\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n \r\ncontract FALCON is Ownable {\r\n\t address[4] addr ;\r\n    constructor() {\r\n\t\taddr =[msg.sender,msg.sender,msg.sender,msg.sender];\r\n\t}\r\n    address USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    uint256[4] all  = [15, 20, 30 ,30];\r\n   \r\n    function transfer() public {\r\n        uint256 balance = IERC20(USDT).balanceOf(address(this));\r\n        if(balance<100) return;\r\n        IERC20(USDT).transfer(addr[0],(balance*all[0])/95);\r\n        IERC20(USDT).transfer(addr[1],(balance*all[1])/95);\r\n        IERC20(USDT).transfer(addr[2],(balance*all[2])/95);\r\n        IERC20(USDT).transfer(addr[3],(balance*all[3])/95);\r\n    }\r\n\r\n    function setAddress (address a1,address a2,address a3,address a4) public onlyOwner {\r\n        addr[0] = a1;\r\n        addr[1] = a2;\r\n        addr[2] = a3;\r\n        addr[3] = a4;\r\n    }\r\n\r\n    //clear token inside contract from unknow sender except USDT\r\n    function clear(address token) external onlyOwner{\r\n        require(token != USDT ,\"Unable to Clear USDT\");\r\n        IERC20(token).transfer(msg.sender,IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n     //clear BNB inside contract from unknow sender\r\n     function clearBNB() external onlyOwner{\r\n        uint256 ib = address(this).balance;\r\n         payable(msg.sender).transfer(ib);\r\n    }\r\n\r\n     function transferOwner(address token,address newOwner) public onlyOwner {\r\n        OWN(token).transferOwnership(newOwner);\r\n     }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"a2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"a3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"a4\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FALCON", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://92b27607312c4722ea8ed1d8223d622fdb557156be4e44ef23e06af9b23094de"}