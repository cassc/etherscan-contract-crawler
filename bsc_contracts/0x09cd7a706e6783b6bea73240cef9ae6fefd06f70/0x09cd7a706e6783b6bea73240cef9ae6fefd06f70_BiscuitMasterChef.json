{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-03-08\r\n*/\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies in extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly { size := extcodesize(account) }\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain`call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t  return functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\treturn _functionCallWithValue(target, data, value, errorMessage);\r\n\t}\r\n\r\n\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tmapping (address => uint256) private _balances;\r\n\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\r\n\t/**\r\n\t * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n\t * a default value of 18.\r\n\t *\r\n\t * To select a different value for {decimals}, use {_setupDecimals}.\r\n\t *\r\n\t * All three of these values are immutable: they can only be set once during\r\n\t * construction.\r\n\t */\r\n\tconstructor (string memory name, string memory symbol) public {\r\n\t\t_name = name;\r\n\t\t_symbol = symbol;\r\n\t\t_decimals = 18;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n\t */\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n\t * name.\r\n\t */\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n\t *\r\n\t * Tokens usually opt for a value of 18, imitating the relationship between\r\n\t * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n\t * called.\r\n\t *\r\n\t * NOTE: This information is only used for _display_ purposes: it in\r\n\t * no way affects any of the arithmetic of the contract, including\r\n\t * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\t */\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-allowance}.\r\n\t */\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transferFrom}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance. This is not\r\n\t * required by the EIP. See the note at the beginning of {ERC20};\r\n\t *\r\n\t * Requirements:\r\n\t * - `sender` and `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t * - the caller must have allowance for ``sender``'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\t *\r\n\t * This is an alternative to {approve} that can be used as a mitigation for\r\n\t * problems described in {IERC20-approve}.\r\n\t *\r\n\t * Emits an {Approval} event indicating the updated allowance.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.\r\n\t * - `spender` must have allowance for the caller of at least\r\n\t * `subtractedValue`.\r\n\t */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n\t *\r\n\t * This is internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n\t * the total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `from` set to the zero address.\r\n\t *\r\n\t * Requirements\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t */\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n\t * total supply.\r\n\t *\r\n\t * Emits a {Transfer} event with `to` set to the zero address.\r\n\t *\r\n\t * Requirements\r\n\t *\r\n\t * - `account` cannot be the zero address.\r\n\t * - `account` must have at least `amount` tokens.\r\n\t */\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n\t *\r\n\t * This internal function is equivalent to `approve`, and can be used to\r\n\t * e.g. set automatic allowances for certain subsystems, etc.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `owner` cannot be the zero address.\r\n\t * - `spender` cannot be the zero address.\r\n\t */\r\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets {decimals} to a value other than the default one of 18.\r\n\t *\r\n\t * WARNING: This function should only be called from the constructor. Most\r\n\t * applications that interact with token contracts will not expect\r\n\t * {decimals} to ever change, and may work incorrectly if it does.\r\n\t */\r\n\tfunction _setupDecimals(uint8 decimals_) internal {\r\n\t\t_decimals = decimals_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any transfer of tokens. This includes\r\n\t * minting and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\t * will be to transferred to `to`.\r\n\t * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor () internal {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\n// File: contracts/BiscuitToken.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n// BiscuitToken with Governance.\r\ncontract BiscuitToken is ERC20(\"Biscuit Farm Finance\", \"BCU\"), Ownable {\r\n\tuint256 private _cap = 20000000e18;\r\n\r\n\taddress public feeaddr;\r\n\tuint256 public transferFeeRate;\r\n\t\r\n\tmapping(address => bool) private _transactionFee;\r\n\r\n\tfunction cap() public view returns (uint256) {\r\n\t\treturn _cap;\r\n\t}\r\n\r\n\tfunction capfarm() public view returns (uint256) {\r\n\t\treturn cap().sub(totalSupply());\r\n\t} \r\n\r\n\t/**\r\n\t * @dev See {ERC20-_beforeTokenTransfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - minted tokens must not cause the total supply to go over the cap.\r\n\t */\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n\t\tsuper._beforeTokenTransfer(from, to, amount);\r\n\r\n\t\tif (from == address(0)) { // When minting tokens\r\n\t\t\trequire(totalSupply().add(amount) <= _cap, \"ERC20Capped: cap exceeded\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n\t *\r\n\t * This is internal function is equivalent to {transfer}, and can be used to\r\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `sender` cannot be the zero address.\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - `sender` must have a balance of at least `amount`.\r\n\t */\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n\t\tif (transferFeeRate > 0 && _transactionFee[recipient] == true && recipient != address(0) && feeaddr != address(0)) {\r\n\t\t\tuint256 _feeamount = amount * transferFeeRate / 100;\r\n\t\t\tsuper._transfer(sender, feeaddr, _feeamount); // TransferFee\r\n\t\t\tamount = amount - _feeamount;\r\n\t\t}\r\n\r\n\t\tsuper._transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\r\n\tfunction mint(address _to, uint256 _amount) public onlyOwner {\r\n\t\t_mint(_to, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from the caller.\r\n\t *\r\n\t * See {ERC20-_burn}.\r\n\t */\r\n\tfunction burn(uint256 amount) public virtual returns (bool) {\r\n\t\t_burn(_msgSender(), amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * See {ERC20-_burn} and {ERC20-allowance}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must have allowance for ``accounts``'s tokens of at least\r\n\t * `amount`.\r\n\t */\r\n\tfunction burnFrom(address account, uint256 amount) public virtual returns (bool) {\r\n\t\tuint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n\t\t_approve(account, _msgSender(), decreasedAllowance);\r\n\t\t_burn(account, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction addTransferFeeAddress(address _transferFeeAddress) public onlyOwner {\r\n\t\t_transactionFee[_transferFeeAddress] = true;\r\n\t}\r\n\r\n\tfunction removeTransferBurnAddress(address _transferFeeAddress) public onlyOwner {\r\n\t\tdelete _transactionFee[_transferFeeAddress];\r\n\t}\r\n\r\n    function setFeeAddr(address _feeaddr) public onlyOwner {\r\n\t\tfeeaddr = _feeaddr;\r\n    }\r\n\r\n\tconstructor() public {\r\n\t\ttransferFeeRate = 2;\r\n\t\t_mint(msg.sender, 2000000*10**18);\r\n\t}\r\n}\r\n\r\n// File: contracts/libraries/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/BiscuitMasterChef.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract BiscuitMasterChef is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;            // How many LP tokens the user has provided.\r\n        uint256 rewardDebt;        // Reward debt. See explanation below.\r\n        uint256 rewardDebtAtBlock; // the last block user stake\r\n        uint256 lockAmount;        // Lock amount reward token\r\n        uint256 lastUnlockBlock;\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;            // Address of LP token contract.\r\n        BiscuitToken rewardToken;        // Address of reward token contract.\r\n        uint256 allocPoint;        // How many allocation points assigned to this pool. reward to distribute per block.\r\n        uint256 lastRewardBlock;   // Last block number that Reward distribution occurs.\r\n        uint256 accRewardPerShare; // Accumulated Reward per share, times 1e12. See below.\r\n        uint256 rewardPerBlock;    // Reward per block.\r\n        uint256 percentLockReward; // Percent lock reward.\r\n        uint256 percentForDev;     // Percent for dev team.\r\n        uint256 feeForDep;         // Percent deposit.\r\n        uint256 finishBonusAtBlock;\r\n        uint256 startBlock;        // Start at block.\r\n        uint256 totalLock;         // Total lock reward token on pool.\r\n        uint256 lockFromBlock;     // Lock from block.\r\n        uint256 lockToBlock;       // Lock to block.\r\n    }\r\n\r\n    // Dev address.\r\n    address public devaddr;\r\n    bool public status;             // Status handle farmer can harvest.\r\n    IERC20 public referralToken;  // BCU token for check referral program\r\n\r\n    uint256 public stakeAmountLv1;    // Minimum stake BCU token condition level1 for referral program.\r\n    uint256 public stakeAmountLv2;    // Minimum stake BCU token condition level2 for referral program.\r\n\r\n    uint256 public percentForReferLv1; // Percent reward level1 referral program.\r\n    uint256 public percentForReferLv2; // Percent reward level2 referral program.\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    mapping(address => address) public referrers;\r\n    mapping(address => address[]) public myReferrers;\r\n    // Info of each user that stakes LP tokens. pid => user address => info\r\n    mapping(uint256 => mapping (address => UserInfo)) public userInfo;\r\n\r\n    mapping(uint256 => uint256[]) public rewardMultipliers;\r\n    mapping(uint256 => uint256[]) public halvingAtBlocks;\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all pools same reward token.\r\n    mapping(IERC20 => uint256) public totalAllocPoints;\r\n    // Total locks. Must be the sum of all token locks in all pools same reward token.\r\n    mapping(IERC20 => uint256) public totalLocks;\r\n    mapping(address => mapping (address => uint256)) public referralAmountLv1;\r\n    mapping(address => mapping (address => uint256)) public referralAmountLv2;\r\n\r\n    event Referral(address indexed user, address indexed ref);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event SendReward(address indexed user, uint256 indexed pid, uint256 amount, uint256 lockAmount);\r\n    event Lock(address indexed to, uint256 value);\r\n    event Status(address indexed user, bool status);\r\n    event SetReferralToken(address indexed user, IERC20 referralToken);\r\n    event SendReferralReward(address indexed user, address indexed referrer, uint256 indexed pid, uint256 amount, uint256 lockAmount);\r\n    event AmountStakeLevelRefer(address indexed user, uint256 indexed stakeAmountLv1, uint256 indexed stakeAmountLv2);\r\n\r\nconstructor(\r\n        IERC20 _referralToken\r\n    ) public {\r\n        devaddr = msg.sender;\r\n        stakeAmountLv1 = 50*10**18;\r\n        stakeAmountLv2 = 500*10**18;\r\n        percentForReferLv1 = 7;\r\n        percentForReferLv2 = 3;\r\n        referralToken = _referralToken;\r\n        status = true;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    function add(\r\n        IERC20 _lpToken,\r\n        BiscuitToken _rewardToken,\r\n        uint256 _startBlock,\r\n        uint256 _allocPoint,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _percentLockReward,\r\n        uint256 _percentForDev,\r\n        uint256 _feeForDep,\r\n        uint256 _halvingAfterBlock,\r\n        uint256[] memory _rewardMultiplier,\r\n        uint256 _lockFromBlock,\r\n        uint256 _lockToBlock\r\n    ) public onlyOwner {\r\n        _setAllocPoints(_rewardToken, _allocPoint);\r\n        uint256 finishBonusAtBlock = _setHalvingAtBlocks(poolInfo.length, _rewardMultiplier, _halvingAfterBlock, _startBlock);\r\n\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            rewardToken: _rewardToken,\r\n            lastRewardBlock: block.number > _startBlock ? block.number : _startBlock,\r\n            allocPoint: _allocPoint,\r\n            accRewardPerShare: 0,\r\n            startBlock: _startBlock,\r\n            rewardPerBlock: _rewardPerBlock,\r\n            percentLockReward: _percentLockReward,\r\n            percentForDev: _percentForDev,\r\n            feeForDep: _feeForDep,\r\n            finishBonusAtBlock: finishBonusAtBlock,\r\n            totalLock: 0,\r\n            lockFromBlock: _lockFromBlock,\r\n            lockToBlock: _lockToBlock\r\n        }));\r\n    }\r\n\r\n    function _setAllocPoints(BiscuitToken _rewardToken, uint256 _allocPoint) internal onlyOwner {\r\n        totalAllocPoints[_rewardToken] = totalAllocPoints[_rewardToken].add(_allocPoint);\r\n    }\r\n\r\n    function _setHalvingAtBlocks(uint256 _pid, uint256[] memory _rewardMultiplier, uint256 _halvingAfterBlock, uint256 _startBlock) internal onlyOwner returns(uint256) {\r\n        rewardMultipliers[_pid] = _rewardMultiplier;\r\n        for (uint256 i = 0; i < _rewardMultiplier.length - 1; i++) {\r\n            uint256 halvingAtBlock = _halvingAfterBlock.mul(i + 1).add(_startBlock);\r\n            halvingAtBlocks[_pid].push(halvingAtBlock);\r\n        }\r\n        uint256 finishBonusAtBlock = _halvingAfterBlock.mul(_rewardMultiplier.length - 1).add(_startBlock);\r\n        halvingAtBlocks[_pid].push(uint256(-1));\r\n        return finishBonusAtBlock;\r\n    }\r\n\r\n    function setStatus(bool _status) public onlyOwner {\r\n        status = _status;\r\n        emit Status(msg.sender, status);\r\n    }\r\n\r\n    function setreferralToken(IERC20 _referralToken) public onlyOwner {\r\n        referralToken = _referralToken;\r\n        emit SetReferralToken(msg.sender, referralToken);\r\n    }\r\n\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        totalAllocPoints[pool.rewardToken] = totalAllocPoints[pool.rewardToken].sub(pool.allocPoint).add(_allocPoint);\r\n        pool.allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\t\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 forDev;\r\n        uint256 forFarmer;\r\n        (forDev, forFarmer) = getPoolReward(_pid);\r\n\r\n\r\n        if (forDev > 0) {\r\n            uint256 lockAmount = forDev.mul(pool.percentLockReward).div(100);\r\n            if (devaddr != address(0)) {\r\n                pool.rewardToken.mint(devaddr, forDev.sub(lockAmount));\r\n                farmLock(devaddr, lockAmount, _pid);\r\n            }\r\n        }\r\n        pool.accRewardPerShare = pool.accRewardPerShare.add(forFarmer.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n\t\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256[] memory _halvingAtBlock,\r\n        uint256[] memory _rewardMultiplier,\r\n        uint256 _startBlock\r\n    ) public pure returns (uint256) {\r\n        uint256 result = 0;\r\n        if (_from < _startBlock) return 0;\r\n\r\n        for (uint256 i = 0; i < _halvingAtBlock.length; i++) {\r\n            uint256 endBlock = _halvingAtBlock[i];\r\n\r\n            if (_to <= endBlock) {\r\n                uint256 m = _to.sub(_from).mul(_rewardMultiplier[i]);\r\n                return result.add(m);\r\n            }\r\n\r\n            if (_from < endBlock) {\r\n                uint256 m = endBlock.sub(_from).mul(_rewardMultiplier[i]);\r\n                _from = endBlock;\r\n                result = result.add(m);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getPoolReward(uint256 _pid) public view returns (uint256 forDev, uint256 forFarmer) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, halvingAtBlocks[_pid], rewardMultipliers[_pid], pool.startBlock);\r\n        uint256 amount = multiplier.mul(pool.rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoints[pool.rewardToken]);\r\n        uint256 rewardCanAlloc = pool.rewardToken.capfarm().sub(totalLocks[pool.rewardToken]);\r\n\r\n        if (rewardCanAlloc < amount) {\r\n            forDev = 0;\r\n            forFarmer = rewardCanAlloc;\r\n        } else {\r\n            forDev = amount.mul(pool.percentForDev).div(100);\r\n            forFarmer = amount.sub(forDev);\r\n        }\r\n    }\r\n\r\n    // View function to see pending reward on frontend.\r\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accRewardPerShare = pool.accRewardPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply > 0) {\r\n            uint256 forFarmer;\r\n            (, forFarmer) = getPoolReward(_pid);\r\n            accRewardPerShare = accRewardPerShare.add(forFarmer.mul(1e12).div(lpSupply));\r\n\r\n        }\r\n        return user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function claimReward(uint256 _pid) public {\r\n        require(status == true, \"BiscuitFarmer::withdraw: can not claim reward\");\r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n    }\r\n\t\r\n    function _harvest(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e12).sub(user.rewardDebt);\r\n            uint256 masterBal = pool.rewardToken.capfarm().sub(totalLocks[pool.rewardToken]);\r\n\r\n            if (pending > masterBal) {\r\n                pending = masterBal;\r\n            }\r\n\r\n            if(pending > 0) {\r\n                uint256 referAmountLv1 = pending.mul(percentForReferLv1).div(100);\r\n                uint256 referAmountLv2 = pending.mul(percentForReferLv2).div(100);\r\n                _transferReferral(_pid, referAmountLv1, referAmountLv2);\r\n\r\n                uint256 amount = pending.sub(referAmountLv1).sub(referAmountLv2);\r\n                uint256 lockAmount = amount.mul(pool.percentLockReward).div(100);\r\n                pool.rewardToken.mint(msg.sender, amount.sub(lockAmount));\r\n                farmLock(msg.sender, lockAmount, _pid);\r\n                user.rewardDebtAtBlock = block.number;\r\n\r\n                emit SendReward(msg.sender, _pid, amount, lockAmount);\r\n            }\r\n\r\n            user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\r\n        }\r\n    }\r\n\r\n    function _transferReferral(uint256 _pid, uint256 _referAmountLv1, uint256 _referAmountLv2) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        address referrerLv1 = referrers[address(msg.sender)];\r\n        uint256 referAmountForDev = 0;\r\n\r\n        if (referrerLv1 != address(0)) {\r\n            uint256 lpStaked = referralToken.balanceOf(referrerLv1);\r\n            if (lpStaked >= stakeAmountLv1) {\r\n                uint256 lockAmount = _referAmountLv1.mul(pool.percentLockReward).div(100);\r\n                pool.rewardToken.mint(referrerLv1,  _referAmountLv1.sub(lockAmount));\r\n                farmLock(referrerLv1, lockAmount, _pid);\r\n\r\n                referralAmountLv1[address(pool.rewardToken)][address(referrerLv1)] = referralAmountLv1[address(pool.rewardToken)][address(referrerLv1)].add(_referAmountLv1);\r\n                emit SendReferralReward(referrerLv1, msg.sender, _pid, _referAmountLv1, lockAmount);\r\n            } else {\r\n                // dev team will receive reward of referrer level 1\r\n                referAmountForDev = referAmountForDev.add(_referAmountLv1);\r\n            }\r\n\r\n            address referrerLv2 = referrers[referrerLv1];\r\n            uint256 lpStaked2 = referralToken.balanceOf(referrerLv2);\r\n            if (referrerLv2 != address(0) && lpStaked2 >= stakeAmountLv2) {\r\n                uint256 lockAmount = _referAmountLv2.mul(pool.percentLockReward).div(100);\r\n                pool.rewardToken.mint(referrerLv2, _referAmountLv2.sub(lockAmount));\r\n                farmLock(referrerLv2, lockAmount, _pid);\r\n\r\n                referralAmountLv2[address(pool.rewardToken)][address(referrerLv2)] = referralAmountLv2[address(pool.rewardToken)][address(referrerLv2)].add(_referAmountLv2);\r\n                emit SendReferralReward(referrerLv2, msg.sender, _pid, _referAmountLv2, lockAmount);\r\n            } else {\r\n                // dev team will receive reward of referrer level 2\r\n                referAmountForDev = referAmountForDev.add(_referAmountLv2);\r\n            }\r\n            \r\n        } else {\r\n            referAmountForDev = _referAmountLv1.add(_referAmountLv2);\r\n        }\r\n\r\n        if (referAmountForDev > 0) {\r\n            uint256 lockAmount = referAmountForDev.mul(pool.percentLockReward).div(100);\r\n            pool.rewardToken.mint(devaddr, referAmountForDev.sub(lockAmount));\r\n            farmLock(devaddr, lockAmount, _pid);\r\n        }\r\n    }\r\n\r\n    function setAmountLPStakeLevelRefer(uint256 _stakeAmountLv1, uint256 _stakeAmountLv2) public onlyOwner {\r\n        stakeAmountLv1 = _stakeAmountLv1;\r\n        stakeAmountLv2 = _stakeAmountLv2;\r\n        emit AmountStakeLevelRefer(msg.sender, stakeAmountLv1, stakeAmountLv2);\r\n    }\r\n\t\r\n    // Deposit LP tokens to BiscuitFarmer.\r\n    function deposit(uint256 _pid, uint256 _amount, address _referrer) public {\r\n        require(_amount > 0, \"BiscuitFarmer::deposit: amount must be greater than 0\");\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n        uint256 feeForDep = 0;\r\n        if (pool.feeForDep > 0) {\r\n            feeForDep = _amount.mul(pool.feeForDep).div(1000);\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(devaddr), feeForDep);\r\n        }\r\n        uint256 amount = _amount.sub(feeForDep);\r\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), amount);\r\n        if (user.amount == 0) {\r\n            user.rewardDebtAtBlock = block.number;\r\n        }\r\n        user.amount = user.amount.add(amount);\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\r\n\r\n        if (referrers[address(msg.sender)] == address(0) && _referrer != address(0) && _referrer != address(msg.sender)) {\r\n            referrers[address(msg.sender)] = address(_referrer);\r\n            myReferrers[_referrer].push(msg.sender);\r\n            emit Referral(_referrer, msg.sender);\r\n        }\r\n\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    function refsCount(address _account) view public returns (uint256) {\r\n        return myReferrers[_account].length;\r\n    }\r\n\r\n    // Withdraw LP tokens from BiscuitFarmer.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        require(status == true, \"BiscuitFarmer::withdraw: can not withdraw\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"BiscuitFarmer::withdraw: not good\");\r\n\r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from BiscuitFarmer.\r\n    function withdrawAll(uint256 _pid) public {\r\n        updatePool(_pid);\r\n        _harvest(_pid);\r\n\t\temergencyWithdraw(_pid);\r\n    }\r\n\t\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function dev(address _devaddr) public {\r\n        require(msg.sender == devaddr, \"dev: wut?\");\r\n        devaddr = _devaddr;\r\n    }\r\n\r\n    function getNewRewardPerBlock(uint256 _pid) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n\r\n        uint256 multiplier = getMultiplier(block.number -1, block.number, halvingAtBlocks[_pid], rewardMultipliers[_pid], pool.startBlock);\r\n\r\n        return multiplier\r\n                .mul(pool.rewardPerBlock)\r\n                .mul(pool.allocPoint)\r\n                .div(totalAllocPoints[pool.rewardToken]);\r\n    }\r\n\r\n    function totalLockInPool(uint256 _pid) public view returns (uint256) {\r\n        return poolInfo[_pid].totalLock;\r\n    }\r\n\r\n    function totalLock(BiscuitToken _rewardToken) public view returns (uint256) {\r\n        return totalLocks[_rewardToken];\r\n    }\r\n\r\n    function lockOf(address _holder, uint256 _pid) public view returns (uint256) {\r\n        return userInfo[_pid][_holder].lockAmount;\r\n    }\r\n\r\n    function lastUnlockBlock(address _holder, uint256 _pid) public view returns (uint256) {\r\n        return userInfo[_pid][_holder].lastUnlockBlock;\r\n    }\r\n\r\n    function farmLock(address _holder, uint256 _amount, uint256 _pid) internal {\r\n        require(_holder != address(0), \"ERC20: lock to the zero address\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_holder];\r\n\r\n        require(_amount <= pool.rewardToken.capfarm().sub(totalLocks[pool.rewardToken]), \"ERC20: lock amount over allowed\");\r\n        user.lockAmount = user.lockAmount.add(_amount);\r\n        pool.totalLock = pool.totalLock.add(_amount);\r\n        totalLocks[pool.rewardToken] = totalLocks[pool.rewardToken].add(_amount);\r\n\r\n        if (user.lastUnlockBlock < pool.lockFromBlock) {\r\n            user.lastUnlockBlock = pool.lockFromBlock;\r\n        }\r\n        emit Lock(_holder, _amount);\r\n    }\r\n\r\n    function canUnlockAmount(address _holder, uint256 _pid) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_holder];\r\n\r\n        if (block.number < pool.lockFromBlock) {\r\n            return 0;\r\n        }\r\n        else if (block.number >= pool.lockToBlock) {\r\n            return user.lockAmount;\r\n        }\r\n        else {\r\n            uint256 releaseBlock = block.number.sub(user.lastUnlockBlock);\r\n            uint256 numberLockBlock = pool.lockToBlock.sub(user.lastUnlockBlock);\r\n            return user.lockAmount.mul(releaseBlock).div(numberLockBlock);\r\n        }\r\n    }\r\n\t\r\n    function unlock(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.lockAmount > 0, \"ERC20: cannot unlock\");\r\n\r\n        uint256 amount = canUnlockAmount(msg.sender, _pid);\r\n        uint256 masterBL = pool.rewardToken.capfarm();\r\n\t\t\r\n        if (amount > masterBL) {\r\n            amount = masterBL;\r\n        }\r\n\t\t\r\n        pool.rewardToken.mint(msg.sender, amount);\r\n        user.lockAmount = user.lockAmount.sub(amount);\r\n        user.lastUnlockBlock = block.number;\r\n        pool.totalLock = pool.totalLock.sub(amount);\r\n        totalLocks[pool.rewardToken] = totalLocks[pool.rewardToken].sub(amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_referralToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeAmountLv1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeAmountLv2\",\"type\":\"uint256\"}],\"name\":\"AmountStakeLevelRefer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"SendReferralReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"SendReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"referralToken\",\"type\":\"address\"}],\"name\":\"SetReferralToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Status\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract BiscuitToken\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentLockReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentForDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeForDep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_halvingAfterBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_lockFromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockToBlock\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"canUnlockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_halvingAtBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getNewRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"forDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forFarmer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"halvingAtBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"lastUnlockBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myReferrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForReferLv1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentForReferLv2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"contract BiscuitToken\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentLockReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentForDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeForDep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishBonusAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockFromBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockToBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAmountLv1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAmountLv2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"refsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeAmountLv1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmountLv2\",\"type\":\"uint256\"}],\"name\":\"setAmountLPStakeLevelRefer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_referralToken\",\"type\":\"address\"}],\"name\":\"setreferralToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmountLv1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmountLv2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BiscuitToken\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"totalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"totalLockInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BiscuitMasterChef", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c294a07df611cfc515dcdc7d377648a7a0d85c8f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef47c2071d865ca0f89480e651aaa16d8b5ff8e8b9592337d4da5fc1c20edcd6"}