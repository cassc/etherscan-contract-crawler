{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\ncontract token_YES {\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    string public name = \"YESPAG\";\r\n    string public symbol = \"YES\";\r\n\r\n    uint256 public numberOfCoins = 100000000;\r\n    uint256 public decimalPlaces = 8;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    uint256 public totalSupply = numberOfCoins * 10**decimalPlaces;\r\n    uint256 public decimals = decimalPlaces;\r\n\r\n    uint256 public deadCoin = 0;\r\n    uint256 public miningCoin = 0;\r\n    uint256 public gamePool = 98500000 * 10**decimalPlaces;\r\n\r\n    address public contractOwner;\r\n\r\n    constructor() {\r\n        contractOwner = msg.sender;\r\n        balances[msg.sender] = (totalSupply - gamePool);\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return balances[owner];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(balanceOf(msg.sender) >= value, \"Insufficient funds\");\r\n\r\n        uint256 feeForGamePool = (value * 2) / 100;\r\n        uint256 feeForDeadCoin = (value * 2) / 100;\r\n        uint256 feeForOwner = (value * 1) / 100;\r\n\r\n        uint256 amountToTransfer = value -\r\n            (feeForGamePool + feeForDeadCoin + feeForOwner);\r\n\r\n        balances[to] += amountToTransfer;\r\n        balances[msg.sender] -= value;\r\n\r\n        gamePool += feeForGamePool;\r\n        deadCoin += feeForDeadCoin;\r\n        totalSupply -= feeForDeadCoin;\r\n        balances[contractOwner] += feeForOwner;\r\n\r\n        emit Transfer(msg.sender, to, amountToTransfer);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public returns (bool) {\r\n        require(balanceOf(from) >= value, \"Insufficient funds\");\r\n        require(allowance[from][msg.sender] >= value, \"Allowance too low\");\r\n\r\n        uint256 feeForGamePool = (value * 2) / 100;\r\n        uint256 feeForDeadCoin = (value * 2) / 100;\r\n        uint256 feeForOwner = (value * 1) / 100;\r\n\r\n        uint256 amountToTransfer = value -\r\n            (feeForGamePool + feeForDeadCoin + feeForOwner);\r\n\r\n        balances[to] += amountToTransfer;\r\n        balances[from] -= value;\r\n\r\n        allowance[from][msg.sender] -= value;\r\n\r\n        gamePool += feeForGamePool;\r\n        deadCoin += feeForDeadCoin;\r\n        totalSupply -= feeForDeadCoin;\r\n        balances[contractOwner] += feeForOwner;\r\n\r\n        emit Transfer(from, to, amountToTransfer);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract shop is token_YES {\r\n    event NewEmblem(\r\n        uint256 emblemId,\r\n        string name,\r\n        uint256 uniqueId,\r\n        string message\r\n    );\r\n\r\n    uint256 uniqueIdDigits = 12;\r\n    uint256 uniqueIdModulus = 10**uniqueIdDigits;\r\n\r\n    struct Emblem {\r\n        string name;\r\n        uint256 uniqueId;\r\n        uint32 level;\r\n        uint32 fuelTime;\r\n        uint32 repairTime;\r\n        uint32 harvestTime;\r\n        uint256 codeUpline;\r\n    }\r\n\r\n    Emblem[] public emblems;\r\n\r\n    mapping(uint256 => address) public emblemToOwner;\r\n    mapping(address => uint256) ownerEmblemCount;\r\n\r\n    mapping(address => uint256) public maximumRelationshipBonus;\r\n    mapping(uint256 => address) ownerCodeUpline;\r\n\r\n    function getCount() public view returns (uint256 count) {\r\n        if (emblems.length == 0) {\r\n            return 0;\r\n        }\r\n        return emblems.length - 1;\r\n    }\r\n\r\n    function _createEmblem(\r\n        uint256 _value,\r\n        uint256 _randUniqueId,\r\n        string memory _name,\r\n        uint32 _fuelTime,\r\n        uint32 _repairTime,\r\n        uint32 _harvestTime,\r\n        uint256 _code\r\n    ) internal {\r\n        emblems.push(\r\n            Emblem(\r\n                _name,\r\n                _randUniqueId,\r\n                1,\r\n                uint32(block.timestamp + _fuelTime),\r\n                uint32(block.timestamp + _repairTime),\r\n                uint32(block.timestamp + _harvestTime),\r\n                _code\r\n            )\r\n        );\r\n        uint256 id = getCount();\r\n        emblemToOwner[id] = msg.sender;\r\n        ownerEmblemCount[msg.sender]++;\r\n        maximumRelationshipBonus[msg.sender] +=\r\n            (_value * 2) *\r\n            10**decimalPlaces;\r\n        ownerCodeUpline[_randUniqueId] = msg.sender;\r\n        emit NewEmblem(\r\n            id,\r\n            _name,\r\n            _randUniqueId,\r\n            string(abi.encodePacked(\"New \", _name, \" type emblem purchased\"))\r\n        );\r\n    }\r\n\r\n    function _generateRandomUniqueId(string memory _str)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 rand = uint256(keccak256(abi.encodePacked(_str)));\r\n        return rand % uniqueIdModulus;\r\n    }\r\n\r\n    function append(\r\n        string memory a,\r\n        uint256 b,\r\n        uint256 c,\r\n        address d\r\n    ) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b, c, d));\r\n    }\r\n\r\n    function buyEmblem(uint256 _value, uint256 _code) public {\r\n        string memory name = \"\";\r\n        uint32 fuelTime = 0;\r\n        uint32 repairTime = 0;\r\n        uint32 harvestTime = 0;\r\n        bool next = false;\r\n        if (_value == 100) {\r\n            name = \"Common\";\r\n            fuelTime = 9 days;\r\n            repairTime = 150 days;\r\n            harvestTime = 10 days;\r\n            next = true;\r\n        } else if (_value == 250) {\r\n            name = \"Rare\";\r\n            fuelTime = 7 days;\r\n            repairTime = 144 days;\r\n            harvestTime = 8 days;\r\n            next = true;\r\n        } else if (_value == 600) {\r\n            name = \"Epic\";\r\n            fuelTime = 6 days;\r\n            repairTime = 114 days;\r\n            harvestTime = 7 days;\r\n            next = true;\r\n        }\r\n        require(next == true, \"Invalid value\");\r\n        require(\r\n            balances[msg.sender] >= _value * 10**decimalPlaces,\r\n            \"Insufficient funds\"\r\n        );\r\n        balances[msg.sender] -= _value * 10**decimalPlaces;\r\n        gamePool += _value * 10**decimalPlaces;\r\n        uint256 randUniqueId = _generateRandomUniqueId(\r\n            append(name, block.timestamp, _code, msg.sender)\r\n        );\r\n        randUniqueId = randUniqueId - (randUniqueId % 100);\r\n        _createEmblem(\r\n            _value,\r\n            randUniqueId,\r\n            name,\r\n            fuelTime,\r\n            repairTime,\r\n            harvestTime,\r\n            _code\r\n        );\r\n    }\r\n}\r\n\r\ncontract road is shop {\r\n    function getEmblemsByOwner(address _owner)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory result = new uint256[](ownerEmblemCount[_owner]);\r\n        uint256 counter = 0;\r\n        for (uint256 i = 0; i < emblems.length; i++) {\r\n            if (emblemToOwner[i] == _owner) {\r\n                result[counter] = i;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    event HavestEvent(\r\n        uint256 emblemId,\r\n        string name,\r\n        uint256 uniqueId,\r\n        string message\r\n    );\r\n\r\n    function harvest(uint256 _emblemId) public {\r\n        require(\r\n            msg.sender == emblemToOwner[_emblemId],\r\n            \"This emblem doesn't belong to you\"\r\n        );\r\n        require(\r\n            emblems[_emblemId].repairTime > block.timestamp,\r\n            \"The emblem needs repairs\"\r\n        );\r\n        require(\r\n            emblems[_emblemId].fuelTime > block.timestamp,\r\n            \"The emblem needs fuel\"\r\n        );\r\n        require(\r\n            emblems[_emblemId].harvestTime < block.timestamp,\r\n            \"Don't have a reward to collect yet\"\r\n        );\r\n        uint256 withdraw = 0;\r\n        uint256 newHarvestTime = 0;\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Common\"))\r\n        ) {\r\n            withdraw = (75 * emblems[_emblemId].level) * 10**decimalPlaces;\r\n            newHarvestTime = 10 days;\r\n        }\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Rare\"))\r\n        ) {\r\n            withdraw = (105 * emblems[_emblemId].level) * 10**decimalPlaces;\r\n            newHarvestTime = 8 days;\r\n        }\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Epic\"))\r\n        ) {\r\n            withdraw = (155 * emblems[_emblemId].level) * 10**decimalPlaces;\r\n            newHarvestTime = 6 days;\r\n        }\r\n        if (gamePool >= withdraw) {\r\n            gamePool -= withdraw;\r\n        } else {\r\n            miningCoin += withdraw;\r\n            totalSupply += withdraw;\r\n        }\r\n        balances[msg.sender] += withdraw;\r\n        emblems[_emblemId].harvestTime = uint32(\r\n            block.timestamp + newHarvestTime\r\n        );\r\n        emit HavestEvent(\r\n            _emblemId,\r\n            emblems[_emblemId].name,\r\n            emblems[_emblemId].uniqueId,\r\n            \"Reward collected\"\r\n        );\r\n    }\r\n\r\n    event EmblemUpgradeEvent(\r\n        uint256 emblemId,\r\n        string name,\r\n        uint256 uniqueId,\r\n        string message\r\n    );\r\n\r\n    function emblemUpgrade(uint256 _emblemId) public {\r\n        require(\r\n            msg.sender == emblemToOwner[_emblemId],\r\n            \"This emblem doesn't belong to you\"\r\n        );\r\n        require(\r\n            emblems[_emblemId].repairTime > block.timestamp,\r\n            \"The emblem needs repairs\"\r\n        );\r\n        require(emblems[_emblemId].level < 10, \"Maximum level already reached\");\r\n        uint256 value = 0;\r\n        uint32 fuelTime;\r\n        uint32 harvestTime;\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Common\"))\r\n        ) {\r\n            value = 95 * 10**decimalPlaces;\r\n            fuelTime = 9 days;\r\n            harvestTime = 10 days;\r\n        }\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Rare\"))\r\n        ) {\r\n            value = 238 * 10**decimalPlaces;\r\n            fuelTime = 7 days;\r\n            harvestTime = 8 days;\r\n        }\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Epic\"))\r\n        ) {\r\n            value = 570 * 10**decimalPlaces;\r\n            fuelTime = 5 days;\r\n            harvestTime = 6 days;\r\n        }\r\n        require(balances[msg.sender] >= value, \"Insufficient funds\");\r\n        balances[msg.sender] -= value;\r\n        gamePool += value;\r\n        emblems[_emblemId].fuelTime = uint32(block.timestamp + fuelTime);\r\n        emblems[_emblemId].harvestTime = uint32(block.timestamp + harvestTime);\r\n        emblems[_emblemId].level += 1;\r\n        emit EmblemUpgradeEvent(\r\n            _emblemId,\r\n            emblems[_emblemId].name,\r\n            emblems[_emblemId].uniqueId,\r\n            \"Your emblem has been updated\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract garage is road {\r\n    event ReFuelEvent(\r\n        uint256 emblemId,\r\n        string name,\r\n        uint256 uniqueId,\r\n        string message\r\n    );\r\n\r\n    function reFuel(uint256 _emblemId) public {\r\n        require(\r\n            msg.sender == emblemToOwner[_emblemId],\r\n            \"This emblem doesn't belong to you\"\r\n        );\r\n        require(\r\n            emblems[_emblemId].repairTime > block.timestamp,\r\n            \"The emblem needs repairs\"\r\n        );\r\n        require(\r\n            emblems[_emblemId].fuelTime < block.timestamp,\r\n            \"The emblem is not needing fuel\"\r\n        );\r\n        uint256 taxFuel = (50 * emblems[_emblemId].level) * 10**decimalPlaces;\r\n        require(balances[msg.sender] >= taxFuel, \"Insufficient funds\");\r\n        address upline = ownerCodeUpline[emblems[_emblemId].codeUpline];\r\n        uint256 newFuelTime = 0;\r\n        balances[msg.sender] -= taxFuel;\r\n        balances[contractOwner] += (taxFuel * 5) / 100;\r\n        totalSupply -= (taxFuel * 5) / 100;\r\n        deadCoin += (taxFuel * 5) / 100;\r\n        if (maximumRelationshipBonus[upline] >= (taxFuel * 5) / 100) {\r\n            balances[upline] += (taxFuel * 5) / 100;\r\n            maximumRelationshipBonus[upline] -= (taxFuel * 5) / 100;\r\n        } else {\r\n            gamePool += (taxFuel * 5) / 100;\r\n        }\r\n        gamePool += (taxFuel * 85) / 100;\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Common\"))\r\n        ) {\r\n            newFuelTime = 9 days;\r\n        }\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Rare\"))\r\n        ) {\r\n            newFuelTime = 7 days;\r\n        }\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Epic\"))\r\n        ) {\r\n            newFuelTime = 5 days;\r\n        }\r\n        emblems[_emblemId].fuelTime = uint32(block.timestamp + newFuelTime);\r\n        emit ReFuelEvent(\r\n            _emblemId,\r\n            emblems[_emblemId].name,\r\n            emblems[_emblemId].uniqueId,\r\n            \"Fueled emblem\"\r\n        );\r\n    }\r\n\r\n    event RepairEvent(\r\n        uint256 emblemId,\r\n        string name,\r\n        uint256 uniqueId,\r\n        string message\r\n    );\r\n\r\n    function repair(uint256 _emblemId) public {\r\n        require(\r\n            msg.sender == emblemToOwner[_emblemId],\r\n            \"This emblem doesn't belong to you\"\r\n        );\r\n        require(\r\n            emblems[_emblemId].repairTime < block.timestamp,\r\n            \"Your emblem doesn't need repairs\"\r\n        );\r\n        uint256 newRepairTime = 0;\r\n        uint256 value = 0;\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Common\"))\r\n        ) {\r\n            newRepairTime = 150 days;\r\n            value = (75 * emblems[_emblemId].level) * 10**decimalPlaces;\r\n        }\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Rare\"))\r\n        ) {\r\n            newRepairTime = 144 days;\r\n            value = (188 * emblems[_emblemId].level) * 10**decimalPlaces;\r\n        }\r\n        if (\r\n            keccak256(abi.encodePacked(emblems[_emblemId].name)) ==\r\n            keccak256(abi.encodePacked(\"Epic\"))\r\n        ) {\r\n            newRepairTime = 114 days;\r\n            value = (450 * emblems[_emblemId].level) * 10**decimalPlaces;\r\n        }\r\n        require(balances[msg.sender] >= value, \"Insufficient funds\");\r\n        balances[msg.sender] -= value;\r\n        gamePool += value;\r\n        emblems[_emblemId].repairTime = uint32(block.timestamp + newRepairTime);\r\n        emit RepairEvent(\r\n            _emblemId,\r\n            emblems[_emblemId].name,\r\n            emblems[_emblemId].uniqueId,\r\n            \"Your emblem has been repaired\"\r\n        );\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emblemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"EmblemUpgradeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emblemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"HavestEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emblemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"NewEmblem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emblemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ReFuelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emblemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"RepairEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"buyEmblem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalPlaces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emblemToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emblemId\",\"type\":\"uint256\"}],\"name\":\"emblemUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emblems\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"level\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fuelTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"repairTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"harvestTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"codeUpline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getEmblemsByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emblemId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maximumRelationshipBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emblemId\",\"type\":\"uint256\"}],\"name\":\"reFuel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emblemId\",\"type\":\"uint256\"}],\"name\":\"repair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "garage", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e2bbb25385ad91c76a50ef63e34c7d02387f05a1477552b86ffa5031bdbd1d0e"}