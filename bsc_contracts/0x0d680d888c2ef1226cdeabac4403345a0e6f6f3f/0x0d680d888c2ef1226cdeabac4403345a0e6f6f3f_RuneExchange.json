{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.22;\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract RuneExchange {\r\n    IBEP20 public runeToken;\r\n    address public owner;\r\n    uint256 public rate=133; // Initial Exchange rate: X RUNE for 1 BNB\r\n    uint256 runeDecimals;\r\n    uint256 bnbDecimals = 18;\r\n    address private constant _runeTokenAddress = 0x9e5631C61D6538BABbE6e129e58144eb1C7C5906; // Hardcoded RUNE token address\r\n\r\n    constructor() {\r\n        runeToken = IBEP20(_runeTokenAddress);\r\n        owner = msg.sender;\r\n        runeDecimals = runeToken.decimals();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function setExchangeRate(uint256 newRate) external onlyOwner {\r\n        require(newRate > 0, \"Rate must be greater than 0\");\r\n        rate = newRate;\r\n    }\r\n\r\n    function getExchangeRate() public view returns (uint256) {\r\n        return rate;\r\n    }\r\n\r\n    function estimateBnbAmount(uint256 runeAmount) public view returns (uint256) {\r\n        return (runeAmount * 10**(bnbDecimals - runeDecimals))/rate;\r\n    }\r\n\r\n    function exchangeRuneForBnb(uint256 runeAmount) external {\r\n        uint256 bnbAmount = estimateBnbAmount(runeAmount);\r\n        require(runeToken.balanceOf(msg.sender)>= runeAmount, \"Not enough Tokens for exchange\");\r\n        require(address(this).balance >= bnbAmount, \"Insufficient BNB balance in contract\");\r\n        require(runeToken.transferFrom(msg.sender, address(this), runeAmount), \"Failed to transfer RUNE\");\r\n\r\n        (bool success, ) = payable(msg.sender).call{value:100000}(\"\");\r\n        require(success, \"Transfer failed.\");    \r\n    }\r\n\r\n    function withdrawRune(uint256 amount) external onlyOwner {\r\n        require(runeToken.transfer(owner, amount), \"Failed to withdraw RUNE\");\r\n    }\r\n\r\n    function withdrawBnb(uint256 amount) external onlyOwner {\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function withdrawAnyBEP20Token(address tokenAddress, uint256 amount) external onlyOwner {\r\n        IBEP20 token = IBEP20(tokenAddress);\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n        require(amount <= contractBalance, \"Insufficient token balance in contract\");\r\n        require(token.transfer(owner, amount), \"Failed to transfer tokens\");\r\n    }\r\n\r\n    function getRuneBalance() public view returns (uint256) {\r\n        return runeToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getBnbBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getTokenBalance(address tokenAddress) public view returns (uint256) {\r\n        IBEP20 token = IBEP20(tokenAddress);\r\n        return token.balanceOf(address(this));\r\n    }\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runeAmount\",\"type\":\"uint256\"}],\"name\":\"estimateBnbAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runeAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeRuneForBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRuneBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runeToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAnyBEP20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRune\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RuneExchange", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://28415c0bb646fbbe9b91b247c105b605086b677d2e31a6ac3f26a3269065619d"}