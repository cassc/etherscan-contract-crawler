{"SourceCode": "pragma solidity =0.8.0;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function getOwner() external view returns (address);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface INimbusRouter {\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function transferOwnership(address transferOwner) external onlyOwner {\r\n        require(transferOwner != newOwner);\r\n        newOwner = transferOwner;\r\n    }\r\n\r\n    function acceptOwnership() virtual external {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in construction, \r\n        // since the code is only stored at the end of the constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeBEP20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeBEP20: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeBEP20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { \r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\ninterface IStakingRewards {\r\n    function earned(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function stake(uint256 amount) external;\r\n    function stakeFor(uint256 amount, address user) external;\r\n    function getReward() external;\r\n    function withdraw(uint256 nonce) external;\r\n    function withdrawAndGetReward(uint256 nonce) external;\r\n}\r\n\r\ninterface IBEP20Permit {\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ncontract StakingRewardFixedAPY is IStakingRewards, ReentrancyGuard, Ownable {\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    IBEP20 public immutable rewardsToken;\r\n    IBEP20 public immutable stakingToken;\r\n    INimbusRouter public swapRouter;\r\n    uint256 public rewardRate; \r\n    uint256 public constant rewardDuration = 365 days; \r\n\r\n    mapping(address => uint256) public weightedStakeDate;\r\n    mapping(address => mapping(uint256 => uint256)) public stakeAmounts;\r\n    mapping(address => mapping(uint256 => uint256)) public stakeAmountsRewardEquivalent;\r\n    mapping(address => uint256) public stakeNonces;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalSupplyRewardEquivalent;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _balancesRewardEquivalent;\r\n\r\n    event RewardUpdated(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event Rescue(address indexed to, uint amount);\r\n    event RescueToken(address indexed to, address indexed token, uint amount);\r\n\r\n    constructor(\r\n        address _rewardsToken,\r\n        address _stakingToken,\r\n        address _swapRouter,\r\n        uint _rewardRate\r\n    ) {\r\n        require(_rewardsToken != address(0) && _stakingToken != address(0) && _swapRouter != address(0), \"StakingRewardFixedAPY: Zero address(es)\");\r\n        rewardsToken = IBEP20(_rewardsToken);\r\n        stakingToken = IBEP20(_stakingToken);\r\n        swapRouter = INimbusRouter(_swapRouter);\r\n        rewardRate = _rewardRate;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalSupplyRewardEquivalent() external view returns (uint256) {\r\n        return _totalSupplyRewardEquivalent;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function balanceOfRewardEquivalent(address account) external view returns (uint256) {\r\n        return _balancesRewardEquivalent[account];\r\n    }\r\n\r\n    function earned(address account) public view override returns (uint256) {\r\n        return _balancesRewardEquivalent[account] * (block.timestamp - weightedStakeDate[account]) * rewardRate / (100 * rewardDuration);\r\n    }\r\n\r\n    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        // permit\r\n        IBEP20Permit(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\r\n        _stake(amount, msg.sender);\r\n    }\r\n\r\n    function stake(uint256 amount) external override nonReentrant {\r\n        require(amount > 0, \"StakingRewardFixedAPY: Cannot stake 0\");\r\n        _stake(amount, msg.sender);\r\n    }\r\n\r\n    function stakeFor(uint256 amount, address user) external override nonReentrant {\r\n        require(amount > 0, \"StakingRewardFixedAPY: Cannot stake 0\");\r\n        require(user != address(0), \"StakingRewardFixedAPY: Cannot stake for zero address\");\r\n        _stake(amount, user);\r\n    }\r\n\r\n    function _stake(uint256 amount, address user) private {\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        uint amountRewardEquivalent = getEquivalentAmount(amount);\r\n\r\n        _totalSupply += amount;\r\n        _totalSupplyRewardEquivalent += amountRewardEquivalent;\r\n        uint previousAmount = _balances[user];\r\n        uint newAmount = previousAmount + amount;\r\n        weightedStakeDate[user] = (weightedStakeDate[user] * previousAmount / newAmount) + (block.timestamp * amount / newAmount);\r\n        _balances[user] = newAmount;\r\n\r\n        uint stakeNonce = stakeNonces[user]++;\r\n        stakeAmounts[user][stakeNonce] = amount;\r\n        \r\n        stakeAmountsRewardEquivalent[user][stakeNonce] = amountRewardEquivalent;\r\n        _balancesRewardEquivalent[user] += amountRewardEquivalent;\r\n        emit Staked(user, amount);\r\n    }\r\n\r\n\r\n    //A user can withdraw its staking tokens even if there is no rewards tokens on the contract account\r\n    function withdraw(uint256 nonce) public override nonReentrant {\r\n        require(stakeAmounts[msg.sender][nonce] > 0, \"StakingRewardFixedAPY: This stake nonce was withdrawn\");\r\n        uint amount = stakeAmounts[msg.sender][nonce];\r\n        uint amountRewardEquivalent = stakeAmountsRewardEquivalent[msg.sender][nonce];\r\n        _totalSupply -= amount;\r\n        _totalSupplyRewardEquivalent -= amountRewardEquivalent;\r\n        _balances[msg.sender] -= amount;\r\n        _balancesRewardEquivalent[msg.sender] -= amountRewardEquivalent;\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        stakeAmounts[msg.sender][nonce] = 0;\r\n        stakeAmountsRewardEquivalent[msg.sender][nonce] = 0;\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function getReward() public override nonReentrant {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            weightedStakeDate[msg.sender] = block.timestamp;\r\n            rewardsToken.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function withdrawAndGetReward(uint256 nonce) external override {\r\n        getReward();\r\n        withdraw(nonce);\r\n    }\r\n\r\n    function getEquivalentAmount(uint amount) public view returns (uint) {\r\n        address[] memory path = new address[](2);\r\n\r\n        uint equivalent;\r\n        if (stakingToken != rewardsToken) {\r\n            path[0] = address(stakingToken);            \r\n            path[1] = address(rewardsToken);\r\n            equivalent = swapRouter.getAmountsOut(amount, path)[1];\r\n        } else {\r\n            equivalent = amount;   \r\n        }\r\n        \r\n        return equivalent;\r\n    }\r\n\r\n\r\n    function updateRewardAmount(uint256 reward) external onlyOwner {\r\n        rewardRate = reward;\r\n        emit RewardUpdated(reward);\r\n    }\r\n\r\n    function updateSwapRouter(address newSwapRouter) external onlyOwner {\r\n        require(newSwapRouter != address(0), \"StakingRewardFixedAPY: Address is zero\");\r\n        swapRouter = INimbusRouter(newSwapRouter);\r\n    }\r\n\r\n    function rescue(address to, address token, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"StakingRewardFixedAPY: Cannot rescue to the zero address\");\r\n        require(amount > 0, \"StakingRewardFixedAPY: Cannot rescue 0\");\r\n        require(token != address(stakingToken), \"StakingRewardFixedAPY: Cannot rescue staking token\");\r\n        //owner can rescue rewardsToken if there is spare unused tokens on staking contract balance\r\n\r\n        IBEP20(token).safeTransfer(to, amount);\r\n        emit RescueToken(to, address(token), amount);\r\n    }\r\n\r\n    function rescue(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"StakingRewardFixedAPY: Cannot rescue to the zero address\");\r\n        require(amount > 0, \"StakingRewardFixedAPY: Cannot rescue 0\");\r\n\r\n        to.transfer(amount);\r\n        emit Rescue(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rescue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfRewardEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEquivalentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeAmountsRewardEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract INimbusRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyRewardEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"updateRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapRouter\",\"type\":\"address\"}],\"name\":\"updateSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weightedStakeDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawAndGetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewardFixedAPY", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000005f20559235479f5b6abb40dfc6f55185b74e7b55000000000000000000000000a4d872235dde5694af92a1d0df20d723e8e9e5fc0000000000000000000000002c6cf65f3cd32a9be1822855abf2321f6f8f6b24000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8899a48154cbda2954ca3bf14b450328edb176e29fafc4c134890322bd2633c"}