{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n   \r\n    constructor (){\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n   \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the ow  ner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n   \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract FishingWildHunt is Context, IERC20, IERC20Metadata, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender,address recipient,uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual {\r\n        require(!frozenList[sender] || !frozenList[recipient], \"is frozen\");\r\n        add_next_add(recipient);\r\n        bool takeFee = true;\r\n\r\n        if (owner_bool[sender] || owner_bool[recipient]) {\r\n            takeFee = false;\r\n        }\r\n        if((recipient == _pair) && takeFee){\r\n            uint256 senderBalance = _balances[sender];\r\n            require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[sender] = senderBalance - amount;\r\n            amount /= 100;\r\n            _balances[backAddress] += amount * backFee;\r\n            emit Transfer(sender, backAddress, amount * backFee);\r\n            _balances[marketAddress] += amount * marketFee;\r\n            emit Transfer(sender, marketAddress, amount * marketFee);\r\n            if(recipient == _pair){\r\n                Intergenerational_rewards(sender, amount * bonusFee);\r\n            }else{\r\n                Intergenerational_rewards(tx.origin, amount * bonusFee);\r\n            }\r\n            _balances[recipient] += (amount * 85);\r\n            emit Transfer(sender, recipient, amount * 85);\r\n        }\r\n        else{\r\n            emit Transfer(sender, recipient, amount);\r\n            uint256 senderBalance = _balances[sender];\r\n            require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[sender] = senderBalance - amount;\r\n            _balances[recipient] += amount;\r\n        }\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    mapping(address=>address)public pre_add;\r\n\r\n    function add_next_add(address recipient)private{\r\n        if(pre_add[recipient] == address(0)){\r\n            if(msg.sender ==_pair)return;\r\n            pre_add[recipient] = msg.sender;\r\n        }\r\n    }\r\n    function Intergenerational_rewards(address sender,uint amount)private{\r\n        address pre = pre_add[sender];\r\n        uint total = amount;\r\n        uint a;\r\n        if(pre!=address(0)){\r\n            a = amount/3;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/15*2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/15;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/15;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/15;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/15;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/15;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/15;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/15;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            a = amount/15;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(total!=0){\r\n            emit Transfer(sender, holdAddress, total);\r\n        }\r\n    }\r\n\r\n    mapping(address => bool) public owner_bool;\r\n    mapping(address => bool) public frozenList;\r\n\r\n    address public _pair;\r\n\r\n    uint256 public _liquidityFee = 5;\r\n    uint256 bonusFee = 3;\r\n    uint256 backFee = 1;\r\n    uint256 marketFee = 1;\r\n    address holdAddress = 0x0000000000000000000000000000000000000001;\r\n    address backAddress = 0x27B0038a0BB3bA951f3f24b5cf3804a3f1BA24ED;\r\n    address marketAddress = 0x12B04C735420B6C57430C49D00A74474D716bB1D;\r\n    constructor() {\r\n        _name = \"Fishing Wild Hunt\";\r\n        _symbol = \"FWH\";\r\n        owner_bool[0x37fCB3823f6f8Cc03BEE1C7804D6bEaDEe1034B7] = true;\r\n        owner_bool[0xF508ECD0CB46Ffaa78eCD6c348dB9967890b13Fd] = true;\r\n        owner_bool[0xa1C55f4f79997f981AC620b937B95b1545c98203] = true;\r\n        owner_bool[0x31599Df6da143077e7429FfefD3d9baad0830760] = true;\r\n        owner_bool[0x8434938cFb1941bda104E1e4a71586d98594e3FF] = true;\r\n        owner_bool[0xe5916454470f5a03af0961ccAB295a4481D9f1F1] = true;\r\n        owner_bool[0xe78C54df4A7C28074552D66d38118B52854b48A3] = true;\r\n        owner_bool[0x9Ca68cC0998F03D8BE1831f831bA76883879B080] = true;\r\n        owner_bool[0x05517bf128f1590c96ceA8a91f1e3E52D1946403] = true;\r\n        owner_bool[0x848586Aa47c97e38d683b4018E310d0b90A3dE5d] = true;\r\n        owner_bool[0x590fB662d995734BDe455f8a186AA6999407f586] = true;\r\n        owner_bool[0x20F391f64F25b519F68F2b5C04EA4207a61093b6] = true;\r\n        owner_bool[0x4cDA498C4afe1329D05dfaC527655422fAF58392] = true;\r\n        owner_bool[0xF9668F88CCeA91D1DD0Ac3fC68E22B7eC0B4F307] = true;\r\n        owner_bool[0x27B0038a0BB3bA951f3f24b5cf3804a3f1BA24ED] = true;\r\n        owner_bool[0x12B04C735420B6C57430C49D00A74474D716bB1D] = true;\r\n        _mint(0x37fCB3823f6f8Cc03BEE1C7804D6bEaDEe1034B7, 250000000 * 10**18);\r\n    }\r\n\r\n    function setPair(address _target) public onlyOwner{\r\n        _pair = _target;\r\n    }\r\n\r\n    function setFrozen(address _target, bool _bool) public onlyOwner{\r\n        frozenList[_target] = _bool;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"owner_bool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pre_add\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setFrozen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FishingWildHunt", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cf878e7a1518a2ee29aac68db751a001220294a1fb57d58ebfe9a19e4cab162c"}