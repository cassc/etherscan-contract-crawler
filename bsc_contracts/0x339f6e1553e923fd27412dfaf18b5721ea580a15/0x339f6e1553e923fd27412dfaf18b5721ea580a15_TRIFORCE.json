{"SourceCode": "// SPDX-License-Identifier: MIT\t\r\n\t\t\r\npragma solidity ^0.6.6;\t\r\n\t\t\r\n/*\t\r\n * @dev Provides information about the current execution context, including the\t\r\n * sender of the transaction and its data. While these are generally available\t\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\t\r\n * manner, since when dealing with GSN meta-transactions the account sending and\t\r\n * paying for execution may not be the actual sender (as far as an application\t\r\n * is concerned).\t\r\n *\t\r\n * This contract is only required for intermediate, library-like contracts.\t\r\n */\t\r\n\t\t\r\nabstract contract Context {\t\r\n\tfunction _msgSender() internal virtual view returns (address payable) {\t\r\n\t\treturn msg.sender;\t\r\n\t}\t\r\n\t\t\r\n\tfunction _msgData() internal virtual view returns (bytes memory) {\t\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\t\r\n\t        return msg.data;\t\r\n\t}\r\n}\t\r\n\t\t\r\n/**\t\r\n * @dev Interface of the BEP20 standard as defined in the EIP.\t\r\n */\t\r\n\t\t\r\ninterface IBEP20 {\t\r\n    /**\t\r\n     * @dev Returns the amount of tokens in existence.\t\r\n     */\t\r\n    function totalSupply() external view returns (uint256);\t\r\n\r\n    /**\t\r\n     * @dev Returns the amount of tokens owned by `account`.\t\r\n     */\t\r\n    function balanceOf(address account) external view returns (uint256);\t\r\n\r\n    /**\t\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\t\r\n     *\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\r\n     *\t\r\n     * Emits a {Transfer} event.\t\r\n     */\t\r\n    function transfer(address recipient, uint256 amount)\t\r\n\texternal\t\r\n\treturns (bool);\t\r\n\r\n    /**\t\r\n     * @dev Returns the remaining number of tokens that `spender` will be\t\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\t\r\n     * zero by default.\t\r\n     *\t\r\n     * This value changes when {approve} or {transferFrom} are called.\t\r\n     */\t\r\n    function allowance(address owner, address spender)\t\r\n\texternal\t\r\n\tview\t\r\n\treturns (uint256);\t\r\n\r\n    /**\t\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\t\r\n     *\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\r\n     *\t\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\t\r\n     * that someone may use both the old and the new allowance by unfortunate\t\r\n     * transaction ordering. One possible solution to mitigate this race\t\r\n     * condition is to first reduce the spender's allowance to 0 and set the\t\r\n     * desired value afterwards:\t\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\t\r\n     *\t\r\n     * Emits an {Approval} event.\t\r\n     */\t\r\n    function approve(address spender, uint256 amount) external returns (bool);\t\r\n\r\n    /**\t\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\t\r\n     * allowance mechanism. `amount` is then deducted from the caller's\t\r\n     * allowance.\t\r\n     *\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\r\n     *\t\r\n     * Emits a {Transfer} event.\t\r\n     */\t\r\n    function transferFrom(\t\r\n\taddress sender,\t\r\n\taddress recipient,\t\r\n\tuint256 amount\t\r\n    ) external returns (bool);\t\r\n\r\n    /**\t\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\t\r\n     * another (`to`).\t\r\n     *\t\r\n     * Note that `value` may be zero.\t\r\n     */\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\t\r\n\r\n    /**\t\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\t\r\n     * a call to {approve}. `value` is the new allowance.\t\r\n     */\t\r\n    event Approval(\t\r\n\taddress indexed owner,\t\r\n\taddress indexed spender,\t\r\n\tuint256 value\t\r\n    );\t\r\n}\t\r\n\t\t\r\n/**\t\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\t\r\n * checks.\t\r\n *\t\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\t\r\n * in bugs, because programmers usually assume that an overflow raises an\t\r\n * error, which is the standard behavior in high level programming languages.\t\r\n * `SafeMath` restores this intuition by reverting the transaction when an\t\r\n * operation overflows.\t\r\n *\t\r\n * Using this library instead of the unchecked operations eliminates an entire\t\r\n * class of bugs, so it's recommended to use it always.\t\r\n */\r\n \r\nlibrary SafeMath {\t\r\n    /**\t\r\n     * @dev Returns the addition of two unsigned integers, reverting on\t\r\n     * overflow.\t\r\n     *\t\r\n     * Counterpart to Solidity's `+` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Addition cannot overflow.\t\r\n     */\t\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n\tuint256 c = a + b;\t\r\n\trequire(c >= a, \"SafeMath: addition overflow\");\t\r\n\r\n\treturn c;\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\t\r\n     * overflow (when the result is negative).\t\r\n     *\t\r\n     * Counterpart to Solidity's `-` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Subtraction cannot overflow.\t\r\n     */\t\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n\treturn sub(a, b, \"SafeMath: subtraction overflow\");\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\t\r\n     * overflow (when the result is negative).\t\r\n     *\t\r\n     * Counterpart to Solidity's `-` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Subtraction cannot overflow.\t\r\n     */\t\r\n    function sub(\t\r\n\tuint256 a,\t\r\n\tuint256 b,\t\r\n\tstring memory errorMessage\t\r\n    ) internal pure returns (uint256) {\t\r\n\trequire(b <= a, errorMessage);\t\r\n\tuint256 c = a - b;\t\r\n\r\n\treturn c;\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\t\r\n     * overflow.\t\r\n     *\t\r\n     * Counterpart to Solidity's `*` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Multiplication cannot overflow.\t\r\n     */\t\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\t\r\n\t// benefit is lost if 'b' is also tested.\t\r\n\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\t\r\n\tif (a == 0) {\t\r\n\t    return 0;\t\r\n\t}\t\r\n\r\n\tuint256 c = a * b;\t\r\n\trequire(c / a == b, \"SafeMath: multiplication overflow\");\t\r\n\r\n\treturn c;\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\t\r\n     * division by zero. The result is rounded towards zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\t\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\t\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n\treturn div(a, b, \"SafeMath: division by zero\");\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\t\r\n     * division by zero. The result is rounded towards zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\t\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\t\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function div(\t\r\n\tuint256 a,\t\r\n\tuint256 b,\t\r\n\tstring memory errorMessage\t\r\n    ) internal pure returns (uint256) {\t\r\n\trequire(b > 0, errorMessage);\t\r\n\tuint256 c = a / b;\t\r\n\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\t\r\n\r\n\treturn c;\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\r\n     * Reverts when dividing by zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\r\n     * invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n\treturn mod(a, b, \"SafeMath: modulo by zero\");\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\r\n     * Reverts with custom message when dividing by zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\r\n     * invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function mod(\t\r\n\tuint256 a,\t\r\n\tuint256 b,\t\r\n\tstring memory errorMessage\t\r\n    ) internal pure returns (uint256) {\t\r\n\trequire(b != 0, errorMessage);\t\r\n\treturn a % b;\t\r\n    }\t\r\n}\t\r\n\t\t\r\n/**\t\r\n * @dev Collection of functions related to the address type\t\r\n */\t\r\nlibrary Address {\t\r\n    /**\t\r\n     * @dev Returns true if `account` is a contract.\t\r\n     *\t\r\n     * [IMPORTANT]\t\r\n     * ====\t\r\n     * It is unsafe to assume that an address for which this function returns\t\r\n     * false is an externally-owned account (EOA) and not a contract.\t\r\n     *\t\r\n     * Among others, `isContract` will return false for the following\t\r\n     * types of addresses:\t\r\n     *\t\r\n     *  - an externally-owned account\t\r\n     *  - a contract in construction\t\r\n     *  - an address where a contract will be created\t\r\n     *  - an address where a contract lived, but was destroyed\t\r\n     * ====\t\r\n     */\t\r\n    function isContract(address account) internal view returns (bool) {\t\r\n\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\t\r\n\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\t\r\n\t// for accounts without code, i.e. `keccak256('')`\t\r\n\tbytes32 codehash;\t\r\n\r\n\r\n\t    bytes32 accountHash\t\r\n\t = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\t\r\n\t// solhint-disable-next-line no-inline-assembly\t\r\n\tassembly {\t\r\n\t    codehash := extcodehash(account)\t\r\n\t}\t\r\n\treturn (codehash != accountHash && codehash != 0x0);\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\t\r\n     * `recipient`, forwarding all available gas and reverting on errors.\t\r\n     *\t\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\t\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\t\r\n     * imposed by `transfer`, making them unable to receive funds via\t\r\n     * `transfer`. {sendValue} removes this limitation.\t\r\n     *\t\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\t\r\n     *\t\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\t\r\n     * taken to not create reentrancy vulnerabilities. Consider using\t\r\n     * {ReentrancyGuard} or the\t\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\t\r\n     */\t\r\n    function sendValue(address payable recipient, uint256 amount) internal {\t\r\n\trequire(\t\r\n\t    address(this).balance >= amount,\t\r\n\t    \"Address: insufficient balance\"\t\r\n\t);\t\r\n\r\n\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\t\r\n\t(bool success, ) = recipient.call{value: amount}(\"\");\t\r\n\trequire(\t\r\n\t    success,\t\r\n\t    \"Address: unable to send value, recipient may have reverted\"\t\r\n\t);\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Performs a Solidity function call using a low level `call`. A\t\r\n     * plain`call` is an unsafe replacement for a function call: use this\t\r\n     * function instead.\t\r\n     *\t\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\t\r\n     * function (like regular Solidity function calls).\t\r\n     *\t\r\n     * Returns the raw returned data. To convert to the expected return value,\t\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - `target` must be a contract.\t\r\n     * - calling `target` with `data` must not revert.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCall(address target, bytes memory data)\t\r\n\tinternal\t\r\n\treturns (bytes memory)\t\r\n    {\t\r\n\treturn functionCall(target, data, \"Address: low-level call failed\");\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\t\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCall(\t\r\n\taddress target,\t\r\n\tbytes memory data,\t\r\n\tstring memory errorMessage\t\r\n    ) internal returns (bytes memory) {\t\r\n\treturn _functionCallWithValue(target, data, 0, errorMessage);\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\t\r\n     * but also transferring `value` wei to `target`.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - the calling contract must have an ETH balance of at least `value`.\t\r\n     * - the called Solidity function must be `payable`.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCallWithValue(\t\r\n\taddress target,\t\r\n\tbytes memory data,\t\r\n\tuint256 value\t\r\n    ) internal returns (bytes memory) {\t\r\n\treturn\t\r\n\t    functionCallWithValue(\t\r\n\t\ttarget,\t\r\n\t\tdata,\t\r\n\t\tvalue,\t\r\n\t\t\"Address: low-level call with value failed\"\t\r\n\t    );\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\t\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCallWithValue(\t\r\n\taddress target,\t\r\n\tbytes memory data,\t\r\n\tuint256 value,\t\r\n\tstring memory errorMessage\t\r\n    ) internal returns (bytes memory) {\t\r\n\trequire(\t\r\n\t    address(this).balance >= value,\t\r\n\t    \"Address: insufficient balance for call\"\t\r\n\t);\t\r\n\treturn _functionCallWithValue(target, data, value, errorMessage);\t\r\n    }\t\r\n\r\n    function _functionCallWithValue(\t\r\n\taddress target,\t\r\n\tbytes memory data,\t\r\n\tuint256 weiValue,\t\r\n\tstring memory errorMessage\t\r\n    ) private returns (bytes memory) {\t\r\n\trequire(isContract(target), \"Address: call to non-contract\");\t\r\n\r\n\t// solhint-disable-next-line avoid-low-level-calls\t\r\n\t(bool success, bytes memory returndata) = target.call{value: weiValue}(\t\r\n\t    data\t\r\n\t);\t\r\n\tif (success) {\t\r\n\t    return returndata;\t\r\n\t} else {\t\r\n\t    // Look for revert reason and bubble it up if present\t\r\n\t    if (returndata.length > 0) {\t\r\n\t\t// The easiest way to bubble the revert reason is using memory via assembly\t\r\n\r\n\t\t// solhint-disable-next-line no-inline-assembly\t\r\n\t\tassembly {\t\r\n\t\t    let returndata_size := mload(returndata)\t\r\n\t\t    revert(add(32, returndata), returndata_size)\t\r\n\t\t}\t\r\n\t    } else {\t\r\n\t\trevert(errorMessage);\t\r\n\t    }\t\r\n\t}\t\r\n    }\t\r\n}\r\n\t\t\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\t\r\n * there is an account (an owner) that can be granted exclusive access to\t\r\n * specific functions.\t\r\n *\t\r\n * By default, the owner account will be the one that deploys the contract. This\t\r\n * can later be changed with {transferOwnership}.\t\r\n *\t\r\n * This module is used through inheritance. It will make available the modifier\t\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\t\r\n * the owner.\r\n */\r\n\t\r\ncontract Ownable is Context {\t\r\n    address private _owner;\t\r\n\r\n    event OwnershipTransferred(\t\r\n\taddress indexed previousOwner,\t\r\n\taddress indexed newOwner\t\r\n    );\t\r\n\r\n    /**\t\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\t\r\n     */\t\r\n    constructor() internal {\t\r\n\taddress msgSender = _msgSender();\t\r\n\t_owner = msgSender;\t\r\n\temit OwnershipTransferred(address(0), msgSender);\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Returns the address of the current owner.\t\r\n     */\t\r\n    function owner() public view returns (address) {\t\r\n\treturn _owner;\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Throws if called by any account other than the owner.\t\r\n     */\t\r\n    modifier onlyOwner() {\t\r\n\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\t\r\n\t_;\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Leaves the contract without owner. It will not be possible to call\t\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\t\r\n     *\t\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\t\r\n     * thereby removing any functionality that is only available to the owner.\t\r\n     */\t\r\n    function renounceOwnership() public virtual onlyOwner {\t\r\n\temit OwnershipTransferred(_owner, address(0));\t\r\n\t_owner = address(0);\t\r\n    }\t\r\n\r\n    /**\t\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\t\r\n     * Can only be called by the current owner.\t\r\n     */\t\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\t\r\n\trequire(\t\r\n\t    newOwner != address(0),\t\r\n\t    \"Ownable: new owner is the zero address\"\t\r\n\t);\t\r\n\temit OwnershipTransferred(_owner, newOwner);\t\r\n\t_owner = newOwner;\t\r\n    }\t\r\n}\t\r\n\t\t\r\n\t\t\r\ninterface IPancakeFactory {\t\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\t\r\n}\t\r\n\r\n\r\ninterface IPancakePair {\t\r\n    function sync() external;   \t\r\n}\t\r\n\t\t\r\n\t\t\r\ninterface IPancakeRouter01 {\t\r\n    function factory() external pure returns (address);\t\r\n    function WETH() external pure returns (address);\t\r\n\r\n    function addLiquidity(\t\r\n\taddress tokenA,\t\r\n\taddress tokenB,\t\r\n\tuint amountADesired,\t\r\n\tuint amountBDesired,\t\r\n\tuint amountAMin,\t\r\n\tuint amountBMin,\t\r\n\taddress to,\t\r\n\tuint deadline\t\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\t\r\n    function addLiquidityETH(\t\r\n\taddress token,\t\r\n\tuint amountTokenDesired,\t\r\n\tuint amountTokenMin,\t\r\n\tuint amountETHMin,\t\r\n\taddress to,\t\r\n\tuint deadline\t\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\t\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\t\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\t\r\n\taddress token,\t\r\n\tuint liquidity,\t\r\n\tuint amountTokenMin,\t\r\n\tuint amountETHMin,\t\r\n\taddress to,\t\r\n\tuint deadline\t\r\n    ) external returns (uint amountETH);\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\t\r\n\tuint amountIn,\t\r\n\tuint amountOutMin,\t\r\n\taddress[] calldata path,\t\r\n\taddress to,\t\r\n\tuint deadline\t\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\t\r\n\tuint amountOutMin,\t\r\n\taddress[] calldata path,\t\r\n\taddress to,\t\r\n\tuint deadline\t\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\t\r\n\tuint amountIn,\t\r\n\tuint amountOutMin,\t\r\n\taddress[] calldata path,\t\r\n\taddress to,\t\r\n\tuint deadline\t\r\n    ) external;\r\n}\r\n\r\ncontract RewardWallet {\r\n    constructor() public {\r\n    }\r\n}\r\n\r\ncontract Balancer {\r\n    constructor() public {\r\n    }\r\n}\r\n\t\t\r\ncontract TRIFORCE is Context, IBEP20, Ownable {\t\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name = \"TRIFORCE\";\r\n    string private _symbol = \"TFC\";\r\n    uint8 private _decimals = 18;\r\n\r\n    mapping(address => uint256) internal _reflectionBalance;\r\n    mapping(address => uint256) internal _tokenBalance;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 internal _tokenTotal = 10_000_000e18; // 10 million total supply\r\n    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\r\n\r\n    mapping(address => bool) isExcludedFromFee;\r\n    mapping(address => bool) internal _isExcluded;\r\n    address[] internal _excluded;\r\n\r\n    //the fee contains two decimal places so 300 = 3%\r\n    uint256 public _feeDecimal = 2;\r\n    uint256 public _taxFee = 300; //3% of every transaction's TFC tokens will be collected as tax fee, and redistributed to reward holders\r\n    uint256 public _burnFee = 300; // 3% of every transaction's TFC tokens will be burned \r\n    uint256 public _liquidityFee = 300; // 3% of every transaction's TFC tokens will be collected as liquidity fee, to automatically generate liquidity\r\n    uint256 public _lpRewardFee = 0;\r\n\r\n    uint256 public _liquidityRemoveFee = 300;  //3% of liquidity will be used for rebalancing mechanism\r\n    uint256 public _rebalanceCallerFee = 500; // 5% of TFC tokens generated after rebalancing are given to the caller of the transaction which initiates rebalancing mechanism\r\n    uint256 public _swapCallerFee = 200e18;   // 200 TFC tokens will be given to the caller of the transaction initiating automatic liquidity generation\r\n\r\n    uint256 public _maxTxAmount = 50000e18;  // maximum allowed 50000 TFC tokens per transaction\r\n\r\n    uint256 public _taxFeeTotal;\t\r\n    uint256 public _burnFeeTotal;\r\n    uint256 public _liquidityFeeTotal;\r\n    uint256 public _lpRewardFeeTotal;\t\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public sellingEnabled = false;\r\n    bool private inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    bool public rebalanceEnabled = true;\r\n\r\n    uint256 public minTokensBeforeSwap = 10000e18; // Contract's TFC token balance must have a minimum of 10000 TFC Tokens for automatic liquidity generation\r\n    uint256 public minTokenBeforeReward = 10e18; // Reward wallet balance must have a minimum of 10 TFC tokens for rewarding LP\r\n\r\n    uint256 public lastRebalance = now;\r\n    uint256 public rebalanceInterval = 1 hours; // rebalancing after every 1 hour\r\n\r\n    IPancakeRouter02 public pancakeRouter;\r\n    address public pancakeswapPair;\r\n    address public rewardWallet;\t\r\n    address public balancer;\r\n    address public devWallet;\r\n\r\n    event TradingEnabled(bool enabled);\r\n    event SellingEnabled(bool enabled);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    event Rebalance(uint256 amount);\r\n\tevent MaxTxAmountUpdated(uint256 maxTxAmount);\r\n\r\n    modifier lockTheSwap {\r\n\tinSwapAndLiquify = true;\r\n\t_;\r\n\tinSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() public {\t\r\n\r\n    \tIPancakeRouter02 _pancakeRouter = IPancakeRouter02(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);\r\n\t // Create a pancakeswap pair for this new token\r\n\r\n\tpancakeswapPair = IPancakeFactory(_pancakeRouter.factory())\r\n\t    .createPair(address(this), _pancakeRouter.WETH());\r\n\r\n\tpancakeRouter = _pancakeRouter;\r\n\r\n\trewardWallet = address(new RewardWallet());\r\n\tbalancer = address(new Balancer());\r\n\t\r\n\tdevWallet = msg.sender;\r\n\r\n\tisExcludedFromFee[_msgSender()] = true;\r\n\tisExcludedFromFee[address(this)] = true;\r\n\r\n\t_reflectionBalance[_msgSender()] = _reflectionTotal;\r\n\temit Transfer(address(0), _msgSender(), _tokenTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n\treturn _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n\treturn _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n\treturn _decimals;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n\treturn _tokenTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n\tif (_isExcluded[account]) return _tokenBalance[account];\r\n\treturn tokenFromReflection(_reflectionBalance[account]);\t\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\t\r\n\tpublic\t\r\n\toverride\t\r\n\tvirtual\t\r\n\treturns (bool)\t\r\n    {\t\r\n       _transfer(_msgSender(),recipient,amount);\r\n\treturn true;\r\n    }\t\r\n\r\n    function allowance(address owner, address spender)\t\r\n\tpublic\t\r\n\toverride\t\r\n\tview\t\r\n\treturns (uint256)\t\r\n    {\t\r\n\treturn _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\t\r\n\tpublic\t\r\n\toverride\r\n\tvirtual\t\r\n\treturns (bool)\t\r\n    {\t\r\n\t_approve(_msgSender(), spender, amount);\r\n\treturn true;\r\n    }\t\r\n\r\n    function transferFrom(\t\r\n\taddress sender,\t\r\n\taddress recipient,\t\r\n\tuint256 amount\t\r\n    ) public override virtual returns (bool) {\r\n\t_transfer(sender,recipient,amount);\r\n\r\n\t_approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub( amount,\"BEP20: transfer amount exceeds allowance\"));\r\n\treturn true;\r\n    }\t\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\t\r\n\tpublic\t\r\n\tvirtual\t\r\n\treturns (bool)\t\r\n    {\t\r\n\t_approve(\t\r\n\t    _msgSender(),\t\r\n\t    spender,\t\r\n\t    _allowances[_msgSender()][spender].add(addedValue)\t\r\n\t);\t\r\n\treturn true;\t\r\n    }\t\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\t\r\n\tpublic\t\r\n\tvirtual\t\r\n\treturns (bool)\t\r\n    {\t\r\n\t_approve(\t\r\n\t    _msgSender(),\t\r\n\t    spender,\t\r\n\t    _allowances[_msgSender()][spender].sub(\t\r\n\t\tsubtractedValue,\t\r\n\t\t\"BEP20: decreased allowance below zero\"\t\r\n\t    )\t\r\n\t);\t\r\n\treturn true;\t\r\n    }\t\r\n\r\n    function isExcluded(address account) public view returns (bool) {\t\r\n\treturn _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tokenAmount, bool deductTransferFee)\t\r\n\tpublic\t\r\n\tview\t\r\n\treturns (uint256)\t\r\n    {\t\r\n\trequire(tokenAmount <= _tokenTotal, \"Amount must be less than supply\");\t\r\n\tif (!deductTransferFee) {\t\r\n\t    return tokenAmount.mul(_getReflectionRate());\t\r\n\t} else {\t\r\n\t    return\t\r\n\t\ttokenAmount.sub(tokenAmount.mul(_taxFee).div(10** _feeDecimal + 2)).mul(\t\r\n\t\t    _getReflectionRate()\t\r\n\t\t);\t\r\n\t}\t\r\n    }\t\r\n\r\n    function tokenFromReflection(uint256 reflectionAmount)\t\r\n\tpublic\t\r\n\tview\t\r\n\treturns (uint256)\t\r\n    {\t\r\n\trequire(\t\r\n\t    reflectionAmount <= _reflectionTotal,\t\r\n\t    \"Amount must be less than total reflections\"\t\r\n\t);\t\r\n\tuint256 currentRate = _getReflectionRate();\t\r\n\treturn reflectionAmount.div(currentRate);\t\r\n    }\t\r\n\r\n    function excludeAccount(address account) external onlyOwner() {\t\r\n\r\n\trequire(\t\r\n\t   account != 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F,\t\r\n\t    \"TRIFORCE: We can not exclude Pancakeswap router.\"\t\r\n\t);\t\r\n\r\n\trequire(account != address(this), 'TRIFORCE: We can not exclude contract self.');\t\r\n\trequire(account != rewardWallet, 'TRIFORCE: We can not exclude reward wallet.');\t\r\n\trequire(!_isExcluded[account], \"TRIFORCE: Account is already excluded\");\t\r\n\r\n\tif (_reflectionBalance[account] > 0) {\t\r\n\t    _tokenBalance[account] = tokenFromReflection(\t\r\n\t\t_reflectionBalance[account]\t\r\n\t    );\t\r\n\t}\t\r\n\t_isExcluded[account] = true;\t\r\n\t_excluded.push(account);\t\r\n    }\t\r\n\r\n    function includeAccount(address account) external onlyOwner() {\t\r\n\trequire(_isExcluded[account], \"TRIFORCE: Account is already included\");\t\r\n\tfor (uint256 i = 0; i < _excluded.length; i++) {\t\r\n\t    if (_excluded[i] == account) {\t\r\n\t\t_excluded[i] = _excluded[_excluded.length - 1];\t\r\n\t\t_tokenBalance[account] = 0;\t\r\n\t\t_isExcluded[account] = false;\t\r\n\t\t_excluded.pop();\t\r\n\t\tbreak;\t\r\n\t    }\t\r\n\t}\t\r\n    }\t\r\n\r\n    function _approve(\t\r\n\taddress owner,\t\r\n\taddress spender,\t\r\n\tuint256 amount\t\r\n    ) private {\t\r\n\trequire(owner != address(0), \"BEP20: approve from the zero address\");\t\r\n\trequire(spender != address(0), \"BEP20: approve to the zero address\");\t\r\n\trequire(sellingEnabled || owner == devWallet, \"Trading is locked.\");\t//d3vgen |===|}>\r\n\t_allowances[owner][spender] = amount;\t\r\n\temit Approval(owner, spender, amount);\t\r\n    }\t\r\n\r\n    function _transfer(\t\r\n\taddress sender,\t\r\n\taddress recipient,\t\r\n\tuint256 amount\t\r\n    ) private {\t\r\n\trequire(sender != address(0), \"BEP20: transfer from the zero address\");\t\r\n\trequire(recipient != address(0), \"BEP20: transfer to the zero address\");\t\r\n\trequire(amount > 0, \"Transfer amount must be greater than zero\");\t\r\n\trequire(tradingEnabled || sender == owner() || recipient == owner() ||\t\r\n\t\tisExcludedFromFee[sender] || isExcludedFromFee[recipient], \"Trading is locked before presale.\");\t\r\n\r\n\tif(sender != owner() && recipient != owner() && !inSwapAndLiquify) {\t\r\n\t\trequire(amount <= _maxTxAmount, \"TRIFORCE: Transfer amount exceeds the maxTxAmount.\");\t\r\n\t}\t\r\n\r\n\t//swapAndLiquify or rebalance(don't do both at once or it will cost too much gas)\t\r\n\r\n\tif(!inSwapAndLiquify) {\t\r\n\t    bool swap = true;\t\r\n\t    if(now > lastRebalance + rebalanceInterval && rebalanceEnabled){\t\r\n\t\tuint256 lpBalance = IBEP20(pancakeswapPair).balanceOf(address(this));\t\r\n\t\tif(lpBalance > 100) {\t\r\n\t\t    _rebalance(lpBalance);\t\r\n\t\t    swap = false;\t\r\n\t\t}\t\r\n\t    } \t\r\n\t   if(swap) {\t\r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\t\r\n\t\tbool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;\t\r\n\t\tif (overMinTokenBalance && sender != pancakeswapPair && swapAndLiquifyEnabled) {\t\r\n\t\t    swapAndLiquify(contractTokenBalance);\t\r\n\t\t    rewardLiquidityProviders();\t\r\n\t\t}\t\r\n\t   }\t\r\n\t}\t\r\n\r\n\r\n\tuint256 transferAmount = amount;\t\r\n\tuint256 rate = _getReflectionRate();\t\r\n\r\n\r\n\tif(!isExcludedFromFee[_msgSender()] && !isExcludedFromFee[recipient] && !inSwapAndLiquify){\t\r\n\t    transferAmount = collectFee(sender,amount,rate);\t\r\n\t}\t\r\n\r\n\t//transfer reflection\t\r\n\t_reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));\t\r\n\t_reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));\t\r\n\r\n\t//if any account belongs to the excludedAccount transfer token\t\r\n\tif (_isExcluded[sender]) {\t\r\n\t    _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\t\r\n\t}\t\r\n\r\n\tif (_isExcluded[recipient]) {\t\r\n\t    _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);\t\r\n\t}\t\r\n\r\n\temit Transfer(sender, recipient, transferAmount);\t\r\n    }\t\r\n\r\n    function collectFee(address account, uint256 amount, uint256 rate) private returns (uint256) {\t\r\n\tuint256 transferAmount = amount;\t\r\n\r\n\t//tax fee\t\r\n\tif(_taxFee != 0) {\t\r\n\t    uint256 taxFee = amount.mul(_taxFee).div(10**(_feeDecimal + 2));\t\r\n\t    transferAmount = transferAmount.sub(taxFee);\t\r\n\t    _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));\t\r\n\t    _taxFeeTotal = _taxFeeTotal.add(taxFee);\t\r\n\t}\t\r\n\r\n\t//take liquidity fee\t\r\n\tif(_liquidityFee != 0) {\t\r\n\t    uint256 liquidityFee = amount.mul(_liquidityFee).div(10**(_feeDecimal + 2));\t\r\n\t    transferAmount = transferAmount.sub(liquidityFee);\t\r\n\t    _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(liquidityFee.mul(rate));\t\r\n\t    _liquidityFeeTotal = _liquidityFeeTotal.add(liquidityFee);\t\r\n\t    emit Transfer(account,address(this),liquidityFee);\t\r\n\t}\t\r\n\r\n\t//take lp Reward fee\t\r\n\tif(_lpRewardFee != 0)  {\t\r\n\t    uint256 lpRewardFee = amount.mul(_lpRewardFee).div(10**(_feeDecimal + 2));\t\r\n\t    transferAmount = transferAmount.sub(lpRewardFee);\t\r\n\t    _reflectionBalance[rewardWallet] = _reflectionBalance[rewardWallet].add(lpRewardFee.mul(rate));\t\r\n\t    _lpRewardFeeTotal = _lpRewardFeeTotal.add(lpRewardFee);\t\r\n\t    emit Transfer(account,rewardWallet,lpRewardFee);\t\r\n\t}\t\r\n\r\n\t//take burn fee\t\r\n\tif(_burnFee != 0) {\t\r\n\t    uint256 burnFee = amount.mul(_burnFee).div(10**(_feeDecimal + 2));\t\r\n\t    transferAmount = transferAmount.sub(burnFee);\t\r\n\t    _tokenTotal = _tokenTotal.sub(burnFee);\t\r\n\t    _reflectionTotal = _reflectionTotal.sub(burnFee.mul(rate));\t\r\n\t    _burnFeeTotal = _burnFeeTotal.add(burnFee);\t\r\n\t    emit Transfer(account,address(0),burnFee);\t\r\n\t}\t\r\n\r\n\treturn transferAmount;\t\r\n    }\t\r\n\r\n    function _getReflectionRate() private view returns (uint256) {\t\r\n\tuint256 reflectionSupply = _reflectionTotal;\t\r\n\tuint256 tokenSupply = _tokenTotal;\t\r\n\tfor (uint256 i = 0; i < _excluded.length; i++) {\t\r\n\t    if (\t\r\n\t\t_reflectionBalance[_excluded[i]] > reflectionSupply ||\t\r\n\t\t_tokenBalance[_excluded[i]] > tokenSupply\t\r\n\t    ) return _reflectionTotal.div(_tokenTotal);\t\r\n\t    reflectionSupply = reflectionSupply.sub(\t\r\n\t\t_reflectionBalance[_excluded[i]]\t\r\n\t    );\t\r\n\t    tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);\t\r\n\t}\t\r\n\tif (reflectionSupply < _reflectionTotal.div(_tokenTotal))\t\r\n\t    return _reflectionTotal.div(_tokenTotal);\t\r\n\treturn reflectionSupply.div(tokenSupply);\t\r\n    }\t\r\n\r\n     function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\t\r\n\r\n\t// split the contract balance except swapCallerFee into halves\t\r\n\tuint256 lockedForSwap = contractTokenBalance.sub(_swapCallerFee);\t\r\n\r\n\t// split the contract balance into halves\t\r\n\tuint256 half = lockedForSwap.div(2);\t\r\n\tuint256 otherHalf = lockedForSwap.sub(half);\t\r\n\r\n\t/* capture the contract's current ETH balance.\t\r\n\t * this is so that we can capture exactly the amount of ETH that the\t\r\n\t * swap creates, and not make the liquidity event include any ETH that\t\r\n\t * has been manually sent to the contract \t\r\n\t */\t\r\n\r\n\tuint256 initialBalance = address(this).balance;\t\r\n\r\n\t// swap tokens for ETH\t\r\n\tswapTokensForEth(half); \t\r\n\r\n\t// how much ETH did we just swap into?\t\r\n\tuint256 newBalance = address(this).balance.sub(initialBalance);\t\r\n\r\n\t// add liquidity to pancakeswap\t\r\n\taddLiquidity(otherHalf, newBalance);\t\r\n\r\n\temit SwapAndLiquify(half, newBalance, otherHalf);\t\r\n\r\n\t//give the swap caller fee\t\r\n\t_transfer(address(this), tx.origin, _swapCallerFee);\t\r\n    }\t\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\t\r\n\r\n\t// generate the pancakeswap pair path of token -> weth\t\r\n\taddress[] memory path = new address[](2);\t\r\n\tpath[0] = address(this);\t\r\n\tpath[1] = pancakeRouter.WETH();\t\r\n\r\n\r\n\t_approve(address(this), address(pancakeRouter), tokenAmount);\t\r\n\r\n\t// make the swap\t\r\n\tpancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\t\r\n\t    tokenAmount,\t\r\n\t    0, // accept any amount of ETH\t\r\n\t    path,\t\r\n\t    address(this),\t\r\n\t    block.timestamp\t\r\n\t);\t\r\n    }\t\r\n\r\n    function swapEthForTokens(uint256 EthAmount) private {\t\r\n\taddress[] memory path = new address[](2);\t\r\n\tpath[0] = pancakeRouter.WETH();\t\r\n\tpath[1] = address(this);\t\r\n\r\n\tpancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: EthAmount}(\t\r\n\t\t0,\t\r\n\t\tpath,\t\r\n\t\taddress(balancer),\t\r\n\t\tblock.timestamp\t\r\n\t    );\t\r\n    }\t\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\t\r\n\r\n\t// approve token transfer to cover all possible scenarios\t\r\n\t_approve(address(this), address(pancakeRouter), tokenAmount);\t\r\n\r\n\r\n\t// add the liquidity\t\r\n\tpancakeRouter.addLiquidityETH{value: ethAmount}(\t\r\n\t    address(this),\t\r\n\t    tokenAmount,\t\r\n\t    0, // slippage is unavoidable\t\r\n\t    0, // slippage is unavoidable\t\r\n\t    address(this),\t\r\n\t    block.timestamp\t\r\n\t);\t\r\n    }\t\r\n\r\n    function removeLiquidityETH(uint256 lpAmount) private returns(uint ETHAmount) {\t\r\n\r\n\tIBEP20(pancakeswapPair).approve(address(pancakeRouter), lpAmount);\t\r\n\r\n\t(ETHAmount) = pancakeRouter.removeLiquidityETHSupportingFeeOnTransferTokens(\t\r\n\t\taddress(this),\t\r\n\t\tlpAmount,\t\r\n\t\t0,\t\r\n\t\t0,\t\r\n\t\taddress(this),\t\r\n\t\tblock.timestamp\t\r\n\t    );\t\r\n    }\t\r\n\r\n    function rewardLiquidityProviders() private {\t\r\n\r\n\tuint256 tokenBalance = balanceOf(rewardWallet);\t\r\n\r\n\tif(tokenBalance > minTokenBeforeReward) {\t\r\n\t    uint256 rewardAmount = reflectionFromToken(tokenBalance, false);\t\r\n\t    _reflectionBalance[pancakeswapPair] = _reflectionBalance[pancakeswapPair].add(rewardAmount);\t\r\n\t    _reflectionBalance[rewardWallet] = _reflectionBalance[rewardWallet].sub(rewardAmount);\t\r\n\t    emit Transfer(rewardWallet, pancakeswapPair, tokenBalance);\t\r\n\t    IPancakePair(pancakeswapPair).sync();\t\r\n\t}\t\r\n    }\t\r\n\r\n    function rebalance() public {\t\r\n\trequire(now > lastRebalance + rebalanceInterval && balanceOf(_msgSender()) >= 1000e18, 'TRIFORCE: Not allowed Rebalance.');\t\r\n\r\n\tuint256 lpBalance = IBEP20(pancakeswapPair).balanceOf(address(this));\t\r\n\trequire(lpBalance > 100, \"LP balance of contract should be greater than 100\");\t\r\n\r\n\t_rebalance(lpBalance);\t\r\n    }\t\r\n\r\n    function _rebalance(uint256 lpBalance) private lockTheSwap {\t\r\n\r\n\tlastRebalance = now;\t\r\n\r\n\tuint256 amountToRemove = lpBalance.mul(_liquidityRemoveFee).div(10**(_feeDecimal + 2));\t\r\n\r\n\t// how much tokens we have before swap now, so we don't burn the liqudity tokens as well\t\r\n\tremoveLiquidityETH(amountToRemove);\t\r\n\r\n\t// pancakeswap doesn't allow for a token to by itself, so we have to use an external account, which in this case is called the balancer\t\r\n\tswapEthForTokens(address(this).balance);\t\r\n\r\n\t// how much tokens we swaped into\t\r\n\tuint256 swapedTokens = balanceOf(address(balancer));\t\r\n\tuint256 rewardForCaller = swapedTokens.mul(_rebalanceCallerFee).div(10**(_feeDecimal + 2));\t\r\n\tuint256 amountToBurn = swapedTokens.sub(rewardForCaller);\t\r\n\r\n\tuint256 rate =  _getReflectionRate();\t\r\n\r\n\t_reflectionBalance[_msgSender()] = _reflectionBalance[_msgSender()].add(rewardForCaller.mul(rate));\t\r\n\t_reflectionBalance[address(balancer)] = 0;\t\r\n\r\n\t_burnFeeTotal = _burnFeeTotal.add(amountToBurn);\t\r\n\t_tokenTotal = _tokenTotal.sub(amountToBurn);\t\r\n\t_reflectionTotal = _reflectionTotal.sub(amountToBurn.mul(rate));\t\r\n\r\n\temit Transfer(address(balancer), _msgSender(), rewardForCaller);\t\r\n\temit Transfer(address(balancer), address(0), amountToBurn);\t\r\n\temit Rebalance(amountToBurn);\t\r\n    }\t\r\n\r\n    function setEnableTrading(bool enabled) external onlyOwner() {\t\r\n\ttradingEnabled = enabled;\t\r\n\tTradingEnabled(enabled);\t\r\n    }\t\r\n\r\n\tfunction setEnableSelling(bool enabled) external onlyOwner() {\t\r\n\tsellingEnabled = enabled;\t\r\n\tSellingEnabled(enabled);\t\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool excluded) public onlyOwner {\t\r\n\tisExcludedFromFee[account] = excluded;\t\r\n    }\t\r\n\r\n    function setSwapAndLiquifyEnabled(bool enabled) public onlyOwner {\t\r\n\tswapAndLiquifyEnabled = enabled;\t\r\n\tSwapAndLiquifyEnabledUpdated(enabled);\t\r\n    }\t\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\t\r\n\trequire(maxTxAmount >= 5000e18 , 'TRIFORCE: maxTxAmount should be greater than 5000');\t\r\n\t_maxTxAmount = maxTxAmount;\t\r\n\temit MaxTxAmountUpdated(maxTxAmount);\t\r\n    }\r\n\r\n    function setTaxFee(uint256 fee) public onlyOwner {\t\r\n\t_taxFee = fee;\t\r\n    }\t\r\n\r\n    function setBurnFee(uint256 fee) public onlyOwner {\t\r\n\t_burnFee = fee;\t\r\n    }\t\r\n\r\n    function setLiquidityFee(uint256 fee) public onlyOwner {\t\r\n\t_liquidityFee = fee;\t\r\n    }\t\r\n\r\n    function setLpRewardFee(uint256 fee) public onlyOwner {\t\r\n\t_lpRewardFee = fee;\t\r\n    }\t\r\n\r\n    function setLiquidityRemoveFee(uint256 fee) public onlyOwner {\t\r\n\t_liquidityRemoveFee = fee;\t\r\n    }\t\r\n\r\n    function setRebalanceCallerFee(uint256 fee) public onlyOwner {\t\r\n\t_rebalanceCallerFee = fee;\t\r\n    }\t\r\n\r\n    function setSwapCallerFee(uint256 fee) public onlyOwner {\t\r\n\t_swapCallerFee = fee;\t\r\n    }\t\r\n\r\n    function setMinTokensBeforeSwap(uint256 amount) public onlyOwner {\t\r\n\tminTokensBeforeSwap = amount;\t\r\n    }\t\r\n\r\n    function setMinTokenBeforeReward(uint256 amount) public onlyOwner {\t\r\n\tminTokenBeforeReward = amount;\t\r\n    }\t\r\n\r\n    function setRebalanceInterval(uint256 interval) public onlyOwner {\t\r\n\trebalanceInterval = interval;\t\r\n    }\t\r\n\r\n    function setRebalanceEnabled(bool enabled) public onlyOwner {\t\r\n\trebalanceEnabled = enabled;\t\r\n    }\r\n\r\n\t//Admin function to remove tokens mistakenly sent to this address\r\n    function transferAnyBEP20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        IBEP20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n\tfunction transferBNB(address payable recipient, uint256 amount) public onlyOwner  {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    receive() external payable {}\t\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SellingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityRemoveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpRewardFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebalanceCallerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapCallerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenBeforeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setEnableSelling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityRemoveFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLpRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenBeforeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRebalanceCallerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setRebalanceEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setRebalanceInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setSwapCallerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TRIFORCE", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c839c889d7d15ced3604c167ef84ced147f7a57131f6d7db2a2f3eef3af5945f"}