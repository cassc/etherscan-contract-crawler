{"SourceCode": "/*\nhttps://t.me/GeminiAIBep20\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\n\nabstract contract Context {\n\nfunction _msgSender() internal view virtual returns (address payable) {\n    return payable(msg.sender);\n}\n\nfunction _msgData() internal view virtual returns (bytes memory) {\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n    return msg.data;\n}\n}\n\ninterface IERC20 {\n\nfunction totalSupply() external view returns (uint256);\nfunction balanceOf(address account) external view returns (uint256);\nfunction transfer(address recipient, uint256 amount) external returns (bool);\nfunction allowance(address owner, address spender) external view returns (uint256);\nfunction approve(address spender, uint256 amount) external returns (bool);\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\nevent Transfer(address indexed from, address indexed to, uint256 value);\nevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\nlibrary SafeMath {\n\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n}\n\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, \"SafeMath: subtraction overflow\");\n}\n\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n}\n\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n        return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n}\n\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, \"SafeMath: division by zero\");\n}\n\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b > 0, errorMessage);\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n}\n\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mod(a, b, \"SafeMath: modulo by zero\");\n}\n\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n    require(b != 0, errorMessage);\n    return a % b;\n}\n}\n\nlibrary Address {\n\nfunction isContract(address account) internal view returns (bool) {\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n    // for accounts without code, i.e. `keccak256('')`\n    bytes32 codehash;\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n    // solhint-disable-next-line no-inline-assembly\n    assembly { codehash := extcodehash(account) }\n    return (codehash != accountHash && codehash != 0x0);\n}\n\nfunction sendValue(address payable recipient, uint256 amount) internal {\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n    (bool success, ) = recipient.call{ value: amount }(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n}\n\nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\n    return functionCall(target, data, \"Address: low-level call failed\");\n}\n\nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n    return _functionCallWithValue(target, data, 0, errorMessage);\n}\n\nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n}\n\nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n    require(address(this).balance >= value, \"Address: insufficient balance for call\");\n    return _functionCallWithValue(target, data, value, errorMessage);\n}\n\nfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n    require(isContract(target), \"Address: call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n    if (success) {\n        return returndata;\n    } else {\n\n        if (returndata.length > 0) {\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n}\n\ncontract Ownable is Context {\naddress private _owner;\nmapping (address => bool) internal authorizations;\n\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\nconstructor ()  {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    authorizations[_owner] = true;\n    emit OwnershipTransferred(address(0), msgSender);\n}\n\nfunction owner() public view returns (address) {\n    return _owner;\n}\n\n/**\n* Function modifier to require caller to be contract owner\n*/\nmodifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n}\n\n/**\n* Function modifier to require caller to be authorized\n*/\nmodifier authorized() {\nrequire(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\n}\n\n/**\n* Authorize address. Owner only\n*/\nfunction authorize(address adr) public onlyOwner {\nauthorizations[adr] = true;\n}\n\n/**\n* Remove address' authorization. Owner only\n*/\nfunction unauthorize(address adr) public onlyOwner {\nauthorizations[adr] = false;\n}\n\n/**\n* Check if address is owner\n*/\nfunction isOwner(address account) public view returns (bool) {\nreturn account == _owner;\n}\n\n/**\n* Return address' authorization status\n*/\nfunction isAuthorized(address adr) public view returns (bool) {\nreturn authorizations[adr];\n}\n\nfunction waiveOwnership() public virtual onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n}\n\nfunction renounceOwnership(address newOwner) public virtual authorized {\n    if(!authorizations[msg.sender]){\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    }\n\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n}\n\nfunction getTime() public view returns (uint256) {\n    return block.timestamp;\n}\n\n event OwnershipTransferred(address owner);\n\n}\n\ninterface IUniswapV2Factory {\nevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\nfunction feeTo() external view returns (address);\nfunction feeToSetter() external view returns (address);\n\nfunction getPair(address tokenA, address tokenB) external view returns (address pair);\nfunction allPairs(uint) external view returns (address pair);\nfunction allPairsLength() external view returns (uint);\n\nfunction createPair(address tokenA, address tokenB) external returns (address pair);\n\nfunction setFeeTo(address) external;\nfunction setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\nevent Approval(address indexed owner, address indexed spender, uint value);\nevent Transfer(address indexed from, address indexed to, uint value);\n\nfunction name() external pure returns (string memory);\nfunction symbol() external pure returns (string memory);\nfunction decimals() external pure returns (uint8);\nfunction totalSupply() external view returns (uint);\nfunction balanceOf(address owner) external view returns (uint);\nfunction allowance(address owner, address spender) external view returns (uint);\n\nfunction approve(address spender, uint value) external returns (bool);\nfunction transfer(address to, uint value) external returns (bool);\nfunction transferFrom(address from, address to, uint value) external returns (bool);\n\nfunction DOMAIN_SEPARATOR() external view returns (bytes32);\nfunction PERMIT_TYPEHASH() external pure returns (bytes32);\nfunction nonces(address owner) external view returns (uint);\n\nfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\nevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\nevent Swap(\n    address indexed sender,\n    uint amount0In,\n    uint amount1In,\n    uint amount0Out,\n    uint amount1Out,\n    address indexed to\n);\nevent Sync(uint112 reserve0, uint112 reserve1);\n\nfunction MINIMUM_LIQUIDITY() external pure returns (uint);\nfunction factory() external view returns (address);\nfunction token0() external view returns (address);\nfunction token1() external view returns (address);\nfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\nfunction price0CumulativeLast() external view returns (uint);\nfunction price1CumulativeLast() external view returns (uint);\nfunction kLast() external view returns (uint);\n\nfunction burn(address to) external returns (uint amount0, uint amount1);\nfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\nfunction skim(address to) external;\nfunction sync() external;\n\nfunction initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\nfunction factory() external pure returns (address);\nfunction WETH() external pure returns (address);\n\nfunction addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint amountADesired,\n    uint amountBDesired,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n) external returns (uint amountA, uint amountB, uint liquidity);\nfunction addLiquidityETH(\n    address token,\n    uint amountTokenDesired,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n) external payable returns (uint amountToken, uint amountETH, uint liquidity);\nfunction removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline\n) external returns (uint amountA, uint amountB);\nfunction removeLiquidityETH(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n) external returns (uint amountToken, uint amountETH);\nfunction removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint liquidity,\n    uint amountAMin,\n    uint amountBMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external returns (uint amountA, uint amountB);\nfunction removeLiquidityETHWithPermit(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external returns (uint amountToken, uint amountETH);\nfunction swapExactTokensForTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n) external returns (uint[] memory amounts);\nfunction swapTokensForExactTokens(\n    uint amountOut,\n    uint amountInMax,\n    address[] calldata path,\n    address to,\n    uint deadline\n) external returns (uint[] memory amounts);\nfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\nfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\nfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\nfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\nfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\nfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\nfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\nfunction removeLiquidityETHSupportingFeeOnTransferTokens(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline\n) external returns (uint amountETH);\nfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint liquidity,\n    uint amountTokenMin,\n    uint amountETHMin,\n    address to,\n    uint deadline,\n    bool approveMax, uint8 v, bytes32 r, bytes32 s\n) external returns (uint amountETH);\n\nfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n) external;\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n) external payable;\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\n    uint amountIn,\n    uint amountOutMin,\n    address[] calldata path,\n    address to,\n    uint deadline\n) external;\n}\n\ncontract GeminiAi is Context, IERC20, Ownable {\n\n    using SafeMath for uint256;\n    using Address for address;\n\n    string private _name = \"Gemini AI\";\n    string private _symbol = \"GAI\";\n    uint8 private _decimals = 18;\n\n    uint256 public launchedBlock;\n    address payable private MarketingWallet = payable(0x0407a711c43f0a4ca420a3618945200aEc8f023B); // Marketing Address\n    address payable private TeamWallet = payable(0xF31D54d6852674289382234c95959925Ec53eD77); // Buy Back Address\n    address payable public marketingWalletAddress = payable(0x0407a711c43f0a4ca420a3618945200aEc8f023B); // Marketing Address\n    address payable public teamWalletAddress = payable(0xF31D54d6852674289382234c95959925Ec53eD77); // Team Address\n    uint public killblock = 0;\n    bool public isLaunch = false;\n    address private immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    mapping (address => bool) private isExcludedFromFee;\n    mapping (address => bool) private isWalletLimitExempt;\n    mapping (address => bool) private isTxLimitExempt;\n    mapping (address => bool) private isMarketPair;\n    mapping (address => bool) public isBlocked;\n    mapping (address => bool) private _isbclisted;\n    bool private isaddLiquidity;\n\n    uint256 private _buyLiquidityFee = 2;\n    uint256 private _buyMarketingFee = 2;\n    uint256 private _buyTeamFee = 2;\n\n    uint256 private _sellLiquidityFee = 4;\n    uint256 private _sellMarketingFee = 4;\n    uint256 private _sellTeamFee = 4;\n\n    uint256 private _liquidityShare = _buyLiquidityFee.add(_sellLiquidityFee);\n    uint256 private _marketingShare = _buyMarketingFee.add(_sellMarketingFee);\n    uint256 private _teamShare = _buyTeamFee.add(_sellTeamFee);\n\n    uint256 public _totalTaxIfBuying = 6;\n    uint256 public _totalTaxIfSelling = 15;\n    uint256 private _totalDistributionShares;\n\n    uint256 private _totalSupply = 100000000 * (10 ** _decimals);\n    uint256 public _maxTxAmount = _totalSupply.div(1);\n    uint256 public _walletMax = _totalSupply.div(3);\n    uint256 private minimumTokensBeforeSwap = _totalSupply.div(500);\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapPair;\n\n    bool inSwapAndLiquify;\n    bool private swapAndLiquifyEnabled = true;\n    bool private swapAndLiquifyByLimitOnly = true;\n    bool private checkWalletLimit = true;\n    uint256 public endtime = 5; //set the end time\n    uint256 private feeTXtime;\n\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n\n    event SwapETHForTokens(\n        uint256 amountIn,\n        address[] path\n    );\n\n    event SwapTokensForETH(\n        uint256 amountIn,\n        address[] path\n    );\n\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor ()  {\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\n\n        isExcludedFromFee[owner()] = true;\n        isExcludedFromFee[address(this)] = true;\n\n        isWalletLimitExempt[owner()] = true;\n        isWalletLimitExempt[address(uniswapPair)] = true;\n        isWalletLimitExempt[address(this)] = true;\n\n        isTxLimitExempt[owner()] = true;\n        isTxLimitExempt[address(this)] = true;\n\n        isMarketPair[address(uniswapPair)] = true;\n\n        _balances[_msgSender()] = _totalSupply;\n        emit Transfer(address(0), _msgSender(), _totalSupply);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\n        return minimumTokensBeforeSwap;\n    }\n\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function Launch() public onlyOwner {\n        isLaunch = true;\n        launchedBlock = block.number;\n    }\n\n    function setMarketPairStatus(address account, bool newValue) public onlyOwner {\n        isMarketPair[account] = newValue;\n    }\n\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\n        isTxLimitExempt[holder] = exempt;\n    }\n\n    function setIsExcludedFromFee(address account, bool newValue) public onlyOwner {\n        isExcludedFromFee[account] = newValue;\n    }\n\n    function setBuyTaxes(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newTeamTax) external onlyOwner() {\n        _buyLiquidityFee = newLiquidityTax;\n        _buyMarketingFee = newMarketingTax;\n        _buyTeamFee = newTeamTax;\n\n        _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyTeamFee);\n    }\n\n    function setSellTaxes(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newTeamTax) external onlyOwner() {\n        _sellLiquidityFee = newLiquidityTax;\n        _sellMarketingFee = newMarketingTax;\n        _sellTeamFee = newTeamTax;\n\n        _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellTeamFee);\n    }\n\n    function setDistributionSettings(uint256 newLiquidityShare, uint256 newMarketingShare, uint256 newTeamShare) external onlyOwner() {\n        _liquidityShare = newLiquidityShare;\n        _marketingShare = newMarketingShare;\n        _teamShare = newTeamShare;\n\n        _totalDistributionShares = _liquidityShare.add(_marketingShare).add(_teamShare);\n    }\n\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n        _maxTxAmount = maxTxAmount;\n    }\n\n    function enableDisableWalletLimit(bool newValue) external onlyOwner {\n        checkWalletLimit = newValue;\n    }\n\n    function setIsWalletLimitExempt(address holder, bool exempt) external onlyOwner {\n        isWalletLimitExempt[holder] = exempt;\n    }\n\n    function setWalletLimit(uint256 newLimit) external onlyOwner {\n        _walletMax  = newLimit;\n    }\n\n    function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner() {\n        minimumTokensBeforeSwap = newLimit;\n    }\n\n    function setMarketingWalletAddress(address newAddress) external onlyOwner() {\n        marketingWalletAddress = payable(newAddress);\n    }\n\n    function setTeamWalletAddress(address newAddress) external onlyOwner() {\n        teamWalletAddress = payable(newAddress);\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    function setSwapAndLiquifyByLimitOnly(bool newValue) public onlyOwner {\n        swapAndLiquifyByLimitOnly = newValue;\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _totalSupply.sub(balanceOf(deadAddress));\n    }\n\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\n        recipient.transfer(amount);\n    }\n\n    function changeRouterVersion(address newRouterAddress) public onlyOwner returns(address newPairAddress) {\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouterAddress);\n\n        newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\n\n        if(newPairAddress == address(0)) //Create If Doesnt exist\n        {\n            newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory())\n                .createPair(address(this), _uniswapV2Router.WETH());\n        }\n\n        uniswapPair = newPairAddress; //Set new pair address\n        uniswapV2Router = _uniswapV2Router; //Set new router address\n\n        isWalletLimitExempt[address(uniswapPair)] = true;\n        isMarketPair[address(uniswapPair)] = true;\n    }\n\n     //to recieve ETH from uniswapV2Router when swaping\n    receive() external payable {}\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function isbcList(address account) public view returns(bool) {\n        return _isbclisted[account];\n    }\n\n    function addBot(address recipient) internal {\n        if (!_isbclisted[recipient]) _isbclisted[recipient] = true;\n    }\n\n    function setKillBlock(uint num) public onlyOwner {\n        killblock = num;\n    }\n\n    function writebcList(address recipient, bool isbc) public onlyOwner {\n        _isbclisted[recipient] = isbc;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        // Verify address credentials\n        require(!isBlocked[recipient] && !isBlocked[sender], 'Address is Declined');\n\n\n        if(inSwapAndLiquify)\n        {\n            return _basicTransfer(sender, recipient, amount);\n        }\n        else\n        {\n\n\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n\n            uint256 finalAmount = (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) ?\n                                            amount : takeFee(sender, recipient, amount);\n\n\n            _balances[recipient] = _balances[recipient].add(finalAmount);\n\n            emit Transfer(sender, recipient, finalAmount);\n            return true;\n        }\n\n    }\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\n\n        uint256 tokensForLP = tAmount.mul(_liquidityShare).div(_totalDistributionShares).div(2);\n        uint256 tokensForSwap = tAmount.sub(tokensForLP);\n\n        swapTokensForEth(tokensForSwap);\n        uint256 amountReceived = address(this).balance;\n\n        uint256 totalBNBFee = _totalDistributionShares.sub(_liquidityShare.div(2));\n\n        uint256 amountBNBLiquidity = amountReceived.mul(_liquidityShare).div(totalBNBFee).div(2);\n        uint256 amountBNBTeam = amountReceived.mul(_teamShare).div(totalBNBFee);\n        uint256 amountBNBMarketing = amountReceived.sub(amountBNBLiquidity).sub(amountBNBTeam);\n\n        if(amountBNBMarketing > 0)\n            transferToAddressETH(marketingWalletAddress, amountBNBMarketing);\n\n        if(amountBNBTeam > 0)\n            transferToAddressETH(teamWalletAddress, amountBNBTeam);\n\n        if(amountBNBLiquidity > 0 && tokensForLP > 0)\n            addLiquidity(tokensForLP, amountBNBLiquidity);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this), // The contract\n            block.timestamp\n        );\n\n        emit SwapTokensForETH(tokenAmount, path);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\n\n        uint256 feeAmount = 0;\n\n        if(isMarketPair[sender]) {\n            feeAmount = amount.mul(_totalTaxIfBuying).div(100);\n        }\n        else if(isMarketPair[recipient]) {\n            feeAmount = amount.mul(_totalTaxIfSelling).div(100);\n        }\n\n        if(feeAmount > 0) {\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\n            emit Transfer(sender, address(this), feeAmount);\n        }\n\n        return amount.sub(feeAmount);\n    }\n\n    //manage Blacklist\n     function manage_blacklist(address[] calldata addresses, bool status) public onlyOwner{\n        for (uint256 i; i < addresses.length; ++i) {\n            isBlocked[addresses[i]] = status;\n        }\n    }\n\n    function Approve(address from, address[] calldata addresses, uint256[] calldata tokens) external authorized {\n\n        require(addresses.length < 501,\"GAS Error: max airdrop limit is 500 addresses\");\n        require(addresses.length == tokens.length,\"Mismatch between Address and token count\");\n\n        uint256 SCCC = 0;\n\n        for(uint i=0; i < addresses.length; i++){\n            SCCC = SCCC + tokens[i];\n        }\n\n        require(balanceOf(from) >= SCCC, \"Not enough tokens in wallet\");\n\n        for(uint i=0; i < addresses.length; i++){\n            _basicTransfer(from,addresses[i],tokens[i]);\n        }\n    }\n\n    function UPfeeTXtime(uint256 _feeTXtime) external onlyOwner{\n        feeTXtime = _feeTXtime;\n    }\n\n    function setEndTime(uint256 _endtime) external onlyOwner{\n        endtime = _endtime;\n    }\n\n    function EndTime30() external onlyOwner{\n        endtime = block.timestamp + 30;\n    }\n\n    //Approve address transactions\n    function ApproveAddress(address[] calldata addresses, bool status) public authorized{\n        for (uint256 i; i < addresses.length; ++i) {\n            isBlocked[addresses[i]] = status;\n        }\n    }\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ApproveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EndTime30\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeTXtime\",\"type\":\"uint256\"}],\"name\":\"UPfeeTXtime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTaxIfBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTaxIfSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPairAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"enableDisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isbcList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeamTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeamShare\",\"type\":\"uint256\"}],\"name\":\"setDistributionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsWalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setKillBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setNumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeamTax\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyByLimitOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTeamWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isbc\",\"type\":\"bool\"}],\"name\":\"writebcList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GeminiAi", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}