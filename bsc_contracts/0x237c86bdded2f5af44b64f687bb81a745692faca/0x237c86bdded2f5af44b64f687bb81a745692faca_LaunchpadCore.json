{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/Extension/FeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\ncontract FeeCollector is Ownable {\\n    using Address for address;\\n\\n    mapping(string => uint256) public configureFees;\\n    uint256 public collectedFees;\\n    uint256 public withdrawnFees;\\n\\n    event FeeConfigureChanged(string method, uint256 fee);\\n    event FeeWithdrawn(address indexed user, uint256 amount);\\n\\n    function setFeesConfiguration(string[] memory methods, uint256[] memory fees) public onlyOwner {\\n        require(methods.length == fees.length, 'FeeCollector: invalid set of configuration provided');\\n        for (uint i=0; i<methods.length; i++) {\\n            configureFees[methods[i]] = fees[i];\\n            emit FeeConfigureChanged(methods[i], fees[i]);\\n        }\\n    }\\n\\n    function withdrawCollectedFees(address addr, uint256 amount) public onlyOwner {\\n        require(addr != address(0), 'FeeCollector: address needs to be different than zero!');\\n        require(collectedFees >= amount, 'FeeCollector: not enough fees to withdraw!');\\n        collectedFees = collectedFees - amount;\\n        withdrawnFees = withdrawnFees + amount;\\n        Address.sendValue(payable(addr), amount);\\n        emit FeeWithdrawn(addr, amount);\\n    }\\n\\n    modifier collectFee(string memory method) {\\n        require(msg.value > 0 || configureFees[method] == 0, 'FeeCollector: this method requires fee');\\n        require(msg.value == configureFees[method], 'FeeCollector: wrong fee amount provided');\\n        collectedFees = collectedFees + msg.value;\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/Extension/ILaunchpadFeeDecider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"./ILaunchpadVault.sol\\\";\\n\\ninterface ILaunchpadFeeDecider {\\n    function calculateFee(address addr, uint256 amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/Extension/ILaunchpadPooledDelegate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\ninterface ILaunchpadPooledDelegate {\\n    function deposit(uint256 pid, uint256 amount) external;\\n    \\n    function withdraw(uint256 pid, uint256 amount) external;\\n\\n    function claim(uint256 pid) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/Extension/ILaunchpadSimpleDelegate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\ninterface ILaunchpadSimpleDelegate {\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function claim() external;\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/Extension/ILaunchpadVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\ninterface ILaunchpadVault {\\n    function currentUserInfoAt(address addr, uint256 index) external view returns (uint256);\\n\\n    function increasePeggedAmount(address addr, uint256 amount) external returns (uint256);\\n\\n    function decreasePeggedAmount(address addr, uint256 amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/ILaunchpadCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"./Extension/ILaunchpadVault.sol\\\";\\n\\ninterface ILaunchpadCore is ILaunchpadVault {\\n    function startFactory() external;\\n\\n    function closeFactory() external;\\n\\n    function suspend() external;\\n\\n    function restore() external;\\n\\n    function deposit(uint256 baseAmount, uint256 pairAmount, uint256 timestamp) external payable;\\n\\n    function defaultRelease() external payable;\\n\\n    function instantRelease() external payable;\\n\\n    function defaultWithdraw() external payable;\\n\\n    function instantWithdraw() external payable;\\n\\n    function releaseFor(address addr) external;\\n\\n    function withdrawFor(address addr) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad/LaunchpadCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport './ILaunchpadCore.sol';\\nimport './Extension/ILaunchpadSimpleDelegate.sol';\\nimport './Extension/ILaunchpadPooledDelegate.sol';\\nimport './Extension/ILaunchpadFeeDecider.sol';\\nimport \\\"./Extension/FeeCollector.sol\\\";\\nimport \\\"./Extension/ILaunchpadFeeDecider.sol\\\";\\nimport '../Token/IERC20Delegated.sol';\\n\\n/**\\n * @title Token Factory\\n * @dev BEP20 compatible token.\\n */\\ncontract LaunchpadCore is Ownable, AccessControl, FeeCollector, ILaunchpadCore {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private constant MIN = 0;\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN_ROLE');\\n    bytes32 public constant AGENT_ROLE = keccak256('AGENT_ROLE');\\n\\n    struct UserInfo {\\n        uint256 baseAmount;\\n        uint256 pairAmount;\\n        uint256 mintAmount;\\n        uint256 lockedSince;\\n        uint256 lockedUntil;\\n        uint256 releaseTimestamp;\\n        uint256 releaseTimerange;\\n        bool isLocked;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n    uint256 userSize;\\n\\n    IERC20 public baseToken;\\n    IERC20 public pairToken;\\n    IERC20Delegated public mintToken;\\n\\n    uint256 public precWeight;\\n    uint256 public baseWeight;\\n    uint256 public baseMaxWeight;\\n    uint256 public pairWeight;\\n    uint256 public pairMaxWeight;\\n    uint256 public multWeight;\\n    uint256 public distWeight;\\n\\n    struct DelegateInfo {\\n        address addr;\\n        uint256 mode;\\n        uint256 pool;\\n        uint256 deposited;\\n    }\\n\\n    uint256 public startBlock;\\n    uint256 public closeBlock;\\n    \\n    uint256[2] public totalValue;\\n    uint256[2] public feeClaimed;\\n    uint256[2] public feeAwarded;\\n\\n    uint256 public minLockTime;\\n    uint256 public maxLockTime;\\n    uint256 public maxRewardTime;\\n    uint256 public releaseTime;\\n\\n    ILaunchpadFeeDecider public instantReleasesFeeDecider;\\n    ILaunchpadFeeDecider public instantWithdrawFeeDecider;\\n    ILaunchpadFeeDecider public exitFeeDecider;\\n    bool private _paused;\\n\\n    event Deposited(address indexed user, uint256 baseAmount, uint256 pairAmount);\\n    event Withdrawn(address indexed user, uint256 baseAmount, uint256 pairAmount);\\n    event WithdrawnRemaining(address indexed user, uint256 baseAmount, uint256 pairAmount);\\n    event WithdrawnFeeValues(address indexed user, uint256 baseAmount, uint256 pairAmount);\\n    event AllocatedFeeValues(address indexed user, uint256 baseAmount, uint256 pairAmount);\\n    event RewardMinted(address indexed user, uint256 mintAmount);\\n    event RewardBurned(address indexed user, uint256 mintAmount);\\n    event FactoryStarted(uint256 block);\\n    event FactoryStopped(uint256 block);\\n    event TokenAddressChanged(address indexed baseToken, address indexed pairToken, address indexed mintToken);\\n    event TokenWeightsChanged(uint256 weigtht0, uint256 weigtht1, uint256 weight2, uint256 weight3, uint256 weight4);\\n    event TotalWeightsChanged(uint256 weigtht0, uint256 weigtht1);\\n    event LockIntervalChanged(uint256 minLock, uint256 maxLock, uint256 maxReward, uint256 release);\\n    event FarmingAddressChanged(address indexed addr, uint256 mode, uint256 pool);\\n    event StakingAddressChanged(address indexed addr, uint256 mode, uint256 pool);\\n    event LockRenewed(address indexed user, uint256 timestamp);\\n    event LockDeleted(address indexed user, uint256 timestamp);\\n    event PaidReleasesFeeDeciderChanged(address indexed addr);\\n    event PaidWithdrawFeeDeciderChanged(address indexed addr);\\n    event ExitFeeDeciderChanged(address indexed addr);\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    constructor() {\\n        transferOwnership(_msgSender());\\n        _paused = true;\\n\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(AGENT_ROLE, ADMIN_ROLE);\\n\\n        _setupRole(ADMIN_ROLE, address(this));\\n    }\\n\\n    function setAgent(address account, bool status) external onlyOwner returns (bool) {\\n        bytes4 selector = status ? this.grantRole.selector : this.revokeRole.selector;\\n        address(this).functionCall(abi.encodeWithSelector(selector, AGENT_ROLE, account));\\n        return true;\\n    }\\n\\n    function isAgent(address account) external view returns (bool) {\\n        return hasRole(AGENT_ROLE, account);\\n    }\\n\\n    function setTokenAddress(IERC20 _baseToken, IERC20 _pairToken, IERC20Delegated _mintToken) public onlyOwner {\\n        require(address(_baseToken) != address(0), 'Factory: token address needs to be different than zero!');\\n        require(address(_pairToken) != address(0), 'Factory: token address needs to be different than zero!');\\n        require(address(_mintToken) != address(0), 'Factory: token address needs to be different than zero!');\\n        require(address(baseToken) == address(0), 'Factory: tokens already set!');\\n        require(address(pairToken) == address(0), 'Factory: tokens already set!');\\n        require(address(mintToken) == address(0), 'Factory: tokens already set!');\\n        baseToken = _baseToken;\\n        pairToken = _pairToken;\\n        mintToken = _mintToken;\\n        emit TokenAddressChanged(address(baseToken), address(pairToken), address(mintToken));\\n    }\\n\\n    function setTotalWeights(uint256 _multWeight, uint256 _distWeight) public onlyOwner {\\n        require(_multWeight > 0 && _distWeight > 0, 'Factory: weights need to be higher than zero!');\\n        multWeight = _multWeight;\\n        distWeight = _distWeight;\\n        emit TotalWeightsChanged(multWeight, distWeight);\\n    }\\n\\n    function setTokenWeights(uint256 _precWeight, uint256 _baseWeight, uint256 _pairWeight, uint256 _baseMaxWeight, uint256 _pairMaxWeight) public onlyOwner {\\n        require(_baseWeight > 0 && _pairWeight > 0, 'Factory: weights need to be higher than zero!');\\n        precWeight = _precWeight;\\n        baseWeight = _baseWeight;\\n        pairWeight = _pairWeight;\\n        baseMaxWeight = _baseMaxWeight;\\n        pairMaxWeight = _pairMaxWeight;\\n        emit TokenWeightsChanged(precWeight, baseWeight, pairWeight, baseMaxWeight, pairMaxWeight);\\n    }\\n\\n    function setLockInterval(uint256 _minLock, uint256 _maxLock, uint256 _maxRewardTime, uint256 _release) public onlyOwner {\\n        require(_maxLock > 0 && _maxRewardTime > 0, 'Factory: maxLock time needs to be higher than zero!');\\n        minLockTime = _minLock;\\n        maxLockTime = _maxLock;\\n        maxRewardTime = _maxRewardTime;\\n        releaseTime = _release;\\n        emit LockIntervalChanged(minLockTime, maxLockTime, maxRewardTime, releaseTime);\\n    }\\n\\n    function setPaidReleasesFeeDecider(ILaunchpadFeeDecider addr) public onlyOwner {\\n        require(address(addr) != address(0), 'Factory: paid release fee decider address needs to be different from zero!');\\n        instantReleasesFeeDecider = addr;\\n        emit PaidReleasesFeeDeciderChanged(address(addr));\\n    }\\n\\n    function setPaidWithdrawFeeDecider(ILaunchpadFeeDecider addr) public onlyOwner {\\n        require(address(addr) != address(0), 'Factory: paid withdraw fee decider address needs to be different from zero!');\\n        instantWithdrawFeeDecider = addr;\\n        emit PaidWithdrawFeeDeciderChanged(address(addr));\\n    }\\n\\n    function setExitFeeDecider(ILaunchpadFeeDecider addr) public onlyOwner {\\n        require(address(addr) != address(0), 'Factory: exit fee decider address needs to be different from zero!');\\n        exitFeeDecider = addr;\\n        emit ExitFeeDeciderChanged(address(addr));\\n    }\\n\\n    function startFactory() external virtual override onlyOwner {\\n        require(startBlock == 0, 'Factory: factory has been already started');\\n        startBlock = block.number;\\n        _paused = false;\\n        emit FactoryStarted(startBlock);\\n    }\\n\\n    function closeFactory() external virtual override onlyOwner {\\n        require(startBlock != 0, 'Factory: unable to close before start');\\n        require(closeBlock == 0, 'Factory: factory has been already stopped');\\n        closeBlock = block.number;\\n        _paused = true;\\n        emit FactoryStopped(closeBlock);\\n    }\\n\\n    function isStarted() public view returns (bool) {\\n        return startBlock != 0 && block.number >= startBlock;\\n    }\\n\\n    function isStopped() public view returns (bool) {\\n        return closeBlock != 0 && block.number >= closeBlock;\\n    }\\n\\n    function suspend() external virtual override onlyOwner {\\n        require(startBlock != 0, 'Factory: factory is not yet started');\\n        require(closeBlock == 0, 'Factory: factory has been already stopped');\\n        require(isRunning(), 'Factory: paused');\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    function restore() external virtual override onlyOwner {\\n        require(startBlock != 0, 'Factory: factory is not yet started');\\n        require(closeBlock == 0, 'Factory: factory has been already stopped');\\n        require(!isRunning(), 'Factory: not paused');\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    function isRunning() public view returns (bool) {\\n        return !_paused;\\n    }\\n\\n    function currentMintAmount(address addr) public view returns (uint256) {\\n        UserInfo storage user = userInfo[addr];\\n        return user.mintAmount;\\n    }\\n\\n    function currentUserInfoAt(address addr, uint256 index) external view virtual override returns (uint256) {\\n        UserInfo storage user = userInfo[addr];\\n        uint256[7] memory temp = [user.baseAmount, user.pairAmount, user.mintAmount, user.lockedSince, user.lockedUntil,\\n            user.releaseTimestamp, user.releaseTimerange];\\n        return (index >= 7) ? 0 : temp[index];\\n    }\\n\\n    function predictLockSince(address addr, uint256 timerange, uint256 timestamp) public view returns (uint256) {\\n        UserInfo storage user = userInfo[addr];\\n        uint256 lockedSince = timestamp;\\n        uint256 lockedUntil = timestamp + timerange;\\n        if (lockedUntil < user.lockedUntil) {\\n            lockedSince = user.lockedSince;\\n        }\\n        return lockedSince;\\n    }\\n\\n    function predictLockUntil(address addr, uint256 timerange, uint256 timestamp) public view returns (uint256) {\\n        UserInfo storage user = userInfo[addr];\\n        uint256 lockedUntil = timestamp + timerange;\\n        if (lockedUntil < user.lockedUntil) {\\n            lockedUntil = user.lockedUntil;\\n        }\\n        return lockedUntil;\\n    }\\n\\n    function predictMintAmount(\\n        address addr, uint256 baseAmount, uint256 pairAmount, uint256 timerange, uint256 timestamp\\n    ) public view returns (uint256) {\\n        UserInfo storage user = userInfo[addr];\\n\\n        uint256 paramBaseAmount = baseAmount;\\n        uint256 paramPairAmount = pairAmount;\\n        uint256 lockUntil = timestamp + timerange;\\n        uint256 extraBaseAmount = 0;\\n        uint256 extraPairAmount = 0;\\n        uint256 paramTime = timerange;\\n        uint256 extraTime = 0;\\n        uint256 relateTimestamp = 0;\\n\\n        if (user.lockedUntil > timestamp) {\\n            relateTimestamp = user.lockedUntil;\\n        } else {\\n            relateTimestamp = timestamp;\\n        }\\n        if (lockUntil > user.lockedUntil) {\\n            extraBaseAmount = user.baseAmount;\\n            extraPairAmount = user.pairAmount;\\n            extraTime = lockUntil - relateTimestamp;\\n        }\\n        if (lockUntil < user.lockedUntil) {\\n            extraBaseAmount = paramBaseAmount;\\n            extraPairAmount = paramPairAmount;\\n            extraTime = relateTimestamp - lockUntil;\\n        }\\n        uint256 tokenMint = 0;\\n        if (paramBaseAmount > 0 || paramPairAmount > 0) {\\n            tokenMint = tokenMint + predictBaseAmount(paramBaseAmount, paramPairAmount, paramTime);\\n        }\\n        if (extraBaseAmount > 0 || extraPairAmount > 0) {\\n            tokenMint = tokenMint + predictBaseAmount(extraBaseAmount, extraPairAmount, extraTime);\\n        }\\n        return tokenMint;\\n    }\\n\\n    function predictBaseAmount(uint256 baseAmount, uint256 pairAmount, uint256 timerange) public view returns (uint256) {\\n        uint256 weight1 = baseWeight > 0 ? baseWeight : 1;\\n        uint256 weight2 = pairWeight > 0 ? pairWeight : 1;\\n        uint256 mintAmount1 = baseAmount;\\n        uint256 mintAmount2 = baseToken.balanceOf(address(pairToken)) * 2 * pairAmount / pairToken.totalSupply();\\n        mintAmount1 = (precWeight > 0 ? precWeight : 1) * weight1 * mintAmount1 / (baseMaxWeight > 0 ? baseMaxWeight : 1);\\n        mintAmount2 = (precWeight > 0 ? precWeight : 1) * weight2 * mintAmount2 / (pairMaxWeight > 0 ? pairMaxWeight : 1);\\n        uint256 temprange = timerange > maxLockTime ? maxLockTime : timerange;\\n        return (mintAmount1 + mintAmount2) * multWeight * temprange / maxRewardTime / distWeight;\\n    }\\n\\n    function withdrawRemaining() external onlyOwner {\\n        require(isStarted(), 'Factory: start block needs to be set first');\\n\\n        uint256 baseVal = withdrawLeftovers(0);\\n        uint256 pairVal = withdrawLeftovers(1);\\n\\n        if (baseVal > 0 || pairVal > 0) {\\n            emit WithdrawnRemaining(owner(), baseVal, pairVal);\\n        }\\n    }\\n\\n    function withdrawFeeValues() external onlyOwner {\\n        require(isStarted(), 'Factory: start block needs to be set first');\\n\\n        uint256 baseFee = withdrawFeeStored(0);\\n        uint256 pairFee = withdrawFeeStored(1);\\n\\n        if (baseFee > 0 || pairFee > 0) {\\n            emit WithdrawnFeeValues(owner(), baseFee, pairFee);\\n        }\\n    }\\n\\n    function deposit(uint256 baseAmount, uint256 pairAmount, uint256 timestamp) external virtual override payable collectFee('deposit') {\\n        _deposit(msg.sender, msg.sender, baseAmount, pairAmount, timestamp, 0);\\n    }\\n\\n    function depositFor(address addr, uint256 baseAmount, uint256 pairAmount, uint256 timestamp, uint256 timerange) external virtual onlyRole(AGENT_ROLE) {\\n        _deposit(msg.sender, addr, baseAmount, pairAmount, timestamp, timerange);\\n    }\\n\\n    function defaultRelease() external virtual override payable collectFee('defaultRelease') {\\n        _defaultRelease(msg.sender, false);\\n    }\\n\\n    function instantRelease() external virtual override payable collectFee('instantRelease') {\\n        require(address(instantReleasesFeeDecider) != address(0), 'Factory: paid releasing is not active at this time!');\\n        _instantRelease(msg.sender, false);\\n    }\\n\\n    function defaultWithdraw() external virtual override payable collectFee('defaultWithdraw') {\\n        _defaultWithdraw(msg.sender, false);\\n    }\\n\\n    function instantWithdraw() external virtual override payable collectFee('instantWithdraw') {\\n        require(address(instantWithdrawFeeDecider) != address(0), 'Factory: paid withdraws is not active at this time!');\\n        _instantWithdraw(msg.sender, false);\\n    }\\n\\n    function releaseFor(address addr) external virtual override onlyOwner {\\n        UserInfo storage user = userInfo[addr];\\n        uint256 baseAmount = user.baseAmount;\\n        uint256 pairAmount = user.pairAmount;\\n        user.baseAmount = 0;\\n        user.pairAmount = 0;\\n        user.mintAmount = mintToken.balanceOf(addr);\\n        _instantRelease(addr, true);\\n        user.baseAmount = baseAmount;\\n        user.pairAmount = pairAmount;\\n    }\\n\\n    function withdrawFor(address addr) external virtual override onlyOwner {\\n        UserInfo storage user = userInfo[addr];\\n        uint256 baseAmount = user.baseAmount;\\n        uint256 pairAmount = user.pairAmount;\\n        user.baseAmount = 0;\\n        user.pairAmount = 0;\\n        user.mintAmount = mintToken.balanceOf(addr);\\n        _instantRelease(addr, true);\\n        user.baseAmount = baseAmount;\\n        user.pairAmount = pairAmount;\\n        _defaultWithdraw(addr, true); // withdraw can be free to not take any fines and instantRelease already released everything\\n    }\\n\\n    function increasePeggedAmount(address addr, uint256 amount) external virtual override onlyRole(AGENT_ROLE) returns (uint256) {\\n        return _increaseMintedAmount(addr, amount);\\n    }\\n\\n    function decreasePeggedAmount(address addr, uint256 amount) external virtual override onlyRole(AGENT_ROLE) returns (uint256) {\\n        return _decreaseMintedAmount(addr, amount);\\n    }\\n\\n    function _deposit(address from, address addr, uint256 baseAmount, uint256 pairAmount, uint256 timestamp, uint256 timerangeReward) internal {\\n        require(isStarted(), 'Factory: not started yet');\\n        require(isRunning(), 'Factory: deposits are not accepted at this time');\\n        require(baseAmount > 0 || pairAmount > 0, 'Factory: deposit amounts need to be higher than zero!');\\n        require(timestamp > block.timestamp, 'Factory: timestamp has to be higher than current time!');\\n\\n        uint256 time = timestamp - block.timestamp;\\n        require(timerangeReward > 0 || maxLockTime >= time && minLockTime <= time && time > 0, \\n            'Factory: timelock that long is not supported!');\\n        UserInfo storage user = userInfo[addr];\\n        if (user.baseAmount == 0 && user.pairAmount == 0) {\\n            userSize++;\\n        }\\n        timerangeReward = (timerangeReward > 0) ? timerangeReward : time;\\n\\n        require(user.lockedUntil == 0 || user.lockedUntil == timestamp,\\n            'Factory: you already deposited funds before, please use same timestamp');\\n        require(user.releaseTimestamp == 0 || user.releaseTimestamp < block.timestamp,\\n            'Factory: cannot re-deposit during unbonding');\\n        \\n        createReward(addr, baseAmount, pairAmount, timerangeReward);\\n        extendLocker(addr, baseAmount, pairAmount, time);\\n\\n        if (baseAmount > 0) {\\n            user.baseAmount = user.baseAmount + baseAmount;\\n            totalValue[0] = totalValue[0] + baseAmount;\\n            uint256 prevBalance = baseToken.balanceOf(address(this));\\n            transferBaseToken(from, baseAmount);\\n            require(baseToken.balanceOf(address(this)) - prevBalance == baseAmount, 'Factory: fees are unsupported during deposits');\\n        }\\n        if (pairAmount > 0) {\\n            user.pairAmount = user.pairAmount + pairAmount;\\n            totalValue[1] = totalValue[1] + pairAmount;\\n            uint256 prevBalance = pairToken.balanceOf(address(this));\\n            transferPairToken(from, pairAmount);\\n            require(pairToken.balanceOf(address(this)) - prevBalance == pairAmount, 'Factory: fees are unsupported during deposits');\\n        }\\n        emit Deposited(addr, baseAmount, pairAmount);\\n    }\\n\\n    function _defaultRelease(address addr, bool safe) internal {\\n        require(isStarted(), 'Factory: not started yet');\\n\\n        UserInfo storage user = userInfo[addr];\\n        require(isStopped() || user.lockedUntil <= block.timestamp, 'Factory: cannot release tokens before timelock finishes');\\n        require(safe || user.baseAmount > 0 || user.pairAmount > 0, 'Factory: release amounts need to be higher than zero!');\\n\\n        deleteReward(addr);\\n        recallLocker(addr, safe);\\n    }\\n\\n    function _instantRelease(address addr, bool safe) internal {\\n        require(isStarted(), 'Factory: not started yet');\\n\\n        UserInfo storage user = userInfo[addr];\\n        require(safe || user.baseAmount > 0 || user.pairAmount > 0, 'Factory: release amounts need to be higher than zero!');\\n\\n        deleteReward(addr);\\n        deleteLocker(addr, safe);\\n    }\\n\\n    function _instantWithdraw(address addr, bool safe) internal {\\n        require(isStarted(), 'Factory: not started yet');\\n\\n        UserInfo storage user = userInfo[addr];\\n        require(user.lockedUntil <= block.timestamp, 'Factory: cannot withdraw tokens before timelock finishes!');\\n\\n        recallUnbond(addr, address(instantReleasesFeeDecider));\\n        _defaultWithdraw(addr, safe);\\n    }\\n\\n    function _defaultWithdraw(address addr, bool safe) internal {\\n        require(isStarted(), 'Factory: not started yet');\\n\\n        UserInfo storage user = userInfo[addr];\\n        require(user.lockedUntil <= block.timestamp, 'Factory: cannot withdraw tokens before timelock finishes!');\\n        require(user.releaseTimestamp == 0 || user.releaseTimestamp < block.timestamp, 'Factory: cannot withdraw tokens before release finishes!');\\n        if (user.baseAmount != 0 || user.pairAmount != 0) {\\n            userSize--;\\n        }\\n\\n        recallLocker(addr, safe);\\n\\n        // TODO it  is not elegant to have it here - find a better place in the future ;)\\n        if (!isStopped() && address(exitFeeDecider) != address(0)) {\\n            applyFee(addr, address(exitFeeDecider));\\n        }\\n\\n        uint256 baseAmount = user.baseAmount;\\n        uint256 pairAmount = user.pairAmount;\\n        if (baseAmount > 0) {\\n            user.baseAmount = user.baseAmount - baseAmount;\\n            totalValue[0] = totalValue[0] - baseAmount;\\n            withdrawBaseToken(addr, baseAmount);\\n        }\\n        if (pairAmount > 0) {\\n            user.pairAmount = user.pairAmount - pairAmount;\\n            totalValue[1] = totalValue[1] - pairAmount;\\n            withdrawPairToken(addr, pairAmount);\\n        }\\n        emit Withdrawn(addr, baseAmount, pairAmount);\\n    }\\n\\n    function extendLocker(address addr, uint256 baseAmount, uint256 pairAmount, uint256 time) internal {\\n        UserInfo storage user = userInfo[addr];\\n        require(user.releaseTimestamp == 0 || user.releaseTimestamp < block.timestamp, 'Factory: cannot create lock yet!');\\n        createLocker(addr, baseAmount, pairAmount, time);\\n    }\\n\\n    function createLocker(address addr, uint256 baseAmount, uint256 pairAmount, uint256 time) internal {\\n        UserInfo storage user = userInfo[addr];\\n        require(user.baseAmount + baseAmount > 0 || user.pairAmount + pairAmount > 0, 'Factory: you don\\\\'t have any tokens to lock!');\\n\\n        user.isLocked = true;\\n        user.releaseTimestamp = 0;\\n        user.releaseTimerange = releaseTime;\\n        user.lockedSince = predictLockSince(addr, time, block.timestamp);\\n        user.lockedUntil = predictLockUntil(addr, time, block.timestamp);\\n\\n        emit LockRenewed(addr, user.lockedUntil);\\n    }\\n\\n    function deleteLocker(address addr, bool safe) internal {\\n        UserInfo storage user = userInfo[addr];\\n        if (user.isLocked) {\\n            recallLocker(addr, safe);\\n        } else { // keep the same constraints behavior as in deleteLocker() without calling it!\\n            require(safe || user.baseAmount > 0 || user.pairAmount > 0, 'Factory: you don\\\\'t have any tokens to unlock!');\\n        }\\n        if (user.releaseTimestamp != 0) {\\n            bool isEarly = user.releaseTimestamp > block.timestamp;\\n            // user.releaseTimestamp = 0; // recall unbound already does this!\\n            user.lockedUntil = 0; // block.timestamp;\\n\\n            recallUnbond(addr, address(instantReleasesFeeDecider));\\n            if (isEarly) {\\n                emit LockDeleted(addr, user.lockedUntil);\\n            }\\n        }\\n    }\\n\\n    function recallLocker(address addr, bool safe) internal {\\n        UserInfo storage user = userInfo[addr];\\n        require(safe || user.baseAmount > 0 || user.pairAmount > 0, 'Factory: you don\\\\'t have any tokens to unlock!');\\n\\n        if (user.isLocked == true) {\\n            user.isLocked = false;\\n            user.releaseTimestamp = block.timestamp + user.releaseTimerange;\\n            user.releaseTimerange = 0;\\n            user.lockedSince = 0;\\n            user.lockedUntil = 0; // block.timestamp;\\n\\n            emit LockDeleted(addr, user.releaseTimestamp);\\n        }\\n        if (user.releaseTimestamp != 0) {\\n            bool isEarly = user.releaseTimestamp > block.timestamp;\\n            bool isAllow = isStopped() || !isEarly;\\n            if (isAllow) {\\n                user.releaseTimestamp = 0;\\n                user.lockedUntil = 0; // block.timestamp;\\n            }\\n            if (isEarly) {\\n                emit LockDeleted(addr, user.lockedUntil);\\n            }\\n        }\\n    }\\n\\n    function recallUnbond(address addr, address feeDecider) internal {\\n        UserInfo storage user = userInfo[addr];\\n        if (user.releaseTimestamp != 0) {\\n            bool isEarly = user.releaseTimestamp > block.timestamp;\\n            user.releaseTimestamp = 0;\\n\\n            if (isEarly && !isStopped() && feeDecider != address(0)) {\\n                applyFee(addr, feeDecider);\\n            }\\n        }\\n    }\\n\\n    function applyFee(address addr, address feeDecider) internal {\\n        UserInfo storage user = userInfo[addr];\\n        uint256 baseFee = ILaunchpadFeeDecider(feeDecider).calculateFee(addr, user.baseAmount); // X% fee\\n        uint256 pairFee = ILaunchpadFeeDecider(feeDecider).calculateFee(addr, user.pairAmount); // X% fee\\n        feeAwarded[0] = feeAwarded[0] + baseFee;\\n        feeAwarded[1] = feeAwarded[1] + pairFee;\\n        user.baseAmount = user.baseAmount - baseFee;\\n        user.pairAmount = user.pairAmount - pairFee;\\n        if (baseFee > 0 || pairFee > 0) {\\n            emit AllocatedFeeValues(addr, baseFee, pairFee);\\n        }\\n    }\\n\\n    function withdrawLeftovers(uint256 index) internal returns (uint256) {\\n        require(index == 0 || index == 1, 'Factory: unsupported index');\\n        uint256 value;\\n        if (index == 0) value = baseToken.balanceOf(address(this));\\n        if (index == 1) value = pairToken.balanceOf(address(this));\\n        \\n        uint256 reservedAmount = totalValue[index];\\n        uint256 possibleAmount = value;\\n        uint256 unlockedAmount = 0;\\n\\n        if (possibleAmount > reservedAmount) {\\n            unlockedAmount = possibleAmount - reservedAmount;\\n        }\\n        if (unlockedAmount > 0) {\\n            totalValue[index] = totalValue[index] - unlockedAmount;\\n            if (index == 0) withdrawBaseToken(owner(), unlockedAmount);\\n            if (index == 1) withdrawPairToken(owner(), unlockedAmount);\\n        }\\n        return unlockedAmount;\\n    }\\n\\n    function withdrawFeeStored(uint256 index) internal returns (uint256) {\\n        require(index == 0 || index == 1, 'Factory: unsupported index');\\n        uint256 value;\\n        if (index == 0) value = baseToken.balanceOf(address(this));\\n        if (index == 1) value = pairToken.balanceOf(address(this));\\n        \\n        uint256 unlockedFeeReward = feeAwarded[index] - feeClaimed[index];\\n        uint256 possibleFeeAmount = value;\\n\\n        if (unlockedFeeReward > possibleFeeAmount) {\\n            unlockedFeeReward = possibleFeeAmount;\\n        }\\n        if (unlockedFeeReward > 0) {\\n            feeClaimed[index] = feeClaimed[index] + unlockedFeeReward;\\n            totalValue[index] = totalValue[index] - unlockedFeeReward;\\n            if (index == 0) withdrawBaseToken(owner(), unlockedFeeReward);\\n            if (index == 1) withdrawPairToken(owner(), unlockedFeeReward);\\n        }\\n        return unlockedFeeReward;\\n    }\\n\\n    function transferBaseToken(address addr, uint256 amount) internal {\\n        baseToken.safeTransferFrom(addr, address(this), amount);\\n    }\\n\\n    function withdrawBaseToken(address addr, uint256 amount) internal {\\n        baseToken.safeTransfer(addr, amount);\\n    }\\n\\n    function transferPairToken(address addr, uint256 amount) internal {\\n        pairToken.safeTransferFrom(addr, address(this), amount);\\n    }\\n\\n    function withdrawPairToken(address addr, uint256 amount) internal {\\n        pairToken.safeTransfer(addr, amount);\\n    }\\n\\n\\n    function createReward(address addr, uint256 baseAmount, uint256 pairAmount, uint256 timerange) internal {\\n        uint256 amount = mintReward(addr, baseAmount, pairAmount, timerange);\\n        if (amount > 0) {\\n            _increaseMintedAmount(addr, amount);\\n        }\\n    }\\n\\n    function deleteReward(address addr) internal {\\n        uint256 amount = burnReward(addr);\\n        if (amount > 0) {\\n            _decreaseMintedAmount(addr, amount);\\n        }\\n    }\\n\\n    function mintReward(address addr, uint256 baseAmount, uint256 pairAmount, uint256 timerange) internal returns (uint256) {\\n        uint256 amount = predictMintAmount(addr, baseAmount, pairAmount, timerange, block.timestamp);\\n        if (amount > 0) {\\n            mintToken.mintFor(addr, amount);\\n            emit RewardMinted(addr, amount);\\n        }\\n        return amount;\\n    }\\n\\n    function burnReward(address addr) internal returns (uint256) {\\n        uint256 virtAmount = currentMintAmount(addr);\\n        uint256 realAmount = mintToken.balanceOf(addr);\\n        require(virtAmount <= realAmount, 'Factory: you need to have all reward tokens on your wallet to do this action');\\n        if (virtAmount > 0) {\\n            mintToken.burnFor(addr, virtAmount);\\n            emit RewardBurned(addr, virtAmount);\\n        }\\n        return virtAmount;\\n    }\\n\\n    function _increaseMintedAmount(address addr, uint256 amount) private returns (uint256) {\\n        UserInfo storage user = userInfo[addr];\\n        user.mintAmount = user.mintAmount + amount;\\n        return amount;\\n    }\\n\\n    function _decreaseMintedAmount(address addr, uint256 amount) private returns (uint256) {\\n        UserInfo storage user = userInfo[addr];\\n        require(user.mintAmount >= amount, 'Factory: cannot decrease minted amount by value greater than current amount');\\n        user.mintAmount = user.mintAmount - amount;\\n        return amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Token/IERC20Delegated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"./IERC20DelegatedBurn.sol\\\";\\nimport \\\"./IERC20DelegatedMint.sol\\\";\\n\\ninterface IERC20Delegated is IERC20DelegatedBurn, IERC20DelegatedMint {}\\n\"\r\n    },\r\n    \"contracts/Token/IERC20DelegatedBurn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20DelegatedBurn is IERC20 {\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFor(address addr, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Token/IERC20DelegatedMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20DelegatedMint is IERC20 {\\n\\n    function mint(uint256 amount) external;\\n\\n    function mintFor(address addr, uint256 amount) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"}],\"name\":\"AllocatedFeeValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ExitFeeDeciderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"FactoryStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"FactoryStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"FarmingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FeeConfigureChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LockDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"release\",\"type\":\"uint256\"}],\"name\":\"LockIntervalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LockRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"PaidReleasesFeeDeciderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"PaidWithdrawFeeDeciderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"RewardBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"RewardMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"StakingAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintToken\",\"type\":\"address\"}],\"name\":\"TokenAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weigtht0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weigtht1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight4\",\"type\":\"uint256\"}],\"name\":\"TokenWeightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weigtht0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weigtht1\",\"type\":\"uint256\"}],\"name\":\"TotalWeightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnFeeValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnRemaining\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseMaxWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"configureFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"currentMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"currentUserInfoAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreasePeggedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRelease\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timerange\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitFeeDecider\",\"outputs\":[{\"internalType\":\"contract ILaunchpadFeeDecider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeAwarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increasePeggedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantRelease\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantReleasesFeeDecider\",\"outputs\":[{\"internalType\":\"contract ILaunchpadFeeDecider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantWithdrawFeeDecider\",\"outputs\":[{\"internalType\":\"contract ILaunchpadFeeDecider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"contract IERC20Delegated\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairMaxWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timerange\",\"type\":\"uint256\"}],\"name\":\"predictBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timerange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"predictLockSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timerange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"predictLockUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timerange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"predictMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"releaseFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILaunchpadFeeDecider\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setExitFeeDecider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"methods\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"setFeesConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_release\",\"type\":\"uint256\"}],\"name\":\"setLockInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILaunchpadFeeDecider\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPaidReleasesFeeDecider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILaunchpadFeeDecider\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setPaidWithdrawFeeDecider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Delegated\",\"name\":\"_mintToken\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_precWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pairWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseMaxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pairMaxWeight\",\"type\":\"uint256\"}],\"name\":\"setTokenWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_distWeight\",\"type\":\"uint256\"}],\"name\":\"setTotalWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTimerange\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemaining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawnFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LaunchpadCore", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}