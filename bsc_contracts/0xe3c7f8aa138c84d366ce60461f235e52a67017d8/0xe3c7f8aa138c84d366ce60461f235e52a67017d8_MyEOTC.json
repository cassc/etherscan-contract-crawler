{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.4.24 <0.9.0;\r\n\r\ncontract TRC20 {\r\n       function transfer(address recipient, uint256 amount) public returns (bool);\r\n       function transferFrom(address sender, address recipient, uint256 amount) public returns (bool);\r\n       function balanceOf(address account) public returns (uint256);\r\n    }\r\ncontract MyEOTC {\r\n  address owner;\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  struct order {\r\n      address ads;\r\n      uint256 order_amount;\r\n      uint coin;\r\n  }\r\n  struct order_out {\r\n      address ads;\r\n      address ads_out;\r\n      uint256 order_amount;\r\n      uint coin;\r\n  }\r\n  struct order_out0 {\r\n      address ads;\r\n      address ads_out;\r\n      uint256 order_amount;\r\n      uint coin;\r\n      string oid;\r\n  }\r\n  struct airData{\r\n      uint256 airNum;\r\n  }\r\n \r\n  mapping(uint => address)tradingCoins;\r\n\r\n  mapping(string => order) orderMapping;\r\n \r\n  mapping(string => order_out0) orderMapping_out;\r\n\r\n  mapping(string => order_out) order_outMapping;\r\n\r\n  mapping(string => order) arbMapping;\r\n\r\n  mapping(address => airData) airMapping;\r\n  \r\n  constructor() public{\r\n    owner = msg.sender;\r\n  }\r\n  \r\n\r\n function transferIn(uint256 amount,string orderID,uint coinID)public returns(bool){\r\n    TRC20 usdt = TRC20(tradingCoins[coinID]);\r\n    require(usdt.transferFrom(msg.sender,address(this), amount));\r\n    order memory ors=order(msg.sender,amount,coinID);\r\n    orderMapping[orderID]=ors;\r\n    return true;\r\n }\r\n\r\n function transferAdd(uint256 amount,string orderID,uint coinID)public returns(bool){\r\n    require(msg.sender==orderMapping[orderID].ads && coinID==orderMapping[orderID].coin);\r\n    TRC20 usdt = TRC20(tradingCoins[coinID]);\r\n    require(usdt.transferFrom(msg.sender,address(this), amount));\r\n    orderMapping[orderID].order_amount+=amount;\r\n    return true;\r\n }\r\n \r\n function transferOut(string orderID,uint256 amount,uint coinID)public returns(bool){\r\n    uint256 amount1=orderMapping[orderID].order_amount;\r\n    if(msg.sender==orderMapping[orderID].ads && amount<=amount1 && coinID==orderMapping[orderID].coin){\r\n      TRC20 usdt = TRC20(tradingCoins[coinID]);\r\n      usdt.transfer(msg.sender, amount);\r\n      orderMapping[orderID].order_amount=amount1-amount;\r\n      return true;\r\n    }\r\n }\r\n\r\n function transferIn00(uint256 amount,string orderID,string oid,uint coinID,address orderads)\r\n public returns(bool){\r\n    uint256 amount1=orderMapping[oid].order_amount;\r\n    require(msg.sender==orderMapping[oid].ads && amount<=amount1 && coinID==orderMapping[oid].coin);\r\n    orderMapping[oid].order_amount=amount1-amount;\r\n    order_out0 memory ors=order_out0(msg.sender,orderads,amount,coinID,oid);\r\n    orderMapping_out[orderID]=ors;\r\n    return true;\r\n }\r\n\r\n function transferIn0(uint256 amount,string orderID,address orderads,string oid,uint coinID)\r\n public returns(bool){\r\n    uint256 amount1=orderMapping[oid].order_amount;\r\n    require(orderads==orderMapping[oid].ads && amount<=amount1 && coinID==orderMapping[oid].coin);\r\n    orderMapping[oid].order_amount=amount1-amount;\r\n    order_out0 memory ors=order_out0(orderads,msg.sender,amount,coinID,oid);\r\n    orderMapping_out[orderID]=ors;\r\n    return true;\r\n }\r\n\r\n\r\n function transferIn01(string orderID) public returns(bool){\r\n    uint256 amount1=orderMapping_out[orderID].order_amount;\r\n    require(amount1>0 && (msg.sender==orderMapping_out[orderID].ads_out || msg.sender==owner));\r\n     orderMapping_out[orderID].order_amount=0;\r\n    string storage oid=orderMapping_out[orderID].oid;   \r\n    orderMapping[oid].order_amount+=amount1;\r\n    return true;\r\n }\r\n\r\n\r\n function transferOutfor(string orderID,uint256 amount,uint coinID)public returns(bool){\r\n    uint256 amount1=orderMapping_out[orderID].order_amount;\r\n    if(msg.sender==orderMapping_out[orderID].ads && amount<=amount1 &&\r\n     coinID==orderMapping_out[orderID].coin){\r\n      TRC20 usdt = TRC20(tradingCoins[coinID]);\r\n      require(usdt.transfer(orderMapping_out[orderID].ads_out, amount));\r\n      orderMapping_out[orderID].order_amount=amount1-amount;\r\n      return true;\r\n    }\r\n }\r\n \r\n\r\n function transferIn1(uint256 amount,string orderID,address orderads,uint coinID)\r\n public returns(bool){\r\n    TRC20 usdt = TRC20(tradingCoins[coinID]);\r\n    require(usdt.transferFrom(msg.sender,address(this), amount));\r\n    order_out memory ors=order_out(msg.sender,orderads,amount,coinID);\r\n    order_outMapping[orderID]=ors;\r\n    return true;\r\n }\r\n\r\n\r\n function transferOutfor1(string orderID,uint256 amount,uint coinID)public returns(bool){\r\n    uint256 amount1=order_outMapping[orderID].order_amount;\r\n    if(msg.sender==order_outMapping[orderID].ads && amount<=amount1 && \r\n     coinID==order_outMapping[orderID].coin){\r\n      TRC20 usdt = TRC20(tradingCoins[coinID]);\r\n      require(usdt.transfer(order_outMapping[orderID].ads_out, amount));\r\n      order_outMapping[orderID].order_amount=amount1-amount;\r\n      return true;\r\n    }\r\n }\r\n\r\n\r\n function setTradingCoins(uint coinID,address _tokenAddress) onlyOwner public{\r\n  tradingCoins[coinID]=_tokenAddress;\r\n }\r\n\r\n\r\n function SetOrders(uint stp,string oid,address ads,uint256 amount) \r\n  onlyOwner public{\r\n    if(stp==1){\r\n      orderMapping[oid].order_amount=amount;\r\n    }else if(stp==2){\r\n      order_outMapping[oid].ads_out=ads;\r\n      order_outMapping[oid].order_amount=amount;\r\n    }\r\n    else{\r\n      orderMapping_out[oid].ads_out=ads;\r\n      orderMapping_out[oid].order_amount=amount;\r\n    }\r\n }\r\n\r\n\r\n function arbMsg(uint256 amount,string orderID,address _ads,uint coinID) onlyOwner public{\r\n    order memory ors=order(_ads,amount,coinID);\r\n    arbMapping[orderID]=ors;\r\n }\r\n\r\n\r\n function arbMsgOut(string orderID,uint256 amount)public returns(bool){\r\n    uint256 amount1=arbMapping[orderID].order_amount;\r\n    if(msg.sender==arbMapping[orderID].ads && amount<=amount1){\r\n      TRC20 usdt = TRC20(tradingCoins[arbMapping[orderID].coin]);\r\n      require(usdt.transfer(msg.sender, amount));\r\n      arbMapping[orderID].order_amount=amount1-amount;\r\n      return true;\r\n    }\r\n }\r\n\r\n\r\n function airMsg(address[] _ads,uint256[] _amount,string uid) public returns(bool){\r\n    require(_ads.length > 0 && _amount.length > 0);\r\n    if(msg.sender==arbMapping[uid].ads || msg.sender==owner){\r\n      for(uint j = 0; j < _ads.length; j++){\r\n        airData memory air=airData(_amount[j]);\r\n        airMapping[_ads[j]]=air;\r\n     }\r\n    }\r\n    return true;\r\n }\r\n\r\n\r\n function airMsgOut(address _ads)public returns(bool){\r\n    uint256 amount=airMapping[msg.sender].airNum;\r\n    if(amount>0){\r\n      TRC20 eotc = TRC20(_ads);\r\n      eotc.transfer(msg.sender, amount);\r\n      airMapping[msg.sender].airNum=0;\r\n      return true;\r\n    }\r\n }\r\n\r\n\r\n function AirTransfer(address[] _recipients, uint256[] _values, string uid,address _tokenAddress) \r\n  public returns (bool) {\r\n    require(_recipients.length > 0 && _values.length > 0);\r\n    if(msg.sender==arbMapping[uid].ads || msg.sender==owner){\r\n    TRC20 token = TRC20(_tokenAddress);\r\n    for(uint j = 0; j < _recipients.length; j++){\r\n        token.transfer(_recipients[j], _values[j]);\r\n     }\r\n     return true;\r\n    }\r\n } \r\n\r\n function transferCoin(uint256 amount,address _tokenAddress)public{\r\n    TRC20 usdt = TRC20(_tokenAddress);\r\n    usdt.transferFrom(msg.sender,address(this), amount);\r\n  }\r\n\r\n  function transferToken(address ads,uint256 amount,address _tokenAddress) onlyOwner public{\r\n    TRC20 usdt = TRC20(_tokenAddress);\r\n    usdt.transfer(ads, amount);\r\n  }\r\n\r\n function withdrawCoin(address _tokenAddress,uint256 _num) onlyOwner public { \r\n    _tokenAddress.transfer(_num);\r\n }\r\n\r\n function withdrawToken(address _tokenAddress) onlyOwner public { \r\n    TRC20 token = TRC20(_tokenAddress);\r\n    token.transfer(owner, token.balanceOf(this));\r\n }\r\n\r\n function getInfo_coins(uint coinID)public view returns(address){\r\n  return (tradingCoins[coinID]);\r\n }\r\n\r\n function getInfo_order(string orderID)public view returns (address, uint256,uint){\r\n    return (orderMapping[orderID].ads,orderMapping[orderID].order_amount,orderMapping[orderID].coin);\r\n }\r\n  \r\n function getInfo_arb(string orderID)public view returns (address, uint256){\r\n    return (arbMapping[orderID].ads,arbMapping[orderID].order_amount);\r\n }\r\n \r\n function getInfo_orderOut(string orderID)public view returns (address,uint256, address,uint){\r\n    return (order_outMapping[orderID].ads,order_outMapping[orderID].order_amount,\r\n    order_outMapping[orderID].ads_out,order_outMapping[orderID].coin);\r\n }\r\n\r\n function getInfo_Out(string orderID)public view returns (address,uint256, address,uint,string){\r\n    return (orderMapping_out[orderID].ads,orderMapping_out[orderID].order_amount,\r\n    orderMapping_out[orderID].ads_out,orderMapping_out[orderID].coin,orderMapping_out[orderID].oid);\r\n }\r\n \r\n function getInfo_air(address ads)public view returns (uint256){\r\n    return (airMapping[ads].airNum);\r\n }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"coinID\",\"type\":\"uint256\"}],\"name\":\"transferOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"coinID\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTradingCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stp\",\"type\":\"uint256\"},{\"name\":\"oid\",\"type\":\"string\"},{\"name\":\"ads\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderID\",\"type\":\"string\"}],\"name\":\"transferIn01\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"coinID\",\"type\":\"uint256\"}],\"name\":\"transferAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderID\",\"type\":\"string\"}],\"name\":\"getInfo_arb\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"withdrawCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"coinID\",\"type\":\"uint256\"}],\"name\":\"transferOutfor1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderID\",\"type\":\"string\"}],\"name\":\"getInfo_orderOut\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"transferCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"_ads\",\"type\":\"address\"},{\"name\":\"coinID\",\"type\":\"uint256\"}],\"name\":\"arbMsg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ads\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"name\":\"uid\",\"type\":\"string\"}],\"name\":\"airMsg\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ads\",\"type\":\"address\"}],\"name\":\"getInfo_air\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderID\",\"type\":\"string\"}],\"name\":\"getInfo_Out\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"arbMsgOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"coinID\",\"type\":\"uint256\"}],\"name\":\"transferOutfor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderID\",\"type\":\"string\"}],\"name\":\"getInfo_order\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"coinID\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ads\",\"type\":\"address\"}],\"name\":\"airMsgOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"coinID\",\"type\":\"uint256\"}],\"name\":\"getInfo_coins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"orderads\",\"type\":\"address\"},{\"name\":\"coinID\",\"type\":\"uint256\"}],\"name\":\"transferIn1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"orderads\",\"type\":\"address\"},{\"name\":\"oid\",\"type\":\"string\"},{\"name\":\"coinID\",\"type\":\"uint256\"}],\"name\":\"transferIn0\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"orderID\",\"type\":\"string\"},{\"name\":\"oid\",\"type\":\"string\"},{\"name\":\"coinID\",\"type\":\"uint256\"},{\"name\":\"orderads\",\"type\":\"address\"}],\"name\":\"transferIn00\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ads\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"},{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"AirTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "MyEOTC", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b7245ba2b02a3e4e2ac43eca00f8d9d8d43cf7b6af3bc17aff84bfb534bd8b8e"}