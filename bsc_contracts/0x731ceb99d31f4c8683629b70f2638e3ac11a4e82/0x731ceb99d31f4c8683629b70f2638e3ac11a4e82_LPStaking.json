{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\n/**\r\n * @title Staking\r\n * @author gotbit\r\n */\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address who) external view returns (uint256 balance);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool trans1);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool trans);\r\n}\r\n\r\ninterface ILP is IERC20 {\r\n    function token0() external view returns (IERC20);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112,\r\n            uint112,\r\n            uint32\r\n        );\r\n}\r\n\r\ncontract OwnableAndWhitelistble {\r\n    address public owner;\r\n    mapping(address => bool) internal whitelist;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event WhitelistAdded(address indexed sender, address indexed whitelistUser);\r\n    event WhitelistRemoved(address indexed sender, address indexed whitelistUser);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"You cant transfer ownerships to address 0x0\");\r\n        require(newOwner != owner, \"You cant transfer ownerships to yourself\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        whitelist[owner] = false;\r\n        whitelist[newOwner] = true;\r\n        owner = newOwner;\r\n    }\r\n\r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender], \"Only whitelist users can call this function\");\r\n        _;\r\n    }\r\n\r\n    function addToWhitelist(address newWhitelistUser) external onlyOwner {\r\n        require(newWhitelistUser != address(0), \"You cant add to whitelist address 0x0\");\r\n        emit WhitelistAdded(msg.sender, newWhitelistUser);\r\n        whitelist[newWhitelistUser] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address newWhitelistUser) external onlyOwner {\r\n        require(whitelist[newWhitelistUser], \"You cant remove from whitelist\");\r\n        emit WhitelistRemoved(msg.sender, newWhitelistUser);\r\n        whitelist[newWhitelistUser] = false;\r\n    }\r\n}\r\n\r\ncontract LPStaking is OwnableAndWhitelistble {\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 startStaking;\r\n        uint256 lastHarvest;\r\n        uint256 bonus;\r\n        uint256 boost;\r\n    }\r\n\r\n    IERC20 mainToken;\r\n    address dividends;\r\n\r\n    uint256 public rate = 888;\r\n    uint256 public lowRate = 70;\r\n    uint256 public alpha = 1111;\r\n    uint256 public betta = 1;\r\n\r\n    mapping(ILP => uint256) public pools;\r\n    mapping(ILP => mapping(address => bool)) public userIncludes;\r\n    mapping(ILP => address[]) public users;\r\n\r\n    uint256 public constant cutoff = 48 hours;\r\n    uint256 public constant beforeCutoff = 15;\r\n    uint256 public constant afterCutoff = 10;\r\n\r\n    mapping(ILP => bool) public isPermittedLP;\r\n    mapping(address => mapping(ILP => Stake)) public stakes;\r\n\r\n    event Staked(address indexed who, ILP indexed lpToken, uint256 amount, uint256 startTime);\r\n    event AddedAmount(address indexed who, ILP indexed lpToken, uint256 amount);\r\n    event Harvested(address indexed who, ILP indexed lpToken, uint256 value, uint256 toDividends);\r\n    event Unstaked(address indexed who, ILP indexed lpToken, uint256 amount);\r\n    event Boosted(address indexed who, ILP indexed lpToken, uint256 boost);\r\n    event SettedPermisionLPToken(ILP indexed lpToken, bool perm);\r\n\r\n    event SettedAlpha(address indexed sender, uint256 alpha);\r\n    event SettedBetta(address indexed sender, uint256 betta);\r\n    event SettedLowRate(address indexed sender, uint256 lowRate);\r\n    event SettedDividends(address indexed sender, address indexed dividends);\r\n\r\n    constructor(\r\n        address _owner,\r\n        IERC20 _token,\r\n        address _dividends\r\n    ) {\r\n        owner = _owner;\r\n        whitelist[_owner] = true;\r\n        mainToken = _token;\r\n        dividends = _dividends;\r\n    }\r\n\r\n    function stake(ILP _lpToken, uint256 _amount) external {\r\n        require(_amount > 0, \"Amount must be greater then zero\");\r\n        require(stakes[msg.sender][_lpToken].startStaking == 0, \"You have already staked\");\r\n        require(isPermittedLP[_lpToken], \"You cant stake those LP tokens\");\r\n\r\n        require(_lpToken.balanceOf(msg.sender) >= _amount, \"You dont enough LP tokens\");\r\n        require(_lpToken.transferFrom(msg.sender, address(this), _amount), \"Transfer issues\");\r\n\r\n        addBonuses(_lpToken, _amount);\r\n\r\n        pools[_lpToken] += _amount;\r\n\r\n        stakes[msg.sender][_lpToken] = Stake({\r\n            amount: _amount,\r\n            startStaking: block.timestamp,\r\n            lastHarvest: block.timestamp,\r\n            bonus: 0,\r\n            boost: 0\r\n        });\r\n\r\n        addUser(msg.sender, _lpToken);\r\n\r\n        emit Staked(msg.sender, _lpToken, _amount, block.timestamp);\r\n    }\r\n\r\n    function addAmount(uint256 _amount, ILP _lpToken) external {\r\n        require(_amount > 0, \"Amount must be greater then zero\");\r\n        require(stakes[msg.sender][_lpToken].startStaking != 0, \"You dont have stake\");\r\n        require(isPermittedLP[_lpToken], \"You cant stake those LP tokens\");\r\n\r\n        require(_lpToken.balanceOf(msg.sender) >= _amount, \"You dont have enough LP tokens\");\r\n        require(_lpToken.transferFrom(msg.sender, address(this), _amount), \"Transfer issues\");\r\n\r\n        addBonuses(_lpToken, _amount);\r\n\r\n        pools[_lpToken] += _amount;\r\n\r\n        stakes[msg.sender][_lpToken].amount += _amount;\r\n\r\n        emit AddedAmount(msg.sender, _lpToken, _amount);\r\n    }\r\n\r\n    function harvest(ILP _lpToken) public {\r\n        require(stakes[msg.sender][_lpToken].startStaking != 0, \"You dont have stake\");\r\n\r\n        (uint256 _value, uint256 _toDividends) = harvested(msg.sender, _lpToken);\r\n        require(mainToken.balanceOf(address(this)) >= (_value + _toDividends), \"Contract doesnt have enough DES\");\r\n\r\n        stakes[msg.sender][_lpToken].lastHarvest = block.timestamp;\r\n        stakes[msg.sender][_lpToken].bonus = 0;\r\n\r\n        require(mainToken.transfer(msg.sender, _value), \"Transfer issues\");\r\n        require(mainToken.transfer(dividends, _toDividends), \"Transfer issues\");\r\n\r\n        emit Harvested(msg.sender, _lpToken, _value, _toDividends);\r\n    }\r\n\r\n    function harvestedRaw(\r\n        address _who,\r\n        ILP _lpToken,\r\n        uint256 _pool,\r\n        uint256 _time\r\n    ) public view returns (uint256 _value, uint256 _toDividends) {\r\n        require(stakes[_who][_lpToken].startStaking != 0, \"You dont have stake\");\r\n\r\n        if (stakes[_who][_lpToken].lastHarvest == 0) return (0, 0);\r\n        Stake memory _stake = stakes[_who][_lpToken];\r\n\r\n        uint256 _timePassed = _time - _stake.lastHarvest;\r\n        uint256 _percentDiv = _timePassed < cutoff ? beforeCutoff : afterCutoff;\r\n\r\n        uint256 _rewardInLP = (_stake.amount * _timePassed * (getRawRate(_pool) + _stake.boost)) /\r\n            (100 * (365 days)) +\r\n            _stake.bonus;\r\n        uint256 _toDivInLP = (_rewardInLP * _percentDiv) / 100;\r\n\r\n        uint256 _rewardInToken = LPtoToken(_lpToken, _rewardInLP);\r\n        uint256 _toDivInToken = LPtoToken(_lpToken, _toDivInLP);\r\n\r\n        return (_rewardInToken - _toDivInToken, _toDivInToken);\r\n    }\r\n\r\n    function LPtoToken(ILP _lpToken, uint256 _amountLP) public view returns (uint256) {\r\n        uint256 _totalSupply = _lpToken.totalSupply();\r\n        (uint112 r0, uint112 r1, ) = _lpToken.getReserves();\r\n        if (mainToken == _lpToken.token0()) return (2 * r0 * _amountLP) / _totalSupply;\r\n        return (2 * r1 * _amountLP) / _totalSupply;\r\n    }\r\n\r\n    function harvested(address _who, ILP _lpToken) public view returns (uint256 _value, uint256 _toDividends) {\r\n        return harvestedRaw(_who, _lpToken, pools[_lpToken], block.timestamp);\r\n    }\r\n\r\n    function getRawRate(uint256 _pool) internal view returns (uint256 _rate) {\r\n        return ((rate - lowRate) * alpha * 1e18) / (_pool * betta + alpha * 1e18) + lowRate;\r\n    }\r\n\r\n    function getRate(ILP _lpToken) external view returns (uint256 _rate) {\r\n        return getRawRate(pools[_lpToken]);\r\n    }\r\n\r\n    function unstake(ILP _lpToken) public {\r\n        require(stakes[msg.sender][_lpToken].startStaking != 0, \"You dont have stake\");\r\n\r\n        harvest(_lpToken);\r\n\r\n        uint256 _amount = stakes[msg.sender][_lpToken].amount;\r\n\r\n        require(_lpToken.balanceOf(address(this)) >= _amount, \"Contract doesnt have enough DES\");\r\n\r\n        delete stakes[msg.sender][_lpToken];\r\n\r\n        removeUser(msg.sender, _lpToken);\r\n\r\n        require(_lpToken.transfer(msg.sender, _amount), \"Transfer issues\");\r\n\r\n        emit Unstaked(msg.sender, _lpToken, _amount);\r\n    }\r\n\r\n    function addUser(address _user, ILP _lpToken) internal returns (bool _status) {\r\n        users[_lpToken].push(_user);\r\n        userIncludes[_lpToken][_user] = true;\r\n        return true;\r\n    }\r\n\r\n    function removeUser(address _user, ILP _lpToken) internal returns (bool _status) {\r\n        uint256 _length = users[_lpToken].length;\r\n        address[] memory _users = users[_lpToken];\r\n\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (_users[i] == _user) {\r\n                users[_lpToken][i] = _users[_length - 1];\r\n                users[_lpToken].pop();\r\n                userIncludes[_lpToken][_user] = false;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addBonuses(ILP _lpToken, uint256 _amount) internal {\r\n        uint256 _length = users[_lpToken].length;\r\n        address[] memory _users = users[_lpToken];\r\n\r\n        uint256 _oldPool = pools[_lpToken];\r\n        uint256 _newPool = _oldPool + _amount;\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            if (userIncludes[_lpToken][_users[i]]) {\r\n                (uint256 _oldVal, ) = harvestedRaw(_users[i], _lpToken, _oldPool, block.timestamp);\r\n                (uint256 _newVal, ) = harvestedRaw(_users[i], _lpToken, _newPool, block.timestamp);\r\n                stakes[_users[i]][_lpToken].bonus += _oldVal - _newVal;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUsers(ILP _lpToken) public view returns (address[] memory) {\r\n        return users[_lpToken];\r\n    }\r\n\r\n    function getStake(address _user, ILP _lpToken) external view returns (Stake memory) {\r\n        return stakes[_user][_lpToken];\r\n    }\r\n\r\n    function setBoost(\r\n        address _for,\r\n        ILP _lpToken,\r\n        uint256 _boost\r\n    ) external onlyWhitelist {\r\n        stakes[_for][_lpToken].boost = _boost;\r\n        emit Boosted(_for, _lpToken, _boost);\r\n    }\r\n\r\n    function setDividends(address _newDividends) external onlyOwner {\r\n        dividends = _newDividends;\r\n        emit SettedDividends(msg.sender, _newDividends);\r\n    }\r\n\r\n    function setAlpha(uint256 _alpha) external onlyOwner {\r\n        require(_alpha > 0, \"Alpha is incorrect\");\r\n        alpha = _alpha;\r\n        emit SettedAlpha(msg.sender, _alpha);\r\n    }\r\n\r\n    function setBetta(uint256 _betta) external onlyOwner {\r\n        require(_betta >= 1, \"Betta is incorrect\");\r\n        betta = _betta;\r\n        emit SettedBetta(msg.sender, _betta);\r\n    }\r\n\r\n    function setLowRate(uint256 _lowRate) external onlyOwner {\r\n        lowRate = _lowRate;\r\n        emit SettedLowRate(msg.sender, _lowRate);\r\n    }\r\n\r\n    function setPermissionLP(ILP _lpToken, bool _perm) external onlyOwner {\r\n        isPermittedLP[_lpToken] = _perm;\r\n        emit SettedPermisionLPToken(_lpToken, _perm);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dividends\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ILP\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ILP\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"name\":\"Boosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ILP\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toDividends\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"}],\"name\":\"SettedAlpha\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betta\",\"type\":\"uint256\"}],\"name\":\"SettedBetta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dividends\",\"type\":\"address\"}],\"name\":\"SettedDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowRate\",\"type\":\"uint256\"}],\"name\":\"SettedLowRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ILP\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"perm\",\"type\":\"bool\"}],\"name\":\"SettedPermisionLPToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ILP\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ILP\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistUser\",\"type\":\"address\"}],\"name\":\"WhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistUser\",\"type\":\"address\"}],\"name\":\"WhitelistRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLP\",\"type\":\"uint256\"}],\"name\":\"LPtoToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"addAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhitelistUser\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpha\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeCutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutoff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct LPStaking.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"harvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"harvestedRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPermittedLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWhitelistUser\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_alpha\",\"type\":\"uint256\"}],\"name\":\"setAlpha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betta\",\"type\":\"uint256\"}],\"name\":\"setBetta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_boost\",\"type\":\"uint256\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDividends\",\"type\":\"address\"}],\"name\":\"setDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lowRate\",\"type\":\"uint256\"}],\"name\":\"setLowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_perm\",\"type\":\"bool\"}],\"name\":\"setPermissionLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract ILP\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIncludes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILP\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LPStaking", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f7909ae68bf8287f692d03fdda35441621b554c3000000000000000000000000b38b3c34e4bb6144c1e5283af720e046ee833a2a000000000000000000000000bf434b109a9cced493903abdb104ddbcb3470428", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5dabd9a30333802cc86368cdd078fd61077809c68b4ba3d831fc7616e8d6a2b9"}