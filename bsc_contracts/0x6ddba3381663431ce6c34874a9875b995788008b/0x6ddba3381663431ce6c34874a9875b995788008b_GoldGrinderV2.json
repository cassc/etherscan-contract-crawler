{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GoldGrinder2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract GoldGrinderV2 is Ownable {\\n    /** base parameters **/\\n    uint256 public constant GOLDS_TO_HIRE_1MINER = 10 days; //10% daily apr\\n    uint256 public constant REFERRAL = 90; //% to ref\\n    uint256 public constant PERCENTS_DIVIDER = 1000;\\n    uint256 public devTax = 55;\\n    uint256 public constant DAMPENING_FACTOR = 80;\\n\\n    uint256 public COMPOUND_BONUS = 30;\\n    uint256 public COMPOUND_BONUS_MAX_TIMES = 20;\\n    uint256 public COMPOUND_STEP = 1 days;\\n\\n    uint256 public WITHDRAWAL_TAX = 800;\\n    uint256 public COMPOUND_FOR_NO_TAX_WITHDRAWAL = 10;\\n\\n    uint256 public totalStaked;\\n    uint256 public totalUsers;\\n    uint256 public totalCompound;\\n    uint256 public totalRefBonus;\\n    uint256 public totalWithdrawn;\\n\\n    uint256 private marketGolds = 100_000 * GOLDS_TO_HIRE_1MINER;\\n    uint256 PSN = 10000;\\n    uint256 PSNH = 5000;\\n\\n    bool private _initialized;\\n\\n    uint256 public CUTOFF_STEP = 2 days;\\n    uint256 public WITHDRAW_COOLDOWN = 1 days;\\n\\n    /* addresses */\\n    address payable public dev1;\\n\\n    IERC20 public token;\\n\\n    mapping(address => bool) private hasParticipated;\\n\\n    struct User {\\n        uint256 initialDeposit;\\n        uint256 userDeposit;\\n        uint256 miners;\\n        uint256 claimedGolds;\\n        uint256 lastHireTime;\\n        address referrer;\\n        uint256 referralsCount;\\n        uint256 referralGoldRewards;\\n        uint256 totalWithdrawn;\\n        uint256 dailyCompoundBonus;\\n        uint256 farmerCompoundCount; //added to monitor farmer consecutive compound without cap\\n        uint256 lastWithdrawTime;\\n    }\\n\\n    mapping(address => User) public users;\\n\\n    modifier initialized() {\\n        require(_initialized, \\\"Contract not initialized\\\");\\n        _;\\n    }\\n\\n    constructor(address payable _dev1, IERC20 _token) {\\n        dev1 = _dev1;\\n        token=_token;\\n    }\\n\\n    function startFarm(address addr,uint256 amount) public payable onlyOwner {\\n        require(!_initialized, \\\"Already initialized\\\");\\n        _initialized = true;\\n        buyGold(addr,amount);\\n    }\\n\\n    function hireMiners(bool isCompound) public initialized {\\n        User storage user = users[msg.sender];\\n\\n        uint256 goldsUsed = getMyGolds(msg.sender);\\n        uint256 goldsForCompound = goldsUsed;\\n\\n        if (isCompound) {\\n            goldsForCompound += getDailyCompoundBonus(\\n                msg.sender,\\n                goldsForCompound\\n            );\\n            uint256 goldsUsedValue = calculateGoldSell(goldsForCompound);\\n            user.userDeposit += goldsUsedValue;\\n            totalCompound += goldsUsedValue;\\n        }\\n\\n        if (block.timestamp - user.lastHireTime >= COMPOUND_STEP) {\\n            if (user.dailyCompoundBonus < COMPOUND_BONUS_MAX_TIMES) {\\n                ++user.dailyCompoundBonus;\\n            }\\n            //add compoundCount for monitoring purposes.\\n            ++user.farmerCompoundCount;\\n        }\\n        user.claimedGolds = goldsForCompound % GOLDS_TO_HIRE_1MINER;\\n        user.miners += goldsForCompound / GOLDS_TO_HIRE_1MINER;\\n        user.lastHireTime = block.timestamp;\\n\\n        marketGolds += dampenGold(goldsUsed);\\n\\n        if (!hasParticipated[msg.sender]) {\\n            hasParticipated[msg.sender] = true;\\n            totalUsers++;\\n        }\\n    }\\n\\n    function dampenGold(uint256 amount) private pure returns (uint256) {\\n        return (amount * DAMPENING_FACTOR) / 100;\\n    }\\n\\n    function sellGolds() public initialized {\\n        \\n        User storage user = users[msg.sender];\\n        require(block.timestamp-user.lastHireTime>=WITHDRAW_COOLDOWN, \\\"must wait 24 hours before sell\\\");\\n\\n        uint256 hasGolds = getMyGolds(msg.sender);\\n        uint256 goldValue = calculateGoldSell(hasGolds);\\n\\n        /** \\n            if user compound < to mandatory compound days**/\\n        if (user.dailyCompoundBonus < COMPOUND_FOR_NO_TAX_WITHDRAWAL) {\\n            //daily compound bonus count will not reset and goldValue will be deducted with 60% feedback tax.\\n            goldValue -= ((goldValue * WITHDRAWAL_TAX) / PERCENTS_DIVIDER);\\n        } else {\\n            //set daily compound bonus count to 0 and goldValue will remain without deductions\\n            user.dailyCompoundBonus = 0;\\n            user.farmerCompoundCount = 0;\\n        }\\n\\n        user.lastWithdrawTime = block.timestamp;\\n        user.claimedGolds = 0;\\n        user.lastHireTime = block.timestamp;\\n        marketGolds += dampenGold(hasGolds);\\n\\n        if (token.balanceOf(address(this)) < goldValue) {\\n            goldValue = token.balanceOf(address(this));\\n        }\\n\\n        uint256 goldsPayout = goldValue - payFees(goldValue);\\n        token.transfer(msg.sender,goldsPayout);\\n        user.totalWithdrawn = user.totalWithdrawn + goldsPayout;\\n        totalWithdrawn += goldsPayout;\\n        if (user.miners == 0) {\\n            hasParticipated[msg.sender] = false;\\n            totalUsers--;\\n        }\\n    }\\n\\n    function buyGold(address ref, uint256 amount) public payable initialized {\\n        User storage user = users[msg.sender];\\n        token.transferFrom(msg.sender,address(this),amount);\\n        uint256 goldsBought = calculateGoldBuy(\\n            amount,\\n            token.balanceOf(address(this))-amount\\n        );\\n        user.userDeposit += amount;\\n        user.initialDeposit += amount;\\n        user.claimedGolds += goldsBought;\\n\\n        if (\\n            user.referrer == address(0) \\n        ) {\\n\\n            user.referrer = (ref != address(0) && ref != msg.sender) ? ref : dev1 ;\\n            ++users[user.referrer].referralsCount;\\n        }\\n\\n        if (user.referrer != address(0)) {\\n            address upline = user.referrer;\\n            uint256 refRewards = (amount * REFERRAL) / PERCENTS_DIVIDER;\\n            token.transfer(upline,refRewards);\\n\\n            users[upline].referralGoldRewards += refRewards;\\n            totalRefBonus += refRewards;\\n        }\\n\\n        uint256 goldsPayout = payFees(amount);\\n        totalStaked += amount - goldsPayout;\\n        hireMiners(false);\\n    }\\n\\n    function payFees(uint256 goldValue) internal returns (uint256) {\\n        uint256 tax = (goldValue * devTax) / PERCENTS_DIVIDER;\\n        token.transfer(dev1,tax);\\n        return tax;\\n    }\\n\\n    function getDailyCompoundBonus(address _adr, uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalBonus = users[_adr].dailyCompoundBonus * COMPOUND_BONUS;\\n        uint256 result = (amount * totalBonus) / PERCENTS_DIVIDER;\\n        return result;\\n    }\\n\\n    function getUserInfo(address _adr)\\n        public\\n        view\\n        returns (\\n            uint256 _initialDeposit,\\n            uint256 _userDeposit,\\n            uint256 _miners,\\n            uint256 _claimedGolds,\\n            uint256 _lastHireTime,\\n            address _referrer,\\n            uint256 _referrals,\\n            uint256 _totalWithdrawn,\\n            uint256 _referralGoldRewards,\\n            uint256 _dailyCompoundBonus,\\n            uint256 _farmerCompoundCount,\\n            uint256 _lastWithdrawTime\\n        )\\n    {\\n        _initialDeposit = users[_adr].initialDeposit;\\n        _userDeposit = users[_adr].userDeposit;\\n        _miners = users[_adr].miners;\\n        _claimedGolds = users[_adr].claimedGolds;\\n        _lastHireTime = users[_adr].lastHireTime;\\n        _referrer = users[_adr].referrer;\\n        _referrals = users[_adr].referralsCount;\\n        _totalWithdrawn = users[_adr].totalWithdrawn;\\n        _referralGoldRewards = users[_adr].referralGoldRewards;\\n        _dailyCompoundBonus = users[_adr].dailyCompoundBonus;\\n        _farmerCompoundCount = users[_adr].farmerCompoundCount;\\n        _lastWithdrawTime = users[_adr].lastWithdrawTime;\\n    }\\n\\n    function getAvailableEarnings(address _adr) public view returns (uint256) {\\n        return calculateGoldSell(getMyGolds(_adr));\\n    }\\n\\n    function calculateTrade(\\n        uint256 rt,\\n        uint256 rs,\\n        uint256 bs\\n    ) private view returns (uint256) {\\n        return (PSN * bs) / (PSNH + (PSN * rs + PSNH * rt) / rt);\\n    }\\n\\n    function calculateGoldSell(uint256 golds) public view returns (uint256) {\\n        return calculateTrade(golds, marketGolds, token.balanceOf(address(this)));\\n    }\\n\\n    function calculateGoldBuy(uint256 eth, uint256 contractBalance)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return calculateTrade(eth, contractBalance, marketGolds);\\n    }\\n\\n    function calculateGoldBuySimple(uint256 eth) public view returns (uint256) {\\n        return calculateGoldBuy(eth, token.balanceOf(address(this)));\\n    }\\n\\n    /** How many miners and golds per day user will recieve based on BNB deposit **/\\n    function getGoldsYieldPerDay(uint256 amount)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 goldsAmount = calculateGoldBuy(amount, token.balanceOf(address(this)));\\n        uint256 miners = goldsAmount / GOLDS_TO_HIRE_1MINER;\\n        uint256 day = 1 days;\\n        uint256 goldsPerDay = day * miners;\\n        uint256 earningsPerDay = calculateGoldSellForYield(goldsPerDay, amount);\\n        return (miners, earningsPerDay);\\n    }\\n\\n    function calculateGoldSellForYield(uint256 golds, uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            calculateTrade(golds, marketGolds, token.balanceOf(address(this)) + amount);\\n    }\\n\\n    function getSiteInfo()\\n        public\\n        view\\n        returns (\\n            uint256 _totalStaked,\\n            uint256 _totalUsers,\\n            uint256 _totalCompound,\\n            uint256 _totalRefBonus\\n        )\\n    {\\n        return (totalStaked, totalUsers, totalCompound, totalRefBonus);\\n    }\\n\\n    function getMyMiners() public view returns (uint256) {\\n        return users[msg.sender].miners;\\n    }\\n\\n    function getMyGolds(address addr) public view returns (uint256) {\\n        return users[addr].claimedGolds + getGoldsSinceLastHireTime(addr);\\n    }\\n\\n    function getGoldsSinceLastHireTime(address adr)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 secondsSinceLastHireTime = block.timestamp -\\n            users[adr].lastHireTime;\\n        /** get min time. **/\\n        uint256 cutoffTime = min(secondsSinceLastHireTime, CUTOFF_STEP);\\n        uint256 secondsPassed = min(GOLDS_TO_HIRE_1MINER, cutoffTime);\\n        return secondsPassed * users[adr].miners;\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function setDevTax(uint256 value) external onlyOwner {\\n        require(value <= 150);\\n        devTax = value;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_FOR_NO_TAX_WITHDRAWAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAMPENING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLDS_TO_HIRE_1MINER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyGold\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateGoldBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateGoldBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"golds\",\"type\":\"uint256\"}],\"name\":\"calculateGoldSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"golds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateGoldSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDailyCompoundBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getGoldsSinceLastHireTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getGoldsYieldPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMyGolds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedGolds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHireTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralGoldRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_farmerCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"hireMiners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellGolds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDevTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"startFarm\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedGolds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHireTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralGoldRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmerCompoundCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GoldGrinderV2", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a975eff0ce8c6db419748a3215b7179e20b42b7e000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}