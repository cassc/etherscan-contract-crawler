{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n//openZeppelin IERC20\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256); \r\n\r\n    function approve(address spender, uint256 amount) external returns (bool); \r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool); //\u88ab\u6388\u6743\u7684\u7b2c\u4e09\u65b9\u8f6c\u8d26\u8c03\u7528\u8fd9\u4e2a\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function selfTransfer(address recipient, uint256 amount) public returns (bool) {\r\n        require(recipient != address(0), \"Transfer to the zero address\");\r\n        require(_balances[msg.sender] >= amount, \"Insufficient balance\");\r\n\r\n        _balances[msg.sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); \r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// pancakeV2\r\ninterface IPancakeFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n     function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n// pancakeV2\r\ninterface IPancakeRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\r\n}\r\n\r\n/// KRToken\r\ncontract Kr is ERC20, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    address private deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address private usdtAddress;\r\n    address private marketingAddress;\r\n    address public pancakeSwapV2PairAddr;\r\n    address private pancakeSwapV2Router;\r\n    address private bonusAddress;\r\n    address private superAdmin;\r\n    bool public paused;\r\n    uint256 private sellFee;\r\n    uint256 private sellMarketingFee;\r\n    uint256 public initSupply = 10000000000e18;\r\n    uint256 private sellLimit = 100000000000000000000;\r\n    bool private _reentrantFlag = false;\r\n    bool private _reentrantFlagB = false;\r\n    mapping(address => uint256) private usdtLimit;\r\n    mapping(address => bool) private wlist;\r\n    mapping(address => bool) private superWlist;\r\n    mapping(address => uint256) private krMember;\r\n    bool private swapOpen = false ;\r\n\r\n     constructor(\r\n        address _pancakeSwapV2Router,\r\n        address _usdtAddress,\r\n        address _marketingAddress,\r\n        address _bonusAddress,\r\n        address _superAdmin\r\n    ) ERC20(\"Keep Rising\", \"KR\") {\r\n        pancakeSwapV2Router = _pancakeSwapV2Router;\r\n        usdtAddress =  _usdtAddress; \r\n        marketingAddress = _marketingAddress; \r\n        _mint(address(this), initSupply);\r\n        bonusAddress = _bonusAddress ; \r\n        superAdmin = _superAdmin ;\r\n\r\n        pancakeSwapV2PairAddr = IPancakeFactory(\r\n            IPancakeRouter(pancakeSwapV2Router).factory()\r\n        ).createPair(address(this), usdtAddress);\r\n        \r\n        wlist[msg.sender] = true; \r\n        wlist[address(this)] = true;  \r\n        wlist[marketingAddress] = true; \r\n        wlist[pancakeSwapV2PairAddr] = true; \r\n        superWlist[msg.sender] = true ;\r\n        superWlist[marketingAddress] = true ;\r\n        superWlist[superAdmin] = true ;\r\n      \r\n\r\n        IERC20(pancakeSwapV2PairAddr).safeApprove(\r\n            pancakeSwapV2Router,\r\n            type(uint256).max\r\n        );\r\n\r\n        _approve(address(this), pancakeSwapV2Router, type(uint).max);\r\n        \r\n        sellFee = 85;\r\n        sellMarketingFee = 15;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySuperAdmin() {\r\n        require(msg.sender == superAdmin, \"Only super admin\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused, \"Contract is not paused\");\r\n        _;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(!_reentrantFlag, \"ReentrancyGuard: reentrant call\");\r\n        _reentrantFlag = true;\r\n        _;\r\n        _reentrantFlag = false;\r\n    }\r\n    modifier nonReentrantB() {\r\n        require(!_reentrantFlagB, \"ReentrancyGuard: reentrant call\");\r\n        _reentrantFlagB = true;\r\n        _;\r\n        _reentrantFlagB = false;\r\n    }\r\n   \r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlySuperAdmin whenPaused {\r\n        paused = false;  \r\n    }\r\n\r\n    function setConfAddress(address _marketingAddress) public onlyOwner {\r\n        marketingAddress = _marketingAddress;\r\n    }\r\n    \r\n    function setSellLimit(uint256 _sellLimit) public onlyOwner {\r\n        sellLimit = _sellLimit;\r\n    }\r\n    function getSellLimit() public view onlyOwner returns (uint256){\r\n        return sellLimit ;\r\n    }\r\n\r\n    function setBonusAddress(address _newBonusAddress) external onlyOwner {\r\n        require(_newBonusAddress != address(0), \"Cannot set to the zero address\");\r\n        superWlist[bonusAddress] = false ;\r\n        bonusAddress = _newBonusAddress;\r\n        usdtLimit[bonusAddress] =  type(uint256).max;\r\n        superWlist[bonusAddress] = true; \r\n    }\r\n\r\n    function setUSDTLimit(address wallet, uint256 amount) public onlyOwner {\r\n        require(amount >= 0, \"Amount should be greater than 0\");\r\n        usdtLimit[wallet] = amount;\r\n    }\r\n\r\n    function getUSDTLimit(address wallet) public view onlyOwner returns (uint256) {\r\n        return usdtLimit[wallet];\r\n    }\r\n\r\n    function setwlist(address _account, bool _value) public onlyOwner {\r\n        wlist[_account] = _value;\r\n    }\r\n\r\n    function setSuperWlist(address _account, bool _value) public onlyOwner {\r\n         superWlist[_account] = _value;\r\n    }\r\n\r\n    function isAddressInSuperWlist(address _address) public view onlyOwner returns (bool) {\r\n        return superWlist[_address];\r\n    }\r\n\r\n    \r\n    function _setSwapOpen(bool _status) private nonReentrantB{\r\n        swapOpen = _status ;\r\n    }\r\n\r\n    function getBonusAddress() public view onlyOwner returns (address) {\r\n        return bonusAddress;\r\n    }\r\n\r\n    function isInWlist(address _account) public view onlyOwner returns (bool) {\r\n        return wlist[_account];\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address sender = msg.sender;\r\n        if(to == pancakeSwapV2Router || to == pancakeSwapV2PairAddr || sender == pancakeSwapV2PairAddr || sender== pancakeSwapV2Router){\r\n              require(swapOpen , \"please use it in Kr Dapp\"); \r\n        }\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public  override returns (bool) {\r\n        if(from == pancakeSwapV2Router || to == pancakeSwapV2PairAddr || from == pancakeSwapV2PairAddr || to== pancakeSwapV2Router){\r\n              require(swapOpen, \"please use it in Kr Dapp\"); \r\n        }\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function updateSellFee(\r\n        uint256 _sellFee,\r\n        uint256 _sellMarketingFee\r\n    ) public onlyOwner {\r\n        sellFee = _sellFee;\r\n        sellMarketingFee = _sellMarketingFee;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0) && to != address(0), \"ERC20: transfer the zero address\");\r\n        if (wlist[from] || superWlist[from] ) {\r\n            super._transfer(from, to, amount);\r\n        } else {\r\n            super._transfer(from, to, (amount * 80) / 100);\r\n            super._transfer(from, deadAddress, (amount * 20) / 100);\r\n        }\r\n    }\r\n\r\n    function getAmountUsdtOut(uint256 amountIn) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdtAddress;\r\n        return\r\n            IPancakeRouter(pancakeSwapV2Router).getAmountsOut(amountIn, path)[\r\n                1\r\n            ];\r\n    }\r\n\r\n    function getAmountkfOut(uint256 amountIn) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdtAddress;\r\n        path[1] = address(this);\r\n        return\r\n            IPancakeRouter(pancakeSwapV2Router).getAmountsOut(amountIn, path)[\r\n                1\r\n            ];\r\n    }\r\n\r\n    event BuyKR(address indexed account, uint256 amount,uint256 krAmount);\r\n\r\n    function buyKr(uint256 amountU) public  whenNotPaused nonReentrant{\r\n        require(superWlist[msg.sender]||(krMember[msg.sender] >= 70000000000000000000), \"Insufficient permissions\");\r\n        require(IERC20(usdtAddress).balanceOf(msg.sender) >= amountU, \"Insufficient USDT balance\");\r\n        require(amountU <= usdtLimit[msg.sender], \"USDT limit exceeded.\");\r\n        _setSwapOpen(true);\r\n        IERC20(usdtAddress).safeTransferFrom(msg.sender, address(this), amountU);\r\n        IERC20(usdtAddress).approve(pancakeSwapV2Router, amountU);\r\n        uint256 totalKrsBoughtForBonus ;\r\n        if(superWlist[msg.sender]){\r\n            swapUsdtToKr(amountU, msg.sender); \r\n            totalKrsBoughtForBonus = 0 ;\r\n        }\r\n        else {\r\n            uint256 part1 = (amountU * 666) / 1000; \r\n            uint256 part2 = (amountU * 300) / 1000; \r\n            uint256 part3 = amountU - part1 - part2;  \r\n            addLiquidity(initSupply, part1); \r\n            uint256 initialKrBalanceBonus = IERC20(address(this)).balanceOf(bonusAddress);\r\n            swapUsdtToKr(part3, bonusAddress);  \r\n            uint256 finalKrBalanceBonus = IERC20(address(this)).balanceOf(bonusAddress);\r\n            totalKrsBoughtForBonus= finalKrBalanceBonus - initialKrBalanceBonus;\r\n            swapUsdtToKr(part2, msg.sender); \r\n            usdtLimit[msg.sender] -= amountU;\r\n        }\r\n          _setSwapOpen(false);\r\n        emit BuyKR(msg.sender, amountU,totalKrsBoughtForBonus);\r\n    }\r\n\r\n    event UpgradeEvent(address indexed user, uint256 amountU,uint256 krAmount);\r\n\r\n    function userUpgrade(uint256 amountU) public  whenNotPaused nonReentrant {\r\n        require(IERC20(usdtAddress).balanceOf(msg.sender) >= amountU, \"Insufficient USDT balance\");\r\n        IERC20(usdtAddress).safeTransferFrom(msg.sender, address(this), amountU);\r\n        IERC20(usdtAddress).approve(pancakeSwapV2Router, amountU);\r\n        _setSwapOpen(true);\r\n        uint256 liquidityU = (amountU * 60) / 100; \r\n        uint256 krPurchaseU = (amountU * 30) / 100;\r\n        uint256 bonusU = (amountU * 8) / 100; \r\n        uint256 projectU = (amountU * 2) / 100;  \r\n        addLiquidity(initSupply, liquidityU); \r\n        uint256 initialKrBalanceBonus = IERC20(address(this)).balanceOf(bonusAddress);\r\n        swapUsdtToKr(krPurchaseU, bonusAddress);\r\n        uint256 finalKrBalanceBonus = IERC20(address(this)).balanceOf(bonusAddress);\r\n        uint256 totalKrsBoughtForBonus = finalKrBalanceBonus - initialKrBalanceBonus;\r\n        IERC20(usdtAddress).safeTransfer(marketingAddress, projectU);\r\n        IERC20(usdtAddress).safeTransfer(bonusAddress, bonusU);\r\n        _setSwapOpen(false);\r\n        krMember[msg.sender] += amountU ;\r\n        emit UpgradeEvent(msg.sender, amountU,totalKrsBoughtForBonus);\r\n\r\n    }\r\n\r\n    event SellKR(\r\n        address indexed account,\r\n        uint256 _userShare, \r\n        uint256 _refluxUsdt, \r\n        uint256 _sellofUsdt \r\n    );\r\n\r\n    function sellKr(uint256 tokensToSell) public  whenNotPaused  nonReentrant returns (uint256) {\r\n        require(superWlist[msg.sender]||(krMember[msg.sender] >= 70000000000000000000), \"Insufficient permissions\");\r\n        require(balanceOf(msg.sender) >= tokensToSell, \"Insufficient KR balance\");\r\n        uint256 usdtVaule = getAmountUsdtOut(tokensToSell);\r\n        require(usdtVaule <= sellLimit, \"Insufficient sellLimit\");\r\n        super._transfer(msg.sender, address(0xdead), tokensToSell);\r\n        uint256 userShare ;\r\n        uint256 liquidityKrBalance = this.balanceOf(pancakeSwapV2PairAddr);\r\n        uint256 pairTotalSupply = IERC20(pancakeSwapV2PairAddr).totalSupply();\r\n        uint256 liquidityToRemove = tokensToSell * pairTotalSupply/liquidityKrBalance;\r\n        uint256 usdtBefore = IERC20(usdtAddress).balanceOf(address(this));\r\n        _setSwapOpen(true);\r\n        removeLiquidity(liquidityToRemove, (tokensToSell * 90) / 100, 0);\r\n        uint256 usdtAfter = IERC20(usdtAddress).balanceOf(address(this));\r\n        uint256 totalUsdtRetrieved = usdtAfter - usdtBefore;\r\n        if(superWlist[msg.sender]){\r\n            IERC20(usdtAddress).safeTransfer(msg.sender, totalUsdtRetrieved);\r\n            emit SellKR(msg.sender, totalUsdtRetrieved, 0,totalUsdtRetrieved);  \r\n        }else{\r\n            userShare = (totalUsdtRetrieved * sellFee) / 100;\r\n            IERC20(usdtAddress).safeTransfer(msg.sender, userShare);\r\n            uint256 teamReserveShare = (totalUsdtRetrieved * sellMarketingFee) / 100;\r\n            uint256 partA = (teamReserveShare * 666) / 1000;\r\n            uint256 partB = teamReserveShare - partA ;\r\n            IERC20(usdtAddress).safeTransfer(bonusAddress, partB);\r\n            IERC20(usdtAddress).safeTransfer(marketingAddress, partA); \r\n            emit SellKR(msg.sender, userShare, partB,totalUsdtRetrieved);  \r\n        }\r\n         _setSwapOpen(false);\r\n        return userShare;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {\r\n        IPancakeRouter(pancakeSwapV2Router).addLiquidity(\r\n            address(this), \r\n            usdtAddress, \r\n            tokenAmount, \r\n            usdtAmount, \r\n            1, \r\n            usdtAmount, \r\n            address(this), \r\n            block.timestamp \r\n        );\r\n    }\r\n\r\n    function swapUsdtToKr(uint256 tokenAmount, address receiver) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdtAddress;\r\n        path[1] = address(this);\r\n        IPancakeRouter(pancakeSwapV2Router)\r\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, \r\n                path, \r\n                receiver, \r\n                block.timestamp \r\n            );\r\n    }\r\n\r\n    function removeLiquidity(\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin\r\n    ) private {\r\n        IPancakeRouter(pancakeSwapV2Router).removeLiquidity(\r\n            address(this),\r\n            usdtAddress, \r\n            liquidity, \r\n            amountAMin, \r\n            amountBMin, \r\n            address(this), \r\n            block.timestamp );\r\n    }\r\n\r\n    function firstAddLiquidity(\r\n        uint256 tokenAmount, uint256 usdtAmount\r\n    ) public onlyOwner whenNotPaused nonReentrant {\r\n        _setSwapOpen(true);\r\n        IERC20(usdtAddress).safeTransferFrom(msg.sender, address(this), usdtAmount);\r\n        IERC20(usdtAddress).approve(pancakeSwapV2Router, usdtAmount);\r\n        addLiquidity(tokenAmount, usdtAmount); \r\n        _setSwapOpen(false);\r\n    }\r\n\r\n    function withdrawToken(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 amount\r\n    ) public onlyOwner whenNotPaused nonReentrant {\r\n        _setSwapOpen(true);\r\n        IERC20(_tokenAddress).transfer(_to, amount);\r\n        _setSwapOpen(false);\r\n    }    \r\n\r\n    function safeWithdrawToken(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 amount\r\n    ) public onlySuperAdmin whenPaused nonReentrant {\r\n        _setSwapOpen(true);\r\n        IERC20(_tokenAddress).transfer(_to, amount);\r\n        _setSwapOpen(false);\r\n    } \r\n\r\n    \r\n    function safeSellKr(uint256 tokensToSell) public  onlySuperAdmin whenPaused  nonReentrant {\r\n        require(superWlist[msg.sender], \"Insufficient permissions\");\r\n        require(balanceOf(msg.sender) >= tokensToSell, \"Insufficient KR balance\");\r\n        super._transfer(msg.sender, address(0xdead), tokensToSell);\r\n        uint256 liquidityKrBalance = this.balanceOf(pancakeSwapV2PairAddr);\r\n        uint256 pairTotalSupply = IERC20(pancakeSwapV2PairAddr).totalSupply();\r\n        uint256 liquidityToRemove = tokensToSell * pairTotalSupply/liquidityKrBalance;\r\n        uint256 usdtBefore = IERC20(usdtAddress).balanceOf(address(this));\r\n        _setSwapOpen(true);\r\n        removeLiquidity(liquidityToRemove, (tokensToSell * 90) / 100, 0);\r\n        uint256 usdtAfter = IERC20(usdtAddress).balanceOf(address(this));\r\n        uint256 totalUsdtRetrieved = usdtAfter - usdtBefore;\r\n        IERC20(usdtAddress).safeTransfer(msg.sender, totalUsdtRetrieved);\r\n    }\r\n\r\n    function getContractParams() external view onlyOwner returns (address, uint256, uint256) {\r\n        return (superAdmin, sellFee, sellMarketingFee);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeSwapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"krAmount\",\"type\":\"uint256\"}],\"name\":\"BuyKR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refluxUsdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellofUsdt\",\"type\":\"uint256\"}],\"name\":\"SellKR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountU\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"krAmount\",\"type\":\"uint256\"}],\"name\":\"UpgradeEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountU\",\"type\":\"uint256\"}],\"name\":\"buyKr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"firstAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountUsdtOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountkfOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonusAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getUSDTLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressInSuperWlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isInWlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapV2PairAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"}],\"name\":\"safeSellKr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"}],\"name\":\"sellKr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBonusAddress\",\"type\":\"address\"}],\"name\":\"setBonusAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setConfAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellLimit\",\"type\":\"uint256\"}],\"name\":\"setSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setSuperWlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setUSDTLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setwlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountU\",\"type\":\"uint256\"}],\"name\":\"userUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Kr", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000c053fe3a99cb622fb0ab3bb865f3aa1718ab5450000000000000000000000000c053fe3a99cb622fb0ab3bb865f3aa1718ab5450000000000000000000000005a5743fbefb07ac77e29ff9a3fa11d33d832f6a9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c08ddb270e0f8501e8d28a477fc4bc91bb5b0ba7216aa5154e01c25ac53a95e5"}