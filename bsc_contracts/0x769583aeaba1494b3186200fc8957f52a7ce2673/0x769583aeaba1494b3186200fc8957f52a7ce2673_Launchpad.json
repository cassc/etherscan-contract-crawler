{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Launchpad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/IERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n\\ncontract Launchpad is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 totalDeposit;      // How many MMPro tokens the user has provided.\\n        uint256 allocatedAmount;   // How many lTokens are available to the user for purchase\\n        uint256 purchasedAmount;   // How many lTokens the user has already bought\\n        uint256 rewardDebt;\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        address owner;         // owner of this pool      \\n        IERC20 lToken;             // Launched Token\\n        uint256 lTokenPrice;       // 5 digits LToken price (in stables) ex. 1:1 lTokenPrice=100000\\n        uint256 lTokenPerSec;      // How many Token distributed per second\\n        uint256 depositLimit;        // MMProToken deposit limit\\n        uint256 startTimestamp;    // Stacking start timestamp\\n        uint256 stakingEnd;   // Stacking duration in seconds\\n        uint256 purchaseEnd;  // Purchase duration in seconds, start = startTimestamp+stakingDuration\\n        uint256 lockupEnd;    // lTokens lockup duration, start = startTimestamp+stakingDuration + purchaseDuration\\n        uint256 sharesTotal;  // total staked amount\\n        uint256 lastRewardTimestamp;  // Last timestamp that lTokens distribution occurs.\\n        uint256 accLTokenPerShare;   // Accumulated lTokens per share, times 1e18.\\n        uint256 totalBought;\\n    }\\n\\n    // Stablecoin contracts\\n    IERC20[] public stablesInfo;\\n\\n    /*\\n    [\\n        IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56),//BUSD\\n        IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d),//USDC\\n        IERC20(0x55d398326f99059fF775485246999027B3197955),//USDT\\n        IERC20(0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3)//DAI\\n    ];\\n    */\\n\\n    // The MMpro TOKEN!\\n    IERC20 immutable public MMpro;\\n    // fee in basis points\\n    address public feeAddress;\\n    uint256 feeBP=500;\\n    uint256 public constant FEE_MAX = 2000; // 20%\\n    uint256 public immutable allocationDelay;\\n\\n  \\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes MMPROtoken.\\n    mapping(address => mapping(uint256 => UserInfo)) public userInfo;\\n\\n    mapping(address=>uint256) public totalAllocation;\\n    mapping(uint256=>bool) public pickUpTokensAllowed;\\n\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event BuyToken(address indexed user, uint256 indexed pid, uint256 amount);\\n    event PickUpTokens(address indexed user, uint256 indexed pid, uint256 amount);\\n    event TakeAwayUnsold(uint256 indexed pid, uint256 amount);\\n    event SetFeeAddress(address indexed user, address indexed newAddress);\\n    event ChangeFeeBP(uint256 feeBP);\\n\\n    modifier onlyPoolOwner(uint256 _pid) {\\n        require(poolInfo[_pid].owner == msg.sender, \\\"the caller is not a pool owner\\\");\\n        _;\\n    }\\n\\n    constructor(IERC20 _MMpro,\\n        address _feeAddress,\\n        IERC20[] memory _stablesInfo,\\n        uint256 _allocationDelay) public {\\n        MMpro = _MMpro;\\n        feeAddress = _feeAddress;\\n        stablesInfo=_stablesInfo;\\n        allocationDelay=_allocationDelay;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new pool. Can only be called by the owner.\\n    function add(address _poolOwner,\\n                IERC20 _lToken,\\n                uint256 _lTokenPrice,\\n                uint256 _tokensAllocationQty,\\n                uint256 _depositLimit,\\n                uint256 _startTimestamp,\\n                uint256 _stakingDuration,\\n                uint256 _purchaseDuration,\\n                uint256 _lockupDuration,\\n                bool _pickUpTokensAllowed\\n                ) external onlyOwner {\\n        \\n        require(address(_lToken)!=address(MMpro),\\\"_lToken same as MMpro\\\");\\n        require(_tokensAllocationQty <= _lToken.balanceOf(address(this))\\n            .sub(totalAllocation[address(_lToken)]),\\\"_tokensAllocationQty has been exceeded\\\");\\n        require(_stakingDuration>allocationDelay,\\\"_stakingDuration is too small\\\");\\n\\n        require(\\n            _tokensAllocationQty > _stakingDuration,\\n            \\\"not enough tokens on the contract balance\\\"\\n        );\\n\\n        totalAllocation[address(_lToken)]=totalAllocation[address(_lToken)].add(_tokensAllocationQty);\\n        uint256 startTimestamp = block.timestamp > _startTimestamp ? block.timestamp : _startTimestamp;\\n\\n        poolInfo.push(PoolInfo({\\n            owner : _poolOwner,\\n            lToken : _lToken,\\n            lTokenPrice : _lTokenPrice,\\n            lTokenPerSec : _tokensAllocationQty.div(_stakingDuration.sub(allocationDelay)),\\n            depositLimit : _depositLimit,\\n            startTimestamp : startTimestamp,\\n            stakingEnd : startTimestamp.add(_stakingDuration),\\n            purchaseEnd : startTimestamp.add(_stakingDuration).add(_purchaseDuration),\\n            lockupEnd : startTimestamp.add(_stakingDuration).add(_purchaseDuration).add(_lockupDuration),\\n            sharesTotal : 0,\\n            lastRewardTimestamp : startTimestamp.add(allocationDelay),\\n            accLTokenPerShare : 0,\\n            totalBought:0\\n        }));\\n        pickUpTokensAllowed[poolInfo.length-1]=_pickUpTokensAllowed;\\n    }\\n\\n\\n    function changeFee(uint256 _feeBP) external onlyOwner {\\n        require(_feeBP <= FEE_MAX, \\\"changeFee: the fee is too high\\\");\\n        feeBP = _feeBP;\\n        emit ChangeFeeBP(_feeBP);\\n    }\\n\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\n        feeAddress = _feeAddress;\\n        emit SetFeeAddress(msg.sender, _feeAddress);\\n    }\\n\\n    // View function to see pending lToken allocation on frontend.\\n    function pendingAllocation(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_user][_pid];\\n        uint256 accLTokenPerShare = pool.accLTokenPerShare;\\n        uint256 lpSupply = pool.sharesTotal;\\n        if (block.timestamp > pool.lastRewardTimestamp \\n            && pool.lastRewardTimestamp < pool.stakingEnd \\n            && lpSupply != 0) {\\n\\n            uint256 multiplier = block.timestamp > pool.stakingEnd ? \\n                pool.stakingEnd.sub(pool.lastRewardTimestamp):block.timestamp.sub(pool.lastRewardTimestamp);\\n\\n            uint256 reward = multiplier.mul(pool.lTokenPerSec);\\n            accLTokenPerShare = accLTokenPerShare.add(reward.mul(1e18).div(lpSupply));\\n            \\n        }\\n        return user.totalDeposit.mul(accLTokenPerShare).div(1e18).sub(user.rewardDebt);\\n        \\n    }\\n\\n    \\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        \\n        if (block.timestamp <= pool.lastRewardTimestamp \\n        || pool.lastRewardTimestamp>=pool.stakingEnd) {\\n            return;\\n        }\\n\\n        if (pool.sharesTotal == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 multiplier = block.timestamp > pool.stakingEnd ? \\n        pool.stakingEnd.sub(pool.lastRewardTimestamp):block.timestamp.sub(pool.lastRewardTimestamp);\\n\\n        uint256 reward = multiplier.mul(pool.lTokenPerSec);\\n        pool.accLTokenPerShare = pool.accLTokenPerShare.add(reward.mul(1e18).div(pool.sharesTotal));\\n        pool.lastRewardTimestamp = block.timestamp;\\n\\n    }\\n\\n    // Deposit MMpro tokens for lTokens allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        \\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n          block.timestamp > pool.startTimestamp && block.timestamp <= pool.stakingEnd,\\n          \\\"deposit: not time to deposit\\\"\\n        );\\n        UserInfo storage user = userInfo[msg.sender][_pid];\\n        require(pool.depositLimit==0 || user.totalDeposit.add(_amount) <= pool.depositLimit,\\n        \\\"deposit limit exceeded\\\");\\n        updatePool(_pid);\\n\\n        if (user.totalDeposit > 0) {\\n            user.allocatedAmount = user.allocatedAmount\\n            .add(\\n              user.totalDeposit\\n              .mul(pool.accLTokenPerShare)\\n              .div(1e18)\\n              .sub(user.rewardDebt)\\n            );\\n        }\\n        if (_amount > 0) {\\n            MMpro.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.totalDeposit = user.totalDeposit.add(_amount);\\n            pool.sharesTotal = pool.sharesTotal.add(_amount);\\n        }\\n        user.rewardDebt = user.totalDeposit.mul(pool.accLTokenPerShare).div(1e18);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw MMpro tokens.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n          block.timestamp > pool.stakingEnd,\\n          \\\"withdraw: not time to withdraw\\\"\\n        );\\n        UserInfo storage user = userInfo[msg.sender][_pid];\\n        require(user.totalDeposit >= _amount, \\\"withdraw: _amount not good\\\");\\n        updatePool(_pid);\\n\\n        user.allocatedAmount = user.allocatedAmount\\n            .add(\\n              user.totalDeposit\\n              .mul(pool.accLTokenPerShare)\\n              .div(1e18)\\n              .sub(user.rewardDebt)\\n            );\\n\\n        if (_amount > 0) {\\n            user.totalDeposit = user.totalDeposit.sub(_amount);\\n            pool.sharesTotal = pool.sharesTotal.sub(_amount);\\n            MMpro.safeTransfer(address(msg.sender), _amount);\\n        }\\n        user.rewardDebt = user.totalDeposit.mul(pool.accLTokenPerShare).div(1e18);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    function buyToken(uint256 _pid, uint256 _amount,uint256 stableId) public {\\n        require(stableId<stablesInfo.length,\\\"buyToken: stableId out of range\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        \\n        require(\\n          block.timestamp > pool.stakingEnd && block.timestamp <= pool.purchaseEnd,\\n          \\\"buyToken: not time to buy\\\"\\n        );\\n\\n        UserInfo storage user = userInfo[msg.sender][_pid];\\n\\n        updatePool(_pid);\\n        \\n        if (user.totalDeposit > 0) {\\n            user.allocatedAmount = user.allocatedAmount\\n            .add(\\n              user.totalDeposit\\n              .mul(pool.accLTokenPerShare)\\n              .div(1e18)\\n              .sub(user.rewardDebt)\\n            );\\n        }\\n\\n        uint256 stableTokenAmount = pool.lTokenPrice.mul(_amount).div(1e5);\\n\\n        if(stableTokenAmount>0){\\n            \\n            require(user.allocatedAmount >= _amount, \\\"buyToken: _amount not good\\\");\\n\\n            user.allocatedAmount=user.allocatedAmount.sub(_amount);\\n            user.purchasedAmount=user.purchasedAmount.add(_amount);            \\n            pool.totalBought = pool.totalBought.add(_amount);\\n\\n            IERC20 stableToken=stablesInfo[stableId];\\n            uint256 feeAmount=stableTokenAmount.mul(feeBP).div(10000);\\n            if(feeAmount>0){\\n                stableTokenAmount=stableTokenAmount.sub(feeAmount);\\n                stableToken.safeTransferFrom(address(msg.sender), feeAddress, feeAmount);\\n            }\\n            stableToken.safeTransferFrom(address(msg.sender), pool.owner, stableTokenAmount);\\n            emit BuyToken(msg.sender, _pid, _amount);\\n        }\\n    }\\n\\n    function pickUpTokens(uint256 _pid) public{\\n        require(pickUpTokensAllowed[_pid],\\\" not allowed\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n          block.timestamp > pool.lockupEnd,\\n          \\\"pickUpTokens: tokens are still locked\\\"\\n        );\\n        UserInfo storage user = userInfo[msg.sender][_pid];\\n        uint256 amount = user.purchasedAmount;\\n        user.purchasedAmount=0;\\n        if(amount>0){\\n            pool.lToken.safeTransfer(msg.sender, amount);\\n            emit PickUpTokens(msg.sender, _pid, amount);\\n        }\\n        \\n    }\\n\\n    function takeAwayUnsold(uint256 _pid) external onlyPoolOwner(_pid){\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(\\n          block.timestamp > pool.purchaseEnd,\\n          \\\"takeAwayUnsold: the sale is not over yet\\\"\\n        );\\n        \\n        uint256 unsoldAmount = pool.lTokenPerSec.mul(\\n            pool.stakingEnd\\n            .sub(pool.startTimestamp.add(allocationDelay))\\n            ).sub(pool.totalBought);\\n        \\n        if(unsoldAmount>pool.lToken.balanceOf(address(this))){\\n            unsoldAmount=pool.lToken.balanceOf(address(this));\\n        }\\n        if(unsoldAmount>0){\\n            pool.lToken.safeTransfer(msg.sender,unsoldAmount);\\n            emit TakeAwayUnsold(_pid, unsoldAmount);\\n        }\\n    }\\n    \\n}\"\r\n    },\r\n    \"/contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) =\\n            target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lib/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lib/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\"\r\n    },\r\n    \"/contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\n\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n            address(token).functionCall(\\n                data,\\n                \\\"SafeERC20: low-level call failed\\\"\\n            );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_MMpro\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_stablesInfo\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_allocationDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBP\",\"type\":\"uint256\"}],\"name\":\"ChangeFeeBP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PickUpTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeAwayUnsold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MMpro\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolOwner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensAllocationQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_pickUpTokensAllowed\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBP\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pickUpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pickUpTokensAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lTokenPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBought\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stablesInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"takeAwayUnsold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Launchpad", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006067490d05f3cf2fdffc0e353b1f5fd6e5ccdf70000000000000000000000000e3e757fe07aa669f400448ac999dca2313e04e1a00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e100000000000000000000000000000000000000000000000000000000000000004000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}