{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Governance/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Governance contract\\n * @author dlabs.hu\\n * @dev This contract is for handling governance and configuration changes\\n */\\n\\nimport \\\"../Interfaces/IVault.sol\\\";\\nimport \\\"../Interfaces/IAffiliate.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ncontract Governance {\\n\\nmapping(address => uint256) public curator_proportions;                             // Proportions of the curators\\naddress[] public governedContracts;                                                 // The governed addresses\\n\\n/* ConfManager system mappings and vars */\\nmapping(string => config_struct) public Configuration;\\nmapping(string => config_struct) public invoteConfiguration;\\nmapping(uint256 => string) public ID_to_name;\\n\\nmapping(address => uint256) public conf_curator_timer;                           // Last action time by curator for locking\\nmapping(uint256 => uint256) public conf_votes;                                   // ID to see if threshold is passed\\nmapping(uint256 => uint256) public conf_time_limit;                              // Actions needs to be triggered in time\\nuint256 public conf_counter = 6;                                                 // Starting from 6+1, 0-6 are reserved for global config\\n\\nstruct config_struct {\\n  string name;\\n  bool Running;\\n  address govaddr;\\n  address[] managers;\\n  bool[] boolslot;\\n  address[] address_slot;\\n  uint256[] uint256_slot;\\n  bytes32[] bytes32_slot;\\n}\\n\\nmapping(uint256 => bool) public triggered;                                          // If true, it was triggered before and will be blocked\\nstring constant Core = \\\"Main\\\";                                                               // Core string for consistency\\n\\n/* Action manager system mappings */\\nmapping(address => uint256) public action_curator_timer;                            // Last action time by curator for locking\\nmapping(uint256 => uint256) public action_id_to_vote;                               // ID to see if threshold is passed\\nmapping(uint256 => uint256) public action_time_limit;                               // Actions needs to be triggered in time\\nmapping(uint256 => address) public action_can_be_triggered_by;                      // Address which can trigger the action after threshold is passed\\n\\n/* This is used to store calldata and make it takeable from external contracts.\\n@dev be careful with this, low level calls can be tricky. */\\nmapping(uint256 => bytes) public action_id_to_calldata;                             // Mapping actions to relevant calldata.\\n\\n// Action threshold and time limit, so the community can react to changes\\nuint256 public action_threshold;                                                    // This threshold needs to be passed for action to happen\\nuint256 public vote_time_threshold;                                                 // You can only vote once per timer - this is for security and gas optimization\\nuint256 public vote_conf_time_threshold;                                            // Config\\n\\nevent Transfer_Proportion(uint256 beneficiary_proportion);\\nevent Action_Proposed(uint256 id);\\nevent Action_Support(uint256 id);\\nevent Action_Trigger(uint256 id);\\nevent Config_Proposed(string name);\\nevent Config_Supported(string name);\\n\\nmodifier onlyCurators(){\\n  require(curator_proportions[msg.sender] > 0, \\\"Not a curator\\\");\\n  _;\\n}\\n\\n// The Governance contract needs to be deployed first, before all\\n// Max proportions are 100, shared among curators\\n constructor(\\n    address[] memory _curators,\\n    uint256[] memory _curator_proportions,\\n    address[] memory _managers\\n) {\\n    action_threshold = 30;                                        // Threshold -> from this, configs and actions can be triggered\\n    vote_time_threshold = 600;                                    // Onc conf change per 10 mins, in v2 we can make it longer\\n    vote_conf_time_threshold = 0;\\n\\n    require(_curators.length == _curator_proportions.length, \\\"Curators and proportions length mismatch\\\");\\n\\n    uint totalProp;\\n    for (uint256 i = 0; i < _curators.length; i++) {\\n        curator_proportions[_curators[i]] = _curator_proportions[i];\\n        totalProp += _curator_proportions[i];\\n    }\\n\\n    require(totalProp == 100, \\\"Total proportions must be 100\\\");\\n\\n    ID_to_name[0] = Core;                                         // Core config init\\n    core_govAddr_conf(address(this));                             // Global governance address\\n    core_emergency_conf();                                        // Emergency stop value is enforced to be Running==true from start.\\n    core_managers_conf(_managers);\\n}\\n\\n// Core functions, only used during init\\nfunction core_govAddr_conf(address _address) private {\\n    Configuration[Core].name = Core;\\n    Configuration[Core].govaddr = _address;}\\n\\nfunction core_emergency_conf() private {\\n    Configuration[Core].Running = true;}\\n\\nfunction core_managers_conf(address[] memory _addresses) private {\\n    Configuration[Core].managers = _addresses;\\n    address[] storage addGovAddr = Configuration[Core].managers; // Constructor memory -> Storage\\n    addGovAddr.push(address(this));\\n    Configuration[Core].managers = addGovAddr;\\n    }\\n\\n// Only the addresses on the manager list are allowed to execute\\nfunction onlyManagers() internal view {\\n      bool ok;\\n          address [] memory tempman =  read_core_managers();\\n          for (uint i=0; i < tempman.length; i++) {\\n              if (tempman[i] == msg.sender) {ok = true;}\\n          }\\n          if (ok == true){} else {revert(\\\"0\\\");} //Not manager*/\\n}\\n\\nbool public deployed = false;\\nfunction setToDeployed() public returns (bool) {\\n  onlyManagers();\\n  deployed = true;\\n  return deployed;\\n}\\n\\nfunction ActivateDeployedMosaic(\\n    address _userProfile,\\n    address _affiliate,\\n    address _fees,\\n    address _register,\\n    address _poolFactory,\\n    address _feeTo,\\n    address _swapsContract,\\n    address _oracle,\\n    address _deposit,\\n    address _burner,\\n    address _booster\\n) public {\\n    onlyManagers();\\n    require(deployed == false, \\\"It is done.\\\");\\n\\n        Configuration[Core].address_slot.push(msg.sender); //0 owner\\n        Configuration[Core].address_slot.push(_userProfile); //1\\n        Configuration[Core].address_slot.push(_affiliate); //2\\n        Configuration[Core].address_slot.push(_fees); //3\\n        Configuration[Core].address_slot.push(_register); //4\\n        Configuration[Core].address_slot.push(_poolFactory); //5\\n        Configuration[Core].address_slot.push(_feeTo); //6 - duplicate? fees and feeToo are same?\\n        Configuration[Core].address_slot.push(_swapsContract); //7\\n        Configuration[Core].address_slot.push(_oracle); //8\\n        Configuration[Core].address_slot.push(_deposit); //9\\n        Configuration[Core].address_slot.push(_burner); //10\\n        Configuration[Core].address_slot.push(_booster); //11\\n\\n        IAffiliate(_affiliate).selfManageMe();\\n}\\n\\n/* Transfer proportion */\\nfunction transfer_proportion(address _address, uint256 _amount) external returns (uint256) {\\n    require(curator_proportions[msg.sender] >= _amount, \\\"Not enough proportions\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet, your votes need to conclude\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    curator_proportions[msg.sender] = curator_proportions[msg.sender] - _amount;\\n    curator_proportions[_address] = curator_proportions[_address] + _amount;\\n    emit Transfer_Proportion(curator_proportions[_address]);\\n    return curator_proportions[_address];\\n  }\\n\\n/* Configuration manager */\\n\\n// Add or update config.\\nfunction update_config(string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n  ) internal returns (string memory){\\n  Configuration[_name].name = _name;\\n  Configuration[_name].Running = _Running;\\n  Configuration[_name].govaddr = _govaddr;\\n  Configuration[_name].managers = _managers;\\n  Configuration[_name].boolslot = _boolslot;\\n  Configuration[_name].address_slot = _address_slot;\\n  Configuration[_name].uint256_slot = _uint256_slot;\\n  Configuration[_name].bytes32_slot = _bytes32_slot;\\n  return _name;\\n}\\n\\n// Create temp configuration\\nfunction votein_config(string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n) internal returns (string memory){\\n  invoteConfiguration[_name].name = _name;\\n  invoteConfiguration[_name].Running = _Running;\\n  invoteConfiguration[_name].govaddr = _govaddr;\\n  invoteConfiguration[_name].managers = _managers;\\n  invoteConfiguration[_name].boolslot = _boolslot;\\n  invoteConfiguration[_name].address_slot = _address_slot;\\n  invoteConfiguration[_name].uint256_slot = _uint256_slot;\\n  invoteConfiguration[_name].bytes32_slot = _bytes32_slot;\\n  return _name;\\n}\\n\\n// Propose config\\nfunction propose_config(\\n  string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n    conf_counter = conf_counter + 1;\\n    require(conf_time_limit[conf_counter] == 0, \\\"In progress\\\");\\n    conf_curator_timer[msg.sender] = block.timestamp;\\n    conf_time_limit[conf_counter] = block.timestamp + vote_time_threshold;\\n    conf_votes[conf_counter] = curator_proportions[msg.sender];\\n    ID_to_name[conf_counter] = _name;\\n    triggered[conf_counter] = false; // It keep rising, so can't be overwritten from true in past value\\n    votein_config(\\n        _name,\\n        _Running,\\n        _govaddr,\\n        _managers,\\n        _boolslot,\\n        _address_slot,\\n        _uint256_slot,\\n        _bytes32_slot\\n    );\\n    emit Config_Proposed(_name);\\n    return conf_counter;\\n  }\\n\\n// Use this with caution!\\nfunction propose_core_change(address _govaddr, bool _Running, address[] memory _managers, address[] memory _owners) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n    require(conf_time_limit[conf_counter] == 0, \\\"In progress\\\");\\n    conf_curator_timer[msg.sender] = block.timestamp;\\n    conf_time_limit[conf_counter] = block.timestamp + vote_time_threshold;\\n    conf_votes[conf_counter] = curator_proportions[msg.sender];\\n    ID_to_name[conf_counter] = Core;\\n    triggered[conf_counter] = false; // It keep rising, so can't be overwritten from true in past value\\n\\n    invoteConfiguration[Core].name = Core;\\n    invoteConfiguration[Core].govaddr = _govaddr;\\n    invoteConfiguration[Core].Running = _Running;\\n    invoteConfiguration[Core].managers = _managers;\\n    invoteConfiguration[Core].address_slot = _owners;\\n    return conf_counter;\\n}\\n\\n// ID and name are requested together for supporting a config because of awareness.\\nfunction support_config_proposal(uint256 _confCount, string memory _name) external returns (string memory) {\\n  require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n  require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n  require(conf_time_limit[_confCount] > block.timestamp, \\\"Timed out\\\");\\n  require(conf_time_limit[_confCount] != 0, \\\"Not started\\\");\\n  require(keccak256(abi.encodePacked(ID_to_name[_confCount])) == keccak256(abi.encodePacked(_name)), \\\"You are not aware, Neo.\\\");\\n  conf_curator_timer[msg.sender] = block.timestamp;\\n  conf_votes[_confCount] = conf_votes[_confCount] + curator_proportions[msg.sender];\\n  if (conf_votes[_confCount] >= action_threshold && triggered[_confCount] == false) {\\n    triggered[_confCount] = true;\\n    string memory name = ID_to_name[_confCount];\\n    update_config(\\n    invoteConfiguration[name].name,\\n    invoteConfiguration[name].Running,\\n    invoteConfiguration[name].govaddr,\\n    invoteConfiguration[name].managers,\\n    invoteConfiguration[name].boolslot,\\n    invoteConfiguration[name].address_slot,\\n    invoteConfiguration[name].uint256_slot,\\n    invoteConfiguration[name].bytes32_slot\\n    );\\n\\n    delete invoteConfiguration[name].name;\\n    delete invoteConfiguration[name].Running;\\n    delete invoteConfiguration[name].govaddr;\\n    delete invoteConfiguration[name].managers;\\n    delete invoteConfiguration[name].boolslot;\\n    delete invoteConfiguration[name].address_slot;\\n    delete invoteConfiguration[name].uint256_slot;\\n    delete invoteConfiguration[name].bytes32_slot;\\n\\n    conf_votes[_confCount] = 0;\\n  }\\n  emit Config_Supported(_name);\\n  return Configuration[_name].name = _name;\\n}\\n\\n/* Read configurations */\\n\\nfunction read_core_Running() public view returns (bool) {return Configuration[Core].Running;}\\nfunction read_core_govAddr() public view returns (address) {return Configuration[Core].govaddr;}\\nfunction read_core_managers() public view returns (address[] memory) {return Configuration[Core].managers;}\\nfunction read_core_owners() public view returns (address[] memory) {return Configuration[Core].address_slot;}\\n\\nfunction read_config_Main_addressN(uint256 _n) public view returns (address) {\\n  return Configuration[\\\"Main\\\"].address_slot[_n];\\n}\\n\\n// Can't read full because of stack too deep limit\\nfunction read_config_core(string memory _name) public view returns (\\n  string memory,\\n  bool,\\n  address,\\n  address[] memory){\\n  return (\\n  Configuration[_name].name,\\n  Configuration[_name].Running,\\n  Configuration[_name].govaddr,\\n  Configuration[_name].managers);}\\nfunction read_config_name(string memory _name) public view returns (string memory) {return Configuration[_name].name;}\\nfunction read_config_emergencyStatus(string memory _name) public view returns (bool) {return Configuration[_name].Running;}\\nfunction read_config_governAddress(string memory _name) public view returns (address) {return Configuration[_name].govaddr;}\\nfunction read_config_Managers(string memory _name) public view returns (address[] memory) {return Configuration[_name].managers;}\\n\\nfunction read_config_bool_slot(string memory _name) public view returns (bool[] memory) {return Configuration[_name].boolslot;}\\nfunction read_config_address_slot(string memory _name) public view returns (address[] memory) {return Configuration[_name].address_slot;}\\nfunction read_config_uint256_slot(string memory _name) public view returns (uint256[] memory) {return Configuration[_name].uint256_slot;}\\nfunction read_config_bytes32_slot(string memory _name) public view returns (bytes32[] memory) {return Configuration[_name].bytes32_slot;}\\n\\nfunction read_config_Managers_batched(string memory _name, uint256[] memory _ids) public view returns (address[] memory) {\\n    address[] memory result = new address[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].managers[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_bool_slot_batched(string memory _name, uint256[] memory _ids) public view returns (bool[] memory) {\\n    bool[] memory result = new bool[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].boolslot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_address_slot_batched(string memory _name, uint256[] memory _ids) public view returns (address[] memory) {\\n    address[] memory result = new address[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].address_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_uint256_slot_batched(string memory _name, uint256[] memory _ids) public view returns (uint256[] memory) {\\n    uint256[] memory result = new uint256[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].uint256_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_bytes32_slot_batched(string memory _name, uint256[] memory _ids) public view returns (bytes32[] memory) {\\n    bytes32[] memory result = new bytes32[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].bytes32_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\n\\n// Read invote configuration\\n// Can't read full because of stack too deep limit\\nfunction read_invoteConfig_core(string calldata _name) public view returns (\\n  string memory,\\n  bool,\\n  address,\\n  address[] memory){\\n  return (\\n  invoteConfiguration[_name].name,\\n  invoteConfiguration[_name].Running,\\n  invoteConfiguration[_name].govaddr,\\n  invoteConfiguration[_name].managers);}\\nfunction read_invoteConfig_name(string memory _name) public view returns (string memory) {return invoteConfiguration[_name].name;}\\nfunction read_invoteConfig_emergencyStatus(string memory _name) public view returns (bool) {return invoteConfiguration[_name].Running;}\\nfunction read_invoteConfig_governAddress(string memory _name) public view returns (address) {return invoteConfiguration[_name].govaddr;}\\nfunction read_invoteConfig_Managers(string memory _name) public view returns (address[] memory) {return invoteConfiguration[_name].managers;}\\nfunction read_invoteConfig_boolslot(string memory _name) public view returns (bool[] memory) {return invoteConfiguration[_name].boolslot;}\\nfunction read_invoteConfig_address_slot(string memory _name) public view returns (address[] memory) {return invoteConfiguration[_name].address_slot;}\\nfunction read_invoteConfig_uint256_slot(string memory _name) public view returns (uint256[] memory) {return invoteConfiguration[_name].uint256_slot;}\\nfunction read_invoteConfig_bytes32_slot(string memory _name) public view returns (bytes32[] memory) {return invoteConfiguration[_name].bytes32_slot;}\\n\\n\\n/* Action manager system */\\n\\n// Propose an action, regardless of which contract/address it resides in\\nfunction propose_action(uint256 _id, address _trigger_address, bytes memory _calldata) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(action_id_to_calldata[_id].length == 0, \\\"Calldata already set\\\");\\n    require(action_time_limit[_id] == 0, \\\"Create a new one\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    action_time_limit[_id] = block.timestamp + vote_time_threshold;\\n    action_can_be_triggered_by[_id] = _trigger_address;\\n    action_id_to_vote[_id] = curator_proportions[msg.sender];\\n    action_id_to_calldata[_id] = _calldata;\\n    triggered[_id] = false;\\n    emit Action_Proposed(_id);\\n    return _id;\\n  }\\n\\n// Support an already submitted action\\nfunction support_actions(uint256 _id) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet\\\");\\n    require(action_time_limit[_id] > block.timestamp, \\\"Action timed out\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    action_id_to_vote[_id] = action_id_to_vote[_id] + curator_proportions[msg.sender];\\n    emit Action_Support(_id);\\n    return _id;\\n  }\\n\\n// Trigger action by allowed smart contract address\\n// Only returns calldata, does not guarantee execution success! Triggerer is responsible, choose wisely.\\nfunction trigger_action(uint256 _id) external returns (bytes memory) {\\n    require(action_id_to_vote[_id] >= action_threshold, \\\"Threshold not passed\\\");\\n    require(action_time_limit[_id] > block.timestamp, \\\"Action timed out\\\");\\n    require(action_can_be_triggered_by[_id] == msg.sender, \\\"You are not the triggerer\\\");\\n    require(triggered[_id] == false, \\\"Already triggered\\\");\\n    triggered[_id] = true;\\n    action_id_to_vote[_id] = 0;\\n    emit Action_Trigger(_id);\\n    return action_id_to_calldata[_id];\\n}\\n\\n/* Pure function for generating signatures */\\nfunction generator(string memory _func) public pure returns (bytes memory) {\\n        return abi.encodeWithSignature(_func);\\n    }\\n\\n/* Execution and mass config updates */\\n\\n/* Update contracts address list */\\nfunction update_All(address [] memory _addresses) external onlyCurators returns (address [] memory) {\\n  governedContracts = _addresses;\\n  return governedContracts;\\n}\\n\\n/* Update all contracts from address list */\\nfunction selfManageMe_All() external onlyCurators {\\n  for (uint256 i = 0; i < governedContracts.length; i++) {\\n    _execute_Manage(governedContracts[i]);\\n  }\\n}\\n\\n/* Execute external contract call: selfManageMe() */\\nfunction execute_Manage(address _contractA) external onlyCurators {\\n    _execute_Manage(_contractA);\\n}\\n\\nfunction _execute_Manage(address _contractA) internal {\\n    require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n    IGoverned(_contractA).selfManageMe();\\n}\\n\\n/* Execute external contract call: selfManageMe() */\\nfunction execute_batch_Manage(address[] calldata _contracts) external onlyCurators {\\n  for (uint i; i < _contracts.length; i++) {\\n    _execute_Manage(_contracts[i]);\\n  }\\n}\\n\\n/* Execute external contract calls with any string */\\nfunction execute_ManageBytes(address _contractA, string calldata _call, bytes calldata _data) external onlyCurators {\\n  _execute_ManageBytes(_contractA, _call, _data);\\n}\\n\\nfunction execute_batch_ManageBytes(address[] calldata _contracts, string[] calldata _calls, bytes[] calldata _datas) external onlyCurators {\\n  require(_contracts.length == _calls.length, \\\"Governance: _conracts and _calls length does not match\\\");\\n  require(_calls.length == _datas.length, \\\"Governance: _calls and _datas length does not match\\\");\\n  for (uint i; i < _contracts.length; i++) {\\n    _execute_ManageBytes(_contracts[i], _calls[i], _datas[i]);\\n  }\\n}\\n\\nfunction _execute_ManageBytes(address _contractA, string calldata _call, bytes calldata _data) internal {\\n  require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n  require(bytes(_call).length == 0 || bytes(_call).length >=3, \\\"provide a valid function specification\\\");\\n\\n  for (uint256 i = 0; i < bytes(_call).length; i++) {\\n    require(bytes(_call)[i] != 0x20, \\\"No spaces in fun please\\\");\\n  }\\n\\n  bytes4 signature;\\n  if (bytes(_call).length != 0) {\\n      signature = (bytes4(keccak256(bytes(_call))));\\n  } else {\\n      signature = \\\"\\\";\\n  }\\n\\n  (bool success, bytes memory retData) = _contractA.call(abi.encodePacked(signature, _data));\\n  _evaluateCallReturn(success, retData);\\n}\\n\\n/* Execute external contract calls with address array */\\nfunction execute_ManageList(address _contractA, string calldata _funcName, address[] calldata address_array) external onlyCurators {\\n  require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n  (bool success, bytes memory retData) = _contractA.call(abi.encodeWithSignature(_funcName, address_array));\\n  _evaluateCallReturn(success, retData);\\n}\\n\\n/* Update Vault values */\\nfunction execute_Vault_update(address _vaultAddress) external onlyCurators {\\n  IVault(_vaultAddress).selfManageMe();\\n}\\n\\nfunction _evaluateCallReturn(bool success, bytes memory retData) internal pure {\\n    if (!success) {\\n      if (retData.length >= 68) {\\n          bytes memory reason = new bytes(retData.length - 68);\\n          for (uint i = 0; i < reason.length; i++) {\\n              reason[i] = retData[i + 68];\\n          }\\n          revert(string(reason));\\n      } else revert(\\\"Governance: FAILX\\\");\\n  }\\n}\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Governance/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Governed base contract\\n * @author dlabs.hu\\n * @dev This contract is base for contracts governed by Governance\\n */\\n\\nimport \\\"./Governance.sol\\\";\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\nabstract contract Governed is IGoverned {\\n    GovernanceState internal governanceState;\\n\\n    constructor() {\\n      governanceState.running = true;\\n      governanceState.governanceAddress = address(this);\\n    }\\n\\n    function getGovernanceState() public view returns (GovernanceState memory govState) {\\n      return governanceState;\\n    }\\n\\n    // Modifier responsible for checking if emergency stop was triggered, default is Running == true\\n    modifier Live {\\n        LiveFun();\\n        _;\\n    }\\n\\n    modifier notLive {\\n        notLiveFun();\\n        _;\\n    }\\n\\n\\n    error Governed__EmergencyStopped();\\n    function LiveFun() internal virtual view {\\n        if (!governanceState.running) revert Governed__EmergencyStopped();\\n    }\\n\\n    error Governed__NotStopped();\\n    function notLiveFun() internal virtual view {\\n        if (governanceState.running) revert Governed__NotStopped();\\n    }\\n\\n    modifier onlyManagers() {\\n        onlyManagersFun();\\n        _;\\n    }\\n\\n    error Governed__NotManager(address caller);\\n    function onlyManagersFun() internal virtual view {\\n        if (!isManagerFun(msg.sender)) revert Governed__NotManager(msg.sender);\\n    }\\n\\n\\n    function isManagerFun(address a) internal virtual view returns (bool) {\\n        if (a == governanceState.governanceAddress) {\\n            return true;\\n        }\\n        for (uint i=0; i < governanceState.managers.length; i++) {\\n            if (governanceState.managers[i] == a) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function selfManageMe() external virtual {\\n        onlyManagersFun();\\n        LiveFun();\\n        _selfManageMeBefore();\\n        address governAddress = governanceState.governanceAddress;\\n        bool nextRunning = IGovernance(governAddress).read_core_Running();\\n        if (governanceState.running != nextRunning) _onBeforeEmergencyChange(nextRunning);\\n        governanceState.running = nextRunning;\\n        governanceState.managers = IGovernance(governAddress).read_core_managers();               // List of managers\\n        governanceState.governanceAddress = IGovernance(governAddress).read_core_govAddr();\\n        _selfManageMeAfter();\\n    }\\n\\n    function _selfManageMeBefore() internal virtual;\\n    function _selfManageMeAfter() internal virtual;\\n    function _onBeforeEmergencyChange(bool nextRunning) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/helpers/IEntropy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface ISimpleEntropy {\\n    // function random(uint256 seed) external view returns (uint256);\\n    function simpleRandom() external view returns (uint256);\\n    function simpleRandom(uint256 seed) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/helpers/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/helpers/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/helpers/SimpleEntropy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IEntropy.sol\\\";\\n\\ncontract SimpleEntropy is ISimpleEntropy {\\n\\n    function simpleRandom() external view returns (uint256) {\\n        return _simpleRandom(0);\\n    }\\n\\n    function simpleRandom(uint256 seed) external view returns (uint256) {\\n        return _simpleRandom(seed);\\n    }\\n\\n    function _simpleRandom(uint256 seed) internal view returns (uint256) {\\n        uint256 blockNumber = block.number;\\n        if (blockNumber < 4) blockNumber = 4;\\n        return uint256(keccak256(abi.encodePacked(\\n            block.timestamp,\\n            block.coinbase,\\n            blockhash(block.number - 1),\\n            msg.sender,\\n            seed,\\n            tx.origin\\n        )));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IAffiliate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Interfaces/IUserProfile.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IAffiliate is IGoverned {\\n    struct AffiliateLevel {\\n        uint8 rank;\\n        uint8 commissionLevels; // eligibility for how many levels affiliate comission\\n        uint16 referralBuyFeeDiscount; // buy fee disccount for the referrals refistering for the user - 10000 = 100%\\n        uint16 referralCountThreshold; // minimum amount of direct referrals needed for level\\n        uint16 stakingBonus;\\n        uint16 conversionRatio;\\n        uint32 claimLimit; // max comission per month claimable - in usd value, not xe18!\\n        uint256 kdxStakeThreshold; // minimum amount of kdx stake needed\\n        uint256 purchaseThreshold; // minimum amount of self basket purchase needed\\n        uint256 referralPurchaseThreshold; // minimum amount of referral basket purchase needed\\n        uint256 traderPurchaseThreshold; // minimum amount of user basket purchase (for traders) needed\\n\\n        string rankName;\\n    }\\n\\n    struct AffiliateUserData {\\n        uint32 affiliateRevision;\\n        uint32 activeReferralCount;\\n        uint256 userPurchase;\\n        uint256 referralPurchase;\\n        uint256 traderPurchase;\\n        uint256 kdxStake;\\n    }\\n\\n    struct AffiliateConfig {\\n        uint16 level1RewardShare; // 0..10000. 6000 -> 60% of affiliate rewards go to level 1, 40% to level2\\n        uint240 activeReferralPurchaseThreshold; // the min amount of (usdt) purchase in wei to consider a referral active\\n    }\\n\\n    function getCommissionLevelsForRanks(uint8 rank, uint8 rank2) external view returns (uint8 commissionLevels, uint8 commissionLevels2);\\n\\n    function getLevelsAndConversionAndClaimLimitForRank(uint8 rank) external view returns (uint8 commissionLevels, uint16 conversionRatio, uint32 claimLimit);\\n\\n    function getConfig() external view returns (AffiliateConfig memory config);\\n\\n    // get the number of affiliate levels\\n    function getLevelCount() external view returns (uint256 count);\\n\\n    function getLevelDetails(uint256 _idx) external view returns (AffiliateLevel memory level);\\n\\n    function getAllLevelDetails() external view returns (AffiliateLevel[] memory levels);\\n\\n    function getAffiliateUserData(address user) external view returns (AffiliateUserData memory data);\\n\\n    function getUserPurchaseAmount(address user) external view returns (uint256 amount);\\n\\n    function getReferralPurchaseAmount(address user) external view returns (uint256 amount);\\n\\n    function userStakeChanged(address user, address referredBy, uint256 kdxAmount) external;\\n\\n    function registerUserPurchase(address user, address referredBy, address trader, uint256 usdAmount) external;\\n    function registerUserPurchaseAsTokens(address user, address referredBy, address trader, address[] memory tokens, uint256[] memory tokenAmounts) external;\\n\\n    event AffiliateConfigUpdated(AffiliateConfig _newConfig, AffiliateConfig config);\\n\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IAffiliateBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface IAffiliateBooster {\\n    // Structs\\n    struct AffiliateBoosterState {\\n        uint64 currentEpoch;         // current epoch number\\n        uint64 currentEpochStart;    // timestamp of the start of the current epoch\\n        uint16 epochSize;            // number of referrals allocated per epoch\\n        uint32 epochTime;            // length of epoch (in seconds)\\n        uint64 totalTicketsSpent;    // total number of tickets used via booster\\n        uint64 totalTicketCount;     // total number of tickets bought via booster\\n        bool feeTokenBurnable;      // whether the fee token is burnable\\n        uint8[] epochWeights;        // an array of % weights of tickets in past N epochs\\n        address feeToken;            // address of the fee token\\n        uint256 totalPlayerWeight;   // total weight of all players in the booster\\n        uint256 ticketPrice;         // price of a ticket in the booster\\n        address feeTo;\\n    }\\n\\n\\n    struct AffiliateBoosterEpoch {\\n        uint64 ticketsBought;   // Total number of tickets bought during this epoch\\n        uint64 ticketsSpent;    // Total number of tickets spent during this epoch\\n        uint64 ticketsActive;   // Still active tickets in epoch\\n        uint64 epochStart;      // Timestamp of when this epoch started (in seconds since Unix epoch)\\n    }\\n\\n    // Events\\n    event TicketBought(uint256 epoch, address user, uint256 count, uint256 price);\\n    event TicketSpent(uint256 epoch, address user);\\n    event ReferralPicked(address pickedAddress);\\n    event EpochClosed(uint256 epochId);\\n    event CallerAllowed(address caller, bool);\\n    event EpochWeightsChanged(uint8[] weights);\\n\\n    // Getter functions\\n    function getState() external view returns (AffiliateBoosterState memory stateStruct);\\n    function getEpochStates(uint256[] memory epochIds) external view returns (AffiliateBoosterEpoch[] memory epochStates);\\n    function getEpochTickets(uint256 epochId) external view returns (address[] memory tickets);\\n    function getEpochTicket(uint256 epochId, uint256 idx) external view returns (address user);\\n    function getEpochTicketsCount(uint256 epochId) external view returns (uint256 count);\\n    function getUserTickets(address user, uint256[] memory epochIds) external view returns (uint64[] memory userTickets);\\n    function getCurrentEpoch() external view returns (uint64 epochSize);\\n    function getCurrentEpochState() external view returns (AffiliateBoosterEpoch memory epochState);\\n    function getCurrentEpochStart() external view returns (uint64 epochStart);\\n    function getEpochSize() external view returns (uint16 epochSize);\\n    function getEpochTime() external view returns (uint32 epochTime);\\n    function getTotalTicketCount() external view returns (uint64 totalTicketCount);\\n    function getTotalTicketsSpent() external view returns (uint64 totalTicketsSpent);\\n    function getEpochWeights() external view returns (uint8[] memory epochWeights);\\n    function getFeeToken() external view returns (address feeToken);\\n    function getFeeTokenBurnable() external view returns (bool burnable);\\n    function getTotalPlayerWeight() external view returns (uint256 totalPlayerWeight);\\n    function getTicketPrice() external view returns (uint256 ticketPrice);\\n\\n\\n    // Setter functions\\n    function setEpochWeights(uint8[] memory weights) external;\\n    function setCallerAllowed(address _a, bool _allowed) external;\\n\\n    // core functionality\\n    function purchaseTicket(uint256 _c) external;\\n    function purchaseTicket(address _referredBy, uint256 _c) external;\\n    function allocateTicket(address _a, address _referredBy, uint256 _c, uint256 _price) external;\\n    function pickNextReferral() external returns (address pickedAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IAffiliateBoosterController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface IAffiliateBoosterController {\\n    // hook to get the current price of one ticket\\n    function getTicketPrice(address user, uint256 count) external returns (uint256 ticketPrice);\\n\\n    // callback to notify the pricer of epoch closure\\n    function epochClosed(uint256 newEpochId) external;\\n\\n    // callback to notify the pricer of ticket purchase\\n    function ticketAllocated(address user, uint256 count) external;\\n\\n    function purchaseTicket(uint256 _c) external;\\n\\n    function purchaseTicket(address _referredBy, uint256 _c) external;\\n\\n    // callback to notify the pricer of referral picked\\n    function referralPicked(address user, bool isDefault) external;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.17;\\n\\ninterface IGovernance {\\n    function propose_action(uint256 _id, address _trigger_address, bytes memory _calldata) external returns (uint256) ;\\n    function support_actions(uint256 _id) external returns (uint256) ;\\n    function trigger_action(uint256 _id) external returns (bytes memory) ;\\n    function transfer_proportion(address _address, uint256 _amount) external returns (uint256) ;\\n\\n    function read_core_Running() external view returns (bool);\\n    function read_core_govAddr() external view returns (address);\\n    function read_core_managers() external view returns (address[] memory);\\n    function read_core_owners() external view returns (address[] memory);\\n\\n    function read_config_core(string memory _name) external view returns (string memory);\\n    function read_config_emergencyStatus(string memory _name) external view returns (bool);\\n    function read_config_governAddress(string memory _name) external view returns (address);\\n    function read_config_Managers(string memory _name) external view returns (address [] memory);\\n\\n    function read_config_bool_slot(string memory _name) external view returns (bool[] memory);\\n    function read_config_address_slot(string memory _name) external view returns (address[] memory);\\n    function read_config_uint256_slot(string memory _name) external view returns (uint256[] memory);\\n    function read_config_bytes32_slot(string memory _name) external view returns (bytes32[] memory);\\n\\n    function read_invoteConfig_core(string memory _name) external view returns (string memory);\\n    function read_invoteConfig_name(string memory _name) external view returns (string memory);\\n    function read_invoteConfig_emergencyStatus(string memory _name) external view returns (bool);\\n    function read_invoteConfig_governAddress(string memory _name) external view returns (address);\\n    function read_invoteConfig_Managers(string memory _name) external view returns (address[] memory);\\n    function read_invoteConfig_boolslot(string memory _name) external view returns (bool[] memory);\\n    function read_invoteConfig_address_slot(string memory _name) external view returns (address[] memory);\\n    function read_invoteConfig_uint256_slot(string memory _name) external view returns (uint256[] memory);\\n    function read_invoteConfig_bytes32_slot(string memory _name) external view returns (bytes32[] memory);\\n\\n    function propose_config(string memory _name, bool _bool_val, address _address_val, address[] memory _address_list, uint256 _uint256_val, bytes32 _bytes32_val) external returns (uint256);\\n    function support_config_proposal(uint256 _confCount, string memory _name) external returns (string memory);\\n    function generator() external pure returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IGoverned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.17;\\n\\ninterface IGoverned {\\n    struct GovernanceState {\\n      bool running;\\n      address governanceAddress;\\n      address[] managers;\\n    }\\n\\n    function selfManageMe() external;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IUserProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface IUserProfile {\\n\\n    struct UserProfile {                           /// Storage - We map the affiliated person to the affiliated_by person\\n        bool exists;\\n        uint8 rank;\\n        uint8 referredByRank;                       /// Rank of referrer at transaction time\\n        uint16 buyFeeDiscount;                            /// buy discount - 10000 = 100%\\n        uint32 referralCount;                          /// Number of referred by referee\\n        uint32 activeReferralCount;                    /// Number of active users referred by referee\\n        address referredBy;                            /// Address is referred by this user\\n        address referredByBefore;                     /// We store the 2nd step here to save gas (no interation needed)\\n    }\\n\\n    struct Parent {\\n        uint8 rank;\\n        address user;\\n    }\\n\\n    // returns the parent of the address\\n    function getParent(address _user) external view returns (address parent);\\n    // returns the parent and the parent of the parent of the address\\n    function getParents(address _user) external view returns (address parent, address parentOfParent);\\n\\n\\n    // returns user's parents and ranks of parents in 1 call\\n    function getParentsAndParentRanks(address _user) external view returns (Parent memory parent, Parent memory parent2);\\n    // returns user's parents and ranks of parents and use rbuy fee discount in 1 call\\n    function getParentsAndBuyFeeDiscount(address _user) external view returns (Parent memory parent, Parent memory parent2, uint16 discount);\\n    // returns number of referrals of address\\n    function getReferralCount(address _user) external view returns (uint32 count);\\n    // returns number of active referrals of address\\n    function getActiveReferralCount(address _user) external view returns (uint32 count);\\n\\n    // returns up to _count referrals of _user\\n    function getAllReferrals(address _user) external view returns (address[] memory referrals);\\n\\n    // returns up to _count referrals of _user starting from _index\\n    function getReferrals(address _user, uint256 _index, uint256 _count) external view returns (address[] memory referrals);\\n\\n    function getDefaultReferral() external view returns (address defaultReferral);\\n\\n    // get user information of _user\\n    function getUser(address _user) external view returns (UserProfile memory user);\\n\\n    function getUserRank(address _user) external view returns (uint8 rank);\\n\\n    // returns the total number of registered users\\n    function getUserCount() external view returns (uint256 count);\\n\\n    // return true if user exists\\n    function userExists(address _user) external view returns (bool exists);\\n\\n    function registerUser(address _user) external;\\n\\n    function increaseActiveReferralCount(address _user) external;\\n\\n    function registerUser(address _user, address _referredBy) external;\\n\\n    function registerUserWoBooster(address _user) external;\\n\\n    function setUserRank(address _user, uint8 _rank) external;\\n\\n    // function setDefaultReferral(address _referral) external;\\n\\n    // events\\n    event UserRegistered(address user, address referredBy, uint8 referredByRank, uint16 buyFeeDiscount);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IVault is IGoverned {\\n\\n    struct VaultState {\\n        bool userPoolTrackingDisabled;\\n        // bool paused;\\n        bool emergencyMode;\\n        bool whitelistingEnabled;\\n        bool flashEnabled;\\n        uint8 maxPoolTokenCount;\\n        uint8 feeToProtocol;\\n        uint8 bidMultiplier;\\n        uint16 flashFee;\\n        uint16 swapFee;\\n        uint16 bidMinDuration;\\n        uint16 rebalancingMinDuration;\\n        uint32 emergencyModeTimestamp;\\n        address feeTo;\\n    }\\n\\n    struct PoolState {\\n        bool poolInitialized;\\n        bool poolEmergencyMode;\\n        bool feeless;\\n        bool boosted;\\n        uint8 poolTokenCount;\\n        uint32 emergencyModeTime;\\n        uint48 lastTrailingTimestamp;\\n        uint48 lastPerformanceTimestamp;\\n        uint216 emergencyModeLPs;\\n        TotalSupplyBase totalSupplyBase;\\n    }\\n\\n    function getVaultState() external view returns (VaultState memory _vaultState);\\n\\n\\n    /************************************************************************************/\\n    /* Admin functions                                                                  */\\n    /************************************************************************************/\\n    // Check if given address is admin or not\\n    function isAdmin(address _address) external view returns (bool _isAdmin);\\n\\n    // Add or remove vault admin. Only admin can call this function\\n    function AddRemoveAdmin(address _address, bool _ShouldBeAdmin) external;// returns (address, bool);\\n\\n    // Boost or unboost pool. Boosted pools get 100% of their swap fees.\\n    // For non boosted pools, a part of the swap fees go to the platform.\\n    // Only admin can call this function\\n    function AddRemoveBoostedPool(address _address, bool _ShouldBeBoosted) external;// returns (address, bool);\\n\\n\\n    /************************************************************************************/\\n    /* Token whitelist                                                                  */\\n    /************************************************************************************/\\n\\n    // Only admin can call this function. Only the whitelisted tokens can be added to a Pool\\n    // If empty: No whitelist, all tokens are allowed\\n    function setWhitelistedTokens(address[] calldata _tokens, bool[] calldata _whitelisted) external;\\n\\n    function isTokenWhitelisted(address token) external view returns (bool whitelisted);\\n    event TokenWhitelistChanged(address indexed token, bool isWhitelisted);\\n\\n    /************************************************************************************/\\n    /* Internal Balances                                                                */\\n    /************************************************************************************/\\n\\n    // Users can deposit tokens into the Vault to have an internal balance in the Mosaic platform.\\n    // This internal balance can be used to deposit tokens into a Pool (Mint), withdraw tokens from\\n    // a Pool (Burn), or perform a swap. The internal balance can also be transferred or withdrawn.\\n\\n    // Get a specific user's internal balance for one given token\\n    function getInternalBalance(address user, address token) external view returns (uint balance);\\n\\n    // Get a specific user's internal balances for the given token array\\n    function getInternalBalances(address user, address[] memory tokens) external view returns (uint[] memory balances);\\n\\n    // Deposit tokens to the msg.sender's  internal balance\\n    function depositToInternalBalance(address token, uint amount) external;\\n\\n    // Deposit tokens to the recipient internal balance\\n    function depositToInternalBalanceToAddress(address token, address to, uint amount) external;\\n\\n    // ERC20 token transfer from the message sender's internal balance to their address\\n    function withdrawFromInternalBalance(address token, uint amount) external;\\n\\n    // ERC20 token transfer from the message sender's internal balance to the given address\\n    function withdrawFromInternalBalanceToAddress(address token, address to, uint amount) external;\\n\\n    // Transfer tokens from the message sender's internal balance to another user's internal balance\\n    function transferInternalBalance(address token, address to, uint amount) external;\\n\\n    // Event emitted when user's internal balance changes by delta amount. Positive delta means internal balance increase\\n    event InternalBalanceChanged(address indexed user, address indexed token, int256 delta);\\n\\n    /************************************************************************************/\\n    /* Pool ERC20 helper                                                                */\\n    /************************************************************************************/\\n\\n    function transferFromAsTokenContract(address from, address to, uint amount) external returns (bool success);\\n    function mintAsTokenContract(address to, uint amount) external returns (bool success);\\n    function burnAsTokenContract(address from, uint amount) external returns (bool success);\\n\\n    /************************************************************************************/\\n    /* Pool                                                                             */\\n    /************************************************************************************/\\n\\n    struct TotalSupplyBase {\\n        uint32 timestamp;\\n        uint224 amount;\\n    }\\n\\n    event TotalSupplyBaseChanged(address indexed poolAddr, TotalSupplyBase supplyBase);\\n    // Each pool should be one of the following based on poolType:\\n    // 0: REBALANCING: (30% ETH, 30% BTC, 40% MKR). Weight changes gradually in time.\\n    // 1: NON_REBALANCING: (100 ETH, 5 BTC, 200 MKR). Weight changes gradually in time.\\n    // 2: DAYTRADE: Non rebalancing pool. Weight changes immediately.\\n\\n    function tokenInPool(address pool, address token) external view returns (bool inPool);\\n\\n    function poolIdToAddress(uint32 poolId) external view returns (address poolAddr);\\n\\n    function poolAddressToId(address poolAddr) external view returns (uint32 poolId);\\n\\n    // pool calls this to move the pool to zerofee status\\n    function disableFees() external;\\n\\n    // Returns the total pool count\\n    function poolCount() external view returns (uint32 count);\\n\\n    // Returns a list of pool IDs where the user has assets\\n    function userJoinedPools(address user) external view returns (uint32[] memory poolIDs);\\n\\n    // Returns a list of pool the user owns\\n    function userOwnedPools(address user) external view returns (uint32[] memory poolIDs);\\n\\n    //Get pool tokens and their balances\\n    function getPoolTokens(uint32 poolId) external view returns (address[] memory tokens, uint[] memory balances);\\n\\n    function getPoolTokensByAddr(address poolAddr) external view returns (address[] memory tokens, uint[] memory balances);\\n\\n    function getPoolTotalSupplyBase(uint32 poolId) external view returns (TotalSupplyBase memory totalSupplyBase);\\n\\n    function getPoolTotalSupplyBaseByAddr(address poolAddr) external view returns (TotalSupplyBase memory totalSupplyBase);\\n\\n    // Register a new pool. Pool type can not be changed after the creation. Emits a PoolRegistered event.\\n    function registerPool(address _poolAddr, address _user, address _referredBy) external returns (uint32 poolId);\\n    event PoolRegistered(uint32 indexed poolId, address indexed poolAddress);\\n\\n    // Registers tokens for the Pool. Must be called by the Pool's contract. Emits a TokensRegistered event.\\n    function registerTokens(address[] memory _tokenList, bool onlyWhitelisted) external;\\n    event TokensRegistered(uint32 indexed poolId, address[] newTokens);\\n\\n    // Adds initial liquidity to the pool\\n    function addInitialLiquidity(uint32 _poolId, address[] memory _tokens, uint[] memory _liquidity, address tokensTo, bool fromInternalBalance) external;\\n    event InitialLiquidityAdded(uint32 indexed poolId, address user, uint lpTokens, address[] tokens, uint[] amounts);\\n\\n    // Deegisters tokens for the poolId Pool. Must be called by the Pool's contract.\\n    // Tokens to be deregistered should have 0 balance. Emits a TokensDeregistered event.\\n    function deregisterToken(address _tokenAddress, uint _remainingAmount) external;\\n    event TokensDeregistered(uint32 indexed poolId, address tokenAddress);\\n\\n    // This function is called when a liquidity provider adds liquidity to the pool.\\n    // It mints additional liquidity tokens as a reward.\\n    // If fromInternalBalance is true, the amounts will be deducted from user's internal balance\\n    function Mint(uint32 poolId, uint LPTokensRequested, uint[] memory amountsMax, address to, address referredBy, bool fromInternalBalance, uint deadline, uint usdValue) external returns (uint[] memory amountsSpent);\\n    event Minted(uint32 indexed poolId, address txFrom, address user, uint lpTokens, address[] tokens, uint[] amounts, bool fromInternalBalance);\\n\\n    // This function is called when a liquidity provider removes liquidity from the pool.\\n    // It burns the liquidity tokens and sends back the tokens as ERC20 transfer.\\n    // If toInternalBalance is true, the tokens will be deposited to user's internal balance\\n    function Burn(uint32 poolId, uint LPTokensToBurn, uint[] memory amountsMin, bool toInternalBalance, uint deadline, address from) external returns (uint[] memory amountsReceived);\\n    event Burned(uint32 indexed poolId, address txFrom, address user, uint lpTokens, address[] tokens, uint[] amounts, bool fromInternalBalance);\\n\\n    /************************************************************************************/\\n    /* Swap                                                                             */\\n    /************************************************************************************/\\n\\n    // Executes a swap operation on a single Pool. Called by the user\\n    // If the swap is initiated with givenInOrOut == 1 (i.e., the number of tokens to be sent to the Pool is specified),\\n    // it returns the amount of tokens taken from the Pool, which should not be less than limit.\\n    // If the swap is initiated with givenInOrOut == 0 parameter (i.e., the number of tokens to be taken from the Pool is specified),\\n    // it returns the amount of tokens sent to the Pool, which should not exceed limit.\\n    // Emits a Swap event\\n    function swap(address poolAddress, bool givenInOrOut, address tokenIn, address tokenOut, uint amount, bool fromInternalBalance, uint limit, uint64 deadline) external returns (uint calculatedAmount);\\n    event Swap(uint32 indexed poolId, address indexed tokenIn, address indexed tokenOut, uint amountIn, uint amountOut, address user);\\n\\n    // Execute a multi-hop token swap between multiple pairs of tokens on their corresponding pools\\n    // Example: 100 tokenA -> tokenB -> tokenC\\n    // pools = [pool1, pool2], tokens = [tokenA, tokenB, tokenC], amountIn = 100\\n    // The returned amount of tokenC should not be less than limit\\n    function multiSwap(address[] memory pools, address[] memory tokens, uint amountIn, bool fromInternalBalance, uint limit, uint64 deadline) external returns (uint calculatedAmount);\\n\\n    /************************************************************************************/\\n    /* Dutch Auction                                                                    */\\n    /************************************************************************************/\\n    // Non rebalancing pools (where poolId is not 0) can use Dutch auction to change their\\n    // balance sheet. A Dutch auction (also called a descending price auction) refers to a\\n    // type of auction in which an auctioneer starts with a very high price, incrementally\\n    // lowering the price. User can bid for the entire amount, or just a fraction of that.\\n\\n    struct AuctionInfo {\\n        address poolAddress;\\n        uint32 startsAt;\\n        uint32 duration;\\n        uint32 expiration;\\n        address tokenToSell;\\n        address tokenToBuy;\\n        uint startingAmount;\\n        uint remainingAmount;\\n        uint startingPrice;\\n        uint endingPrice;\\n    }\\n\\n    // Get total (lifetime) auction count\\n    function getAuctionCount() external view returns (uint256 auctionCount);\\n\\n    // Get all information of the given auction\\n    function getAuctionInfo(uint auctionId) external view returns (AuctionInfo memory);\\n\\n    // Returns 'true' if the auction is still running and there are tokens available for purchase\\n    // Returns 'false' if the auction has expired or if all tokens have been sold.\\n    function isRunning(uint auctionId) external view returns (bool);\\n\\n    // Called by pool owner. Emits an auctionStarted event\\n    function startAuction(address tokenToSell, uint amountToSell, address tokenToBuy, uint32 duration, uint32 expiration, uint endingPrice) external returns (uint auctionId);\\n    event AuctionStarted(uint32 poolId, uint auctionId, AuctionInfo _info);\\n\\n    // Called by pool owner. Emits an auctionStopped event\\n    function stopAuction(uint auctionId) external;\\n    event AuctionStopped(uint auctionId);\\n\\n    // Get the current price for 'remainingAmount' number of tokens\\n    function getBidPrice(uint auctionId) external view returns (uint currentPrice, uint remainingAmount);\\n\\n    // Place a bid for the specified 'auctionId'. Fractional bids are supported, with the 'amount'\\n    // representing the number of tokens to purchase. The amounts are deducted from and credited to the\\n    // user's internal balance. If there are insufficient tokens in the user's internal balance, the function reverts.\\n    // If there are fewer tokens available for the auction than the specified 'amount' and enableLessAmount == 1,\\n    // the function purchases all remaining tokens (which may be less than the specified amount).\\n    // If enableLessAmount is set to 0, the function reverts. Emits a 'newBid' event\\n    function bid(uint auctionId, uint amount, bool enableLessAmount, bool fromInternalBalance, uint deadline) external returns (uint spent);\\n    event NewBid(uint auctionId, address buyer, uint tokensBought, uint paid, address tokenToBuy, address tokenToSell, uint remainingAmount);\\n\\n    /************************************************************************************/\\n    /* Emergency                                                                        */\\n    /************************************************************************************/\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    // Only an admin can call this function.\\n    function setEmergencyMode() external;\\n\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    function setPoolEmergencyMode(address poolAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/User/AffiliateBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha AffiliateBooster contract\\n * @author dlabs.hu\\n * @dev This contract is for affiliate booster logic\\n */\\n\\nimport \\\"../helpers/SimpleEntropy.sol\\\";\\nimport \\\"../helpers/Ownable.sol\\\";\\nimport \\\"../Interfaces/IAffiliateBoosterController.sol\\\";\\nimport \\\"../Interfaces/IAffiliateBooster.sol\\\";\\nimport \\\"../Interfaces/IUserProfile.sol\\\";\\nimport \\\"../helpers/IERC20Burnable.sol\\\";\\n\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../Governance/Governed.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title AffiliateBooster\\n * @dev A contract for picking referrals based on ticket purchases\\n */\\ncontract AffiliateBooster is SimpleEntropy, IAffiliateBooster, Ownable, Governed {\\n    using SafeCast for uint256;\\n    AffiliateBoosterState private state; // state of the contract\\n    mapping (address => bool) public allowedCaller; // addresses that can request new referral to be picked\\n    mapping(uint256 => AffiliateBoosterEpoch) private epochs; // epochs\\n    mapping(uint256 => address[]) public epochTickets; // active epoch tickets\\n    mapping(uint256 => mapping(address => uint64)) public epochUserTickets; // active user epoch tickets\\n\\n    IAffiliateBoosterController public controller; // controller contract\\n    IUserProfile public userProfile;\\n\\n    /**\\n     * @dev Constructor function\\n     * @param _feeToken The address of the fee token used to purchase tickets\\n     */\\n    constructor(address _feeToken, /*bool _feeTokenBurnable, uint256 _ticketPrice,*/ address _governAddress) {\\n        state.feeToken = _feeToken;\\n        state.epochWeights = [100, 90, 70, 50, 10]; // default epoch weights\\n        state.currentEpochStart = uint64(block.timestamp);\\n        epochs[0].epochStart = uint64(block.timestamp);\\n        governanceState.governanceAddress = _governAddress;\\n    }\\n\\n    // /* Governance */\\n    function _selfManageMeBefore() internal override {\\n        // get vault, userprofile, oracle, deposit\\n        address[] memory slots = IGovernance(governanceState.governanceAddress).read_config_address_slot(\\\"Main\\\");\\n        _setCallerAllowed(address(userProfile), false);\\n        userProfile = IUserProfile(slots[1]);\\n        state.feeTo = slots[6];\\n        _setCallerAllowed(address(userProfile), true);\\n        _transferOwnership(slots[0]);\\n\\n        slots = IGovernance(governanceState.governanceAddress).read_config_address_slot(\\\"AffiliateBooster\\\");\\n        bool[] memory boolSlots = IGovernance(governanceState.governanceAddress).read_config_bool_slot(\\\"AffiliateBooster\\\");\\n        uint256[] memory uintSlots = IGovernance(governanceState.governanceAddress).read_config_uint256_slot(\\\"AffiliateBooster\\\");\\n\\n        controller = IAffiliateBoosterController(slots[0]);\\n        if (slots.length > 1) state.feeTo = slots[1];\\n        state.feeTokenBurnable = boolSlots[0];\\n        state.ticketPrice = uintSlots[0];\\n        state.epochTime = uintSlots[1].toUint32();\\n        state.epochSize = uintSlots[2].toUint16();\\n    }\\n    function _selfManageMeAfter() internal override {}\\n    function _onBeforeEmergencyChange(bool nexRunning) internal override {}\\n\\n    /**\\n     * @dev Modifier to close the current epoch if the epoch time has elapsed\\n     */\\n    modifier closeEpochIfTimeUp() {\\n        if (state.epochTime > 0 && block.timestamp >= state.currentEpochStart + state.epochTime) {\\n            _incrementEpoch();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Closes the current epoch if the epoch time has elapsed or the epoch size has been reached\\n     */\\n    function closeEpoch() external {\\n        if (state.epochTime > 0 && block.timestamp >= state.currentEpochStart + state.epochTime) {\\n            _incrementEpoch();\\n        return;\\n        } else if (state.epochSize > 0 && epochs[state.currentEpoch].ticketsSpent >= state.epochSize) {\\n            _incrementEpoch();\\n            return;\\n        }\\n        revert(\\\"No epoch to close\\\");\\n    }\\n\\n    /* GETTERS */\\n\\n    /**\\n    * @dev Returns the current epoch\\n    * @return epochSize The current epoch number\\n    */\\n    function getCurrentEpoch() external view returns (uint64 epochSize) {\\n        return state.currentEpoch;\\n    }\\n\\n    /**\\n    * @dev Returns the state of the current epoch\\n    * @return epochState The epoch state as a struct\\n    */\\n    function getCurrentEpochState() external view returns (AffiliateBoosterEpoch memory epochState) {\\n        epochState = epochs[state.currentEpoch];\\n        epochState.ticketsActive = uint64(epochTickets[state.currentEpoch].length);\\n    }\\n\\n    /**\\n    * @dev Returns the start time of the current epoch\\n    * @return epochStart The start time of the current epoch\\n    */\\n    function getCurrentEpochStart() external view returns (uint64 epochStart) {\\n        return state.currentEpochStart;\\n    }\\n\\n    /**\\n    * @dev Returns the maximum number of tickets that can be purchased in an epoch\\n    * @return epochSize The epoch size\\n    */\\n    function getEpochSize() external view returns (uint16 epochSize) {\\n        return state.epochSize;\\n    }\\n\\n    /**\\n    * @dev Returns the duration of each epoch in seconds\\n    * @return epochTime The epoch time\\n    */\\n    function getEpochTime() external view returns (uint32 epochTime) {\\n        return state.epochTime;\\n    }\\n\\n    /**\\n    * @dev Returns the total number of tickets purchased\\n    * @return totalTicketCount The total number of tickets purchased\\n    */\\n    function getTotalTicketCount() external view returns (uint64 totalTicketCount) {\\n        return state.totalTicketCount;\\n    }\\n\\n    /**\\n    * @dev Returns the total number of tickets spent in the current epoch\\n    * @return totalTicketsSpent The total number of tickets spent in the current epoch\\n    */\\n    function getTotalTicketsSpent() external view returns (uint64 totalTicketsSpent) {\\n        return state.totalTicketsSpent;\\n    }\\n\\n    /**\\n    * @dev Returns the epoch weights\\n    * @return epochWeights The epoch weights\\n    */\\n    function getEpochWeights() external view returns (uint8[] memory epochWeights) {\\n        return state.epochWeights;\\n    }\\n\\n    /**\\n    * @dev Returns the address of the fee token\\n    * @return feeToken The address of the fee token\\n    */\\n    function getFeeToken() external view returns (address feeToken) {\\n        return state.feeToken;\\n    }\\n\\n    /**\\n    * @dev Returns whether the fee token can be burned\\n    * @return burnable Whether the fee token can be burned\\n    */\\n    function getFeeTokenBurnable() external view returns (bool burnable) {\\n        // Return the value of the `feeTokenBurnable` field in the `state` struct\\n        return state.feeTokenBurnable;\\n    }\\n\\n\\n    /**\\n    * @dev Returns the sum of weights of all players in the current epoch\\n    * @return totalPlayerWeight The total player weight\\n    */\\n    function getTotalPlayerWeight() external view returns (uint256 totalPlayerWeight) {\\n        return state.totalPlayerWeight;\\n    }\\n\\n    /**\\n    * @dev Returns the price of a ticket in wei\\n    * @return ticketPrice The ticket price\\n    */\\n    function getTicketPrice() external view returns (uint256 ticketPrice) {\\n        return state.ticketPrice;\\n    }\\n\\n    /* GETTERS END */\\n\\n    /**\\n    * @dev Sets the controller contract address\\n    * @param _a The address of the controller contract\\n    */\\n    function setController(address _a) external Live onlyOwner {\\n        controller = IAffiliateBoosterController(_a);\\n    }\\n\\n    // /**\\n    // * @dev Allows or disallows an address to request the next referral\\n    // * @param _a The address to allow or disallow\\n    // * @param _allowed Whether the address is allowed or not\\n    // */\\n    function setCallerAllowed(address _a, bool _allowed) external Live onlyOwner {\\n        _setCallerAllowed(_a, _allowed);\\n    }\\n    function _setCallerAllowed(address _a, bool _allowed) internal {\\n        allowedCaller[_a] = _allowed;\\n        emit CallerAllowed(_a, _allowed);\\n    }\\n\\n    /**\\n    * @dev Sets the weights with which tickets are counted in the epochs. It closes the current epoch\\n    * @param _weights The new epoch weights\\n    */\\n    function setEpochWeights(uint8[] memory _weights) external Live onlyOwner {\\n        state.epochWeights = _weights;\\n        _incrementEpoch();\\n        emit EpochWeightsChanged(_weights);\\n    }\\n\\n    /**\\n    * @dev Sets whether the fee token can be burned\\n    * @param _b Whether the fee token can be burned\\n    */\\n    function _setFeeTokenBurnable(bool _b) internal {\\n        state.feeTokenBurnable = _b;\\n    }\\n\\n    /**\\n    * @dev Sets the fee receiver address\\n    * @param _a Address for the fee\\n    */\\n    function setFeeTo(address _a) external Live onlyOwner {\\n        state.feeTo= _a;\\n    }\\n\\n    /**\\n    * @dev Purchases a ticket for a given beneficiary address and cost\\n    * @param _c The cost of the ticket\\n    */\\n    function purchaseTicket(uint256 _c) external Live closeEpochIfTimeUp {\\n        purchaseTicket(address(0), _c);\\n    }\\n\\n    /**\\n    * @dev Allows a user to purchase tickets directly by transferring the fee token to this contract\\n    * @param _referredBy The address off the referee\\n    * @param _c The number of tickets to purchase\\n    */\\n    function purchaseTicket(address _referredBy, uint256 _c) public Live closeEpochIfTimeUp {\\n        if (address(controller) != address(0)) revert(\\\"AffiliateBooster: No direct purchase when controller is set\\\");\\n        require(IERC20Burnable(state.feeToken).transferFrom(msg.sender, address(this), _c * state.ticketPrice), \\\"TransferFrom failed\\\");\\n        if (state.feeTokenBurnable) {\\n            IERC20Burnable(state.feeToken).burn(_c * state.ticketPrice);\\n        } else {\\n            IERC20Burnable(state.feeToken).transfer(state.feeTo, _c * state.ticketPrice);\\n        }\\n        _allocateTicket(msg.sender, _referredBy, _c, state.ticketPrice);\\n    }\\n\\n    /**\\n    * @dev Allocates tickets to a user\\n    * @param _a The address of the user who is being allocated tickets\\n    * @param _referredBy _a's referral\\n    * @param _c The number of tickets to allocate\\n    * @param _price The price of each ticket in wei\\n    */\\n    function allocateTicket(address _a, address _referredBy, uint256 _c, uint256 _price) external Live closeEpochIfTimeUp {\\n        require(msg.sender == address(controller), \\\"AffiliateBooster: Only controller can call this\\\");\\n        _allocateTicket(_a, _referredBy, _c, _price);\\n    }\\n\\n    /**\\n    * @dev Internal function to allocate tickets to a user\\n    * @param _a The address of the user who is being allocated tickets\\n    * @param _referredBy _a's referral\\n    * @param _c The number of tickets to allocate\\n    * @param _price The price of each ticket in wei\\n    */\\n    function _allocateTicket(address _a, address _referredBy, uint256 _c, uint256 _price) internal {\\n        if (address(userProfile) != address(0)) userProfile.registerUser(_a, _referredBy);\\n        for (uint256 i = 0; i < _c; i++) {\\n            epochTickets[state.currentEpoch].push(_a);\\n            state.totalPlayerWeight += state.epochWeights[0];\\n        }\\n        epochs[state.currentEpoch].ticketsBought += uint64(_c);\\n        epochUserTickets[state.currentEpoch][_a] += uint64(_c);\\n        state.totalTicketCount += uint64(_c);\\n        if (address(controller) != address(0)) {\\n            controller.ticketAllocated(_a, _c);\\n        }\\n        emit TicketBought(state.currentEpoch, _a, _c, _price);\\n    }\\n\\n\\n    /**\\n    * @dev Picks the next referral based on the number of tickets purchased by users\\n    * @return pickedAddress The address of the next referral\\n    */\\n    function pickNextReferral() external Live closeEpochIfTimeUp returns (address pickedAddress){\\n        require(allowedCaller[msg.sender], \\\"AffiliateBooster: caller not allowed to pich referral\\\");\\n        if (state.totalPlayerWeight == 0) {\\n            if (address(controller) != address(0)) controller.referralPicked(address(0), true);\\n            emit ReferralPicked(address(0));\\n            return address(0);\\n        }\\n\\n        // get some entropy\\n        uint256 seed = _simpleRandom(state.totalTicketsSpent);\\n        // convert entropy to threshold weight\\n        uint256 threshold = seed % (state.totalPlayerWeight);\\n        seed >>= 48;\\n        uint256 sumWeight;\\n        for (uint64 i; i < state.epochWeights.length && i <= state.currentEpoch; i++) {\\n            sumWeight += state.epochWeights[i] * epochTickets[state.currentEpoch - i].length;\\n            if (threshold < sumWeight) {\\n                pickedAddress = epochTickets[state.currentEpoch - i][seed % epochTickets[state.currentEpoch - i].length];\\n                epochTickets[state.currentEpoch - i][seed % epochTickets[state.currentEpoch - i].length] = epochTickets[state.currentEpoch - i][epochTickets[state.currentEpoch - i].length - 1];\\n                epochTickets[state.currentEpoch - i].pop();\\n                state.totalPlayerWeight -= state.epochWeights[i];\\n                epochUserTickets[state.currentEpoch -i][pickedAddress] -= 1;\\n                break;\\n            }\\n        }\\n        unchecked {\\n            state.totalTicketsSpent += 1;\\n            epochs[state.currentEpoch].ticketsSpent += 1;\\n        }\\n        emit TicketSpent(state.currentEpoch, pickedAddress);\\n\\n        if (address(controller) != address(0)) {\\n            controller.referralPicked(pickedAddress, false);\\n        }\\n        if (state.epochSize > 0 && epochs[state.currentEpoch].ticketsSpent >= state.epochSize) {\\n            _incrementEpoch();\\n        }\\n        emit ReferralPicked(pickedAddress);\\n    }\\n\\n    /**\\n    * @dev Internal function to increment the current epoch\\n    */\\n    function _incrementEpoch() internal {\\n        state.totalPlayerWeight = 0;\\n        unchecked {\\n            state.currentEpoch++;\\n        }\\n        state.currentEpochStart = uint64(block.timestamp);\\n        epochs[state.currentEpoch].epochStart = uint64(block.timestamp);\\n        for (uint64 i; i < state.epochWeights.length && i <= state.currentEpoch; i++) {\\n            state.totalPlayerWeight += state.epochWeights[i] * epochTickets[state.currentEpoch - i].length;\\n        }\\n        emit EpochClosed(state.currentEpoch - 1);\\n        if (address(controller) != address(0)) {\\n            controller.epochClosed(state.currentEpoch - 1);\\n        }\\n    }\\n\\n    /**\\n    * @dev Returns the current state of the AffiliateBooster contract\\n    * @return stateStruct The current state of the AffiliateBooster contract\\n    */\\n    function getState() external view returns (AffiliateBoosterState memory stateStruct) {\\n        return state;\\n    }\\n\\n    /**\\n    * @dev Returns an array of epoch states for the given epoch IDs\\n    * @param epochIds The IDs of the epochs to get the states for\\n    * @return epochStates An array of epoch states for the given epoch IDs\\n    */\\n    function getEpochStates(uint256[] memory epochIds) external view returns (AffiliateBoosterEpoch[] memory epochStates) {\\n        epochStates = new AffiliateBoosterEpoch[](epochIds.length);\\n        for (uint256 i = 0; i < epochIds.length; i++) {\\n            epochStates[i] = epochs[epochIds[i]];\\n            epochStates[i].ticketsActive = uint64(epochTickets[epochIds[i]].length);\\n        }\\n    }\\n\\n    /**\\n    * @dev Returns an array of epoch stakes for the given epoch ID\\n    * @param epochId The ID of the epoch to get the stakes for\\n    * @return tickets An array of epoch tickets for the given epoch ID\\n    */\\n    function getEpochTickets(uint256 epochId) external view returns (address[] memory tickets) {\\n        tickets = epochTickets[epochId];\\n    }\\n\\n    function getEpochTicketsCount(uint256 epochId) external view returns (uint256 cnt) {\\n        return epochTickets[epochId].length;\\n    }\\n\\n    function getEpochTicket(uint256 epochId, uint256 idx) external view returns (address user) {\\n        return epochTickets[epochId][idx];\\n    }\\n\\n    /**\\n    * @dev Returns an array of the number of tickets held by the given user in the specified epochs\\n    * @param user The user to get the ticket counts for\\n    * @param epochIds The IDs of the epochs to get the ticket counts for\\n    * @return userTickets An array of the number of tickets held by the given user in the specified epochs\\n    */\\n    function getUserTickets(address user, uint256[] memory epochIds) external view returns (uint64[] memory userTickets) {\\n        userTickets = new uint64[](epochIds.length);\\n        for (uint256 i = 0; i < epochIds.length; i++) {\\n            if (epochIds[i] + state.epochWeights.length > state.currentEpoch) userTickets[i] = epochUserTickets[epochIds[i]][user];\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Governed__EmergencyStopped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Governed__NotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Governed__NotStopped\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"CallerAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"EpochClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"weights\",\"type\":\"uint8[]\"}],\"name\":\"EpochWeightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pickedAddress\",\"type\":\"address\"}],\"name\":\"ReferralPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TicketBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"TicketSpent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"allocateTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IAffiliateBoosterController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochTickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochUserTickets\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"epochSize\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochStart\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"epochStart\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"ticketsBought\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ticketsSpent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ticketsActive\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"epochStart\",\"type\":\"uint64\"}],\"internalType\":\"struct IAffiliateBooster.AffiliateBoosterEpoch\",\"name\":\"epochState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochSize\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"epochSize\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"epochIds\",\"type\":\"uint256[]\"}],\"name\":\"getEpochStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"ticketsBought\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ticketsSpent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ticketsActive\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"epochStart\",\"type\":\"uint64\"}],\"internalType\":\"struct IAffiliateBooster.AffiliateBoosterEpoch[]\",\"name\":\"epochStates\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getEpochTicket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"getEpochTickets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tickets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"}],\"name\":\"getEpochTicketsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cnt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"epochTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochWeights\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"epochWeights\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeTokenBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernanceState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"running\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"}],\"internalType\":\"struct IGoverned.GovernanceState\",\"name\":\"govState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"currentEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentEpochStart\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"epochSize\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"epochTime\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"totalTicketsSpent\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"totalTicketCount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"feeTokenBurnable\",\"type\":\"bool\"},{\"internalType\":\"uint8[]\",\"name\":\"epochWeights\",\"type\":\"uint8[]\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayerWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"internalType\":\"struct IAffiliateBooster.AffiliateBoosterState\",\"name\":\"stateStruct\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPlayerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPlayerWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTicketCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"totalTicketCount\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTicketsSpent\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"totalTicketsSpent\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"epochIds\",\"type\":\"uint256[]\"}],\"name\":\"getUserTickets\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"userTickets\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickNextReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pickedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfManageMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setCallerAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_weights\",\"type\":\"uint8[]\"}],\"name\":\"setEpochWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simpleRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"simpleRandom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userProfile\",\"outputs\":[{\"internalType\":\"contract IUserProfile\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AffiliateBooster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000b007549db2a335364dfdce86001ee3b081051f03000000000000000000000000cdf8a94da58bdadf73f2f1f7f07447f318f0850c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}