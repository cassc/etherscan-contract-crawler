{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/piglet/Pigletz.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./IPigletz.sol\\\";\\r\\nimport \\\"./PigletWallet.sol\\\";\\r\\nimport \\\"../token/PiFiToken.sol\\\";\\r\\nimport \\\"../boosters/IBooster.sol\\\";\\r\\nimport \\\"../boosters/InvestTokensBooster.sol\\\";\\r\\nimport \\\"../boosters/InvestMultiTokensBooster.sol\\\";\\r\\nimport \\\"../boosters/CollectSameSignsBooster.sol\\\";\\r\\nimport \\\"../boosters/CollectSignsBooster.sol\\\";\\r\\nimport \\\"../boosters/CollectNumberBooster.sol\\\";\\r\\nimport \\\"../boosters/InvestMultiTokensBooster.sol\\\";\\r\\nimport \\\"../boosters/StakingBooster.sol\\\";\\r\\nimport \\\"../boosters/SpecialBooster.sol\\\";\\r\\nimport \\\"../oracle/IOracle.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\ncontract Pigletz is IPigletz, ERC721Enumerable, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Strings for bytes32;\\r\\n    using Clones for address;\\r\\n\\r\\n    uint256 constant PIPS = 10000;\\r\\n\\r\\n    uint256 public constant SEED = 1638504306;\\r\\n\\r\\n    uint256 constant LEVEL_2_REQUIREMENTS = 10000 ether;\\r\\n    uint256 constant LEVEL_3_REQUIREMENTS = 55000 ether;\\r\\n\\r\\n    uint256 constant MAX_MINT_PER_PIG = 2000000 ether;\\r\\n\\r\\n    string[] IPFS_FOLDERS = [\\r\\n        \\\"QmUoYfWQCAkjw2oNvbXikEZC24Kg5oLkw4Fef49thyexmq\\\",\\r\\n        \\\"Qmb3bJAtH9x8N5D5MkDaXGSTKooyDNpoihuZzR7sEsgRp3\\\",\\r\\n        \\\"QmPAoRPzkkXwXJ34EaFGQmRUY3F8W4p3gnyhn9ga56QFc6\\\",\\r\\n        \\\"QmaErGy2B71Jsn7aaCnbrChoSiWDR32KezrNEwHgZASmnz\\\"\\r\\n    ];\\r\\n    //@todo: WE NEED THE REAL CELEBRITY FOLDER\\r\\n    string CELEBRITY_FOLDER = \\\"QmPLLwf4miKgFnxwgrp8uq4z9FnaNV6rTvR5MmrRHR2GFi\\\";\\r\\n\\r\\n    uint256 _regularTokens;\\r\\n    uint256 _celebrityTokens;\\r\\n\\r\\n    // @todo Add a better documentation for this\\r\\n    uint256[] _mintingRatePerDay = [167 ether, 250 ether, 417 ether, 500 ether];\\r\\n\\r\\n    uint256 constant MAX_TOKENS = 12345;\\r\\n    uint256 internal nonce = 0;\\r\\n    uint256[MAX_TOKENS] internal _indexes;\\r\\n    mapping(uint256 => uint8) private _levels;\\r\\n    mapping(uint256 => IPigletWallet) private _wallets;\\r\\n    mapping(uint256 => uint256) private _mintedAmount;\\r\\n    mapping(uint256 => uint256) private _lastMintTime;\\r\\n\\r\\n    IBooster[] private _boosters;\\r\\n    IOracle _oracle;\\r\\n    PiFiToken _token;\\r\\n    address _staker;\\r\\n    address _portal;\\r\\n    uint256 _numRegularMinted;\\r\\n    uint256 _numCelebrityMinted;\\r\\n    mapping(uint256 => bool) _special;\\r\\n    SpecialBooster _specialBooster;\\r\\n    mapping(address => bool) _minters;\\r\\n\\r\\n    PigletWallet _walletLibrary;\\r\\n\\r\\n    constructor(\\r\\n        IOracle oracle,\\r\\n        PiFiToken token,\\r\\n        uint256 regularTokens,\\r\\n        uint256 celebrityTokens\\r\\n    ) ERC721(\\\"Pigletz\\\", \\\"PIGZ\\\") {\\r\\n        _boosters = [\\r\\n            IBooster(new InvestTokensBooster(this, 1000, 100 ether, 1)), // Invest 100\\r\\n            new InvestTokensBooster(this, 3000, 500 ether, 2), // Invest 500\\r\\n            new InvestTokensBooster(this, 10000, 2000 ether, 3), // Invest 2000\\r\\n            new CollectNumberBooster(this, 2000, 3, 1), // Collect 3\\r\\n            new CollectNumberBooster(this, 3000, 7, 2), // Collect 7\\r\\n            new InvestMultiTokensBooster(this, oracle, address(token), 1000, 3, 1), // Invest 3\\r\\n            new InvestMultiTokensBooster(this, oracle, address(token), 2000, 7, 3), // Invest 7\\r\\n            new CollectSameSignsBooster(this, 3000, 3, 1), // Collect 3 same\\r\\n            new CollectSignsBooster(this, 8000, 12, 3), // Collect 12 different\\r\\n            new StakingBooster(this, 5000), // Stake Booster\\r\\n            new SpecialBooster(this, 5000) // Special Booster\\r\\n        ];\\r\\n        _oracle = oracle;\\r\\n        _token = token;\\r\\n        _regularTokens = regularTokens;\\r\\n\\r\\n        _celebrityTokens = celebrityTokens;\\r\\n        _walletLibrary = new PigletWallet();\\r\\n    }\\r\\n\\r\\n    function addMinter(address minter) public onlyOwner {\\r\\n        _minters[minter] = true;\\r\\n    }\\r\\n\\r\\n    function removeMinter(address minter) public onlyOwner {\\r\\n        delete _minters[minter];\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(_minters[msg.sender], \\\"Only minters can mint\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier validToken(uint256 tokenId) {\\r\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPortal() {\\r\\n        require(msg.sender == _portal, \\\"Only portal can do this\\\");\\r\\n        require(_portal != address(0), \\\"Portal is not set\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTokenOwner(uint256 tokenId) {\\r\\n        require(msg.sender == ownerOf(tokenId), \\\"Only token owner can do this\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function maxSupply() public view override returns (uint256) {\\r\\n        return _regularTokens + _celebrityTokens;\\r\\n    }\\r\\n\\r\\n    function _checkSaleEnded() internal {\\r\\n        if (tokenCount() >= maxSupply()) {\\r\\n            emit SaleEnded(maxSupply(), address(this).balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenCount() public view override returns (uint256) {\\r\\n        return _numRegularMinted + _numCelebrityMinted;\\r\\n    }\\r\\n\\r\\n    function _randomIndex() internal returns (uint256) {\\r\\n        uint256 totalSize = _regularTokens - _numRegularMinted;\\r\\n\\r\\n        uint256 index = uint256(\\r\\n            keccak256(abi.encodePacked(nonce, msg.sender, block.difficulty, blockhash(block.number)))\\r\\n        ) % totalSize;\\r\\n        uint256 value = 0;\\r\\n        if (_indexes[index] != 0) {\\r\\n            value = _indexes[index];\\r\\n        } else {\\r\\n            value = index;\\r\\n        }\\r\\n\\r\\n        if (_indexes[totalSize - 1] == 0) {\\r\\n            _indexes[index] = totalSize - 1;\\r\\n        } else {\\r\\n            _indexes[index] = _indexes[totalSize - 1];\\r\\n        }\\r\\n        nonce++;\\r\\n        return value.add(1);\\r\\n    }\\r\\n\\r\\n    function getSign(uint256 tokenId) public pure override returns (ZodiacSign) {\\r\\n        bytes32 signHash = keccak256(abi.encode(SEED, tokenId));\\r\\n        return ZodiacSign(uint256(signHash) % 12);\\r\\n    }\\r\\n\\r\\n    function _isSpecial(uint256 probability) internal view returns (bool) {\\r\\n        uint256 random = uint256(\\r\\n            keccak256(abi.encodePacked(_numRegularMinted, msg.sender, block.difficulty, blockhash(block.number)))\\r\\n        ) % PIPS;\\r\\n        return random < probability;\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 probability\\r\\n    ) external override onlyMinter {\\r\\n        require(amount + _numRegularMinted <= _regularTokens, \\\"Not enough tokens left\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < amount; i++) {\\r\\n            uint256 tokenId = _randomIndex();\\r\\n\\r\\n            _numRegularMinted++;\\r\\n\\r\\n            _createPiglet(to, tokenId, 1, _isSpecial(probability));\\r\\n        }\\r\\n        _checkSaleEnded();\\r\\n    }\\r\\n\\r\\n    function isCelebrity(uint256 tokenId) public view override returns (bool) {\\r\\n        return tokenId > _regularTokens;\\r\\n    }\\r\\n\\r\\n    function _createWallet(uint256 tokenId) internal returns (IPigletWallet) {\\r\\n        address clone = Clones.cloneDeterministic(address(_walletLibrary), bytes32(tokenId));\\r\\n        IPigletWallet(clone).init(_oracle);\\r\\n        return IPigletWallet(clone);\\r\\n    }\\r\\n\\r\\n    function _createPiglet(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint8 level,\\r\\n        bool special\\r\\n    ) internal {\\r\\n        _mint(to, tokenId);\\r\\n        IPigletWallet wallet = _createWallet(tokenId);\\r\\n        _wallets[tokenId] = wallet;\\r\\n        _levels[tokenId] = level;\\r\\n        _lastMintTime[tokenId] = block.timestamp;\\r\\n        _special[tokenId] = special;\\r\\n    }\\r\\n\\r\\n    function mintCelebrities(address to) external override onlyMinter {\\r\\n        for (uint256 i = 0; i < _celebrityTokens; i++) {\\r\\n            uint256 tokenId = _regularTokens + i + 1;\\r\\n\\r\\n            _createPiglet(to, tokenId, 3, true);\\r\\n            _numCelebrityMinted++;\\r\\n        }\\r\\n\\r\\n        _checkSaleEnded();\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal pure override returns (string memory) {\\r\\n        return \\\"ipfs://\\\";\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override validToken(tokenId) returns (string memory uri) {\\r\\n        if (isCelebrity(tokenId)) {\\r\\n            return string(abi.encodePacked(_baseURI(), CELEBRITY_FOLDER, \\\"/\\\", Strings.toString(tokenId)));\\r\\n        }\\r\\n\\r\\n        bytes32 jsonHash = keccak256(abi.encode(SEED, tokenId, getLevel(tokenId), getSign(tokenId)));\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    _baseURI(),\\r\\n                    IPFS_FOLDERS[getLevel(tokenId) - 1],\\r\\n                    \\\"/\\\",\\r\\n                    Strings.toHexString(uint256(jsonHash), 32)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _getTokenBalance(uint256 tokenId) internal view validToken(tokenId) returns (uint256) {\\r\\n        uint256 balance = _token.balanceOf(address(getWallet(tokenId)));\\r\\n        balance += _getUnmintedTokens(tokenId);\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function getTotalBoost(uint256 tokenId) public view validToken(tokenId) returns (uint256) {\\r\\n        uint256 percentage = 0;\\r\\n        for (uint256 i = 0; i < _boosters.length; i++) {\\r\\n            if (_boosters[i].isBoosted(tokenId)) {\\r\\n                percentage += _boosters[i].getBoost();\\r\\n            }\\r\\n        }\\r\\n        return percentage;\\r\\n    }\\r\\n\\r\\n    function getDailyMintingAmount(uint256 tokenId) public view validToken(tokenId) returns (uint256) {\\r\\n        uint8 level = getLevel(tokenId);\\r\\n        uint256 mintingRatePerDay = _mintingRatePerDay[level - 1];\\r\\n        uint256 mintingAmount = mintingRatePerDay;\\r\\n        mintingAmount += ((mintingAmount * getTotalBoost(tokenId)) / PIPS);\\r\\n        return mintingAmount;\\r\\n    }\\r\\n\\r\\n    function _getUnmintedTokens(uint256 tokenId) private view returns (uint256) {\\r\\n        uint256 lastMintTime = _lastMintTime[tokenId];\\r\\n        uint256 daysMinting = (block.timestamp - lastMintTime) / 24 hours;\\r\\n        uint256 balance = getDailyMintingAmount(tokenId) * daysMinting;\\r\\n\\r\\n        return Math.min(balance, MAX_MINT_PER_PIG - _mintedAmount[tokenId]);\\r\\n    }\\r\\n\\r\\n    function getEligibleLevel(uint256 tokenId) public view returns (uint8) {\\r\\n        uint256 balance = _getTokenBalance(tokenId);\\r\\n\\r\\n        if (balance >= LEVEL_3_REQUIREMENTS) {\\r\\n            return 3;\\r\\n        }\\r\\n\\r\\n        if (balance >= LEVEL_2_REQUIREMENTS) {\\r\\n            return 2;\\r\\n        }\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function updatePiFiBalance(uint256 tokenId) external override {\\r\\n        _mintPiFi(tokenId);\\r\\n    }\\r\\n\\r\\n    function _mintPiFi(uint256 tokenId) internal {\\r\\n        uint256 tokensToMint = _getUnmintedTokens(tokenId);\\r\\n        if (tokensToMint > 0) {\\r\\n            IPigletWallet wallet = getWallet(tokenId);\\r\\n            _token.mint(address(wallet), tokensToMint);\\r\\n            _mintedAmount[tokenId] += tokensToMint;\\r\\n\\r\\n            wallet.registerDeposit(address(_token));\\r\\n\\r\\n            _lastMintTime[tokenId] = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function levelUp(uint256 tokenId) external validToken(tokenId) onlyTokenOwner(tokenId) {\\r\\n        uint8 level = getLevel(tokenId);\\r\\n        uint8 eligibleLevel = getEligibleLevel(tokenId);\\r\\n\\r\\n        if (level >= eligibleLevel) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _mintPiFi(tokenId);\\r\\n\\r\\n        _levels[tokenId] = eligibleLevel;\\r\\n\\r\\n        emit LevelUp(tokenId, eligibleLevel, msg.sender);\\r\\n    }\\r\\n\\r\\n    function getLevel(uint256 tokenId) public view override validToken(tokenId) returns (uint8) {\\r\\n        return _levels[tokenId];\\r\\n    }\\r\\n\\r\\n    function getWallet(uint256 tokenId) public view override validToken(tokenId) returns (IPigletWallet) {\\r\\n        return _wallets[tokenId];\\r\\n    }\\r\\n\\r\\n    function getBoosters() external view returns (IBooster[] memory) {\\r\\n        return _boosters;\\r\\n    }\\r\\n\\r\\n    function getBoosterStatuses(uint256 tokenId) external view returns (IBooster.Status[] memory) {\\r\\n        IBooster.Status[] memory statuses = new IBooster.Status[](_boosters.length);\\r\\n        for (uint256 i = 0; i < _boosters.length; i++) {\\r\\n            statuses[i] = _boosters[i].getStatus(tokenId);\\r\\n        }\\r\\n        return statuses;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) external override validToken(tokenId) onlyTokenOwner(tokenId) {\\r\\n        require(getLevel(tokenId) > 1, \\\"Cannot burn level 1 piglets\\\");\\r\\n\\r\\n        _mintPiFi(tokenId);\\r\\n\\r\\n        getWallet(tokenId).destroy(msg.sender);\\r\\n\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    //todo: set staker and portal as approved for all tokens?\\r\\n    function setStaker(address staker) external override onlyOwner {\\r\\n        require(_staker == address(0), \\\"Staker already set\\\");\\r\\n        _staker = staker;\\r\\n    }\\r\\n\\r\\n    function setMetaversePortal(address portal) external override onlyOwner {\\r\\n        require(_portal == address(0), \\\"Portal already set\\\");\\r\\n        _portal = portal;\\r\\n    }\\r\\n\\r\\n    function getMetaversePortal() public view override returns (address) {\\r\\n        return _portal;\\r\\n    }\\r\\n\\r\\n    function materialize(uint256 tokenId) external override validToken(tokenId) onlyTokenOwner(tokenId) onlyPortal {\\r\\n        require(getLevel(tokenId) == 3, \\\"Can materialize only level 3 piglets\\\");\\r\\n\\r\\n        _mintPiFi(tokenId);\\r\\n\\r\\n        _levels[tokenId] = 4;\\r\\n\\r\\n        emit Materialized(tokenId);\\r\\n    }\\r\\n\\r\\n    function digitalize(uint256 tokenId) external override validToken(tokenId) onlyTokenOwner(tokenId) onlyPortal {\\r\\n        require(getLevel(tokenId) == 4, \\\"Can digitalize only level 4 piglets\\\");\\r\\n\\r\\n        _mintPiFi(tokenId);\\r\\n\\r\\n        _levels[tokenId] = 3;\\r\\n\\r\\n        emit Digitalized(tokenId);\\r\\n    }\\r\\n\\r\\n    function getStaker() external view override returns (address) {\\r\\n        return _staker;\\r\\n    }\\r\\n\\r\\n    function isSpecial(uint256 tokenId) external view override validToken(tokenId) returns (bool) {\\r\\n        return _special[tokenId] || isCelebrity(tokenId);\\r\\n    }\\r\\n\\r\\n    function getPiFiBalance(uint256 tokenId) public view validToken(tokenId) returns (uint256, uint256) {\\r\\n        uint256 pifiBalance = _getTokenBalance(tokenId);\\r\\n        uint256 pifiBalanceInUSD = _oracle.getTokenUSDPrice(address(_token), pifiBalance);\\r\\n        return (pifiBalance, pifiBalanceInUSD);\\r\\n    }\\r\\n\\r\\n    function _createTokenData(address token, uint256 balance) private view returns (TokenData memory) {\\r\\n        return TokenData(token, balance, _oracle.getTokenUSDPrice(token, balance));\\r\\n    }\\r\\n\\r\\n    function getInvestments(uint256 tokenId) external view returns (TokenData[] memory) {\\r\\n        IPigletWallet wallet = getWallet(tokenId);\\r\\n        IPigletWallet.TokenData[] memory investedTokens = wallet.listTokens();\\r\\n        uint256 size = investedTokens.length + 1;\\r\\n        if (address(wallet).balance > 0) {\\r\\n            size++;\\r\\n        }\\r\\n\\r\\n        uint256 index = 0;\\r\\n        TokenData[] memory prices = new TokenData[](size);\\r\\n        prices[index] = _createTokenData(address(_token), _getTokenBalance(tokenId));\\r\\n        for (uint256 i = 0; i < investedTokens.length; i++) {\\r\\n            // making sure not to count PiFis deposited in the wallet twice\\r\\n            if (investedTokens[i].token != address(_token)) {\\r\\n                index++;\\r\\n                prices[index] = _createTokenData(investedTokens[i].token, investedTokens[i].balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (address(wallet).balance > 0) {\\r\\n            index++;\\r\\n            prices[index].token = address(0);\\r\\n            prices[index].balance = address(wallet).balance;\\r\\n            prices[index].balanceInUSD = _oracle.getNativeTokenPrice(address(wallet).balance);\\r\\n        }\\r\\n\\r\\n        //trimming the size of the token if there were duplicated tokens\\r\\n        if (index != size - 1) {\\r\\n            TokenData[] memory temp = new TokenData[](index + 1);\\r\\n            for (uint256 i = 0; i <= index; i++) {\\r\\n                temp[i] = prices[i];\\r\\n            }\\r\\n            prices = temp;\\r\\n        }\\r\\n        return prices;\\r\\n    }\\r\\n\\r\\n    function getPigletData(uint256 tokenId) public view validToken(tokenId) returns (PigletData memory) {\\r\\n        (uint256 pifiBalance, uint256 pifiBalanceInUSD) = getPiFiBalance(tokenId);\\r\\n        PigletData memory data = PigletData(\\r\\n            tokenURI(tokenId),\\r\\n            tokenId,\\r\\n            getLevel(tokenId),\\r\\n            getEligibleLevel(tokenId),\\r\\n            pifiBalance,\\r\\n            getWallet(tokenId).getBalanceInUSD() + pifiBalanceInUSD,\\r\\n            getDailyMintingAmount(tokenId),\\r\\n            getTotalBoost(tokenId),\\r\\n            getWallet(tokenId)\\r\\n        );\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    function pigletzByOwner(\\r\\n        address pigletzOwner,\\r\\n        uint256 start,\\r\\n        uint256 limit\\r\\n    ) external view returns (PigletData[] memory) {\\r\\n        uint256 total = balanceOf(pigletzOwner);\\r\\n        require(start <= total, \\\"Start index must be less than or equal to total pigletz\\\");\\r\\n        uint256 end = start + limit;\\r\\n\\r\\n        if (start == 0 && limit == 0) {\\r\\n            end = total;\\r\\n        }\\r\\n        uint256 size = Math.min(total, end) - start;\\r\\n        PigletData[] memory pigletz = new PigletData[](size);\\r\\n        for (uint256 i = start; i < start + size; i++) {\\r\\n            uint256 tokenId = tokenOfOwnerByIndex(pigletzOwner, i);\\r\\n            pigletz[i - start] = getPigletData(tokenId);\\r\\n        }\\r\\n        return pigletz;\\r\\n    }\\r\\n\\r\\n    function registerDeposit(uint256 tokenId, address token) public validToken(tokenId) onlyTokenOwner(tokenId) {\\r\\n        IPigletWallet wallet = getWallet(tokenId);\\r\\n        wallet.registerDeposit(token);\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        uint256 tokenId,\\r\\n        address sender,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) public validToken(tokenId) onlyTokenOwner(tokenId) {\\r\\n        IPigletWallet wallet = getWallet(tokenId);\\r\\n        wallet.deposit(token, sender, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/piglet/IPigletz.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\nimport \\\"./IPigletWallet.sol\\\";\\r\\nimport \\\"../boosters/IBooster.sol\\\";\\r\\n\\r\\ninterface IPigletz is IERC721Enumerable {\\r\\n    enum ZodiacSign {\\r\\n        Aries,\\r\\n        Taurus,\\r\\n        Gemini,\\r\\n        Cancer,\\r\\n        Leo,\\r\\n        Virgo,\\r\\n        Libra,\\r\\n        Scorpio,\\r\\n        Sagittarius,\\r\\n        Capricorn,\\r\\n        Aquarius,\\r\\n        Pisces\\r\\n    }\\r\\n    struct TokenData {\\r\\n        address token;\\r\\n        uint256 balance;\\r\\n        uint256 balanceInUSD;\\r\\n    }\\r\\n\\r\\n    struct PigletData {\\r\\n        string uri;\\r\\n        uint256 tokenId;\\r\\n        uint8 level;\\r\\n        uint8 eligibleLevel;\\r\\n        uint256 pifiBalance;\\r\\n        uint256 totalValue;\\r\\n        uint256 dailyMintingRate;\\r\\n        uint256 boost;\\r\\n        IPigletWallet wallet;\\r\\n    }\\r\\n\\r\\n    event SaleEnded(uint256 totalSold, uint256 totalRevenue);\\r\\n\\r\\n    event LevelUp(uint256 indexed tokenId, uint8 indexed level, address indexed owner);\\r\\n\\r\\n    event Materialized(uint256 indexed tokenId);\\r\\n\\r\\n    event Digitalized(uint256 indexed tokenId);\\r\\n\\r\\n    function updatePiFiBalance(uint256 tokenId) external;\\r\\n\\r\\n    function setStaker(address staker) external;\\r\\n\\r\\n    function setMetaversePortal(address portal) external;\\r\\n\\r\\n    function materialize(uint256 tokenId) external;\\r\\n\\r\\n    function digitalize(uint256 tokenId) external;\\r\\n\\r\\n    function getSign(uint256 tokenId) external view returns (ZodiacSign);\\r\\n\\r\\n    function getLevel(uint256 tokenId) external view returns (uint8);\\r\\n\\r\\n    function getWallet(uint256 tokenID) external view returns (IPigletWallet);\\r\\n\\r\\n    function burn(uint256 tokenId) external;\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 probabilityOfSpecial\\r\\n    ) external;\\r\\n\\r\\n    function mintCelebrities(address to) external;\\r\\n\\r\\n    function getStaker() external view returns (address);\\r\\n\\r\\n   function getMetaversePortal() external view returns (address);\\r\\n\\r\\n    function maxSupply() external view returns (uint256);\\r\\n\\r\\n    function tokenCount() external view returns (uint256);\\r\\n\\r\\n    function isSpecial(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function isCelebrity(uint256 tokenId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/piglet/PigletWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\r\\n\\r\\nimport \\\"./IPigletWallet.sol\\\";\\r\\n\\r\\nimport \\\"../oracle/IOracle.sol\\\";\\r\\n\\r\\ncontract PigletWallet is Ownable, ReentrancyGuard, IPigletWallet {\\r\\n    mapping(address => uint256) private _tokenBalances;\\r\\n    address[] private _tokens;\\r\\n    IOracle private _oracle;\\r\\n    bool _initialized = false;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function init(IOracle oracle) public override {\\r\\n        require(_initialized == false, \\\"Wallet already initialized\\\");\\r\\n        _transferOwnership(msg.sender);\\r\\n        _oracle = oracle;\\r\\n        _initialized = true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function getBalanceInUSD() external view override returns (uint256) {\\r\\n        uint256 usdBalance = _oracle.getNativeTokenPrice(address(this).balance);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            usdBalance += _getTokenUSDPrice(_tokens[i], _tokenBalances[_tokens[i]]);\\r\\n        }\\r\\n\\r\\n        return usdBalance;\\r\\n    }\\r\\n\\r\\n    function _getTokenUSDPrice(address token, uint256 balance) internal view returns (uint256) {\\r\\n        try IOracle(_oracle).getTokenUSDPrice(token, balance) returns (uint256 price) {\\r\\n            if (price > 0) return uint256(price);\\r\\n        } catch {\\r\\n            return 0;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function maxTokenTypes() public pure override returns (uint256) {\\r\\n        return 10;\\r\\n    }\\r\\n\\r\\n    function listTokens() public view override returns (TokenData[] memory) {\\r\\n        TokenData[] memory list = new TokenData[](_tokens.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            list[i] = TokenData({ token: _tokens[i], balance: _tokenBalances[_tokens[i]] });\\r\\n        }\\r\\n\\r\\n        return list;\\r\\n    }\\r\\n\\r\\n    function _findTokenIndex(address token) internal view returns (uint256) {\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            if (_tokens[i] == token) return i;\\r\\n        }\\r\\n        return _tokens.length;\\r\\n    }\\r\\n\\r\\n    function registerDeposit(address token) external override onlyOwner {\\r\\n        require(token != address(0), \\\"invalid token\\\");\\r\\n        require(token != address(this), \\\"cannot register self\\\");\\r\\n        require(token != address(msg.sender), \\\"cannot register self\\\");\\r\\n        try IERC20(token).balanceOf(address(this)) returns (uint256 balance) {\\r\\n            require(balance > 0, \\\"Token must have a balance greater than 0\\\");\\r\\n\\r\\n            uint256 index = _findTokenIndex(token);\\r\\n            if (index == _tokens.length) {\\r\\n                _tokens.push(token);\\r\\n            }\\r\\n            require(index < _tokens.length);\\r\\n            _tokens[index] = token;\\r\\n            _tokenBalances[token] = balance;\\r\\n\\r\\n            emit TokenTransfered(token, address(this), balance);\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                emit TokenTransferError(token, address(this), \\\"Unable to transfer\\\");\\r\\n            } else {\\r\\n                emit TokenTransferError(token, address(this), string(reason));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        address token,\\r\\n        address sender,\\r\\n        uint256 amount\\r\\n    ) external override onlyOwner returns (bool) {\\r\\n        require(amount > 0, \\\"Amount to invest has to be non-zero\\\");\\r\\n        require(listTokens().length < maxTokenTypes(), \\\"Max different token types reached\\\");\\r\\n        try IERC20(token).transferFrom(sender, address(this), amount) returns (bool result) {\\r\\n            assert(result == true);\\r\\n\\r\\n            if (_tokenBalances[token] == 0) {\\r\\n                _tokens.push(token);\\r\\n            }\\r\\n            _tokenBalances[token] += amount;\\r\\n\\r\\n            emit TokenTransfered(token, address(this), amount);\\r\\n\\r\\n            return true;\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                emit TokenTransferError(token, sender, \\\"Unable to transfer\\\");\\r\\n            } else {\\r\\n                emit TokenTransferError(token, sender, string(reason));\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function destroy(address recipient) external override onlyOwner nonReentrant {\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address token = _tokens[i];\\r\\n            uint256 balance = _tokenBalances[token];\\r\\n            _withdrawToken(token, recipient, balance);\\r\\n        }\\r\\n\\r\\n        // Transfer ethers if any\\r\\n        payable(recipient).transfer(address(this).balance);\\r\\n\\r\\n        emit Destroyed(address(this));\\r\\n    }\\r\\n\\r\\n    function _withdrawToken(\\r\\n        address token,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        try IERC20(token).transfer(recipient, amount) returns (bool result) {\\r\\n            assert(result == true);\\r\\n            emit TokenTransfered(token, recipient, amount);\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                emit TokenTransferError(token, recipient, \\\"Unable to transfer, approving instead\\\");\\r\\n            } else {\\r\\n                emit TokenTransferError(token, recipient, string(reason));\\r\\n            }\\r\\n            IERC20(token).approve(recipient, amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/PiFiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract PiFiToken is ERC20Capped, AccessControl {\\n    uint256 public constant MAX_SUPPLY = 25 * 10**27;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER\\\");\\n\\n    constructor() ERC20(\\\"PiFi Token\\\", \\\"PiFi\\\") ERC20Capped(MAX_SUPPLY) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    function isMinter(address account) public view virtual returns (bool) {\\n        return hasRole(MINTER_ROLE, account);\\n    }\\n\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, account);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin(msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(msg.sender), \\\"Restricted to minters.\\\");\\n        _;\\n    }\\n\\n    function mint(address account, uint256 amount) public virtual onlyMinter {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public virtual onlyMinter {\\n        _burn(account, amount);\\n    }\\n\\n    function addMinter(address account) public virtual onlyAdmin {\\n        grantRole(MINTER_ROLE, account);\\n    }\\n\\n    function renounceAdmin() public virtual {\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/boosters/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n// @todo we will need documentation here\\r\\n// for examples see OpenZeppelin contracts\\r\\n\\r\\ninterface IBooster {\\r\\n    enum Status {\\r\\n        Boosted,\\r\\n        Ready,\\r\\n        Locked,\\r\\n        NotReady\\r\\n    }\\r\\n\\r\\n    event Boosted(uint256 indexed tokenId, uint256 boostAmount, uint256 level, bool value);\\r\\n\\r\\n    function getStatus(uint256 tokenId) external view returns (Status);\\r\\n\\r\\n    function getName() external view returns (string memory);\\r\\n\\r\\n    function getBoost() external view returns (uint256);\\r\\n\\r\\n    function getRequirements() external view returns (string memory description, uint256[] memory values);\\r\\n\\r\\n    function isReady(uint256 tokenID) external view returns (bool);\\r\\n\\r\\n    function boost(uint256[] calldata tokenIds) external;\\r\\n\\r\\n    function unBoost(uint256[] calldata tokens) external;\\r\\n\\r\\n    function numInCollection() external view returns (uint256);\\r\\n\\r\\n    function isLocked(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function isBoosted(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function getBoostAmount(uint256 tokenId, uint256 amount) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/boosters/InvestTokensBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./Booster.sol\\\";\\r\\nimport \\\"../piglet/IPigletz.sol\\\";\\r\\n\\r\\ncontract InvestTokensBooster is Booster {\\r\\n    uint256 internal _amount;\\r\\n\\r\\n    constructor(\\r\\n        IPigletz pigletz,\\r\\n        uint256 boost,\\r\\n        uint256 amount,\\r\\n        uint256 level\\r\\n    ) Booster(pigletz, boost, level) {\\r\\n        _pigletz = pigletz;\\r\\n        _amount = amount;\\r\\n    }\\r\\n\\r\\n    function getName() external view virtual override returns (string memory) {\\r\\n        return \\\"Invest Tokens\\\";\\r\\n    }\\r\\n\\r\\n    function getRequirements()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory description, uint256[] memory values)\\r\\n    {\\r\\n        values = new uint256[](1);\\r\\n        values[0] = _amount;\\r\\n        return (\\\"Invest tokens with value of at least $${0} USD\\\", values);\\r\\n    }\\r\\n\\r\\n    function isReady(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        IPigletWallet wallet = IPigletz(_pigletz).getWallet(tokenId);\\r\\n\\r\\n        require(address(wallet) != address(0), \\\"Token does not exist\\\");\\r\\n\\r\\n        return wallet.getBalanceInUSD() >= _amount && !isLocked(tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/boosters/InvestMultiTokensBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./Booster.sol\\\";\\r\\nimport \\\"../piglet/IPigletz.sol\\\";\\r\\n\\r\\nimport \\\"../oracle/IOracle.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/Denominations.sol\\\";\\r\\n\\r\\ncontract InvestMultiTokensBooster is Booster {\\r\\n    IOracle private _oracle;\\r\\n    uint256 private _numTokens;\\r\\n    address _pifiToken;\\r\\n\\r\\n    constructor(\\r\\n        IPigletz pigletz,\\r\\n        IOracle oracle,\\r\\n        address pifi,\\r\\n        uint256 boost,\\r\\n        uint256 numTokens,\\r\\n        uint256 level\\r\\n    ) Booster(pigletz, boost, level) {\\r\\n        _pigletz = pigletz;\\r\\n        _oracle = oracle;\\r\\n        _numTokens = numTokens;\\r\\n        _pifiToken = pifi;\\r\\n    }\\r\\n\\r\\n    function getName() external view virtual override returns (string memory) {\\r\\n        return \\\"Invest Multiple Tokens\\\";\\r\\n    }\\r\\n\\r\\n    function getRequirements()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory description, uint256[] memory values)\\r\\n    {\\r\\n        values = new uint256[](1);\\r\\n        values[0] = _numTokens;\\r\\n        return (\\\"Invest ${0} different tokens\\\", values);\\r\\n    }\\r\\n\\r\\n    function _isListed(address token) internal view returns (bool) {\\r\\n        return _oracle.getTokenUSDPrice(token, 1 ether) > 0;\\r\\n    }\\r\\n\\r\\n    function isReady(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        IPigletWallet wallet = IPigletz(_pigletz).getWallet(tokenId);\\r\\n\\r\\n        require(address(wallet) != address(0), \\\"Token does not exist\\\");\\r\\n        IPigletWallet.TokenData[] memory tokens = wallet.listTokens();\\r\\n\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            if (_isListed(tokens[i].token) && tokens[i].token != _pifiToken) count++;\\r\\n        }\\r\\n        if (address(wallet).balance > 0) count++;\\r\\n        return count >= _numTokens && !isLocked(tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/boosters/CollectSameSignsBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./Booster.sol\\\";\\r\\nimport \\\"../piglet/IPigletz.sol\\\";\\r\\n\\r\\ncontract CollectSameSignsBooster is Booster {\\r\\n    uint256 _numWithSameSigns;\\r\\n\\r\\n    constructor(\\r\\n        IPigletz pigletz,\\r\\n        uint256 boostPercentage,\\r\\n        uint256 numSame,\\r\\n        uint256 level\\r\\n    ) Booster(pigletz, boostPercentage, level) {\\r\\n        _pigletz = pigletz;\\r\\n        _numWithSameSigns = numSame;\\r\\n        assert(numSame <= 100);\\r\\n    }\\r\\n\\r\\n    function numInCollection() public view virtual override returns (uint256) {\\r\\n        return _numWithSameSigns;\\r\\n    }\\r\\n\\r\\n    function getName() external view virtual override returns (string memory) {\\r\\n        return \\\"Collect Same Signs\\\";\\r\\n    }\\r\\n\\r\\n    function getRequirements()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory description, uint256[] memory values)\\r\\n    {\\r\\n        values = new uint256[](1);\\r\\n        values[0] = _numWithSameSigns;\\r\\n        return (\\\"Collect ${0} piglets with the same sign\\\", values);\\r\\n    }\\r\\n\\r\\n    function _getSign(uint256 tokenId) internal view returns (uint256) {\\r\\n        return uint256(_pigletz.getSign(tokenId));\\r\\n    }\\r\\n\\r\\n    function _isEligible(uint256 id) internal view returns (bool) {\\r\\n        return !isLocked(id) && !isBoosted(id) && !_pigletz.isCelebrity(id);\\r\\n    }\\r\\n\\r\\n    function isLocked(uint256 id) public view override returns (bool) {\\r\\n        return _pigletz.isCelebrity(id) || super.isLocked(id);\\r\\n    }\\r\\n\\r\\n    function isReady(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        address owner = _pigletz.ownerOf(tokenId);\\r\\n        uint256 numberOfPiglets = _pigletz.balanceOf(owner);\\r\\n        uint256[] memory signs = new uint256[](12);\\r\\n        for (uint256 i = 0; i < numberOfPiglets; i++) {\\r\\n            uint256 id = _pigletz.tokenOfOwnerByIndex(owner, i);\\r\\n\\r\\n            if (_isEligible(id)) {\\r\\n                uint256 sign = _getSign(id);\\r\\n\\r\\n                signs[uint256(sign)]++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return signs[_getSign(tokenId)] >= _numWithSameSigns;\\r\\n    }\\r\\n\\r\\n    function _haveSameSign(uint256[] calldata tokens) internal view returns (bool) {\\r\\n        uint256 sign = uint256(_pigletz.getSign(tokens[0]));\\r\\n        for (uint256 i = 1; i < tokens.length; i++) {\\r\\n            if (uint256(_pigletz.getSign(tokens[i])) != sign) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function boost(uint256[] calldata tokens) public virtual override {\\r\\n        require(tokens.length == numInCollection(), \\\"Wrong number of piglets\\\");\\r\\n        require(_haveSameOwner(tokens), \\\"Not all piglets are owned by the same owner\\\");\\r\\n        require(_haveNotBeenBoosted(tokens), \\\"Some piglets have already been boosted\\\");\\r\\n        require(_areNotCelebrity(tokens), \\\"Some piglets are celebrities\\\");\\r\\n        require(_haveCorrectLevel(tokens), \\\"Some piglets are not of the correct level\\\");\\r\\n        require(_haveSameSign(tokens), \\\"Some piglets dont have the same sign\\\");\\r\\n\\r\\n        _setBoosted(tokens, true);\\r\\n\\r\\n        _updateTokenBalance(tokens);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/boosters/CollectSignsBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./Booster.sol\\\";\\r\\nimport \\\"../piglet/IPigletz.sol\\\";\\r\\n\\r\\ncontract CollectSignsBooster is Booster {\\r\\n    uint256 _numSigns;\\r\\n\\r\\n    constructor(\\r\\n        IPigletz pigletz,\\r\\n        uint256 boostPercentage,\\r\\n        uint256 numSigns,\\r\\n        uint256 level\\r\\n    ) Booster(pigletz, boostPercentage, level) {\\r\\n        _pigletz = pigletz;\\r\\n        _numSigns = numSigns;\\r\\n        assert(numSigns <= 12);\\r\\n    }\\r\\n\\r\\n    function getName() external view virtual override returns (string memory) {\\r\\n        return \\\"Collect Different Signs\\\";\\r\\n    }\\r\\n\\r\\n    function numInCollection() public view virtual override returns (uint256) {\\r\\n        return _numSigns;\\r\\n    }\\r\\n\\r\\n    function getRequirements()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory description, uint256[] memory values)\\r\\n    {\\r\\n        values = new uint256[](1);\\r\\n        values[0] = _numSigns;\\r\\n        return (\\\"Collect ${0} sign\\\", values);\\r\\n    }\\r\\n\\r\\n    function _isEligible(uint256 id) internal view returns (bool) {\\r\\n        return !isLocked(id) && !isBoosted(id) && !_pigletz.isCelebrity(id);\\r\\n    }\\r\\n\\r\\n    function isLocked(uint256 id) public view override returns (bool) {\\r\\n        return _pigletz.isCelebrity(id) || super.isLocked(id);\\r\\n    }\\r\\n\\r\\n    function isReady(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        address owner = _pigletz.ownerOf(tokenId);\\r\\n        uint256 numberOfPiglets = _pigletz.balanceOf(owner);\\r\\n        uint256[] memory signs = new uint256[](12);\\r\\n\\r\\n        for (uint256 i = 0; i < numberOfPiglets; i++) {\\r\\n            uint256 id = _pigletz.tokenOfOwnerByIndex(owner, i);\\r\\n            if (_isEligible(id)) {\\r\\n                signs[uint256(_pigletz.getSign(id))]++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < 12; i++) {\\r\\n            if (signs[i] > 0) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        return count >= _numSigns;\\r\\n    }\\r\\n\\r\\n    function _haveDifferentSigns(uint256[] memory tokens) internal view returns (bool) {\\r\\n        uint16[] memory signs = new uint16[](12);\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            uint256 sign = uint256(_pigletz.getSign(tokens[i]));\\r\\n            signs[sign]++;\\r\\n            if (signs[sign] > 1) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function boost(uint256[] calldata tokens) public virtual override {\\r\\n        require(tokens.length == numInCollection(), \\\"Wrong number of piglets\\\");\\r\\n        require(_haveSameOwner(tokens), \\\"Not all piglets are owned by the same owner\\\");\\r\\n        require(_haveNotBeenBoosted(tokens), \\\"Some piglets have already been boosted\\\");\\r\\n        require(_areNotCelebrity(tokens), \\\"Some piglets are celebrities\\\");\\r\\n        require(_haveCorrectLevel(tokens), \\\"Some piglets are not of the correct level\\\");\\r\\n        require(_haveDifferentSigns(tokens), \\\"All piglets must have different signs\\\");\\r\\n\\r\\n        _setBoosted(tokens, true);\\r\\n\\r\\n        _updateTokenBalance(tokens);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/boosters/CollectNumberBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./Booster.sol\\\";\\r\\nimport \\\"../piglet/IPigletz.sol\\\";\\r\\n\\r\\ncontract CollectNumberBooster is Booster {\\r\\n    uint256 private _numberToCollect;\\r\\n\\r\\n    constructor(\\r\\n        IPigletz pigletz,\\r\\n        uint256 boost,\\r\\n        uint256 numberToCollect,\\r\\n        uint8 level\\r\\n    ) Booster(pigletz, boost, level) {\\r\\n        _pigletz = pigletz;\\r\\n        _numberToCollect = numberToCollect;\\r\\n    }\\r\\n\\r\\n    function getName() external view virtual override returns (string memory) {\\r\\n        return \\\"Collect Number\\\";\\r\\n    }\\r\\n\\r\\n    function getRequirements()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory description, uint256[] memory values)\\r\\n    {\\r\\n        values = new uint256[](1);\\r\\n        values[0] = _numberToCollect;\\r\\n        return (\\\"Collect ${0} Piglets\\\", values);\\r\\n    }\\r\\n\\r\\n    function isReady(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        address owner = _pigletz.ownerOf(tokenId);\\r\\n        return _pigletz.balanceOf(owner) >= _numberToCollect && !this.isLocked(tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/boosters/StakingBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./Booster.sol\\\";\\r\\nimport \\\"../piglet/IPigletz.sol\\\";\\r\\n\\r\\ncontract StakingBooster is Booster {\\r\\n    constructor(IPigletz pigletz, uint256 boost) Booster(pigletz, boost, 1) {\\r\\n        _pigletz = pigletz;\\r\\n    }\\r\\n\\r\\n    function getName() external view virtual override returns (string memory) {\\r\\n        return \\\"Stake Piglet\\\";\\r\\n    }\\r\\n\\r\\n    function getRequirements()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory description, uint256[] memory values)\\r\\n    {\\r\\n        values = new uint256[](1);\\r\\n        values[0] = 1;\\r\\n        return (\\\"Stake ${0} Piglet\\\", values);\\r\\n    }\\r\\n\\r\\n    function isReady(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        address staker = _pigletz.getStaker();\\r\\n        return staker != address(0) && _pigletz.ownerOf(tokenId) == staker;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/boosters/SpecialBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./Booster.sol\\\";\\r\\nimport \\\"../piglet/IPigletz.sol\\\";\\r\\n\\r\\ncontract SpecialBooster is Booster {\\r\\n    constructor(IPigletz pigletz, uint256 boost) Booster(pigletz, boost, 1) {\\r\\n        _pigletz = pigletz;\\r\\n    }\\r\\n\\r\\n    function getName() external view virtual override returns (string memory) {\\r\\n        return \\\"Special Piglet Booster\\\";\\r\\n    }\\r\\n\\r\\n    function getRequirements()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory description, uint256[] memory values)\\r\\n    {\\r\\n        values = new uint256[](0);\\r\\n        return (\\\"Piglet is Special\\\", values);\\r\\n    }\\r\\n\\r\\n    function isReady(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        return _pigletz.isSpecial(tokenId);\\r\\n    }\\r\\n\\r\\n    function isLocked(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        return !_pigletz.isSpecial(tokenId);\\r\\n    }\\r\\n\\r\\n    function isBoosted(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        return _pigletz.isSpecial(tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IOracle {\\r\\n    function getNativeTokenPrice(uint256 amount) external view returns (uint256);\\r\\n\\r\\n    function getTokenPrice(address token, uint256 amount) external view returns (uint256);\\r\\n\\r\\n    function getTokenUSDPrice(address token, uint256 amount) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/piglet/IPigletWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"../oracle/IOracle.sol\\\";\\r\\n\\r\\ninterface IPigletWallet {\\r\\n    struct TokenData {\\r\\n        address token;\\r\\n        uint256 balance;\\r\\n    }\\r\\n\\r\\n    function init(IOracle oracle) external;\\r\\n\\r\\n    event TokenTransferError(address token, address recipient, string reason);\\r\\n\\r\\n    event TokenTransfered(address token, address recipient, uint256 amount);\\r\\n\\r\\n    event Destroyed(address wallet);\\r\\n\\r\\n    function getBalanceInUSD() external view returns (uint256);\\r\\n\\r\\n    function maxTokenTypes() external view returns (uint256);\\r\\n\\r\\n    function listTokens() external view returns (TokenData[] memory);\\r\\n\\r\\n    function destroy(address recipient) external;\\r\\n\\r\\n    function registerDeposit(address token) external;\\r\\n\\r\\n    function deposit(\\r\\n        address token,\\r\\n        address sender,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/Denominations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Capped.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    uint256 private immutable _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor(uint256 cap_) {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_mint}.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(ERC20.totalSupply() + amount <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        super._mint(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/boosters/Booster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./IBooster.sol\\\";\\r\\nimport \\\"../piglet/IPigletz.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\nabstract contract Booster is IBooster {\\r\\n    uint256 constant PIPS = 10000;\\r\\n    IPigletz internal _pigletz;\\r\\n    uint256 internal _boost;\\r\\n    uint256 internal _level;\\r\\n    mapping(uint256 => bool) _boosted;\\r\\n\\r\\n    constructor(\\r\\n        IPigletz piglet,\\r\\n        uint256 boostPercentage,\\r\\n        uint256 level\\r\\n    ) {\\r\\n        _pigletz = piglet;\\r\\n        _boost = boostPercentage;\\r\\n        _level = level;\\r\\n        assert(_boost >= 1000);\\r\\n    }\\r\\n\\r\\n    function getStatus(uint256 tokenId) external view override returns (Status) {\\r\\n        if (isBoosted(tokenId)) {\\r\\n            return Status.Boosted;\\r\\n        }\\r\\n\\r\\n        if (isReady(tokenId)) {\\r\\n            return Status.Ready;\\r\\n        }\\r\\n\\r\\n        if (isLocked(tokenId)) {\\r\\n            return Status.Locked;\\r\\n        }\\r\\n        return Status.NotReady;\\r\\n    }\\r\\n\\r\\n    function getName() external view virtual override returns (string memory) {\\r\\n        return \\\"Base Booster\\\";\\r\\n    }\\r\\n\\r\\n    function getRequirements()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory description, uint256[] memory values)\\r\\n    {\\r\\n        values = new uint256[](2);\\r\\n        values[0] = 1;\\r\\n        values[1] = 2;\\r\\n        return (\\\"You need to collect ${0} and ${1} in order to succeed\\\", values);\\r\\n    }\\r\\n\\r\\n    function getBoost() public view virtual override returns (uint256) {\\r\\n        return _boost;\\r\\n    }\\r\\n\\r\\n    function numInCollection() public view virtual override returns (uint256) {\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    function isReady(uint256 tokenID) public view virtual override returns (bool) {\\r\\n        return !isLocked(tokenID);\\r\\n    }\\r\\n\\r\\n    function isLocked(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        return _pigletz.getLevel(tokenId) < _level;\\r\\n    }\\r\\n\\r\\n    function isBoosted(uint256 tokenId) public view virtual override returns (bool) {\\r\\n        return _boosted[tokenId];\\r\\n    }\\r\\n\\r\\n    function _areBoostable(uint256[] memory tokens) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            if (!isReady(tokens[i])) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _haveCorrectLevel(uint256[] memory tokens) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            if (isLocked(tokens[i])) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _updateTokenBalance(uint256[] memory tokens) internal {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            _pigletz.updatePiFiBalance(tokens[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function boost(uint256[] calldata tokens) public virtual override {\\r\\n        require(tokens.length == numInCollection(), \\\"Wrong number of piglets\\\");\\r\\n        require(_haveSameOwner(tokens), \\\"Not all piglets are owned by the same owner\\\");\\r\\n        require(_haveNotBeenBoosted(tokens), \\\"Some piglets have already been boosted\\\");\\r\\n        require(_areBoostable(tokens), \\\"Some piglets are not boostable\\\");\\r\\n        require(_haveCorrectLevel(tokens), \\\"Some piglets are not of the correct level\\\");\\r\\n        _updateTokenBalance(tokens);\\r\\n\\r\\n        _setBoosted(tokens, true);\\r\\n    }\\r\\n\\r\\n    function unBoost(uint256[] calldata tokens) external virtual override {\\r\\n        require(tokens.length == numInCollection(), \\\"Wrong number of piglets\\\");\\r\\n        require(_haveSameOwner(tokens), \\\"Not all piglets are owned by the same owner\\\");\\r\\n        require(!_haveNotBeenBoosted(tokens), \\\"Some piglets have not been boosted\\\");\\r\\n\\r\\n        _updateTokenBalance(tokens);\\r\\n\\r\\n        _setBoosted(tokens, false);\\r\\n    }\\r\\n\\r\\n    function _setBoosted(uint256[] calldata tokens, bool val) internal {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            _boosted[tokens[i]] = val;\\r\\n            emit Boosted(tokens[i], getBoost(), _level, val);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _haveSameOwner(uint256[] calldata tokens) internal view returns (bool) {\\r\\n        address owner = _pigletz.ownerOf(tokens[0]); // allowed to be invoked by a non owner\\r\\n        for (uint256 i = 1; i < tokens.length; i++) {\\r\\n            if (_pigletz.ownerOf(tokens[i]) != owner) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _haveNotBeenBoosted(uint256[] calldata tokens) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            if (isBoosted(tokens[i])) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _areNotCelebrity(uint256[] memory tokens) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            if (_pigletz.isCelebrity(tokens[i])) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getBoostAmount(uint256 tokenId, uint256 amount) external view virtual override returns (uint256) {\\r\\n        if (!isBoosted(tokenId)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return (amount * _boost) / PIPS;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"contract PiFiToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"regularTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"celebrityTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Digitalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Materialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRevenue\",\"type\":\"uint256\"}],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"digitalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBoosterStatuses\",\"outputs\":[{\"internalType\":\"enum IBooster.Status[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoosters\",\"outputs\":[{\"internalType\":\"contract IBooster[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDailyMintingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getEligibleLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getInvestments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct IPigletz.TokenData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetaversePortal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPiFiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPigletData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eligibleLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pifiBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyMintingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"},{\"internalType\":\"contract IPigletWallet\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct IPigletz.PigletData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSign\",\"outputs\":[{\"internalType\":\"enum IPigletz.ZodiacSign\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getWallet\",\"outputs\":[{\"internalType\":\"contract IPigletWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isCelebrity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isSpecial\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"materialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintCelebrities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pigletzOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"pigletzByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eligibleLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"pifiBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyMintingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"},{\"internalType\":\"contract IPigletWallet\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct IPigletz.PigletData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"registerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"portal\",\"type\":\"address\"}],\"name\":\"setMetaversePortal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"setStaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updatePiFiBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pigletz", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000003780567c16275887340d90ff4747366a51edbf0d000000000000000000000000f7405eff16ff7e96898b6b40497a54894fc86c4400000000000000000000000000000000000000000000000000000000000030390000000000000000000000000000000000000000000000000000000000000005", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}