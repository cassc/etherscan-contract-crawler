{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"LpDepositor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IEpsProxy.sol\\\";\\nimport \\\"IDepositToken.sol\\\";\\nimport \\\"IDddToken.sol\\\";\\nimport \\\"ILockedEPX.sol\\\";\\nimport \\\"IBondedFeeDistributor.sol\\\";\\nimport \\\"IDddIncentiveDistributor.sol\\\";\\nimport \\\"IDddLpStaker.sol\\\";\\nimport \\\"ILpStaker.sol\\\";\\nimport \\\"IRewardsToken.sol\\\";\\nimport \\\"IIncentiveVoting.sol\\\";\\n\\n\\ncontract LpDepositor is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Amounts {\\n        uint256 epx;\\n        uint256 ddd;\\n    }\\n    struct ExtraReward {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    IERC20 public immutable EPX;\\n    IEllipsisLpStaking public immutable lpStaker;\\n    IIncentiveVoting public immutable epsVoter;\\n\\n    IDddToken public DDD;\\n    ILockedEPX public dEPX;\\n    IBondedFeeDistributor public bondedDistributor;\\n    IDddIncentiveDistributor public dddIncentiveDistributor;\\n    IDddLpStaker public dddLpStaker;\\n    IEllipsisProxy public proxy;\\n    address public depositTokenImplementation;\\n    address public fixedVoteLpToken;\\n\\n    // number of EPX an LP must earn via the protocol in order to receive 1 DDD\\n    uint256 public immutable DDD_EARN_RATIO;\\n    // DDD multiplier if LP locks entire earned EPX balance at time of claim\\n    uint256 public immutable DDD_LOCK_MULTIPLIER;\\n    // % of DDD minted for `dddLpStaker` relative to the amount earned by LPs\\n    uint256 public immutable DDD_LP_PERCENT;\\n\\n    uint256 public pendingFeeEpx;\\n    uint256 public pendingFeeDdd;\\n    uint256 public lastFeeTransfer;\\n\\n    // pool -> DDD deposit token\\n    mapping(address => address) public depositTokens;\\n\\n    // user -> pool -> deposit amount\\n    mapping(address => mapping(address => uint256)) public userBalances;\\n    // pool -> total deposit amount\\n    mapping(address => uint256) public totalBalances;\\n\\n    // pool -> integrals\\n    mapping(address => Amounts) rewardIntegral;\\n    // user -> pool -> integrals\\n    mapping(address => mapping(address => Amounts)) rewardIntegralFor;\\n    // user -> pool -> claimable\\n    mapping(address => mapping(address => Amounts)) unclaimedRewards;\\n\\n    // pool -> third party rewards\\n    mapping(address => address[]) public extraRewards;\\n    // pool -> third party reward integrals\\n    mapping(address => uint256[]) extraRewardIntegral;\\n    // user -> pool -> third party reward integrals\\n    mapping(address => mapping(address => mapping(uint256 => uint256))) extraRewardIntegralFor;\\n    // user -> pool -> unclaimed reward balances\\n    mapping(address => mapping(address => mapping(uint256 => uint256))) unclaimedExtraRewards;\\n\\n    event Deposit(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event ClaimedAndBonded(\\n        address indexed caller,\\n        address indexed receiver,\\n        uint256 bondAmount\\n    );\\n    event Claimed(\\n        address indexed caller,\\n        address indexed receiver,\\n        address[] tokens,\\n        uint256 epxAmount,\\n        uint256 dddAmount\\n    );\\n    event ClaimedExtraRewards(\\n        address indexed caller,\\n        address indexed receiver,\\n        address token\\n    );\\n    event ExtraRewardsUpdated(\\n        address indexed token,\\n        address[] rewards\\n    );\\n    event TransferDeposit(\\n        address indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        IERC20 _EPX,\\n        IEllipsisLpStaking _lpStaker,\\n        IIncentiveVoting _epsVoter,\\n        uint256 _dddEarnRatio,\\n        uint256 _dddLockMultiplier,\\n        uint256 _dddLpPercent\\n    ) {\\n        EPX = _EPX;\\n        lpStaker = _lpStaker;\\n        epsVoter = _epsVoter;\\n        DDD_EARN_RATIO = _dddEarnRatio;\\n        DDD_LOCK_MULTIPLIER = _dddLockMultiplier;\\n        DDD_LP_PERCENT = _dddLpPercent;\\n    }\\n\\n    function setAddresses(\\n        IDddToken _DDD,\\n        ILockedEPX _dEPX,\\n        IEllipsisProxy _proxy,\\n        IBondedFeeDistributor _bondedDistributor,\\n        IDddIncentiveDistributor _dddIncentiveDistributor,\\n        IDddLpStaker _dddLpStaker,\\n        address _depositTokenImplementation,\\n        address _fixedVoteLpToken\\n    ) external onlyOwner {\\n        DDD = _DDD;\\n        dEPX = _dEPX;\\n        proxy = _proxy;\\n\\n        bondedDistributor = _bondedDistributor;\\n        dddIncentiveDistributor = _dddIncentiveDistributor;\\n        dddLpStaker = _dddLpStaker;\\n        depositTokenImplementation = _depositTokenImplementation;\\n        fixedVoteLpToken = _fixedVoteLpToken;\\n\\n        EPX.approve(address(_dEPX), type(uint256).max);\\n        _dEPX.approve(address(_dddIncentiveDistributor), type(uint256).max);\\n\\n        renounceOwnership();\\n    }\\n\\n    function extraRewardsLength(address _pool) external view returns (uint256) {\\n        return extraRewards[_pool].length;\\n    }\\n\\n    function claimable(address _user, address[] calldata _tokens) external view returns (Amounts[] memory) {\\n        Amounts[] memory pending = new Amounts[](_tokens.length);\\n        uint256[] memory totalClaimable = lpStaker.claimableReward(address(proxy), _tokens);\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            pending[i] = unclaimedRewards[_user][token];\\n            uint256 balance = userBalances[_user][token];\\n            if (balance == 0) continue;\\n\\n            Amounts memory integral = rewardIntegral[token];\\n            uint256 total = totalBalances[token];\\n            if (total > 0) {\\n                uint256 reward = totalClaimable[i];\\n                reward -= reward * 15 / 100;\\n                integral.epx += 1e18 * reward / total;\\n                integral.ddd += 1e18 * (reward / DDD_EARN_RATIO) / total;\\n            }\\n\\n            Amounts storage integralFor = rewardIntegralFor[_user][token];\\n            if (integralFor.epx < integral.epx) {\\n                pending[i].epx += balance * (integral.epx - integralFor.epx) / 1e18;\\n                pending[i].ddd += balance * (integral.ddd - integralFor.ddd) / 1e18;\\n            }\\n        }\\n        return pending;\\n    }\\n\\n    function claimableExtraRewards(address user, address pool) external view returns (ExtraReward[] memory) {\\n        uint256 length = extraRewards[pool].length;\\n        uint256 total = totalBalances[pool];\\n        uint256 balance = userBalances[user][pool];\\n        ExtraReward[] memory rewards = new ExtraReward[](length);\\n        for (uint i = 0; i < length; i++) {\\n            address token = extraRewards[pool][i];\\n            uint256 amount = unclaimedExtraRewards[user][pool][i];\\n            if (balance > 0) {\\n                uint256 earned = IRewardsToken(pool).earned(address(proxy), token);\\n                uint256 integral = extraRewardIntegral[pool][i] + 1e18 * earned / total;\\n                uint256 integralFor = extraRewardIntegralFor[user][pool][i];\\n                amount += balance * (integral - integralFor) / 1e18;\\n            }\\n            rewards[i] = ExtraReward({token: token, amount: amount});\\n        }\\n        return rewards;\\n    }\\n\\n    function deposit(address _user, address _token, uint256 _amount) external {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(proxy), _amount);\\n\\n        uint256 balance = userBalances[_user][_token];\\n        uint256 total = totalBalances[_token];\\n\\n        uint256 reward = proxy.deposit(_token, _amount);\\n        _updateIntegrals(_user, _token, balance, total, reward);\\n\\n        userBalances[_user][_token] = balance + _amount;\\n        totalBalances[_token] = total + _amount;\\n\\n        address depositToken = depositTokens[_token];\\n        if (depositToken == address(0)) {\\n            depositToken = _deployDepositToken(_token);\\n            depositTokens[_token] = depositToken;\\n        }\\n        IDepositToken(depositToken).mint(_user, _amount);\\n        emit Deposit(msg.sender, _user, _token, _amount);\\n    }\\n\\n    function withdraw(address _receiver, address _token, uint256 _amount) external {\\n        uint256 balance = userBalances[msg.sender][_token];\\n        uint256 total = totalBalances[_token];\\n        require(balance >= _amount, \\\"Insufficient balance\\\");\\n\\n        userBalances[msg.sender][_token] = balance - _amount;\\n        totalBalances[_token] = total - _amount;\\n\\n        address depositToken = depositTokens[_token];\\n        IDepositToken(depositToken).burn(msg.sender, _amount);\\n\\n        uint256 reward = proxy.withdraw(_receiver, _token, _amount);\\n        _updateIntegrals(msg.sender, _token, balance, total, reward);\\n        emit Withdraw(msg.sender, _receiver, _token, _amount);\\n    }\\n\\n    /**\\n        @notice Claim pending EPX and DDD rewards\\n        @param _receiver Account to send claimed rewards to\\n        @param _tokens List of LP tokens to claim for\\n        @param _maxBondAmount Maximum amount of claimed EPX to convert to bonded dEPX.\\n                              Converting to bonded dEPX earns a multiplier on DDD rewards.\\n     */\\n    function claim(address _receiver, address[] calldata _tokens, uint256 _maxBondAmount) external {\\n        Amounts memory claims;\\n        uint256 balance = EPX.balanceOf(address(this));\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            uint256 reward = proxy.claimEmissions(token);\\n            _updateIntegrals(msg.sender, token, userBalances[msg.sender][token], totalBalances[token], reward);\\n            claims.epx += unclaimedRewards[msg.sender][token].epx;\\n            claims.ddd += unclaimedRewards[msg.sender][token].ddd;\\n            delete unclaimedRewards[msg.sender][token];\\n        }\\n        if (_maxBondAmount > 0) {\\n            // deposit and bond the claimable EPX, up to `_maxBondAmount`\\n            uint256 bondAmount = _maxBondAmount > claims.epx ? claims.epx : _maxBondAmount;\\n            dEPX.deposit(_receiver, bondAmount, true);\\n            emit ClaimedAndBonded(msg.sender, _receiver, bondAmount);\\n            // apply `DDD_LOCK_MULTIPLIER` to earned DDD, porportional to bonded EPX amount\\n            uint256 dddBonusBase = claims.ddd * bondAmount / claims.epx;\\n            claims.ddd = dddBonusBase * DDD_LOCK_MULTIPLIER + (claims.ddd - dddBonusBase);\\n            claims.epx -= bondAmount;\\n        }\\n        if (claims.epx > 0) {\\n            EPX.safeTransfer(_receiver, claims.epx);\\n        }\\n        if (claims.ddd > 0) {\\n            DDD.mint(_receiver, claims.ddd);\\n            pendingFeeDdd += claims.ddd * 100 / (100 - DDD_LP_PERCENT) - claims.ddd;\\n        }\\n        emit Claimed(msg.sender, _receiver, _tokens, claims.epx, claims.ddd);\\n    }\\n\\n    /**\\n        @notice Claim all third-party incentives earned from `pool`\\n     */\\n    function claimExtraRewards(address _receiver, address pool) external {\\n        uint256 total = totalBalances[pool];\\n        uint256 balance = userBalances[msg.sender][pool];\\n        if (total > 0) _updateExtraIntegrals(msg.sender, pool, balance, total);\\n        uint256 length = extraRewards[pool].length;\\n        for (uint i = 0; i < length; i++) {\\n            uint256 amount = unclaimedExtraRewards[msg.sender][pool][i];\\n            if (amount > 0) {\\n                unclaimedExtraRewards[msg.sender][pool][i] = 0;\\n                IERC20(extraRewards[pool][i]).safeTransfer(_receiver, amount);\\n            }\\n        }\\n        emit ClaimedExtraRewards(msg.sender, _receiver, pool);\\n    }\\n\\n    /**\\n        @notice Update the local cache of third-party rewards for a given LP token\\n        @dev Must be called each time a new incentive token is added to a pool, in\\n             order for the protocol to begin distributing that token.\\n     */\\n    function updatePoolExtraRewards(address pool) external {\\n        uint256 count = IRewardsToken(pool).rewardCount();\\n        address[] storage rewards = extraRewards[pool];\\n        for (uint256 i = rewards.length; i < count; i ++) {\\n            rewards.push(IRewardsToken(pool).rewardTokens(i));\\n            extraRewardIntegral[pool].push();\\n        }\\n        emit ExtraRewardsUpdated(pool, rewards);\\n    }\\n\\n    function transferDeposit(address _token, address _from, address _to, uint256 _amount) external returns (bool) {\\n        require(msg.sender == depositTokens[_token], \\\"Unauthorized caller\\\");\\n\\n        uint256 total = totalBalances[_token];\\n        uint256 balance = userBalances[_from][_token];\\n        require(balance >= _amount, \\\"Insufficient balance\\\");\\n\\n        uint256 reward = proxy.claimEmissions(_token);\\n        _updateIntegrals(_from, _token, balance, total, reward);\\n        userBalances[_from][_token] = balance - _amount;\\n\\n        balance = userBalances[_to][_token];\\n        _updateIntegrals(_to, _token, balance, total - _amount, 0);\\n        userBalances[_to][_token] = balance + _amount;\\n        emit TransferDeposit(_token, _from, _to, _amount);\\n        return true;\\n    }\\n\\n    /**\\n        @notice Transfer accrued EPX and DDD fees to dEPX bonders, DDD lockers and DDD Lp Stakers\\n        @dev Called once per day on normal interactions with the contract. With normal protocol\\n             use it should not be a requirement to explicitly call this function.\\n     */\\n    function pushPendingProtocolFees() public {\\n        lastFeeTransfer = block.timestamp;\\n\\n        uint256 pending = pendingFeeDdd;\\n        if (pending > 0) {\\n            // mint DDD for and DDD Lp Staker\\n            pendingFeeDdd = 0;\\n            DDD.mint(address(dddLpStaker), pending);\\n            dddLpStaker.notifyFeeAmount(pending);\\n        }\\n\\n        pending = pendingFeeEpx;\\n        if (pending > 0) {\\n            pendingFeeEpx = 0;\\n\\n            // mint DDD for dEPX bonders\\n            uint256 pendingDdd = pending / DDD_EARN_RATIO;\\n            DDD.mint(address(bondedDistributor), pendingDdd);\\n            // transfer 2/3 of EPX to dEPX bonders\\n            EPX.safeTransfer(address(bondedDistributor), pending / 3 * 2);\\n            // notify bonded distributor\\n            bondedDistributor.notifyFeeAmounts(pending / 3 * 2, pendingDdd);\\n\\n            // 1/3 of EPX is converted to dEPX\\n            pending /= 3;\\n            dEPX.deposit(address(this), pending, false);\\n            if (epsVoter.isApproved(fixedVoteLpToken)) {\\n                // if `fixedVoteLpToken` is approved for emisisons, 1/2 of the\\n                // dEPX is used as a bribe for votes on that pool\\n                pending /= 2;\\n                dddIncentiveDistributor.depositIncentive(fixedVoteLpToken, address(dEPX), pending);\\n            }\\n            // remaining dEPX is given to all DDD lockers\\n            dddIncentiveDistributor.depositIncentive(address(0), address(dEPX), pending);\\n        }\\n    }\\n\\n    function _deployDepositToken(address pool) internal returns (address token) {\\n        // taken from https://solidity-by-example.org/app/minimal-proxy/\\n        bytes20 targetBytes = bytes20(depositTokenImplementation);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            token := create(0, clone, 0x37)\\n        }\\n        IDepositToken(token).initialize(pool);\\n        return token;\\n    }\\n\\n    function _updateIntegrals(\\n        address user,\\n        address pool,\\n        uint256 balance,\\n        uint256 total,\\n        uint256 reward\\n    ) internal {\\n        Amounts memory integral = rewardIntegral[pool];\\n        if (reward > 0) {\\n            uint256 fee = reward * 15 / 100;\\n            reward -= fee;\\n            pendingFeeEpx += fee;\\n\\n            integral.epx += 1e18 * reward / total;\\n            integral.ddd += 1e18 * (reward / DDD_EARN_RATIO) / total;\\n            rewardIntegral[pool] = integral;\\n        }\\n        Amounts memory integralFor = rewardIntegralFor[user][pool];\\n        if (integralFor.epx < integral.epx) {\\n            Amounts storage claims = unclaimedRewards[user][pool];\\n            claims.epx += balance * (integral.epx - integralFor.epx) / 1e18;\\n            claims.ddd += balance * (integral.ddd - integralFor.ddd) / 1e18;\\n            rewardIntegralFor[user][pool] = integral;\\n        }\\n\\n        if (total > 0 && extraRewards[pool].length > 0) {\\n            // if this token receives 3rd-party incentives, claim and update integrals\\n            _updateExtraIntegrals(user, pool, balance, total);\\n        } else if (lastFeeTransfer + 86400 < block.timestamp) {\\n            // once a day, transfer pending rewards to dEPX bonders and DDD lockers\\n            // we only do this on updates to pools without extra incentives because each\\n            // operation can be gas intensive\\n            pushPendingProtocolFees();\\n        }\\n    }\\n\\n    function _updateExtraIntegrals(\\n        address user,\\n        address pool,\\n        uint256 balance,\\n        uint256 total\\n    ) internal {\\n        address[] memory rewards = extraRewards[pool];\\n        uint256[] memory balances = new uint256[](rewards.length);\\n        for (uint i = 0; i < rewards.length; i++) {\\n            balances[i] = IERC20(rewards[i]).balanceOf(address(this));\\n        }\\n        proxy.getReward(pool, rewards);\\n        for (uint i = 0; i < rewards.length; i++) {\\n            uint256 delta = IERC20(rewards[i]).balanceOf(address(this)) - balances[i];\\n            uint256 integral = extraRewardIntegral[pool][i];\\n            if (delta > 0) {\\n                integral += 1e18 * delta / total;\\n                extraRewardIntegral[pool][i] = integral;\\n            }\\n            uint256 integralFor = extraRewardIntegralFor[user][pool][i];\\n            if (integralFor < integral) {\\n                unclaimedExtraRewards[user][pool][i] += balance * (integral - integralFor) / 1e18;\\n                extraRewardIntegralFor[user][pool][i] = integral;\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/**\\n * Based on the OpenZeppelin IER20 interface:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n *\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IEpsProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IEllipsisProxy {\\n    function lock(uint256 _amount) external returns (bool);\\n    function extendLock(uint256 _amount, uint256 _weeks) external returns (bool);\\n    function deposit(address _token, uint256 _amount) external returns (uint256);\\n    function withdraw(address _receiver, address _token, uint256 _amount) external returns (uint256);\\n    function claimEmissions(address _token) external returns (uint256);\\n    function claimFees(address[] calldata _tokens) external returns (bool);\\n    function vote(address[] calldata _tokens, uint256[] calldata _votes) external returns (bool);\\n    function createTokenApprovalVote(address _token) external returns (uint256 _voteIndex);\\n    function voteForTokenApproval(uint256 _voteIndex, uint256 _yesVotes) external returns (bool);\\n    function getReward(address _lpToken, address[] calldata _rewards) external returns (bool);\\n}\"\r\n    },\r\n    \"IDepositToken.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IDepositToken {\\n    function initialize(address _pool) external returns (bool);\\n    function mint(address _to, uint256 _value) external returns (bool);\\n    function burn(address _from, uint256 _value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IDddToken.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\nimport \\\"IERC20.sol\\\";\\n\\ninterface IDddToken is IERC20 {\\n    function mint(address _to, uint256 _value) external returns (bool);\\n}\"\r\n    },\r\n    \"ILockedEPX.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\nimport \\\"IERC20.sol\\\";\\n\\ninterface ILockedEPX is IERC20 {\\n    function deposit(address _receiver, uint256 _amount, bool _bond) external returns (bool);\\n}\"\r\n    },\r\n    \"IBondedFeeDistributor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IBondedFeeDistributor {\\n    function notifyFeeAmounts(uint256 _epxAmount, uint256 _dddAmount) external returns (bool);\\n    function deposit(address _user, uint256 _amount) external returns (bool);\\n}\"\r\n    },\r\n    \"IDddIncentiveDistributor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IDddIncentiveDistributor {\\n    function depositIncentive(address lpToken, address incentive, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"IDddLpStaker.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IDddLpStaker {\\n    function notifyFeeAmount(uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"ILpStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n\\ninterface IEllipsisLpStaking {\\n\\n    /**\\n        @notice Set the claim receiver address for the caller\\n        @param _receiver Claim receiver address\\n     */\\n    function setClaimReceiver(address _receiver) external;\\n\\n    /**\\n        @notice Allow or block third-party calls to deposit, withdraw\\n                or claim rewards on behalf of the caller\\n     */\\n    function setBlockThirdPartyActions(bool _block) external;\\n\\n    /**\\n        @notice Get the current number of unclaimed rewards for a user on one or more token\\n        @param _user User to query pending rewards for\\n        @param _tokens Array of token addresses to query\\n        @return uint256[] Unclaimed rewards\\n     */\\n    function claimableReward(address _user, address[] calldata _tokens) external view returns (uint256[] memory);\\n\\n    /**\\n        @notice Deposit LP tokens into the contract\\n        @param _token LP token address to deposit.\\n        @param _amount Amount of tokens to deposit.\\n        @param _claimRewards If true, also claim pending rewards on the token.\\n     */\\n    function deposit(address _token, uint256 _amount, bool _claimRewards) external returns (uint256);\\n\\n    /**\\n        @notice Withdraw LP tokens from the contract\\n        @param _token LP token address to withdraw.\\n        @param _amount Amount of tokens to withdraw.\\n        @param _claimRewards If true, also claim pending rewards on the token.\\n     */\\n    function withdraw(address _token, uint256 _amount, bool _claimRewards) external returns (uint256);\\n\\n    function claim(address _user, address[] calldata _tokens) external returns (uint256);\\n\\n    function emergencyWithdraw(address _token) external;\\n\\n}\\n\"\r\n    },\r\n    \"IRewardsToken.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n\\ninterface IRewardsToken is IERC20 {\\n    function rewardCount() external view returns (uint256);\\n    function rewardTokens(uint256 idx) external view returns (address);\\n    function earned(address account, address _rewardsToken) external view returns (uint256);\\n    function getReward() external;\\n}\\n\"\r\n    },\r\n    \"IIncentiveVoting.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IIncentiveVoting {\\n\\n    function NEW_TOKEN_APPROVAL_VOTE_MIN_WEIGHT() external view returns (uint256);\\n    function startTime() external view returns (uint256);\\n    function availableVotes(address _user) external view returns (uint256);\\n    function availableTokenApprovalVotes(address _user, uint256 _voteIndex) external view returns (uint256);\\n    function isApproved(address _token) external view returns (bool);\\n    function approvedTokensLength() external view returns (uint256);\\n    function approvedTokens(uint256) external view returns (address);\\n\\n    /**\\n        @notice Allocate votes toward LP tokens to receive emissions in the following week\\n        @param _tokens List of addresses of LP tokens to vote for\\n        @param _votes Votes to allocate to `_tokens`\\n     */\\n    function vote(address[] calldata _tokens, uint256[] calldata _votes) external;\\n\\n    /**\\n        @notice Create a new vote to enable protocol emissions on a given token\\n        @param _token Token address to create a vote for\\n        @return _voteIndex uint Index value used to reference the vote\\n     */\\n    function createTokenApprovalVote(address _token) external returns (uint256 _voteIndex);\\n\\n    /**\\n        @notice Vote in favor of approving a new token for protocol emissions\\n        @param _voteIndex Array index referencing the vote\\n     */\\n    function voteForTokenApproval(uint256 _voteIndex, uint256 _yesVotes) external;\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"LpDepositor.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_EPX\",\"type\":\"address\"},{\"internalType\":\"contract IEllipsisLpStaking\",\"name\":\"_lpStaker\",\"type\":\"address\"},{\"internalType\":\"contract IIncentiveVoting\",\"name\":\"_epsVoter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dddEarnRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dddLockMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dddLpPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dddAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimedAndBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ClaimedExtraRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"}],\"name\":\"ExtraRewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DDD\",\"outputs\":[{\"internalType\":\"contract IDddToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DDD_EARN_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DDD_LOCK_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DDD_LP_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondedDistributor\",\"outputs\":[{\"internalType\":\"contract IBondedFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_maxBondAmount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimExtraRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimable\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ddd\",\"type\":\"uint256\"}],\"internalType\":\"struct LpDepositor.Amounts[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"claimableExtraRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct LpDepositor.ExtraReward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dEPX\",\"outputs\":[{\"internalType\":\"contract ILockedEPX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dddIncentiveDistributor\",\"outputs\":[{\"internalType\":\"contract IDddIncentiveDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dddLpStaker\",\"outputs\":[{\"internalType\":\"contract IDddLpStaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epsVoter\",\"outputs\":[{\"internalType\":\"contract IIncentiveVoting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"extraRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedVoteLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFeeTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaker\",\"outputs\":[{\"internalType\":\"contract IEllipsisLpStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFeeDdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFeeEpx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract IEllipsisProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushPendingProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDddToken\",\"name\":\"_DDD\",\"type\":\"address\"},{\"internalType\":\"contract ILockedEPX\",\"name\":\"_dEPX\",\"type\":\"address\"},{\"internalType\":\"contract IEllipsisProxy\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"contract IBondedFeeDistributor\",\"name\":\"_bondedDistributor\",\"type\":\"address\"},{\"internalType\":\"contract IDddIncentiveDistributor\",\"name\":\"_dddIncentiveDistributor\",\"type\":\"address\"},{\"internalType\":\"contract IDddLpStaker\",\"name\":\"_dddLpStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositTokenImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fixedVoteLpToken\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"updatePoolExtraRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LpDepositor", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000af41054c1487b0e5e2b9250c0332ecbce6ce9d710000000000000000000000005b74c99aa2356b4eaa7b85dc486843edff8dfdbe0000000000000000000000004695e50a38e33ea09d1f623ba8a8db24219bb06a000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000014", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}