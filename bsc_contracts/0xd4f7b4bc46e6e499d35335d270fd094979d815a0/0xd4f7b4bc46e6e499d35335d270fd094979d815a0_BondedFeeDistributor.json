{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"BondedFeeDistributor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IEpsProxy.sol\\\";\\nimport \\\"IFeeDistributor.sol\\\";\\n\\n\\ncontract BondedFeeDistributor is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct StreamData {\\n        uint256 start;\\n        uint256 amount;\\n        uint256 claimed;\\n    }\\n    struct Deposit {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n    struct DepositData {\\n        uint256 index;\\n        Deposit[] deposits;\\n    }\\n\\n    // Fees are transferred into this contract as they are collected, and in the same tokens\\n    // that they are collected in. The total amount collected each week is recorded in\\n    // `weeklyFeeAmounts`. At the end of a week, the fee amounts are streamed out over\\n    // the following week based on each user's lock weight at the end of that week. Data\\n    // about the active stream for each token is tracked in `activeUserStream`\\n\\n    // fee token -> week -> total amount received that week\\n    mapping(address => uint256[65535]) public weeklyFeeAmounts;\\n    // user -> fee token -> data about the active stream\\n    mapping(address => mapping(address => StreamData)) activeUserStream;\\n\\n\\n    // Weekly bonded balances are stored within a dynamic array, where the array index\\n    // represents the week. The final value is always the current balance. The length\\n    // will be less than that of `getWeek` if a user has not interacted in over a week.\\n\\n    // user -> weekly bonded balance\\n    mapping(address => uint256[]) weeklyUserBalance;\\n    // weekly total bonded balance\\n    uint256[] totalBalance;\\n\\n    // Deposited balances are \\\"bonded\\\" in order to receive fees. Each deposit cannot be\\n    // \\\"unbonded\\\" (withdrawn via a linear stream) for `MIN_BOND_DURATION` after bonding.\\n\\n    // user -> deposit data\\n    mapping (address => DepositData) userDeposits;\\n    // users -> data on the active unbonding stream\\n    mapping (address => StreamData) exitStream;\\n\\n\\n    // array of all fee tokens that have been added\\n    address[] public feeTokens;\\n    // timestamp when a fee token was last claimed\\n    mapping(address => uint256) public lastClaim;\\n    // known balance of each token, used to calculate amounts when receiving new fees\\n    mapping(address => uint256) tokenBalance;\\n\\n    // account earning rewards => receiver of rewards for this account\\n    // if receiver is set to address(0), rewards are paid to the earner\\n    // this is used to aid 3rd party contract integrations\\n    mapping (address => address) public claimReceiver;\\n    // when set to true, other accounts cannot call `claim` on behalf of an account\\n    mapping(address => bool) public blockThirdPartyActions;\\n\\n    // Ellipsis contracts\\n    address public immutable EPX;\\n    IFeeDistributor public immutable epsFeeDistributor;\\n\\n    // DotDot contracts\\n    IERC20 public dEPX;\\n    address public DDD;\\n    address public lpDepositor;\\n    IEllipsisProxy public proxy;\\n\\n    // new weeks within this contract begin on Thursday 00:00:00 UTC\\n    uint256 public immutable startTime;\\n\\n    uint256 constant WEEK = 86400 * 7;\\n    uint256 constant public MIN_BOND_DURATION = 86400 * 8;\\n    uint256 constant public UNBOND_STREAM_DURATION = 86400 * 15;\\n\\n    event FeesClaimed(\\n        address caller,\\n        address indexed account,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    constructor(address _EPX, IFeeDistributor _feeDistributor) {\\n        EPX = _EPX;\\n        epsFeeDistributor = _feeDistributor;\\n        startTime = _feeDistributor.startTime();\\n    }\\n\\n    function setAddresses(\\n        IERC20 _dEPX,\\n        address _DDD,\\n        address _lpDepositor,\\n        IEllipsisProxy _proxy\\n    ) external onlyOwner {\\n        dEPX = _dEPX;\\n        DDD = _DDD;\\n        lpDepositor = _lpDepositor;\\n        proxy = _proxy;\\n\\n        renounceOwnership();\\n    }\\n\\n    function setClaimReceiver(address _receiver) external {\\n        claimReceiver[msg.sender] = _receiver;\\n    }\\n\\n    function setBlockThirdPartyActions(bool _block) external {\\n        blockThirdPartyActions[msg.sender] = _block;\\n    }\\n\\n    function getWeek() public view returns (uint256) {\\n        return (block.timestamp - startTime) / 604800;\\n    }\\n\\n    function feeTokensLength() external view returns (uint) {\\n        return feeTokens.length;\\n    }\\n\\n    /**\\n        @notice Get an array of claimable amounts of different tokens accrued from protocol fees\\n        @param _user Address to query claimable amounts for\\n        @param _tokens List of tokens to query claimable amounts of\\n     */\\n    function claimable(address _user, address[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            (amounts[i], ) = _getClaimable(_user, _tokens[i]);\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n        @notice The total amount of bonded tokens held in the contract\\n     */\\n    function bondedSupply() external view returns (uint256) {\\n        uint256 length = totalBalance.length;\\n        if (length == 0) return 0;\\n        return totalBalance[length-1];\\n    }\\n\\n    /**\\n        @notice The total amount of bonded tokens held in the contract for `_user`\\n        @dev Does not include any balance in an active unbonding stream\\n     */\\n    function bondedBalance(address _user) external view returns (uint256) {\\n        uint256 length = weeklyUserBalance[_user].length;\\n        if (length == 0) return 0;\\n        return weeklyUserBalance[_user][length-1];\\n    }\\n\\n    /**\\n        @notice The amount of bonded tokens for `_user` which have passed the\\n                minimum bond duration and so could begin unbonding immediately.\\n     */\\n    function unbondableBalance(address _user) public view returns (uint256) {\\n        uint balance;\\n        DepositData storage data = userDeposits[_user];\\n        for (uint256 i = data.index; i < data.deposits.length; i++) {\\n            Deposit storage dep = data.deposits[i];\\n            if (dep.timestamp + MIN_BOND_DURATION > block.timestamp) break;\\n            balance += dep.amount;\\n        }\\n        return balance;\\n    }\\n\\n    /**\\n        @notice Get info on the current unbonding stream for a user\\n        @return claimable Streamable balance that can currently be withdrawn\\n        @return total Total balance left in the stream\\n     */\\n    function streamingBalances(address _user) public view returns (uint256 claimable, uint256 total)\\n    {\\n        StreamData storage stream = exitStream[_user];\\n        if (stream.start == 0) return (0, 0);\\n        uint256 remaining = stream.amount - stream.claimed;\\n        if (stream.start + UNBOND_STREAM_DURATION < block.timestamp) {\\n            return (remaining, remaining);\\n        } else {\\n            uint256 claimable = stream.amount * (block.timestamp - stream.start) / UNBOND_STREAM_DURATION;\\n            return (claimable - stream.claimed, remaining);\\n        }\\n    }\\n\\n    /**\\n        @notice Claim accrued protocol fees according to a locked balance in `TokenLocker`.\\n        @dev Fees are claimable up to the end of the previous week. Claimable fees from more\\n             than one week ago are released immediately, fees from the previous week are streamed.\\n        @param _user Address to claim for. Any account can trigger a claim for any other account.\\n        @param _tokens Array of tokens to claim for.\\n        @return claimedAmounts Array of amounts claimed.\\n     */\\n    function claim(address _user, address[] calldata _tokens)\\n        external\\n        returns (uint256[] memory claimedAmounts)\\n    {\\n        if (msg.sender != _user) {\\n            require(!blockThirdPartyActions[_user], \\\"Cannot claim on behalf of this account\\\");\\n        }\\n\\n        _extendBalanceArray(weeklyUserBalance[_user]);\\n        _extendBalanceArray(totalBalance);\\n\\n        address receiver = claimReceiver[_user];\\n        if (receiver == address(0)) receiver = _user;\\n\\n        claimedAmounts = new uint256[](_tokens.length);\\n        address[] memory tokensToFetch = new address[](_tokens.length);\\n        uint256 toFetchLength;\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n\\n            uint256 lastClaimed = lastClaim[token];\\n            if (lastClaimed + 86400 <= block.timestamp) {\\n                // once a day, claim new fees from Ellipsis\\n                tokensToFetch[toFetchLength] = token;\\n                toFetchLength++;\\n            }\\n\\n            StreamData memory stream;\\n            (claimedAmounts[i], stream) = _getClaimable(_user, token);\\n            activeUserStream[_user][token] = stream;\\n            if (claimedAmounts[i] > 0) {\\n                tokenBalance[token] -= claimedAmounts[i];\\n                IERC20(token).safeTransfer(receiver, claimedAmounts[i]);\\n            }\\n            emit FeesClaimed(msg.sender, _user, receiver, token, claimedAmounts[i]);\\n        }\\n\\n        if (toFetchLength > 0) {\\n            assembly { mstore(tokensToFetch, toFetchLength) }\\n            fetchEllipsisFees(tokensToFetch);\\n        }\\n\\n        return claimedAmounts;\\n    }\\n\\n    /**\\n        @notice Bond dEPX within the contract in order to receive fees\\n        @dev Bonded tokens cannot be withdrawn for `MIN_BOND_DURATION`\\n        @param _user Address to deposit tokens for\\n        @param _amount Amount of dEPX to deposit\\n     */\\n    function deposit(address _user, uint256 _amount) external returns (bool) {\\n        if (msg.sender != address(dEPX)) {\\n            // if the caller is dEPX we trust the balance was updated\\n            // and skip the transfer\\n            if (msg.sender != _user) {\\n                require(!blockThirdPartyActions[_user], \\\"Cannot deposit on behalf of this account\\\");\\n            }\\n            dEPX.safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n\\n        tokenBalance[address(dEPX)] += _amount;\\n        uint256 balance = _extendBalanceArray(weeklyUserBalance[_user]);\\n        uint256 total = _extendBalanceArray(totalBalance);\\n\\n        uint256 week = getWeek();\\n        weeklyUserBalance[_user][week] = balance + _amount;\\n        totalBalance[week] = total + _amount;\\n\\n        DepositData storage data = userDeposits[_user];\\n        uint256 timestamp = block.timestamp / 86400 * 86400;\\n        uint256 length = data.deposits.length;\\n        if (length == 0 || data.deposits[length-1].timestamp < timestamp) {\\n            data.deposits.push(Deposit({timestamp: timestamp, amount: _amount}));\\n        } else {\\n            data.deposits[length-1].amount += _amount;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n        @notice Initiate an unbonding stream, allowing withdrawal of bonded tokens over the\\n                unbonding duration.\\n        @dev If there is already an active unbonding stream, any unclaimed balance is added\\n             to the new stream.\\n     */\\n    function initiateUnbondingStream(uint256 _amount) external returns (bool) {\\n        uint256 balance = _extendBalanceArray(weeklyUserBalance[msg.sender]);\\n        require(balance >= _amount, \\\"Insufficient balance\\\");\\n        uint256 total = _extendBalanceArray(totalBalance);\\n\\n        uint256 week = getWeek();\\n        weeklyUserBalance[msg.sender][week] = balance - _amount;\\n        totalBalance[week] = total - _amount;\\n\\n        uint256 remaining = _amount;\\n        DepositData storage data = userDeposits[msg.sender];\\n        for (uint256 i = data.index; ; i++) {\\n            Deposit memory dep = data.deposits[i];\\n            require(dep.timestamp + MIN_BOND_DURATION <= block.timestamp, \\\"Insufficient unbondable balance\\\");\\n            if (remaining >= dep.amount) {\\n                remaining -= dep.amount;\\n                delete data.deposits[i];\\n            } else {\\n                dep.amount -= remaining;\\n                remaining = 0;\\n            }\\n            if (remaining == 0) {\\n                data.index = i;\\n                break;\\n            }\\n        }\\n\\n        StreamData storage stream = exitStream[msg.sender];\\n        exitStream[msg.sender] = StreamData({\\n            start: block.timestamp,\\n            amount: stream.amount - stream.claimed + _amount,\\n            claimed: 0\\n        });\\n\\n        return true;\\n    }\\n\\n    /**\\n        @notice Withdraw tokens that have finished unbonding.\\n     */\\n    function withdrawUnbondedTokens(address _receiver) external returns (bool) {\\n        StreamData storage stream = exitStream[msg.sender];\\n        uint256 amount;\\n        if (stream.start > 0) {\\n            (amount,) = streamingBalances(msg.sender);\\n            if (stream.start + UNBOND_STREAM_DURATION < block.timestamp) {\\n                delete exitStream[msg.sender];\\n            } else {\\n                stream.claimed = stream.claimed + amount;\\n            }\\n            tokenBalance[address(dEPX)] -= amount;\\n            dEPX.safeTransfer(_receiver, amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n        @notice Fetch fees from the Ellipsis fee distributor\\n        @dev Fees received within a week are distributed in the following week.\\n             When a user claims a fee token from this contract, an onward claim\\n             to Ellipsis is made if the last claim was more than one day ago.\\n             In theory, this should mean each fee token must be claimed using\\n             `fetchEllipsisFees` once to create an initial claimable amount\\n             for users. Subsequent calls will happen via regular user interactions.\\n     */\\n    function fetchEllipsisFees(address[] memory _tokens) public {\\n        proxy.claimFees(_tokens);\\n        uint256 week = getWeek();\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            uint256 balance = tokenBalance[token];\\n            uint256 received = IERC20(token).balanceOf(address(this)) - balance;\\n            if (received > 0) {\\n                if (balance == 0 && lastClaim[token] == 0) feeTokens.push(token);\\n                weeklyFeeAmounts[token][week] += received;\\n                tokenBalance[token] = balance + received;\\n                lastClaim[token] = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice Notify contract of newly received DDD and EPX fees\\n        @dev Only callable by `LpDepositor`. We trust the caller to supply the correct amounts.\\n     */\\n    function notifyFeeAmounts(uint256 _epxAmount, uint256 _dddAmount) external returns (bool) {\\n        require(msg.sender == lpDepositor);\\n        uint256 week = getWeek();\\n\\n        weeklyFeeAmounts[EPX][week] += _epxAmount;\\n        tokenBalance[EPX] += _epxAmount;\\n\\n        weeklyFeeAmounts[DDD][week] += _dddAmount;\\n        tokenBalance[DDD] += _dddAmount;\\n\\n        return true;\\n    }\\n\\n    function _getClaimable(address _user, address _token)\\n        internal\\n        view\\n        returns (uint256, StreamData memory)\\n    {\\n        uint256 claimableWeek = getWeek();\\n        uint256 balanceLength = weeklyUserBalance[_user].length;\\n\\n        if (claimableWeek == 0 || balanceLength == 0) {\\n            // the first full week hasn't completed yet or the user has never made a deposit\\n            return (0, StreamData({start: startTime, amount: 0, claimed: 0}));\\n        }\\n\\n        // the previous week is the claimable one\\n        claimableWeek -= 1;\\n        StreamData memory stream = activeUserStream[_user][_token];\\n        uint256 lastClaimWeek;\\n        if (stream.start == 0) {\\n            lastClaimWeek = 0;\\n        } else {\\n            lastClaimWeek = (stream.start - startTime) / WEEK;\\n        }\\n\\n        uint256 amount;\\n        if (claimableWeek == lastClaimWeek) {\\n            // special case: claim is happening in the same week as a previous claim\\n            uint256 previouslyClaimed = stream.claimed;\\n            stream = _buildStreamData(_user, _token, claimableWeek);\\n            amount = stream.claimed - previouslyClaimed;\\n            return (amount, stream);\\n        }\\n\\n        if (stream.start > 0) {\\n            // if there is a partially claimed week, get the unclaimed amount and increment\\n            // `lastClaimWeeek` so we begin iteration on the following week\\n            amount = stream.amount - stream.claimed;\\n            lastClaimWeek += 1;\\n        }\\n\\n        // iterate over weeks that have passed fully without any claims\\n        uint256 balance;\\n        uint256 total;\\n        uint256 totalLength = totalBalance.length;\\n        for (uint256 i = lastClaimWeek; i < claimableWeek; i++) {\\n            if (balanceLength > i) balance = weeklyUserBalance[_user][i];\\n            if (balance == 0) continue;\\n            if (totalLength > i) total = totalBalance[i];\\n            amount += weeklyFeeAmounts[_token][i] * balance / total;\\n        }\\n\\n        // add a partial amount for the active week\\n        stream = _buildStreamData(_user, _token, claimableWeek);\\n\\n        return (amount + stream.claimed, stream);\\n    }\\n\\n    function _buildStreamData(\\n        address _user,\\n        address _token,\\n        uint256 _week\\n    ) internal view returns (StreamData memory) {\\n        uint256 start = startTime + _week * WEEK;\\n        uint256 length = weeklyUserBalance[_user].length;\\n        uint256 balance = length > _week ? weeklyUserBalance[_user][_week] : weeklyUserBalance[_user][length - 1];\\n\\n        uint256 amount;\\n        uint256 claimed;\\n        if (balance > 0) {\\n            length = totalBalance.length;\\n            uint256 total = length > _week ? totalBalance[_week] : totalBalance[length - 1];\\n            amount = weeklyFeeAmounts[_token][_week] * balance / total;\\n            claimed = amount * (block.timestamp - 604800 - start) / WEEK;\\n        }\\n        return StreamData({start: start, amount: amount, claimed: claimed});\\n    }\\n\\n    function _extendBalanceArray(uint256[] storage balances) internal returns (uint256) {\\n        uint256 week = getWeek();\\n        uint256 length = balances.length;\\n        uint256 value = 0;\\n        if (length > 0) {\\n            value = balances[length - 1];\\n        }\\n        while (length <= week) {\\n            balances.push(value);\\n            length++;\\n        }\\n        return value;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/**\\n * Based on the OpenZeppelin IER20 interface:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n *\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"IEpsProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IEllipsisProxy {\\n    function lock(uint256 _amount) external returns (bool);\\n    function extendLock(uint256 _amount, uint256 _weeks) external returns (bool);\\n    function deposit(address _token, uint256 _amount) external returns (uint256);\\n    function withdraw(address _receiver, address _token, uint256 _amount) external returns (uint256);\\n    function claimEmissions(address _token) external returns (uint256);\\n    function claimFees(address[] calldata _tokens) external returns (bool);\\n    function vote(address[] calldata _tokens, uint256[] calldata _votes) external returns (bool);\\n    function createTokenApprovalVote(address _token) external returns (uint256 _voteIndex);\\n    function voteForTokenApproval(uint256 _voteIndex, uint256 _yesVotes) external returns (bool);\\n    function getReward(address _lpToken, address[] calldata _rewards) external returns (bool);\\n}\"\r\n    },\r\n    \"IFeeDistributor.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\n\\ninterface IFeeDistributor {\\n\\n    function startTime() external view returns (uint256);\\n\\n    /**\\n        @notice Set the claim receiver address for the caller\\n        @param _receiver Claim receiver address\\n     */\\n    function setClaimReceiver(address _receiver) external;\\n\\n    /**\\n        @notice Allow or block third-party calls to deposit, withdraw\\n                or claim rewards on behalf of the caller\\n     */\\n    function setBlockThirdPartyActions(bool _block) external;\\n\\n    /**\\n        @notice Claim accrued protocol fees\\n        @param _user Address to claim for\\n        @param _tokens Array of tokens to claim for\\n        @return claimedAmounts Array of amounts claimed\\n     */\\n    function claim(address _user, address[] calldata _tokens) external returns (uint256[] memory claimedAmounts);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"BondedFeeDistributor.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_EPX\",\"type\":\"address\"},{\"internalType\":\"contract IFeeDistributor\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DDD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BOND_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNBOND_STREAM_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockThirdPartyActions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"bondedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dEPX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epsFeeDistributor\",\"outputs\":[{\"internalType\":\"contract IFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"fetchEllipsisFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"initiateUnbondingStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dddAmount\",\"type\":\"uint256\"}],\"name\":\"notifyFeeAmounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract IEllipsisProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_dEPX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DDD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpDepositor\",\"type\":\"address\"},{\"internalType\":\"contract IEllipsisProxy\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_block\",\"type\":\"bool\"}],\"name\":\"setBlockThirdPartyActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setClaimReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"streamingBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unbondableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawUnbondedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BondedFeeDistributor", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000af41054c1487b0e5e2b9250c0332ecbce6ce9d710000000000000000000000003670c10c6a4994ec8926edcf54bf53092217ee1b", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}