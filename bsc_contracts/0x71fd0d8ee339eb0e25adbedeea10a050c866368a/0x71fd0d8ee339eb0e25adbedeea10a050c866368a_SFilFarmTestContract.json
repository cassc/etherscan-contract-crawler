{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position is the index of the value in the `values` array plus 1.\r\n        // Position 0 is used to mean a value is not in the set.\r\n        mapping(bytes32 value => uint256) _positions;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._positions[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We cache the value's position to prevent multiple reads from the same storage slot\r\n        uint256 position = set._positions[value];\r\n\r\n        if (position != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 valueIndex = position - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (valueIndex != lastIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the lastValue to the index where the value to delete is\r\n                set._values[valueIndex] = lastValue;\r\n                // Update the tracked position of the lastValue (that was just moved)\r\n                set._positions[lastValue] = position;\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the tracked position for the deleted slot\r\n            delete set._positions[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._positions[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\ncontract SFilFarmTestContract is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20Metadata;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    struct UserInfo {\r\n        uint256 depositAmount; \r\n        uint256 mintAmount;\r\n        DepositRecord[] depositRecord;\r\n    }\r\n\r\n    struct DepositRecord {\r\n        uint256 depositTime;\r\n        uint256 lockDuration;\r\n        uint8 computingPower;\r\n        uint256 amount;\r\n        uint256 claimedMintReward;\r\n        uint256 accMintingTokenPerShare;\r\n        bool active;\r\n    }\r\n\r\n    struct Package {\r\n        uint256 lockTime;\r\n        uint8 computingPower;\r\n    }\r\n\r\n    struct Referral {\r\n        address superiorsAddress;\r\n        EnumerableSet.AddressSet primaryAddress;\r\n        EnumerableSet.AddressSet subordinateAddress; \r\n    }\r\n\r\n    uint256 public accMintingTokenPerShare; \r\n    uint256 public lastUpdateTime;\r\n\r\n    uint256 public avgMiningRewardSharePerSec;\r\n    uint256 public minimumThreshold;\r\n    uint256 public maximumThreshold;\r\n    address public depositToken;\r\n    address public rewardToken;\r\n    address public feeToken;\r\n    bool public emergencyWithdrawSwitch;\r\n    uint256 public totalDepositedAmount;\r\n\tuint256 public minDepositAmt;    \r\n\tuint256 public maxDepositAmt;\r\n    uint256 public primaryRefferralRewardRate;\r\n    uint256 public secondaryRefferralRewardRate;\r\n    uint256 public redemptionFeeRate;\r\n    uint256 public denominator;\r\n    bool public start;\r\n    address public defaultReferrer; \r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n    mapping(address => uint256) public totalMintedAmount;\r\n    mapping(uint8 => bool) public packageExist;\r\n    mapping(uint8 => Package) public packages;\r\n    mapping(address => Referral) private userReferralInfo;\r\n    mapping(address => uint256) public computedPrimaryAddrMintedAmount;\r\n    mapping(address => uint256) public computedSecondaryAddrMintedAmount;\r\n    mapping(address => uint256) public userClaimedRefferalReward;\r\n    EnumerableSet.AddressSet private depositAddresses;\r\n    EnumerableSet.AddressSet private blacklistUsers;\r\n    EnumerableSet.AddressSet private historicalUsers;\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event Claim(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    \r\n    constructor(address initialOwner) Ownable(initialOwner) {\r\n        lastUpdateTime = block.timestamp;\r\n        avgMiningRewardSharePerSec = 752314815;\r\n        minimumThreshold = 100 * 10 ** 18;\r\n        maximumThreshold = 10000 * 10 ** 18;\r\n        setDepositToken(0x388F8Ba05ce519E1330d2eC226eb1faB2140D989);\r\n        setRewardToken(0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153);\r\n        setFeeToken(0x388F8Ba05ce519E1330d2eC226eb1faB2140D989);\r\n        setDefaultReferrer(0xFc8cf1f21ab189B46c12CDFE0B2b91105F18e8a6);\r\n        packageExist[1] = true;\r\n        packageExist[2] = true;\r\n        packageExist[3] = true;\r\n        packages[1].lockTime = 86400 * 7;\r\n        packages[1].computingPower = 1;\r\n        packages[2].lockTime = 86400 * 15;\r\n        packages[2].computingPower = 2;\r\n        packages[3].lockTime = 86400 * 30;\r\n        packages[3].computingPower = 3;\r\n        primaryRefferralRewardRate = 300;\r\n        secondaryRefferralRewardRate = 200;\r\n        redemptionFeeRate = 200;\r\n        denominator = 10000;\r\n    }\r\n\r\n    function getInterval(uint256 _from, uint256 _to) internal pure returns (uint256) {\r\n        if(_to > _from) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function pendingMintingReward(address _user) public view returns (uint256 totalPending) {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 currentAccMintingTokenPerShare = accMintingTokenPerShare;\r\n        uint256 tokenBalance = IERC20Metadata(depositToken).balanceOf(address(this));\r\n        if (block.timestamp > lastUpdateTime && tokenBalance != 0) {\r\n            uint256 interval = getInterval(lastUpdateTime, block.timestamp);\r\n            uint256 miningReward = interval.mul(avgMiningRewardSharePerSec);\r\n            currentAccMintingTokenPerShare = accMintingTokenPerShare.add(miningReward);\r\n        }\r\n        for (uint256 i = 0; i < user.depositRecord.length; i++) {\r\n            if( user.depositRecord[i].active) {\r\n                uint256 actualAccMintingTokenPerShare = currentAccMintingTokenPerShare.sub(user.depositRecord[i].accMintingTokenPerShare);\r\n                uint256 deservedMintingReward = user.depositRecord[i].amount.mul(actualAccMintingTokenPerShare).mul(user.depositRecord[i].computingPower);\r\n                uint256 pending = deservedMintingReward.div(1 * 10 ** IERC20Metadata(depositToken).decimals()).sub(user.depositRecord[i].claimedMintReward);\r\n                totalPending = totalPending.add(pending);\r\n            }\r\n        }\r\n        return totalPending;\r\n    }\r\n\r\n    function update() public {\r\n        if (block.timestamp <= lastUpdateTime) {\r\n            return;\r\n        }\r\n        uint256 tokenBalance = IERC20Metadata(depositToken).balanceOf(address(this));\r\n        if (tokenBalance == 0) {\r\n            lastUpdateTime = block.timestamp;\r\n            return;\r\n        }\r\n        uint256 Interval = getInterval(lastUpdateTime, block.timestamp);\r\n        uint256 miningReward = Interval.mul(avgMiningRewardSharePerSec);\r\n        accMintingTokenPerShare = accMintingTokenPerShare.add(miningReward);\r\n        lastUpdateTime = block.timestamp;\r\n    }\r\n\r\n    function getUserPrimaryAddressMintedAmount(address _user) public view returns(uint256 mintedAmounts) {\r\n        uint256 length = userReferralInfo[_user].primaryAddress.length();\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address priAddr = userReferralInfo[_user].primaryAddress.at(i);\r\n            uint256 mintedAmount = pendingMintingReward(priAddr).add(userInfo[priAddr].mintAmount);\r\n            mintedAmounts = mintedAmounts.add(mintedAmount);\r\n        }\r\n    }\r\n\r\n    function getUserSubordinateAddressMintedAmount(address _user) public view returns(uint256 mintedAmounts) {\r\n        uint256 length = userReferralInfo[_user].subordinateAddress.length();\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address subAddr = userReferralInfo[_user].subordinateAddress.at(i);\r\n            uint256 mintedAmount = pendingMintingReward(subAddr).add(userInfo[subAddr].mintAmount);\r\n            mintedAmounts = mintedAmounts.add(mintedAmount);\r\n        }\r\n    }\r\n\r\n    function getPendingReferralReward(address _user) public view returns(uint256 primaryReferralReward, uint256 secondaryReferralReward, uint256 pendingReferralReward) {\r\n        primaryReferralReward = getUserPrimaryAddressMintedAmount(_user).sub(computedPrimaryAddrMintedAmount[_user]);\r\n        secondaryReferralReward = (getUserSubordinateAddressMintedAmount(_user).sub(computedSecondaryAddrMintedAmount[_user]));\r\n        pendingReferralReward = (primaryReferralReward.mul(primaryRefferralRewardRate).div(denominator)).add((secondaryReferralReward.mul(secondaryRefferralRewardRate).div(denominator)));\r\n    }\r\n\r\n    function getUserTotalReferralReward(address _user) public view returns(uint256) {\r\n        (uint256 pendingRefferalReward, ,) = getPendingReferralReward(_user);\r\n        return pendingRefferalReward + userClaimedRefferalReward[_user];\r\n    }\r\n\r\n    function claimReferralReward() public {\r\n        (uint256 primaryReferralReward,uint256 secondaryReferralReward, uint256 pendingReferralReward) = getPendingReferralReward(msg.sender);\r\n        require(pendingReferralReward > 0, \"You have no referral rewards to claim\");\r\n        computedPrimaryAddrMintedAmount[msg.sender] = computedPrimaryAddrMintedAmount[msg.sender].add(primaryReferralReward);\r\n        computedSecondaryAddrMintedAmount[msg.sender] = computedSecondaryAddrMintedAmount[msg.sender].add(secondaryReferralReward);\r\n        safeTokenTransfer(rewardToken, msg.sender, pendingReferralReward);\r\n        userClaimedRefferalReward[msg.sender] += pendingReferralReward;\r\n    }\r\n\r\n    function deposit(address referrer, uint8 _packageNum, uint256 _amount) public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(start, \"The contract hasn't started yet\");\r\n        require(IERC20Metadata(depositToken).balanceOf(msg.sender) >= _amount, \"Your token balance is less than the amount entered\");\r\n        require(_amount >= minimumThreshold, \"The amount you deposited does not reach the minimum threshold\");\r\n        require(_amount <= maximumThreshold, \"The amount you pledged has exceeded the maximum threshold\");\r\n        require(packageExist[_packageNum], \"The package you selected does not exist\");\r\n        require(!blacklistUsers.contains(msg.sender), \"you are on blacklist\");\r\n        update();\r\n        if (referrer != address(0)) {\r\n            address primaryReferrer = userReferralInfo[msg.sender].superiorsAddress;\r\n            if (primaryReferrer != address(0)) {\r\n                require(primaryReferrer == referrer, \"You have already bound\");\r\n            } else {\r\n                if(referrer != defaultReferrer) {\r\n                    require(referrer != msg.sender, \"The recommender cannot be yourself\");\r\n                    require(!userReferralInfo[msg.sender].primaryAddress.contains(referrer), \"Cannot bind lower-level addresses\");\r\n                    require(!userReferralInfo[msg.sender].subordinateAddress.contains(referrer), \"Cannot bind lower-level addresses\");\r\n                    require(userInfo[referrer].depositAmount > 0, \"The recommender has no pledge\");\r\n                    userReferralInfo[msg.sender].superiorsAddress = referrer;\r\n                    if(!userReferralInfo[referrer].primaryAddress.contains(msg.sender)) {\r\n                        userReferralInfo[referrer].primaryAddress.add(msg.sender);\r\n                    }\r\n                } else {\r\n                    userReferralInfo[msg.sender].superiorsAddress = defaultReferrer;\r\n                    if(!userReferralInfo[defaultReferrer].primaryAddress.contains(msg.sender)) {\r\n                        userReferralInfo[defaultReferrer].primaryAddress.add(msg.sender);\r\n                    }\r\n                }\r\n                address secondaryReferrer = userReferralInfo[referrer].superiorsAddress;\r\n                if(secondaryReferrer != address(0)) {\r\n                    if(!userReferralInfo[secondaryReferrer].subordinateAddress.contains(msg.sender)) {\r\n                        userReferralInfo[secondaryReferrer].subordinateAddress.add(msg.sender);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            require(referrer != address(0), \"you are not invited\");\r\n        }\r\n        IERC20Metadata(depositToken).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        user.depositRecord.push(DepositRecord({\r\n            depositTime: block.timestamp,\r\n            lockDuration: packages[_packageNum].lockTime,\r\n            computingPower: packages[_packageNum].computingPower,\r\n            amount: _amount,\r\n            claimedMintReward: 0,\r\n            accMintingTokenPerShare: accMintingTokenPerShare,\r\n            active: true\r\n        }));\r\n        user.depositAmount = user.depositAmount.add(_amount);\r\n        totalDepositedAmount = totalDepositedAmount.add(_amount);\r\n        if(historicalUsers.length() == 0) {\r\n            minDepositAmt = _amount;\r\n        } else {\r\n            if(_amount < minDepositAmt) {\r\n                minDepositAmt = _amount;\r\n            }\r\n        }\r\n        if(_amount > maxDepositAmt) {\r\n            maxDepositAmt = _amount;\r\n        }\r\n        if(!depositAddresses.contains(msg.sender)) {\r\n            depositAddresses.add(msg.sender);\r\n        }\r\n        if(!historicalUsers.contains(msg.sender)) {\r\n            historicalUsers.add(msg.sender);\r\n        }\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function claimMintingReward(address _user) internal returns (uint256 totalPending) {\r\n        UserInfo storage user = userInfo[_user];\r\n        for (uint256 i = 0; i < user.depositRecord.length; i++) {\r\n            if(user.depositRecord[i].active) {\r\n                uint256 actualAccMintingTokenPerShare = accMintingTokenPerShare.sub(user.depositRecord[i].accMintingTokenPerShare);\r\n                uint256 deservedMintingReward = user.depositRecord[i].amount.mul(actualAccMintingTokenPerShare).mul(user.depositRecord[i].computingPower);\r\n                uint256 pending = deservedMintingReward.div(1 * 10 ** IERC20Metadata(depositToken).decimals()).sub(user.depositRecord[i].claimedMintReward);\r\n                user.depositRecord[i].claimedMintReward = user.depositRecord[i].claimedMintReward.add(pending);\r\n                totalPending = totalPending.add(pending);\r\n            }\r\n        }\r\n        return totalPending;\r\n    }\r\n\r\n    function claim() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.depositAmount > 0,\"You have not deposited any lp\");\r\n        require(pendingMintingReward(msg.sender) > 0, \"You have no reward minting tokens to claim\");\r\n        require(IERC20Metadata(rewardToken).balanceOf(address(this)) >= pendingMintingReward(msg.sender), \"The minting token balance of this contract is insufficient\"); \r\n        update();\r\n        uint256 deservedMiningReward = claimMintingReward(msg.sender);\r\n        user.mintAmount = user.mintAmount.add(deservedMiningReward);\r\n        totalMintedAmount[msg.sender] = totalMintedAmount[msg.sender].add(deservedMiningReward);\r\n        safeTokenTransfer(rewardToken, msg.sender, deservedMiningReward);\r\n        emit Claim(msg.sender, deservedMiningReward);\r\n    }\r\n\r\n    function withdraw() public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.depositAmount > 0,\"You have not deposited any lp\");\r\n        require(!blacklistUsers.contains(msg.sender), \"You are on blacklist\");\r\n        uint256 deservedRedeemableAmount = getTotalRedeemableAmount(msg.sender);\r\n        uint256 redemptionFeeAmount = deservedRedeemableAmount.mul(redemptionFeeRate).div(denominator);\r\n        uint256 redeemableAmount = deservedRedeemableAmount.sub(redemptionFeeAmount);\r\n        require(redeemableAmount > 0, \"You have nothing to redeem\");\r\n        update();\r\n        if(pendingMintingReward(msg.sender) > 0) {\r\n            require(IERC20Metadata(rewardToken).balanceOf(address(this)) >= pendingMintingReward(msg.sender), \"The minting token balance of this contract is insufficient\"); \r\n            uint256 deservedMiningReward = claimMintingReward(msg.sender);\r\n            user.mintAmount = user.mintAmount.add(deservedMiningReward);\r\n            totalMintedAmount[msg.sender] = totalMintedAmount[msg.sender].add(deservedMiningReward);\r\n            safeTokenTransfer(rewardToken, msg.sender, deservedMiningReward);\r\n            emit Claim(msg.sender, deservedMiningReward);\r\n        }\r\n        IERC20Metadata(depositToken).safeTransfer(address(msg.sender), redeemableAmount);\r\n        emit Withdraw(msg.sender, redeemableAmount);\r\n        totalDepositedAmount = totalDepositedAmount.sub(deservedRedeemableAmount);\r\n        user.depositAmount = user.depositAmount.sub(deservedRedeemableAmount);\r\n        deleteWithdrawTX();\r\n        if(user.depositAmount == 0 && depositAddresses.contains(msg.sender)) {\r\n            depositAddresses.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdraw() public  {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(emergencyWithdrawSwitch, \"Management does not turn on the emergency withdrawal option\");\r\n        require(user.depositAmount > 0, \"You have not deposited any lp\");\r\n        update();\r\n        IERC20Metadata(depositToken).safeTransfer(address(msg.sender), user.depositAmount);\r\n        emit EmergencyWithdraw(msg.sender, user.depositAmount);\r\n        totalDepositedAmount = totalDepositedAmount.sub(user.depositAmount);\r\n        user.depositAmount = 0;\r\n        deleteAllWithdrawTX();\r\n        if(depositAddresses.contains(msg.sender)) {\r\n            depositAddresses.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    function deleteWithdrawTX() private  {\r\n        for (uint256 i = 0; i < userInfo[msg.sender].depositRecord.length; i++) {\r\n            if (userInfo[msg.sender].depositRecord[i].active) {\r\n                if (block.timestamp >= userInfo[msg.sender].depositRecord[i].depositTime + userInfo[msg.sender].depositRecord[i].lockDuration) {\r\n                    userInfo[msg.sender].depositRecord[i].active = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function deleteAllWithdrawTX() private  {\r\n        for (uint256 i = 0; i < userInfo[msg.sender].depositRecord.length; i++) {\r\n            if (userInfo[msg.sender].depositRecord[i].active) {\r\n                userInfo[msg.sender].depositRecord[i].active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function safeTokenTransfer(address _token, address _to, uint256 _amount) internal {\r\n        uint256 tokenBalance = IERC20Metadata(_token).balanceOf(address(this));\r\n        if (_amount > tokenBalance) {\r\n            IERC20Metadata(_token).transfer(_to, tokenBalance);\r\n        } else {\r\n            IERC20Metadata(_token).transfer( _to, _amount);\r\n        }\r\n    }\r\n\r\n    function getUserDepositInfos(address _user) public view returns(DepositRecord[] memory) {\r\n        return userInfo[_user].depositRecord;\r\n    }\r\n\r\n    function getUserSuperiorsAddress(address _user) public view returns(address) {\r\n        return userReferralInfo[_user].superiorsAddress;\r\n    }\r\n \r\n    function getUserPrimaryAddresses(address _user) public view returns(address[] memory) {\r\n        return userReferralInfo[_user].primaryAddress.values();\r\n    }\r\n\r\n    function getUserPrimaryAddressesAmount(address _user) public view returns(uint256) {\r\n        return userReferralInfo[_user].primaryAddress.length();\r\n    }\r\n\r\n    function getUsersubordinateAddresses(address _user) public view returns(address[] memory) {\r\n        return userReferralInfo[_user].subordinateAddress.values();\r\n    }\r\n\r\n    function getUserSubordinateAddressesAmount(address _user) public view returns(uint256) {\r\n        return userReferralInfo[_user].subordinateAddress.length();\r\n    }\r\n\r\n    function getAllUserMintedAmount() public view returns(uint256 allUserMintedAmount) {\r\n        uint256 length = historicalUsers.length();\r\n        for (uint i = 0; i < length; i++) {\r\n            address user = historicalUsers.at(i);\r\n            uint256 userMintedAmount = pendingMintingReward(user).add(userInfo[user].mintAmount);\r\n            allUserMintedAmount = allUserMintedAmount.add(userMintedAmount);\r\n        }\r\n    }\r\n\r\n    function getTotalRedeemableAmount(address _user) public view returns(uint256 totalRedeemableAmount) {\r\n        for (uint256 i = 0; i < userInfo[_user].depositRecord.length; i++) {\r\n            if (userInfo[_user].depositRecord[i].active) {\r\n                if (block.timestamp >= userInfo[_user].depositRecord[i].depositTime + userInfo[_user].depositRecord[i].lockDuration) {\r\n                    totalRedeemableAmount = totalRedeemableAmount + userInfo[_user].depositRecord[i].amount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTotalDepositedAmount() public view returns(uint256) {\r\n        return totalDepositedAmount;\r\n    }\r\n\r\n    function getBlacklistUsers() public view returns(address[] memory) {\r\n        return blacklistUsers.values();\r\n    }\r\n\r\n    function getTotalBlacklistUsersAmount() public view returns(uint256) {\r\n        return blacklistUsers.length();\r\n    }\r\n\r\n    function getTotalDepositAddresses() public view returns(address[] memory) {\r\n        return depositAddresses.values();\r\n    }\r\n\r\n    function getTotalDepositAddressesAmount() public view returns(uint256) {\r\n        return depositAddresses.length();\r\n    }\r\n\r\n    function getTotalHistoricalUsers() public view returns(address[] memory) {\r\n        return historicalUsers.values();\r\n    }\r\n\r\n    function getTotalHistoricalUsersAmount() public view returns(uint256) {\r\n        return historicalUsers.length();\r\n    }\r\n\r\n    function getMinDepositAmt() public view returns(uint256) {\r\n        return minDepositAmt;\r\n    }\r\n\r\n    function getMaxDepositAmt() public view returns(uint256) {\r\n        return maxDepositAmt;\r\n    }\r\n\r\n    function getUserTotalDepositAmount(address _user) public view returns(uint256) {\r\n        return userInfo[_user].depositAmount;\r\n    }\r\n\r\n    function getUserDirectReferralsNum(address _user) public view returns(uint256) {\r\n        return userReferralInfo[_user].primaryAddress.length();\r\n    }\r\n\r\n    function getUserTeamNum(address _user) public view returns(uint256) {\r\n        return userReferralInfo[_user].primaryAddress.length() + userReferralInfo[_user].subordinateAddress.length();\r\n    }\r\n\r\n    function getUserPerformance(address _user) public view returns(uint256) {\r\n        return getUserPrimaryAddressMintedAmount(_user) + getUserSubordinateAddressMintedAmount(_user) + totalMintedAmount[_user] + pendingMintingReward(_user);\r\n    }\r\n\r\n    function retrieve(address _token) public onlyOwner {\r\n        uint256 tokenBalance = IERC20Metadata(_token).balanceOf(address(this));\r\n        safeTokenTransfer(_token, msg.sender, tokenBalance);\r\n    }\r\n\r\n    function setAvgMiningRewardSharePerSec(uint256 _avgMiningRewardSharePerSec) public onlyOwner {\r\n        update();\r\n        avgMiningRewardSharePerSec = _avgMiningRewardSharePerSec;\r\n    }\r\n\r\n    function setMinimumThreshold(uint256 _minimumThreshold) public onlyOwner {\r\n        minimumThreshold = _minimumThreshold;\r\n    }\r\n\r\n    function setMaximumThreshold(uint256 _maximumThreshold) public onlyOwner {\r\n        maximumThreshold = _maximumThreshold;\r\n    }\r\n\r\n    function setDepositToken(address _token) public onlyOwner {\r\n        depositToken = _token;\r\n    }\r\n\r\n    function setRewardToken(address _token) public onlyOwner {\r\n        rewardToken = _token;\r\n    }\r\n\r\n    function setFeeToken(address _token) public onlyOwner {\r\n        feeToken = _token;\r\n    }\r\n\r\n    function setEmergencyWithdrawSwitch(bool _state) public onlyOwner {\r\n        emergencyWithdrawSwitch = _state;\r\n    }\r\n\r\n    function addBlacklistUsers(address[] memory array) public onlyOwner {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if(!blacklistUsers.contains(array[i])) {\r\n                blacklistUsers.add(array[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeBlacklistUsers(address[] memory array) public onlyOwner {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if(blacklistUsers.contains(array[i])) {\r\n                blacklistUsers.remove(array[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setPackageExistState(uint8 _index, bool _state) public onlyOwner {\r\n        packageExist[_index] = _state;\r\n    }\r\n\r\n    function setPackage(uint8 _index, uint256 _lockTime, uint8 _computingPower) public onlyOwner {\r\n        packages[_index].lockTime = _lockTime;\r\n        packages[_index].computingPower = _computingPower;\r\n    }\r\n\r\n    function setPrimaryRefferralRewardRate(uint256 _primaryRefferralRewardRate) public onlyOwner {\r\n        primaryRefferralRewardRate = _primaryRefferralRewardRate;\r\n    }\r\n\r\n    function setSecondaryRefferralRewardRate(uint256 _secondaryRefferralRewardRate) public onlyOwner {\r\n        secondaryRefferralRewardRate = _secondaryRefferralRewardRate;\r\n    }\r\n\r\n    function setDenominator(uint256 _denominator) public onlyOwner {\r\n        denominator = _denominator;\r\n    }\r\n\r\n    function setStart(bool _startStatus) public onlyOwner {\r\n        start = _startStatus;\r\n    }\r\n\r\n    function setRedemptionFeeRate(uint256 _redemptionFeeRate) public onlyOwner {\r\n        redemptionFeeRate = _redemptionFeeRate;\r\n    }\r\n\r\n    function setDefaultReferrer(address _defaultReferrer) public onlyOwner {\r\n        defaultReferrer = _defaultReferrer;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accMintingTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"}],\"name\":\"addBlacklistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgMiningRewardSharePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"computedPrimaryAddrMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"computedSecondaryAddrMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_packageNum\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUserMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allUserMintedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlacklistUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDepositAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDepositAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingReferralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"primaryReferralReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryReferralReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReferralReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBlacklistUsersAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDepositAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDepositAddressesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDepositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHistoricalUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHistoricalUsersAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalRedeemableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRedeemableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDepositInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"computingPower\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedMintReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMintingTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct SFilFarmTestContract.DepositRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDirectReferralsNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPerformance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPrimaryAddressMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedAmounts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPrimaryAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPrimaryAddressesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserSubordinateAddressMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedAmounts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserSubordinateAddressesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserSuperiorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTeamNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalReferralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsersubordinateAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"packageExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"computingPower\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingMintingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryRefferralRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"}],\"name\":\"removeBlacklistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryRefferralRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_avgMiningRewardSharePerSec\",\"type\":\"uint256\"}],\"name\":\"setAvgMiningRewardSharePerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultReferrer\",\"type\":\"address\"}],\"name\":\"setDefaultReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setEmergencyWithdrawSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumThreshold\",\"type\":\"uint256\"}],\"name\":\"setMaximumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumThreshold\",\"type\":\"uint256\"}],\"name\":\"setMinimumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_computingPower\",\"type\":\"uint8\"}],\"name\":\"setPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPackageExistState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_primaryRefferralRewardRate\",\"type\":\"uint256\"}],\"name\":\"setPrimaryRefferralRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redemptionFeeRate\",\"type\":\"uint256\"}],\"name\":\"setRedemptionFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secondaryRefferralRewardRate\",\"type\":\"uint256\"}],\"name\":\"setSecondaryRefferralRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_startStatus\",\"type\":\"bool\"}],\"name\":\"setStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimedRefferalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SFilFarmTestContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fc8cf1f21ab189b46c12cdfe0b2b91105f18e8a6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://482b34cca3660c242a8db1920a162590f5c9cab51052f5a65ae79f07caa3a783"}