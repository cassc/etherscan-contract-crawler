{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}          \r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n   \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n   \r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\ncontract LppStake is ReentrancyGuard, Context, Ownable {\r\n \r\n\r\n    event TokensPurchased(address  purchaser, uint256 value, IERC20 token);\r\n    event Purchased(address  purchaser, uint256 value);\r\n    event TokenWithdrawed(address  reciever, uint256 value, IERC20 token);\r\n    event Withdrawed(address  reciever, uint256 value);\r\n    event RewardsWithdrawn(address  reciever, uint256 value);\r\n\r\n    uint256 private constant REWARD_PERCENTAGE = 2;\r\n    uint256 private constant REWARD_DURATION = 1500 days;\r\n    uint256 private constant MIN_STAKING_DURATION = 600 days;\r\n\r\n    address public tokenAddress;\r\n\r\n    struct UserStakingInfo {\r\n        uint256 totalStakedAmount;\r\n        uint256 stakingTimestamp;\r\n    }\r\n\r\n    mapping(address => UserStakingInfo) private userStaking;\r\n\r\n    constructor ()  {\r\n        tokenAddress = address(0xF14fE8ea9D35cCEA2545985d7541CcAd02cb6112);\r\n    }   \r\n\r\n    function stake(uint256 amount, IERC20 _token) external nonReentrant {\r\n        uint256 weiAmount = amount;\r\n        require(_token == IERC20(tokenAddress),\"Token Address doesnt match\");\r\n        require(_token.balanceOf(msg.sender) >= amount, \"Balance is Low\");\r\n        require(_token.allowance(msg.sender, address(this)) >= amount, \"Allowance not given for Buying Token\");\r\n        require(_token.transferFrom(msg.sender, address(this), amount), \"Couldnt Transfer Amount\");\r\n\r\n        // Record the user's staking information\r\n        userStaking[msg.sender].totalStakedAmount += amount;\r\n        userStaking[msg.sender].stakingTimestamp = block.timestamp;\r\n\r\n        emit TokensPurchased(msg.sender, weiAmount, _token);\r\n    }\r\n\r\n    function getUserStakingInfo(address userAddress) external view returns (uint256 totalStaked, uint256 rewardsEarned) {\r\n        UserStakingInfo memory info = userStaking[userAddress];\r\n        uint256 stakingDuration = block.timestamp - info.stakingTimestamp;\r\n        \r\n        if (stakingDuration >= MIN_STAKING_DURATION) {\r\n            rewardsEarned = (info.totalStakedAmount * REWARD_PERCENTAGE * stakingDuration) / REWARD_DURATION;\r\n        }\r\n        \r\n        totalStaked = info.totalStakedAmount;\r\n    }\r\n\r\n    function withdrawRewards() external nonReentrant {\r\n        IERC20 token_ = IERC20(tokenAddress);\r\n        UserStakingInfo storage info = userStaking[msg.sender];\r\n        uint256 stakingDuration = block.timestamp - info.stakingTimestamp;\r\n        \r\n        require(stakingDuration >= MIN_STAKING_DURATION, \"Rewards can be claimed after 600 days\");\r\n\r\n        uint256 rewardsEarned = (info.totalStakedAmount * REWARD_PERCENTAGE * stakingDuration) / REWARD_DURATION;\r\n\r\n        // Transfer the rewards to the user\r\n        require(rewardsEarned > 0, \"No rewards to withdraw\");\r\n        require(address(this).balance >= rewardsEarned, \"Insufficient contract balance\");\r\n\r\n        info.stakingTimestamp = block.timestamp; // Reset the staking timestamp\r\n        token_.transfer(msg.sender,rewardsEarned);\r\n\r\n        emit RewardsWithdrawn(msg.sender, rewardsEarned);\r\n    }\r\n\r\n\r\n    function removeBnbStuck() external nonReentrant onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function replaceTokenAddress(address _tokenAddress) external onlyOwner{\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    \r\n    function foreignTokens(IERC20 _tokenAddress) external nonReentrant onlyOwner{\r\n        IERC20 token_ = _tokenAddress;\r\n        uint256 tokenAmt = token_.balanceOf(address(this));\r\n        require(tokenAmt > 0, 'BEP-20 balance is 0');\r\n        token_.transfer(owner(), tokenAmt);\r\n    }\r\n\r\n    // External view function to fetch staking information for a user\r\n    function getUserStakingInformation(address userAddress) external view returns (uint256, uint256) {\r\n        UserStakingInfo memory stakingInfo = userStaking[userAddress];\r\n        return (stakingInfo.totalStakedAmount, stakingInfo.stakingTimestamp);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"foreignTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakingInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeBnbStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"replaceTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LppStake", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bfdfe92a8e9ad931f5495e5cf487a12fbfe7f4d72da1796263b1fb9f06e64ee2"}