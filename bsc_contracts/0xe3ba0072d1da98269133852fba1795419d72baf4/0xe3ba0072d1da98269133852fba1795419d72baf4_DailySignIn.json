{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"DailySignIn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract DailySignIn {\\n    address public admin;\\n    mapping(address => uint256) private lastSignInDate;\\n    mapping(address => uint256) private consecutiveSignInDays;\\n    mapping(uint256 => uint256) private signInRewards;\\n\\n    uint256 private maxConsecutiveDays;\\n    uint256 private signInInterval = 1 days;\\n    uint256 private constant TIME_OFFSET = 8 hours; // UTC+8\\n\\n    event UserSignedIn(address indexed user, uint256 date, uint256 consecutiveDays, uint256 rewardXP);\\n\\n    constructor() {\\n        admin = msg.sender;\\n        maxConsecutiveDays = 7;\\n        setDefaultRewards();\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function.\\\");\\n        _;\\n    }\\n\\n    function _getStartOfUTC8Day(uint256 timestamp) private view returns (uint256) {\\n        return (timestamp + TIME_OFFSET) / signInInterval * signInInterval - TIME_OFFSET;\\n    }\\n\\n    function signIn() external {\\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\\n        require(lastSignInDate[msg.sender] < today, \\\"Already signed in for today\\\");\\n\\n        if (lastSignInDate[msg.sender] == today - signInInterval) {\\n            consecutiveSignInDays[msg.sender] = (consecutiveSignInDays[msg.sender] % maxConsecutiveDays) + 1;\\n        } else {\\n            consecutiveSignInDays[msg.sender] = 1; // Reset or start new streak\\n        }\\n\\n        uint256 rewardXP = signInRewards[consecutiveSignInDays[msg.sender]];\\n        lastSignInDate[msg.sender] = today;\\n        emit UserSignedIn(msg.sender, today, consecutiveSignInDays[msg.sender], rewardXP);\\n    }\\n\\n    function setMaxConsecutiveDays(uint256 _maxDays) external onlyAdmin {\\n        maxConsecutiveDays = _maxDays;\\n    }\\n\\n    function setSignInInterval(uint256 _interval) external onlyAdmin {\\n        signInInterval = _interval;\\n    }\\n\\n    function setSignInReward(uint256 day, uint256 rewardXP) external onlyAdmin {\\n        signInRewards[day] = rewardXP;\\n    }\\n\\n    function setDefaultRewards() public onlyAdmin {\\n        signInRewards[1] = 2;\\n        signInRewards[2] = 4;\\n        signInRewards[3] = 6;\\n        signInRewards[4] = 8;\\n        signInRewards[5] = 10;\\n        signInRewards[6] = 12;\\n        signInRewards[7] = 15;\\n    }\\n\\n    function getSignInInterval() public view returns (uint256) {\\n        return signInInterval;\\n    }\\n\\n    function getRewardXP(uint256 day) public view returns (uint256) {\\n        return signInRewards[day];\\n    }\\n\\n    function hasBrokenStreak(address user) public view returns (bool) {\\n        uint256 today = _getStartOfUTC8Day(block.timestamp);\\n        uint256 yesterday = today - signInInterval;\\n\\n        // If the last sign-in was not yesterday and not today, the streak is broken\\n        return lastSignInDate[user] != yesterday && lastSignInDate[user] != today;\\n    }\\n\\n    function getConsecutiveSignInDays(address user) public view returns (uint256) {\\n        if (hasBrokenStreak(user)) {\\n            return 0;\\n        }\\n        return consecutiveSignInDays[user];\\n    }\\n\\n    function getLastSignInDate(address user) public view returns (uint256) {\\n        return lastSignInDate[user];\\n    }\\n\\n    function getTimeUntilNextSignIn(address user) public view returns (uint256) {\\n        uint256 currentTime = block.timestamp;\\n        uint256 startOfToday = _getStartOfUTC8Day(currentTime);\\n        uint256 startOfNextDay = startOfToday + signInInterval;\\n\\n        if (lastSignInDate[user] == startOfToday) {\\n            return startOfNextDay - currentTime;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function updateSignReward(uint256 day, uint256 reward) external onlyAdmin {\\n        signInRewards[day] = reward;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"consecutiveDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardXP\",\"type\":\"uint256\"}],\"name\":\"UserSignedIn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getConsecutiveSignInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLastSignInDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getRewardXP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignInInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTimeUntilNextSignIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasBrokenStreak\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDefaultRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDays\",\"type\":\"uint256\"}],\"name\":\"setMaxConsecutiveDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setSignInInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardXP\",\"type\":\"uint256\"}],\"name\":\"setSignInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"updateSignReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DailySignIn", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}