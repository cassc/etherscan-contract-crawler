{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\ninterface IERC20 {\r\n    // These are the standard functions that an ERC-20 token should implement.\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ninterface IERC1155 {\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\r\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\ncontract MultiSender {\r\n    address private _owner;\r\n\r\n    // bool public payNative = false;\r\n\r\n    address public tokenAddress = 0x3da6755bb5CBa4c7228272eEd00E258B4aa7a5F3;\r\n\r\n    address public worldPoolAddress = 0x1f70Eb3864B59223c829A338f7f8bee29b293227;\r\n\r\n    address public burnWallet = 0xf6b1Ec8dAeFDdDb6835C2f14Ab1Fe844F774327C;\r\n\r\n    uint112 public percentOfBurn = 50;\r\n\r\n    uint256 public multisendPrice = 5 * (10 ** 16);\r\n    uint256 public snapshotPrice = 25 * (10 ** 18);\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    modifier onlyOwn() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event snapshotBilled(address indexed caller, address indexed contractAddress);\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function changeTokenAddress(address addr) public onlyOwn {\r\n        tokenAddress = addr;\r\n    }\r\n\r\n\r\n    // function changePayNative(bool b) public onlyOwn {\r\n    //     payNative = b;\r\n    // }\r\n\r\n    function changeMultiSendPrice(uint256 price) public onlyOwn {\r\n        multisendPrice = price;\r\n    }\r\n\r\n    function changeWP(address addr) public onlyOwn {\r\n        worldPoolAddress = addr;\r\n    }\r\n\r\n\r\n    function changeBurnWallet(address addr) public onlyOwn {\r\n        burnWallet = addr;\r\n    }\r\n\r\n\r\n    function changePercentOfBurn(uint112 percent) public onlyOwn {\r\n        percentOfBurn = percent;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwn {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function multisend(address[] calldata _walletAddresses, uint256[] calldata _amounts, address token) external payable {\r\n        require(_walletAddresses.length == _amounts.length, \"Arrays length mismatch\");\r\n\r\n        _bill(_walletAddresses.length);\r\n        \r\n        IERC20 tokenContract = IERC20(token);\r\n\r\n        for (uint256 i = 0; i < _walletAddresses.length; i++) {\r\n            address walletAddress = address(_walletAddresses[i]);\r\n            uint256 amount = _amounts[i];\r\n\r\n            tokenContract.transferFrom(_msgSender(), walletAddress, amount);\r\n        }\r\n    }\r\n\r\n    function multiTransfer721(address nftContract, address[] calldata toAddresses, uint256[] calldata tokenIds) external payable {\r\n        require(toAddresses.length == tokenIds.length, \"Arrays length mismatch\");\r\n        _bill(toAddresses.length);\r\n        IERC721 nftC = IERC721(nftContract);\r\n        for (uint256 i = 0; i < toAddresses.length; i++) {\r\n            nftC.safeTransferFrom(msg.sender, toAddresses[i], tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function multiTransfer1155(address c, address[] memory toAddresses, uint256[] memory tokenIds, uint256[] memory quantities) external payable {\r\n        require(toAddresses.length == tokenIds.length, \"Arrays length mismatch\");\r\n        _bill(toAddresses.length);\r\n        IERC1155 ca = IERC1155(c);\r\n        for (uint256 i = 0; i < toAddresses.length; i++) {\r\n            ca.safeTransferFrom(msg.sender, toAddresses[i], tokenIds[i], quantities[i], \"\");\r\n        }\r\n    }\r\n\r\n\r\n    function _bill(uint256 length) internal {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 totalPrice = length * multisendPrice;\r\n        require(token.allowance(_msgSender(), address(this)) >= totalPrice, \"Not enough allowance for tokens\");\r\n        require(token.balanceOf(_msgSender()) >= totalPrice, \"Not enough tokens on balance\");\r\n        uint256 amountToBurn = totalPrice*percentOfBurn/100;\r\n        token.transferFrom(_msgSender(), burnWallet, amountToBurn);\r\n        token.transferFrom(_msgSender(), worldPoolAddress, totalPrice - amountToBurn);\r\n    }\r\n\r\n\r\n    function withdrawTokens(uint256 amount, address wallet) public onlyOwn {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transfer(wallet, amount);\r\n    }\r\n\r\n\r\n    function snapshotBill(address contractAddress) public {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.allowance(_msgSender(), address(this)) >= snapshotPrice, \"Not enough allowance for tokens\");\r\n        require(token.balanceOf(_msgSender()) >= snapshotPrice, \"Not enough tokens on balance\");\r\n\r\n        token.transferFrom(_msgSender(), address(this), snapshotPrice);\r\n        emit snapshotBilled(_msgSender(), contractAddress);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"snapshotBilled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeBurnWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeMultiSendPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"percent\",\"type\":\"uint112\"}],\"name\":\"changePercentOfBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeWP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer721\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_walletAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"multisend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisendPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentOfBurn\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"snapshotBill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultiSender", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://38e0356a36a7ea31fe39df996fe74fc638db938e30c8ae27322566e56923bd70"}