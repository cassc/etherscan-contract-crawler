{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract Crowdsale {\r\n    IERC20 public token;\r\n    uint256 public price; // Number of tokens per 1 BNB (with decimals)\r\n    uint256 public maxOrderPerAddress;\r\n    address public owner;\r\n    address private withdrawAddress;\r\n    mapping(address => uint256) public amountPurchased;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, uint256 _price, uint256 _maxOrder, address _withdrawAddress) {\r\n        token = IERC20(_token);\r\n        price = _price; // Adjust this considering the decimals of the token\r\n        maxOrderPerAddress = _maxOrder;\r\n        owner = msg.sender;\r\n        withdrawAddress = _withdrawAddress;\r\n    }\r\n\r\n    function setPrice(uint256 _newPrice) external onlyOwner {\r\n        price = _newPrice * 10**18; // Adjust for token decimals\r\n    }\r\n\r\n    function setMaxOrderPerAddress(uint256 _maxOrder) external onlyOwner {\r\n        maxOrderPerAddress = _maxOrder;\r\n    }\r\n\r\n    function withdrawTokens(uint256 _amount) external onlyOwner {\r\n        require(token.transfer(withdrawAddress, _amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function setWithdrawAddress(address _withdrawAddress) external onlyOwner {\r\n        withdrawAddress = _withdrawAddress;\r\n    }\r\n\r\n    function withdrawBNB(uint256 amount) external onlyOwner {\r\n        require(amount <= address(this).balance, \"Insufficient balance in contract\");\r\n        payable(withdrawAddress).transfer(amount);\r\n    }\r\n\r\n    // Function to self-destruct the contract\r\n    function destroyContract() external onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    // Fallback function to accept BNB\r\n    receive() external payable {\r\n        uint256 amount = price * msg.value / 1 ether; // Adjusting for decimal places\r\n        require(amountPurchased[msg.sender] + amount <= maxOrderPerAddress, \"Exceeds max order per address\");\r\n        require(amount <= token.balanceOf(address(this)), \"Insufficient token balance in contract\");\r\n\r\n        amountPurchased[msg.sender] += amount;\r\n        require(token.transfer(msg.sender, amount), \"Token transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxOrder\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxOrderPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxOrder\",\"type\":\"uint256\"}],\"name\":\"setMaxOrderPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawAddress\",\"type\":\"address\"}],\"name\":\"setWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Crowdsale", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008572899f59e40ecc5b32f796d8cdfc21a08fe24e0000000000000000000000000000000000000000000000000000000000003a980000000000000000000000000000000000000000000000000000000008f0d180000000000000000000000000fcc8cfdd2ef234a02871264ec468fc5c4d8ead44", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5055d3de8e6d0b39c492f88d1af6358d85b534354905d4242e87140fe0448d07"}