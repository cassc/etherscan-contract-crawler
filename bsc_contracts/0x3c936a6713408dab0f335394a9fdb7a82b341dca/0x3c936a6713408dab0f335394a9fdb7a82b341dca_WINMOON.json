{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WINMOON.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n/// @dev It saves in an ordered array the holders and the current\\n/// tickets count.\\n/// For calculating the winners, from the huge random number generated\\n/// a normalized random is generated by using the module method, adding 1 to have\\n/// a random from 1 to tickets.\\n/// So next step is to perform a binary search on the ordered array to get the\\n/// player O(log n)\\n/// Example:\\n// / 0 -> { 1, player1} as player1 has 1 ticket\\n// / 1 -> {51, player2} as player2 buys 50 ticket\\n// / 2 -> {52, player3} as player3 buys 1 ticket\\n// / 3 -> {53, player4} as player4 buys 1 ticket\\n// / 4 -> {153, player5} as player5 buys 100 ticket\\n/// So the setWinner method performs a binary search on that sorted array to get the upper bound.\\n/// If the random number generated is 150, the winner is player5. If the random number is 20, winner is player2\\n\\ncontract WINMOON is ERC20, ERC20Burnable, Ownable {\\n\\tstruct EpochData {\\n\\t\\tuint256 epoch;\\n\\t\\tuint256 totalPlayers;\\n\\t\\tuint256 totalWinners;\\n\\t\\tuint256 totalEntries;\\n\\t}\\n\\n\\tmapping(uint256 => EpochData) public epochs;\\n\\t// EpochData[] epochs;\\n\\n\\taddress[] private _allOwners;\\n\\tmapping(address owner => uint256) private _allOwnersIndex;\\n\\n\\taddress[] private _allSuperBoosts;\\n\\tmapping(address booster => uint256 index) private _allSuperBoostsIndex;\\n\\n\\t// In order to calculate the winner, in this struct is saved for each bought the data\\n\\tstruct EntriesData {\\n\\t\\tuint256 currentEntriesLength; // current amount of entries bought\\n\\t\\taddress player; // wallet address of the player\\n\\t}\\n\\t// every epoch has a sorted array of EntriesData.\\n\\n\\tstruct PlayersData {\\n\\t\\taddress player; // wallet address of the player\\n\\t\\tuint256 totalWins; // how many times has won\\n\\t}\\n\\n\\tmapping(uint256 => EntriesData[]) public entriesList;\\n\\n\\t// mapping epoch to entries\\n\\tmapping(uint256 => uint256) public totalEntries;\\n\\n\\tmapping(uint256 => mapping(address => uint256)) public playerEntryIndex;\\n\\n\\t// Percentage boost for each wallet.  100 = 100% = no boost\\n\\tmapping(address => uint256) public walletBoosts;\\n\\n\\t// Mapping of epoch -> player -> boost\\n\\tmapping(uint256 _epoch => mapping(address _player => uint256 _boost))\\n\\t\\tpublic epochBoosts; // 100 = 100% = no boost\\n\\n\\t/// @dev Mapping of epochs to winners\\n\\tmapping(uint256 => address[]) public winners;\\n\\n\\t/// @dev Mapping of epochs to winners\\n\\tmapping(uint256 => mapping(address => uint256)) public winnersIndex;\\n\\n\\t// store addresses that a automatic market maker pairs. Any transfer from these addresses\\n\\t// should always be allowed\\n\\tmapping(address => bool) public automatedMarketMakerPairs;\\n\\n\\t// uint256 public totalHolders = 0;\\n\\tuint256 public epoch = 0;\\n\\tuint256 public lastRollover;\\n\\tuint256 public immutable epochDuration = 86400;\\n\\n\\tIUniswapV2Router02 public uniswapV2Router;\\n\\taddress public uniswapV2Pair;\\n\\taddress public WETH;\\n\\n\\taddress payable public feeReceiver;\\n\\n\\tuint256 private constant BUY_DAILY_BOOST = 300;\\n\\tuint256 private constant BUY_BOOST_MIN_BUY = 0.1 ether;\\n\\tuint256 private constant LOGIN_DAILY_BOOST = 200;\\n\\tuint256 private constant SUPER_BOOST = 300;\\n\\tuint256 private constant SUPER_BOOST_COST = 1 ether;\\n\\n\\tfunction totalHolders() public view virtual returns (uint256) {\\n\\t\\treturn _allOwners.length;\\n\\t}\\n\\n\\t// exclude from all restrictions\\n\\tmapping(address => bool) private _excludeFromRestrictions;\\n\\n\\tevent SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\tevent ExcludeFromRestrictions(address indexed account, bool isExcluded);\\n\\n\\tevent BoughtSuperBoost(address indexed player, uint epoch);\\n\\tevent BoughtWinMoon(\\n\\t\\taddress indexed player,\\n\\t\\tuint epoch,\\n\\t\\tuint bnbAmount,\\n\\t\\tuint winmoonAmount\\n\\t);\\n\\tevent NewWinner(uint indexed epoch, address winner);\\n\\tevent PairInitialized(address router, address pair);\\n\\tevent EthWithdraw(uint256 amount);\\n\\tevent NewFeeReceiver(address payable account);\\n\\n\\tconstructor(\\n\\t\\taddress initialOwner,\\n\\t\\tIUniswapV2Router02 _router,\\n\\t\\taddress payable _feeReceiver\\n\\t) ERC20(\\\"WINMOON.XYZ\\\", \\\"WINMOON\\\") Ownable() {\\n\\t\\tfeeReceiver = _feeReceiver;\\n\\t\\t_mint(initialOwner, 777777777 * 10 ** decimals());\\n\\t\\t_transferOwnership(initialOwner);\\n\\t\\tif (address(_router) != address(0)) {\\n\\t\\t\\tinitializePair(_router, true);\\n\\t\\t}\\n\\t\\t_excludeFromRestrictions[address(this)] = true;\\n\\t\\t_excludeFromRestrictions[initialOwner] = true;\\n\\t}\\n\\n\\tfunction holder(uint256 index) external view returns (address) {\\n\\t\\treturn _allOwners[index];\\n\\t}\\n\\n\\t// TODO test this\\n\\tfunction initializePair(\\n\\t\\tIUniswapV2Router02 _uniswapV2Router,\\n\\t\\tbool createPair\\n\\t) public onlyOwner {\\n\\t\\tuniswapV2Router = _uniswapV2Router;\\n\\n\\t\\tif (createPair) {\\n\\t\\t\\tuniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\\n\\t\\t\\t\\t.createPair(address(this), uniswapV2Router.WETH());\\n\\t\\t} else {\\n\\t\\t\\tuniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\\n\\t\\t\\t\\t.getPair(address(this), uniswapV2Router.WETH());\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\taddress(uniswapV2Router) != address(0) &&\\n\\t\\t\\t\\tuniswapV2Pair != address(0),\\n\\t\\t\\t\\\"Router and pair not set correctly\\\"\\n\\t\\t);\\n\\t\\t_setAutomatedMarketMakerPair(uniswapV2Pair, true);\\n\\t\\tWETH = uniswapV2Router.WETH();\\n\\n\\t\\t_approveTokenIfNeeded(WETH, address(uniswapV2Router));\\n\\n\\t\\temit PairInitialized(address(uniswapV2Router), address(uniswapV2Pair));\\n\\t}\\n\\n\\tfunction start(uint256 _startTime) external onlyOwner {\\n\\t\\trequire(epoch == 0);\\n\\t\\trequire(\\n\\t\\t\\tuniswapV2Pair != address(0) &&\\n\\t\\t\\t\\taddress(uniswapV2Router) != address(0),\\n\\t\\t\\t\\\"Router and pair must be initialized\\\"\\n\\t\\t);\\n\\n\\t\\tlastRollover = _startTime;\\n\\t\\t_calculateEntries();\\n\\t}\\n\\n\\tfunction rollover() public {\\n\\t\\trequire(lastRollover > 0, \\\"Cannot rollover before start\\\");\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp >= lastRollover + epochDuration,\\n\\t\\t\\t\\\"Too soon, too soon\\\"\\n\\t\\t);\\n\\t\\tepoch++;\\n\\n\\t\\t_calculateEntries();\\n\\n\\t\\tfor (uint i = 0; i < numberOfWinners(); i++) {\\n\\t\\t\\taddress thisWinner = getWinnerAddressFromRandom(\\n\\t\\t\\t\\tepoch + epochDuration + numberOfWinners() + i //some nonsense numbers to feed the generator\\n\\t\\t\\t);\\n\\t\\t\\twinners[epoch].push(thisWinner);\\n\\t\\t\\twinnersIndex[epoch][thisWinner] = winners[epoch].length;\\n\\t\\t\\temit NewWinner(epoch, thisWinner);\\n\\t\\t}\\n\\n\\t\\tepochs[epoch] = EpochData({\\n\\t\\t\\tepoch: epoch,\\n\\t\\t\\ttotalPlayers: totalPlayersFromEpoch(epoch),\\n\\t\\t\\ttotalEntries: totalEntries[epoch],\\n\\t\\t\\ttotalWinners: numberOfWinnersFromEpoch(epoch)\\n\\t\\t});\\n\\n\\t\\tlastRollover += epochDuration;\\n\\t}\\n\\n\\t/*  VIEWS  */\\n\\n\\tfunction numberOfWinners() public view returns (uint256) {\\n\\t\\tif (currentTotalPlayers() <= 100) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\n\\t\\treturn (currentTotalPlayers() / 100) + 1;\\n\\t}\\n\\n\\tfunction oddsOfGettingDrawn(\\n\\t\\taddress account\\n\\t) external view returns (uint256) {\\n\\t\\tuint256 playerEntriesPercent = currentPlayersEntries(account) * 100000;\\n\\t\\treturn playerEntriesPercent / currentTotalEntries();\\n\\t}\\n\\n\\tfunction currentTotalEntries() internal view returns (uint256) {\\n\\t\\treturn totalEntries[epoch];\\n\\t}\\n\\n\\tfunction currentTotalPlayers() internal view returns (uint256) {\\n\\t\\treturn entriesList[epoch].length;\\n\\t}\\n\\n\\tfunction totalPlayersFromEpoch(\\n\\t\\tuint256 _epoch\\n\\t) internal view returns (uint256) {\\n\\t\\treturn entriesList[_epoch].length;\\n\\t}\\n\\n\\tfunction currentWinners() public view returns (address[] memory _winners) {\\n\\t\\tuint i = 0;\\n\\t\\t_winners = new address[](winners[epoch].length);\\n\\t\\twhile (winners[epoch].length > i) {\\n\\t\\t\\t_winners[i] = winners[epoch][i];\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction numberOfWinnersFromEpoch(\\n\\t\\tuint256 _epoch\\n\\t) internal view returns (uint256 _totalWinners) {\\n\\t\\t_totalWinners = winners[_epoch].length;\\n\\t}\\n\\n\\tfunction checkWinner(address player) public view returns (bool) {\\n\\t\\taddress[] memory currentWinningPlayers = currentWinners();\\n\\t\\tuint i = 0;\\n\\t\\twhile (currentWinningPlayers.length > i) {\\n\\t\\t\\tif (player == currentWinningPlayers[i]) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction playerEntriesByEpoch(\\n\\t\\taddress account,\\n\\t\\tuint256 _epoch\\n\\t) external view returns (uint256) {\\n\\t\\tuint256 playerIndex = playerEntryIndex[_epoch][account];\\n\\t\\tif (playerIndex > 0) {\\n\\t\\t\\treturn\\n\\t\\t\\t\\tentriesList[_epoch][playerIndex].currentEntriesLength -\\n\\t\\t\\t\\tentriesList[_epoch][playerIndex - 1].currentEntriesLength;\\n\\t\\t} else {\\n\\t\\t\\treturn entriesList[_epoch][playerIndex].currentEntriesLength;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction currentPlayersEntries(\\n\\t\\taddress account\\n\\t) public view returns (uint256) {\\n\\t\\tuint256 numEntries = (walletBoosts[account] * 100) / 100;\\n\\t\\tif (epochBoosts[epoch + 1][account] > 100) {\\n\\t\\t\\tnumEntries = (numEntries * epochBoosts[epoch + 1][account]) / 100;\\n\\t\\t}\\n\\t\\treturn numEntries;\\n\\t}\\n\\n\\tfunction shouldRollover() internal view returns (bool) {\\n\\t\\tif (lastRollover == 0 || epoch == 0) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\treturn block.timestamp >= (lastRollover + epochDuration);\\n\\t}\\n\\n\\t// Calculate the entries for the current epoch\\n\\n\\tfunction _calculateEntries() internal {\\n\\t\\ttotalEntries[epoch] = 0;\\n\\t\\tfor (uint256 i = 0; i < _allOwners.length; i++) {\\n\\t\\t\\taddress player = _allOwners[i];\\n\\t\\t\\tif (automatedMarketMakerPairs[player]) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tuint256 numEntries = (walletBoosts[player] * 100) / 100;\\n\\t\\t\\tif (epochBoosts[epoch][player] > 100) {\\n\\t\\t\\t\\tnumEntries = (numEntries * epochBoosts[epoch][player]) / 100;\\n\\t\\t\\t}\\n\\t\\t\\tEntriesData memory entryBought = EntriesData({\\n\\t\\t\\t\\tplayer: player,\\n\\t\\t\\t\\tcurrentEntriesLength: uint256(totalEntries[epoch] + numEntries)\\n\\t\\t\\t});\\n\\n\\t\\t\\tentriesList[epoch].push(entryBought);\\n\\t\\t\\tplayerEntryIndex[epoch][player] = entriesList[epoch].length - 1;\\n\\t\\t\\t// update raffle variables\\n\\t\\t\\ttotalEntries[epoch] = totalEntries[epoch] + numEntries;\\n\\t\\t}\\n\\t}\\n\\n\\t// helper method to get the winner address of a raffle\\n\\t/// @return the wallet that won the raffle\\n\\t/// @dev Uses a binary search on the sorted array to retreive the winner\\n\\tfunction getWinnerAddressFromRandom(\\n\\t\\tuint nonce\\n\\t) public view returns (address) {\\n\\t\\tif (epoch == 0 || entriesList[epoch].length == 0) {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\n\\t\\tuint256 normalizedRandomNumber = (generateRandomNumber(nonce) %\\n\\t\\t\\tcurrentTotalEntries());\\n\\t\\tuint256 position = findUpperBound(\\n\\t\\t\\tentriesList[epoch],\\n\\t\\t\\tnormalizedRandomNumber\\n\\t\\t);\\n\\n\\t\\taddress candidate = entriesList[epoch][position].player;\\n\\t\\t// general case\\n\\t\\tif (candidate != address(0)) return candidate;\\n\\t\\telse {\\n\\t\\t\\tbool ended = false;\\n\\t\\t\\tuint256 i = position;\\n\\t\\t\\twhile (\\n\\t\\t\\t\\tended == false && entriesList[epoch][i].player == address(0)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tif (i == 0) i = entriesList[epoch].length - 1;\\n\\t\\t\\t\\telse i = i - 1;\\n\\t\\t\\t\\tif (i == position) ended == true;\\n\\t\\t\\t}\\n\\t\\t\\treturn entriesList[epoch][i].player;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction generateRandomNumber(\\n\\t\\tuint randNonce\\n\\t) internal view returns (uint256) {\\n\\t\\tuint256 blockNumber = block.number - 1; // Use the previous block's hash\\n\\t\\tbytes32 lastBlockHash = blockhash(blockNumber);\\n\\t\\treturn\\n\\t\\t\\tuint256(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t_msgSender(),\\n\\t\\t\\t\\t\\t\\tlastBlockHash,\\n\\t\\t\\t\\t\\t\\tblock.timestamp + randNonce\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @param array sorted array of EntriesBought. CurrentEntriesLength is the numeric field used to sort\\n\\t/// @param element uint256 to find. Goes from 1 to entriesLength\\n\\t/// @dev based on openzeppelin code (v4.0), modified to use an array of EntriesBought\\n\\t/// Searches a sorted array and returns the first index that contains a value greater or equal to element.\\n\\t/// If no such index exists (i.e. all values in the array are strictly less than element), the array length is returned. Time complexity O(log n).\\n\\t/// array is expected to be sorted in ascending order, and to contain no repeated elements.\\n\\t/// https://docs.openzeppelin.com/contracts/3.x/api/utils#Arrays-findUpperBound-uint256---uint256-\\n\\tfunction findUpperBound(\\n\\t\\tEntriesData[] storage array,\\n\\t\\tuint256 element\\n\\t) internal view returns (uint256) {\\n\\t\\tif (array.length == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 low = 0;\\n\\t\\tuint256 high = array.length;\\n\\n\\t\\twhile (low < high) {\\n\\t\\t\\tuint256 mid = Math.average(low, high);\\n\\n\\t\\t\\t// Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n\\t\\t\\t// because Math.average rounds down (it does integer division with truncation).\\n\\t\\t\\tif (array[mid].currentEntriesLength > element) {\\n\\t\\t\\t\\thigh = mid;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlow = mid + 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n\\t\\tif (low > 0 && array[low - 1].currentEntriesLength == element) {\\n\\t\\t\\treturn low - 1;\\n\\t\\t} else {\\n\\t\\t\\treturn low;\\n\\t\\t}\\n\\t}\\n\\n\\t// function _afterTokenTransfer(\\n\\t// \\taddress from,\\n\\t// \\taddress to,\\n\\t// \\tuint256 amount\\n\\t// ) internal virtual override {\\n\\t// \\tsuper._afterTokenTransfer(from, to, amount);\\n\\n\\t// \\t// Check after transfer if rollover should occur\\n\\t// }\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal virtual override {\\n\\t\\tsuper._beforeTokenTransfer(from, to, amount);\\n\\n\\t\\tif (shouldRollover()) {\\n\\t\\t\\trollover();\\n\\t\\t}\\n\\n\\t\\t// Transfer is disabled by default.  Following functions will potentially enable it\\n\\t\\tbool transferAllowed = false;\\n\\n\\t\\t// Allow initial mint and future burns\\n\\t\\tif (from == address(0) || to == address(0)) {\\n\\t\\t\\ttransferAllowed = true;\\n\\t\\t}\\n\\n\\t\\t// Epoch 0, transfers are allowed\\n\\t\\tif (epoch == 0) {\\n\\t\\t\\ttransferAllowed = true;\\n\\t\\t}\\n\\n\\t\\t// if any account belongs to _isExcludedFromRestictions account then allow\\n\\t\\tif (_excludeFromRestrictions[from] || _excludeFromRestrictions[to]) {\\n\\t\\t\\ttransferAllowed = true;\\n\\t\\t}\\n\\n\\t\\t// This is a buy\\n\\t\\tif (automatedMarketMakerPairs[from]) {\\n\\t\\t\\ttransferAllowed = true;\\n\\t\\t}\\n\\n\\t\\t// IF is a winner!\\n\\t\\t// All transfers are allowed from a winner, including sells\\n\\t\\tif (checkWinner(from)) {\\n\\t\\t\\ttransferAllowed = true;\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\ttransferAllowed,\\n\\t\\t\\t\\\"This transfer is not allowed. Only winners can transfer\\\"\\n\\t\\t);\\n\\n\\t\\t// Remove owner from list of owners\\n\\t\\tif (from != address(0) && balanceOf(from) == amount) {\\n\\t\\t\\t_removeOwnerFromAllOwnersEnumeration(from);\\n\\t\\t}\\n\\n\\t\\t// Add owner to list of owners and adjust wallet boost\\n\\t\\tif (to != address(0) && balanceOf(to) == 0) {\\n\\t\\t\\t_addOwnerToAllTokensEnumeration(to);\\n\\t\\t\\tif (walletBoosts[to] == 0) {\\n\\t\\t\\t\\twalletBoosts[to] = 100;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/* **************\\n\\tBUY BOOSTS\\n\\t************** */\\n\\n\\tfunction addLoginDailyBoost(address player) internal {\\n\\t\\tif (epochBoosts[epoch + 1][player] == BUY_DAILY_BOOST) {\\n\\t\\t\\tepochBoosts[epoch + 1][player] =\\n\\t\\t\\t\\tBUY_DAILY_BOOST +\\n\\t\\t\\t\\tLOGIN_DAILY_BOOST;\\n\\t\\t} else {\\n\\t\\t\\tepochBoosts[epoch + 1][player] = LOGIN_DAILY_BOOST;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addBuyDailyBoost(address player) internal {\\n\\t\\tif (epochBoosts[epoch + 1][player] == LOGIN_DAILY_BOOST) {\\n\\t\\t\\tepochBoosts[epoch + 1][player] =\\n\\t\\t\\t\\tBUY_DAILY_BOOST +\\n\\t\\t\\t\\tLOGIN_DAILY_BOOST;\\n\\t\\t} else {\\n\\t\\t\\tepochBoosts[epoch + 1][player] = BUY_DAILY_BOOST;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addBothDailyBoost(address player) internal {\\n\\t\\tepochBoosts[epoch + 1][player] = BUY_DAILY_BOOST + LOGIN_DAILY_BOOST;\\n\\t}\\n\\n\\tfunction addSuperBoost(address player) internal {\\n\\t\\twalletBoosts[player] = SUPER_BOOST;\\n\\t}\\n\\n\\tfunction buySuperBoost() external payable {\\n\\t\\trequire(msg.value >= SUPER_BOOST_COST, \\\"Not enough Ether/BNB Sent\\\");\\n\\t\\taddSuperBoost(_msgSender());\\n\\t\\t(bool sent, ) = feeReceiver.call{ value: msg.value }(\\\"\\\");\\n\\t\\trequire(sent, \\\"Failed to send ETH\\\");\\n\\t\\temit BoughtSuperBoost(_msgSender(), epoch);\\n\\t}\\n\\n\\tfunction dailyLoginBoost() external {\\n\\t\\taddLoginDailyBoost(_msgSender());\\n\\t}\\n\\n\\t/* **************\\n\\tSWAP and Estimates\\n\\t************** */\\n\\n\\tfunction buyWithETH(uint256 amountMinimum) external payable returns (bool) {\\n\\t\\trequire(msg.value >= 1000, \\\"Insignificant input amount\\\");\\n\\n\\t\\tIWETH(WETH).deposit{ value: msg.value }();\\n\\t\\tuint256 _wethBalance = IERC20(WETH).balanceOf(address(this));\\n\\t\\tuint256 _beforeBalance = IERC20(address(this)).balanceOf(_msgSender());\\n\\t\\t_swap(\\n\\t\\t\\taddress(this),\\n\\t\\t\\tamountMinimum == 0\\n\\t\\t\\t\\t? (estimateSwap(_wethBalance) * 97) / 100\\n\\t\\t\\t\\t: amountMinimum,\\n\\t\\t\\tWETH,\\n\\t\\t\\t_wethBalance,\\n\\t\\t\\t_msgSender()\\n\\t\\t);\\n\\t\\tuint256 boughtAmount = IERC20(address(this)).balanceOf(_msgSender()) -\\n\\t\\t\\t_beforeBalance;\\n\\t\\tif (msg.value >= BUY_BOOST_MIN_BUY) {\\n\\t\\t\\taddBothDailyBoost(_msgSender());\\n\\t\\t} else {\\n\\t\\t\\taddLoginDailyBoost(_msgSender());\\n\\t\\t}\\n\\n\\t\\temit BoughtWinMoon(_msgSender(), epoch, msg.value, boughtAmount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction estimateSwap(\\n\\t\\tuint256 fullInvestmentIn\\n\\t) public view returns (uint256 swapAmountOut) {\\n\\t\\tIUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\\n\\t\\tbool isInputA = pair.token0() == WETH;\\n\\t\\trequire(\\n\\t\\t\\tisInputA || pair.token1() == WETH,\\n\\t\\t\\t\\\"Input token not present in liqudity pair\\\"\\n\\t\\t);\\n\\n\\t\\t(uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\\n\\t\\t(reserveA, reserveB) = isInputA\\n\\t\\t\\t? (reserveA, reserveB)\\n\\t\\t\\t: (reserveB, reserveA);\\n\\n\\t\\tswapAmountOut = uniswapV2Router.getAmountOut(\\n\\t\\t\\tfullInvestmentIn,\\n\\t\\t\\treserveA,\\n\\t\\t\\treserveB\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _swap(\\n\\t\\taddress tokenOut,\\n\\t\\tuint256 tokenAmountOutMin,\\n\\t\\taddress tokenIn,\\n\\t\\tuint256 tokenInAmount,\\n\\t\\taddress _to\\n\\t) internal {\\n\\t\\tuint256 wethAmount;\\n\\n\\t\\tif (tokenIn == WETH) {\\n\\t\\t\\twethAmount = tokenInAmount;\\n\\t\\t} else {\\n\\t\\t\\tIUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\\n\\t\\t\\tbool isInputA = pair.token0() == tokenIn;\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tisInputA || pair.token1() == tokenIn,\\n\\t\\t\\t\\t\\\"Input token not present in input pair\\\"\\n\\t\\t\\t);\\n\\t\\t\\taddress[] memory path;\\n\\n\\t\\t\\tpath = new address[](2);\\n\\t\\t\\tpath[0] = tokenIn;\\n\\t\\t\\tpath[1] = WETH;\\n\\t\\t\\tuniswapV2Router\\n\\t\\t\\t\\t.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\t\\t\\t\\ttokenInAmount,\\n\\t\\t\\t\\t\\ttokenAmountOutMin,\\n\\t\\t\\t\\t\\tpath,\\n\\t\\t\\t\\t\\t_to,\\n\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t);\\n\\t\\t\\twethAmount = IERC20(WETH).balanceOf(address(this));\\n\\t\\t}\\n\\n\\t\\tif (tokenOut != WETH) {\\n\\t\\t\\taddress[] memory basePath;\\n\\n\\t\\t\\tbasePath = new address[](2);\\n\\t\\t\\tbasePath[0] = WETH;\\n\\t\\t\\tbasePath[1] = tokenOut;\\n\\n\\t\\t\\tuniswapV2Router\\n\\t\\t\\t\\t.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\t\\t\\t\\twethAmount,\\n\\t\\t\\t\\t\\ttokenAmountOutMin,\\n\\t\\t\\t\\t\\tbasePath,\\n\\t\\t\\t\\t\\t_to,\\n\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdraw() external onlyOwner {\\n\\t\\tuint256 amount = address(this).balance;\\n\\t\\trequire(amount > 0, \\\"Nothing to withdraw; contract balance empty\\\");\\n\\n\\t\\taddress _owner = owner();\\n\\t\\t(bool sent, ) = _owner.call{ value: amount }(\\\"\\\");\\n\\t\\trequire(sent, \\\"Failed to send Ether\\\");\\n\\t\\temit EthWithdraw(amount);\\n\\t}\\n\\n\\t/* ******************\\n\\tAdmin / internal functions\\n\\t****************** */\\n\\n\\tfunction isExcludeFromRestrictions(\\n\\t\\taddress account\\n\\t) external view returns (bool) {\\n\\t\\treturn _excludeFromRestrictions[account];\\n\\t}\\n\\n\\tfunction excludeFromRestrictions(\\n\\t\\taddress account,\\n\\t\\tbool excluded\\n\\t) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\t_excludeFromRestrictions[account] != excluded,\\n\\t\\t\\t\\\"Account is already the value of 'excluded'\\\"\\n\\t\\t);\\n\\t\\t_excludeFromRestrictions[account] = excluded;\\n\\n\\t\\temit ExcludeFromRestrictions(account, excluded);\\n\\t}\\n\\n\\tfunction setFeeReceiver(address payable account) external onlyOwner {\\n\\t\\trequire(\\n\\t\\t\\taccount != address(0),\\n\\t\\t\\t\\\"Cannot set fee receiver to zero address\\\"\\n\\t\\t);\\n\\t\\tfeeReceiver = account;\\n\\t\\temit NewFeeReceiver(account);\\n\\t}\\n\\n\\tfunction setAutomatedMarketMakerPair(\\n\\t\\taddress pair,\\n\\t\\tbool value\\n\\t) external onlyOwner {\\n\\t\\t_setAutomatedMarketMakerPair(pair, value);\\n\\t}\\n\\n\\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\\n\\t\\trequire(\\n\\t\\t\\tautomatedMarketMakerPairs[pair] != value,\\n\\t\\t\\t\\\"Automated market maker pair is already set to that value\\\"\\n\\t\\t);\\n\\t\\tautomatedMarketMakerPairs[pair] = value;\\n\\n\\t\\temit SetAutomatedMarketMakerPair(pair, value);\\n\\t}\\n\\n\\tfunction _addOwnerToAllTokensEnumeration(address account) private {\\n\\t\\t_allOwnersIndex[account] = _allOwners.length;\\n\\t\\t_allOwners.push(account);\\n\\t}\\n\\n\\tfunction _removeOwnerFromAllOwnersEnumeration(address account) private {\\n\\t\\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n\\t\\t// then delete the last slot (swap and pop).\\n\\n\\t\\tuint256 lastOwnerIndex = _allOwners.length - 1;\\n\\t\\tuint256 ownerIndex = _allOwnersIndex[account];\\n\\n\\t\\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n\\t\\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n\\t\\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n\\t\\taddress lastOwner = _allOwners[lastOwnerIndex];\\n\\n\\t\\t_allOwners[ownerIndex] = lastOwner; // Move the last token to the slot of the to-delete token\\n\\t\\t_allOwnersIndex[lastOwner] = ownerIndex; // Update the moved token's index\\n\\n\\t\\t// This also deletes the contents at the last position of the array\\n\\t\\tdelete _allOwnersIndex[account];\\n\\t\\t_allOwners.pop();\\n\\t}\\n\\n\\tfunction _approveTokenIfNeeded(address token, address spender) private {\\n\\t\\tif (IERC20(token).allowance(address(this), spender) == 0) {\\n\\t\\t\\tIERC20(token).approve(spender, type(uint256).max);\\n\\t\\t}\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n\\tevent PairCreated(\\n\\t\\taddress indexed token0,\\n\\t\\taddress indexed token1,\\n\\t\\taddress pair,\\n\\t\\tuint256\\n\\t);\\n\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction feeToSetter() external view returns (address);\\n\\n\\tfunction getPair(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) external view returns (address pair);\\n\\n\\tfunction allPairs(uint256) external view returns (address pair);\\n\\n\\tfunction allPairsLength() external view returns (uint256);\\n\\n\\tfunction createPair(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) external returns (address pair);\\n\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n\\tevent Approval(address indexed owner, address indexed spender, uint value);\\n\\tevent Transfer(address indexed from, address indexed to, uint value);\\n\\n\\tfunction name() external pure returns (string memory);\\n\\n\\tfunction symbol() external pure returns (string memory);\\n\\n\\tfunction decimals() external pure returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint);\\n\\n\\tfunction allowance(\\n\\t\\taddress owner,\\n\\t\\taddress spender\\n\\t) external view returns (uint);\\n\\n\\tfunction approve(address spender, uint value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint value) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint value\\n\\t) external returns (bool);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n\\tfunction nonces(address owner) external view returns (uint);\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint value,\\n\\t\\tuint deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\n\\tevent Burn(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0,\\n\\t\\tuint amount1,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint amount0In,\\n\\t\\tuint amount1In,\\n\\t\\tuint amount0Out,\\n\\t\\tuint amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint);\\n\\n\\tfunction kLast() external view returns (uint);\\n\\n\\tfunction mint(address to) external returns (uint liquidity);\\n\\n\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\n\\n\\tfunction swap(\\n\\t\\tuint amount0Out,\\n\\t\\tuint amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction skim(address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) external pure returns (uint256 amountB);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountIn);\\n\\n\\tfunction getAmountsOut(\\n\\t\\tuint256 amountIn,\\n\\t\\taddress[] calldata path\\n\\t) external view returns (uint256[] memory amounts);\\n\\n\\tfunction getAmountsIn(\\n\\t\\tuint256 amountOut,\\n\\t\\taddress[] calldata path\\n\\t) external view returns (uint256[] memory amounts);\\n}\\n\\n// pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable;\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256 wad) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"BoughtSuperBoost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winmoonAmount\",\"type\":\"uint256\"}],\"name\":\"BoughtWinMoon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromRestrictions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NewFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"NewWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PairInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySuperBoost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"}],\"name\":\"buyWithETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"currentPlayersEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyLoginBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entriesList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentEntriesLength\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"epochBoosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWinners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEntries\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fullInvestmentIn\",\"type\":\"uint256\"}],\"name\":\"estimateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getWinnerAddressFromRandom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"holder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"createPair\",\"type\":\"bool\"}],\"name\":\"initializePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludeFromRestrictions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRollover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"oddsOfGettingDrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"playerEntriesByEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerEntryIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletBoosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"winnersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WINMOON", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d8e060ca2d847553ec14394ee6b304623e0d1d60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a859dd60fc0ef0b54ebff65b9ef441abfb883c59", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}