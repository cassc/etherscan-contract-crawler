{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract EtomicSwap {\r\n    enum PaymentState {\r\n        Uninitialized,\r\n        PaymentSent,\r\n        ReceivedSpent,\r\n        SenderRefunded\r\n    }\r\n\r\n    struct Payment {\r\n        bytes20 paymentHash;\r\n        uint64 lockTime;\r\n        PaymentState state;\r\n    }\r\n\r\n    mapping (bytes32 => Payment) public payments;\r\n\r\n    event PaymentSent(bytes32 id);\r\n    event ReceiverSpent(bytes32 id, bytes32 secret);\r\n    event SenderRefunded(bytes32 id);\r\n\r\n    constructor() public { }\r\n\r\n    function ethPayment(\r\n        bytes32 _id,\r\n        address _receiver,\r\n        bytes20 _secretHash,\r\n        uint64 _lockTime\r\n    ) external payable {\r\n        require(_receiver != address(0) && msg.value > 0 && payments[_id].state == PaymentState.Uninitialized);\r\n\r\n        bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n                _receiver,\r\n                msg.sender,\r\n                _secretHash,\r\n                address(0),\r\n                msg.value\r\n            ));\r\n\r\n        payments[_id] = Payment(\r\n            paymentHash,\r\n            _lockTime,\r\n            PaymentState.PaymentSent\r\n        );\r\n\r\n        emit PaymentSent(_id);\r\n    }\r\n\r\n    function erc20Payment(\r\n        bytes32 _id,\r\n        uint256 _amount,\r\n        address _tokenAddress,\r\n        address _receiver,\r\n        bytes20 _secretHash,\r\n        uint64 _lockTime\r\n    ) external payable {\r\n        require(_receiver != address(0) && _amount > 0 && payments[_id].state == PaymentState.Uninitialized);\r\n\r\n        bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n                _receiver,\r\n                msg.sender,\r\n                _secretHash,\r\n                _tokenAddress,\r\n                _amount\r\n            ));\r\n\r\n        payments[_id] = Payment(\r\n            paymentHash,\r\n            _lockTime,\r\n            PaymentState.PaymentSent\r\n        );\r\n\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        require(token.transferFrom(msg.sender, address(this), _amount));\r\n        emit PaymentSent(_id);\r\n    }\r\n\r\n    function receiverSpend(\r\n        bytes32 _id,\r\n        uint256 _amount,\r\n        bytes32 _secret,\r\n        address _tokenAddress,\r\n        address _sender\r\n    ) external {\r\n        require(payments[_id].state == PaymentState.PaymentSent);\r\n\r\n        bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n                msg.sender,\r\n                _sender,\r\n                ripemd160(abi.encodePacked(sha256(abi.encodePacked(_secret)))),\r\n                _tokenAddress,\r\n                _amount\r\n            ));\r\n\r\n        require(paymentHash == payments[_id].paymentHash);\r\n        payments[_id].state = PaymentState.ReceivedSpent;\r\n        if (_tokenAddress == address(0)) {\r\n            msg.sender.transfer(_amount);\r\n        } else {\r\n            IERC20 token = IERC20(_tokenAddress);\r\n            require(token.transfer(msg.sender, _amount));\r\n        }\r\n\r\n        emit ReceiverSpent(_id, _secret);\r\n    }\r\n\r\n    function senderRefund(\r\n        bytes32 _id,\r\n        uint256 _amount,\r\n        bytes20 _paymentHash,\r\n        address _tokenAddress,\r\n        address _receiver\r\n    ) external {\r\n        require(payments[_id].state == PaymentState.PaymentSent);\r\n\r\n        bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n                _receiver,\r\n                msg.sender,\r\n                _paymentHash,\r\n                _tokenAddress,\r\n                _amount\r\n            ));\r\n\r\n        require(paymentHash == payments[_id].paymentHash && now >= payments[_id].lockTime);\r\n\r\n        payments[_id].state = PaymentState.SenderRefunded;\r\n\r\n        if (_tokenAddress == address(0)) {\r\n            msg.sender.transfer(_amount);\r\n        } else {\r\n            IERC20 token = IERC20(_tokenAddress);\r\n            require(token.transfer(msg.sender, _amount));\r\n        }\r\n\r\n        emit SenderRefunded(_id);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"PaymentSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"ReceiverSpent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"SenderRefunded\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes20\",\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"internalType\":\"uint64\",\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"erc20Payment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes20\",\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"internalType\":\"uint64\",\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"ethPayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"bytes20\",\"name\":\"paymentHash\",\"type\":\"bytes20\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"},{\"internalType\":\"enum EtomicSwap.PaymentState\",\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"receiverSpend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes20\",\"name\":\"_paymentHash\",\"type\":\"bytes20\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"senderRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EtomicSwap", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a0ed6c71dcd889571ebee78aa8d27b3d114f2c94aa85d71e7418d5d600167912"}