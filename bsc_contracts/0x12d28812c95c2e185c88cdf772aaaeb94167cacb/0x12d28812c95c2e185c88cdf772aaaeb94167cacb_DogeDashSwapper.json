{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function _grantToSecondOwner(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract DogeDashSwapper is Ownable {\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                 errors                                 */\r\n    /* -------------------------------------------------------------------------- */\r\n    error AmountExceedsMaxSwapAmountPerPeriod();\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                 constants                                 */\r\n    /* -------------------------------------------------------------------------- */\r\n    /**\r\n     * @dev one week in seconds\r\n     */\r\n    uint256 private constant ONE_WEEK = 7 days;\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                 immutable                                 */\r\n    /* -------------------------------------------------------------------------- */\r\n    /**\r\n     * @notice The address of the DogeDash token\r\n     */\r\n    IERC20 public immutable dogeDash;\r\n\r\n    /**\r\n     * @notice The address of the Hello token\r\n     */\r\n    IERC20 public immutable helloToken;\r\n\r\n    /**\r\n     * @notice The timestamp of the contract deployment\r\n     */\r\n    uint256 public immutable GENESIS_TIMESTAMP;\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                 state vars                                 */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    /**\r\n     * @notice The maximum amount of DogeDash that can be swapped per period\r\n     */\r\n    uint256 public maxSwapAmountPerPeriod = 10_000_000 ether;\r\n\r\n    /**\r\n     * @notice The amount of DogeDash tokens that can be swapped for 1 Hello token\r\n     */\r\n    uint256 public dogeTokensPerHelloToken = 100;\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                  mappings                                  */\r\n    /* -------------------------------------------------------------------------- */\r\n    mapping(address => mapping(uint256 => uint256)) public amountSwappedAtWeek;\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                 constructor                                */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    /**\r\n     * @param _dogeDash The address of the DogeDash token\r\n     * @param _helloToken The address of the Hello token\r\n     */\r\n    constructor(address _dogeDash, address _helloToken) {\r\n        dogeDash = IERC20(_dogeDash);\r\n        helloToken = IERC20(_helloToken);\r\n        GENESIS_TIMESTAMP = block.timestamp;\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                    swap                                    */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    /**\r\n     * @notice Swaps DogeDash for Hello tokens\r\n     * @param amount The amount of DogeDash to swap\r\n     */\r\n    function swap(uint256 amount) external {\r\n        uint256 week = currentWeek();\r\n        uint256 amountSwappedAtCurrentWeek = amountSwappedAtWeek[msg.sender][week];\r\n        if (amountSwappedAtCurrentWeek + amount > maxSwapAmountPerPeriod) {\r\n            revert AmountExceedsMaxSwapAmountPerPeriod();\r\n        }\r\n        amountSwappedAtWeek[msg.sender][week] = amountSwappedAtCurrentWeek + amount;\r\n        dogeDash.transferFrom(msg.sender, address(0xdead), amount);\r\n        uint256 amountHelloTokens = amount / dogeTokensPerHelloToken;\r\n        helloToken.transfer(msg.sender, amountHelloTokens);\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                  setters                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    /**\r\n     * @notice Sets the amount of DogeDash tokens that can be swapped for 1 Hello token per time period\r\n     * @param amount The nax amount of DogeDash tokens that can be swapeped per period for\r\n     */\r\n    function setMaxSwapAmountPerPeriod(uint256 amount) external onlyOwner {\r\n        maxSwapAmountPerPeriod = amount;\r\n    }\r\n\r\n    /*-------------------------------------------------------------------------- */\r\n    /*                                 recovery                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    /**\r\n     * @notice Recovers ERC20 tokens sent to the contract\r\n     * @param token The address of the ERC20 token to recover\r\n     * @param amount The amount of tokens to recover\r\n     */\r\n    function recover(address token, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Recovers ETH sent to the contract\r\n     */\r\n    function recoverETH() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    //----------------------------------------------------------------------------*/\r\n    /*                                  getters                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n    /**\r\n     * @notice Returns the current week\r\n     * @return The current week\r\n     */\r\n    function currentWeek() public view returns (uint256) {\r\n        return (block.timestamp - GENESIS_TIMESTAMP) / ONE_WEEK;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dogeDash\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_helloToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountExceedsMaxSwapAmountPerPeriod\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GENESIS_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountSwappedAtWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogeDash\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogeTokensPerHelloToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helloToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapAmountPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSwapAmountPerPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DogeDashSwapper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ae5709c585ccfb3e61ff312ec632c21a5f03f700000000000000000000000000f1cbed8efa0e012adbccb1638d0ab0147d5ac00", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d0d83ba6debcf43e68fb04f36c49a7112ea8f66b3b66099074d3c1044e3ddd3e"}