{"SourceCode": "/*\r\n\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557    \u2588\u2588\u2557  \u2588\u2588\u2557\r\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551    \u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\r\n\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551     \u255a\u2588\u2588\u2588\u2554\u255d \r\n\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2588\u2588\u2557 \r\n\u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551    \u2588\u2588\u2554\u255d \u2588\u2588\u2557\r\n\u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d    \u255a\u2550\u255d  \u255a\u2550\u255d\r\nprojectfalconx.com\r\n\r\n\r\n3% Auto LP\r\n3.5% Marketing\r\n1.5% team\r\n1% Referral and Community\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract IERC20Extented is IERC20 {\r\n    function decimals() external view virtual returns (uint8);\r\n    function name() external view virtual returns (string memory);\r\n    function symbol() external view virtual returns (string memory);\r\n}\r\n\r\ncontract FalconX is Context, IERC20, IERC20Extented, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"FalconX\";\r\n    string private constant _symbol = \"FALCX\";\r\n    uint8 private constant _decimals = 9;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private constant _tTotal = 1000000000000 * 10**9; // 1 Trillion\r\n    uint256 public _priceImpact = 2;\r\n    uint256 private _firstBlock;\r\n    uint256 private _botBlocks;\r\n    uint256 public _maxWalletAmount;\r\n    uint256 private _maxSellAmountBNB = 5000000000000000000; // 5 BNB\r\n    uint256 private _minBuyBNB = 0; //10000000000000000; // 0.01 BNB\r\n    uint256 private _minSellBNB = 0; //10000000000000000; // 0.01 BNB\r\n\r\n    // fees\r\n    uint256 public _liquidityFee = 30; // divided by 1000\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    uint256 public _marketingFee = 35; // divided by 1000\r\n    uint256 private _previousMarketingFee = _marketingFee;\r\n    uint256 public _teamFee = 15; // divided by 1000\r\n    uint256 private _previousTeamFee = _teamFee;\r\n    uint256 public _communityFee = 10; // divided by 1000\r\n    uint256 private _previousCommunityFee = _communityFee;\r\n    uint256 public _burnFee = 0; // divided by 1000\r\n    uint256 private _previousBurnFee = _burnFee;\r\n    \r\n    uint256 private _marketingPercent = 58;\r\n    uint256 private _teamPercent = 25;\r\n    uint256 private _communityPercent = 17;\r\n\r\n    struct FeeBreakdown {\r\n        uint256 tLiquidity;\r\n        uint256 tMarketing;\r\n        uint256 tTeam;\r\n        uint256 tCommunity;\r\n        uint256 tBurn;\r\n        uint256 tAmount;\r\n    }\r\n\r\n    mapping(address => bool) private bots;\r\n    address payable private _marketingAddress = payable(0xA5347334AF09Bbc6C2456AB435F54ef8189FA709);\r\n    address payable private _teamAddress = payable(0x5cCaA2b9f967019FE5ea59AC572407dBe0858cbE);\r\n    address payable private _communityAddress = payable(0xBD92de26245518A172732222749e662Fb28b4674);\r\n    address payable constant private _burnAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n    address private presaleRouter;\r\n    address private presaleAddress;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    uint256 private _maxTxAmount;\r\n\r\n    bool private tradingOpen = false;\r\n    bool private inSwap = false;\r\n    bool private presale = true;\r\n    bool private pairSwapped = false;\r\n    bool public _priceImpactSellLimitEnabled = false;\r\n    bool public _BNBsellLimitEnabled = false;\r\n    \r\n    address public bridge;\r\n\r\n    event EndedPresale(bool presale);\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    event PercentsUpdated(uint256 _marketingPercent, uint256 _teamPercent, uint256 _communityPercent);\r\n    event FeesUpdated(uint256 _marketingFee, uint256 _liquidityFee, uint256 _teamFee, uint256 _communityFee, uint256 _burnFee);\r\n    event PriceImpactUpdated(uint256 _priceImpact);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor() {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);//ropstenn 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //bsc test 0xD99D1c33F9fC3444f8101754aBC46c52416550D1);//bsc main net 0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router),type(uint256).max);\r\n\r\n        _maxTxAmount = _tTotal; // start off transaction limit at 100% of total supply\r\n        _maxWalletAmount = _tTotal.div(1); // 100%\r\n        _priceImpact = 100;\r\n\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() override external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() override external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() override external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function isBot(address account) public view returns (bool) {\r\n        return bots[account];\r\n    }\r\n    \r\n    function setBridge(address _bridge) external onlyOwner {\r\n        bridge = _bridge;\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_marketingFee == 0 && _liquidityFee == 0 && _teamFee == 0 && _communityFee == 0 && _burnFee == 0) return;\r\n        _previousMarketingFee = _marketingFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousTeamFee = _teamFee;\r\n        _previousCommunityFee = _communityFee;\r\n        _previousBurnFee = _burnFee;\r\n        \r\n        _marketingFee = 0;\r\n        _liquidityFee = 0;\r\n        _teamFee = 0;\r\n        _communityFee = 0;\r\n        _burnFee = 0;\r\n    }\r\n\r\n    function setBotFee() private {\r\n        _previousMarketingFee = _marketingFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousTeamFee = _teamFee;\r\n        _previousCommunityFee = _communityFee;\r\n        _previousBurnFee = _burnFee;\r\n        \r\n        _marketingFee = 180;\r\n        _liquidityFee = 180;\r\n        _teamFee = 18;\r\n        _communityFee = 18;\r\n        _burnFee = 180;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _marketingFee = _previousMarketingFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _teamFee = _previousTeamFee;\r\n        _communityFee = _previousCommunityFee;\r\n        _burnFee = _previousBurnFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // calculate price based on pair reserves\r\n    function getTokenPriceBNB(uint256 amount) external view returns(uint256) {\r\n        IERC20Extented token0 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token0());//DogeX\r\n        IERC20Extented token1 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token1());//bnb\r\n        \r\n        require(token0.decimals() != 0, \"ERR: decimals cannot be zero\");\r\n        \r\n        (uint112 Res0, uint112 Res1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        if(pairSwapped) {\r\n            token0 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token1());//DogeX\r\n            token1 = IERC20Extented(IUniswapV2Pair(uniswapV2Pair).token0());//bnb\r\n            (Res1, Res0,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        }\r\n\r\n        uint res1 = Res1*(10**token0.decimals());\r\n        return((amount*res1)/(Res0*(10**token0.decimals()))); // return amount of token1 needed to buy token0\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool takeFee = true;\r\n\r\n        if (from != owner() && to != owner() && !presale && from != address(this) && to != address(this) && from != bridge && to != bridge) {\r\n            require(tradingOpen);\r\n            if (from != presaleRouter && from != presaleAddress) {\r\n                require(amount <= _maxTxAmount);\r\n            }\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {//buys\r\n\r\n                if (block.timestamp <= _firstBlock.add(_botBlocks) && from != presaleRouter && from != presaleAddress) {\r\n                    bots[to] = true;\r\n                }\r\n                \r\n                uint256 bnbAmount = this.getTokenPriceBNB(amount);\r\n                \r\n                require(bnbAmount >= _minBuyBNB, \"you must buy at least min BNB worth of token\");\r\n                require(balanceOf(to).add(amount) <= _maxWalletAmount, \"wallet balance after transfer must be less than max wallet amount\");\r\n            }\r\n            \r\n            if (!inSwap && from != uniswapV2Pair) { //sells, transfers\r\n                require(!bots[from] && !bots[to]);\r\n                \r\n                uint256 bnbAmount = this.getTokenPriceBNB(amount);\r\n                \r\n                require(bnbAmount >= _minSellBNB, \"you must sell at least the min BNB worth of token\");\r\n\r\n                if (_BNBsellLimitEnabled) {\r\n                    \r\n                    require(bnbAmount <= _maxSellAmountBNB, 'you cannot sell more than the max BNB amount per transaction');\r\n\r\n                }\r\n                \r\n                else if (_priceImpactSellLimitEnabled) {\r\n                    \r\n                    require(amount <= balanceOf(uniswapV2Pair).mul(_priceImpact).div(100)); // price impact limit\r\n\r\n                }\r\n                \r\n                if(to != uniswapV2Pair) {\r\n                    \r\n                    require(balanceOf(to).add(amount) <= _maxWalletAmount, \"wallet balance after transfer must be less than max wallet amount\");\r\n\r\n                }\r\n\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n                if (contractTokenBalance > 0) {\r\n\r\n                    swapAndLiquify(contractTokenBalance);\r\n                \r\n                }\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n                    \r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || presale || from == bridge || to == bridge) {\r\n            takeFee = false;\r\n        }\r\n\r\n        else if (bots[from] || bots[to]) {\r\n            setBotFee();\r\n            takeFee = true;\r\n        }\r\n\r\n        if (presale) {\r\n            require(from == owner() || from == presaleRouter || from == presaleAddress);\r\n        }\r\n        \r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n              address(this),\r\n              tokenAmount,\r\n              0, // slippage is unavoidable\r\n              0, // slippage is unavoidable\r\n              owner(),\r\n              block.timestamp\r\n          );\r\n    }\r\n  \r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 autoLPamount = _liquidityFee.mul(contractTokenBalance).div(_marketingFee.add(_teamFee).add(_communityFee).add(_liquidityFee));\r\n\r\n        // split the contract balance into halves\r\n        uint256 half =  autoLPamount.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        swapTokensForEth(otherHalf); // <- this breaks the BNB -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = ((address(this).balance.sub(initialBalance)).mul(half)).div(otherHalf);\r\n\r\n        // add liquidity to pancakeswap\r\n        addLiquidity(half, newBalance);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _marketingAddress.transfer(amount.mul(_marketingPercent).div(100));\r\n        _teamAddress.transfer(amount.mul(_teamPercent).div(100));\r\n        _communityAddress.transfer(amount.mul(_communityPercent).div(100));\r\n    }\r\n\r\n    function openTrading(uint256 botBlocks) private {\r\n        _firstBlock = block.timestamp;\r\n        _botBlocks = botBlocks;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _marketingAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance > 0) {\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n    }\r\n\r\n    function manualsend() external {\r\n        require(_msgSender() == _marketingAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            sendETHToFee(contractETHBalance);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) { \r\n                removeAllFee();\r\n        }\r\n        _transferStandard(sender, recipient, amount);\r\n        restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 amount) private {\r\n        FeeBreakdown memory fees;\r\n        fees.tMarketing = amount.mul(_marketingFee).div(1000);\r\n        fees.tLiquidity = amount.mul(_liquidityFee).div(1000);\r\n        fees.tTeam = amount.mul(_teamFee).div(1000);\r\n        fees.tCommunity = amount.mul(_communityFee).div(1000);\r\n        fees.tBurn = amount.mul(_burnFee).div(1000);\r\n        \r\n        fees.tAmount = amount.sub(fees.tMarketing).sub(fees.tLiquidity).sub(fees.tTeam).sub(fees.tCommunity).sub(fees.tBurn);\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(fees.tAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(fees.tMarketing.add(fees.tLiquidity).add(fees.tTeam).add(fees.tCommunity));\r\n        _balances[_burnAddress] = _balances[_burnAddress].add(fees.tBurn);\r\n        \r\n        emit Transfer(sender, recipient, fees.tAmount);\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function excludeFromFee(address account) public onlyOwner() {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner() {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function removeBot(address account) external onlyOwner() {\r\n        bots[account] = false;\r\n    }\r\n\r\n    function addBot(address account) external onlyOwner() {\r\n        bots[account] = true;\r\n    }\r\n    \r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        require(maxTxAmount > _tTotal.div(10000), \"Amount must be greater than 0.01% of supply\");\r\n        require(maxTxAmount <= _tTotal, \"Amount must be less than or equal to totalSupply\");\r\n        _maxTxAmount = maxTxAmount;\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 maxWalletAmount) external onlyOwner() {\r\n        require(maxWalletAmount > _tTotal.div(200), \"Amount must be greater than 0.5% of supply\");\r\n        require(maxWalletAmount <= _tTotal, \"Amount must be less than or equal to totalSupply\");\r\n        _maxWalletAmount = maxWalletAmount;\r\n    }\r\n\r\n    function setTaxes(uint256 marketingFee, uint256 liquidityFee, uint256 teamFee, uint256 communityFee, uint256 burnFee) external onlyOwner() {\r\n        uint256 totalFee = marketingFee.add(liquidityFee).add(teamFee).add(communityFee).add(burnFee);\r\n        require(totalFee.div(10) < 50, \"Sum of fees must be less than 50\");\r\n\r\n        _marketingFee = marketingFee;\r\n        _liquidityFee = liquidityFee;\r\n        _teamFee = teamFee;\r\n        _communityFee = communityFee;\r\n        _burnFee = burnFee;\r\n        \r\n        _previousMarketingFee = _marketingFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousTeamFee = _teamFee;\r\n        _previousCommunityFee = _communityFee;\r\n        _previousBurnFee = _burnFee;\r\n        \r\n        uint256 totalBNBfees = _marketingFee.add(_teamFee).add(_communityFee);\r\n        \r\n        _marketingPercent = (_marketingFee.mul(100)).div(totalBNBfees);\r\n        _teamPercent = (_teamFee.mul(100)).div(totalBNBfees);\r\n        _communityPercent = (_communityFee.mul(100)).div(totalBNBfees);\r\n        \r\n        emit FeesUpdated(_marketingFee, _liquidityFee, _teamFee, _communityFee, _burnFee);\r\n    }\r\n\r\n    function setPriceImpact(uint256 priceImpact) external onlyOwner() {\r\n        require(priceImpact <= 100, \"max price impact must be less than or equal to 100\");\r\n        require(priceImpact > 0, \"cant prevent sells, choose value greater than 0\");\r\n        _priceImpact = priceImpact;\r\n        emit PriceImpactUpdated(_priceImpact);\r\n    }\r\n\r\n    function setPresaleRouterAndAddress(address router, address wallet) external onlyOwner() {\r\n        presaleRouter = router;\r\n        presaleAddress = wallet;\r\n        excludeFromFee(presaleRouter);\r\n        excludeFromFee(presaleAddress);\r\n    }\r\n\r\n    function endPresale(uint256 botBlocks) external onlyOwner() {\r\n        require(presale == true, \"presale already ended\");\r\n        presale = false;\r\n        openTrading(botBlocks);\r\n        emit EndedPresale(presale);\r\n    }\r\n\r\n    function updatePairSwapped(bool swapped) external onlyOwner() {\r\n        pairSwapped = swapped;\r\n    }\r\n    \r\n    function updateMinBuySellBNB(uint256 minBuyBNB, uint256 minSellBNB) external onlyOwner() {\r\n        require(minBuyBNB <= 100000000000000000, \"cant make the limit higher than 0.1 BNB\");\r\n        require(minSellBNB <= 100000000000000000, \"cant make the limit higher than 0.1 BNB\");\r\n        _minBuyBNB = minBuyBNB;\r\n        _minSellBNB = minSellBNB;\r\n    }\r\n    \r\n    function updateMaxSellAmountBNB(uint256 maxSellBNB) external onlyOwner() {\r\n        require(maxSellBNB >= 1000000000000000000, \"cant make the limit lower than 1 BNB\");\r\n        _maxSellAmountBNB = maxSellBNB;\r\n    }\r\n    \r\n    function updateCommunityAddress(address payable communityAddress) external onlyOwner() {\r\n        _communityAddress = communityAddress;\r\n    }\r\n    \r\n    function updateMarketingAddress(address payable marketingAddress) external onlyOwner() {\r\n        _marketingAddress = marketingAddress;\r\n    }\r\n    \r\n    function updateTeamAddress(address payable teamAddress) external onlyOwner() {\r\n        _teamAddress = teamAddress;\r\n    }\r\n    \r\n    function enableBNBsellLimit() external onlyOwner() {\r\n        require(_BNBsellLimitEnabled == false, \"already enabled\");\r\n        _BNBsellLimitEnabled = true;\r\n        _priceImpactSellLimitEnabled = false;\r\n    }\r\n    \r\n    function disableBNBsellLimit() external onlyOwner() {\r\n        require(_BNBsellLimitEnabled == true, \"already disabled\");\r\n        _BNBsellLimitEnabled = false;\r\n    }\r\n    \r\n    function enablePriceImpactSellLimit() external onlyOwner() {\r\n        require(_priceImpactSellLimitEnabled == false, \"already enabled\");\r\n        _priceImpactSellLimitEnabled = true;\r\n        _BNBsellLimitEnabled = false;\r\n    }\r\n    \r\n    function disablePriceImpactSellLimit() external onlyOwner() {\r\n        require(_priceImpactSellLimitEnabled == true, \"already disabled\");\r\n        _priceImpactSellLimitEnabled = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591  \r\n    \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\r\n\u2591\u2591                                                                              \u2588\u2588\r\n\u2591\u2591                                                                              \u2588\u2588\r\n\u2591\u2591    \u2588\u2588                                              \t    \tSpade Secured   \u2588\u2588\r\n\u2591\u2591    \u2588\u2588\u2588\u2588                                                                      \u2588\u2588\r\n\u2591\u2591  \u2592\u2592\u2592\u2592\u2588\u2588                                                                      \u2588\u2588\r\n\u2591\u2591  \u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588                                                                    \u2588\u2588\r\n\u2591\u2591  \u2593\u2593\u2592\u2592\u2592\u2592\u2588\u2588                                                                    \u2588\u2588\r\n\u2591\u2591  \u2592\u2592    \u2588\u2588                                                                    \u2588\u2588\r\n\u2591\u2591  \u2593\u2593    \u2593\u2593\u2592\u2592                                                                  \u2588\u2588\r\n\u2591\u2591                                                                              \u2588\u2588\r\n\u2591\u2591    \u2588\u2588\u2592\u2592                            \u2588\u2588\u2588\u2588\u2588\u2588                                    \u2588\u2588\r\n\u2591\u2591  \u2592\u2592\u2588\u2588\u2588\u2588                            \u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592                                  \u2588\u2588\r\n\u2591\u2591  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                        \u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                  \u2588\u2588\r\n\u2591\u2591  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                \u2588\u2588\r\n\u2591\u2591    \u2592\u2592                        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                              \u2588\u2588\r\n\u2591\u2591    \u2591\u2591                      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                            \u2588\u2588\r\n\u2591\u2591                          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                          \u2588\u2588\r\n\u2591\u2591                          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                        \u2588\u2588\r\n\u2591\u2591                        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \u2588\u2588\r\n\u2591\u2591                      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                    \u2588\u2588\r\n\u2591\u2591                    \u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591                  \u2588\u2588\r\n\u2591\u2591                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                  \u2588\u2588\r\n\u2591\u2591                  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                  \u2588\u2588\r\n\u2591\u2591                  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                \u2588\u2588\r\n\u2591\u2591                \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592              \u2588\u2588\r\n\u2591\u2591              \u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              \u2588\u2588\r\n\u2591\u2591              \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              \u2588\u2588\r\n\u2591\u2591              \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              \u2588\u2588\r\n\u2591\u2591              \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              \u2588\u2588\r\n\u2591\u2591              \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              \u2588\u2588\r\n\u2591\u2591                \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593              \u2588\u2588\r\n\u2591\u2591                  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                \u2588\u2588\r\n\u2591\u2591                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592  \u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                  \u2588\u2588\r\n\u2591\u2591                      \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591    \u2588\u2588\u2588\u2588\u2588\u2588      \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591                    \u2588\u2588\r\n\u2591\u2591                                    \u2588\u2588\u2588\u2588\u2588\u2588                                    \u2588\u2588\r\n\u2591\u2591                                  \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                  \u2588\u2588\r\n\u2591\u2591                                \u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                \u2588\u2588\r\n\u2591\u2591                              \u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                              \u2588\u2588\r\n\u2591\u2591                              \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591                        \u2592\u2592    \u2588\u2588\r\n\u2591\u2591                                                                    \u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588  \u2588\u2588\r\n\u2591\u2591                                                                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\r\n\u2591\u2591                                                                      \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\r\n\u2591\u2591                                                                      \u2588\u2588\u2588\u2588    \u2588\u2588\r\n\u2591\u2591                                                                              \u2588\u2588\r\n\u2591\u2591                                                                    \u2591\u2591    \u2591\u2591  \u2588\u2588\r\n\u2591\u2591                                                                    \u2588\u2588        \u2588\u2588\r\n\u2591\u2591                                                                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\r\n\u2591\u2591                                                                      \u2591\u2591  \u2588\u2588  \u2588\u2588\r\n\u2591\u2591                                                                      \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\r\n\u2591\u2591                                                                      \u2592\u2592\u2588\u2588    \u2588\u2588\r\n\u2591\u2591                                                                        \u2591\u2591    \u2588\u2588\r\n\u2591\u2591                                                                              \u2588\u2588\r\n\u2591\u2591 Spadetech.io                                                                 \u2588\u2588\r\n\r\n\r\n\r\n*/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"presale\",\"type\":\"bool\"}],\"name\":\"EndedPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_teamFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_communityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketingPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_teamPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_communityPercent\",\"type\":\"uint256\"}],\"name\":\"PercentsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_priceImpact\",\"type\":\"uint256\"}],\"name\":\"PriceImpactUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BNBsellLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_communityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_priceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_priceImpactSellLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBNBsellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePriceImpactSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBNBsellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enablePriceImpactSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"botBlocks\",\"type\":\"uint256\"}],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setPresaleRouterAndAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpact\",\"type\":\"uint256\"}],\"name\":\"setPriceImpact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"communityAddress\",\"type\":\"address\"}],\"name\":\"updateCommunityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellBNB\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellAmountBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBuyBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSellBNB\",\"type\":\"uint256\"}],\"name\":\"updateMinBuySellBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapped\",\"type\":\"bool\"}],\"name\":\"updatePairSwapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FalconX", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://12239056ce94811b84ad2b0937f1701a3b88f57ae6efaf75f266b7518a1e0016"}