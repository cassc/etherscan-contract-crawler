{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ZapThena.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\r\\n\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Router01.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/LowGasSafeMath.sol\\\";\\r\\nimport \\\"./libraries/Babylonian.sol\\\";\\r\\nimport \\\"./libraries/SafeERC20.sol\\\";\\r\\n\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\ninterface IERC20Extended {\\r\\n    function decimals() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\\r\\ninterface IVault is IERC20 {\\r\\n    function deposit(uint256) external;\\r\\n\\r\\n    function deposit(uint256 amount, address recipient) external returns (uint256);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 amount,\\r\\n        address recipient,\\r\\n        bytes32 referral\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n\\r\\n    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 maxShares,\\r\\n        address recipient,\\r\\n        uint256 maxLoss,\\r\\n        address endRecipient\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function decimals() external view returns (uint256);\\r\\n\\r\\n    // V2\\r\\n    function pricePerShare() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract ZapThena {\\r\\n    using LowGasSafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeERC20 for IVault;\\r\\n\\r\\n    IUniswapRouterSolidly public immutable router;\\r\\n    address public immutable WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    uint256 public constant minimumAmount = 1000;\\r\\n\\r\\n    constructor() {\\r\\n        router = IUniswapRouterSolidly(0x20a304a7d126758dfe6B243D0fc515F83bCA8431);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        assert(msg.sender == WETH);\\r\\n    }\\r\\n\\r\\n    function zapInETH(\\r\\n        address grizzlyVault,\\r\\n        uint256 tokenAmountOutMin,\\r\\n        bytes32 referral\\r\\n    ) external payable {\\r\\n        require(msg.value >= minimumAmount, \\\"Insignificant input amount\\\");\\r\\n\\r\\n        IWETH(WETH).deposit{value: msg.value}();\\r\\n\\r\\n        _swapAndStake(grizzlyVault, tokenAmountOutMin, WETH, referral);\\r\\n    }\\r\\n\\r\\n    function zapIn(\\r\\n        address grizzlyVault,\\r\\n        uint256 tokenAmountOutMin,\\r\\n        address tokenIn,\\r\\n        uint256 tokenInAmount,\\r\\n        bytes32 referral\\r\\n    ) external {\\r\\n        require(tokenInAmount >= minimumAmount, \\\"Insignificant input amount\\\");\\r\\n        require(\\r\\n            IERC20(tokenIn).allowance(msg.sender, address(this)) >= tokenInAmount,\\r\\n            \\\"Input token is not approved\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), tokenInAmount);\\r\\n\\r\\n        _swapAndStake(grizzlyVault, tokenAmountOutMin, tokenIn, referral);\\r\\n    }\\r\\n\\r\\n    function zapOut(address grizzlyVault, uint256 withdrawAmount) external {\\r\\n        (IVault vault, IUniswapV2Pair pair) = _getVaultPair(grizzlyVault);\\r\\n\\r\\n        IERC20(grizzlyVault).safeTransferFrom(msg.sender, address(this), withdrawAmount);\\r\\n        vault.withdraw(withdrawAmount);\\r\\n\\r\\n        if (pair.token0() != WETH && pair.token1() != WETH) {\\r\\n            return _removeLiquidity(address(pair), msg.sender);\\r\\n        }\\r\\n\\r\\n        _removeLiquidity(address(pair), address(this));\\r\\n\\r\\n        address[] memory tokens = new address[](2);\\r\\n        tokens[0] = pair.token0();\\r\\n        tokens[1] = pair.token1();\\r\\n\\r\\n        _returnAssets(tokens);\\r\\n    }\\r\\n\\r\\n    function zapOutAndSwap(\\r\\n        address grizzlyVault,\\r\\n        uint256 withdrawAmount,\\r\\n        address desiredToken,\\r\\n        uint256 desiredTokenOutMin\\r\\n    ) external {\\r\\n        (IVault vault, IUniswapV2Pair pair) = _getVaultPair(grizzlyVault);\\r\\n        address token0 = pair.token0();\\r\\n        address token1 = pair.token1();\\r\\n        require(\\r\\n            token0 == desiredToken || token1 == desiredToken,\\r\\n            \\\"desired token not present in liquidity pair\\\"\\r\\n        );\\r\\n\\r\\n        vault.safeTransferFrom(msg.sender, address(this), withdrawAmount);\\r\\n        vault.withdraw(withdrawAmount);\\r\\n        _removeLiquidity(address(pair), address(this));\\r\\n\\r\\n        address swapToken = token1 == desiredToken ? token0 : token1;\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = swapToken;\\r\\n        path[1] = desiredToken;\\r\\n\\r\\n        _approveTokenIfNeeded(path[0], address(router));\\r\\n        router.swapExactTokensForTokensSimple(\\r\\n            IERC20(swapToken).balanceOf(address(this)),\\r\\n            desiredTokenOutMin,\\r\\n            path[0],\\r\\n            path[1],\\r\\n            pair.stable(),\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        _returnAssets(path);\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity(address pair, address to) private {\\r\\n        IERC20(pair).safeTransfer(pair, IERC20(pair).balanceOf(address(this)));\\r\\n        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pair).burn(to);\\r\\n\\r\\n        require(amount0 >= minimumAmount, \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\");\\r\\n        require(amount1 >= minimumAmount, \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\");\\r\\n    }\\r\\n\\r\\n    function _getVaultPair(address grizzlyVault) private view returns (IVault vault, IUniswapV2Pair pair) {\\r\\n        vault = IVault(grizzlyVault);\\r\\n        pair = IUniswapV2Pair(vault.token());\\r\\n    }\\r\\n\\r\\n    function _swapAndStake(\\r\\n        address grizzlyVault,\\r\\n        uint256 tokenAmountOutMin,\\r\\n        address tokenIn,\\r\\n        bytes32 referral\\r\\n    ) private {\\r\\n        (IVault vault, IUniswapV2Pair pair) = _getVaultPair(grizzlyVault);\\r\\n\\r\\n        (uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\\r\\n        require(reserveA > minimumAmount && reserveB > minimumAmount, \\\"Liquidity pair reserves too low\\\");\\r\\n\\r\\n        bool isInputA = pair.token0() == tokenIn;\\r\\n        require(isInputA || pair.token1() == tokenIn, \\\"Input token not present in liquidity pair\\\");\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = tokenIn;\\r\\n        path[1] = isInputA ? pair.token1() : pair.token0();\\r\\n\\r\\n        uint256 fullInvestment = IERC20(tokenIn).balanceOf(address(this));\\r\\n        uint256 swapAmountIn;\\r\\n        if (isInputA) {\\r\\n            swapAmountIn = _getSwapAmount(pair, fullInvestment, reserveA, reserveB, path[0], path[1]);\\r\\n        } else {\\r\\n            swapAmountIn = _getSwapAmount(pair, fullInvestment, reserveB, reserveA, path[0], path[1]);\\r\\n        }\\r\\n\\r\\n        _approveTokenIfNeeded(path[0], address(router));\\r\\n        uint256[] memory swapedAmounts = router.swapExactTokensForTokensSimple(\\r\\n            swapAmountIn,\\r\\n            tokenAmountOutMin,\\r\\n            path[0],\\r\\n            path[1],\\r\\n            pair.stable(),\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        _approveTokenIfNeeded(path[1], address(router));\\r\\n        (, , uint256 amountLiquidity) = router.addLiquidity(\\r\\n            path[0],\\r\\n            path[1],\\r\\n            pair.stable(),\\r\\n            fullInvestment.sub(swapedAmounts[0]),\\r\\n            swapedAmounts[1],\\r\\n            1,\\r\\n            1,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        _approveTokenIfNeeded(address(pair), address(vault));\\r\\n        vault.deposit(amountLiquidity, address(this), referral);\\r\\n\\r\\n        vault.safeTransfer(msg.sender, vault.balanceOf(address(this)));\\r\\n        _returnAssets(path);\\r\\n    }\\r\\n\\r\\n    function _returnAssets(address[] memory tokens) private {\\r\\n        uint256 balance;\\r\\n        for (uint256 i; i < tokens.length; i++) {\\r\\n            balance = IERC20(tokens[i]).balanceOf(address(this));\\r\\n            if (balance > 0) {\\r\\n                if (tokens[i] == WETH) {\\r\\n                    IWETH(WETH).withdraw(balance);\\r\\n                    (bool success, ) = msg.sender.call{value: balance}(new bytes(0));\\r\\n                    require(success, \\\"ETH transfer failed\\\");\\r\\n                } else {\\r\\n                    IERC20(tokens[i]).safeTransfer(msg.sender, balance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getSwapAmount(\\r\\n        IUniswapV2Pair pair,\\r\\n        uint256 investmentA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB,\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) private view returns (uint256 swapAmount) {\\r\\n        uint256 halfInvestment = investmentA / 2;\\r\\n\\r\\n        if (pair.stable()) {\\r\\n            swapAmount = _getStableSwap(pair, investmentA, halfInvestment, tokenA, tokenB);\\r\\n        } else {\\r\\n            uint256 nominator = pair.getAmountOut(halfInvestment, tokenA);\\r\\n            uint256 denominator = (halfInvestment * reserveB.sub(nominator)) / reserveA.add(halfInvestment);\\r\\n            swapAmount = investmentA.sub(\\r\\n                Babylonian.sqrt((halfInvestment * halfInvestment * nominator) / denominator)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getStableSwap(\\r\\n        IUniswapV2Pair pair,\\r\\n        uint256 investmentA,\\r\\n        uint256 halfInvestment,\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) private view returns (uint256 swapAmount) {\\r\\n        uint out = pair.getAmountOut(halfInvestment, tokenA);\\r\\n        (uint amountA, uint amountB, ) = router.quoteAddLiquidity(\\r\\n            tokenA,\\r\\n            tokenB,\\r\\n            pair.stable(),\\r\\n            halfInvestment,\\r\\n            out\\r\\n        );\\r\\n\\r\\n        amountA = (amountA * 1e18) / 10**IERC20Extended(tokenA).decimals();\\r\\n        amountB = (amountB * 1e18) / 10**IERC20Extended(tokenB).decimals();\\r\\n        out = (out * 1e18) / 10**IERC20Extended(tokenB).decimals();\\r\\n        halfInvestment = (halfInvestment * 1e18) / 10**IERC20Extended(tokenA).decimals();\\r\\n\\r\\n        uint ratio = (((out * 1e18) / halfInvestment) * amountA) / amountB;\\r\\n\\r\\n        return (investmentA * 1e18) / (ratio + 1e18);\\r\\n    }\\r\\n\\r\\n    function estimateSwap(\\r\\n        address grizzlyVault,\\r\\n        address tokenIn,\\r\\n        uint256 fullInvestmentIn\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 swapAmountIn,\\r\\n            uint256 swapAmountOut,\\r\\n            address swapTokenOut\\r\\n        )\\r\\n    {\\r\\n        checkWETH();\\r\\n        (, IUniswapV2Pair pair) = _getVaultPair(grizzlyVault);\\r\\n\\r\\n        bool isInputA = pair.token0() == tokenIn;\\r\\n        require(isInputA || pair.token1() == tokenIn, \\\"Input token not present in liquidity pair\\\");\\r\\n\\r\\n        (uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\\r\\n        (reserveA, reserveB) = isInputA ? (reserveA, reserveB) : (reserveB, reserveA);\\r\\n\\r\\n        swapTokenOut = isInputA ? pair.token1() : pair.token0();\\r\\n        swapAmountIn = _getSwapAmount(pair, fullInvestmentIn, reserveA, reserveB, tokenIn, swapTokenOut);\\r\\n        swapAmountOut = pair.getAmountOut(swapAmountIn, tokenIn);\\r\\n    }\\r\\n\\r\\n    function checkWETH() public view returns (bool isValid) {\\r\\n        isValid = WETH == router.weth();\\r\\n        require(isValid, \\\"WETH address not matching Router.weth()\\\");\\r\\n    }\\r\\n\\r\\n    function _approveTokenIfNeeded(address token, address spender) private {\\r\\n        if (IERC20(token).allowance(address(this), spender) == 0) {\\r\\n            IERC20(token).safeApprove(spender, type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint value,\\r\\n        uint deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function stable() external view returns (bool);\\r\\n\\r\\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\ninterface IUniswapRouterSolidly {\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint amountA,\\r\\n            uint amountB,\\r\\n            uint liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint amountToken,\\r\\n            uint amountETH,\\r\\n            uint liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSimple(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address tokenFrom,\\r\\n        address tokenTo,\\r\\n        bool stable,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint amountIn,\\r\\n        address tokenIn,\\r\\n        address tokenOut\\r\\n    ) external view returns (uint amount, bool stable);\\r\\n\\r\\n    function quoteAddLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint amountA,\\r\\n            uint amountB,\\r\\n            uint liquidity\\r\\n        );\\r\\n\\r\\n    function quoteLiquidity(\\r\\n        uint amountA,\\r\\n        uint reserveA,\\r\\n        uint reserveB\\r\\n    ) external view returns (uint amountB);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function weth() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.0;\\r\\n\\r\\n/// @title Optimized overflow and underflow safe math operations\\r\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\r\\nlibrary LowGasSafeMath {\\r\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\r\\n    /// @param x The augend\\r\\n    /// @param y The addend\\r\\n    /// @return z The sum of x and y\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x - y, reverts if underflows\\r\\n    /// @param x The minuend\\r\\n    /// @param y The subtrahend\\r\\n    /// @return z The difference of x and y\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x * y, reverts if overflows\\r\\n    /// @param x The multiplicand\\r\\n    /// @param y The multiplier\\r\\n    /// @return z The product of x and y\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(x == 0 || (z = x * y) / x == y);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x + y, reverts if overflows or underflows\\r\\n    /// @param x The augend\\r\\n    /// @param y The addend\\r\\n    /// @return z The sum of x and y\\r\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        require((z = x + y) >= x == (y >= 0));\\r\\n    }\\r\\n\\r\\n    /// @notice Returns x - y, reverts if overflows or underflows\\r\\n    /// @param x The minuend\\r\\n    /// @param y The subtrahend\\r\\n    /// @return z The difference of x and y\\r\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n        require((z = x - y) <= x == (y >= 0));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Babylonian.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.0;\\r\\n\\r\\n// computes square roots using the babylonian method\\r\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\r\\nlibrary Babylonian {\\r\\n    // credit for this implementation goes to\\r\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\r\\n        // however that code costs significantly more gas\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) {\\r\\n            xx >>= 128;\\r\\n            r <<= 64;\\r\\n        }\\r\\n        if (xx >= 0x10000000000000000) {\\r\\n            xx >>= 64;\\r\\n            r <<= 32;\\r\\n        }\\r\\n        if (xx >= 0x100000000) {\\r\\n            xx >>= 32;\\r\\n            r <<= 16;\\r\\n        }\\r\\n        if (xx >= 0x10000) {\\r\\n            xx >>= 16;\\r\\n            r <<= 8;\\r\\n        }\\r\\n        if (xx >= 0x100) {\\r\\n            xx >>= 8;\\r\\n            r <<= 4;\\r\\n        }\\r\\n        if (xx >= 0x10) {\\r\\n            xx >>= 4;\\r\\n            r <<= 2;\\r\\n        }\\r\\n        if (xx >= 0x8) {\\r\\n            r <<= 1;\\r\\n        }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return (r < r1 ? r : r1);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\r\\n            value,\\r\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) private pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grizzlyVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fullInvestmentIn\",\"type\":\"uint256\"}],\"name\":\"estimateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapTokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouterSolidly\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grizzlyVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"referral\",\"type\":\"bytes32\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grizzlyVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"referral\",\"type\":\"bytes32\"}],\"name\":\"zapInETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grizzlyVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grizzlyVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"desiredToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"desiredTokenOutMin\",\"type\":\"uint256\"}],\"name\":\"zapOutAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZapThena", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}