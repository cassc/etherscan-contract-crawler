{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Governance/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Governance contract\\n * @author dlabs.hu\\n * @dev This contract is for handling governance and configuration changes\\n */\\n\\nimport \\\"../Interfaces/IVault.sol\\\";\\nimport \\\"../Interfaces/IAffiliate.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ncontract Governance {\\n\\nmapping(address => uint256) public curator_proportions;                             // Proportions of the curators\\naddress[] public governedContracts;                                                 // The governed addresses\\n\\n/* ConfManager system mappings and vars */\\nmapping(string => config_struct) public Configuration;\\nmapping(string => config_struct) public invoteConfiguration;\\nmapping(uint256 => string) public ID_to_name;\\n\\nmapping(address => uint256) public conf_curator_timer;                           // Last action time by curator for locking\\nmapping(uint256 => uint256) public conf_votes;                                   // ID to see if threshold is passed\\nmapping(uint256 => uint256) public conf_time_limit;                              // Actions needs to be triggered in time\\nuint256 public conf_counter = 6;                                                 // Starting from 6+1, 0-6 are reserved for global config\\n\\nstruct config_struct {\\n  string name;\\n  bool Running;\\n  address govaddr;\\n  address[] managers;\\n  bool[] boolslot;\\n  address[] address_slot;\\n  uint256[] uint256_slot;\\n  bytes32[] bytes32_slot;\\n}\\n\\nmapping(uint256 => bool) public triggered;                                          // If true, it was triggered before and will be blocked\\nstring constant Core = \\\"Main\\\";                                                               // Core string for consistency\\n\\n/* Action manager system mappings */\\nmapping(address => uint256) public action_curator_timer;                            // Last action time by curator for locking\\nmapping(uint256 => uint256) public action_id_to_vote;                               // ID to see if threshold is passed\\nmapping(uint256 => uint256) public action_time_limit;                               // Actions needs to be triggered in time\\nmapping(uint256 => address) public action_can_be_triggered_by;                      // Address which can trigger the action after threshold is passed\\n\\n/* This is used to store calldata and make it takeable from external contracts.\\n@dev be careful with this, low level calls can be tricky. */\\nmapping(uint256 => bytes) public action_id_to_calldata;                             // Mapping actions to relevant calldata.\\n\\n// Action threshold and time limit, so the community can react to changes\\nuint256 public action_threshold;                                                    // This threshold needs to be passed for action to happen\\nuint256 public vote_time_threshold;                                                 // You can only vote once per timer - this is for security and gas optimization\\nuint256 public vote_conf_time_threshold;                                            // Config\\n\\nevent Transfer_Proportion(uint256 beneficiary_proportion);\\nevent Action_Proposed(uint256 id);\\nevent Action_Support(uint256 id);\\nevent Action_Trigger(uint256 id);\\nevent Config_Proposed(string name);\\nevent Config_Supported(string name);\\n\\nmodifier onlyCurators(){\\n  require(curator_proportions[msg.sender] > 0, \\\"Not a curator\\\");\\n  _;\\n}\\n\\n// The Governance contract needs to be deployed first, before all\\n// Max proportions are 100, shared among curators\\n constructor(\\n    address[] memory _curators,\\n    uint256[] memory _curator_proportions,\\n    address[] memory _managers\\n) {\\n    action_threshold = 30;                                        // Threshold -> from this, configs and actions can be triggered\\n    vote_time_threshold = 600;                                    // Onc conf change per 10 mins, in v2 we can make it longer\\n    vote_conf_time_threshold = 0;\\n\\n    require(_curators.length == _curator_proportions.length, \\\"Curators and proportions length mismatch\\\");\\n\\n    uint totalProp;\\n    for (uint256 i = 0; i < _curators.length; i++) {\\n        curator_proportions[_curators[i]] = _curator_proportions[i];\\n        totalProp += _curator_proportions[i];\\n    }\\n\\n    require(totalProp == 100, \\\"Total proportions must be 100\\\");\\n\\n    ID_to_name[0] = Core;                                         // Core config init\\n    core_govAddr_conf(address(this));                             // Global governance address\\n    core_emergency_conf();                                        // Emergency stop value is enforced to be Running==true from start.\\n    core_managers_conf(_managers);\\n}\\n\\n// Core functions, only used during init\\nfunction core_govAddr_conf(address _address) private {\\n    Configuration[Core].name = Core;\\n    Configuration[Core].govaddr = _address;}\\n\\nfunction core_emergency_conf() private {\\n    Configuration[Core].Running = true;}\\n\\nfunction core_managers_conf(address[] memory _addresses) private {\\n    Configuration[Core].managers = _addresses;\\n    address[] storage addGovAddr = Configuration[Core].managers; // Constructor memory -> Storage\\n    addGovAddr.push(address(this));\\n    Configuration[Core].managers = addGovAddr;\\n    }\\n\\n// Only the addresses on the manager list are allowed to execute\\nfunction onlyManagers() internal view {\\n      bool ok;\\n          address [] memory tempman =  read_core_managers();\\n          for (uint i=0; i < tempman.length; i++) {\\n              if (tempman[i] == msg.sender) {ok = true;}\\n          }\\n          if (ok == true){} else {revert(\\\"0\\\");} //Not manager*/\\n}\\n\\nbool public deployed = false;\\nfunction setToDeployed() public returns (bool) {\\n  onlyManagers();\\n  deployed = true;\\n  return deployed;\\n}\\n\\nfunction ActivateDeployedMosaic(\\n    address _userProfile,\\n    address _affiliate,\\n    address _fees,\\n    address _register,\\n    address _poolFactory,\\n    address _feeTo,\\n    address _swapsContract,\\n    address _oracle,\\n    address _deposit,\\n    address _burner,\\n    address _booster\\n) public {\\n    onlyManagers();\\n    require(deployed == false, \\\"It is done.\\\");\\n\\n        Configuration[Core].address_slot.push(msg.sender); //0 owner\\n        Configuration[Core].address_slot.push(_userProfile); //1\\n        Configuration[Core].address_slot.push(_affiliate); //2\\n        Configuration[Core].address_slot.push(_fees); //3\\n        Configuration[Core].address_slot.push(_register); //4\\n        Configuration[Core].address_slot.push(_poolFactory); //5\\n        Configuration[Core].address_slot.push(_feeTo); //6 - duplicate? fees and feeToo are same?\\n        Configuration[Core].address_slot.push(_swapsContract); //7\\n        Configuration[Core].address_slot.push(_oracle); //8\\n        Configuration[Core].address_slot.push(_deposit); //9\\n        Configuration[Core].address_slot.push(_burner); //10\\n        Configuration[Core].address_slot.push(_booster); //11\\n\\n        IAffiliate(_affiliate).selfManageMe();\\n}\\n\\n/* Transfer proportion */\\nfunction transfer_proportion(address _address, uint256 _amount) external returns (uint256) {\\n    require(curator_proportions[msg.sender] >= _amount, \\\"Not enough proportions\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet, your votes need to conclude\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    curator_proportions[msg.sender] = curator_proportions[msg.sender] - _amount;\\n    curator_proportions[_address] = curator_proportions[_address] + _amount;\\n    emit Transfer_Proportion(curator_proportions[_address]);\\n    return curator_proportions[_address];\\n  }\\n\\n/* Configuration manager */\\n\\n// Add or update config.\\nfunction update_config(string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n  ) internal returns (string memory){\\n  Configuration[_name].name = _name;\\n  Configuration[_name].Running = _Running;\\n  Configuration[_name].govaddr = _govaddr;\\n  Configuration[_name].managers = _managers;\\n  Configuration[_name].boolslot = _boolslot;\\n  Configuration[_name].address_slot = _address_slot;\\n  Configuration[_name].uint256_slot = _uint256_slot;\\n  Configuration[_name].bytes32_slot = _bytes32_slot;\\n  return _name;\\n}\\n\\n// Create temp configuration\\nfunction votein_config(string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n) internal returns (string memory){\\n  invoteConfiguration[_name].name = _name;\\n  invoteConfiguration[_name].Running = _Running;\\n  invoteConfiguration[_name].govaddr = _govaddr;\\n  invoteConfiguration[_name].managers = _managers;\\n  invoteConfiguration[_name].boolslot = _boolslot;\\n  invoteConfiguration[_name].address_slot = _address_slot;\\n  invoteConfiguration[_name].uint256_slot = _uint256_slot;\\n  invoteConfiguration[_name].bytes32_slot = _bytes32_slot;\\n  return _name;\\n}\\n\\n// Propose config\\nfunction propose_config(\\n  string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n    conf_counter = conf_counter + 1;\\n    require(conf_time_limit[conf_counter] == 0, \\\"In progress\\\");\\n    conf_curator_timer[msg.sender] = block.timestamp;\\n    conf_time_limit[conf_counter] = block.timestamp + vote_time_threshold;\\n    conf_votes[conf_counter] = curator_proportions[msg.sender];\\n    ID_to_name[conf_counter] = _name;\\n    triggered[conf_counter] = false; // It keep rising, so can't be overwritten from true in past value\\n    votein_config(\\n        _name,\\n        _Running,\\n        _govaddr,\\n        _managers,\\n        _boolslot,\\n        _address_slot,\\n        _uint256_slot,\\n        _bytes32_slot\\n    );\\n    emit Config_Proposed(_name);\\n    return conf_counter;\\n  }\\n\\n// Use this with caution!\\nfunction propose_core_change(address _govaddr, bool _Running, address[] memory _managers, address[] memory _owners) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n    require(conf_time_limit[conf_counter] == 0, \\\"In progress\\\");\\n    conf_curator_timer[msg.sender] = block.timestamp;\\n    conf_time_limit[conf_counter] = block.timestamp + vote_time_threshold;\\n    conf_votes[conf_counter] = curator_proportions[msg.sender];\\n    ID_to_name[conf_counter] = Core;\\n    triggered[conf_counter] = false; // It keep rising, so can't be overwritten from true in past value\\n\\n    invoteConfiguration[Core].name = Core;\\n    invoteConfiguration[Core].govaddr = _govaddr;\\n    invoteConfiguration[Core].Running = _Running;\\n    invoteConfiguration[Core].managers = _managers;\\n    invoteConfiguration[Core].address_slot = _owners;\\n    return conf_counter;\\n}\\n\\n// ID and name are requested together for supporting a config because of awareness.\\nfunction support_config_proposal(uint256 _confCount, string memory _name) external returns (string memory) {\\n  require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n  require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n  require(conf_time_limit[_confCount] > block.timestamp, \\\"Timed out\\\");\\n  require(conf_time_limit[_confCount] != 0, \\\"Not started\\\");\\n  require(keccak256(abi.encodePacked(ID_to_name[_confCount])) == keccak256(abi.encodePacked(_name)), \\\"You are not aware, Neo.\\\");\\n  conf_curator_timer[msg.sender] = block.timestamp;\\n  conf_votes[_confCount] = conf_votes[_confCount] + curator_proportions[msg.sender];\\n  if (conf_votes[_confCount] >= action_threshold && triggered[_confCount] == false) {\\n    triggered[_confCount] = true;\\n    string memory name = ID_to_name[_confCount];\\n    update_config(\\n    invoteConfiguration[name].name,\\n    invoteConfiguration[name].Running,\\n    invoteConfiguration[name].govaddr,\\n    invoteConfiguration[name].managers,\\n    invoteConfiguration[name].boolslot,\\n    invoteConfiguration[name].address_slot,\\n    invoteConfiguration[name].uint256_slot,\\n    invoteConfiguration[name].bytes32_slot\\n    );\\n\\n    delete invoteConfiguration[name].name;\\n    delete invoteConfiguration[name].Running;\\n    delete invoteConfiguration[name].govaddr;\\n    delete invoteConfiguration[name].managers;\\n    delete invoteConfiguration[name].boolslot;\\n    delete invoteConfiguration[name].address_slot;\\n    delete invoteConfiguration[name].uint256_slot;\\n    delete invoteConfiguration[name].bytes32_slot;\\n\\n    conf_votes[_confCount] = 0;\\n  }\\n  emit Config_Supported(_name);\\n  return Configuration[_name].name = _name;\\n}\\n\\n/* Read configurations */\\n\\nfunction read_core_Running() public view returns (bool) {return Configuration[Core].Running;}\\nfunction read_core_govAddr() public view returns (address) {return Configuration[Core].govaddr;}\\nfunction read_core_managers() public view returns (address[] memory) {return Configuration[Core].managers;}\\nfunction read_core_owners() public view returns (address[] memory) {return Configuration[Core].address_slot;}\\n\\nfunction read_config_Main_addressN(uint256 _n) public view returns (address) {\\n  return Configuration[\\\"Main\\\"].address_slot[_n];\\n}\\n\\n// Can't read full because of stack too deep limit\\nfunction read_config_core(string memory _name) public view returns (\\n  string memory,\\n  bool,\\n  address,\\n  address[] memory){\\n  return (\\n  Configuration[_name].name,\\n  Configuration[_name].Running,\\n  Configuration[_name].govaddr,\\n  Configuration[_name].managers);}\\nfunction read_config_name(string memory _name) public view returns (string memory) {return Configuration[_name].name;}\\nfunction read_config_emergencyStatus(string memory _name) public view returns (bool) {return Configuration[_name].Running;}\\nfunction read_config_governAddress(string memory _name) public view returns (address) {return Configuration[_name].govaddr;}\\nfunction read_config_Managers(string memory _name) public view returns (address[] memory) {return Configuration[_name].managers;}\\n\\nfunction read_config_bool_slot(string memory _name) public view returns (bool[] memory) {return Configuration[_name].boolslot;}\\nfunction read_config_address_slot(string memory _name) public view returns (address[] memory) {return Configuration[_name].address_slot;}\\nfunction read_config_uint256_slot(string memory _name) public view returns (uint256[] memory) {return Configuration[_name].uint256_slot;}\\nfunction read_config_bytes32_slot(string memory _name) public view returns (bytes32[] memory) {return Configuration[_name].bytes32_slot;}\\n\\nfunction read_config_Managers_batched(string memory _name, uint256[] memory _ids) public view returns (address[] memory) {\\n    address[] memory result = new address[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].managers[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_bool_slot_batched(string memory _name, uint256[] memory _ids) public view returns (bool[] memory) {\\n    bool[] memory result = new bool[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].boolslot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_address_slot_batched(string memory _name, uint256[] memory _ids) public view returns (address[] memory) {\\n    address[] memory result = new address[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].address_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_uint256_slot_batched(string memory _name, uint256[] memory _ids) public view returns (uint256[] memory) {\\n    uint256[] memory result = new uint256[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].uint256_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_bytes32_slot_batched(string memory _name, uint256[] memory _ids) public view returns (bytes32[] memory) {\\n    bytes32[] memory result = new bytes32[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].bytes32_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\n\\n// Read invote configuration\\n// Can't read full because of stack too deep limit\\nfunction read_invoteConfig_core(string calldata _name) public view returns (\\n  string memory,\\n  bool,\\n  address,\\n  address[] memory){\\n  return (\\n  invoteConfiguration[_name].name,\\n  invoteConfiguration[_name].Running,\\n  invoteConfiguration[_name].govaddr,\\n  invoteConfiguration[_name].managers);}\\nfunction read_invoteConfig_name(string memory _name) public view returns (string memory) {return invoteConfiguration[_name].name;}\\nfunction read_invoteConfig_emergencyStatus(string memory _name) public view returns (bool) {return invoteConfiguration[_name].Running;}\\nfunction read_invoteConfig_governAddress(string memory _name) public view returns (address) {return invoteConfiguration[_name].govaddr;}\\nfunction read_invoteConfig_Managers(string memory _name) public view returns (address[] memory) {return invoteConfiguration[_name].managers;}\\nfunction read_invoteConfig_boolslot(string memory _name) public view returns (bool[] memory) {return invoteConfiguration[_name].boolslot;}\\nfunction read_invoteConfig_address_slot(string memory _name) public view returns (address[] memory) {return invoteConfiguration[_name].address_slot;}\\nfunction read_invoteConfig_uint256_slot(string memory _name) public view returns (uint256[] memory) {return invoteConfiguration[_name].uint256_slot;}\\nfunction read_invoteConfig_bytes32_slot(string memory _name) public view returns (bytes32[] memory) {return invoteConfiguration[_name].bytes32_slot;}\\n\\n\\n/* Action manager system */\\n\\n// Propose an action, regardless of which contract/address it resides in\\nfunction propose_action(uint256 _id, address _trigger_address, bytes memory _calldata) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(action_id_to_calldata[_id].length == 0, \\\"Calldata already set\\\");\\n    require(action_time_limit[_id] == 0, \\\"Create a new one\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    action_time_limit[_id] = block.timestamp + vote_time_threshold;\\n    action_can_be_triggered_by[_id] = _trigger_address;\\n    action_id_to_vote[_id] = curator_proportions[msg.sender];\\n    action_id_to_calldata[_id] = _calldata;\\n    triggered[_id] = false;\\n    emit Action_Proposed(_id);\\n    return _id;\\n  }\\n\\n// Support an already submitted action\\nfunction support_actions(uint256 _id) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet\\\");\\n    require(action_time_limit[_id] > block.timestamp, \\\"Action timed out\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    action_id_to_vote[_id] = action_id_to_vote[_id] + curator_proportions[msg.sender];\\n    emit Action_Support(_id);\\n    return _id;\\n  }\\n\\n// Trigger action by allowed smart contract address\\n// Only returns calldata, does not guarantee execution success! Triggerer is responsible, choose wisely.\\nfunction trigger_action(uint256 _id) external returns (bytes memory) {\\n    require(action_id_to_vote[_id] >= action_threshold, \\\"Threshold not passed\\\");\\n    require(action_time_limit[_id] > block.timestamp, \\\"Action timed out\\\");\\n    require(action_can_be_triggered_by[_id] == msg.sender, \\\"You are not the triggerer\\\");\\n    require(triggered[_id] == false, \\\"Already triggered\\\");\\n    triggered[_id] = true;\\n    action_id_to_vote[_id] = 0;\\n    emit Action_Trigger(_id);\\n    return action_id_to_calldata[_id];\\n}\\n\\n/* Pure function for generating signatures */\\nfunction generator(string memory _func) public pure returns (bytes memory) {\\n        return abi.encodeWithSignature(_func);\\n    }\\n\\n/* Execution and mass config updates */\\n\\n/* Update contracts address list */\\nfunction update_All(address [] memory _addresses) external onlyCurators returns (address [] memory) {\\n  governedContracts = _addresses;\\n  return governedContracts;\\n}\\n\\n/* Update all contracts from address list */\\nfunction selfManageMe_All() external onlyCurators {\\n  for (uint256 i = 0; i < governedContracts.length; i++) {\\n    _execute_Manage(governedContracts[i]);\\n  }\\n}\\n\\n/* Execute external contract call: selfManageMe() */\\nfunction execute_Manage(address _contractA) external onlyCurators {\\n    _execute_Manage(_contractA);\\n}\\n\\nfunction _execute_Manage(address _contractA) internal {\\n    require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n    IGoverned(_contractA).selfManageMe();\\n}\\n\\n/* Execute external contract call: selfManageMe() */\\nfunction execute_batch_Manage(address[] calldata _contracts) external onlyCurators {\\n  for (uint i; i < _contracts.length; i++) {\\n    _execute_Manage(_contracts[i]);\\n  }\\n}\\n\\n/* Execute external contract calls with any string */\\nfunction execute_ManageBytes(address _contractA, string calldata _call, bytes calldata _data) external onlyCurators {\\n  _execute_ManageBytes(_contractA, _call, _data);\\n}\\n\\nfunction execute_batch_ManageBytes(address[] calldata _contracts, string[] calldata _calls, bytes[] calldata _datas) external onlyCurators {\\n  require(_contracts.length == _calls.length, \\\"Governance: _conracts and _calls length does not match\\\");\\n  require(_calls.length == _datas.length, \\\"Governance: _calls and _datas length does not match\\\");\\n  for (uint i; i < _contracts.length; i++) {\\n    _execute_ManageBytes(_contracts[i], _calls[i], _datas[i]);\\n  }\\n}\\n\\nfunction _execute_ManageBytes(address _contractA, string calldata _call, bytes calldata _data) internal {\\n  require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n  require(bytes(_call).length == 0 || bytes(_call).length >=3, \\\"provide a valid function specification\\\");\\n\\n  for (uint256 i = 0; i < bytes(_call).length; i++) {\\n    require(bytes(_call)[i] != 0x20, \\\"No spaces in fun please\\\");\\n  }\\n\\n  bytes4 signature;\\n  if (bytes(_call).length != 0) {\\n      signature = (bytes4(keccak256(bytes(_call))));\\n  } else {\\n      signature = \\\"\\\";\\n  }\\n\\n  (bool success, bytes memory retData) = _contractA.call(abi.encodePacked(signature, _data));\\n  _evaluateCallReturn(success, retData);\\n}\\n\\n/* Execute external contract calls with address array */\\nfunction execute_ManageList(address _contractA, string calldata _funcName, address[] calldata address_array) external onlyCurators {\\n  require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n  (bool success, bytes memory retData) = _contractA.call(abi.encodeWithSignature(_funcName, address_array));\\n  _evaluateCallReturn(success, retData);\\n}\\n\\n/* Update Vault values */\\nfunction execute_Vault_update(address _vaultAddress) external onlyCurators {\\n  IVault(_vaultAddress).selfManageMe();\\n}\\n\\nfunction _evaluateCallReturn(bool success, bytes memory retData) internal pure {\\n    if (!success) {\\n      if (retData.length >= 68) {\\n          bytes memory reason = new bytes(retData.length - 68);\\n          for (uint i = 0; i < reason.length; i++) {\\n              reason[i] = retData[i + 68];\\n          }\\n          revert(string(reason));\\n      } else revert(\\\"Governance: FAILX\\\");\\n  }\\n}\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Governance/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Governed base contract\\n * @author dlabs.hu\\n * @dev This contract is base for contracts governed by Governance\\n */\\n\\nimport \\\"./Governance.sol\\\";\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\nabstract contract Governed is IGoverned {\\n    GovernanceState internal governanceState;\\n\\n    constructor() {\\n      governanceState.running = true;\\n      governanceState.governanceAddress = address(this);\\n    }\\n\\n    function getGovernanceState() public view returns (GovernanceState memory govState) {\\n      return governanceState;\\n    }\\n\\n    // Modifier responsible for checking if emergency stop was triggered, default is Running == true\\n    modifier Live {\\n        LiveFun();\\n        _;\\n    }\\n\\n    modifier notLive {\\n        notLiveFun();\\n        _;\\n    }\\n\\n\\n    error Governed__EmergencyStopped();\\n    function LiveFun() internal virtual view {\\n        if (!governanceState.running) revert Governed__EmergencyStopped();\\n    }\\n\\n    error Governed__NotStopped();\\n    function notLiveFun() internal virtual view {\\n        if (governanceState.running) revert Governed__NotStopped();\\n    }\\n\\n    modifier onlyManagers() {\\n        onlyManagersFun();\\n        _;\\n    }\\n\\n    error Governed__NotManager(address caller);\\n    function onlyManagersFun() internal virtual view {\\n        if (!isManagerFun(msg.sender)) revert Governed__NotManager(msg.sender);\\n    }\\n\\n\\n    function isManagerFun(address a) internal virtual view returns (bool) {\\n        if (a == governanceState.governanceAddress) {\\n            return true;\\n        }\\n        for (uint i=0; i < governanceState.managers.length; i++) {\\n            if (governanceState.managers[i] == a) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function selfManageMe() external virtual {\\n        onlyManagersFun();\\n        LiveFun();\\n        _selfManageMeBefore();\\n        address governAddress = governanceState.governanceAddress;\\n        bool nextRunning = IGovernance(governAddress).read_core_Running();\\n        if (governanceState.running != nextRunning) _onBeforeEmergencyChange(nextRunning);\\n        governanceState.running = nextRunning;\\n        governanceState.managers = IGovernance(governAddress).read_core_managers();               // List of managers\\n        governanceState.governanceAddress = IGovernance(governAddress).read_core_govAddr();\\n        _selfManageMeAfter();\\n    }\\n\\n    function _selfManageMeBefore() internal virtual;\\n    function _selfManageMeAfter() internal virtual;\\n    function _onBeforeEmergencyChange(bool nextRunning) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/helpers/IERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IAffiliate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Interfaces/IUserProfile.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IAffiliate is IGoverned {\\n    struct AffiliateLevel {\\n        uint8 rank;\\n        uint8 commissionLevels; // eligibility for how many levels affiliate comission\\n        uint16 referralBuyFeeDiscount; // buy fee disccount for the referrals refistering for the user - 10000 = 100%\\n        uint16 referralCountThreshold; // minimum amount of direct referrals needed for level\\n        uint16 stakingBonus;\\n        uint16 conversionRatio;\\n        uint32 claimLimit; // max comission per month claimable - in usd value, not xe18!\\n        uint256 kdxStakeThreshold; // minimum amount of kdx stake needed\\n        uint256 purchaseThreshold; // minimum amount of self basket purchase needed\\n        uint256 referralPurchaseThreshold; // minimum amount of referral basket purchase needed\\n        uint256 traderPurchaseThreshold; // minimum amount of user basket purchase (for traders) needed\\n\\n        string rankName;\\n    }\\n\\n    struct AffiliateUserData {\\n        uint32 affiliateRevision;\\n        uint32 activeReferralCount;\\n        uint256 userPurchase;\\n        uint256 referralPurchase;\\n        uint256 traderPurchase;\\n        uint256 kdxStake;\\n    }\\n\\n    struct AffiliateConfig {\\n        uint16 level1RewardShare; // 0..10000. 6000 -> 60% of affiliate rewards go to level 1, 40% to level2\\n        uint240 activeReferralPurchaseThreshold; // the min amount of (usdt) purchase in wei to consider a referral active\\n    }\\n\\n    function getCommissionLevelsForRanks(uint8 rank, uint8 rank2) external view returns (uint8 commissionLevels, uint8 commissionLevels2);\\n\\n    function getLevelsAndConversionAndClaimLimitForRank(uint8 rank) external view returns (uint8 commissionLevels, uint16 conversionRatio, uint32 claimLimit);\\n\\n    function getConfig() external view returns (AffiliateConfig memory config);\\n\\n    // get the number of affiliate levels\\n    function getLevelCount() external view returns (uint256 count);\\n\\n    function getLevelDetails(uint256 _idx) external view returns (AffiliateLevel memory level);\\n\\n    function getAllLevelDetails() external view returns (AffiliateLevel[] memory levels);\\n\\n    function getAffiliateUserData(address user) external view returns (AffiliateUserData memory data);\\n\\n    function getUserPurchaseAmount(address user) external view returns (uint256 amount);\\n\\n    function getReferralPurchaseAmount(address user) external view returns (uint256 amount);\\n\\n    function userStakeChanged(address user, address referredBy, uint256 kdxAmount) external;\\n\\n    function registerUserPurchase(address user, address referredBy, address trader, uint256 usdAmount) external;\\n    function registerUserPurchaseAsTokens(address user, address referredBy, address trader, address[] memory tokens, uint256[] memory tokenAmounts) external;\\n\\n    event AffiliateConfigUpdated(AffiliateConfig _newConfig, AffiliateConfig config);\\n\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\n\\n// https://eips.ethereum.org/EIPS/eip-3156\\ninterface IERC3156FlashBorrower {\\n\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IERC3156FlashLender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0 || ^0.8.0;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n\\n// https://eips.ethereum.org/EIPS/eip-3156\\ninterface IERC3156FlashLender {\\n\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(\\n        address token\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IFeeBurner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n\\ninterface IFeeBurner {\\n    function feeToken() external view returns (address);\\n\\n    function burn() external;\\n\\n    function setFeeToken(address _token) external;\\n    function setFeeTokenBurnable(bool _burnable) external;\\n    function setFeeTo(address _receiver) external;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IFees is IGoverned {\\n    struct MosaicFeeRanges {\\n        uint16 buyFeeMin;          // 10000 = 100%\\n        uint16 buyFeeMax;\\n        uint16 trailingFeeMin;\\n        uint16 trailingFeeMax;\\n        uint16 performanceFeeMin;\\n        uint16 performanceFeeMax;\\n    }\\n\\n    struct MosaicFeeDistribution {\\n        uint16 userBuyFeeDiscountMax;\\n        uint16 userTrailingFeeDiscountMax;\\n        uint16 userPerformanceFeeDiscountMax;\\n        uint16 traderBuyFeeShareMin;          // 10000 = 100%\\n        uint16 traderBuyFeeShareMax;\\n        uint16 traderTrailingFeeShareMin;\\n        uint16 traderTrailingFeeShareMax;\\n        uint16 traderPerformanceFeeShareMin;\\n        uint16 traderPerformanceFeeShareMax;\\n        uint16 affiliateBuyFeeShare;\\n        uint16 affiliateTrailingFeeShare;\\n        uint16 affiliatePerformanceFeeShare;\\n        uint16 affiliateTraderFeeShare;\\n        uint16 affiliateLevel1RewardShare; // 0..10000. 6000 -> 60% of affiliate rewards go to level 1, 40% to level2\\n    }\\n\\n    struct MosaicPlatformFeeShares {\\n        uint8 executorShare;\\n        uint8 traderExecutorShare;\\n        uint8 userExecutorShare;\\n    }\\n\\n    struct MosaicUserFeeLevels {\\n        //slot1\\n        bool parentsCached;\\n        uint8 levels;\\n        uint16 conversionRatio;\\n        uint32 traderRevenueShareLevel; // 10 ** 9 = 100%\\n        uint32 userFeeDiscountLevel; // 10 ** 9 = 100%\\n        address parent;\\n        // slot2\\n        address parent2;\\n        uint32 lastTime;\\n        uint32 level1xTime;\\n        uint32 level2xTime;\\n        // slot3\\n        uint64 userFeeDiscountLevelxTime;\\n        uint32 claimLimit;\\n        uint64 claimLimitxTime;\\n\\n        //uint48 conversionRatioxTime;\\n    }\\n\\n    struct BuyFeeDistribution {\\n        uint userRebateAmount;\\n        uint traderAmount;\\n        uint affiliateAmount;\\n        // remaining is system fee\\n    }\\n\\n    struct TraderFeeDistribution {\\n        uint traderAmount;\\n        uint affiliateAmount;\\n        // remaining is system fee\\n    }\\n\\n    struct MosaicPoolFees {\\n        uint16 buyFee;\\n        uint16 trailingFee;\\n        uint16 performanceFee;\\n    }\\n\\n    struct PoolFeeStatus {\\n        uint256 claimableUserFeePerLp;\\n        uint256 claimableAffiliateL1FeePerLp;\\n        uint256 claimableAffiliateL2FeePerLp;\\n        uint128 claimableTotalFixedTraderFee;\\n        uint128 claimableTotalVariableTraderFee;\\n        uint128 feesContractSelfBalance;\\n    }\\n\\n    struct UserPoolFeeStatus {\\n        uint32 lastClaimTime;\\n        uint32 lastLevel1xTime;\\n        uint32 lastLevel2xTime;\\n        //uint48 lastConversionRatioxTime;\\n        uint64 lastUserFeeDiscountLevelxTime;\\n        uint128 userDirectlyClaimableFee;\\n       // uint128 userAffiliateClaimableFee;\\n        uint128 userClaimableFee;\\n        uint128 userClaimableL1Fee;\\n        uint128 userClaimableL2Fee;\\n        uint128 traderClaimableFee;\\n        // uint128 balance;\\n        uint128 l1Balance;\\n        uint128 l2Balance;\\n        uint256 lastClaimableUserFeePerLp;\\n        uint256 lastClaimableAffiliateL1FeePerLp;\\n        uint256 lastClaimableAffiliateL2FeePerLp;\\n    }\\n\\n    struct OnBeforeTransferPayload {\\n        uint128 feesContractBalanceBefore;\\n        uint128 trailingLpToMint;\\n        uint128 performanceLpToMint;\\n    }\\n\\n    /** HOOKS **/\\n    /** UserProfile **/\\n    function userRankChanged(address _user, uint8 _level) external;\\n\\n    /** Staking **/\\n    function userStakeChanged(address _user, uint256 _amount) external;\\n\\n    /** Pool **/\\n    function allocateBuyFee(address _pool, address _buyer, address _trader, uint _buyFeeAmount) external;\\n    function allocateTrailingFee(address _pool, address _trader, uint _feeAmount, uint _totalSupplyBefore, address _executor) external;\\n    function allocatePerformanceFee(address _pool, address _trader, uint _feeAmount, uint _totalSupplyBefore, address _executor) external;\\n    function onBeforeTransfer(address _pool, address _from, address _to, uint _fromBalanceBefore, uint _toBalanceBefore, uint256 _amount, uint256 _totalSupplyBefore, address _trader, OnBeforeTransferPayload memory payload) external;\\n    function getFeeRanges() external view returns (MosaicFeeRanges memory fees);\\n    function getFeeDistribution() external view returns (MosaicFeeDistribution memory fees);\\n    function getUserFeeLevels(address user) external view returns (MosaicUserFeeLevels memory userFeeLevels);\\n    function isValidFeeRanges(MosaicFeeRanges calldata ranges) external view returns (bool valid);\\n    function isValidFeeDistribution(MosaicFeeDistribution calldata distribution) external view returns (bool valid);\\n    function isValidPoolFees(MosaicPoolFees calldata poolFees) external view returns (bool valid);\\n    function isValidBuyFee(uint16 fee) external view returns (bool valid);\\n    function isValidTrailingFee(uint16 fee) external view returns (bool valid);\\n    function isValidPerformanceFee(uint16 fee) external view returns (bool valid);\\n\\n    function calculateBuyFeeDistribution(address user, address trader, uint feeAmount, uint16 buyFeeDiscount) external view returns (BuyFeeDistribution memory distribution);\\n    function calculateTraderFeeDistribution(uint amount) external view returns (TraderFeeDistribution memory distribution);\\n    function calculateTrailingFeeTraderDistribution(address trader, uint feeAmount) external view returns (uint amount);\\n    /** GETTERS **/\\n    // get the fee reduction percentage the user has achieved. 100% = 10 ** 9\\n    function getUserFeeDiscountLevel(address user) external view returns (uint32 level);\\n\\n    // get the fee reduction percentage the user has achieved. 100% = 10 ** 9\\n    function getTraderRevenueShareLevel(address user) external view returns (uint32 level);\\n\\n    event FeeRangesUpdated(MosaicFeeRanges newRanges, MosaicFeeRanges oldRanges);\\n    event FeeDistributionUpdated(MosaicFeeDistribution newRanges, MosaicFeeDistribution oldRanges);\\n    event PlatformFeeSharesUpdated(MosaicPlatformFeeShares newShares, MosaicPlatformFeeShares oldShares);\\n    event UserFeeLevelsChanged(address indexed user, MosaicUserFeeLevels newLevels);\\n    event PerformanceFeeAllocated(address pool, uint256 performanceExp);\\n    event TrailingFeeAllocated(address pool, uint256 trailingExp);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.17;\\n\\ninterface IGovernance {\\n    function propose_action(uint256 _id, address _trigger_address, bytes memory _calldata) external returns (uint256) ;\\n    function support_actions(uint256 _id) external returns (uint256) ;\\n    function trigger_action(uint256 _id) external returns (bytes memory) ;\\n    function transfer_proportion(address _address, uint256 _amount) external returns (uint256) ;\\n\\n    function read_core_Running() external view returns (bool);\\n    function read_core_govAddr() external view returns (address);\\n    function read_core_managers() external view returns (address[] memory);\\n    function read_core_owners() external view returns (address[] memory);\\n\\n    function read_config_core(string memory _name) external view returns (string memory);\\n    function read_config_emergencyStatus(string memory _name) external view returns (bool);\\n    function read_config_governAddress(string memory _name) external view returns (address);\\n    function read_config_Managers(string memory _name) external view returns (address [] memory);\\n\\n    function read_config_bool_slot(string memory _name) external view returns (bool[] memory);\\n    function read_config_address_slot(string memory _name) external view returns (address[] memory);\\n    function read_config_uint256_slot(string memory _name) external view returns (uint256[] memory);\\n    function read_config_bytes32_slot(string memory _name) external view returns (bytes32[] memory);\\n\\n    function read_invoteConfig_core(string memory _name) external view returns (string memory);\\n    function read_invoteConfig_name(string memory _name) external view returns (string memory);\\n    function read_invoteConfig_emergencyStatus(string memory _name) external view returns (bool);\\n    function read_invoteConfig_governAddress(string memory _name) external view returns (address);\\n    function read_invoteConfig_Managers(string memory _name) external view returns (address[] memory);\\n    function read_invoteConfig_boolslot(string memory _name) external view returns (bool[] memory);\\n    function read_invoteConfig_address_slot(string memory _name) external view returns (address[] memory);\\n    function read_invoteConfig_uint256_slot(string memory _name) external view returns (uint256[] memory);\\n    function read_invoteConfig_bytes32_slot(string memory _name) external view returns (bytes32[] memory);\\n\\n    function propose_config(string memory _name, bool _bool_val, address _address_val, address[] memory _address_list, uint256 _uint256_val, bytes32 _bytes32_val) external returns (uint256);\\n    function support_config_proposal(uint256 _confCount, string memory _name) external returns (string memory);\\n    function generator() external pure returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IGoverned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.17;\\n\\ninterface IGoverned {\\n    struct GovernanceState {\\n      bool running;\\n      address governanceAddress;\\n      address[] managers;\\n    }\\n\\n    function selfManageMe() external;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IMosaicOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.24 <0.9;\\n\\nimport \\\"../Interfaces/IVault.sol\\\";\\n\\ninterface IMosaicOracle {\\n    function getPrice(address _tokenIn, uint _amountIn, address _tokenOut) external view returns (uint amountOut);\\n    function getBatchPrice(address[] calldata _tokens, uint[] calldata _tokenBalances, address _returnedToken) external view returns(uint balance);\\n    function getBidPrice(address _tokenIn, uint _amountIn, address _tokenOut) external view returns (uint amountOut);\\n    function getPoolPrice(address[] calldata _tokens, uint[] calldata _tokenBalances, address _returnedToken) external view returns(uint balance);\\n    function getUsdPrice(address _tokenIn, uint _amountIn) external view returns (uint amountOut);\\n    function getUsdBatchPrice(address[] calldata _tokens, uint[] calldata _tokenBalances) external view returns(uint balance);\\n    function getUsdPoolPrice(address[] calldata _tokens, uint[] calldata _tokenBalances) external view returns(uint balance);\\n    function getUsdPoolPricePerLp(address _poolAddress, IVault.TotalSupplyBase calldata _supplyBase) external view returns(uint pricePerLp);\\n\\n    function consultPrice(address _tokenIn, uint _amountIn, address _tokenOut) external returns (uint amountOut);\\n    function consultBatchPrice(address[] calldata _tokens, uint[] calldata _tokenBalances, address _returnedToken) external returns(uint balance);\\n    function consultBidPrice(address _tokenIn, uint _amountIn, address _tokenOut) external returns (uint amountOut);\\n    function consultPoolPrice(address[] calldata _tokens, uint[] calldata _tokenBalances, address _returnedToken) external returns(uint balance);\\n    function consultUsdPrice(address _tokenIn, uint _amountIn) external returns (uint amountOut);\\n    function consultUsdBatchPrice(address[] calldata _tokens, uint[] calldata _tokenBalances) external returns(uint balance);\\n    function consultUsdPoolPrice(address[] calldata _tokens, uint[] calldata _tokenBalances) external returns(uint balance);\\n    function consultUsdPoolPricePerLp(address _poolAddress, IVault.TotalSupplyBase calldata _supplyBase) external returns(uint pricePerLp);\\n\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IFees.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPool {\\n    // Versioning\\n    function VERSION() external view returns (uint256 version);\\n\\n    // Ownable\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    function owner() external view returns (address);\\n    function creator() external view returns (address);\\n\\n    // Only Vault address should be allowed to call\\n    // hook for notifying the pool about the initial library being added\\n    function initialLiquidityProvided(address[] calldata _tokens, uint[] calldata _liquidity) external returns (uint lpTokens, uint dust);\\n\\n    // function to set managers\\n    function setManagers(address[] calldata _managers) external;\\n\\n    // ERC20 stuff\\n    // Pool name\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function getTrailingFeeAmount(IVault.TotalSupplyBase memory ts) external view returns (uint256);\\n    function updatePerfFeePricePerLp(IVault.TotalSupplyBase calldata ts, uint256 pricePerLp) external returns (uint128);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function safeTransfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function safeTransferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    event Minted(address indexed sender, uint liquidity, uint feeLiquidity);\\n    event Burned(address indexed sender, uint liquidity);\\n\\n    event WeightsChanged(address[] affectedTokens, uint32[] weights, uint32[] newWeights, uint weightChangeStart, uint weightChangeEnd);\\n\\n    event LockingChanged(bool locked);\\n\\n    // Callback from vault to raise ERC20 event\\n    function emitTransfer(address _from, address _to, uint256 _value) external;\\n\\n    // Custom stuff\\n    // Returns pool type:\\n    // 0: REBALANCING: (30% ETH, 30% BTC, 40% MKR). Weight changes gradually in time.\\n    // 1: NON_REBALANCING: (100 ETH, 5 BTC, 200 MKR). Weight changes gradually in time.\\n    // 2: DAYTRADE: Non rebalancing pool. Weight changes immediately.\\n    function poolType() external view returns (uint8 poolType);\\n\\n    function vaultAddress() external view returns (address vaultAddress);\\n\\n    function isUnlocked() external view returns (bool isUnlocked);\\n\\n    // Pool Id registered in the Vault\\n    function poolId() external view returns (uint32 poolId);\\n\\n    // Fees associated with the pool\\n    function getPoolFees() external view returns (IFees.MosaicPoolFees memory poolFees);\\n\\n    // Get pool token list\\n    function getTokens() external view returns (address[] memory _tokens);\\n\\n    // Add new token to the pool. Only pool admin can call\\n    function addToken(address _token) external returns (address[] memory _tokenList);\\n\\n    // Remove token from the pool. Anyone can call. Reverts if token weight is greater than 0\\n    function removeToken(uint _index) external returns (address[] memory _tokenList);\\n\\n    // Change buy fee. Only poo16 newBuyFee) external;\\n\\n    // Start a Dutch auction. Only pool admin can call\\n    function dutchAuction(address tokenToSell, uint amountToSell, address tokenToBuy, uint32 duration, uint32 expiration, uint endingPrice) external returns (uint auctionId);\\n\\n    // Mint function. Called by the Vault.\\n    function _mint(uint LPTokens, IVault.TotalSupplyBase calldata ts) external returns (uint[] memory requestedAmounts, uint FeeLPTokens, uint expansion);\\n\\n    // Burn function. Called by the Vault.\\n    function _burn(uint LPTokens, IVault.TotalSupplyBase calldata ts) external returns (uint[] memory amountsToBeReturned, uint expansion);\\n\\n    // Calculate the amount of each tokens to be sent in order to get LPTokensToMint amount of LP tokens\\n    function calcMintAmounts(uint LPTokensToMint) external view returns (uint[] memory amountsToSend, uint FeeLPTokens);\\n\\n    // Calculates the number of tokens to be received upon burning LP tokens\\n    function calcBurnAmounts(uint LPTokensToBurn) external view returns (uint[] memory amountsToGet);\\n\\n    // get amount out\\n    function getAmountOut(address tokenA, address tokenB, uint256 amountIn, uint16 swapFee) external view returns (uint256 amountOut);\\n\\n    // get amount in\\n    function getAmountIn(address tokenA, address tokenB, uint256 amountOut, uint16 swapFee) external view returns (uint256 amountIn);\\n\\n    // Calculates the maximum number of tokens that can be withdrawn from the pool by sending a specified amountIn, taking into account the current balances and weights.\\n    function queryExactTokensForTokens(address tokenIn, address tokenOut, uint balanceIn, uint balanceOut, uint amountIn, uint16 swapFee) external view returns (uint _amountOut, uint _fees);\\n\\n    // Calculates the minimum number of tokens required to be sent to the pool to withdraw a specified amountOut, based on the current balances and weights.\\n    function queryTokensForExactTokens(address tokenIn, address tokenOut,  uint balanceIn, uint balanceOut, uint amountOut, uint16 swapFee) external view returns (uint _amountIn, uint _fees);\\n\\n    // Returns the current weights\\n    function getWeights() external view returns (uint32[] memory _weights);\\n\\n    // Gradually changes the weights. Only pool admin can call\\n    function updateWeights(uint32 duration, uint32[] memory _newWeights) external;\\n\\n    // Update buy fee. Only pool admin can call\\n    function updateBuyFee(uint16 newFee) external;\\n\\n    // Returns reserves of each token stored in the Vault\\n    function getReserves() external view returns (uint256[] memory reserves);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n\\n// trader and pool register + whitelisted user register\\ninterface IRegister {\\n    function isApprovedPool(uint32 _poolId) external view returns (bool approved);\\n    function isApprovedPool(address _poolAddr) external view returns (bool approved);\\n    function isApprovedTrader(address _user) external view returns (bool approved);\\n\\n    function approvePools(address[] memory _poolIds) external;\\n    function approvePoolsById(uint32[] memory _poolIds) external;\\n    function approveTraders(address[] memory _traders) external;\\n\\n    function revokePools(address[] memory _poolAddrs) external;\\n    function revokePoolsById(uint32[] memory _poolIds) external;\\n    function revokeTraders(address[] memory _traders) external;\\n\\n    function removeWhitelist(address _address) external;\\n    function removeBlacklist(address _address) external;\\n    function addWhitelist(address _address) external;\\n    function addBlacklist(address _address) external;\\n    function addWhitelistBulk(address[] calldata _address) external;\\n\\n    function isWhitelisted(address _address) external view returns(bool);\\n    function isBlacklisted(address _address) external view returns(bool);\\n\\n    event PoolApproved(uint32 indexed poolId, address indexed poolAddr);\\n    event PoolRevoked(uint32 indexed poolId, address indexed poolAddr);\\n\\n    event TraderApproved(address indexed trader);\\n    event TraderRevoked(address indexed trader);\\n\\n    event WhitelistAdded(address _address);\\n    event WhitelistRemoved(address _address);\\n    event BlacklistAdded(address _address);\\n    event BlacklistRemoved(address _address);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/ISwaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface ISwaps {\\n\\n    // Get price from Pancakeswap\\n    function getPrice(address tokenToSell, uint amountToSell, address tokenToBuy) external view returns (uint);\\n\\n    // Returns the USDT amount to spend for a fix amount of LP tokens. Default routing: Token - USDT\\n    function quickQuoteMint(address _poolAddr, address usdAddr, uint LPTokensRequested) external view returns (uint usdtToSpend);\\n\\n    function quickQuoteBurn(address _poolAddr, address usdAddr, uint LPTokensToBurn) external view returns (uint usdtToReceive);\\n\\n    // Returns the USDT amount to spend for a fix amount of LP tokens. Requires routing.\\n    // If the pool has USDT token, simply provide an empty address[] for its routing\\n    // Example: KDX-USDT pool\\n    // _routing = [ [USDT_ADDRESS, KDX_ADDRESS], [] ]\\n    function quoteMint(address _poolAddr, address[][] memory _routing, uint LPTokensRequested) external view returns (uint usdtToSpend);\\n\\n    function quoteBurn(address _poolAddr, address[][] memory _routing, uint LPTokensToBurn) external view returns (uint usdtToReceive);\\n\\n    // Mint fixed amount of LP tokens from poolId pool. If usdtMaxSpend smaller than the requested amount, reverts\\n    function mint(address _poolAddr, address usdAddr, address[][] memory _routing, uint LPTokensRequested, uint usdMaxSpend, address referredBy, uint deadline) external returns (uint amountsSpent);\\n\\n    // Burn fixed amount of LP tokens from poolId pool. If usdMinReceive smaller than the requested amount, reverts\\n    function burn(address _poolAddr, address usdAddr, address[][] memory _routing, uint LPTokens, uint usdMinReceive, uint deadline) external returns (uint amountsReceived);\\n\\n    // Mint with default routing\\n    function quickMint(address _poolAddr, address usdAddr, uint LPTokensRequested, uint usdMaxSpend, address referredBy, uint deadline) external returns (uint amountsSpent);\\n\\n    // Burn with default routing\\n    function quickBurn(address _poolAddr, address usdAddr, uint LPTokens, uint usdMinReceive, uint deadline) external returns (uint amountReceived);\\n\\n    // Get a quote to swap on a given pool.\\n    // If givenInOrOut == 1 (i.e., the number of tokens to be sent to the Pool is specified),\\n    // it returns the amount of tokens taken from the Pool, and the fees to pay\\n    // If givenInOrOut == 0 parameter (i.e., the number of tokens to be taken from the Pool is specified),\\n    // it returns the amount of tokens sent to the Pool, and the fees to pay\\n    function swapQuote(address poolAddress, bool givenInOrOut, address tokenIn, address tokenOut, uint amount) external view returns (uint _amount, uint _fees);\\n\\n    function addTokens(address[] calldata _tokens) external;\\n    function removeTokens(address[] calldata _tokens) external;\\n\\n    event tokenAdded(address indexed token);\\n    event tokenRemoved(address indexed token);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IUserProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface IUserProfile {\\n\\n    struct UserProfile {                           /// Storage - We map the affiliated person to the affiliated_by person\\n        bool exists;\\n        uint8 rank;\\n        uint8 referredByRank;                       /// Rank of referrer at transaction time\\n        uint16 buyFeeDiscount;                            /// buy discount - 10000 = 100%\\n        uint32 referralCount;                          /// Number of referred by referee\\n        uint32 activeReferralCount;                    /// Number of active users referred by referee\\n        address referredBy;                            /// Address is referred by this user\\n        address referredByBefore;                     /// We store the 2nd step here to save gas (no interation needed)\\n    }\\n\\n    struct Parent {\\n        uint8 rank;\\n        address user;\\n    }\\n\\n    // returns the parent of the address\\n    function getParent(address _user) external view returns (address parent);\\n    // returns the parent and the parent of the parent of the address\\n    function getParents(address _user) external view returns (address parent, address parentOfParent);\\n\\n\\n    // returns user's parents and ranks of parents in 1 call\\n    function getParentsAndParentRanks(address _user) external view returns (Parent memory parent, Parent memory parent2);\\n    // returns user's parents and ranks of parents and use rbuy fee discount in 1 call\\n    function getParentsAndBuyFeeDiscount(address _user) external view returns (Parent memory parent, Parent memory parent2, uint16 discount);\\n    // returns number of referrals of address\\n    function getReferralCount(address _user) external view returns (uint32 count);\\n    // returns number of active referrals of address\\n    function getActiveReferralCount(address _user) external view returns (uint32 count);\\n\\n    // returns up to _count referrals of _user\\n    function getAllReferrals(address _user) external view returns (address[] memory referrals);\\n\\n    // returns up to _count referrals of _user starting from _index\\n    function getReferrals(address _user, uint256 _index, uint256 _count) external view returns (address[] memory referrals);\\n\\n    function getDefaultReferral() external view returns (address defaultReferral);\\n\\n    // get user information of _user\\n    function getUser(address _user) external view returns (UserProfile memory user);\\n\\n    function getUserRank(address _user) external view returns (uint8 rank);\\n\\n    // returns the total number of registered users\\n    function getUserCount() external view returns (uint256 count);\\n\\n    // return true if user exists\\n    function userExists(address _user) external view returns (bool exists);\\n\\n    function registerUser(address _user) external;\\n\\n    function increaseActiveReferralCount(address _user) external;\\n\\n    function registerUser(address _user, address _referredBy) external;\\n\\n    function registerUserWoBooster(address _user) external;\\n\\n    function setUserRank(address _user, uint8 _rank) external;\\n\\n    // function setDefaultReferral(address _referral) external;\\n\\n    // events\\n    event UserRegistered(address user, address referredBy, uint8 referredByRank, uint16 buyFeeDiscount);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IVault is IGoverned {\\n\\n    struct VaultState {\\n        bool userPoolTrackingDisabled;\\n        // bool paused;\\n        bool emergencyMode;\\n        bool whitelistingEnabled;\\n        bool flashEnabled;\\n        uint8 maxPoolTokenCount;\\n        uint8 feeToProtocol;\\n        uint8 bidMultiplier;\\n        uint16 flashFee;\\n        uint16 swapFee;\\n        uint16 bidMinDuration;\\n        uint16 rebalancingMinDuration;\\n        uint32 emergencyModeTimestamp;\\n        address feeTo;\\n    }\\n\\n    struct PoolState {\\n        bool poolInitialized;\\n        bool poolEmergencyMode;\\n        bool feeless;\\n        bool boosted;\\n        uint8 poolTokenCount;\\n        uint32 emergencyModeTime;\\n        uint48 lastTrailingTimestamp;\\n        uint48 lastPerformanceTimestamp;\\n        uint216 emergencyModeLPs;\\n        TotalSupplyBase totalSupplyBase;\\n    }\\n\\n    function getVaultState() external view returns (VaultState memory _vaultState);\\n\\n\\n    /************************************************************************************/\\n    /* Admin functions                                                                  */\\n    /************************************************************************************/\\n    // Check if given address is admin or not\\n    function isAdmin(address _address) external view returns (bool _isAdmin);\\n\\n    // Add or remove vault admin. Only admin can call this function\\n    function AddRemoveAdmin(address _address, bool _ShouldBeAdmin) external;// returns (address, bool);\\n\\n    // Boost or unboost pool. Boosted pools get 100% of their swap fees.\\n    // For non boosted pools, a part of the swap fees go to the platform.\\n    // Only admin can call this function\\n    function AddRemoveBoostedPool(address _address, bool _ShouldBeBoosted) external;// returns (address, bool);\\n\\n\\n    /************************************************************************************/\\n    /* Token whitelist                                                                  */\\n    /************************************************************************************/\\n\\n    // Only admin can call this function. Only the whitelisted tokens can be added to a Pool\\n    // If empty: No whitelist, all tokens are allowed\\n    function setWhitelistedTokens(address[] calldata _tokens, bool[] calldata _whitelisted) external;\\n\\n    function isTokenWhitelisted(address token) external view returns (bool whitelisted);\\n    event TokenWhitelistChanged(address indexed token, bool isWhitelisted);\\n\\n    /************************************************************************************/\\n    /* Internal Balances                                                                */\\n    /************************************************************************************/\\n\\n    // Users can deposit tokens into the Vault to have an internal balance in the Mosaic platform.\\n    // This internal balance can be used to deposit tokens into a Pool (Mint), withdraw tokens from\\n    // a Pool (Burn), or perform a swap. The internal balance can also be transferred or withdrawn.\\n\\n    // Get a specific user's internal balance for one given token\\n    function getInternalBalance(address user, address token) external view returns (uint balance);\\n\\n    // Get a specific user's internal balances for the given token array\\n    function getInternalBalances(address user, address[] memory tokens) external view returns (uint[] memory balances);\\n\\n    // Deposit tokens to the msg.sender's  internal balance\\n    function depositToInternalBalance(address token, uint amount) external;\\n\\n    // Deposit tokens to the recipient internal balance\\n    function depositToInternalBalanceToAddress(address token, address to, uint amount) external;\\n\\n    // ERC20 token transfer from the message sender's internal balance to their address\\n    function withdrawFromInternalBalance(address token, uint amount) external;\\n\\n    // ERC20 token transfer from the message sender's internal balance to the given address\\n    function withdrawFromInternalBalanceToAddress(address token, address to, uint amount) external;\\n\\n    // Transfer tokens from the message sender's internal balance to another user's internal balance\\n    function transferInternalBalance(address token, address to, uint amount) external;\\n\\n    // Event emitted when user's internal balance changes by delta amount. Positive delta means internal balance increase\\n    event InternalBalanceChanged(address indexed user, address indexed token, int256 delta);\\n\\n    /************************************************************************************/\\n    /* Pool ERC20 helper                                                                */\\n    /************************************************************************************/\\n\\n    function transferFromAsTokenContract(address from, address to, uint amount) external returns (bool success);\\n    function mintAsTokenContract(address to, uint amount) external returns (bool success);\\n    function burnAsTokenContract(address from, uint amount) external returns (bool success);\\n\\n    /************************************************************************************/\\n    /* Pool                                                                             */\\n    /************************************************************************************/\\n\\n    struct TotalSupplyBase {\\n        uint32 timestamp;\\n        uint224 amount;\\n    }\\n\\n    event TotalSupplyBaseChanged(address indexed poolAddr, TotalSupplyBase supplyBase);\\n    // Each pool should be one of the following based on poolType:\\n    // 0: REBALANCING: (30% ETH, 30% BTC, 40% MKR). Weight changes gradually in time.\\n    // 1: NON_REBALANCING: (100 ETH, 5 BTC, 200 MKR). Weight changes gradually in time.\\n    // 2: DAYTRADE: Non rebalancing pool. Weight changes immediately.\\n\\n    function tokenInPool(address pool, address token) external view returns (bool inPool);\\n\\n    function poolIdToAddress(uint32 poolId) external view returns (address poolAddr);\\n\\n    function poolAddressToId(address poolAddr) external view returns (uint32 poolId);\\n\\n    // pool calls this to move the pool to zerofee status\\n    function disableFees() external;\\n\\n    // Returns the total pool count\\n    function poolCount() external view returns (uint32 count);\\n\\n    // Returns a list of pool IDs where the user has assets\\n    function userJoinedPools(address user) external view returns (uint32[] memory poolIDs);\\n\\n    // Returns a list of pool the user owns\\n    function userOwnedPools(address user) external view returns (uint32[] memory poolIDs);\\n\\n    //Get pool tokens and their balances\\n    function getPoolTokens(uint32 poolId) external view returns (address[] memory tokens, uint[] memory balances);\\n\\n    function getPoolTokensByAddr(address poolAddr) external view returns (address[] memory tokens, uint[] memory balances);\\n\\n    function getPoolTotalSupplyBase(uint32 poolId) external view returns (TotalSupplyBase memory totalSupplyBase);\\n\\n    function getPoolTotalSupplyBaseByAddr(address poolAddr) external view returns (TotalSupplyBase memory totalSupplyBase);\\n\\n    // Register a new pool. Pool type can not be changed after the creation. Emits a PoolRegistered event.\\n    function registerPool(address _poolAddr, address _user, address _referredBy) external returns (uint32 poolId);\\n    event PoolRegistered(uint32 indexed poolId, address indexed poolAddress);\\n\\n    // Registers tokens for the Pool. Must be called by the Pool's contract. Emits a TokensRegistered event.\\n    function registerTokens(address[] memory _tokenList, bool onlyWhitelisted) external;\\n    event TokensRegistered(uint32 indexed poolId, address[] newTokens);\\n\\n    // Adds initial liquidity to the pool\\n    function addInitialLiquidity(uint32 _poolId, address[] memory _tokens, uint[] memory _liquidity, address tokensTo, bool fromInternalBalance) external;\\n    event InitialLiquidityAdded(uint32 indexed poolId, address user, uint lpTokens, address[] tokens, uint[] amounts);\\n\\n    // Deegisters tokens for the poolId Pool. Must be called by the Pool's contract.\\n    // Tokens to be deregistered should have 0 balance. Emits a TokensDeregistered event.\\n    function deregisterToken(address _tokenAddress, uint _remainingAmount) external;\\n    event TokensDeregistered(uint32 indexed poolId, address tokenAddress);\\n\\n    // This function is called when a liquidity provider adds liquidity to the pool.\\n    // It mints additional liquidity tokens as a reward.\\n    // If fromInternalBalance is true, the amounts will be deducted from user's internal balance\\n    function Mint(uint32 poolId, uint LPTokensRequested, uint[] memory amountsMax, address to, address referredBy, bool fromInternalBalance, uint deadline, uint usdValue) external returns (uint[] memory amountsSpent);\\n    event Minted(uint32 indexed poolId, address txFrom, address user, uint lpTokens, address[] tokens, uint[] amounts, bool fromInternalBalance);\\n\\n    // This function is called when a liquidity provider removes liquidity from the pool.\\n    // It burns the liquidity tokens and sends back the tokens as ERC20 transfer.\\n    // If toInternalBalance is true, the tokens will be deposited to user's internal balance\\n    function Burn(uint32 poolId, uint LPTokensToBurn, uint[] memory amountsMin, bool toInternalBalance, uint deadline, address from) external returns (uint[] memory amountsReceived);\\n    event Burned(uint32 indexed poolId, address txFrom, address user, uint lpTokens, address[] tokens, uint[] amounts, bool fromInternalBalance);\\n\\n    /************************************************************************************/\\n    /* Swap                                                                             */\\n    /************************************************************************************/\\n\\n    // Executes a swap operation on a single Pool. Called by the user\\n    // If the swap is initiated with givenInOrOut == 1 (i.e., the number of tokens to be sent to the Pool is specified),\\n    // it returns the amount of tokens taken from the Pool, which should not be less than limit.\\n    // If the swap is initiated with givenInOrOut == 0 parameter (i.e., the number of tokens to be taken from the Pool is specified),\\n    // it returns the amount of tokens sent to the Pool, which should not exceed limit.\\n    // Emits a Swap event\\n    function swap(address poolAddress, bool givenInOrOut, address tokenIn, address tokenOut, uint amount, bool fromInternalBalance, uint limit, uint64 deadline) external returns (uint calculatedAmount);\\n    event Swap(uint32 indexed poolId, address indexed tokenIn, address indexed tokenOut, uint amountIn, uint amountOut, address user);\\n\\n    // Execute a multi-hop token swap between multiple pairs of tokens on their corresponding pools\\n    // Example: 100 tokenA -> tokenB -> tokenC\\n    // pools = [pool1, pool2], tokens = [tokenA, tokenB, tokenC], amountIn = 100\\n    // The returned amount of tokenC should not be less than limit\\n    function multiSwap(address[] memory pools, address[] memory tokens, uint amountIn, bool fromInternalBalance, uint limit, uint64 deadline) external returns (uint calculatedAmount);\\n\\n    /************************************************************************************/\\n    /* Dutch Auction                                                                    */\\n    /************************************************************************************/\\n    // Non rebalancing pools (where poolId is not 0) can use Dutch auction to change their\\n    // balance sheet. A Dutch auction (also called a descending price auction) refers to a\\n    // type of auction in which an auctioneer starts with a very high price, incrementally\\n    // lowering the price. User can bid for the entire amount, or just a fraction of that.\\n\\n    struct AuctionInfo {\\n        address poolAddress;\\n        uint32 startsAt;\\n        uint32 duration;\\n        uint32 expiration;\\n        address tokenToSell;\\n        address tokenToBuy;\\n        uint startingAmount;\\n        uint remainingAmount;\\n        uint startingPrice;\\n        uint endingPrice;\\n    }\\n\\n    // Get total (lifetime) auction count\\n    function getAuctionCount() external view returns (uint256 auctionCount);\\n\\n    // Get all information of the given auction\\n    function getAuctionInfo(uint auctionId) external view returns (AuctionInfo memory);\\n\\n    // Returns 'true' if the auction is still running and there are tokens available for purchase\\n    // Returns 'false' if the auction has expired or if all tokens have been sold.\\n    function isRunning(uint auctionId) external view returns (bool);\\n\\n    // Called by pool owner. Emits an auctionStarted event\\n    function startAuction(address tokenToSell, uint amountToSell, address tokenToBuy, uint32 duration, uint32 expiration, uint endingPrice) external returns (uint auctionId);\\n    event AuctionStarted(uint32 poolId, uint auctionId, AuctionInfo _info);\\n\\n    // Called by pool owner. Emits an auctionStopped event\\n    function stopAuction(uint auctionId) external;\\n    event AuctionStopped(uint auctionId);\\n\\n    // Get the current price for 'remainingAmount' number of tokens\\n    function getBidPrice(uint auctionId) external view returns (uint currentPrice, uint remainingAmount);\\n\\n    // Place a bid for the specified 'auctionId'. Fractional bids are supported, with the 'amount'\\n    // representing the number of tokens to purchase. The amounts are deducted from and credited to the\\n    // user's internal balance. If there are insufficient tokens in the user's internal balance, the function reverts.\\n    // If there are fewer tokens available for the auction than the specified 'amount' and enableLessAmount == 1,\\n    // the function purchases all remaining tokens (which may be less than the specified amount).\\n    // If enableLessAmount is set to 0, the function reverts. Emits a 'newBid' event\\n    function bid(uint auctionId, uint amount, bool enableLessAmount, bool fromInternalBalance, uint deadline) external returns (uint spent);\\n    event NewBid(uint auctionId, address buyer, uint tokensBought, uint paid, address tokenToBuy, address tokenToSell, uint remainingAmount);\\n\\n    /************************************************************************************/\\n    /* Emergency                                                                        */\\n    /************************************************************************************/\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    // Only an admin can call this function.\\n    function setEmergencyMode() external;\\n\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    function setPoolEmergencyMode(address poolAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IVaultDelegated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface IVaultDelegated {\\nfunction DselfManageMe() external;\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Vault/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Vault contract\\n * @author dlabs.hu\\n * @dev This contract is for storing tokens and keeping the book\\n */\\n\\nimport \\\"../Interfaces/IVault.sol\\\";\\nimport \\\"../Interfaces/IPool.sol\\\";\\nimport \\\"../Interfaces/ISwaps.sol\\\";\\nimport \\\"../Interfaces/IUserProfile.sol\\\";\\nimport \\\"../Interfaces/IAffiliate.sol\\\";\\nimport \\\"../Interfaces/IFees.sol\\\";\\nimport \\\"../Interfaces/IRegister.sol\\\";\\nimport \\\"../Interfaces/IMosaicOracle.sol\\\";\\nimport \\\"../helpers/IERC20Burnable.sol\\\";\\nimport \\\"../Interfaces/IFeeBurner.sol\\\";\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../Governance/Governed.sol\\\";\\nimport \\\"../Interfaces/IVaultDelegated.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../Interfaces/IERC3156FlashLender.sol\\\";\\n\\n\\ncontract Vault is IVault, IERC3156FlashLender, ReentrancyGuard, Governed {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint;\\n    using SafeCast for uint256;\\n    using SafeCast for uint224;\\n\\n    uint constant MIN_INITIAL_LIQUIDITY = 1e4;\\n\\n    mapping (address => mapping (address => bool)) public tokenInPool;\\n \\n    VaultState internal vaultState;\\n    function getVaultState() external view returns (VaultState memory _vaultState) {\\n        return vaultState;\\n    }\\n    address private vaultLib;\\n    address public swapsContract;                       // Swaps smart contract address\\n    uint32 public poolCount;                            // Number of Pools\\n\\n    uint internal auctionCount;                           // Number of Dutch Auctions\\n\\n    function getAuctionCount() external view returns (uint256){ return auctionCount;}\\n\\n    mapping (address => bool) internal admins;\\n    mapping (uint32 => address) internal _poolIdToAddress;\\n    mapping (address => uint32) internal _poolAddressToId; // If returns 0: Pool not registered. Lowest pool Id is 1\\n    mapping (uint => AuctionInfo) internal auctions;\\n\\n    function getAuction(uint _id) external view returns (AuctionInfo memory auctionInfo) {\\n        auctionInfo = auctions[_id];\\n    }\\n\\n\\n    mapping (address => PoolState) internal poolStates;\\n    function getPoolState(address _pool) external view returns (PoolState memory _poolState) {\\n        return poolStates[_pool];\\n    }\\n\\n    address public poolFactory;\\n    address public userProfile;\\n    address public mosaicOracle;\\n    address public affiliate;\\n    address public fees;\\n    address public register;\\n\\n    // Flash loan\\n    bytes32 public constant CALLBACK_SUCCESS = keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    mapping (address => bool) public zeroFee;          // Addresses that have 0 fee flash loans and swaps\\n\\n    constructor(address _governAddress, address _vaultLib) {\\n        admins[msg.sender] = true;\\n        governanceState.governanceAddress = _governAddress;\\n        vaultLib = _vaultLib;\\n    }\\n\\n\\n    /* EMERGENCY */\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    function setEmergencyMode() external {\\n        onlyManagersFun();\\n        _setEmergencyMode();\\n    }\\n\\n    function _setEmergencyMode() internal {\\n        LiveFun();\\n        vaultState.emergencyMode = true;\\n        vaultState.emergencyModeTimestamp = uint32(block.timestamp);\\n    }\\n\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    error Vault__GenericError(string s);\\n    error Vault__EmergencyAlreadyActive();\\n    error Vault__OnlyAdminOrPool();\\n    function setPoolEmergencyMode(address poolAddress) external {\\n        if (!isManagerFun(msg.sender) && msg.sender != poolAddress) revert Vault__OnlyAdminOrPool();\\n        if (poolStates[poolAddress].poolEmergencyMode != false) revert Vault__EmergencyAlreadyActive(); // EMERGENCY MODE ALREADY ACTIVE\\n        poolStates[poolAddress].poolEmergencyMode = true;\\n        poolStates[poolAddress].emergencyModeTime = uint32(block.timestamp);\\n    }\\n\\n\\n    /* Governance */\\n    error Vault__EmergencyStopped();\\n    function LiveFun(address _a) internal view {\\n        if (vaultState.emergencyMode || poolStates[_a].poolEmergencyMode) revert Vault__EmergencyStopped(); // Emergency stopped.\\n    }\\n\\n    // Call this from governance or by manually by manager to activate the configuration update\\n    function selfManageMe() external virtual override(Governed, IGoverned) {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    function _selfManageMeBefore() internal virtual override {}\\n    function _selfManageMeAfter() internal virtual override {}\\n    function _onBeforeEmergencyChange(bool nexRunning) internal virtual override {}\\n\\n    /************************************************************************************/\\n    /* Internal helper stuff                                                           */\\n    /************************************************************************************/\\n    function _registerUser(address to, address referredBy) internal virtual {\\n        IUserProfile(userProfile).registerUser(to, referredBy);\\n    }\\n\\n    function _registerUserPurchase(address to, address referredBy, address trader, address[] memory tokens, uint[] memory tokenAmounts, uint256 usdAmount) internal virtual {\\n        if (usdAmount > 0) {\\n            IAffiliate(affiliate).registerUserPurchase(to, referredBy, trader, usdAmount);\\n        } else {\\n            IAffiliate(affiliate).registerUserPurchaseAsTokens(to, referredBy, trader, tokens, tokenAmounts);\\n        }\\n    }\\n\\n\\n    /************************************************************************************/\\n    /* Admin                                                                            */\\n    /************************************************************************************/\\n    mapping (address => bool) internal whitelistedTokens;\\n\\n    error Vault__OnlyAdmin();\\n    function onlyAdmin() internal view {\\n        if (!isAdmin(msg.sender)) revert Vault__OnlyAdmin(); // NOT AUTHORIZED\\n    }\\n\\n    error Vault__OnlyFactory();\\n    modifier onlyFactory() {\\n        if (poolFactory != msg.sender) revert Vault__OnlyFactory(); // NOT AUTHORIZED\\n        _;\\n    }\\n\\n    // Check if given address is admin or not\\n    function isAdmin(address _address) public virtual view returns (bool _isAdmin) {\\n        _isAdmin = admins[_address];\\n    }\\n\\n    // Add or remove vault admin. Only admin can call this function\\n    function AddRemoveAdmin(address _address, bool _ShouldBeAdmin) external virtual {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    // Boost or unboost pool. Boosted pools get 100% of their swap fees.\\n    // For non boosted pools, a part of the swap fees go to the platform.\\n    // Only admin can call this function\\n    function AddRemoveBoostedPool(address _address, bool _ShouldBeBoosted) external virtual { // returns (address, bool) {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    function AddRemoveZeroFeeAddress(address _address, bool _ShouldBeZeroFee) external virtual {\\n        LiveFun();\\n        onlyAdmin();\\n        zeroFee[_address] = _ShouldBeZeroFee;\\n    }\\n\\n\\n    function _delegateCall(address _target) private {\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), _target, 0, calldatasize(), 0, 0)\\n            let size := returndatasize()\\n            switch result\\n            case 0 {\\n                 returndatacopy(0, 0, size)\\n                 revert(0, size)\\n            }\\n            default { \\n                let retSize := returndatasize()\\n                returndatacopy(0, 0, retSize)\\n                return(0, retSize) \\n            }\\n        }\\n    }\\n\\n    // Only admin can call this function. Only the whitelisted tokens can be added to a Pool\\n    function setWhitelistedTokens(address[] calldata _tokens, bool[] calldata _whitelisted) external virtual {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    function isTokenWhitelisted(address _token) public virtual view returns (bool whitelisted) {\\n        return whitelistedTokens[_token];\\n    }\\n\\n    /************************************************************************************/\\n    /* Internal Balances                                                                */\\n    /************************************************************************************/\\n\\n    // Internal Balance: _internalBalance[_user][_token];\\n    mapping(address => mapping(address => uint)) internal _internalBalance;\\n\\n    // Get a specific user's internal balance for one given token\\n    function getInternalBalance(address _user, address _token) public virtual view returns (uint balance) {\\n        return _internalBalance[_user][_token];\\n    }\\n\\n    // Get a specific user's internal balances for the given token array\\n    function getInternalBalances(address user, address[] memory tokens) public virtual view returns (uint[] memory balances) {\\n        balances = new uint[](tokens.length);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            balances[i] = getInternalBalance(user, tokens[i]);\\n        }\\n    }\\n\\n    // Deposit tokens to the recipient internal balance\\n    function depositToInternalBalance(address token, uint amount) external virtual {\\n        LiveFun();\\n        _depositToInternalBalance(token, msg.sender, msg.sender, amount, false);\\n    }\\n\\n    // Deposit tokens to the recipient internal balance\\n    function depositToInternalBalanceToAddress(address token, address to, uint amount) external virtual {\\n        LiveFun();\\n        _depositToInternalBalance(token, msg.sender, to, amount, false);\\n    }\\n\\n    // ERC20 token transfer from the message sender's internal balance to their address\\n    function withdrawFromInternalBalance(address token, uint amount) external virtual {\\n        _withdrawFromInternalBalance(token, msg.sender, msg.sender, amount);\\n    }\\n\\n    function withdrawFromInternalBalanceToAddress(address token, address to, uint amount) external virtual {\\n        _withdrawFromInternalBalance(token, msg.sender, to, amount);\\n    }\\n\\n    // Transfer tokens from the message sender's internal balance to another user's internal balance\\n    function transferInternalBalance(address token, address to, uint amount) external virtual {\\n        _transferInternalBalance(token, msg.sender, to, amount);\\n    }\\n\\n    error Vault__CantDepositPoolToken();\\n    error Vault__OnlyWhitelistedTokensCanBeDeposited();\\n    function _depositToInternalBalance(address token, address from, address to, uint amount, bool ignoreWhitelisting) internal {\\n        if (_poolAddressToId[token] != 0) revert Vault__CantDepositPoolToken(); // Vault: Can't deposit a Pool token to internal deposit\\n        // only future pools that are effectively created for handling nonwhitelisted tokens can deposit such tokens\\n        if (!ignoreWhitelisting && !isTokenWhitelisted(token)) revert Vault__OnlyWhitelistedTokensCanBeDeposited(); // Vault: Can't deposit a non-whitelisted token\\n        IERC20(token).safeTransferFrom(from, address(this), amount);\\n        _internalBalance[to][token] += amount;\\n        emit InternalBalanceChanged(to, token, int256(amount));\\n    }\\n\\n    error Vault__CantWithdrawPoolToken();\\n    error Vault__InsufficientBalance();\\n    function _withdrawFromInternalBalance(address token, address from, address to, uint amount) internal {\\n        if (_poolAddressToId[token] != 0) revert Vault__CantWithdrawPoolToken(); // Vault: Can't withdraw a Pool token from internal deposit\\n        uint _balance = getInternalBalance(from, token);\\n        if (_balance < amount) revert Vault__InsufficientBalance(); // WFIB: INSUFFICIENT BALANCE\\n\\n        _internalBalance[from][token] -= amount;\\n        IERC20(token).safeTransfer(to, amount);\\n\\n        emit InternalBalanceChanged(from, token, -int256(amount));\\n    }\\n\\n    function _transferInternalBalance(address token, address from, address to, uint amount) internal {\\n        _transferInternalBalance(token, from, to, amount, true);\\n    }\\n\\n    function _transferInternalBalance(address token, address from, address to, uint amount, bool callPoolTransferHook) internal {\\n        uint _balance = getInternalBalance(from, token);\\n        if (_balance < amount) revert Vault__InsufficientBalance(); // WFIB: INSUFFICIENT BALANCE\\n\\n        emit InternalBalanceChanged(from, token, -int256(amount));\\n        emit InternalBalanceChanged(to, token, int256(amount));\\n        if (_poolAddressToId[token] > 0 && !vaultState.emergencyMode && !poolStates[token].poolEmergencyMode) {\\n            _onBeforeBalanceTransfer(token, from, to, amount, false, false, false);\\n            if (amount > 0) {\\n                _internalBalance[from][token] -= amount;\\n                _internalBalance[to][token] += amount;\\n                _handlerForPoolOfUser(from, token, false);\\n                _handlerForPoolOfUser(to, token, true);\\n            }\\n            if (callPoolTransferHook) IPool(token).emitTransfer(from, to, amount);\\n        } else {\\n            if (amount > 0) {\\n                _internalBalance[from][token] -= amount;\\n                _internalBalance[to][token] += amount;\\n            }\\n        }\\n    }\\n\\n    // DONT FORGET TO ALSO MINT TRAILING FEE IF THIS IS USED\\n    error Vault__OnlyPoolCanBeMinted();\\n    function _mintToInternalBalance(address token, address to, uint amount, bool callPoolTransferHook, bool feesAlreadyAllocated) internal {\\n        LiveFun(token);\\n        if (_poolAddressToId[token] == 0) revert Vault__OnlyPoolCanBeMinted(); // Vault: only a registered Pool token can mint to its users' internal deposit\\n        _onBeforeBalanceTransfer(token, address(0), to, amount, feesAlreadyAllocated, true, false);\\n        poolStates[token].totalSupplyBase.amount += (amount).toUint224();\\n        poolStates[token].totalSupplyBase.timestamp = uint32(block.timestamp);\\n        emit TotalSupplyBaseChanged(token, poolStates[token].totalSupplyBase);\\n        _internalBalance[to][token] += amount;\\n        _handlerForPoolOfUser(to, token, true);\\n        // TODO casting!!!\\n        emit InternalBalanceChanged(to, token, int256(amount));\\n        if (callPoolTransferHook) IPool(token).emitTransfer(address(0), to, amount);\\n    }\\n\\n    // DONT FORGET TO ALSO MINT TRAILING FEE IF THIS IS USED\\n    error Vault__OnlyPoolCanBeBurned();\\n    function _burnFromInternalBalance(address token, address from, uint amount, bool callPoolTransferHook, bool feesAlreadyAllocated) internal {\\n        LiveFun(token);\\n        if (_poolAddressToId[token] == 0) revert Vault__OnlyPoolCanBeBurned(); // Vault: only a registered Pool token can burn from its users internal deposit\\n        _onBeforeBalanceTransfer(token, from, address(0), amount, feesAlreadyAllocated, true, false);\\n        _internalBalance[from][token] -= amount;\\n        poolStates[token].totalSupplyBase.amount -= (amount).toUint224();\\n        poolStates[token].totalSupplyBase.timestamp = uint32(block.timestamp);\\n        emit TotalSupplyBaseChanged(token, poolStates[token].totalSupplyBase);\\n        _handlerForPoolOfUser(from, token, false);\\n        emit InternalBalanceChanged(from, token, -int256(amount));\\n        if (callPoolTransferHook) IPool(token).emitTransfer(from, address(0), amount);\\n    }\\n\\n\\n    /************************************************************************************/\\n    /* Fees handler                                                                     */\\n    /************************************************************************************/\\n\\n    function _calculateTrailingAndPerformanceFee(address _pool, bool forceTrailing, bool forcePerformance) internal virtual returns (uint128 trailingFeesToMint, uint128 performanceFeesToMint) {\\n        bool mintTrailing;\\n        bool mintPerformance;\\n        // run if forced unless already allocated in this second and also if time passed\\n        if ((forcePerformance && (poolStates[_pool].lastPerformanceTimestamp < block.timestamp)) || poolStates[_pool].lastPerformanceTimestamp < block.timestamp - 7 days) {\\n            // trailing must be run, too if performance runs\\n            mintPerformance = true;\\n            forceTrailing = true;\\n        }\\n        // run if forced unless already allocated in this second and also if time passed\\n        if ((forceTrailing && (poolStates[_pool].lastTrailingTimestamp < block.timestamp)) || poolStates[_pool].lastTrailingTimestamp < block.timestamp - 3 days) {\\n            mintTrailing = true;\\n        }\\n        if (mintTrailing) {\\n            // calculate and allocate trailing fee just as in Mint (ask pool contract the TF amount then )\\n            trailingFeesToMint = (IPool(_pool).getTrailingFeeAmount(poolStates[_pool].totalSupplyBase)).toUint128();\\n            poolStates[_pool].lastTrailingTimestamp = uint48(block.timestamp);\\n        }\\n\\n        if (mintPerformance) {\\n            // calculate and allocate perf fee just as in Mint (ask pool contract the TF amount then )\\n            TotalSupplyBase memory tsTmp = poolStates[_pool].totalSupplyBase;\\n            uint256 valuePerLp = _consultPoolPricePerLpByAddr(_pool, tsTmp);\\n\\n            performanceFeesToMint = (IPool(_pool).updatePerfFeePricePerLp(tsTmp, valuePerLp));\\n\\n            poolStates[_pool].lastPerformanceTimestamp = uint48(block.timestamp);\\n        }\\n    }\\n\\n    // anyone can call to take a proceeding form the generated fees\\n    error Vault__NotAPool(uint idx);\\n    function allocateTrailingAndPerformanceFee(address _pool) external {\\n        LiveFun(_pool);\\n        if (_poolAddressToId[_pool] == 0) revert Vault__NotAPool(0);\\n        _onBeforeBalanceTransfer(_pool, address(0), address(0), 0, false, true, true);\\n    }\\n\\n    // notifies Fees contract about balance change and fee allocations\\n    function _onBeforeBalanceTransfer(address _pool, address _from, address _to, uint amount, bool feesAlreadyAllocated, bool forceTrailingFeeAllocation, bool forcePerformanceFeeAllocation) internal virtual {\\n        if (poolStates[_pool].feeless) return;\\n        IFees.OnBeforeTransferPayload memory payload;\\n        if (!feesAlreadyAllocated) {\\n            uint128 originalTotalsupplyBase = (poolStates[_pool].totalSupplyBase.amount).toUint128();\\n\\n            if (msg.sender == tx.origin) {\\n                // only real users may participate\\n                (payload.trailingLpToMint, payload.performanceLpToMint) = _calculateTrailingAndPerformanceFee(_pool, forceTrailingFeeAllocation, forcePerformanceFeeAllocation);\\n            }\\n\\n            uint128 expAmount = payload.trailingLpToMint + payload.performanceLpToMint;\\n            if (expAmount > 0) {\\n                address trader = IPool(_pool).creator();\\n                payload.feesContractBalanceBefore = getInternalBalance(fees, _pool).toUint128();\\n                IFees(fees).onBeforeTransfer(_pool, _from, _to, _internalBalance[_from][_pool], _internalBalance[_to][_pool]\\n                                                , amount, originalTotalsupplyBase, trader\\n                                                , payload\\n                                                );\\n                // do the mint for the Trader\\n                poolStates[_pool].totalSupplyBase.amount += uint224(expAmount);\\n                poolStates[_pool].totalSupplyBase.timestamp = (block.timestamp).toUint32();\\n                emit TotalSupplyBaseChanged(_pool, poolStates[_pool].totalSupplyBase);\\n                _internalBalance[fees][_pool] += expAmount;\\n                _handlerForPoolOfUser(fees, _pool, true);\\n                // TODO casting!!!\\n                emit InternalBalanceChanged(fees, _pool, int256(uint256(expAmount)));\\n                if (true) IPool(_pool).emitTransfer(address(0), fees, amount);\\n                return;\\n            }\\n        }\\n        IFees(fees).onBeforeTransfer(_pool, _from, _to, _internalBalance[_from][_pool], _internalBalance[_to][_pool], amount, 0, address(0), payload);\\n    }\\n\\n\\n    /************************************************************************************/\\n    /* Pool ERC20 helper                                                                */\\n    /************************************************************************************/\\n    function transferFromAsTokenContract(address from, address to, uint amount) external virtual returns (bool success) {\\n        LiveFun(msg.sender);\\n        if (_poolAddressToId[msg.sender] == 0) revert Vault__NotAPool(1); // NOT A POOL\\n        _transferInternalBalance(msg.sender, from, to, amount, false);\\n        return true;\\n    }\\n\\n    function mintAsTokenContract(address to, uint amount) external virtual returns (bool success) {\\n        LiveFun(msg.sender);\\n        if (_poolAddressToId[msg.sender] == 0) revert Vault__NotAPool(2); // NOT A POOL\\n        _mintToInternalBalance(msg.sender, to, amount, false, false);\\n        return true;\\n    }\\n\\n    function burnAsTokenContract(address to, uint amount) external virtual returns (bool success) {\\n        LiveFun(msg.sender);\\n        if (_poolAddressToId[msg.sender] == 0) revert Vault__NotAPool(3); // NOT A POOL\\n        _burnFromInternalBalance(msg.sender, to, amount, false, false);\\n        return true;\\n    }\\n\\n    /************************************************************************************/\\n    /* Pool                                                                             */\\n    /************************************************************************************/\\n\\n    mapping (address => uint32[]) internal poolOfUser;  // [user] = [list of pool ids\\n    mapping (address => mapping (uint32 => uint32)) internal poolOfUserIndexes; // [user][poolid] = index + 1 of pool id in poolOfUser[user] (so indexing starts from 1! 0 means: nonexistent in the list)\\n    mapping (address => uint32[]) internal usrOwnedPools;   // [user] = [list of pool ids]\\n\\n    function disableFees() external {\\n        LiveFun();\\n        poolStates[msg.sender].feeless = true;\\n    }\\n\\n    function poolIdToAddress(uint32 poolId) external virtual view returns (address poolAddr) {\\n        return _poolIdToAddress[poolId];\\n    }\\n\\n    function poolAddressToId(address poolAddr) external virtual view returns (uint32 poolId) {\\n        return _poolAddressToId[poolAddr];\\n    }\\n\\n    // Returns a list of pool IDs where the user has assets\\n    function userJoinedPools(address user) external virtual view returns (uint32[] memory poolIDs) {\\n        return poolOfUser[user];\\n    }\\n\\n    // Returns a list of pool the user owns\\n    function userOwnedPools(address user) external virtual view returns (uint32[] memory poolIDs) {\\n        return usrOwnedPools[user];\\n    }\\n\\n\\n    //Get pool tokens and their balances\\n    function getPoolTokens(uint32 poolId) external virtual view returns (address[] memory tokens, uint[] memory balances) {\\n        return _getPoolTokensByAddr(_poolIdToAddress[poolId]);\\n    }\\n    \\n    //Get pool tokens and their balances\\n    function getPoolTokensByAddr(address poolAddr) external virtual view returns (address[] memory tokens, uint[] memory balances) {\\n        return _getPoolTokensByAddr(poolAddr);\\n    }\\n\\n    function _getPoolTokensByAddr(address poolAddr) internal virtual view returns (address[] memory tokens, uint[] memory balances) {   \\n        tokens = IPool(poolAddr).getTokens();\\n        balances = getInternalBalances(poolAddr, tokens);\\n    }\\n\\n    function getPoolTotalSupplyBaseByAddr(address poolAddr) external virtual view returns (TotalSupplyBase memory base) {\\n        return poolStates[poolAddr].totalSupplyBase;\\n    }\\n\\n\\n    function _consultPoolPricePerLpByAddr(address poolAddr, TotalSupplyBase memory ts) internal virtual returns (uint256 value) {\\n        return IMosaicOracle(mosaicOracle).consultUsdPoolPricePerLp(poolAddr, ts);\\n    }\\n\\n    function getPoolValueByAddr(address poolAddr) external virtual view returns (uint256 value) {\\n        address[] memory tokens = IPool(poolAddr).getTokens();\\n        uint256[] memory balances = getInternalBalances(poolAddr, tokens);\\n        return IMosaicOracle(mosaicOracle).getUsdPoolPrice(tokens, balances);\\n    }\\n\\n    function getPoolTotalSupplyBase(uint32 poolId) external virtual view returns (TotalSupplyBase memory ts) {\\n        address poolAddr = _poolIdToAddress[poolId];\\n        return poolStates[poolAddr].totalSupplyBase;\\n    }\\n\\n    // Called by newly created pool\\n    error Vault__PoolAlreadyRegistered();\\n    error Vault__PoolCantBeWhitelistedToken();\\n    error Vault__TxNotSignedByUser();\\n    function registerPool(address _pool, address _user, address _referredBy) external virtual onlyFactory returns (uint32 poolId) {\\n        //_delegateCall(vaultLib);\\n        LiveFun();\\n        if (_poolAddressToId[_pool] != 0) revert Vault__PoolAlreadyRegistered(); // POOL ALREADY REGISTERED\\n        if (isTokenWhitelisted(_pool)) revert Vault__PoolCantBeWhitelistedToken(); // POOL CANNOT BE WHITELISTED TOKEN\\n        if (_user != tx.origin) revert Vault__TxNotSignedByUser(); //MUST BE SIGNED BY CREATOR\\n        _registerUser(_user, _referredBy);\\n\\n        poolCount += 1 ;\\n        uint32 _poolId = poolCount;\\n\\n        _poolAddressToId[_pool] = _poolId;\\n        _poolIdToAddress[_poolId] = _pool;\\n\\n        usrOwnedPools[_user].push(_poolId);\\n\\n        emit PoolRegistered(_poolId, _pool);\\n        return _poolId;\\n    }\\n\\n    // Add tokens to an existing pool. Called by the pool contract\\n    function registerTokens(address[] memory _newTokens, bool onlyWhitelisted) external virtual {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    // Adds initial liquidity to the pool - called by pool\\n    error Vault__PoolNotFound();\\n    error Vault__AlreadyInitialized();\\n    error Vault__NotAuthorized();\\n    error Vault__ArrayMismatch();\\n    error Vault__TokenMismatch();\\n    error Vault__MinInitialLiquidityNotReached();\\n    error Vault__TokenNotInPool(address token);\\n    error Vault__InitialLiquidityAlreadyProvided();\\n    error Vault__InitialLiquidityAlreadyProvided2();\\n    error Vault__MinInitialLpLiquidityNotReached();\\n    error Vault__MinLpDustAmountNotReached();\\n\\n    function addInitialLiquidity(uint32 _poolId, address[] memory _tokens, uint[] memory _liquidity, address _lpTo, bool fromInternalBalance) external virtual nonReentrant {\\n        address _poolAddress = _poolIdToAddress[_poolId];\\n        if (_poolId == 0 || _poolAddress == address(0)) revert Vault__PoolNotFound(); // POOL NOT FOUND\\n        if (poolStates[_poolAddress].poolInitialized) revert Vault__AlreadyInitialized(); // ALREADY INITIALIZED\\n        if (msg.sender != poolFactory && msg.sender != _poolAddress && msg.sender != IPool(_poolAddress).owner()) revert Vault__NotAuthorized(); // NOT AUTHORIZED\\n        poolStates[_poolAddress].poolInitialized = true;\\n        address[] memory tokens = IPool(_poolAddress).getTokens();\\n        address _sender = msg.sender;\\n\\n        if (_liquidity.length != tokens.length) revert Vault__ArrayMismatch(); // ARRAY MISMATCH\\n\\n        for (uint i = 0; i < _liquidity.length; i++) {\\n            if (tokens[i] != _tokens[i]) revert Vault__TokenMismatch(); // TOKEN MISMATCH\\n            if (_liquidity[i] < MIN_INITIAL_LIQUIDITY) revert Vault__MinInitialLiquidityNotReached(); // MIN INITIAL LIQUIDITY NOT REACHED\\n            if (!tokenInPool[_poolAddress][tokens[i]]) revert Vault__TokenNotInPool(tokens[i]); // TOKEN NOT REGISTERED IN POOL\\n            if (fromInternalBalance) {\\n                if (getInternalBalance(_poolAddress, tokens[i]) != _liquidity[i]) revert Vault__InitialLiquidityAlreadyProvided(); // INITIAL LIQUIDITY ALREADY PROVIDED\\n            } else {\\n                if (getInternalBalance(_poolAddress, tokens[i]) != 0) revert Vault__InitialLiquidityAlreadyProvided2(); // INITIAL LIQUIDITY ALREADY PROVIDED\\n                _depositToInternalBalance(tokens[i], _sender, _poolAddress, _liquidity[i], false);\\n            }\\n            // Transfer token from User's wallet to Pool's internal balance\\n        }\\n\\n        (uint lpTokens, uint dust) = IPool(_poolAddress).initialLiquidityProvided(_tokens, _liquidity);\\n        if (lpTokens < 1e4) revert Vault__MinInitialLpLiquidityNotReached(); // MIN INITIAL LIQ VALUE NOT REACHED\\n        if (dust < 1e3) revert Vault__MinLpDustAmountNotReached(); // MIN DUST AMOUNT NOT REACHED\\n        // LP tokens credited to liquidity provider\\n        // 1e3 LP token gets \\\"burned\\\" to ensure having at least 1e3 LP token\\n\\n        _mintToInternalBalance(_poolAddress, _lpTo, lpTokens, true, true);\\n\\n        _mintToInternalBalance(_poolAddress, address(0), dust, true, true);\\n    }\\n\\n    // Remove token from an existing pool. Called by the pool contract\\n    function deregisterToken(address _tokenAddress, uint _remainingAmount) external virtual {\\n        _delegateCall(vaultLib); \\n    }\\n\\n    // This function is called by the user when adding liquidity to the pool.\\n    // It mints additional liquidity tokens as a reward.\\n    // If fromInternalBalance is true, the amounts will be deducted from user's internal balance\\n    error Vault__MintTxExpired();\\n    error Vault__CantMintZero();\\n    error Vault__UserNotWhiteListed();\\n    error Vault__MaxMintSlippageExceeded();\\n    error Vault__OnlySwapsCanSendUsd();\\n    function Mint(uint32 poolId, uint LPTokensRequested, uint[] memory amountsMaxSpend, address to, address referredBy, bool fromInternalBalance, uint deadline, uint usdValue) external virtual nonReentrant returns (uint[] memory amountsToSpend) {\\n        if (block.timestamp > deadline) revert Vault__MintTxExpired(); // Transaction expired // validate the deadline\\n        if (LPTokensRequested == 0) revert Vault__CantMintZero(); // LPTokensRequested CANNOT BE 0 // and that we mint a valid amount of LPTs\\n        if (poolId == 0 || poolId > poolCount) revert Vault__PoolNotFound(); // POOL DOES NOT EXIST // check if pool id is valid\\n\\n        // if whitelisting is enable only allow users who are WL'd to buy\\n        if (vaultState.whitelistingEnabled == true) {\\n            // we use the register contract which contains the WL\\n            if (!IRegister(register).isWhitelisted(msg.sender)) revert Vault__UserNotWhiteListed();\\n        }\\n\\n        address _poolAddr = _poolIdToAddress[poolId];\\n        LiveFun(_poolAddr);\\n        uint buyFeeLpTokens;\\n\\n        // get owner of the pool - we  need this address to credit the trade with the userpurchase value and\\n        // to allocat his fee share to this address\\n        // quesry the pool the mint amounts - we provide the totalsupplybase, too and the number of tokens to mint\\n        // we get the token amounts ecesary for the buy, the number of lp tokens issued as buy fee and the number of LPs added by the trailing fee\\n        // we will need to mint all the fee tokens for them to be claimable\\n        (amountsToSpend, buyFeeLpTokens, /*trailingFeeLpTokens*/) = IPool(_poolAddr)._mint(LPTokensRequested, poolStates[_poolAddr].totalSupplyBase);\\n\\n        address[] memory tokens = IPool(_poolAddr).getTokens();\\n        if (tokens.length != amountsMaxSpend.length) revert Vault__ArrayMismatch();\\n        // we loop through the tokens in the pool and try to deposit the necessary balances\\n        // to the pool or move from user internal balance to pool internal balance\\n        for (uint i = 0; i < tokens.length; i++) {\\n            if (amountsToSpend[i] > amountsMaxSpend[i]) revert Vault__MaxMintSlippageExceeded(); // MAX SLIPPAGE EXCEEDED\\n            if (!tokenInPool[_poolAddr][tokens[i]]) revert Vault__TokenNotInPool(tokens[i]);\\n            if (fromInternalBalance) {\\n                // Transfer token from User's internal balance to Pool's internal balance\\n                _transferInternalBalance(tokens[i], msg.sender, _poolAddr, amountsToSpend[i]);\\n            }\\n            else {\\n                // Transfer token from User's wallet to Pool's internal balance\\n                _depositToInternalBalance(tokens[i], msg.sender, _poolAddr, amountsToSpend[i], true);\\n            }\\n        }\\n\\n        // dont allow users to get referrals this way, only the swaps contract can buy LP tokens to an address different from his\\n        // with the referredBy field set, so users can only set their own referrals\\n        if (msg.sender != swapsContract && to != msg.sender) referredBy = address(0);\\n\\n        // we register the purchase in the affiliate system\\n        if (poolStates[_poolAddr].feeless) {\\n            _registerUser(to, referredBy);\\n            _mintToInternalBalance(_poolAddr, to, LPTokensRequested, true, true);\\n        } else {\\n            address trader = IPool(_poolAddr).owner();\\n            if (usdValue > 0 && msg.sender != swapsContract) revert Vault__OnlySwapsCanSendUsd();\\n            _registerUserPurchase(to, referredBy, trader, tokens, amountsToSpend, usdValue);\\n\\n            (uint trailing, uint performance) = _calculateTrailingAndPerformanceFee(_poolAddr, true, false);\\n            if (trailing > 0) IFees(fees).allocateTrailingFee(_poolAddr, trader, trailing, poolStates[_poolAddr].totalSupplyBase.amount, tx.origin);\\n            if (performance > 0) IFees(fees).allocatePerformanceFee(_poolAddr, trader, performance, poolStates[_poolAddr].totalSupplyBase.amount, tx.origin);\\n            _mintToInternalBalance(_poolAddr, fees, trailing + performance + buyFeeLpTokens, true, true);\\n\\n            IFees(fees).allocateBuyFee(_poolAddr, to, trader, buyFeeLpTokens);\\n            _mintToInternalBalance(_poolAddr, to, LPTokensRequested, true, true);\\n        }\\n\\n        emit Minted(poolId, msg.sender, to, LPTokensRequested, tokens, amountsToSpend, fromInternalBalance);\\n        return amountsToSpend;\\n    }\\n\\n    // This function is called when a liquidity provider removes liquidity from the pool.\\n    // It burns the liquidity tokens and sends back the tokens as ERC20 transfer.\\n    // If toInternalBalance is true, the tokens will be deposited to user's internal balance\\n    error Vault__BurnTxExpired();\\n    error Vault__CantBurnZero();\\n    error Vault__OnlySwaptMaySetFrom();\\n    error Vault__MaxBurnSlippageExceeded();\\n    function Burn(uint32 poolId, uint LPTokensToBurn, uint[] memory amountsMinReceive, bool toInternalBalance, uint deadline, address from) external virtual nonReentrant returns (uint[] memory amountsReceived){\\n        if (block.timestamp > deadline) revert Vault__BurnTxExpired(); // Transaction expired\\n        if (LPTokensToBurn == 0) revert Vault__CantBurnZero(); // LPTokensToBurn CANNOT BE 0\\n        if (from != msg.sender && msg.sender != swapsContract) revert Vault__OnlySwaptMaySetFrom(); // ONLY SWAPS\\n\\n        address _poolAddr = _poolIdToAddress[poolId];\\n        LiveFun(_poolAddr);\\n        address[] memory tokens = IPool(_poolAddr).getTokens();\\n        (uint[] memory amountsToReceive, uint trailingFeeLpTokens) = IPool(_poolAddr)._burn(LPTokensToBurn, poolStates[_poolAddr].totalSupplyBase);\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            if (amountsToReceive[i] < amountsMinReceive[i]) revert Vault__MaxBurnSlippageExceeded(); // MAX SLIPPAGE EXCEEDED\\n            if (toInternalBalance) {\\n                // Transfer token from Pool's internal balance to User's internal balance\\n                _transferInternalBalance(tokens[i], _poolAddr, msg.sender, amountsToReceive[i]);\\n            }\\n\\n            else {\\n                // Transfer token from Pool's internal balance to User's wallet\\n                _withdrawFromInternalBalance(tokens[i], _poolAddr, msg.sender, amountsToReceive[i]);\\n            }\\n        }\\n        //Allow from parameter when the caller is the swap contract, other case ignore it and use the msg.sender\\n\\n        if (poolStates[_poolAddr].feeless) {\\n            _burnFromInternalBalance(_poolAddr, msg.sender, LPTokensToBurn, true, true);\\n        } else {\\n            address trader = IPool(_poolAddr).owner();\\n            (uint trailing, uint performance) = _calculateTrailingAndPerformanceFee(_poolAddr, true, false);\\n            IFees(fees).allocateTrailingFee(_poolAddr, trader, trailing, poolStates[_poolAddr].totalSupplyBase.amount, tx.origin);\\n            IFees(fees).allocatePerformanceFee(_poolAddr, trader, performance, poolStates[_poolAddr].totalSupplyBase.amount, tx.origin);\\n            _mintToInternalBalance(_poolAddr, fees, trailing + performance, true, true);\\n            _burnFromInternalBalance(_poolAddr, msg.sender, LPTokensToBurn, true, true);\\n        }\\n\\n        emit Burned(poolId, msg.sender, from, LPTokensToBurn, tokens, amountsToReceive, toInternalBalance);\\n        return amountsToReceive;\\n    }\\n\\n\\n    /************************************************************************************/\\n    /* Swap                                                                             */\\n    /************************************************************************************/\\n\\n    // Executes a swap operation on a single Pool. Called by the user\\n    // If the swap is initiated with givenInOrOut == 1 (i.e., the number of tokens to be sent to the Pool is specified),\\n    // it returns the amount of tokens taken from the Pool, which should not be less than limit.\\n    // If the swap is initiated with givenInOrOut == 0 parameter (i.e., the number of tokens to be taken from the Pool is specified),\\n    // it returns the amount of tokens sent to the Pool, which should not exceed limit.\\n    // Emits a Swap event\\n    error Vault__SwapTxExpired();\\n    error Vault__CantSwapTheSameToken();\\n    error Vault__CantSwapPoolToken();\\n    error Vault__CantSwapZero();\\n    error Vault__CantSellNonWhitelistedToken();\\n    function swap(address poolAddress, bool givenInOrOut, address tokenIn, address tokenOut, uint amount, bool fromInternalBalance, uint limit, uint64 deadline) public virtual returns (uint calculatedAmount) { // nonReentrant returns (uint calculatedAmount) {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    // Execute a multi-hop token swap between multiple pairs of tokens on their corresponding pools\\n    // Example: 100 tokenA -> tokenB -> tokenC\\n    // pools = [pool1, pool2], tokens = [tokenA, tokenB, tokenC], amountIn = 100\\n    // The returned amount of tokenC should not be less than limit\\n    function multiSwap(address[] memory pools, address[] memory tokens, uint amountIn, bool fromInternalBalance, uint limit, uint64 deadline) external virtual returns (uint calculatedAmount) {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    /************************************************************************************/\\n    /* Dutch Auction                                                                    */\\n    /************************************************************************************/\\n\\n    function getAuctionInfo(uint auctionId) external virtual view returns (AuctionInfo memory) {\\n        return auctions[auctionId];\\n    }\\n\\n    function isRunning(uint auctionId) external virtual view returns (bool) {\\n        uint _expiryTime = auctions[auctionId].startsAt + auctions[auctionId].duration;\\n       if (auctions[auctionId].remainingAmount == 0 || _expiryTime < block.timestamp) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function startAuction(address tokenToSell, uint amountToSell, address tokenToBuy, uint32 duration, uint32 expiration, uint endingPrice) external virtual returns (uint auctionId) {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    // pool address can call this\\n    function stopAuction(uint auctionId) external virtual {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    function getBidPriceAt(uint auctionId, uint32 _now) public virtual view returns (uint currentPrice, uint remainingAmount) {\\n        return _getBidPrice(auctionId, _now);\\n    }\\n\\n    function getBidPrice(uint auctionId) public virtual view returns (uint currentPrice, uint remainingAmount) {\\n        return _getBidPrice(auctionId, uint32(block.timestamp));\\n    }\\n\\n    function _getBidPrice(uint auctionId, uint32 _now) internal view returns (uint currentPrice, uint remainingAmount) {\\n        uint32 _start = auctions[auctionId].startsAt;\\n        uint32 _duration = auctions[auctionId].duration;\\n        uint32 _expiration = auctions[auctionId].expiration;\\n        remainingAmount = auctions[auctionId].remainingAmount;\\n        uint64 _end = _start + _duration + _expiration;\\n        uint32 _elapsed = _now - _start;             // Reverts if _now < _start\\n\\n        if (_elapsed > _duration) {\\n            _elapsed = _duration;\\n        }\\n        if (_now >= _end || remainingAmount == 0) {\\n             return (0, 0);\\n        }\\n\\n        uint _startingPrice = auctions[auctionId].startingPrice;\\n        uint _endingPrice = auctions[auctionId].endingPrice;\\n        uint _startingAmount = auctions[auctionId].startingAmount;\\n\\n        uint _delta = (_startingPrice - _endingPrice) * _elapsed / _duration;\\n        currentPrice = (_startingPrice - _delta) * remainingAmount / _startingAmount;\\n    }\\n\\n    // Place a bid for the specified 'auctionId'. Fractional bids are supported, with the 'amount'\\n    // representing the number of tokens to purchase. The amounts are deducted from and credited to the\\n    // user's internal balance. If there are insufficient tokens in the user's internal balance, the function reverts.\\n    // If there are fewer tokens available for the auction than the specified 'amount' and enableLessAmount == 1,\\n    // the function purchases all remaining tokens (which may be less than the specified amount).\\n    // If enableLessAmount is set to 0, the function reverts.\\n    function bid(uint auctionId, uint amount, bool enableLessAmount, bool fromInternalBalance, uint deadline) external virtual returns (uint spent) {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    //Handling the mint/burn/transfers on poolOfUsers array to track the owned baskets\\n    function _handlerForPoolOfUser(address user, address poolAddr, bool up) internal {\\n        if (vaultState.userPoolTrackingDisabled) return;\\n        uint32 poolId = _poolAddressToId[poolAddr];\\n        if (poolId == 0) return;\\n        if (up && _internalBalance[user][poolAddr] > 0)\\n        {\\n            uint index = poolOfUserIndexes[user][poolId];\\n            if(index == 0)\\n            {\\n                // First deposit for the user. Add pool address to user's joined pool list\\n                poolOfUser[user].push(poolId);\\n                //save the index for the new array item\\n                poolOfUserIndexes[user][poolId] = (poolOfUser[user].length).toUint32();\\n            }\\n        } else if (!up && _internalBalance[user][poolAddr] == 0) {\\n            // direction is down and we hit the bottom, so we remove the address\\n            uint index = poolOfUserIndexes[user][poolId];\\n            // User exited completely. Remove poolId from user's joined pool list\\n            if(index > 0){\\n                // pop would revert if length = 0 so no need for math checking here, save some gas\\n                unchecked {\\n                    index--;\\n                    uint32 replacementPoolId = poolOfUser[user][poolOfUser[user].length - 1];\\n                    poolOfUserIndexes[user][replacementPoolId] = uint32(index);\\n                    poolOfUser[user][index] = replacementPoolId;\\n                    poolOfUser[user].pop();\\n                    poolOfUserIndexes[user][poolId] = 0;\\n                }\\n            }\\n        }\\n    }\\n\\n    // /************************************************************************************/\\n    // /* Flash Loan                                                                       */\\n    // /************************************************************************************/\\n    // // https://eips.ethereum.org/EIPS/eip-3156\\n\\n    error Vault__FlashAmountTooHigh();\\n    error Vault__FlashTransferFailed();\\n    error Vault__FlashTransferIrregular();\\n    error Vault__FlashCallbackFailed();\\n    error Vault__FlashRepayFailed();\\n    error Vault__FlashRepayIrregular();\\n\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external virtual override returns(bool) {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view virtual override returns (uint256) {\\n        return _flashFee(amount);\\n    }\\n\\n    /**\\n     * @dev The fee to be charged for a given loan. Internal function with no checks.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function _flashFee(\\n        uint256 amount\\n    ) internal virtual view returns (uint256) {\\n        return zeroFee[msg.sender] ? 0 : (amount * vaultState.flashFee) / 10000;\\n    }\\n\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(\\n        address token\\n    ) external virtual view override returns (uint256) {\\n        return IERC20(token).balanceOf(address(this)) * 49 / 100;\\n    }\\n\\n\\n    // Emergency withdraw. Functions in both pool-specific and global recovery modes.\\n    function emergencyWithdraw(address poolAddress, address _user, bool internalBalance) external virtual {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    // Once a year has passed since the emergency shutdown was triggered, the admin can recover lost funds.\\n    function emergencyWithdrawAll(address _token, address _to, uint _amount) external virtual {\\n        _delegateCall(vaultLib);\\n    }\\n\\n    // Once a year has passed since the emergency shutdown was triggered, the admin can recover lost funds from a specific pool.\\n    function emergencyWithdrawPool(address _pool, address _token, address _to, uint _amount) external virtual {\\n        _delegateCall(vaultLib);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultLib\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Governed__EmergencyStopped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Governed__NotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Governed__NotStopped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__BurnTxExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__CantBurnZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__CantDepositPoolToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__CantMintZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__CantSellNonWhitelistedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__CantSwapPoolToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__CantSwapTheSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__CantSwapZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__CantWithdrawPoolToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__EmergencyAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__EmergencyStopped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__FlashAmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__FlashCallbackFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__FlashRepayFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__FlashRepayIrregular\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__FlashTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__FlashTransferIrregular\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"Vault__GenericError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__InitialLiquidityAlreadyProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__InitialLiquidityAlreadyProvided2\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__MaxBurnSlippageExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__MaxMintSlippageExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__MinInitialLiquidityNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__MinInitialLpLiquidityNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__MinLpDustAmountNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__MintTxExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"Vault__NotAPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__OnlyAdminOrPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__OnlyFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__OnlyPoolCanBeBurned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__OnlyPoolCanBeMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__OnlySwapsCanSendUsd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__OnlySwaptMaySetFrom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__OnlyWhitelistedTokensCanBeDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__PoolCantBeWhitelistedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__PoolNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__SwapTxExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__TokenMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Vault__TokenNotInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__TxNotSignedByUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Vault__UserNotWhiteListed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startsAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IVault.AuctionInfo\",\"name\":\"_info\",\"type\":\"tuple\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"InitialLiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"InternalBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenToBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"TokenWhitelistChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokensDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newTokens\",\"type\":\"address[]\"}],\"name\":\"TokensRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"indexed\":false,\"internalType\":\"struct IVault.TotalSupplyBase\",\"name\":\"supplyBase\",\"type\":\"tuple\"}],\"name\":\"TotalSupplyBaseChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_ShouldBeAdmin\",\"type\":\"bool\"}],\"name\":\"AddRemoveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_ShouldBeBoosted\",\"type\":\"bool\"}],\"name\":\"AddRemoveBoostedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_ShouldBeZeroFee\",\"type\":\"bool\"}],\"name\":\"AddRemoveZeroFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"LPTokensToBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsMinReceive\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Burn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsReceived\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLBACK_SUCCESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"LPTokensRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsMaxSpend\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsToSpend\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_poolId\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_liquidity\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_lpTo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"allocateTrailingAndPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enableLessAmount\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnAsTokenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToInternalBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToInternalBalanceToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_remainingAmount\",\"type\":\"uint256\"}],\"name\":\"deregisterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"internalBalance\",\"type\":\"bool\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startsAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.AuctionInfo\",\"name\":\"auctionInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startsAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenToBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.AuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getBidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_now\",\"type\":\"uint32\"}],\"name\":\"getBidPriceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernanceState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"running\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"}],\"internalType\":\"struct IGoverned.GovernanceState\",\"name\":\"govState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getInternalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getInternalBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPoolState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"poolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"poolEmergencyMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"feeless\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"boosted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"poolTokenCount\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"emergencyModeTime\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"lastTrailingTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastPerformanceTimestamp\",\"type\":\"uint48\"},{\"internalType\":\"uint216\",\"name\":\"emergencyModeLPs\",\"type\":\"uint216\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"internalType\":\"struct IVault.TotalSupplyBase\",\"name\":\"totalSupplyBase\",\"type\":\"tuple\"}],\"internalType\":\"struct IVault.PoolState\",\"name\":\"_poolState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"getPoolTokensByAddr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"getPoolTotalSupplyBase\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"internalType\":\"struct IVault.TotalSupplyBase\",\"name\":\"ts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"getPoolTotalSupplyBaseByAddr\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"amount\",\"type\":\"uint224\"}],\"internalType\":\"struct IVault.TotalSupplyBase\",\"name\":\"base\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"getPoolValueByAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"userPoolTrackingDisabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"emergencyMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"whitelistingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flashEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"maxPoolTokenCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeToProtocol\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bidMultiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"flashFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"swapFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bidMinDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rebalancingMinDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"emergencyModeTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"internalType\":\"struct IVault.VaultState\",\"name\":\"_vaultState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isAdmin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"isRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintAsTokenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mosaicOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"multiSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"calculatedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"poolAddressToId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"name\":\"poolIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"onlyWhitelisted\",\"type\":\"bool\"}],\"name\":\"registerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfManageMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"setPoolEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_whitelisted\",\"type\":\"bool[]\"}],\"name\":\"setWhitelistedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenToBuy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"endingPrice\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"stopAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"givenInOrOut\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"calculatedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromAsTokenContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferInternalBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userJoinedPools\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"poolIDs\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userOwnedPools\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"poolIDs\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userProfile\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromInternalBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromInternalBalanceToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"zeroFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "000000000000000000000000cdf8a94da58bdadf73f2f1f7f07447f318f0850c0000000000000000000000009e8ade56e2030b504c32c51ba909b84b8ef25f7a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}