{"SourceCode": "//SPDX-License-Identifier: Unlicensed\r\npragma solidity >=0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary BraveCommon {\r\n    using SafeMath for uint256;\r\n\r\n    function random(uint256 from, uint256 to, uint256 salty) internal view returns (uint256) {\r\n        uint256 seed = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp + block.difficulty +\r\n                    ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (block.timestamp)) +\r\n                    block.gaslimit +\r\n                    ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (block.timestamp)) +\r\n                    block.number +\r\n                    salty\r\n                )\r\n            )\r\n        );\r\n        return seed.mod(to - from) + from;\r\n    }\r\n\r\n    function getTokenBNBPairAddress(IPancakeRouter02 router, address tokenAddress) internal view returns (address)\r\n    {\r\n        return IPancakeFactory(router.factory()).getPair(tokenAddress, router.WETH());     \r\n    }\r\n}\r\n\r\ncontract BraveToken is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _tTotal = 10000000000 * 10 ** 6 * 10 ** 9;\r\n\r\n    string private _name = \"BraveToken\";\r\n    string private _symbol = \"Brave\";\r\n    uint8 private _decimals = 9;\r\n\r\n    IPancakeRouter02 private pancakeRouter;\r\n    BraveWhiteList private whiteList;\r\n\r\n    constructor (\r\n        address payable routerAddress,\r\n        address whiteListAddress\r\n    ) public {\r\n        _tOwned[_msgSender()] = _tTotal.mul(94) / 100;\r\n        _tOwned[salePool] = _tTotal.mul(5) / 100;\r\n        _tOwned[addressAD] = _tTotal / 100;\r\n\r\n        IPancakeRouter02 _pancakeRouter = IPancakeRouter02(routerAddress);\r\n        pancakeRouter = _pancakeRouter;\r\n        whiteList = BraveWhiteList(whiteListAddress);\r\n\r\n        updateRewardTime(salePool);\r\n        _lotteryIncluded.push(salePool);\r\n        _lotterySeek[salePool] = 7;\r\n\r\n        lotteryTermsAmount.push(0);\r\n\r\n        wonNumCurrent = whiteList.wonNum();\r\n        claimLotteryNumberCurrent = whiteList.claimLotteryNumber();\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(amount > 0);\r\n\r\n        address pancakePair = BraveCommon.getTokenBNBPairAddress(pancakeRouter, address(this));\r\n\r\n        if(from == pancakePair) {\r\n            if(to == address(pancakeRouter)) {\r\n                _transferStandard(from, to, amount);\r\n            }else {\r\n                require(to == address(addressAD) && swapUnlock);\r\n                uint256 restAmount = amount.sub(getBurnTxFee(from, amount));\r\n                if(!isAccountActive[tx.origin]) {\r\n                    isAccountActive[tx.origin] = true;\r\n                    activeAccountsNum += 1;\r\n                }\r\n                includeLotteryAccount(tx.origin, restAmount);\r\n                _transferStandard(from, tx.origin, restAmount);\r\n                updateRewardTime(tx.origin);\r\n                swapUnlock = false;\r\n            }\r\n        }else if(to == pancakePair) {\r\n            if(from != owner()) {\r\n                require(from == address(this));\r\n            }\r\n            _transferStandard(from, to, amount);\r\n        }else {\r\n            if(!isAccountActive[to]) {\r\n                isAccountActive[to] = true;\r\n                activeAccountsNum += 1;\r\n            }\r\n            if(whiteList.whiteListActive(from) == true || whiteList.whiteListActive(to) == true) {\r\n                _transferStandard(from, to, amount);\r\n            }else {\r\n                swapBraveCtoC(from, to, amount);\r\n                updateRewardTime(from);\r\n                updateRewardTime(to);\r\n            }\r\n        }\r\n    }\r\n\r\n    function lotteryOpen(uint256 amount) private {\r\n        address luckyAddress;\r\n        claimLotteryCount += 1;\r\n        if(_lotteryIncluded.length > 0) {\r\n            for(uint256 i; i < wonNumCurrent; i++) {\r\n                luckyAddress = _lotteryIncluded[BraveCommon.random(0, _lotteryIncluded.length, amount)];\r\n                if(accountLotteryHistory[luckyAddress][lotteryTerm] == 0) {\r\n                    accountLotteryTerms[luckyAddress].push(lotteryTerm);\r\n                }\r\n                accountLotteryHistory[luckyAddress][lotteryTerm] += 1;\r\n            }\r\n        }\r\n        if(claimLotteryCount >= claimLotteryNumberCurrent) {\r\n            lotteryTermsAmount.pop();\r\n            lotteryTermsAmount.push(termLotteryBNB.div(claimLotteryNumberCurrent.mul(wonNumCurrent)));\r\n            lotteryTerm += 1;\r\n            lotteryTermsAmount.push(0);\r\n            claimLotteryCount = 0;\r\n            termLotteryBNB = 0;\r\n            wonNumCurrent = whiteList.wonNum();\r\n            claimLotteryNumberCurrent = whiteList.claimLotteryNumber();\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 amount) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(amount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    bool private swapUnlock;\r\n\r\n    mapping(address => bool) private isAccountActive;\r\n    uint256 public activeAccountsNum;\r\n\r\n    address private salePool = 0x01DdADFc46b0BD4FBe72d5619Dc54239108eC506;\r\n    address private addressAD = 0x3A9f4021365c6117bDfE0095604959931D1fA6e6;\r\n\r\n    uint256 public lotteryPoolBNB;\r\n    uint256 public rewardPoolBNB;\r\n\r\n    uint256 public claimLotteryCount = 0;\r\n    uint256 public getLotteryAmount = 5000000000000 * 10**9;\r\n    uint256 private termLotteryBNB;\r\n    address[] private _lotteryIncluded;\r\n    mapping(address => uint256) public _lotterySeek;\r\n    uint256 public lotteryTerm;\r\n    uint256[] public lotteryTermsAmount;\r\n    mapping(address => mapping(uint256 => uint256)) public accountLotteryHistory;\r\n    mapping(address => uint256[]) public accountLotteryTerms;\r\n    uint256 public claimLotteryNumberCurrent;\r\n    uint256 public wonNumCurrent;\r\n    uint256 public lotteryGetTermsLimit = 100;\r\n\r\n    mapping (address => uint256) public nextRewardTime;\r\n\r\n    uint256 public buyLimitPerDay = 10;\r\n    uint256 private amountLimitPerTime = 4 * 10**17;\r\n\r\n    mapping(address => uint256) public accountBuyNumState;\r\n    mapping(address => uint256) private accountBuyDayState;\r\n\r\n    function excludeLotteryAccount(address sender, uint256 amount) private {\r\n        if(_tOwned[sender] >= getLotteryAmount && _tOwned[sender].sub(amount) < getLotteryAmount) {\r\n            _lotteryIncluded[_lotterySeek[sender]-7] = _lotteryIncluded[_lotteryIncluded.length-1];\r\n            _lotterySeek[_lotteryIncluded[_lotteryIncluded.length-1]] = _lotterySeek[sender];\r\n            _lotterySeek[sender] = 0;\r\n            _lotteryIncluded.pop();\r\n        }\r\n    }\r\n\r\n    function includeLotteryAccount(address recipient, uint256 amount) private {\r\n        if(_tOwned[recipient] < getLotteryAmount && _tOwned[recipient].add(amount) >= getLotteryAmount) {\r\n            _lotteryIncluded.push(recipient);\r\n            _lotterySeek[recipient] = _lotteryIncluded.length-1+7;\r\n        }\r\n    }\r\n\r\n    function includeLotteryAccountForce() public {\r\n        require(_lotterySeek[msg.sender] == 0 && _tOwned[msg.sender] >= getLotteryAmount);\r\n        _lotteryIncluded.push(msg.sender);\r\n        _lotterySeek[msg.sender] = _lotteryIncluded.length-1+7;\r\n    }\r\n\r\n    function claimReward() public {\r\n        require(nextRewardTime[msg.sender] != 0 && block.timestamp >= nextRewardTime[msg.sender]);\r\n        uint256 reward = getRewardAmount(msg.sender);\r\n        rewardPoolBNB = rewardPoolBNB.sub(reward);\r\n        (bool sent,) = msg.sender.call{value : reward}(\"\");\r\n        require(sent);\r\n        updateRewardTime(msg.sender);\r\n    }\r\n\r\n    function claimLottery() public {\r\n        uint256 reward;\r\n        uint256 term;\r\n        uint256 times = getLotteryLength(msg.sender);\r\n        uint256 temp = accountLotteryTerms[msg.sender][times-1];\r\n        for(uint256 i; i < times; i++) {\r\n            if(i == lotteryGetTermsLimit) break;\r\n            term = accountLotteryTerms[msg.sender][times-i-1];\r\n            reward += lotteryTermsAmount[term].mul(accountLotteryHistory[msg.sender][term]);\r\n            accountLotteryTerms[msg.sender].pop();\r\n        }\r\n        if(lotteryTermsAmount[temp] == 0) {\r\n            accountLotteryTerms[msg.sender].push(temp);\r\n        }\r\n        require(reward > 0);\r\n        lotteryPoolBNB = lotteryPoolBNB.sub(reward);\r\n        (bool sent,) = msg.sender.call{value : reward}(\"\");\r\n        require(sent);\r\n    }\r\n\r\n    function getLotteryLength(address account) public view returns (uint256) {\r\n        return accountLotteryTerms[account].length;\r\n    }\r\n\r\n    function updateRewardTime(address account) private {\r\n        nextRewardTime[account] = block.timestamp + whiteList.rewardLimitPeriod();\r\n    }\r\n\r\n    function updateBuyState(address account) private {\r\n        uint256 getTodayCount = block.timestamp / 86400;\r\n        if(accountBuyDayState[account] != getTodayCount) {\r\n            accountBuyDayState[account] = getTodayCount;\r\n            accountBuyNumState[account] = 0;\r\n        }\r\n    }\r\n\r\n    function getBurnTxFee(address from, uint256 amount) private returns (uint256) {\r\n        uint256 burnFee = amount.mul(4) / 100;\r\n        _transferStandard(from, address(0x000000000000000000000000000000000000dEaD), burnFee);\r\n        return burnFee;\r\n    }\r\n\r\n    function paySwapTxFee(uint256 amount) private {\r\n        uint256 txFeeBase = amount / 6;\r\n        uint256 restFee = amount.sub(txFeeBase.mul(3));\r\n        lotteryPoolBNB += txFeeBase.mul(2);\r\n        termLotteryBNB += txFeeBase.mul(2);\r\n        rewardPoolBNB += restFee;\r\n        (bool sent,) = salePool.call{value : txFeeBase}(\"\");\r\n        require(sent);\r\n    }\r\n\r\n    function setBuyLimitPerDay(uint256 num) public {\r\n        require(tx.origin == owner());\r\n        buyLimitPerDay = num;\r\n    }\r\n\r\n    function setAmountLimitPerTime(uint256 amount) public {\r\n        require(tx.origin == owner());\r\n        amountLimitPerTime = amount;\r\n    }\r\n\r\n    function setGetLotteryAmount(uint256 amount) public {\r\n        require(tx.origin == owner());\r\n        getLotteryAmount = amount;\r\n    }\r\n\r\n    function swapBNBForBrave() public payable {\r\n        swapUnlock = true;\r\n\r\n        uint256 bnbCanSwap = msg.value;\r\n\r\n        updateBuyState(msg.sender);\r\n        require((bnbCanSwap <= amountLimitPerTime) && (accountBuyNumState[msg.sender] < buyLimitPerDay));\r\n        accountBuyNumState[msg.sender] += 1;\r\n\r\n        uint256 swapTxFee = bnbCanSwap.mul(6) / 100;\r\n        uint256 bnbSwap = bnbCanSwap.sub(swapTxFee);\r\n        paySwapTxFee(swapTxFee);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(this);\r\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: bnbSwap}(\r\n            0,\r\n            path,\r\n            address(addressAD),\r\n            block.timestamp\r\n        );\r\n\r\n        lotteryOpen(msg.value);\r\n    }\r\n\r\n    function swapTokenForBrave(uint256 amount, address tokenAddress) public {   \r\n        swapUnlock = true;\r\n\r\n        IBEP20(tokenAddress).transferFrom(msg.sender, address(this), amount);\r\n        IBEP20(tokenAddress).approve(address(pancakeRouter), amount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenAddress;\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        uint256[] memory bnbCanSwap = pancakeRouter.getAmountsOut(amount, path);\r\n\r\n        updateBuyState(msg.sender);\r\n        require((bnbCanSwap[1] <= amountLimitPerTime) && (accountBuyNumState[msg.sender] < buyLimitPerDay));\r\n        accountBuyNumState[msg.sender] += 1;\r\n\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 swapTxFee = bnbCanSwap[1].mul(6) / 100;\r\n        uint256 bnbSwap = bnbCanSwap[1].sub(swapTxFee);\r\n        paySwapTxFee(swapTxFee);\r\n\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(this);\r\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: bnbSwap}(\r\n            0,\r\n            path,\r\n            address(addressAD),\r\n            block.timestamp\r\n        );\r\n\r\n        lotteryOpen(amount);\r\n    }\r\n\r\n    function swapBraveForToken(uint256 amount, address tokenAddress) public {\r\n        excludeLotteryAccount(msg.sender, amount);\r\n        updateRewardTime(msg.sender);\r\n\r\n        _transferStandard(msg.sender, address(this), amount);\r\n\r\n        uint256 restAmount = amount.sub(getBurnTxFee(address(this), amount));\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        uint256[] memory bnbCanSwap = pancakeRouter.getAmountsOut(restAmount, path);\r\n\r\n        _approve(address(this), address(pancakeRouter), restAmount);\r\n\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            restAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 swapTxFee = bnbCanSwap[1].mul(6) / 100;\r\n        uint256 bnbSwap = bnbCanSwap[1].sub(swapTxFee);\r\n        paySwapTxFee(swapTxFee);\r\n\r\n        if(tokenAddress == address(0)) {\r\n            (bool sent, ) = tx.origin.call{ value: bnbSwap }(\"\");\r\n            require(sent);\r\n        }else {\r\n            path[0] = pancakeRouter.WETH();\r\n            path[1] = tokenAddress;\r\n            pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: bnbSwap}(\r\n                0,\r\n                path,\r\n                tx.origin,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        lotteryOpen(amount);   \r\n    }\r\n\r\n    function swapBraveCtoC(address from, address to, uint256 amount) private {\r\n        excludeLotteryAccount(from, amount);\r\n\r\n        uint256 burnAmount = getBurnTxFee(from, amount);\r\n        uint256 swapAmount = amount.mul(6) / 100;\r\n        uint256 restAmount = amount.sub(swapAmount).sub(burnAmount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        uint256[] memory bnbCanSwap = pancakeRouter.getAmountsOut(swapAmount, path);\r\n\r\n        _transferStandard(from, address(this), swapAmount);\r\n\r\n        _approve(address(this), address(pancakeRouter), swapAmount);\r\n\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            swapAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        paySwapTxFee(bnbCanSwap[1]);\r\n\r\n        if(to != address(0x000000000000000000000000000000000000dEaD)) {\r\n            includeLotteryAccount(to, restAmount);\r\n        }\r\n        _transferStandard(from, to, restAmount);\r\n\r\n        lotteryOpen(amount);\r\n    }\r\n\r\n    function getPairCondition() public view returns (uint256 pairBNBAmount, uint256 pairTokenAmount, uint256 tokenTotal) {\r\n        address pancakePair = BraveCommon.getTokenBNBPairAddress(pancakeRouter, address(this));\r\n        if(pancakePair == address(0)) {\r\n            pairBNBAmount = 0;\r\n            pairTokenAmount = 0;\r\n        }else {\r\n            pairBNBAmount = IBEP20(pancakeRouter.WETH()).balanceOf(pancakePair);\r\n            pairTokenAmount = _tOwned[pancakePair];\r\n        }\r\n        tokenTotal = _tTotal;\r\n    }\r\n\r\n    function getRewardAmount(address account) public view returns (uint256) {\r\n        return rewardPoolBNB.mul(whiteList.discount()).div(100).mul(_tOwned[account]).div(getCurrency());\r\n    }\r\n\r\n    function getCurrency() public view returns (uint256) {\r\n        address pancakePair = BraveCommon.getTokenBNBPairAddress(pancakeRouter, address(this));\r\n        return _tTotal.sub(_tOwned[address(0x000000000000000000000000000000000000dEaD)]).sub(_tOwned[pancakePair]);\r\n    }\r\n}\r\n\r\ncontract BraveWhiteList is Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address[] public whiteList;\r\n\r\n    mapping(address => bool) public whiteListActive;\r\n\r\n    uint256 public discount = 80;\r\n    uint256 public claimLotteryNumber = 100;\r\n    uint256 public rewardLimitPeriod = 3 days;\r\n    uint256 public wonNum = 1;\r\n\r\n    constructor () public {\r\n        whiteList.push(msg.sender);\r\n        whiteList.push(0x01DdADFc46b0BD4FBe72d5619Dc54239108eC506);\r\n        whiteList.push(0x3A9f4021365c6117bDfE0095604959931D1fA6e6);\r\n        whiteListActive[msg.sender] = true;\r\n        whiteListActive[0x01DdADFc46b0BD4FBe72d5619Dc54239108eC506] = true;\r\n        whiteListActive[0x3A9f4021365c6117bDfE0095604959931D1fA6e6] = true;\r\n    }\r\n\r\n    function getLotteryTermWonNum() public view returns(uint256) {\r\n        return claimLotteryNumber.mul(wonNum);\r\n    }\r\n\r\n    function setWonNum(uint256 num) public {\r\n        require(tx.origin == owner() && num >= 1);\r\n        wonNum = num;\r\n    }\r\n\r\n    function setClaimLotteryNumber(uint256 num) public {\r\n        require(tx.origin == owner());\r\n        claimLotteryNumber = num;\r\n    }\r\n\r\n    function setRewardLimitPeriod(uint256 time) public {\r\n        require(tx.origin == owner());\r\n        rewardLimitPeriod = time;\r\n    }\r\n\r\n    function setDiscount(uint256 rate) public {\r\n        require(tx.origin == owner() && rate <= 100);\r\n        discount = rate;\r\n    }\r\n\r\n    function addWhiteList(address contractAddress) public onlyOwner {\r\n        whiteList.push(contractAddress);\r\n        whiteListActive[contractAddress] = true;\r\n    }\r\n\r\n    function removeWhiteList(address contractAddress) public onlyOwner {\r\n        for(uint i; i < whiteList.length; i++) {\r\n            if(whiteList[i] == contractAddress) {\r\n                whiteList[i] = whiteList[whiteList.length-1];\r\n                whiteList.pop();\r\n                whiteListActive[contractAddress] = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract BraveTokenView {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    IPancakeRouter02 public immutable pancakeRouter;\r\n\r\n    constructor (\r\n        address payable routerAddress\r\n    ) public {\r\n        IPancakeRouter02 _pancakeRouter = IPancakeRouter02(routerAddress);\r\n        pancakeRouter = _pancakeRouter;\r\n    }\r\n    \r\n    function getPancakeBNBTokenPair(address tokenAddress) public view returns (address) {\r\n        return BraveCommon.getTokenBNBPairAddress(pancakeRouter, tokenAddress);\r\n    }\r\n\r\n    function getBNBTokenPairAmounts(address tokenAddress) public view returns (address, uint256, address, uint256) {\r\n        address pancakePair = getPancakeBNBTokenPair(tokenAddress);\r\n        (uint256 reserve0, uint256 reserve1,) = IPancakePair(pancakePair).getReserves();\r\n        address token0Address = IPancakePair(pancakePair).token0();\r\n        address token1Address = IPancakePair(pancakePair).token1();\r\n        return (token0Address, reserve0, token1Address, reserve1);\r\n    }\r\n\r\n    function getNowTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getAddressLotteryBalance(address account, BraveToken tokenAddress) public view returns (uint256 reward) {\r\n        uint256 term;\r\n        uint256 times = tokenAddress.getLotteryLength(account);\r\n        if(times == 0) {\r\n            return 0;\r\n        }\r\n        for(uint256 i; i < times; i++) {\r\n            term = tokenAddress.accountLotteryTerms(account, times-i-1);\r\n            reward += tokenAddress.lotteryTermsAmount(term).mul(tokenAddress.accountLotteryHistory(account, term));\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"whiteListAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lotterySeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountBuyNumState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountLotteryHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountLotteryTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeAccountsNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimitPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLotteryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLotteryNumberCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLotteryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pairBNBAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"includeLotteryAccountForce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryGetTermsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryPoolBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryTermsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmountLimitPerTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setBuyLimitPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setGetLotteryAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBNBForBrave\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"swapBraveForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"swapTokenForBrave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wonNumCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BraveToken", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000026368a11c94fd5f8369a3baad3d7e22afe4674dd", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dfc7d2ac4a04c4cc31345ee28501ef8f1379cf544dba5441f0a3cdf4e69c6f12"}