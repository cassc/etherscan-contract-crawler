{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Crowdsale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport './Structs.sol';\\n\\ncontract Crowdsale is Ownable, Pausable {\\n  using SafeERC20 for IERC20;\\n\\n  // ========================================\\n  // State variables\\n  // ========================================\\n\\n  uint8 internal constant ETH_DECIMALS = 18;\\n  uint256 internal constant USD_PRICE = 100000000;\\n\\n  // Constant contract configuration\\n  CrowdsaleBaseConfig internal config;\\n\\n  // Amount of tokens sold during SALE phase\\n  // and not yet claimed\\n  uint256 public locked;\\n\\n  // Amounts of tokens each address bought\\n  // and that are not yet claimed\\n  mapping(address => uint256) public balance;\\n\\n  // Amounts of tokens each address bought\\n  mapping(address => uint256) public maxBalance;\\n\\n  // Events\\n  event Buy(address indexed from, uint256 indexed value);\\n  event Claim(address indexed from, uint256 indexed value);\\n\\n  // ========================================\\n  // Constructor\\n  // ========================================\\n\\n  constructor(CrowdsaleBaseConfig memory _config) {\\n    // Copy config from memory to storage\\n    _initializeConfig(_config);\\n  }\\n\\n  // ========================================\\n  // Main functions\\n  // ========================================\\n\\n  // Transfer ETH and receive tokens in exchange\\n  receive() external payable {\\n    _buy(msg.value, false);\\n  }\\n\\n  // Transfer Stablecoin and receive tokens in exchange\\n  function buyForUSD(uint256 value) external {\\n    _buy(value, true);\\n  }\\n\\n  // Main function for buying tokens for both ETH and stable coins\\n  function _buy(uint256 value, bool stable) internal onlySalePhase whenNotPaused {\\n    require(value != 0, 'CS: transaction value is zero');\\n\\n    // match payment decimals\\n    uint8 decimals = stable ? config.USDDecimals : ETH_DECIMALS;\\n\\n    // Fetch current price for ETH or use 1 for stablecoins\\n    uint256 price = stable ? USD_PRICE : _currentEthPrice();\\n\\n    // // Make sure tx value does not exceed max value in USD\\n    // require(\\n    //   _toUsd(value, price, decimals) <= config.maxUsdValue,\\n    //   'CS: transaction value exceeds maximal value in usd'\\n    // );\\n\\n    // Calculate how many tokens to send in exchange\\n    uint256 tokens = _calculateTokenAmount(\\n      value,\\n      price,\\n      config.rate,\\n      config.tokenDecimals,\\n      decimals\\n    );\\n\\n    // Stop if there is nothing to send\\n    require(tokens > 0, 'CS: token amount is zero');\\n\\n    // Make sure there is enough tokens on contract address\\n    // and that is does not use tokens owned by previous buyers\\n    uint256 availableTokens = _tokenBalance() - locked;\\n    require(availableTokens >= tokens, 'CS: not enough tokens on sale');\\n\\n    // If stablecoin is used, transfer coins from buyer to crowdsale\\n    if (stable) {\\n      config.USD.safeTransferFrom(msg.sender, address(this), value);\\n    }\\n\\n    // Update balances\\n    balance[msg.sender] += tokens;\\n    maxBalance[msg.sender] += tokens;\\n    locked += tokens;\\n\\n    emit Buy(msg.sender, tokens);\\n  }\\n\\n  // Claim tokens in vesting stages\\n  function claim(uint256 value) external onlyVestingPhase whenNotPaused {\\n    require(balance[msg.sender] != 0, 'CS: sender has 0 tokens');\\n    require(balance[msg.sender] >= value, 'CS: not enough tokens');\\n\\n    // Disallow to claim more tokens than current unlocked percentage\\n    // Ex Allow to claim 50% of tokens after 3 months\\n    require(value <= _maxTokensToUnlock(msg.sender), 'CS: value exceeds unlocked percentage');\\n\\n    // Transfer tokens to user\\n    config.token.safeTransfer(msg.sender, value);\\n\\n    // Update balances\\n    balance[msg.sender] -= value;\\n    locked -= value;\\n\\n    emit Claim(msg.sender, value);\\n  }\\n\\n  // ========================================\\n  // Public views\\n  // ========================================\\n\\n  // Fetch configuration object\\n  function configuration() external view returns (CrowdsaleBaseConfig memory) {\\n    return _configuration();\\n  }\\n\\n  // Fetch current price from price feed\\n  function currentEthPrice() external view returns (uint256) {\\n    return _currentEthPrice();\\n  }\\n\\n  function tokenBalance() external view returns (uint256) {\\n    return _tokenBalance();\\n  }\\n\\n  // Amount of unlocked tokens on contract\\n  function freeBalance() external view returns (uint256) {\\n    return _freeBalance();\\n  }\\n\\n  // What percent of tokens can be claim at current time\\n  function unlockedPercentage() external view returns (uint256) {\\n    return _calculateUnlockedPercentage(config.stages, block.timestamp);\\n  }\\n\\n  // How many tokens can be bought for selected ETH value\\n  function calculateTokenAmountForETH(uint256 value) external view returns (uint256) {\\n    return\\n      _calculateTokenAmount(\\n        value,\\n        _currentEthPrice(),\\n        config.rate,\\n        config.tokenDecimals,\\n        ETH_DECIMALS\\n      );\\n  }\\n\\n    // How many tokens can be bought for selected ETH value\\n  function calculateTokenAmountForUSD(uint256 value) external view returns (uint256) {\\n    return\\n      _calculateTokenAmount(\\n        value,\\n        USD_PRICE,\\n        config.rate,\\n        config.tokenDecimals,\\n        config.USDDecimals\\n      );\\n  }\\n\\n  // What tx value of ETH is needed to buy selected amount of tokens\\n  function calculatePaymentForETH(uint256 tokens) external view returns (uint256) {\\n    return\\n      _calculatePayment(\\n        tokens,\\n        _currentEthPrice(),\\n        config.rate,\\n        config.tokenDecimals,\\n        ETH_DECIMALS\\n      );\\n  }\\n\\n    // What value of USD is needed to buy selected amount of tokens\\n  function calculatePaymentForUSD(uint256 tokens) external view returns (uint256) {\\n    return\\n      _calculatePayment(\\n        tokens,\\n        USD_PRICE,\\n        config.rate,\\n        config.tokenDecimals,\\n        config.USDDecimals\\n      );\\n  }\\n\\n  // Maximal amount of tokens user can claim at current time\\n  function maxTokensToUnlock(address sender) external view returns (uint256) {\\n    return _maxTokensToUnlock(sender);\\n  }\\n\\n  // ========================================\\n  // Owner utilities\\n  // ========================================\\n\\n  // Used to send ETH to contract from owner\\n  function fund() external payable onlyOwner {}\\n\\n  // Use to withdraw eth\\n  function transferEth(address payable to, uint256 value) external onlyOwner {\\n    to.transfer(value);\\n  }\\n\\n  // Owner function used to withdraw tokens\\n  // Disallows to claim tokens belonging to other addresses\\n  function transferToken(address to, uint256 value) external onlyOwner {\\n    uint256 free = _tokenBalance() - locked;\\n\\n    require(value <= free, 'CS: value exceeds locked value');\\n\\n    config.token.safeTransfer(to, value);\\n  }\\n\\n  // OWner utility function\\n  // Use in case other token is send to contract address\\n  function transferOtherToken(\\n    IERC20 otherToken,\\n    address to,\\n    uint256 value\\n  ) external onlyOwner {\\n    require(config.token != otherToken, 'CS: invalid token address');\\n\\n    otherToken.safeTransfer(to, value);\\n  }\\n\\n  // OWner utility function\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  // OWner utility function\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n\\n  // ========================================\\n  // Internals\\n  // ========================================\\n\\n  function _tokenBalance() internal view returns (uint256) {\\n    return config.token.balanceOf(address(this));\\n  }\\n\\n  function _freeBalance() internal view returns (uint256) {\\n    return _tokenBalance() - locked;\\n  }\\n\\n  function _currentEthPrice() internal view returns (uint256) {\\n    (, int256 answer, , , ) = config.priceFeed.latestRoundData();\\n    return uint256(answer);\\n  }\\n\\n  function _maxTokensToUnlock(address sender) internal view returns (uint256) {\\n    uint256 percentage = _calculateUnlockedPercentage(config.stages, block.timestamp);\\n    uint256 unlocked = _calculateMaxTokensToUnlock(balance[sender], maxBalance[sender], percentage);\\n\\n    return unlocked;\\n  }\\n\\n  function _calculateTokenAmount(\\n    uint256 value,\\n    uint256 price,\\n    uint256 rate,\\n    uint8 tokenDecimals,\\n    uint8 paymentDecimals\\n  ) internal pure returns (uint256) {\\n    return (price * value * uint256(10)**tokenDecimals) / rate / uint256(10)**paymentDecimals;\\n  }\\n\\n  function _calculatePayment(\\n    uint256 tokens,\\n    uint256 price,\\n    uint256 rate,\\n    uint8 tokenDecimals,\\n    uint8 paymentDecimals\\n  ) internal pure returns (uint256) {\\n    return (tokens * rate * uint256(10)**paymentDecimals) / uint256(10)**tokenDecimals / price;\\n  }\\n\\n  function _toUsd(\\n    uint256 value,\\n    uint256 price,\\n    uint8 paymentDecimals\\n  ) internal pure returns (uint256) {\\n    return (price * value) / uint256(10)**paymentDecimals;\\n  }\\n\\n  function _calculateMaxTokensToUnlock(\\n    uint256 _balance,\\n    uint256 _maxBalance,\\n    uint256 _percentage\\n  ) internal pure returns (uint256) {\\n    if (_percentage == 0) return 0;\\n    if (_percentage >= 100) return _balance;\\n\\n    uint256 maxTotal = (_maxBalance * _percentage) / 100;\\n    return maxTotal - (_maxBalance - _balance);\\n  }\\n\\n  function _calculateUnlockedPercentage(Stage[] memory stages, uint256 currentTimestamp)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Allow to claim all if there are no stages\\n    if (stages.length == 0) return 100;\\n\\n    uint256 unlocked = 0;\\n\\n    for (uint256 i = 0; i < stages.length; i++) {\\n      if (currentTimestamp >= stages[i].timestamp) {\\n        unlocked = stages[i].percent;\\n      } else {\\n        break;\\n      }\\n    }\\n\\n    return unlocked;\\n  }\\n\\n  // Copy array of structs from storage to memory\\n  function _configuration() internal view returns (CrowdsaleBaseConfig memory) {\\n    CrowdsaleBaseConfig memory _config = config;\\n    Stage[] memory _stages = new Stage[](config.stages.length);\\n\\n    for (uint8 i = 0; i < config.stages.length; i++) {\\n      _stages[i] = config.stages[i];\\n    }\\n\\n    _config.stages = _stages;\\n    return _config;\\n  }\\n\\n  // Copy array of structs from memory to storage\\n  function _initializeConfig(CrowdsaleBaseConfig memory _config) internal {\\n    config.token = _config.token;\\n    config.tokenDecimals = _config.tokenDecimals;\\n    config.USD = _config.USD;\\n    config.USDDecimals = _config.USDDecimals;\\n    config.rate = _config.rate;\\n    config.phaseSwitchTimestamp = _config.phaseSwitchTimestamp;\\n    config.priceFeed = _config.priceFeed;\\n    config.priceRestrictions = _config.priceRestrictions;\\n    config.maxUsdValue = _config.maxUsdValue;\\n\\n    for (uint256 i = 0; i < _config.stages.length; i++) {\\n      config.stages.push(_config.stages[i]);\\n    }\\n  }\\n\\n  // ========================================\\n  // Modifiers\\n  // ========================================\\n\\n  // Phase guard\\n  modifier onlySalePhase() {\\n    require(block.timestamp < config.phaseSwitchTimestamp, 'CS: invalid phase, expected sale');\\n    _;\\n  }\\n\\n  // Phase guard\\n  modifier onlyVestingPhase() {\\n    require(block.timestamp >= config.phaseSwitchTimestamp, 'CS: invalid phase, expected vesting');\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nstruct CrowdsaleBaseConfig {\\n  // ERC20 token being sold address\\n  IERC20 token;\\n\\n  // ERC20 token being sold decimals\\n  uint8 tokenDecimals;\\n\\n  // Stable coin address\\n  IERC20 USD;\\n\\n  // Stable coin decimals\\n  uint8 USDDecimals;\\n\\n  // Amount of USD (as 8 decimals integer) for single\\n  // Ex. rate = 5000000, tokenDecimals = 4 is equal to\\n  // rate = 0.05 cents for single token (10000 with decimals)\\n  uint256 rate;\\n\\n  // Timestamp after which vesting phase is started\\n  uint256 phaseSwitchTimestamp;\\n\\n  // Vesting stages, each stage has timestamp and percent of unlocked balance\\n  Stage[] stages;\\n\\n  // Address of price feed. It's expected to return current price of ETH with 8 decimals\\n  AggregatorV3Interface priceFeed;\\n\\n  // Price restrictions for priceFeed\\n  PriceRestrictions priceRestrictions;\\n\\n  // Max value in USD transferred by user when buying tokens\\n  uint256 maxUsdValue;\\n}\\n\\nstruct PriceRestrictions {\\n  // maximal age in seconds of price value received from priceFeed\\n  uint256 timeDiff;\\n\\n  // minimal price value\\n  uint256 minValue;\\n\\n  // maximal price value\\n  uint256 maxValue;\\n}\\n\\nstruct Stage {\\n  uint256 timestamp;\\n  uint256 percent;\\n}\\n\\ninterface AggregatorV3Interface {\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"USD\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"USDDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseSwitchTimestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct Stage[]\",\"name\":\"stages\",\"type\":\"tuple[]\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeDiff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"internalType\":\"struct PriceRestrictions\",\"name\":\"priceRestrictions\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxUsdValue\",\"type\":\"uint256\"}],\"internalType\":\"struct CrowdsaleBaseConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"buyForUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"calculatePaymentForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"calculatePaymentForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmountForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmountForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"USD\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"USDDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseSwitchTimestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct Stage[]\",\"name\":\"stages\",\"type\":\"tuple[]\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeDiff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"internalType\":\"struct PriceRestrictions\",\"name\":\"priceRestrictions\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxUsdValue\",\"type\":\"uint256\"}],\"internalType\":\"struct CrowdsaleBaseConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"maxTokensToUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"otherToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOtherToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Crowdsale", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000140b890bf8e2fe3e26fcd516c75728fb20b31c4f0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000619937a000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee0000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000012a05f200000000000000000000000000000000000000000000000000000001d1a94a20000000000000000000000000000000000000000000000000000000015d3ef7980000000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000061b28a7000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000061bfb970000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000061cce870000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000061db68f000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000061e897f000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000061f5c6f0000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000006204477000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000062117670000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000621d53f0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000062293170000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000006236607000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000062438f7000000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000062520ff0000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000625f3ef0000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000626c6df000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000062799cf00000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000006286cbf0000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000006293faf0000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000062a27b7000000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000062afaa7000000000000000000000000000000000000000000000000000000000000000560000000000000000000000000000000000000000000000000000000062bcd970000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000062ca0870000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000062d737700000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}