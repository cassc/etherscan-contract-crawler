{"SourceCode": "pragma solidity ^0.5.17;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract BEP20 {\r\n /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    \r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingBnb,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n    \r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 BnbEarned\r\n    );\r\n    \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 BnbReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n    \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 BnbWithdrawn\r\n    );\r\n    \r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\tevent Approval(\r\n        address indexed owner, \r\n        address indexed spender,\r\n        uint value\r\n\t);\r\n\r\n    event Newbie(\r\n        address user\r\n    );\r\n   \r\n   \r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction allowance(address owner, address spender)public view returns (uint);\r\n    function transferFrom(address from, address to, uint value)public returns (bool ok);\r\n    function approve(address spender, uint value)public returns (bool ok);\r\n    function transfer(address to, uint value)public returns (bool ok);\r\n    \r\n}\r\n\r\n\r\ncontract TripFoundation is BEP20 {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n    \r\n    IERC20 public token;\r\n\r\n\tstring public name                          = \"TripFoundation\";\r\n    string public symbol                        = \"TRIP\";\r\n    uint8 constant public decimals              = 18;\r\n\tuint256 constant public INVEST_MIN_AMOUNT \t= 100e18; // 100BUSD \r\n\tuint256[] public REFERRAL_PERCENTS \t\t\t= [500,400,300,200,100];\r\n\tuint256[] public UNILEVEL_PERCENTS \t\t\t= [1000, 800, 600, 400, 300, 300, 300, 300, 300, 300, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200,400,500,600,700,800];\r\n\tuint256[] public ranking \t\t\t\t    = [25, 60, 100, 225, 500, 1000, 2000, 7500, 12500, 30000, 75000, 150000];\r\n\tuint256[] public target \t\t\t\t\t= [3350, 8350, 16650, 41650, 83350, 166670, 333350, 833350, 1666670, 4166670, 8333330, 16666670];\r\n    uint256 constant public Project_FEE \t\t= 1000;\r\n    uint256 constant public Development_FEE \t= 1000;\r\n    uint256 constant public Trip_FEE \t\t\t= 1000;\r\n    uint256 constant public Marketing_FEE \t\t= 1000;\r\n    uint256 constant public DexLiquidity_FEE \t= 2000;\r\n    uint256 constant public Remaining           = 4000;\r\n\tuint256 constant public PERCENT_STEP \t\t= 10;\r\n\tuint256 constant public PERCENTS_DIVIDER \t= 10000;\r\n\tuint256 constant public PLANPER_DIVIDER \t= 10000;\r\n\tuint256 constant public TIME_STEP \t\t\t= 1 days;\r\n\r\n    uint256 constant public Admin_FEE \t        = 2000;\r\n    uint256 constant public burn_FEE \t        = 1000;\r\n\t\r\n\t\r\n    uint256 constant internal tokenPriceInitial_            = 100 finney; \r\n    uint256 constant internal tokenPriceIncremental_        = 0.0001 finney;\r\n    uint256 constant internal tokenPriceDecremental_        = 0.000099 finney;\r\n\r\n    uint256 internal tokenSupply_                           = 0;\r\n\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalRefBonus;\r\n\t\r\n\tuint256 public _initialsupply       = 450000000 * 10 ** 18;        // Initial supply 450 Million 90%\r\n\t \r\n    uint256 public developmentsupply  \t= 15000000 * 10 ** 18; // 15 M \r\n    uint256 public marketingsupply  \t= 10000000 * 10 ** 18; // 10 M \r\n    uint256 public projectsupply  \t    = 25000000 * 10 ** 18; // 25 M \r\n\r\n    address payable public administrators;\r\n\t\r\n\taddress chkLv2;\r\n    address chkLv3;\r\n    address chkLv4;\r\n    address chkLv5;\r\n    address chkLv6;\r\n    address chkLv7;\r\n    address chkLv8;\r\n    address chkLv9;\r\n    address chkLv10;\r\n\t\r\n\taddress chkLv11;\r\n\taddress chkLv12;\r\n    address chkLv13;\r\n    address chkLv14;\r\n    address chkLv15;\r\n\taddress chkLv16;\r\n\taddress chkLv17;\r\n    address chkLv18;\r\n    address chkLv19;\r\n    address chkLv20;\r\n   \r\n\taddress chkLv21;\r\n\taddress chkLv22;\r\n    address chkLv23;\r\n    address chkLv24;\r\n    address chkLv25;\r\n\taddress chkLv26;\r\n\taddress chkLv27;\r\n    address chkLv28;\r\n    address chkLv29;\r\n    address chkLv30;\r\n\t\r\n    \r\n    struct RefUserDetail {\r\n        address refUserAddress;\r\n        uint256 refLevel;\r\n    }\r\n\r\n    mapping(address => mapping (uint => RefUserDetail)) public RefUser;\r\n    mapping(address => uint256) public referralCount_;\r\n\t\r\n\tmapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal stakeBalanceLedger_;\r\n\tmapping(address => uint256) internal stakingTime_;\r\n    mapping(address => uint256) internal capitaBalanceLedger_;\r\n    mapping(address => uint256) internal payouts_;\r\n    mapping(address => uint256) internal payoutsTo_;\r\n    mapping(address => uint256) internal busdpayoutlimit_;\r\n    \r\n\tmapping(address => mapping(address => uint)) allowed;\r\n    \r\n\tmapping(address => address) internal referralLevel1Address;\r\n    mapping(address => address) internal referralLevel2Address;\r\n    mapping(address => address) internal referralLevel3Address;\r\n    mapping(address => address) internal referralLevel4Address;\r\n    mapping(address => address) internal referralLevel5Address;\r\n    mapping(address => address) internal referralLevel6Address;\r\n    mapping(address => address) internal referralLevel7Address;\r\n    mapping(address => address) internal referralLevel8Address;\r\n    mapping(address => address) internal referralLevel9Address;\r\n    mapping(address => address) internal referralLevel10Address;\r\n\t\r\n\tmapping(address => address) internal referralLevel11Address;\r\n    mapping(address => address) internal referralLevel12Address;\r\n    mapping(address => address) internal referralLevel13Address;\r\n    mapping(address => address) internal referralLevel14Address;\r\n    mapping(address => address) internal referralLevel15Address;\r\n\tmapping(address => address) internal referralLevel16Address;\r\n    mapping(address => address) internal referralLevel17Address;\r\n    mapping(address => address) internal referralLevel18Address;\r\n    mapping(address => address) internal referralLevel19Address;\r\n    mapping(address => address) internal referralLevel20Address;\r\n\t\r\n\tmapping(address => address) internal referralLevel21Address;\r\n    mapping(address => address) internal referralLevel22Address;\r\n    mapping(address => address) internal referralLevel23Address;\r\n    mapping(address => address) internal referralLevel24Address;\r\n    mapping(address => address) internal referralLevel25Address;\r\n\tmapping(address => address) internal referralLevel26Address;\r\n    mapping(address => address) internal referralLevel27Address;\r\n    mapping(address => address) internal referralLevel28Address;\r\n    mapping(address => address) internal referralLevel29Address;\r\n    mapping(address => address) internal referralLevel30Address;\r\n  \r\n    \r\n\tstruct Deposit {\r\n        uint256 time;\r\n        uint256 percent;\r\n\t\tuint256 amount;\r\n        uint256 tokenamount;\r\n\t\tuint256 start;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\taddress referrer;\r\n\t\tuint256[5] levels;\r\n\t\tuint256 bonus;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 UNILEVELincome;\r\n\t\tuint256 withdrawn;\r\n\t\tuint256 withdrawnUNILEVEL;\r\n\t\tuint256 withdrawnReferral;\r\n\t\tuint256 withdrawnReward;\r\n        uint256 withdrawnCapita;\r\n\t\tuint256 teambusiness;\r\n\t\tuint256[12] levelbusiness;\r\n\t\tuint256 RankingReward;\r\n\t\tbool[12] Reward_achivement; \t\r\n\t\tbool cashoutuser;\r\n\r\n\t}\r\n\t\r\n\tmapping (address => User) internal users;\r\n\r\n\tbool public started;\r\n\taddress payable public dexliquidityWallet;\r\n    address payable public marketingWallet;\r\n    address payable public tripWallet;\r\n    address payable public developmentWallet;\r\n    address payable public projectWallet;\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint256 amount, uint256 tokenamount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\tevent UNILEVELIncome(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n\tconstructor(address payable dexliquidity, address payable marketing, address payable trip, address payable development, address payable project, address tokenAddr) public {\r\n\t\trequire(!isContract(development) && isContract(tokenAddr));\r\n        administrators = msg.sender;\r\n        token = IERC20(tokenAddr);\r\n\t\t\r\n\t\t dexliquidityWallet\t=\tdexliquidity;\r\n\t\t marketingWallet\t=\tmarketing;\r\n\t\t tripWallet\t\t\t=\ttrip;\r\n\t\t developmentWallet\t=\tdevelopment;\r\n\t\t projectWallet\t\t=\tproject;\r\n\r\n\t\ttokenBalanceLedger_[developmentWallet] = SafeMath.add(tokenBalanceLedger_[developmentWallet], developmentsupply);\r\n\t\temit Transfer(address(this), developmentWallet, developmentsupply);\r\n\r\n        tokenBalanceLedger_[marketingWallet] = SafeMath.add(tokenBalanceLedger_[marketingWallet], marketingsupply);\r\n\t\temit Transfer(address(this), marketingWallet, marketingsupply);\r\n\r\n        tokenBalanceLedger_[projectWallet] = SafeMath.add(tokenBalanceLedger_[projectWallet], projectsupply);\r\n\t\temit Transfer(address(this), projectWallet, projectsupply);\r\n\r\n\t}\r\n\t\r\n\tfunction () external payable {\r\n        revert();\r\n    }\r\n\t\r\n\t// Only people with tokens\r\n    modifier onlybelievers () {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    // Only admin\r\n    modifier onlyAdministrator(){\r\n        require(administrators == msg.sender);\r\n        _;\r\n    }\r\n    /**\r\n     * WITHDRAW\r\n     */\r\n    function withdrawprofit() public {\r\n        address _customerAddress            = msg.sender;\r\n\t\tuint256 withdrawamt;\r\n        User storage user = users[msg.sender];\r\n        require(user.cashoutuser == false);\r\n\r\n\t\twithdrawamt = payouts_[_customerAddress];\r\n\r\n        uint256 contractBal = token.balanceOf(address(this));\r\n\r\n        require(payoutsTo_[_customerAddress].add(withdrawamt) <= busdpayoutlimit_[_customerAddress]);\r\n\t\trequire(contractBal > withdrawamt);\r\n\r\n\t\tpayoutsTo_[_customerAddress] = payoutsTo_[_customerAddress].add(withdrawamt);\r\n\r\n        token.transfer(msg.sender, withdrawamt);\r\n         payouts_[_customerAddress] = 0;\r\n\r\n        // fire event\r\n        emit onWithdraw(_customerAddress, withdrawamt);\r\n    }\r\n\r\n     /**\r\n     * SELL\r\n     */\r\n    function selltokens(uint256 _amountOfTokens) onlybelievers () public {\r\n        address _customerAddress              = msg.sender;\r\n         User storage user = users[msg.sender];\r\n        require(user.cashoutuser == false);\r\n\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens                     = _amountOfTokens;\r\n        uint256 _Bnb                        = tokensToBnb_(_tokens);\r\n        uint256 _taxedBnb                   = _Bnb;\r\n        \r\n        tokenSupply_                        = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        \r\n        payouts_[_customerAddress]        += _taxedBnb;       \r\n        \r\n        emit onTokenSell(_customerAddress, _tokens, _taxedBnb);\r\n    }\r\n    \r\n    /**\r\n     * TRANSFER\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) public returns(bool) {\r\n        address _customerAddress            = msg.sender;\r\n        \r\n        require( _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        \r\n        uint256 _taxedTokens                = _amountOfTokens;\r\n       \r\n        tokenSupply_                        = tokenSupply_;\r\n        \r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress]     = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n       \r\n       \r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n        return true;\r\n    }\r\n  \r\n\t\r\n\tfunction getDownlineRef(address senderAddress, uint dataId) public view returns (address,uint) { \r\n        return (RefUser[senderAddress][dataId].refUserAddress,RefUser[senderAddress][dataId].refLevel);\r\n    }\r\n    \r\n    function addDownlineRef(address senderAddress, address refUserAddress, uint refLevel) internal {\r\n        referralCount_[senderAddress]++;\r\n        uint dataId = referralCount_[senderAddress];\r\n        RefUser[senderAddress][dataId].refUserAddress = refUserAddress;\r\n        RefUser[senderAddress][dataId].refLevel = refLevel;\r\n    }\r\n\r\n    \r\n\t function distributeRef(address _referredBy,address _sender, bool _newReferral) internal {\r\n       \r\n          address _customerAddress        = _sender;\r\n        // Level 1\r\n        referralLevel1Address[_customerAddress]                     = _referredBy;\r\n        if(_newReferral == true) {\r\n            addDownlineRef(_referredBy, _customerAddress, 1);\r\n        }\r\n        \r\n        chkLv2                          = referralLevel1Address[_referredBy];\r\n        chkLv3                          = referralLevel2Address[_referredBy];\r\n        chkLv4                          = referralLevel3Address[_referredBy];\r\n        chkLv5                          = referralLevel4Address[_referredBy];\r\n        chkLv6                          = referralLevel5Address[_referredBy];\r\n        chkLv7                          = referralLevel6Address[_referredBy];\r\n        chkLv8                          = referralLevel7Address[_referredBy];\r\n        chkLv9                          = referralLevel8Address[_referredBy];\r\n        chkLv10                         = referralLevel9Address[_referredBy];\r\n\t\t\r\n\t\tchkLv11                          = referralLevel10Address[_referredBy];\r\n\t    chkLv12                          = referralLevel11Address[_referredBy];\r\n        chkLv13                          = referralLevel12Address[_referredBy];\r\n        chkLv14                          = referralLevel13Address[_referredBy];\r\n        chkLv15                          = referralLevel14Address[_referredBy];\r\n\t\tchkLv16                          = referralLevel15Address[_referredBy];\r\n\t    chkLv17                          = referralLevel16Address[_referredBy];\r\n        chkLv18                          = referralLevel17Address[_referredBy];\r\n        chkLv19                          = referralLevel18Address[_referredBy];\r\n        chkLv20                          = referralLevel19Address[_referredBy];\r\n\t\t\t\t\r\n\t\tchkLv21                          = referralLevel20Address[_referredBy];\r\n\t    chkLv22                          = referralLevel21Address[_referredBy];\r\n        chkLv23                          = referralLevel22Address[_referredBy];\r\n        chkLv24                          = referralLevel23Address[_referredBy];\r\n        chkLv25                          = referralLevel24Address[_referredBy];\r\n\t\tchkLv26                          = referralLevel25Address[_referredBy];\r\n\t    chkLv27                          = referralLevel26Address[_referredBy];\r\n        chkLv28                          = referralLevel27Address[_referredBy];\r\n        chkLv29                          = referralLevel28Address[_referredBy];\r\n        chkLv30                          = referralLevel29Address[_referredBy];\r\n\t\t\r\n        // Level 2\r\n        if(chkLv2 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel2Address[_customerAddress]                     = referralLevel1Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel1Address[_referredBy], _customerAddress, 2);\r\n            }\r\n        }\r\n        \r\n        // Level 3\r\n        if(chkLv3 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel3Address[_customerAddress]                     = referralLevel2Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel2Address[_referredBy], _customerAddress, 3);\r\n            }\r\n        }\r\n        \r\n        // Level 4\r\n        if(chkLv4 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel4Address[_customerAddress]                     = referralLevel3Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel3Address[_referredBy], _customerAddress, 4);\r\n            }\r\n        }\r\n        \r\n        // Level 5\r\n        if(chkLv5 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel5Address[_customerAddress]                     = referralLevel4Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel4Address[_referredBy], _customerAddress, 5);\r\n            }\r\n        }\r\n        \r\n        // Level 6\r\n        if(chkLv6 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel6Address[_customerAddress]                     = referralLevel5Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel5Address[_referredBy], _customerAddress, 6);\r\n            }\r\n        }\r\n        \r\n        // Level 7\r\n        if(chkLv7 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel7Address[_customerAddress]                     = referralLevel6Address[_referredBy];\r\n           if(_newReferral == true) {\r\n                addDownlineRef(referralLevel6Address[_referredBy], _customerAddress, 7);\r\n            }\r\n        }\r\n        \r\n        // Level 8\r\n        if(chkLv8 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel8Address[_customerAddress]                     = referralLevel7Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel7Address[_referredBy], _customerAddress, 8);\r\n            }\r\n        }\r\n        \r\n        // Level 9\r\n        if(chkLv9 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel9Address[_customerAddress]                     = referralLevel8Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel8Address[_referredBy], _customerAddress, 9);\r\n            }\r\n        }\r\n        \r\n        // Level 10\r\n        if(chkLv10 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel10Address[_customerAddress]                    = referralLevel9Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel9Address[_referredBy], _customerAddress, 10);\r\n            }\r\n        }\r\n\t\t\r\n\t\t// Level 11\r\n        if(chkLv11 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel11Address[_customerAddress]                    = referralLevel10Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel10Address[_referredBy], _customerAddress, 11);\r\n            }\r\n        }\r\n\t\t\r\n\t\t // Level 12\r\n        if(chkLv12 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel12Address[_customerAddress]                    = referralLevel11Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel11Address[_referredBy], _customerAddress, 12);\r\n            }\r\n        }\r\n\t\t\r\n\t\t // Level 13\r\n        if(chkLv13 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel13Address[_customerAddress]                    = referralLevel12Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel12Address[_referredBy], _customerAddress, 13);\r\n            }\r\n        }\r\n\t\t\r\n\t\t // Level 14\r\n        if(chkLv14 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel14Address[_customerAddress]                    = referralLevel13Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel13Address[_referredBy], _customerAddress, 14);\r\n            }\r\n        }\r\n\t\t\r\n\t\t // Level 15\r\n        if(chkLv15 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel15Address[_customerAddress]                    = referralLevel14Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel14Address[_referredBy], _customerAddress, 15);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 16\r\n        if(chkLv16 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel16Address[_customerAddress]                    = referralLevel15Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel15Address[_referredBy], _customerAddress, 16);\r\n            }\r\n        }\r\n\t   \r\n       \t\t // Level 17\r\n        if(chkLv17 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel17Address[_customerAddress]                    = referralLevel16Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel16Address[_referredBy], _customerAddress, 17);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 18\r\n        if(chkLv18 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel18Address[_customerAddress]                    = referralLevel17Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel17Address[_referredBy], _customerAddress, 18);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 19\r\n        if(chkLv19 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel19Address[_customerAddress]                    = referralLevel18Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel18Address[_referredBy], _customerAddress, 19);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 20\r\n        if(chkLv20 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel20Address[_customerAddress]                    = referralLevel19Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel19Address[_referredBy], _customerAddress, 20);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 21\r\n        if(chkLv21 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel21Address[_customerAddress]                    = referralLevel20Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel20Address[_referredBy], _customerAddress, 21);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 22\r\n        if(chkLv22 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel22Address[_customerAddress]                    = referralLevel21Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel21Address[_referredBy], _customerAddress, 22);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 23\r\n        if(chkLv23 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel23Address[_customerAddress]                    = referralLevel22Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel22Address[_referredBy], _customerAddress, 23);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 24\r\n        if(chkLv24 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel24Address[_customerAddress]                    = referralLevel23Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel23Address[_referredBy], _customerAddress, 24);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 25\r\n        if(chkLv25 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel25Address[_customerAddress]                    = referralLevel24Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel24Address[_referredBy], _customerAddress, 25);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 26\r\n        if(chkLv26 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel26Address[_customerAddress]                    = referralLevel25Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel25Address[_referredBy], _customerAddress, 26);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 27\r\n        if(chkLv27 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel27Address[_customerAddress]                    = referralLevel26Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel26Address[_referredBy], _customerAddress, 27);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 28\r\n        if(chkLv28 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel28Address[_customerAddress]                    = referralLevel27Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel27Address[_referredBy], _customerAddress, 28);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 29\r\n        if(chkLv29 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel29Address[_customerAddress]                    = referralLevel28Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel28Address[_referredBy], _customerAddress, 29);\r\n            }\r\n        }\r\n\t\t\r\n\t\t\t\t // Level 30\r\n        if(chkLv30 != 0x0000000000000000000000000000000000000000) {\r\n            referralLevel30Address[_customerAddress]                    = referralLevel29Address[_referredBy];\r\n            if(_newReferral == true) {\r\n                addDownlineRef(referralLevel29Address[_referredBy], _customerAddress, 30);\r\n            }\r\n        }\r\n}\r\n\t\r\n    function adduser(uint256 iamount, address referrer, address userAdds) onlyAdministrator() public{\r\n\r\n        uint256 value = iamount*10**18;\r\n        uint256 time;\r\n        uint256 percent;\r\n\r\n        if(iamount >= 100 && iamount <= 500) {\r\n            time = 365;\r\n            percent = 30;\r\n        }\r\n        else if(iamount >= 501 && iamount <= 2000) {\r\n            time = 300;\r\n            percent = 40;\r\n        }\r\n        else if(iamount >= 2001 && iamount <= 5000) {\r\n            time = 240;\r\n            percent = 50;\r\n        }\r\n        else if(iamount >= 5001 && iamount <= 20000) {\r\n            time = 120;\r\n            percent = 75;\r\n        }\r\n        else if(iamount >= 20001) {\r\n            time = 90;\r\n            percent = 100;\r\n        }\r\n        \r\n        User storage user = users[userAdds];\r\n        // require(user.cashoutuser == false);\r\n\t\trequire(value >= INVEST_MIN_AMOUNT);\r\n\t    uint256 _amountOfTokens             = BnbToTokens_(value);\r\n\t\trequire(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n\r\n\t\t\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif (users[referrer].deposits.length > 0 && referrer != userAdds) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 5; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].levels[i] = users[upline].levels[i].add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t} \r\n\t\t\t\r\n\t\t}\r\n\t\t bool    _newReferral                = true;\r\n        if(referralLevel1Address[userAdds] != 0x0000000000000000000000000000000000000000) {\r\n            referrer                     = referralLevel1Address[userAdds];\r\n            _newReferral                    = false;\r\n        }\r\n\t\t\r\n\t\tdistributeRef(referrer, userAdds, _newReferral);\r\n      \r\n\t\t\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 30; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n                    if(i < 5) {\r\n\t\t\t\t\tuint256 amount = _amountOfTokens.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tif(stakeBalanceLedger_[upline] > 0){\r\n\t\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount);\r\n\t\t\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n\t\t\t\t\t\temit RefBonus(upline, userAdds, i, amount);\r\n\t\t\t\t\t}\r\n                    }\r\n                    users[upline].teambusiness = users[upline].teambusiness.add(value);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\r\n\t\t\tfor (uint256 i = 0; i < 12; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n                    users[upline].levelbusiness[i] = users[upline].levelbusiness[i].add(value);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n                    if(stakeBalanceLedger_[upline] > 0){\r\n                        if(users[upline].levelbusiness[i] >= target[i]){\r\n                            if(!users[upline].Reward_achivement[i]){\r\n                                uint256 _rankingtokens \t\t    = BnbToTokens_(ranking[i]);\r\n                                users[upline].RankingReward \t= _rankingtokens;\r\n                                users[upline].Reward_achivement[i] \t= true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n        tokenSupply_                    = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\temit Newbie(userAdds);\r\n\t\t}\r\n\t\t\r\n\t\tuser.deposits.push(Deposit(time, percent, value,_amountOfTokens, block.timestamp));\r\n        stakeBalanceLedger_[userAdds] = SafeMath.add(stakeBalanceLedger_[userAdds], _amountOfTokens);\r\n        capitaBalanceLedger_[userAdds] = SafeMath.add(capitaBalanceLedger_[userAdds], _amountOfTokens);\r\n        busdpayoutlimit_[userAdds] = busdpayoutlimit_[userAdds].add(value.mul(5));\r\n\r\n\t\ttotalInvested = totalInvested.add(value);\r\n\r\n\t\temit NewDeposit(userAdds, value, _amountOfTokens);\r\n\t\r\n\t}\r\n\r\n\tfunction invest(uint256 iamount, address referrer) public{\r\n        \r\n\t\tuint256 value = iamount*10**18;\r\n        uint256 time;\r\n        uint256 percent;\r\n\r\n        if(iamount >= 100 && iamount <= 500) {\r\n            time = 365;\r\n            percent = 30;\r\n        }\r\n        else if(iamount >= 501 && iamount <= 2000) {\r\n            time = 300;\r\n            percent = 40;\r\n        }\r\n        else if(iamount >= 2001 && iamount <= 5000) {\r\n            time = 240;\r\n            percent = 50;\r\n        }\r\n        else if(iamount >= 5001 && iamount <= 20000) {\r\n            time = 120;\r\n            percent = 75;\r\n        }\r\n        else if(iamount >= 20001) {\r\n            time = 90;\r\n            percent = 100;\r\n        }\r\n\r\n\t    require(value <= token.allowance(msg.sender, address(this)));\r\n        \r\n        User storage user = users[msg.sender];\r\n        \r\n         require(user.cashoutuser == false);\r\n\r\n\t\tif (!started) {\r\n\t\t\tif (msg.sender == developmentWallet) {\r\n\t\t\t\tstarted = true;\r\n\t\t\t} else revert(\"Not started yet\");\r\n\t\t}\r\n\t\trequire(value >= INVEST_MIN_AMOUNT);\r\n\t\t\r\n\t\tuint256 projectfee = value.mul(Project_FEE).div(PERCENTS_DIVIDER);\r\n        token.safeTransferFrom(msg.sender, projectWallet, projectfee);\r\n\t\temit FeePayed(msg.sender, projectfee);\r\n\t\t\r\n\t\tuint256 developmentfee = value.mul(Development_FEE).div(PERCENTS_DIVIDER);\r\n        token.safeTransferFrom(msg.sender, developmentWallet, developmentfee);\r\n\t\temit FeePayed(msg.sender, developmentfee);\r\n\t\t\r\n\t\tuint256 tripfee = value.mul(Trip_FEE).div(PERCENTS_DIVIDER);\r\n        token.safeTransferFrom(msg.sender, tripWallet, tripfee);\r\n\t\temit FeePayed(msg.sender, tripfee);\r\n\t\t\r\n\t\tuint256 marketingfee = value.mul(Marketing_FEE).div(PERCENTS_DIVIDER);\r\n        token.safeTransferFrom(msg.sender, marketingWallet, marketingfee);\r\n\t\temit FeePayed(msg.sender, marketingfee);\r\n\t\t\r\n\t\tuint256 dexliquidityfee = value.mul(DexLiquidity_FEE).div(PERCENTS_DIVIDER);\r\n        token.safeTransferFrom(msg.sender, dexliquidityWallet, dexliquidityfee);\r\n\t\temit FeePayed(msg.sender, dexliquidityfee);\r\n\t\t\r\n        uint256 finalvalue = value.mul(Remaining).div(PERCENTS_DIVIDER);\r\n\r\n\t    uint256 _amountOfTokens             = BnbToTokens_(value);\r\n\t\trequire(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 5; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].levels[i] = users[upline].levels[i].add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t} \r\n\t\t\t\r\n\t\t}\r\n\t\t bool    _newReferral                = true;\r\n        if(referralLevel1Address[msg.sender] != 0x0000000000000000000000000000000000000000) {\r\n            referrer                     = referralLevel1Address[msg.sender];\r\n            _newReferral                    = false;\r\n        }\r\n\t\t\r\n\t\tdistributeRef(referrer, msg.sender, _newReferral);\r\n      \r\n\t\t\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 30; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n                    if(i < 5) {\r\n\t\t\t\t\tuint256 amount = _amountOfTokens.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tif(stakeBalanceLedger_[upline] > 0){\r\n\t\t\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount);\r\n\t\t\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n\t\t\t\t\t\temit RefBonus(upline, msg.sender, i, amount);\r\n\t\t\t\t\t}\r\n                    }\r\n                    users[upline].teambusiness = users[upline].teambusiness.add(value);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\r\n\t\t\tfor (uint256 i = 0; i < 12; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n                    users[upline].levelbusiness[i] = users[upline].levelbusiness[i].add(value);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n                    if(stakeBalanceLedger_[upline] > 0){\r\n                        if(users[upline].levelbusiness[i] >= target[i]){\r\n                            if(!users[upline].Reward_achivement[i]){\r\n                                uint256 _rankingtokens \t\t    = BnbToTokens_(ranking[i]);\r\n                                users[upline].RankingReward \t= _rankingtokens;\r\n                                users[upline].Reward_achivement[i] \t= true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n        if(tokenSupply_ > 0){\r\n         tokenSupply_                    = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n        } else {\r\n             tokenSupply_                    = _amountOfTokens;\r\n        }\r\n\t\t\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n\r\n        token.safeTransferFrom(msg.sender, address(this), finalvalue);\r\n\t\t\r\n\t\tuser.deposits.push(Deposit(time, percent, value,_amountOfTokens, block.timestamp));\r\n        stakeBalanceLedger_[msg.sender] = SafeMath.add(stakeBalanceLedger_[msg.sender], _amountOfTokens);\r\n        capitaBalanceLedger_[msg.sender] = SafeMath.add(capitaBalanceLedger_[msg.sender], _amountOfTokens);\r\n\r\n        busdpayoutlimit_[msg.sender] = busdpayoutlimit_[msg.sender].add(value.mul(5));\r\n\r\n\t\ttotalInvested = totalInvested.add(value);\r\n\r\n\t\temit NewDeposit(msg.sender, value, _amountOfTokens);\r\n\t\t\r\n\t}\r\n\r\n\r\n\tfunction withdrawcapita() public {\r\n        User storage user = users[msg.sender];\r\n        require(user.cashoutuser == false);\r\n\t\tuint256 ttamount = getUserTotaltoken(msg.sender);\r\n\t\tuint256 start = user.deposits[0].start;\r\n\t\tuint256 currenttime = block.timestamp;\r\n        require(capitaBalanceLedger_[msg.sender] != 0);\r\n\r\n        uint256 timeinsec = user.deposits[0].time.mul(1 days);\r\n        uint256 timelimit = SafeMath.add(start, timeinsec);\r\n        require(block.timestamp >= timelimit);\r\n        \r\n\t\tif(SafeMath.sub(currenttime,start) >= 157766400 )\r\n\t\t{\r\n\t\t\ttokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], ttamount);\r\n            emit Transfer(address(this), msg.sender, ttamount);\r\n       \t\tcapitaBalanceLedger_[msg.sender] = 0;\r\n            user.withdrawnCapita.add(ttamount);\r\n            user.cashoutuser = true;\r\n            stakeBalanceLedger_[msg.sender] = 0;\r\n\r\n            for (uint256 i = 0; i < user.deposits.length; i++) {\r\n                user.deposits[i].tokenamount = 0;\r\n                \r\n            }\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\tuint256 adminshare = ttamount.mul(Admin_FEE).div(PERCENTS_DIVIDER);\r\n\t\t\tuint256 burntoken = ttamount.mul(burn_FEE).div(PERCENTS_DIVIDER);\r\n            user.withdrawnCapita.add(ttamount);\r\n\t\t\tttamount = ttamount.sub(adminshare.add(burntoken));\r\n\t\t\t\r\n\t\t\ttokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], ttamount);\r\n            emit Transfer(address(this), msg.sender, ttamount);\r\n\t\t\ttokenBalanceLedger_[developmentWallet] = SafeMath.add(tokenBalanceLedger_[developmentWallet], adminshare);\r\n            emit Transfer(address(this), developmentWallet, adminshare);\r\n\t\t\ttokenSupply_ = tokenSupply_.sub(burntoken);\r\n            capitaBalanceLedger_[msg.sender] = 0;\r\n            user.cashoutuser = true;\r\n            stakeBalanceLedger_[msg.sender] = 0;\r\n\r\n             for (uint256 i = 0; i < user.deposits.length; i++) {\r\n                user.deposits[i].tokenamount = 0;\r\n                user.cashoutuser = true;\r\n            }\r\n\t\t\r\n        }\r\n\t\t\t\r\n\t}\r\n   \r\n\tfunction withdraw() public {\r\n\t\tUser storage user = users[msg.sender];\r\n        require(user.cashoutuser == false);\r\n\t\t\tuint256 totalAmount \t= getUserDividends(msg.sender);\r\n\t\t\tuint256 UNILEVELAmount = getcurrentUNILEVELincome(msg.sender);\r\n\t\t\tuint256 RewardAmount = getUserTotalReward(msg.sender);\r\n\r\n\t\t\tuint256 referralBonus = getUserReferralBonus(msg.sender);\r\n\r\n\t\t\tif (referralBonus > 0) {\r\n\t\t\t\tuser.bonus = 0;\r\n\t\t\t\ttotalAmount = totalAmount.add(referralBonus);\r\n\t\t\t}\r\n\t\t\ttotalAmount = totalAmount.add(UNILEVELAmount);\r\n\t\t\ttotalAmount = totalAmount.add(RewardAmount);\r\n\r\n            require(_initialsupply >= totalAmount);\t\t\t\r\n\r\n            tokenSupply_    = SafeMath.add(tokenSupply_, totalAmount);\r\n\r\n            _initialsupply  = SafeMath.sub(_initialsupply, totalAmount);\r\n\r\n\t\t\ttokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], totalAmount);\r\n       \t\temit Transfer(address(this), msg.sender, totalAmount);\r\n\t\t\t\t\t\t\r\n\t\t\tuser.withdrawnUNILEVEL \t= user.withdrawnUNILEVEL.add(UNILEVELAmount);\r\n\t\t\tuser.withdrawnReferral \t= user.withdrawnReferral.add(referralBonus);\r\n\t\t\tuser.withdrawnReward \t= user.withdrawnReward.add(RewardAmount);\r\n\t\t\tuser.RankingReward \t    = 0;\r\n\t\t\tuser.checkpoint \t\t= block.timestamp;\r\n\t\t\tuser.withdrawn \t\t\t= user.withdrawn.add(totalAmount);\r\n\t\t\t\r\n\t\t\temit Withdrawn(msg.sender, totalAmount);\r\n\t\t\r\n\t}\r\n\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\t\t\r\n\t\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\t\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\r\n\t\t\t\r\n\t\t\tuint256 finish = user.deposits[i].start.add(user.deposits[i].time.mul(1 days));\r\n\t\t\tif (user.checkpoint < finish) {\r\n               \tuint256 share = user.deposits[i].tokenamount.mul(user.deposits[i].percent).div(PLANPER_DIVIDER);\r\n\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\tif (from < to) {\r\n\t\t\t\t\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n\t\r\n\tfunction getUserUNILEVELIncome(address userAddress) public view returns(uint256) {\r\n\r\n\tuint256 totalUNILEVELAmount;\r\n\r\n\tuint256 count = getUserTotalReferrals(userAddress);\r\n    require(stakeBalanceLedger_[userAddress] > 0);\r\n\r\n\tfor (uint256 y = 1; y <= count; y++) {\r\n\t\tuint256 level;\r\n\t\taddress addressdownline;\r\n\r\n\t\t(addressdownline, level) = getDownlineRef(userAddress, y);\r\n\r\n\t\tUser storage downline = users[addressdownline];\r\n\r\n\t\tif (level == 1) {\r\n\t\t\tfor (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n\t\t\t\tif (downline.deposits[i].start < finish) {\r\n\t\t\t\t\tuint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n\t\t\t\t\tuint256 from = downline.deposits[i].start;\r\n\t\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\t\t//UNILEVEL income\r\n\t\t\t\t\tuint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n\t\t\t\t\tif (from < to) {\r\n\r\n\t\t\t\t\t\ttotalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (users[userAddress].levels[0] == 2) {\r\n\t\t\tif (level == 2) {\r\n\r\n\t\t\t\tfor (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n\t\t\t\tif (downline.deposits[i].start < finish) {\r\n\t\t\t\t\tuint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n\t\t\t\t\tuint256 from = downline.deposits[i].start;\r\n\t\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\t\t//UNILEVEL income\r\n\t\t\t\t\tuint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n\t\t\t\t\tif (from < to) {\r\n\r\n\t\t\t\t\t\ttotalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (users[userAddress].levels[0] == 3) {\r\n\t\t\tif (level >= 2 || level <= 3) {\r\n\r\n\t\t\t\tfor (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n\t\t\t\tif (downline.deposits[i].start < finish) {\r\n\t\t\t\t\tuint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n\t\t\t\t\tuint256 from = downline.deposits[i].start;\r\n\t\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\t\t//UNILEVEL income\r\n\t\t\t\t\tuint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n\t\t\t\t\tif (from < to) {\r\n\r\n\t\t\t\t\t\ttotalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (users[userAddress].levels[0] == 4) {\r\n\t\t\tif (level >= 2 || level <= 4) {\r\n\t\t\t\tfor (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n\t\t\t\tif (downline.deposits[i].start < finish) {\r\n\t\t\t\t\tuint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n\t\t\t\t\tuint256 from = downline.deposits[i].start;\r\n\t\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\t\t//UNILEVEL income\r\n\t\t\t\t\tuint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n\t\t\t\t\tif (from < to) {\r\n\r\n\t\t\t\t\t\ttotalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (users[userAddress].levels[0] == 5) {\r\n\r\n\t\t\tif (users[userAddress].teambusiness >= 25000 * 10 ** 18) {\r\n\t\t\t\tif (level >= 2 || level <= 25) {\r\n\t\t\t\t\tfor (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                        uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n                        if (downline.deposits[i].start < finish) {\r\n                            uint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n                            uint256 from = downline.deposits[i].start;\r\n                            uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                            //UNILEVEL income\r\n                            uint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n                            if (from < to) {\r\n\r\n                                totalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\telse if (users[userAddress].teambusiness >= 30000 * 10 ** 18) {\r\n\t\t\t\tif (level >= 2 || level <= 26) {\r\n\t\t\t\t\tfor (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                    uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n                    if (downline.deposits[i].start < finish) {\r\n                        uint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n                        uint256 from = downline.deposits[i].start;\r\n                        uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                        //UNILEVEL income\r\n                        uint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n                        if (from < to) {\r\n\r\n                            totalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (users[userAddress].teambusiness >= 50000 * 10 ** 18) {\r\n\t\t\t\tif (level >= 2 || level <= 27) {\r\n\t\t\t\t\tfor (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                        uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n                        if (downline.deposits[i].start < finish) {\r\n                            uint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n                            uint256 from = downline.deposits[i].start;\r\n                            uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                            //UNILEVEL income\r\n                            uint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n                            if (from < to) {\r\n\r\n                                totalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (users[userAddress].teambusiness >= 100000 * 10 ** 18) {\r\n\t\t\t\tif (level >= 2 || level <= 28) {\r\n\t\t\t\t\tfor (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                        uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n                        if (downline.deposits[i].start < finish) {\r\n                            uint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n                            uint256 from = downline.deposits[i].start;\r\n                            uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                            //UNILEVEL income\r\n                            uint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n                            if (from < to) {\r\n\r\n                                totalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (users[userAddress].teambusiness >= 250000 * 10 ** 18) {\r\n\t\t\t\tif (level >= 2 || level <= 29) {\r\n                    for (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                        uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n                        if (downline.deposits[i].start < finish) {\r\n                            uint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n                            uint256 from = downline.deposits[i].start;\r\n                            uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                            //UNILEVEL income\r\n                            uint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n                            if (from < to) {\r\n\r\n                                totalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (users[userAddress].teambusiness >= 500000 * 10 ** 18) {\r\n\t\t\t\tif (level >= 2 || level <= 30) {\r\n                        for (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                        uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n                        if (downline.deposits[i].start < finish) {\r\n                            uint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n                            uint256 from = downline.deposits[i].start;\r\n                            uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                            //UNILEVEL income\r\n                            uint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n                            if (from < to) {\r\n\r\n                                totalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t    else {\r\n\t\t\tif (level >= 2 || level <= 10) {\r\n                    for (uint256 i = 0; i < downline.deposits.length; i++) {\r\n                    uint256 finish = downline.deposits[i].start.add(downline.deposits[i].time.mul(1 days));\r\n                    if (downline.deposits[i].start < finish) {\r\n                        uint256 share = downline.deposits[i].tokenamount.mul(downline.deposits[i].percent).div(PLANPER_DIVIDER);\r\n                        uint256 from = downline.deposits[i].start;\r\n                        uint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n                        //UNILEVEL income\r\n                        uint256 UNILEVELshare = share.mul(UNILEVEL_PERCENTS[level - 1]).div(PERCENTS_DIVIDER);\r\n\r\n                        if (from < to) {\r\n\r\n                            totalUNILEVELAmount = totalUNILEVELAmount.add(UNILEVELshare.mul(to.sub(from)).div(TIME_STEP));\r\n\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t    }\r\n\t\t    }\r\n        }\r\n\r\n\r\n\t}\r\n\r\nreturn totalUNILEVELAmount;\r\n\r\n}\r\n\t /*---------- CALCULATORS  ----------*/\r\n\r\n    function totalPayouts(address _customerAddress) view public returns(uint256) {\r\n        return payoutsTo_[_customerAddress];\r\n    }\r\n    \r\n     function totalavailPayouts(address _customerAddress) view public returns(uint256) {\r\n        return payouts_[_customerAddress];\r\n    }\r\n    \r\n    function totalBnbBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n   \r\n       \r\n    function totalSupply() public view returns(uint256) {\r\n        return tokenSupply_+developmentsupply+marketingsupply+projectsupply;\r\n    }\r\n    \r\n    \r\n    function myTokens() public view returns(uint256) {\r\n        address _customerAddress            = msg.sender;\r\n        return stakebalance(_customerAddress);\r\n    }\r\n\r\n    function balanceOf(address _customerAddress) view public returns(uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    function stakebalance(address _customerAddress) public view returns(uint256){\r\n        return stakeBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    function capitabalance(address _customerAddress) public view returns(uint256){\r\n        return capitaBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    function getUserCapitaWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].withdrawnCapita;\r\n\t}\r\n\t\r\n\tfunction getcurrentUNILEVELincome(address userAddress) public view returns (uint256){\r\n\t    User storage user = users[userAddress];\r\n\t    return (getUserUNILEVELIncome(userAddress).sub(user.withdrawnUNILEVEL));\r\n\t    \r\n\t}\r\n\t\r\n\tfunction getUserAllWithdrawn(address userAddress) public view returns (uint256 unilevel_withdrawn,uint256 referral_withdrawn,uint256 reward_withdrawn ) {\r\n\t\t unilevel_withdrawn = users[userAddress].withdrawnUNILEVEL;\r\n\t\t referral_withdrawn = users[userAddress].withdrawnReferral;\r\n\t\t reward_withdrawn = users[userAddress].withdrawnReward;\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\t\r\n\tfunction getUserTotalReward(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].RankingReward;\r\n\t}\r\n\r\n    function getUserRanking(address userAddress) public view returns (bool[12] memory achivement) {\r\n\t\treturn users[userAddress].Reward_achivement;\r\n\t}\r\n\t\t\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256[5] memory referrals) {\r\n\t\t\treturn (users[userAddress].levels);\r\n\t}\r\n\r\n\tfunction getUserTotalReferrals(address userAddress) public view returns(uint256) {\r\n\t\t\t\treturn users[userAddress].levels[0]+users[userAddress].levels[1]+users[userAddress].levels[2]+users[userAddress].levels[3]+users[userAddress].levels[4];\r\n\t}\r\n\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].bonus;\r\n\t}\r\n\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus;\r\n\t}\r\n\r\n   \r\n    function getUserteambusiness(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].teambusiness;\r\n\t}\r\n\t\r\n\t\r\n\tfunction getUserReferralWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n\t}\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserTotaltoken(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].tokenamount);\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256 percent, uint256 amount, uint256 start, uint256 finish) {\r\n\t    User storage user = users[userAddress];\r\n        uint256 time;\r\n       \r\n\t\ttime = user.deposits[index].time;\r\n\t\tpercent = user.deposits[index].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].start.add(time.mul(1 days));\r\n\r\n\t}\r\n\r\n\tfunction getSiteInfo() public view returns(uint256 _totalInvested, uint256 _totalBonus) {\r\n\t\treturn(totalInvested, totalRefBonus);\r\n\t}\r\n\r\n\tfunction getUserInfo(address userAddress) public view returns(uint256 totalDeposit, uint256 totalWithdrawn, uint256 totalReferrals) {\r\n\t\treturn(getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress), getUserTotalReferrals(userAddress));\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\t\r\n     function transferFrom( address _from, address _to, uint256 _amount ) public returns (bool success) {\r\n        require( _to != address(0));\r\n        require(tokenBalanceLedger_[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n        tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from],_amount);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender],_amount);\r\n        tokenBalanceLedger_[_to] = SafeMath.add(tokenBalanceLedger_[_to],_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require( _spender != address(0));\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        require( _owner != address(0) && _spender !=address(0));\r\n        return allowed[_owner][_spender];\r\n    }\r\n\t\r\n    function sellPrice() public view returns(uint256) {\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_       - tokenPriceDecremental_;\r\n        } else {\r\n            uint256 _Bnb               = tokensToBnb_(1e18);\r\n            uint256 _taxedBnb          = _Bnb;\r\n            return _taxedBnb;\r\n        }\r\n    }\r\n    \r\n   \r\n    function buyPrice() public view returns(uint256) {\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_       + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _Bnb               = tokensToBnb_(1e18);\r\n            return _Bnb;\r\n        }\r\n    }\r\n   \r\n    function calculateTokensReceived(uint256 _BnbToSpend) public view returns(uint256) {\r\n       \r\n        uint256 _amountOfTokens             = BnbToTokens_(_BnbToSpend);\r\n        return _amountOfTokens;\r\n    }\r\n   \r\n    function calculateBnbReceived(uint256 _tokensToSell) public view returns(uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _Bnb                   = tokensToBnb_(_tokensToSell);\r\n        uint256 _taxedBnb             = _Bnb;\r\n        return _taxedBnb;\r\n    }\r\n    \r\n     function BnbToTokens_(uint256 _Bnb) internal view returns(uint256) {\r\n        uint256 _tokenPriceInitial          = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived             = \r\n         (\r\n            (\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_Bnb * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n    \r\n     function tokensToBnb_(uint256 _tokens) internal view returns(uint256) {\r\n        uint256 tokens_                     = (_tokens + 1e18);\r\n        uint256 _tokenSupply                = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived              =\r\n        (\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceDecremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceDecremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceDecremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n    \r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\t\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"dexliquidity\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"trip\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"development\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"project\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenamount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UNILEVELIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BnbReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingBnb\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BnbEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BnbWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"Admin_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Development_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DexLiquidity_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Marketing_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLANPER_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Project_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RefUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"refUserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refLevel\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Trip_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UNILEVEL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_initialsupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iamount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAdds\",\"type\":\"address\"}],\"name\":\"adduser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrators\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burn_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateBnbReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BnbToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"capitabalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developmentsupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dexliquidityWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dataId\",\"type\":\"uint256\"}],\"name\":\"getDownlineRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAllWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unilevel_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_withdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCapitaWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"referrals\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferrals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserRanking\",\"outputs\":[{\"internalType\":\"bool[12]\",\"name\":\"achivement\",\"type\":\"bool[12]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotaltoken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserUNILEVELIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserteambusiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getcurrentUNILEVELincome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iamount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingsupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectsupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ranking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"selltokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"stakebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"target\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"totalPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"totalavailPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tripWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawcapita\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawprofit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TripFoundation", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f2adf276386bb0ca7918f4db7d117dd75fc5603c000000000000000000000000b8f04fd6bb59d979db3fabe3d111b3084246d6e0000000000000000000000000e14b122430c17967778e83b4b9944bb832068f98000000000000000000000000f003aa7a44c8d66c5cbbbd18484ac58c7753476f000000000000000000000000ecde41de0391d019ebe18801df1fc89c890d0ea8000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4ae99f1b39c18cec142760d64ac9e6dd3687a60874e674f6f17a553870431fda"}