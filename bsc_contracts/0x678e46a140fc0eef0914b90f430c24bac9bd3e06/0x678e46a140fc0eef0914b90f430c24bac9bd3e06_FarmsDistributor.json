{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/FarmsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '../libraries/MulDivMath.sol';\\nimport '../libraries/TwoPower.sol';\\nimport '../interfaces/IBiswapPoolV3.sol';\\nimport '../interfaces/IBiswapFactoryV3.sol';\\nimport '../interfaces/ILiquidityManager.sol';\\nimport '../interfaces/IMasterChef.sol';\\n\\n\\n/// @title farms distributor contract for Biswap V3 liquidity pools\\ncontract FarmsDistributor is AccessControl, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice max ratio (tokens per block) for pool\\n    uint public constant MAX_RATIO_PER_POOL = 10 ether;\\n\\n    /// @notice max ratio (tokens per block) for all pools\\n    uint public constant MAX_RATIO = 18 ether;\\n\\n    /// @notice AccessControl role for manage farms and ratio on pools\\n    bytes32 public constant FARMS_MANAGER_ROLE = keccak256(\\\"FARMS_MANAGER_ROLE\\\");\\n\\n    /// @notice Master chef contract\\n    IMasterChef public immutable MASTER_CHEF;\\n\\n    /// @notice liquidity manager contract\\n    ILiquidityManager public immutable LIQUIDITY_MANAGER;\\n\\n    /// @notice Biswap factory V3 contract\\n    IBiswapFactoryV3 public immutable FACTORY;\\n\\n    /// @notice BSW Token contract\\n    IERC20 public immutable BSW;\\n\\n    /// @notice INIT_CODE_HASH from factory\\n    bytes32 immutable INIT_CODE_HASH;\\n\\n    /// @notice moc token contract for master chef\\n    uint256 mocTokenPID;\\n\\n    /// @notice current ratio for all pools\\n    uint256 public BSWPerBlock;\\n\\n    /// @notice reward debt for pools for liquidity's key and NFT IDs\\n    mapping (address => mapping(bytes32 => uint)) public rewardDebt; //poolAddress => liquidity's key => rewardDebt)\\n\\n    /// @notice Emitted when set new BSW per block amount\\n    /// @param newBswPerBlock new value BSW per block\\n    event NewBSWPerBlock(uint256 newBswPerBlock);\\n\\n    /// @notice Emitted when user harvest a profit\\n    /// @param poolAddress address of pool\\n    /// @param user user address\\n    /// @param pendingReward received award\\n    /// @param fpOwed accumulated award\\n    /// @param lp liquidity position left point\\n    /// @param rp liquidity position right point\\n    event Harvest(address poolAddress, address user, uint256 pendingReward, uint256 fpOwed, int24 lp, int24 rp);\\n\\n    /// @notice Emitted when owner withdraw wrong tokens\\n    /// @dev only owner can call\\n    /// @param receiver Token receiver address\\n    /// @param amount Token amount\\n    event EmergencyWithdraw(address receiver, uint256 amount);\\n\\n    /// @notice create contract constructor\\n    /// @param masterChef Master chef contract\\n    /// @param liquidityManager liquidity Manager contract\\n    /// @param factory AMM Biswap Factory V3 contract\\n    /// @param bsw BSW Token contract\\n    constructor(IMasterChef masterChef, ILiquidityManager liquidityManager, IBiswapFactoryV3 factory, IERC20 bsw){\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(FARMS_MANAGER_ROLE, msg.sender);\\n        MASTER_CHEF = masterChef;\\n        LIQUIDITY_MANAGER = liquidityManager;\\n        FACTORY = factory;\\n        BSW = bsw;\\n        INIT_CODE_HASH = factory.INIT_CODE_HASH();\\n    }\\n\\n    /// @dev only this contract has moc token balance and 100% allocPoint for moc token pool from masterChef\\n    function init(IERC20 mocToken, uint _mocTokenPID) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 balance = mocToken.balanceOf(msg.sender);\\n        require(balance != 0, \\\"FarmsDistributor: Balance must exceed 0\\\");\\n        mocToken.safeTransferFrom(msg.sender, address(this), balance);\\n        mocToken.approve(address(MASTER_CHEF), balance);\\n        MASTER_CHEF.deposit(_mocTokenPID, balance);\\n        mocTokenPID = _mocTokenPID;\\n    }\\n\\n    /// @notice Make multiple function calls in this contract in a single transaction\\n    /// and return the data for each function call, revert if any function call fails\\n    /// @param data The encoded function data for each function call\\n    /// @return results result of each function call\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n\\n    /// @notice Get Farms ratio for specified pool from Factory\\n    /// @param poolAddress pool address\\n    /// @return ratio farm ratio for pool\\n    function getFarmsRatio(address poolAddress) public view returns(uint256 ratio){\\n        return FACTORY.farmsRatio(poolAddress);\\n    }\\n\\n    /// @notice set new farm ratios, and BSW per block\\n    /// @param poolAddress array of pool address\\n    /// @param newRatio array of new farm ratios\\n    /// @param newBswPerBlock new BSW per block\\n    function setFarmsRatio(address[] calldata poolAddress, uint256[] calldata newRatio, uint newBswPerBlock) external onlyRole(FARMS_MANAGER_ROLE){\\n        require(poolAddress.length == newRatio.length, \\\"Wrong length\\\");\\n        require(newBswPerBlock <= MAX_RATIO, \\\"ratio out of bound\\\");\\n        int delta;\\n        for(uint i = 0; i < poolAddress.length; i++){\\n            require(poolAddress[i] != address(0), \\\"address cant be zero\\\");\\n            require(newRatio[i] <= MAX_RATIO_PER_POOL, \\\"ratio out of bound\\\");\\n            delta += int(newRatio[i]) - int(getFarmsRatio(poolAddress[i]));\\n\\n            IBiswapPoolV3(poolAddress[i]).accrueFP();\\n            FACTORY.setFarmsRatio(poolAddress[i], newRatio[i]);\\n        }\\n        if(newBswPerBlock > 0){\\n            uint _newBswPerBlock;\\n            if(delta > 0){\\n                _newBswPerBlock = BSWPerBlock + uint256(delta);\\n            } else {\\n                _newBswPerBlock = BSWPerBlock - uint256(-delta);\\n            }\\n            require(_newBswPerBlock == newBswPerBlock, \\\"wrong delta\\\");\\n            BSWPerBlock = newBswPerBlock;\\n            emit NewBSWPerBlock(newBswPerBlock);\\n        } else {\\n            require(delta == 0, \\\"wrong delta\\\");\\n        }\\n    }\\n\\n    /// @notice set Bsw per block for all pools\\n    /// @param poolAddress array of addresses of pools\\n    /// @dev only FARMS_MANAGER_ROLE can call\\n    function setBswPerBlock(address[] calldata poolAddress) external onlyRole(FARMS_MANAGER_ROLE) {\\n        uint _bswPerBlock;\\n        for(uint i = 0; i < poolAddress.length; i++){\\n            require(poolAddress[i] != address(0), \\\"address cant be zero\\\");\\n            uint farmRatio = getFarmsRatio(poolAddress[i]);\\n            _bswPerBlock += farmRatio > 0 ? farmRatio : 0;\\n        }\\n        BSWPerBlock = _bswPerBlock;\\n    }\\n\\n    /// @notice returns liquidity key (bytes32 value that is key for liquidity position)\\n    /// @param user liquidity owner\\n    /// @param lp liquidity position left point\\n    /// @param rp liquidity position right point\\n    /// @return key compiled liquidity key\\n    function liquidityKey(address user, int24 lp, int24 rp) public pure returns(bytes32 key) {\\n        return keccak256(abi.encodePacked(user, lp, rp));\\n    }\\n\\n    function _getFpScaleL(\\n        int24 endpt,\\n        int24 currpt,\\n        uint256 fpScale_128,\\n        uint256 fpScaleBeyond_128\\n    ) internal pure returns (uint256 fpScaleL_128) {\\n        if (endpt <= currpt) {\\n            fpScaleL_128 = fpScaleBeyond_128;\\n        } else {\\n            assembly {\\n                fpScaleL_128:= sub(fpScale_128, fpScaleBeyond_128)\\n            }\\n        }\\n    }\\n\\n    function _getFpScaleGE(\\n        int24 endpt,\\n        int24 currpt,\\n        uint256 fpScale_128,\\n        uint256 fpScaleBeyond_128\\n    ) internal pure returns (uint256 fpScaleGE_128) {\\n        if (endpt > currpt) {\\n            fpScaleGE_128 = fpScaleBeyond_128;\\n        } else {\\n            assembly {\\n                fpScaleGE_128:= sub(fpScale_128, fpScaleBeyond_128)\\n            }\\n        }\\n    }\\n\\n    function calcSubFPScale(IBiswapPoolV3 _pool, int24 lp, int24 rp, int24 tc, uint fpScale_128) internal view returns(uint256 accFPIn_128){\\n        (,,,,,,uint256 tl_accFPOut_128) = _pool.points(lp);\\n        (,,,,,,uint256 tr_accFPOut_128) = _pool.points(rp);\\n        unchecked{\\n            accFPIn_128 = fpScale_128 -\\n            _getFpScaleL(lp, tc, fpScale_128, tl_accFPOut_128) -\\n            _getFpScaleGE(rp, tc, fpScale_128, tr_accFPOut_128);\\n        }\\n    }\\n\\n    /// @notice show farm points of liquidity position (by points)\\n    /// @param poolAddress actual pool address\\n    /// @param user liauidity position owner\\n    /// @param lp liquidity position left point\\n    /// @param rp liquidity position right point\\n    /// @return fpOwed farm points in this points range\\n    /// @return accFPIn_128 accumulated farm points in this range (by user) * 2**128\\n    function getFPOwedByPoints(address poolAddress, address user, int24 lp, int24 rp) internal view returns(uint fpOwed, uint accFPIn_128){\\n        IBiswapPoolV3 _pool = IBiswapPoolV3(poolAddress);\\n        uint256 passedBlocks = _pool.lastBlockNumber();\\n        passedBlocks = (block.number - passedBlocks) * FACTORY.farmsRatio(poolAddress);\\n        uint fpScale_128 = _pool.fpScale_128();\\n        (,int24 currentPoint,,,,,,,uint256 curLiquidity,) = _pool.state();\\n        if(passedBlocks > 0){\\n            fpScale_128 += curLiquidity == 0 ? 0 : MulDivMath.mulDivFloor(passedBlocks, TwoPower.Pow128, curLiquidity);\\n        }\\n        uint256 lastFPScale_128;\\n        uint128 liquidity;\\n        (,liquidity,,,,,lastFPScale_128, fpOwed) = _pool.liquidity(liquidityKey(user, lp, rp));\\n        accFPIn_128 = calcSubFPScale(_pool, lp, rp, currentPoint, fpScale_128);\\n        fpOwed += MulDivMath.mulDivFloor((accFPIn_128 - lastFPScale_128), liquidity, TwoPower.Pow128);\\n    }\\n\\n    /// @notice show farm points of liquidity position (by NFT id)\\n    /// @param nftId ID of desired NFT\\n    /// @return fpOwed farm points owed by NFT\\n    /// @return poolAddress address of pool where farming going on\\n    /// @return lastFPScale_128 last updated farm point (scaled) * 2**128 of this NFT\\n    function getFPOwedByNftId(uint nftId) internal view returns(uint fpOwed, address poolAddress, uint lastFPScale_128){\\n        uint128 poolId;\\n        int24 lp;\\n        int24 rp;\\n        uint128 liquidity;\\n        (lp, rp, , liquidity,,, lastFPScale_128 ,,, fpOwed, poolId) = LIQUIDITY_MANAGER.liquidities(nftId);\\n        (,,,poolAddress) = LIQUIDITY_MANAGER.poolMetas(poolId);\\n        (,uint accFPIn_128) = getFPOwedByPoints(poolAddress, address(LIQUIDITY_MANAGER), lp, rp);\\n        fpOwed +=MulDivMath.mulDivFloor((accFPIn_128 - lastFPScale_128), liquidity, TwoPower.Pow128);\\n    }\\n\\n    struct PendingRewardParams{\\n        address poolAddress;\\n        address user;\\n        int24 lp;\\n        int24 rp;\\n    }\\n\\n    /// @notice show user rewards at liquidity position (multiple users/positions in 1 call)\\n    function pendingRewardBulk(PendingRewardParams[] calldata params) external view returns(uint[] memory reward){\\n        reward = new uint[](params.length);\\n        for(uint i;i < params.length; i++){\\n            reward[i] = pendingReward(params[i].poolAddress, params[i].user, params[i].lp, params[i].rp);\\n        }\\n    }\\n\\n    /// @notice show user rewards at liquidity position\\n    /// @dev if poolAddress liquidity manager then at \\\"user\\\" parameter we get NFT token ID and lp, rp can be zero\\n    /// @param poolAddress address of pool\\n    /// @param user reward owner\\n    /// @param lp liquidity position left point\\n    /// @param rp liquidity position right point\\n    /// @return reward actual user reward amount\\n    function pendingReward(address poolAddress, address user, int24 lp, int24 rp) public view returns(uint reward){\\n        uint fpOwed;\\n        uint _rewardDebt;\\n        require(poolAddress != address(0), \\\"address cant be zero\\\");\\n        if(poolAddress == address(LIQUIDITY_MANAGER)){\\n            //when pool is liquidity manager - nft Id is uint(user)\\n            uint liqId = uint(uint160(user));\\n            (fpOwed, poolAddress,) = getFPOwedByNftId(liqId);\\n            _rewardDebt = rewardDebt[address(LIQUIDITY_MANAGER)][bytes32(liqId)];\\n        } else {\\n            (fpOwed,) = getFPOwedByPoints(poolAddress, user, lp, rp);\\n            _rewardDebt = rewardDebt[poolAddress][liquidityKey(user, lp, rp)];\\n        }\\n        reward = fpOwed - _rewardDebt;\\n    }\\n\\n    /// @dev harvest profit from master chef contract\\n    function harvestMasterChef() public whenNotPaused {\\n        MASTER_CHEF.withdraw(mocTokenPID, 0);\\n    }\\n\\n    /// @notice harvest farmed rewards from specific liquidity position on pool\\n    /// @dev update liquidity before call if harvest from liquidity manager NFT\\n    /// @dev if poolAddress liquidity manager then at \\\"user\\\" parameter we get NFT token ID and lp, rp can be zero\\n    /// @param poolAddress address of pool\\n    /// @param user reward owner\\n    /// @param lp liquidity position left point\\n    /// @param rp liquidity position right point\\n    function harvest(address poolAddress, address user, int24 lp, int24 rp) external nonReentrant {\\n        require(poolAddress != address(0) && user != address(0), \\\"address cant be zero\\\");\\n        harvestMasterChef();\\n        uint256 pending;\\n        uint256 fpOwed;\\n        if(poolAddress == address(LIQUIDITY_MANAGER)){\\n            uint liqId = uint(uint160(user));\\n            LIQUIDITY_MANAGER.updateFpOwed(liqId);\\n            require(msg.sender == LIQUIDITY_MANAGER.ownerOf(liqId), \\\"Not owner\\\");\\n            (,,,,,,,,,fpOwed,) = LIQUIDITY_MANAGER.liquidities(liqId);\\n            uint256 oldRewardDebt = rewardDebt[address(LIQUIDITY_MANAGER)][bytes32(liqId)];\\n            require(oldRewardDebt <= fpOwed, \\\"fpOwed calc fail\\\");\\n            rewardDebt[address(LIQUIDITY_MANAGER)][bytes32(liqId)] = fpOwed;\\n            pending = fpOwed - oldRewardDebt;\\n            BSW.safeTransfer(msg.sender, pending);\\n        } else {\\n            IBiswapPoolV3 currentPool = IBiswapPoolV3(poolAddress);\\n            require(pool(currentPool.tokenX(), currentPool.tokenY(), currentPool.fee()) == poolAddress, \\\"wrong pool\\\");\\n            require(user == msg.sender, \\\"wrong user\\\");\\n            currentPool.accrueFP();\\n            bytes32 liqKey = liquidityKey(user, lp, rp);\\n            uint256 oldRewardDebt = rewardDebt[poolAddress][liqKey];\\n            (,,,,,,,fpOwed) = currentPool.liquidity(liqKey);\\n            require(oldRewardDebt <= fpOwed, \\\"fpOwed calc fail\\\");\\n            rewardDebt[poolAddress][liqKey] = fpOwed;\\n            pending = fpOwed - oldRewardDebt;\\n            BSW.safeTransfer(msg.sender, pending);\\n        }\\n        emit Harvest(poolAddress, user, pending, fpOwed, lp, rp);\\n    }\\n\\n    /// @notice calculate pool address, returns valid addres even if pool not exist at this time\\n    function pool(address tokenX, address tokenY, uint16 fee) public view returns(address) {\\n        (address token0, address token1) = tokenX < tokenY ? (tokenX, tokenY) : (tokenY, tokenX);\\n        return address(uint160(uint(keccak256(abi.encodePacked(\\n            hex'ff',\\n            address(FACTORY),\\n            keccak256(abi.encode(token0, token1, fee)),\\n            INIT_CODE_HASH\\n        )))));\\n    }\\n\\n    /// @notice prevent pausable functions from executing\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice allow pausable functions to execute\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /// @notice this is allow tokens withdrawal from contract by admin\\n    /// @param token ERC20 token wich need to be withdrawn\\n    /// @param amount token amount (uses all contract balance if 0)\\n    function emergencyWithdraw(IERC20 token, uint amount) external onlyRole(DEFAULT_ADMIN_ROLE){\\n        amount = amount == 0 ? token.balanceOf(address(this)) : amount;\\n        token.safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBiswapFactoryV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\ninterface IBiswapFactoryV3 {\\n\\n    /// @notice emit when successfully create a new pool (calling iBiswapFactoryV3#newPool)\\n    /// @param tokenX address of erc-20 tokenX\\n    /// @param tokenY address of erc-20 tokenY\\n    /// @param fee fee amount of swap (3000 means 0.3%)\\n    /// @param pointDelta minimum number of distance between initialized or limitorder points\\n    /// @param pool address of swap pool\\n    event NewPool(\\n        address indexed tokenX,\\n        address indexed tokenY,\\n        uint16 indexed fee,\\n        uint24 pointDelta,\\n        address pool\\n    );\\n\\n    /// @notice emit when enabled new fee\\n    /// @param fee new available fee\\n    /// @param pointDelta delta between points on new fee\\n    event NewFeeEnabled(uint16 fee, uint24 pointDelta);\\n\\n    /// @notice emit when owner change delta fee on pools\\n    /// @param fee fee\\n    /// @param oldDelta delta was before\\n    /// @param newDelta new delta\\n    event FeeDeltaChanged(uint16 fee, uint16 oldDelta, uint16 newDelta);\\n\\n    /// @notice emit when owner change discount setters address\\n    /// @param newDiscountSetter new discount setter address\\n    event NewDiscountSetter(address newDiscountSetter);\\n\\n    /// @notice emit when owner change farms contract address\\n    /// @param newFarmsContract new farms contract address\\n    event NewFarmsContract(address newFarmsContract);\\n\\n    /// @notice emit when set new ratio on pool\\n    event NewFarmsRatio(address pool, uint ratio);\\n\\n    /// @notice emit when new discount was set\\n    /// @param discounts info for new discounts\\n    event SetDiscounts(DiscountStr[] discounts);\\n\\n    struct DiscountStr {\\n        address user;\\n        address pool;\\n        uint16 discount;\\n    }\\n\\n    struct Addresses {\\n        address swapX2YModule;\\n        address  swapY2XModule;\\n        address  liquidityModule;\\n        address  limitOrderModule;\\n        address  flashModule;\\n    }\\n\\n    /// @notice Add struct to save gas\\n    /// @return swapX2YModule address of module to support swapX2Y(DesireY)\\n    /// @return swapY2XModule address of module to support swapY2X(DesireX)\\n    /// @return liquidityModule address of module to support liquidity\\n    /// @return limitOrderModule address of module for user to manage limit orders\\n    /// @return flashModule address of module to support flash loan\\n    function addresses() external returns(\\n        address swapX2YModule,\\n        address swapY2XModule,\\n        address liquidityModule,\\n        address limitOrderModule,\\n        address flashModule\\n    );\\n\\n    /// @notice Set new Swap discounts for addresses\\n    /// @dev Only DiscountSetter calls\\n    /// @param discounts info for new discounts\\n    function setDiscount(DiscountStr[] calldata discounts) external;\\n\\n    /// @notice Set new farm ratio for pool\\n    /// @dev Only farm address calls\\n    /// @param _pool pool address\\n    /// @param ratio new ratio for pool\\n    function setFarmsRatio(address _pool, uint256 ratio) external;\\n\\n    /// @notice default fee rate from miner's fee gain\\n    /// @return defaultFeeChargePercent default fee rate * 100\\n    function defaultFeeChargePercent() external returns (uint24);\\n\\n    /// @notice Enables a fee amount with the given pointDelta\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee fee amount (3000 means 0.3%)\\n    /// @param pointDelta The spacing between points to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint16 fee, uint24 pointDelta) external;\\n\\n    /// @notice Create a new pool which not exists.\\n    /// @param tokenX address of tokenX\\n    /// @param tokenY address of tokenY\\n    /// @param fee fee amount\\n    /// @param currentPoint initial point (log 1.0001 of price)\\n    /// @return address of newly created pool\\n    function newPool(\\n        address tokenX,\\n        address tokenY,\\n        uint16 fee,\\n        int24 currentPoint\\n    ) external returns (address);\\n\\n    /// @notice Charge receiver of all pools.\\n    /// @return address of charge receiver\\n    function chargeReceiver() external view returns(address);\\n\\n    /// @notice Get pool of (tokenX, tokenY, fee), address(0) for not exists.\\n    /// @param tokenX address of tokenX\\n    /// @param tokenY address of tokenY\\n    /// @param fee fee amount\\n    /// @return address of pool\\n    function pool(\\n        address tokenX,\\n        address tokenY,\\n        uint16 fee\\n    ) external view returns(address);\\n\\n    /// @notice farms ratio for pool\\n    /// @param _pool pool address\\n    /// @return farmRatio ratio for asked pool\\n    function farmsRatio(address _pool) external view returns(uint256 farmRatio);\\n\\n    /// @notice get farms reward contract address\\n    /// @return farms reward contract address\\n    function farmsContract() external view returns(address);\\n\\n    /// @notice Get point delta of a given fee amount.\\n    /// @param fee fee amount\\n    /// @return pointDelta the point delta\\n    function fee2pointDelta(uint16 fee) external view returns (int24 pointDelta);\\n\\n    /// @notice Get delta fee of a given fee amount.\\n    /// @param fee fee amount\\n    /// @return deltaFee fee delta [fee - %delta; fee + %delta] delta in percent base 10000\\n    function fee2DeltaFee(uint16 fee) external view returns (uint16 deltaFee);\\n\\n    /// @notice Change charge receiver, only owner of factory can call.\\n    /// @param _chargeReceiver address of new receiver\\n    function modifyChargeReceiver(address _chargeReceiver) external;\\n\\n    /// @notice Change defaultFeeChargePercent\\n    /// @param _defaultFeeChargePercent new charge percent\\n    function modifyDefaultFeeChargePercent(uint24 _defaultFeeChargePercent) external;\\n\\n    /// @notice return range of fee change\\n    /// @param fee fee for get range\\n    /// @return lowFee low range border\\n    /// @return highFee high range border\\n    function getFeeRange(uint16 fee) external view returns(uint16 lowFee, uint16 highFee);\\n\\n    /// @notice set fee delta to pools\\n    /// @param fee fee of pools on which the delta change\\n    /// @param delta new delta in base 10000\\n    function setFeeDelta(uint16 fee, uint16 delta) external;\\n\\n    /// @notice change discount setters address\\n    /// @param newDiscountSetter new discount setter address\\n    function setDiscountSetter(address newDiscountSetter) external;\\n\\n    /// @notice set new farms contract\\n    /// @param newFarmsContract address of new farms contract\\n    function setFarmsContract(address newFarmsContract) external;\\n\\n    /// @notice get discount from user address and pool\\n    /// @param user user address\\n    /// @param _pool pool address\\n    /// @return discount value of the discount base 10000\\n    function feeDiscount(address user, address _pool) external returns(uint16 discount);\\n\\n    function deployPoolParams() external view returns(\\n        address tokenX,\\n        address tokenY,\\n        uint16 fee,\\n        int24 currentPoint,\\n        int24 pointDelta,\\n        uint24 feeChargePercent\\n    );\\n\\n    /// @notice check fee in range\\n    /// @param fee fee of pools on which the delta change\\n    /// @param initFee initialize fee when pool created\\n    function checkFeeInRange(uint16 fee, uint16 initFee) external view returns(bool);\\n\\n    /// @notice return Init code hash\\n    function INIT_CODE_HASH() external pure returns(bytes32);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBiswapPoolV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport \\\"../libraries/State.sol\\\";\\n\\npragma solidity 0.8.16;\\n\\n    struct Data {\\n        uint128 liquidSum;\\n        // value to add when pass this slot from left to right\\n        // value to dec when pass this slot from right to left\\n        int128 liquidDelta;\\n        // if pointPrice < currPrice\\n        //    value = sigma(feeScaleX(p)), which p < pointPrice\\n        // if pointPrice >= currPrice\\n        //    value = sigma(feeScaleX(p)), which p >= pointPrice\\n        uint256 accFeeXOut_128;\\n        // similar to accFeeXOut_128\\n        uint256 accFeeYOut_128;\\n        // whether the point is endpoint of a liquid segment\\n        bool isEndpt;\\n        //feeVote delta value to add or dec fee vote delta when pass this slot\\n        uint240 feeTimesL;\\n    }\\n\\n//Group return values in swap functions to avoid stack too deep\\n    struct RetVal {\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint128 accFee;\\n    }\\n\\ninterface IBiswapPoolV3 {\\n\\n    /// @notice Emitted when miner successfully add liquidity (mint).\\n    /// @param sender the address that minted the liquidity\\n    /// @param owner the owner who will benefit from this liquidity\\n    /// @param leftPoint left endpoint of the liquidity\\n    /// @param rightPoint right endpoint of the liquidity\\n    /// @param liquidity the amount of liquidity minted to the range [leftPoint, rightPoint)\\n    /// @param amountX amount of tokenX deposit\\n    /// @param amountY amount of tokenY deposit\\n    /// @param state current state of pool\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint128 liquidity,\\n        uint256 amountX,\\n        uint256 amountY,\\n        StateEvent state\\n    );\\n\\n    /// @notice Emitted when miner successfully decrease liquidity (withdraw).\\n    /// @param owner owner address of liquidity\\n    /// @param leftPoint left endpoint of liquidity\\n    /// @param rightPoint right endpoint of liquidity\\n    /// @param liquidity amount of liquidity decreased\\n    /// @param amountX amount of tokenX withdrawn\\n    /// @param amountY amount of tokenY withdrawn\\n    /// @param state current state of pool\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint128 liquidity,\\n        uint256 amountX,\\n        uint256 amountY,\\n        StateEvent state\\n    );\\n\\n    /// @notice Emitted when fees and withdrawn liquidity are collected\\n    /// @param owner The owner of the Liquidity\\n    /// @param recipient recipient of those token\\n    /// @param leftPoint The left point of the liquidity\\n    /// @param rightPoint The right point of the liquidity\\n    /// @param amountX The amount of tokenX (fees and withdrawn tokenX from liquidity)\\n    /// @param amountY The amount of tokenY (fees and withdrawn tokenY from liquidity)\\n    event CollectLiquidity(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when change fee vote\\n    /// @param owner The owner of the Liquidity\\n    /// @param leftPoint The left point of the liquidity\\n    /// @param rightPoint The right point of the liquidity\\n    /// @param newFeeVote new vote for fee for existing liquidity\\n    /// @param state current state of pool\\n    event ChangeFeeVote(\\n        address indexed owner,\\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint16 newFeeVote,\\n        StateEvent state\\n    );\\n\\n    /// @notice Emitted when a trader successfully exchange.\\n    /// @param returnValues return values in swap functions to avoid stack too deep\\n    /// @param state current state of pool\\n    /// @param sellXEarnY true for selling tokenX, false for buying tokenX\\n    event Swap(\\n        RetVal returnValues,\\n        StateEvent state,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of tokenX/tokenY.\\n    /// @param sender the address that initiated the swap call, and that received the callback\\n    /// @param recipient the address that received the tokens from flash\\n    /// @param amountX the amount of tokenX that was flashed\\n    /// @param amountY the amount of tokenY that was flashed\\n    /// @param paidX the amount of tokenX paid for the flash, which can exceed the amountX plus the fee\\n    /// @param paidY the amount of tokenY paid for the flash, which can exceed the amountY plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 paidX,\\n        uint256 paidY\\n    );\\n\\n    /// @notice Emitted when a seller successfully add a limit order.\\n    /// @param owner owner of limit order\\n    /// @param addAmount amount of token to sell the seller added\\n    /// @param acquireAmount amount of earn-token acquired, if there exists some opposite order before\\n    /// @param point point of limit order\\n    /// @param claimSold claimed sold sell-token, if this owner has order with same direction on this point before\\n    /// @param claimEarn claimed earned earn-token, if this owner has order with same direction on this point before\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event AddLimitOrder(\\n        address indexed owner,\\n        uint128 addAmount,\\n        uint128 acquireAmount,\\n        int24 indexed point,\\n        uint128 claimSold,\\n        uint128 claimEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Emitted when a seller successfully decrease a limit order.\\n    /// @param owner owner of limit order\\n    /// @param decreaseAmount amount of token to sell the seller decreased\\n    /// @param point point of limit order\\n    /// @param claimSold claimed sold sell-token\\n    /// @param claimEarn claimed earned earn-token\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event DecLimitOrder(\\n        address indexed owner,\\n        uint128 decreaseAmount,\\n        int24 indexed point,\\n        uint128 claimSold,\\n        uint128 claimEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Emitted when collect from a limit order\\n    /// @param owner The owner of the Liquidity\\n    /// @param recipient recipient of those token\\n    /// @param point The point of the limit order\\n    /// @param collectDec The amount of decreased sell token collected\\n    /// @param collectEarn The amount of earn token collected\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event CollectLimitOrder(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed point,\\n        uint128 collectDec,\\n        uint128 collectEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice emit when points change\\n    /// @return lp point data for left point\\n    /// @return rp point data for right point\\n    /// @return lpn left point number\\n    /// @return rpn right point number\\n    event ChangeLiquidityState(Data lp, Data rp, int24 lpn, int24 rpn);\\n\\n\\n    /// @notice Returns the information about a liquidity by the liquidity's key.\\n    /// @param key the liquidity's key is a hash of a preimage composed by the miner(owner), pointLeft and pointRight\\n    /// @return feeVote Vote for fee\\n    /// @return _liquidity the amount of liquidity,\\n    /// @return lastFeeScaleX_128 fee growth of tokenX inside the range as of the last mint/burn/collect,\\n    /// @return lastFeeScaleY_128 fee growth of tokenY inside the range as of the last mint/burn/collect,\\n    /// @return tokenOwedX the computed amount of tokenX miner can collect as of the last mint/burn/collect,\\n    /// @return tokenOwedY the computed amount of tokenY miner can collect as of the last mint/burn/collect\\n    /// @return lastFPScale_128 farms points growth inside the range as of the last mint/burn/collect\\n    /// @return fpOwed accumulated owed farms points\\n    function liquidity(bytes32 key)\\n    external\\n    view\\n    returns (\\n        uint16 feeVote,\\n        uint128 _liquidity,\\n        uint256 lastFeeScaleX_128,\\n        uint256 lastFeeScaleY_128,\\n        uint256 tokenOwedX,\\n        uint256 tokenOwedY,\\n        uint256 lastFPScale_128,\\n        uint256 fpOwed\\n    );\\n\\n    /// @notice Returns the information about a user's limit order (sell tokenY and earn tokenX).\\n    /// @param key the limit order's key is a hash of a preimage composed by the seller, point\\n    /// @return lastAccEarn total amount of tokenX earned by all users at this point as of the last add/dec/collect\\n    /// @return sellingRemain amount of tokenY not selled in this limit order\\n    /// @return sellingDec amount of tokenY decreased by seller from this limit order\\n    /// @return earn amount of unlegacy earned tokenX in this limit order not assigned\\n    /// @return legacyEarn amount of legacy earned tokenX in this limit order not assgined\\n    /// @return earnAssign assigned amount of tokenX earned (both legacy and unlegacy) in this limit order\\n    function userEarnX(bytes32 key)\\n    external\\n    view\\n    returns (\\n        uint256 lastAccEarn,\\n        uint128 sellingRemain,\\n        uint128 sellingDec,\\n        uint128 earn,\\n        uint128 legacyEarn,\\n        uint128 earnAssign\\n    );\\n\\n    /// @notice Returns the information about a user's limit order (sell tokenX and earn tokenY).\\n    /// @param key the limit order's key is a hash of a preimage composed by the seller, point\\n    /// @return lastAccEarn total amount of tokenY earned by all users at this point as of the last add/dec/collect\\n    /// @return sellingRemain amount of tokenX not selled in this limit order\\n    /// @return sellingDec amount of tokenX decreased by seller from this limit order\\n    /// @return earn amount of unlegacy earned tokenY in this limit order not assigned\\n    /// @return legacyEarn amount of legacy earned tokenY in this limit order not assgined\\n    /// @return earnAssign assigned amount of tokenY earned (both legacy and unlegacy) in this limit order\\n    function userEarnY(bytes32 key)\\n    external\\n    view\\n    returns (\\n        uint256 lastAccEarn,\\n        uint128 sellingRemain,\\n        uint128 sellingDec,\\n        uint128 earn,\\n        uint128 legacyEarn,\\n        uint128 earnAssign\\n    );\\n\\n    /// @notice Mark a given amount of tokenY in a limitorder(sellx and earn y) as assigned.\\n    /// @param point point (log Price) of seller's limit order,be sure to be times of pointDelta\\n    /// @param assignY max amount of tokenY to mark assigned\\n    /// @param fromLegacy true for assigning earned token from legacyEarnY\\n    /// @return actualAssignY actual amount of tokenY marked\\n    function assignLimOrderEarnY(\\n        int24 point,\\n        uint128 assignY,\\n        bool fromLegacy\\n    ) external returns(uint128 actualAssignY);\\n\\n    /// @notice Mark a given amount of tokenX in a limitorder(selly and earn x) as assigned.\\n    /// @param point point (log Price) of seller's limit order,be sure to be times of pointDelta\\n    /// @param assignX max amount of tokenX to mark assigned\\n    /// @param fromLegacy true for assigning earned token from legacyEarnX\\n    /// @return actualAssignX actual amount of tokenX marked\\n    function assignLimOrderEarnX(\\n        int24 point,\\n        uint128 assignX,\\n        bool fromLegacy\\n    ) external returns(uint128 actualAssignX);\\n\\n    /// @notice Decrease limitorder of selling X.\\n    /// @param point point of seller's limit order, be sure to be times of pointDelta\\n    /// @param deltaX max amount of tokenX seller wants to decrease\\n    /// @return actualDeltaX actual amount of tokenX decreased\\n    /// @return legacyAccEarn legacyAccEarnY of pointOrder at point when calling this interface\\n    function decLimOrderWithX(\\n        int24 point,\\n        uint128 deltaX\\n    ) external returns (uint128 actualDeltaX, uint256 legacyAccEarn);\\n\\n    /// @notice Decrease limitorder of selling Y.\\n    /// @param point point of seller's limit order, be sure to be times of pointDelta\\n    /// @param deltaY max amount of tokenY seller wants to decrease\\n    /// @return actualDeltaY actual amount of tokenY decreased\\n    /// @return legacyAccEarn legacyAccEarnX of pointOrder at point when calling this interface\\n    function decLimOrderWithY(\\n        int24 point,\\n        uint128 deltaY\\n    ) external returns (uint128 actualDeltaY, uint256 legacyAccEarn);\\n\\n    /// @notice Add a limit order (selling x) in the pool.\\n    /// @param recipient owner of the limit order\\n    /// @param point point of the order, be sure to be times of pointDelta\\n    /// @param amountX amount of tokenX to sell\\n    /// @param data any data that should be passed through to the callback\\n    /// @return orderX actual added amount of tokenX\\n    /// @return acquireY amount of tokenY acquired if there is a limit order to sell y before adding\\n    function addLimOrderWithX(\\n        address recipient,\\n        int24 point,\\n        uint128 amountX,\\n        bytes calldata data\\n    ) external returns (uint128 orderX, uint128 acquireY);\\n\\n    /// @notice Add a limit order (selling y) in the pool.\\n    /// @param recipient owner of the limit order\\n    /// @param point point of the order, be sure to be times of pointDelta\\n    /// @param amountY amount of tokenY to sell\\n    /// @param data any data that should be passed through to the callback\\n    /// @return orderY actual added amount of tokenY\\n    /// @return acquireX amount of tokenX acquired if there exists a limit order to sell x before adding\\n    function addLimOrderWithY(\\n        address recipient,\\n        int24 point,\\n        uint128 amountY,\\n        bytes calldata data\\n    ) external returns (uint128 orderY, uint128 acquireX);\\n\\n    /// @notice Collect earned or decreased token from limit order.\\n    /// @param recipient address to benefit\\n    /// @param point point of limit order, be sure to be times of pointDelta\\n    /// @param collectDec max amount of decreased selling token to collect\\n    /// @param collectEarn max amount of earned token to collect\\n    /// @param isEarnY direction of this limit order, true for sell y, false for sell x\\n    /// @return actualCollectDec actual amount of decresed selling token collected\\n    /// @return actualCollectEarn actual amount of earned token collected\\n    function collectLimOrder(\\n        address recipient, int24 point, uint128 collectDec, uint128 collectEarn, bool isEarnY\\n    ) external returns(uint128 actualCollectDec, uint128 actualCollectEarn);\\n\\n    /// @notice Add liquidity to the pool.\\n    /// @param recipient newly created liquidity will belong to this address\\n    /// @param leftPt left endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param rightPt right endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param liquidDelta amount of liquidity to add\\n    /// @param data any data that should be passed through to the callback\\n    /// @return amountX The amount of tokenX that was paid for the liquidity. Matches the value in the callback\\n    /// @return amountY The amount of tokenY that was paid for the liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Add liquidity to the pool.\\n    /// @param recipient newly created liquidity will belong to this address\\n    /// @param leftPt left endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param rightPt right endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param liquidDelta amount of liquidity to add\\n    /// @param feeToVote vote for fee on current pool\\n    /// @param data any data that should be passed through to the callback\\n    /// @return amountX The amount of tokenX that was paid for the liquidity. Matches the value in the callback\\n    /// @return amountY The amount of tokenY that was paid for the liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta,\\n        uint16 feeToVote,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Decrease a given amount of liquidity from msg.sender's liquidities.\\n    /// @param leftPt left endpoint of the liquidity\\n    /// @param rightPt right endpoint of the liquidity\\n    /// @param liquidDelta amount of liquidity to burn\\n    /// @return amountX The amount of tokenX should be refund after burn\\n    /// @return amountY The amount of tokenY should be refund after burn\\n    function burn(\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Collect tokens (fee or refunded after burn) from a liquidity.\\n    /// @param recipient the address which should receive the collected tokens\\n    /// @param leftPt left endpoint of the liquidity\\n    /// @param rightPt right endpoint of the liquidity\\n    /// @param amountXLim max amount of tokenX the owner wants to collect\\n    /// @param amountYLim max amount of tokenY the owner wants to collect\\n    /// @return actualAmountX the amount tokenX collected\\n    /// @return actualAmountY the amount tokenY collected\\n    function collect(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint256 amountXLim,\\n        uint256 amountYLim\\n    ) external returns (uint256 actualAmountX, uint256 actualAmountY);\\n\\n    /// @notice Change fee vote for user existing liquidity.\\n    /// @param leftPt left endpoint of the liquidity\\n    /// @param rightPt right endpoint of the liquidity\\n    /// @param newFeeVote new vote for fee for existing liquidity\\n    function changeFeeVote(int24 leftPt, int24 rightPt, uint16 newFeeVote) external;\\n\\n    /// @notice Swap tokenY for tokenX, given max amount of tokenY user willing to pay.\\n    /// @param recipient the address to receive tokenX\\n    /// @param amount the max amount of tokenY user willing to pay\\n    /// @param highPt the highest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX payed\\n    /// @return amountY amount of tokenY acquired\\n    /// @return accFee fee amount\\n    function swapY2X(\\n        address recipient,\\n        uint128 amount,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY, uint128 accFee);\\n\\n    /// @notice Swap tokenY for tokenX, given amount of tokenX user desires.\\n    /// @param recipient the address to receive tokenX\\n    /// @param desireX the amount of tokenX user desires\\n    /// @param highPt the highest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX payed\\n    /// @return amountY amount of tokenY acquired\\n    /// @return accFee fee amount\\n    function swapY2XDesireX(\\n        address recipient,\\n        uint128 desireX,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY, uint128 accFee);\\n\\n    /// @notice Swap tokenX for tokenY, given max amount of tokenX user willing to pay.\\n    /// @param recipient the address to receive tokenY\\n    /// @param amount the max amount of tokenX user willing to pay\\n    /// @param lowPt the lowest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX acquired\\n    /// @return amountY amount of tokenY payed\\n    /// @return accFee fee amount\\n    function swapX2Y(\\n        address recipient,\\n        uint128 amount,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY, uint128 accFee);\\n\\n    /// @notice Swap tokenX for tokenY, given amount of tokenY user desires.\\n    /// @param recipient the address to receive tokenY\\n    /// @param desireY the amount of tokenY user desires\\n    /// @param lowPt the lowest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX acquired\\n    /// @return amountY amount of tokenY payed\\n    /// @return accFee fee amount\\n    function swapX2YDesireY(\\n        address recipient,\\n        uint128 desireY,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY, uint128 accFee);\\n\\n    /// @notice Returns sqrt(1.0001), in 96 bit fixpoint number.\\n    function sqrtRate_96() external view returns(uint160);\\n\\n    /// @notice State values of pool.\\n    /// @return sqrtPrice_96 a 96 fixpoint number describe the sqrt value of current price(tokenX/tokenY)\\n    /// @return currentPoint the current point of the pool, 1.0001 ^ currentPoint = price\\n    /// @return observationCurrentIndex the index of the last oracle observation that was written,\\n    /// @return observationQueueLen the current maximum number of observations stored in the pool,\\n    /// @return observationNextQueueLen the next maximum number of observations, to be updated when the observation.\\n    /// @return locked whether the pool is locked (only used for checking reentrance)\\n    /// @return feeTimesL sum Vote fee * Liquidity\\n    /// @return fee Current fee on pool\\n    /// @return _liquidity liquidity on the currentPoint (currX * sqrtPrice + currY / sqrtPrice)\\n    /// @return liquidityX liquidity of tokenX\\n    function state()\\n    external view\\n    returns(\\n        uint160 sqrtPrice_96,\\n        int24 currentPoint,\\n        uint16 observationCurrentIndex,\\n        uint16 observationQueueLen,\\n        uint16 observationNextQueueLen,\\n        bool locked,\\n        uint240 feeTimesL,\\n        uint16 fee,\\n        uint128 _liquidity,\\n        uint128 liquidityX\\n    );\\n\\n    /// @notice LimitOrder info on a given point.\\n    /// @param point the given point\\n    /// @return sellingX total amount of tokenX selling on the point\\n    /// @return earnY total amount of unclaimed earned tokenY for unlegacy sellingX\\n    /// @return accEarnY total amount of earned tokenY(via selling tokenX) by all users at this point as of the last swap\\n    /// @return legacyAccEarnY latest recorded 'accEarnY' value when sellingX is clear (legacy)\\n    /// @return legacyEarnY total amount of unclaimed earned tokenY for legacy (cleared during swap) sellingX\\n    /// @return sellingY total amount of tokenYselling on the point\\n    /// @return earnX total amount of unclaimed earned tokenX for unlegacy sellingY\\n    /// @return legacyEarnX total amount of unclaimed earned tokenX for legacy (cleared during swap) sellingY\\n    /// @return accEarnX total amount of earned tokenX(via selling tokenY) by all users at this point as of the last swap\\n    /// @return legacyAccEarnX latest recorded 'accEarnX' value when sellingY is clear (legacy)\\n    function limitOrderData(int24 point)\\n    external view\\n    returns(\\n        uint128 sellingX,\\n        uint128 earnY,\\n        uint256 accEarnY,\\n        uint256 legacyAccEarnY,\\n        uint128 legacyEarnY,\\n        uint128 sellingY,\\n        uint128 earnX,\\n        uint128 legacyEarnX,\\n        uint256 accEarnX,\\n        uint256 legacyAccEarnX\\n    );\\n\\n    /// @notice Query information about a point whether has limit order or is an liquidity's endpoint.\\n    /// @param point point to query\\n    /// @return val endpoint for val&1>0 and has limit order for val&2 > 0\\n    function orderOrEndpoint(int24 point) external returns(int24 val);\\n\\n    /// @notice Returns observation data about a specific index.\\n    /// @param index the index of observation array\\n    /// @return timestamp the timestamp of the observation,\\n    /// @return accPoint the point multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// @return init whether the observation has been initialized and the above values are safe to use\\n    function observations(uint256 index)\\n    external\\n    view\\n    returns (\\n        uint32 timestamp,\\n        int56 accPoint,\\n        bool init\\n    );\\n\\n    /// @notice Point status in the pool.\\n    /// @param point the point\\n    /// @return liquidSum the total amount of liquidity that uses the point either as left endpoint or right endpoint\\n    /// @return liquidDelta how much liquidity changes when the pool price crosses the point from left to right\\n    /// @return accFeeXOut_128 the fee growth on the other side of the point from the current point in tokenX\\n    /// @return accFeeYOut_128 the fee growth on the other side of the point from the current point in tokenY\\n    /// @return isEndpt whether the point is an endpoint of a some miner's liquidity, true if liquidSum > 0\\n    /// @return feeTimesL how much fee vote changes when the pool price crosses the point\\n    function points(int24 point)\\n    external\\n    view\\n    returns (\\n        uint128 liquidSum,\\n        int128 liquidDelta,\\n        uint256 accFeeXOut_128,\\n        uint256 accFeeYOut_128,\\n        bool isEndpt,\\n        uint240 feeTimesL,\\n        uint256 accFPOut_128\\n    );\\n\\n    /// @notice Returns 256 packed point (statusVal>0) boolean values. See PointBitmap for more information.\\n    function pointBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the integral value of point(time) and integral value of 1/liquidity(time)\\n    ///     at some target timestamps (block.timestamp - secondsAgo[i])\\n    /// @dev Reverts if target timestamp is early than oldest observation in the queue\\n    /// @dev If you call this method with secondsAgoArray = [3600, 0]. the average point of this pool during recent hour is\\n    /// (accPoints[1] - accPoints[0]) / 3600\\n    /// @param secondsAgoArray describe the target timestamp , targetTimestamp[i] = block.timestamp - secondsAgo[i]\\n    /// @return accPoints integral value of point(time) from 0 to each target timestamp\\n    function observe(uint32[] calldata secondsAgoArray)\\n    external\\n    view\\n    returns (int56[] memory accPoints);\\n\\n    /// @notice Expand max-length of observation queue.\\n    /// @param newNextQueueLen new value of observationNextQueueLen, which should be greater than current observationNextQueueLen\\n    function expandObservationQueue(uint16 newNextQueueLen) external;\\n\\n    /// @notice Borrow tokenX and/or tokenY and pay it back within a block.\\n    /// @dev The caller needs to implement a IBiswapPoolV3#flashCallback callback function\\n    /// @param recipient the address which will receive the tokenY and/or tokenX\\n    /// @param amountX the amount of tokenX to borrow\\n    /// @param amountY the amount of tokenY to borrow\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amountX,\\n        uint256 amountY,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Returns a snapshot information of Liquidity in [leftPoint, rightPoint).\\n    /// @param leftPoint left endpoint of range, should be times of pointDelta\\n    /// @param rightPoint right endpoint of range, should be times of pointDelta\\n    /// @return deltaLiquidities an array of delta liquidity for points in the range\\n    ///    note 1. delta liquidity here is amount of liquidity changed when cross a point from left to right\\n    ///    note 2. deltaLiquidities only contains points which are times of pointDelta\\n    ///    note 3. this function may cost a ENORMOUS amount of gas, be careful to call\\n    function liquiditySnapshot(int24 leftPoint, int24 rightPoint) external view returns(int128[] memory deltaLiquidities);\\n\\n    struct LimitOrderStruct {\\n        uint128 sellingX;\\n        uint128 earnY;\\n        uint256 accEarnY;\\n        uint128 sellingY;\\n        uint128 earnX;\\n        uint256 accEarnX;\\n    }\\n\\n    /// @notice Returns a snapshot information of Limit Order in [leftPoint, rightPoint).\\n    /// @param leftPoint left endpoint of range, should be times of pointDelta\\n    /// @param rightPoint right endpoint of range, should be times of pointDelta\\n    /// @return limitOrders an array of Limit Orders for points in the range\\n    ///    note 1. this function may cost a HUGE amount of gas, be careful to call\\n    function limitOrderSnapshot(int24 leftPoint, int24 rightPoint) external view returns(LimitOrderStruct[] memory limitOrders);\\n\\n    /// @notice Amount of charged fee on tokenX.\\n    function totalFeeXCharged() external view returns(uint256);\\n\\n    /// @notice Amount of charged fee on tokenY.\\n    function totalFeeYCharged() external view returns(uint256);\\n\\n    /// @notice Percent to charge from miner's fee.\\n    function feeChargePercent() external view returns(uint24);\\n\\n    /// @notice Collect charged fee, only factory's chargeReceiver can call.\\n    function collectFeeCharged() external;\\n\\n    /// @notice modify 'feeChargePercent', only owner has authority.\\n    /// @param newFeeChargePercent new value of feeChargePercent, a nature number range in [0, 100],\\n    function modifyFeeChargePercent(uint24 newFeeChargePercent) external;\\n\\n    // @notice accrue fpScale_128 on pool\\n    function accrueFP() external;\\n\\n    function getCurrentFee() external view returns(uint16);\\n\\n    function feeScaleX_128() external view returns(uint256);\\n\\n    function feeScaleY_128() external view returns(uint256);\\n\\n    function fpScale_128() external view returns(uint256);\\n\\n    function lastBlockNumber() external view returns(uint256);\\n\\n    function tokenX() external view returns(address);\\n\\n    function tokenY() external view returns(address);\\n\\n    function fee() external view returns(uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/// @title Interface for LiquidityManager\\ninterface ILiquidityManager is IERC721Enumerable {\\n\\n    /// @notice Emitted when miner successfully add liquidity on an existing liquidity-nft\\n    /// @param nftId id of minted liquidity nft\\n    /// @param pool address of swap pool\\n    /// @param liquidityDelta the amount of liquidity added\\n    /// @param amountX amount of tokenX deposit\\n    /// @param amountY amount of tokenY deposit\\n    event AddLiquidity(\\n        uint256 indexed nftId,\\n        address pool,\\n        uint128 liquidityDelta,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when miner successfully add decrease liquidity on an existing liquidity-nft\\n    /// @param nftId id of minted liquidity nft\\n    /// @param pool address of swap pool\\n    /// @param liquidityDelta the amount of liquidity decreased\\n    /// @param amountX amount of tokenX withdrawn\\n    /// @param amountY amount of tokenY withdrawn\\n    event DecLiquidity(\\n        uint256 indexed nftId,\\n        address pool,\\n        uint128 liquidityDelta,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when set new bonus pool manager contract\\n    /// @param _bonusPoolManager new bonus pool manager address\\n    event SetBonusPoolManager(address _bonusPoolManager);\\n\\n    /// @notice Emitted when get error on hook call\\n    /// @param receiver hook receiver address\\n    /// @param returnData retern revert data\\n    event HookError(address receiver,  bytes returnData);\\n\\n    /// @nitice parameters when calling mint, grouped together to avoid stake too deep\\n    /// @param miner miner address\\n    /// @param tokenX address of tokenX\\n    /// @param tokenY address of tokenY\\n    /// @param fee current fee of pool\\n    /// @param pl left point of added liquidity\\n    /// @param pr right point of added liquidity\\n    /// @param xLim amount limit of tokenX miner willing to deposit\\n    /// @param yLim amount limit tokenY miner willing to deposit\\n    /// @param amountXMin minimum amount of tokenX miner willing to deposit\\n    /// @param amountYMin minimum amount of tokenY miner willing to deposit\\n    /// @param deadline deadline of transaction\\n    struct MintParam {\\n        address miner;\\n        address tokenX;\\n        address tokenY;\\n        uint16 fee;\\n        int24 pl;\\n        int24 pr;\\n        uint128 xLim;\\n        uint128 yLim;\\n        uint128 amountXMin;\\n        uint128 amountYMin;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice parameters when calling addLiquidity, grouped together\\n    /// @dev to avoid stake too deep\\n    /// @param lid id of nft\\n    /// @param xLim amount limit of tokenX user willing to deposit\\n    /// @param yLim amount limit of tokenY user willing to deposit\\n    /// @param amountXMin min amount of tokenX user willing to deposit\\n    /// @param amountYMin min amount of tokenY user willing to deposit\\n    /// @param deadline deadline for completing transaction\\n    struct AddLiquidityParam {\\n        uint256 lid;\\n        uint128 xLim;\\n        uint128 yLim;\\n        uint128 amountXMin;\\n        uint128 amountYMin;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice pool data\\n    /// @param tokenX address of token X\\n    /// @param fee fee of pool\\n    /// @param tokenY address of token X\\n    /// @param pool pool address\\n    struct PoolMeta {\\n        address tokenX;\\n        uint16 fee;\\n        address tokenY;\\n        address pool;\\n    }\\n\\n    /// @notice information of liquidity provided by miner\\n    /// @param leftPt left point of liquidity-token, the range is [leftPt, rightPt)\\n    /// @param rightPt right point of liquidity-token, the range is [leftPt, rightPt)\\n    /// @param feeVote Vote for fee on liquidity position\\n    /// @param liquidity amount of liquidity on each point in [leftPt, rightPt)\\n    /// @param lastFeeScaleX_128 a 128-fixpoint number, as integral of { fee(pt, t)/L(pt, t) }\\n    /// @param lastFeeScaleY_128 a 128-fixpoint number, as integral of { fee(pt, t)/L(pt, t) }\\n    /// @dev here fee(pt, t) denotes fee generated on point pt at time t\\n    /// L(pt, t) denotes liquidity on point pt at time t\\n    /// pt varies in [leftPt, rightPt)\\n    /// t moves from pool created until miner last modify this liquidity-token (mint/addLiquidity/decreaseLiquidity/create)\\n    /// @param lastFPScale_128 a 128-fixpoint number last FPScale of 1 liquidity\\n    /// @param remainTokenX remained tokenX miner can collect, including fee and withdrawn token\\n    /// @param remainTokenY remained tokenY miner can collect, including fee and withdrawn token\\n    /// @param fpOwed Accrued fp for liquidity position\\n    /// @param poolId id of pool in which this liquidity is added\\n    struct Liquidity {\\n        int24 leftPt;\\n        int24 rightPt;\\n        uint16 feeVote;\\n        uint128 liquidity;\\n        uint256 lastFeeScaleX_128;\\n        uint256 lastFeeScaleY_128;\\n        uint256 lastFPScale_128;\\n        uint256 remainTokenX;\\n        uint256 remainTokenY;\\n        uint256 fpOwed;\\n        uint128 poolId;\\n    }\\n\\n    /// @notice callback data passed through BiswapPoolV3#mint to the callback\\n    /// @param tokenX tokenX of swap\\n    /// @param tokenY tokenY of swap\\n    /// @param fee fee amount of swap\\n    /// @param payer address to pay tokenX and tokenY to BiswapPoolV3\\n    struct MintCallbackData {\\n        address tokenX;\\n        address tokenY;\\n        uint16 fee;\\n        address payer;\\n    }\\n\\n\\n    /// @notice Add a new liquidity and generate a nft.\\n    /// @param mintParam params, see MintParam for more\\n    /// @return lid id of nft\\n    /// @return liquidity amount of liquidity added\\n    /// @return amountX amount of tokenX deposited\\n    /// @return amountY amount of tokenY depsoited\\n    function mint(MintParam calldata mintParam) external payable returns(\\n        uint256 lid,\\n        uint128 liquidity,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Add a new liquidity and generate a nft.\\n    /// @param mintParam params, see MintParam for more\\n    /// @param feeVote vote for fee at liquidity position\\n    /// @return lid id of nft\\n    /// @return liquidity amount of liquidity added\\n    /// @return amountX amount of tokenX deposited\\n    /// @return amountY amount of tokenY deposited\\n    function mintWithFeeVote(MintParam calldata mintParam, uint16 feeVote) external payable returns(\\n        uint256 lid,\\n        uint128 liquidity,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Burn a generated nft.\\n    /// @param lid nft (liquidity) id\\n    /// @return success successfully burn or not\\n    function burn(uint256 lid) external returns (bool success);\\n\\n    /// @notice Add liquidity to a existing nft.\\n    /// @param addLiquidityParam see AddLiquidityParam for more\\n    /// @return liquidityDelta amount of added liquidity\\n    /// @return amountX amount of tokenX deposited\\n    /// @return amountY amonut of tokenY deposited\\n    function addLiquidity(\\n        AddLiquidityParam calldata addLiquidityParam\\n    ) external payable returns (\\n        uint128 liquidityDelta,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Decrease liquidity from a nft.\\n    /// @param lid id of nft\\n    /// @param liquidDelta amount of liqudity to decrease\\n    /// @param amountXMin min amount of tokenX user want to withdraw\\n    /// @param amountYMin min amount of tokenY user want to withdraw\\n    /// @param deadline deadline timestamp of transaction\\n    /// @return amountX amount of tokenX refund to user\\n    /// @return amountY amount of tokenY refund to user\\n    function decLiquidity(\\n        uint256 lid,\\n        uint128 liquidDelta,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256 deadline\\n    ) external returns (\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Change vote for fee on exist NFT\\n    /// @param lid NFT Id\\n    /// @param newFeeVote new vote for fee on NFT position\\n    function changeFeeVote(uint256 lid, uint16 newFeeVote) external;\\n\\n    /// @notice get liquidity info from NFT Id\\n    /// @param lid NFT id\\n    /// @return leftPt left point of liquidity-token, the range is [leftPt, rightPt)\\n    /// @return rightPt right point of liquidity-token, the range is [leftPt, rightPt)\\n    /// @return feeVote Vote for fee on liquidity position\\n    /// @return liquidity amount of liquidity on each point in [leftPt, rightPt)\\n    /// @return lastFeeScaleX_128 a 128-fixpoint number, as integral of { fee(pt, t)/L(pt, t) }\\n    /// @return lastFeeScaleY_128 a 128-fixpoint number, as integral of { fee(pt, t)/L(pt, t) }\\n    /// @dev here fee(pt, t) denotes fee generated on point pt at time t\\n    /// L(pt, t) denotes liquidity on point pt at time t\\n    /// pt varies in [leftPt, rightPt)\\n    /// t moves from pool created until miner last modify this liquidity-token (mint/addLiquidity/decreaseLiquidity/create)\\n    /// @return lastFPScale_128 a 128-fixpoint number last FPScale of 1 liquidity\\n    /// @return remainTokenX remained tokenX miner can collect, including fee and withdrawn token\\n    /// @return remainTokenY remained tokenY miner can collect, including fee and withdrawn token\\n    /// @return fpOwed Accrued fp for liquidity position\\n    /// @return poolId id of pool in which this liquidity is added\\n    function liquidities(uint256 lid) external view returns(\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint16 feeVote,\\n        uint128 liquidity,\\n        uint256 lastFeeScaleX_128,\\n        uint256 lastFeeScaleY_128,\\n        uint256 lastFPScale_128,\\n        uint256 remainTokenX,\\n        uint256 remainTokenY,\\n        uint256 fpOwed,\\n        uint128 poolId\\n    );\\n\\n    /// @notice info of pool from poolId\\n    /// @param poolId pool Id\\n    /// @return tokenX address of token X\\n    /// @return fee fee of pool\\n    /// @return tokenY address of token X\\n    /// @return pool pool address\\n    function poolMetas(uint128 poolId) external view returns(\\n        address tokenX,\\n        uint16 fee,\\n        address tokenY,\\n        address pool\\n    );\\n\\n    /// @notice Collect fee gained of token withdrawn from nft.\\n    /// @param recipient address to receive token\\n    /// @param lid id of nft\\n    /// @param amountXLim amount limit of tokenX to collect\\n    /// @param amountYLim amount limit of tokenY to collect\\n    /// @return amountX amount of tokenX actually collect\\n    /// @return amountY amount of tokenY actually collect\\n    function collect(\\n        address recipient,\\n        uint256 lid,\\n        uint128 amountXLim,\\n        uint128 amountYLim\\n    ) external payable returns (\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice update farm point from pool\\n    /// @param lid NFT Id\\n    function updateFpOwed(uint256 lid) external;\\n\\n    /// @notice Set new bonus pool manager contract\\n    /// @dev only owner call\\n    /// @param _bonusPoolManager new bonus pool manager address\\n    function setBonusPoolManager(address _bonusPoolManager) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IMasterChef{\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function pendingBSW(uint256 _pid, address _user) external view returns(uint256);\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MulDivMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nlibrary MulDivMath {\\n\\n    // compute res = floor(a * b / c), assuming res < 2^256\\n    function mulDivFloor(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256 res) {\\n\\n        // let prodMod2_256 = a * b % 2^256\\n        uint256 prodMod2_256;\\n        // let prodDiv2_256 = a * b / 2^256\\n        uint256 prodDiv2_256;\\n        assembly {\\n            let prodModM1 := mulmod(a, b, not(0))\\n            prodMod2_256 := mul(a, b)\\n            prodDiv2_256 := sub(sub(prodModM1, prodMod2_256), lt(prodModM1, prodMod2_256))\\n        }\\n\\n        if (prodDiv2_256 == 0) {\\n            require(c > 0);\\n            assembly {\\n                res := div(prodMod2_256, c)\\n            }\\n            return res;\\n        }\\n\\n        // we should ensure that a * b /c < 2^256 before calling\\n        require(c > prodDiv2_256);\\n\\n        uint256 resMod;\\n        assembly {\\n            resMod := mulmod(a, b, c)\\n        // a * b - resMod\\n            prodDiv2_256 := sub(prodDiv2_256, gt(resMod, prodMod2_256))\\n            prodMod2_256 := sub(prodMod2_256, resMod)\\n\\n        // compute lowbit of c\\n            let lowbit := not(c)\\n            lowbit := add(lowbit, 1)\\n            lowbit := and(lowbit, c)\\n\\n        // c / lowbit\\n            c := div(c, lowbit)\\n        // a * b / lowbit\\n            prodMod2_256 := div(prodMod2_256, lowbit)\\n            lowbit := add(div(sub(0, lowbit), lowbit), 1)\\n            prodDiv2_256 := mul(prodDiv2_256, lowbit)\\n            prodMod2_256 := or(prodMod2_256, prodDiv2_256)\\n\\n        // get inv of c\\n        // cInv * c = 1 (mod 2^4)\\n            let cInv := xor(mul(3, c), 2)\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^8\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^16\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^32\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^64\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^128\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^256\\n\\n        // a * b / c = prodMod2_256 * cInv (mod 2^256)\\n            res := mul(prodMod2_256, cInv)\\n        }\\n    }\\n\\n    // compute res = ceil(a * b / c), assuming res < 2^256\\n    function mulDivCeil(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256 res) {\\n        res = mulDivFloor(a, b, c);\\n        if (mulmod(a, b, c) > 0) {\\n            require(res < type(uint256).max);\\n            res++;\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/State.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n    struct State {\\n        // a 96 fixpoint number describe the sqrt value of current price(tokenX/tokenY)\\n        uint160 sqrtPrice_96;\\n        // The current point of the pool, 1.0001 ^ currentPoint = price\\n        int24 currentPoint;\\n        // The index of the last oracle observation that was written,\\n        uint16 observationCurrentIndex;\\n        // The current maximum number of observations stored in the pool,\\n        uint16 observationQueueLen;\\n        // The next maximum number of observations, to be updated when the observation.\\n        uint16 observationNextQueueLen;\\n        // whether the pool is locked (only used for checking reentrance)\\n        bool locked;\\n        //Sum Vote fee * Liquidity\\n        uint240 feeTimesL;\\n        //current fee\\n        uint16 fee;\\n        // total liquidity on the currentPoint (currX * sqrtPrice + currY / sqrtPrice)\\n        uint128 liquidity;\\n        // liquidity of tokenX, liquidity of tokenY is liquidity - liquidityX\\n        uint128 liquidityX;\\n    }\\n\\n//Gas save Struct for event\\n    struct StateEvent {\\n        int24 currentPoint;\\n        uint16 fee;\\n        uint128 liquidity;\\n        uint128 liquidityX;\\n    }\\n\\ninterface IState{\\n    function state() external view\\n    returns(\\n        State memory\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TwoPower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nlibrary TwoPower {\\n    uint256 internal constant Pow128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant pow128 = 0x100000000000000000000000000000000;\\n    uint256 internal constant Pow96 = 0x1000000000000000000000000;\\n    uint256 internal constant pow96 = 0x1000000000000000000000000;\\n    uint8 internal constant RESOLUTION = 96;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"masterChef\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityManager\",\"name\":\"liquidityManager\",\"type\":\"address\"},{\"internalType\":\"contract IBiswapFactoryV3\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bsw\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fpOwed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"lp\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"rp\",\"type\":\"int24\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBswPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewBSWPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BSW\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BSWPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"contract IBiswapFactoryV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FARMS_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_MANAGER\",\"outputs\":[{\"internalType\":\"contract ILiquidityManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_CHEF\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATIO_PER_POOL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getFarmsRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lp\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rp\",\"type\":\"int24\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"mocToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mocTokenPID\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lp\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rp\",\"type\":\"int24\"}],\"name\":\"liquidityKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lp\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rp\",\"type\":\"int24\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"lp\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rp\",\"type\":\"int24\"}],\"internalType\":\"struct FarmsDistributor.PendingRewardParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"pendingRewardBulk\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"reward\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rewardDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddress\",\"type\":\"address[]\"}],\"name\":\"setBswPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newRatio\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"newBswPerBlock\",\"type\":\"uint256\"}],\"name\":\"setFarmsRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FarmsDistributor", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dbc1a13490deef9c3c12b44fe77b503c1b06173900000000000000000000000024ba8d2a15fe60618039c398cf9fd093b1c1feb50000000000000000000000007c3d53606f9c03e7f54abddffc3868e1c5466863000000000000000000000000965f527d9159dce6288a2219db51fc6eef120dd1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}