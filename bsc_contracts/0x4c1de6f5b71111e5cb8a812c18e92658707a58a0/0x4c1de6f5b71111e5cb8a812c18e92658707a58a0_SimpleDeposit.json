{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Deposit/SimpleDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha SimpleDeposit contract\\n * @author dlabs.hu / Peter Molnar\\n * @dev This contract is for creating and tracing client deposits\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../helpers/SystemRole.sol\\\";\\nimport \\\"../Interfaces/ISimpleDeposit.sol\\\";\\nimport \\\"../Interfaces/IRegister.sol\\\";\\nimport \\\"../Interfaces/IAffiliate.sol\\\";\\nimport \\\"../Interfaces/IFees.sol\\\";\\nimport \\\"../Interfaces/ISimpleDeposit.sol\\\";\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../Governance/Governed.sol\\\";\\n\\nerror Deposit__TransferFailed();\\n\\ncontract SimpleDeposit is Ownable, SystemRole, ReentrancyGuard, ISimpleDeposit, Governed\\n{\\n    IERC20 public _stakingToken;\\n    address public _affiliateContract;\\n    address public _feesContract;\\n\\n    uint64 public lockTime = 2592000; //30 * 86400;\\n\\n    IRegister private _registerContract;\\n\\n    bool public whitelistingEnabled;\\n\\n    mapping(address => uint256) private _approvalCount;\\n\\n    mapping(address => AccountBalances) private accountBalances;\\n\\n    uint256 public totalDeposits;\\n    uint256 public totalLocked;\\n\\n    mapping(address => mapping(address => bool)) private approvedExternalAddresses;\\n\\n\\n     /**\\n     * @dev contract owner`s address\\n     */\\n    address private _owner;\\n\\n    /**\\n     * @dev Constructor function\\n     */\\n    constructor(address _tokenAddress, address _governAddress) Ownable() {//address _register, address _affiliate, address _fees, address _governAddress) Ownable() {\\n        _stakingToken = IERC20(_tokenAddress);\\n        governanceState.governanceAddress = _governAddress;\\n    }\\n\\n    function _selfManageMeBefore() internal override {\\n        address[] memory slots = IGovernance(governanceState.governanceAddress).read_config_address_slot(\\\"Main\\\");\\n        _affiliateContract = slots[2];\\n        _feesContract = slots[3];\\n        _registerContract = IRegister(slots[4]);\\n        _affiliateContract = slots[2];\\n        if (_owner != slots[0]) _transferOwnership(slots[0]);\\n    }\\n\\n    function _selfManageMeAfter() internal override {}\\n    function _onBeforeEmergencyChange(bool nextRunning) internal override {}\\n\\n    /**\\n     * @dev transfer contract ownership\\n     */\\n    function transferOwnership(\\n        address newOwner\\n    ) public virtual override(Ownable, SystemRole) Live onlyOwner {\\n        _owner = newOwner;\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Function to change whitelist contract address\\n     * @param _register Address of whitelist contract\\n     */\\n    function changeRegister(address _register) external Live onlyOwner {\\n        _registerContract = IRegister(_register);\\n    }\\n\\n    /**\\n     * @dev Function to change fees contract address\\n     * @param _fees Address of the fees contract\\n     */\\n    function changeFees(address _fees) external Live onlyOwner {\\n        _feesContract = _fees;\\n    }\\n\\n    /**\\n     * @dev Function to change affiliate contract address\\n     * @param _affiliate Address of the affiliate contract\\n     */\\n    function changeAffiliate(address _affiliate) external Live onlyOwner {\\n        _affiliateContract = _affiliate;\\n    }\\n\\n    /**\\n     * @dev Switch to enable/disable whitelisting\\n     */\\n    function setWhitelistingEnabled(bool enabled) external Live onlyOwner {\\n        if (enabled && !whitelistingEnabled) {\\n            whitelistingEnabled = true;\\n        } else if (!enabled && whitelistingEnabled) {\\n            whitelistingEnabled = false;\\n        }\\n    }\\n\\n    function setLockTime(uint64 _time) external onlyOwner Live {\\n        lockTime = _time;\\n    }\\n\\n    function _handleUserStakeChanged(address _user, address _referredBy, uint256 _amount) internal {\\n        if (_affiliateContract != address(0)) {\\n            IAffiliate(_affiliateContract).userStakeChanged(_user, _referredBy, _amount);\\n        }\\n        if (_feesContract != address(0)) {\\n            IFees(_feesContract).userStakeChanged(_user, _amount);\\n        }\\n    }\\n\\n    function approveExternalAddress(address _locker) external Live {\\n        require(_locker != address(0), \\\"Address not allowed\\\");\\n        if (!_checkExternalAddress(msg.sender, _locker)) {\\n            approvedExternalAddresses[msg.sender][_locker] = true;\\n            unchecked{_approvalCount[msg.sender] += 1;}\\n        }\\n    }\\n\\n    function disapproveExternalAddress(address _locker) external Live {\\n        if(approvedExternalAddresses[msg.sender][_locker] == true){\\n            approvedExternalAddresses[msg.sender][_locker] = false;\\n            _approvalCount[msg.sender] -= 1;\\n        }\\n    }\\n\\n    function isApprovedExternalAddress(address _account, address _locker) external view returns (bool isApproved) {\\n        return _checkExternalAddress(_account, _locker);\\n    }\\n\\n    function _checkExternalAddress(address _account, address _locker) internal view returns (bool isApproved) {\\n        return approvedExternalAddresses[_account][_locker];\\n    }\\n\\n    /**\\n     * @dev Function to Deposit tokens.\\n     * Transfer tokens from the user to the contract\\n     * @param _amount Amount of tokens to deposit\\n     **/\\n    function deposit(uint256 _amount) external nonReentrant Live {\\n        _deposit(msg.sender, msg.sender, _amount);\\n    }\\n\\n    function depositTo(address _recipient, uint256 _amount) external nonReentrant Live {\\n        _deposit(msg.sender, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Function to Withdraw tokens.\\n     * Transfer tokens from the contract to the user\\n     * @param _amount Amount of tokens to withdraw\\n     **/\\n\\n    function withdraw(uint256 _amount) external nonReentrant Live {\\n        _withdraw(msg.sender, _amount);\\n    }\\n\\n    // locks user deposit in the contract - the user calls it\\n    function userLock(uint256 _amount) external nonReentrant Live {\\n        _userLock(msg.sender, _amount, address(0));\\n    }\\n\\n    // locks user deposit in the contract - the user calls it\\n    function userLock(uint256 _amount, address _referredBy) external nonReentrant Live {\\n        _userLock(msg.sender, _amount, _referredBy);\\n    }\\n\\n    // unlocks user deposit in the contract - the user calls it, it can ulock user locked funds\\n    function userUnlock(uint256 _amount) external nonReentrant Live {\\n        _userUnlock(msg.sender, _amount);\\n    }\\n\\n    function depositAndLock(uint256 _amount) external nonReentrant Live {\\n        _deposit(msg.sender, msg.sender, _amount);\\n        _userLock(msg.sender, _amount, address(0));\\n    }\\n\\n    function depositAndLock(uint256 _amount, address _referredBy) external nonReentrant Live {\\n        _deposit(msg.sender, msg.sender, _amount);\\n        _userLock(msg.sender, _amount, _referredBy);\\n    }\\n\\n    function unlockAndWithdraw(uint256 _amount) external nonReentrant Live {\\n        _userUnlock(msg.sender, _amount);\\n        _withdraw(msg.sender, _amount);\\n    }\\n\\n    // locks user deposit in the contract - called by allowed external contracts\\n    // we can add other params like deadline etc for more complex locks like originally\\n    function externalLock(address _account, uint256 _amount) external nonReentrant onlyDepositLocker Live {\\n        _externalLock(msg.sender, _account, _amount);\\n    }\\n\\n    // unlocks user deposit in the contract - called by allowed external contracts\\n    function externalUnlock(address _account, uint256 _amount) external nonReentrant onlyDepositLocker Live {\\n        _externalUnlock(msg.sender, _account, _amount);\\n    }\\n\\n    function getLockTime() external view returns (uint256 time) {\\n        return lockTime;\\n    }\\n\\n    /**\\n     * @dev Function to get user balance.\\n     * @param _account Account for balance\\n     * @return _accountBalance Account Balance\\n     **/\\n    function getAccountBalance(\\n        address _account\\n    ) external view returns (uint256 _accountBalance) {\\n        return accountBalances[_account].balance;\\n    }\\n\\n    function getAccountBalances(address _account) external view returns (AccountBalances memory _accountBalance) {\\n        _accountBalance = accountBalances[_account];\\n        _accountBalance.unlockTimestamp = _accountBalance.lastLockTimestamp + lockTime;\\n    }\\n\\n    function getAccountLockedBalanceUnlockTimestamp(address _account) external view returns (uint256 _timestmap) {\\n        return accountBalances[_account].lastLockTimestamp + lockTime;\\n    }\\n\\n    function getWithdrawableAccountLockedBalance(address _account) external view returns (uint256 amount) {\\n        if (accountBalances[_account].lastLockTimestamp + lockTime > block.timestamp) return 0;\\n        return accountBalances[_account].lockedBalance;\\n    }\\n\\n    function getAccountLockedBalance(\\n        address _account\\n    ) external view returns (uint256 _accountBalance) {\\n        return accountBalances[_account].lockedBalance;\\n    }\\n    function getExternalLockedBalance(\\n        address _account\\n    ) external view returns (uint256 _accountBalance) {\\n        return accountBalances[_account].externalLockedBalance;\\n    }\\n\\n    // we can add emit\\n    function _deposit(address _sender, address _user, uint256 _amount) internal {\\n        require(_amount > 0, \\\"Amount needs to be more then 0!\\\");\\n\\n        if (whitelistingEnabled == true) {\\n            require(\\n                _registerContract.isWhitelisted(_user) == true,\\n                \\\"Caller is not whitelisted!\\\"\\n            );\\n        }\\n\\n        bool successTransfer = _stakingToken.transferFrom(\\n            _sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        if (!successTransfer) {\\n            revert Deposit__TransferFailed();\\n        }\\n\\n        accountBalances[_user].balance = accountBalances[_user].balance + _amount;\\n        totalDeposits = totalDeposits + _amount;\\n\\n        emit DepositCreated(_user, _amount, block.timestamp, totalDeposits, accountBalances[_user].balance);\\n    }\\n\\n    function _withdraw(address _user,uint256 _amount) internal {\\n        require(_amount > 0, \\\"Amount needs to be more then 0!\\\");\\n        require(\\n            _amount <= (accountBalances[msg.sender].balance),\\n            \\\"Amount is higher then available balance!\\\"\\n        );\\n\\n\\n        accountBalances[msg.sender].balance = accountBalances[msg.sender].balance - _amount;\\n        totalDeposits = totalDeposits - _amount;\\n\\n        bool successTransfer = _stakingToken.transfer(_user, _amount);\\n        if (!successTransfer) {\\n            revert Deposit__TransferFailed();\\n        }\\n\\n        emit DepositWithdrawn(\\n            _user,\\n            _amount,\\n            block.timestamp,\\n            totalDeposits,\\n            accountBalances[_user].balance\\n        );\\n    }\\n\\n    function _userLock(address _user, uint256 _amount, address _referredBy) internal {\\n        require(accountBalances[_user].balance >= _amount, \\\"NOT ENOUGH BALANCE\\\");\\n        accountBalances[_user].balance -= _amount;\\n        accountBalances[_user].lockedBalance += _amount;\\n        accountBalances[_user].lastLockTimestamp = uint64(block.timestamp);\\n        totalLocked += _amount;\\n        _handleUserStakeChanged(_user, _referredBy, accountBalances[_user].lockedBalance);\\n\\n        emit DepositLocked(\\n            _user,\\n            _amount,\\n            block.timestamp,\\n            block.timestamp + lockTime,\\n            totalLocked,\\n            accountBalances[_user].lockedBalance\\n        );\\n    }\\n\\n    function _userUnlock(address _account, uint256 _amount) internal {\\n        require(accountBalances[_account].lockedBalance >= _amount, \\\"NOT ENOUGH BALANCE\\\"); require(\\n        accountBalances[_account].lastLockTimestamp + lockTime < uint64(block.timestamp),\\n            \\\"DEPOSIT LOCKED\\\"\\n        );\\n        accountBalances[_account].balance += _amount;\\n        accountBalances[_account].lockedBalance -= _amount;\\n        totalLocked -= _amount;\\n        _handleUserStakeChanged(_account, address(0), accountBalances[_account].lockedBalance);\\n\\n        emit DepositUnlocked(\\n            msg.sender,\\n            _amount,\\n            block.timestamp,\\n            totalLocked,\\n            accountBalances[_account].lockedBalance\\n        );\\n    }\\n\\n    function _externalLock(address _locker, address _account, uint256 _amount) internal {\\n        require(accountBalances[_account].balance >= _amount, \\\"NOT ENOUGH BALANCE\\\");\\n        require(_checkExternalAddress(_account, _locker) == true, \\\"Address not approved\\\");\\n        accountBalances[_account].balance -= _amount;\\n        accountBalances[_account].externalLockedBalance += _amount;\\n        emit ExternalLocked(_locker, msg.sender, _amount, uint64(block.timestamp));\\n    }\\n\\n    function _externalUnlock(address _locker, address _account, uint256 _amount) internal {\\n        require(accountBalances[_account].externalLockedBalance >= _amount, \\\"NOT ENOUGH BALANCE\\\");\\n        require(_checkExternalAddress(_account, _locker) == true, \\\"Address not approved\\\");\\n        accountBalances[_account].balance += _amount;\\n        accountBalances[_account].externalLockedBalance -= _amount;\\n        emit ExternalUnlocked(_locker, msg.sender, _amount, uint64(block.timestamp));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Governance/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Governance contract\\n * @author dlabs.hu\\n * @dev This contract is for handling governance and configuration changes\\n */\\n\\nimport \\\"../Interfaces/IVault.sol\\\";\\nimport \\\"../Interfaces/IAffiliate.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ncontract Governance {\\n\\nmapping(address => uint256) public curator_proportions;                             // Proportions of the curators\\naddress[] public governedContracts;                                                 // The governed addresses\\n\\n/* ConfManager system mappings and vars */\\nmapping(string => config_struct) public Configuration;\\nmapping(string => config_struct) public invoteConfiguration;\\nmapping(uint256 => string) public ID_to_name;\\n\\nmapping(address => uint256) public conf_curator_timer;                           // Last action time by curator for locking\\nmapping(uint256 => uint256) public conf_votes;                                   // ID to see if threshold is passed\\nmapping(uint256 => uint256) public conf_time_limit;                              // Actions needs to be triggered in time\\nuint256 public conf_counter = 6;                                                 // Starting from 6+1, 0-6 are reserved for global config\\n\\nstruct config_struct {\\n  string name;\\n  bool Running;\\n  address govaddr;\\n  address[] managers;\\n  bool[] boolslot;\\n  address[] address_slot;\\n  uint256[] uint256_slot;\\n  bytes32[] bytes32_slot;\\n}\\n\\nmapping(uint256 => bool) public triggered;                                          // If true, it was triggered before and will be blocked\\nstring constant Core = \\\"Main\\\";                                                               // Core string for consistency\\n\\n/* Action manager system mappings */\\nmapping(address => uint256) public action_curator_timer;                            // Last action time by curator for locking\\nmapping(uint256 => uint256) public action_id_to_vote;                               // ID to see if threshold is passed\\nmapping(uint256 => uint256) public action_time_limit;                               // Actions needs to be triggered in time\\nmapping(uint256 => address) public action_can_be_triggered_by;                      // Address which can trigger the action after threshold is passed\\n\\n/* This is used to store calldata and make it takeable from external contracts.\\n@dev be careful with this, low level calls can be tricky. */\\nmapping(uint256 => bytes) public action_id_to_calldata;                             // Mapping actions to relevant calldata.\\n\\n// Action threshold and time limit, so the community can react to changes\\nuint256 public action_threshold;                                                    // This threshold needs to be passed for action to happen\\nuint256 public vote_time_threshold;                                                 // You can only vote once per timer - this is for security and gas optimization\\nuint256 public vote_conf_time_threshold;                                            // Config\\n\\nevent Transfer_Proportion(uint256 beneficiary_proportion);\\nevent Action_Proposed(uint256 id);\\nevent Action_Support(uint256 id);\\nevent Action_Trigger(uint256 id);\\nevent Config_Proposed(string name);\\nevent Config_Supported(string name);\\n\\nmodifier onlyCurators(){\\n  require(curator_proportions[msg.sender] > 0, \\\"Not a curator\\\");\\n  _;\\n}\\n\\n// The Governance contract needs to be deployed first, before all\\n// Max proportions are 100, shared among curators\\n constructor(\\n    address[] memory _curators,\\n    uint256[] memory _curator_proportions,\\n    address[] memory _managers\\n) {\\n    action_threshold = 30;                                        // Threshold -> from this, configs and actions can be triggered\\n    vote_time_threshold = 600;                                    // Onc conf change per 10 mins, in v2 we can make it longer\\n    vote_conf_time_threshold = 0;\\n\\n    require(_curators.length == _curator_proportions.length, \\\"Curators and proportions length mismatch\\\");\\n\\n    uint totalProp;\\n    for (uint256 i = 0; i < _curators.length; i++) {\\n        curator_proportions[_curators[i]] = _curator_proportions[i];\\n        totalProp += _curator_proportions[i];\\n    }\\n\\n    require(totalProp == 100, \\\"Total proportions must be 100\\\");\\n\\n    ID_to_name[0] = Core;                                         // Core config init\\n    core_govAddr_conf(address(this));                             // Global governance address\\n    core_emergency_conf();                                        // Emergency stop value is enforced to be Running==true from start.\\n    core_managers_conf(_managers);\\n}\\n\\n// Core functions, only used during init\\nfunction core_govAddr_conf(address _address) private {\\n    Configuration[Core].name = Core;\\n    Configuration[Core].govaddr = _address;}\\n\\nfunction core_emergency_conf() private {\\n    Configuration[Core].Running = true;}\\n\\nfunction core_managers_conf(address[] memory _addresses) private {\\n    Configuration[Core].managers = _addresses;\\n    address[] storage addGovAddr = Configuration[Core].managers; // Constructor memory -> Storage\\n    addGovAddr.push(address(this));\\n    Configuration[Core].managers = addGovAddr;\\n    }\\n\\n// Only the addresses on the manager list are allowed to execute\\nfunction onlyManagers() internal view {\\n      bool ok;\\n          address [] memory tempman =  read_core_managers();\\n          for (uint i=0; i < tempman.length; i++) {\\n              if (tempman[i] == msg.sender) {ok = true;}\\n          }\\n          if (ok == true){} else {revert(\\\"0\\\");} //Not manager*/\\n}\\n\\nbool public deployed = false;\\nfunction setToDeployed() public returns (bool) {\\n  onlyManagers();\\n  deployed = true;\\n  return deployed;\\n}\\n\\nfunction ActivateDeployedMosaic(\\n    address _userProfile,\\n    address _affiliate,\\n    address _fees,\\n    address _register,\\n    address _poolFactory,\\n    address _feeTo,\\n    address _swapsContract,\\n    address _oracle,\\n    address _deposit,\\n    address _burner,\\n    address _booster\\n) public {\\n    onlyManagers();\\n    require(deployed == false, \\\"It is done.\\\");\\n\\n        Configuration[Core].address_slot.push(msg.sender); //0 owner\\n        Configuration[Core].address_slot.push(_userProfile); //1\\n        Configuration[Core].address_slot.push(_affiliate); //2\\n        Configuration[Core].address_slot.push(_fees); //3\\n        Configuration[Core].address_slot.push(_register); //4\\n        Configuration[Core].address_slot.push(_poolFactory); //5\\n        Configuration[Core].address_slot.push(_feeTo); //6 - duplicate? fees and feeToo are same?\\n        Configuration[Core].address_slot.push(_swapsContract); //7\\n        Configuration[Core].address_slot.push(_oracle); //8\\n        Configuration[Core].address_slot.push(_deposit); //9\\n        Configuration[Core].address_slot.push(_burner); //10\\n        Configuration[Core].address_slot.push(_booster); //11\\n\\n        IAffiliate(_affiliate).selfManageMe();\\n}\\n\\n/* Transfer proportion */\\nfunction transfer_proportion(address _address, uint256 _amount) external returns (uint256) {\\n    require(curator_proportions[msg.sender] >= _amount, \\\"Not enough proportions\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet, your votes need to conclude\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    curator_proportions[msg.sender] = curator_proportions[msg.sender] - _amount;\\n    curator_proportions[_address] = curator_proportions[_address] + _amount;\\n    emit Transfer_Proportion(curator_proportions[_address]);\\n    return curator_proportions[_address];\\n  }\\n\\n/* Configuration manager */\\n\\n// Add or update config.\\nfunction update_config(string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n  ) internal returns (string memory){\\n  Configuration[_name].name = _name;\\n  Configuration[_name].Running = _Running;\\n  Configuration[_name].govaddr = _govaddr;\\n  Configuration[_name].managers = _managers;\\n  Configuration[_name].boolslot = _boolslot;\\n  Configuration[_name].address_slot = _address_slot;\\n  Configuration[_name].uint256_slot = _uint256_slot;\\n  Configuration[_name].bytes32_slot = _bytes32_slot;\\n  return _name;\\n}\\n\\n// Create temp configuration\\nfunction votein_config(string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n) internal returns (string memory){\\n  invoteConfiguration[_name].name = _name;\\n  invoteConfiguration[_name].Running = _Running;\\n  invoteConfiguration[_name].govaddr = _govaddr;\\n  invoteConfiguration[_name].managers = _managers;\\n  invoteConfiguration[_name].boolslot = _boolslot;\\n  invoteConfiguration[_name].address_slot = _address_slot;\\n  invoteConfiguration[_name].uint256_slot = _uint256_slot;\\n  invoteConfiguration[_name].bytes32_slot = _bytes32_slot;\\n  return _name;\\n}\\n\\n// Propose config\\nfunction propose_config(\\n  string memory _name,\\n  bool _Running,\\n  address _govaddr,\\n  address[] memory _managers,\\n  bool[] memory _boolslot,\\n  address[] memory _address_slot,\\n  uint256[] memory _uint256_slot,\\n  bytes32[] memory _bytes32_slot\\n) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n    conf_counter = conf_counter + 1;\\n    require(conf_time_limit[conf_counter] == 0, \\\"In progress\\\");\\n    conf_curator_timer[msg.sender] = block.timestamp;\\n    conf_time_limit[conf_counter] = block.timestamp + vote_time_threshold;\\n    conf_votes[conf_counter] = curator_proportions[msg.sender];\\n    ID_to_name[conf_counter] = _name;\\n    triggered[conf_counter] = false; // It keep rising, so can't be overwritten from true in past value\\n    votein_config(\\n        _name,\\n        _Running,\\n        _govaddr,\\n        _managers,\\n        _boolslot,\\n        _address_slot,\\n        _uint256_slot,\\n        _bytes32_slot\\n    );\\n    emit Config_Proposed(_name);\\n    return conf_counter;\\n  }\\n\\n// Use this with caution!\\nfunction propose_core_change(address _govaddr, bool _Running, address[] memory _managers, address[] memory _owners) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n    require(conf_time_limit[conf_counter] == 0, \\\"In progress\\\");\\n    conf_curator_timer[msg.sender] = block.timestamp;\\n    conf_time_limit[conf_counter] = block.timestamp + vote_time_threshold;\\n    conf_votes[conf_counter] = curator_proportions[msg.sender];\\n    ID_to_name[conf_counter] = Core;\\n    triggered[conf_counter] = false; // It keep rising, so can't be overwritten from true in past value\\n\\n    invoteConfiguration[Core].name = Core;\\n    invoteConfiguration[Core].govaddr = _govaddr;\\n    invoteConfiguration[Core].Running = _Running;\\n    invoteConfiguration[Core].managers = _managers;\\n    invoteConfiguration[Core].address_slot = _owners;\\n    return conf_counter;\\n}\\n\\n// ID and name are requested together for supporting a config because of awareness.\\nfunction support_config_proposal(uint256 _confCount, string memory _name) external returns (string memory) {\\n  require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n  require(block.timestamp >= conf_curator_timer[msg.sender] + vote_conf_time_threshold, \\\"Curator timer not yet expired\\\");\\n  require(conf_time_limit[_confCount] > block.timestamp, \\\"Timed out\\\");\\n  require(conf_time_limit[_confCount] != 0, \\\"Not started\\\");\\n  require(keccak256(abi.encodePacked(ID_to_name[_confCount])) == keccak256(abi.encodePacked(_name)), \\\"You are not aware, Neo.\\\");\\n  conf_curator_timer[msg.sender] = block.timestamp;\\n  conf_votes[_confCount] = conf_votes[_confCount] + curator_proportions[msg.sender];\\n  if (conf_votes[_confCount] >= action_threshold && triggered[_confCount] == false) {\\n    triggered[_confCount] = true;\\n    string memory name = ID_to_name[_confCount];\\n    update_config(\\n    invoteConfiguration[name].name,\\n    invoteConfiguration[name].Running,\\n    invoteConfiguration[name].govaddr,\\n    invoteConfiguration[name].managers,\\n    invoteConfiguration[name].boolslot,\\n    invoteConfiguration[name].address_slot,\\n    invoteConfiguration[name].uint256_slot,\\n    invoteConfiguration[name].bytes32_slot\\n    );\\n\\n    delete invoteConfiguration[name].name;\\n    delete invoteConfiguration[name].Running;\\n    delete invoteConfiguration[name].govaddr;\\n    delete invoteConfiguration[name].managers;\\n    delete invoteConfiguration[name].boolslot;\\n    delete invoteConfiguration[name].address_slot;\\n    delete invoteConfiguration[name].uint256_slot;\\n    delete invoteConfiguration[name].bytes32_slot;\\n\\n    conf_votes[_confCount] = 0;\\n  }\\n  emit Config_Supported(_name);\\n  return Configuration[_name].name = _name;\\n}\\n\\n/* Read configurations */\\n\\nfunction read_core_Running() public view returns (bool) {return Configuration[Core].Running;}\\nfunction read_core_govAddr() public view returns (address) {return Configuration[Core].govaddr;}\\nfunction read_core_managers() public view returns (address[] memory) {return Configuration[Core].managers;}\\nfunction read_core_owners() public view returns (address[] memory) {return Configuration[Core].address_slot;}\\n\\nfunction read_config_Main_addressN(uint256 _n) public view returns (address) {\\n  return Configuration[\\\"Main\\\"].address_slot[_n];\\n}\\n\\n// Can't read full because of stack too deep limit\\nfunction read_config_core(string memory _name) public view returns (\\n  string memory,\\n  bool,\\n  address,\\n  address[] memory){\\n  return (\\n  Configuration[_name].name,\\n  Configuration[_name].Running,\\n  Configuration[_name].govaddr,\\n  Configuration[_name].managers);}\\nfunction read_config_name(string memory _name) public view returns (string memory) {return Configuration[_name].name;}\\nfunction read_config_emergencyStatus(string memory _name) public view returns (bool) {return Configuration[_name].Running;}\\nfunction read_config_governAddress(string memory _name) public view returns (address) {return Configuration[_name].govaddr;}\\nfunction read_config_Managers(string memory _name) public view returns (address[] memory) {return Configuration[_name].managers;}\\n\\nfunction read_config_bool_slot(string memory _name) public view returns (bool[] memory) {return Configuration[_name].boolslot;}\\nfunction read_config_address_slot(string memory _name) public view returns (address[] memory) {return Configuration[_name].address_slot;}\\nfunction read_config_uint256_slot(string memory _name) public view returns (uint256[] memory) {return Configuration[_name].uint256_slot;}\\nfunction read_config_bytes32_slot(string memory _name) public view returns (bytes32[] memory) {return Configuration[_name].bytes32_slot;}\\n\\nfunction read_config_Managers_batched(string memory _name, uint256[] memory _ids) public view returns (address[] memory) {\\n    address[] memory result = new address[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].managers[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_bool_slot_batched(string memory _name, uint256[] memory _ids) public view returns (bool[] memory) {\\n    bool[] memory result = new bool[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].boolslot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_address_slot_batched(string memory _name, uint256[] memory _ids) public view returns (address[] memory) {\\n    address[] memory result = new address[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].address_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_uint256_slot_batched(string memory _name, uint256[] memory _ids) public view returns (uint256[] memory) {\\n    uint256[] memory result = new uint256[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].uint256_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\nfunction read_config_bytes32_slot_batched(string memory _name, uint256[] memory _ids) public view returns (bytes32[] memory) {\\n    bytes32[] memory result = new bytes32[](_ids.length);\\n    for (uint256 i = 0; i < _ids.length; i++) {\\n        result[i] = Configuration[_name].bytes32_slot[_ids[i]];\\n    }\\n    return result;\\n}\\n\\n\\n// Read invote configuration\\n// Can't read full because of stack too deep limit\\nfunction read_invoteConfig_core(string calldata _name) public view returns (\\n  string memory,\\n  bool,\\n  address,\\n  address[] memory){\\n  return (\\n  invoteConfiguration[_name].name,\\n  invoteConfiguration[_name].Running,\\n  invoteConfiguration[_name].govaddr,\\n  invoteConfiguration[_name].managers);}\\nfunction read_invoteConfig_name(string memory _name) public view returns (string memory) {return invoteConfiguration[_name].name;}\\nfunction read_invoteConfig_emergencyStatus(string memory _name) public view returns (bool) {return invoteConfiguration[_name].Running;}\\nfunction read_invoteConfig_governAddress(string memory _name) public view returns (address) {return invoteConfiguration[_name].govaddr;}\\nfunction read_invoteConfig_Managers(string memory _name) public view returns (address[] memory) {return invoteConfiguration[_name].managers;}\\nfunction read_invoteConfig_boolslot(string memory _name) public view returns (bool[] memory) {return invoteConfiguration[_name].boolslot;}\\nfunction read_invoteConfig_address_slot(string memory _name) public view returns (address[] memory) {return invoteConfiguration[_name].address_slot;}\\nfunction read_invoteConfig_uint256_slot(string memory _name) public view returns (uint256[] memory) {return invoteConfiguration[_name].uint256_slot;}\\nfunction read_invoteConfig_bytes32_slot(string memory _name) public view returns (bytes32[] memory) {return invoteConfiguration[_name].bytes32_slot;}\\n\\n\\n/* Action manager system */\\n\\n// Propose an action, regardless of which contract/address it resides in\\nfunction propose_action(uint256 _id, address _trigger_address, bytes memory _calldata) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(action_id_to_calldata[_id].length == 0, \\\"Calldata already set\\\");\\n    require(action_time_limit[_id] == 0, \\\"Create a new one\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    action_time_limit[_id] = block.timestamp + vote_time_threshold;\\n    action_can_be_triggered_by[_id] = _trigger_address;\\n    action_id_to_vote[_id] = curator_proportions[msg.sender];\\n    action_id_to_calldata[_id] = _calldata;\\n    triggered[_id] = false;\\n    emit Action_Proposed(_id);\\n    return _id;\\n  }\\n\\n// Support an already submitted action\\nfunction support_actions(uint256 _id) external returns (uint256) {\\n    require(curator_proportions[msg.sender] > 0, \\\"You are not a curator\\\");\\n    require(block.timestamp >= action_curator_timer[msg.sender] + vote_time_threshold, \\\"Not yet\\\");\\n    require(action_time_limit[_id] > block.timestamp, \\\"Action timed out\\\");\\n    action_curator_timer[msg.sender] = block.timestamp;\\n    action_id_to_vote[_id] = action_id_to_vote[_id] + curator_proportions[msg.sender];\\n    emit Action_Support(_id);\\n    return _id;\\n  }\\n\\n// Trigger action by allowed smart contract address\\n// Only returns calldata, does not guarantee execution success! Triggerer is responsible, choose wisely.\\nfunction trigger_action(uint256 _id) external returns (bytes memory) {\\n    require(action_id_to_vote[_id] >= action_threshold, \\\"Threshold not passed\\\");\\n    require(action_time_limit[_id] > block.timestamp, \\\"Action timed out\\\");\\n    require(action_can_be_triggered_by[_id] == msg.sender, \\\"You are not the triggerer\\\");\\n    require(triggered[_id] == false, \\\"Already triggered\\\");\\n    triggered[_id] = true;\\n    action_id_to_vote[_id] = 0;\\n    emit Action_Trigger(_id);\\n    return action_id_to_calldata[_id];\\n}\\n\\n/* Pure function for generating signatures */\\nfunction generator(string memory _func) public pure returns (bytes memory) {\\n        return abi.encodeWithSignature(_func);\\n    }\\n\\n/* Execution and mass config updates */\\n\\n/* Update contracts address list */\\nfunction update_All(address [] memory _addresses) external onlyCurators returns (address [] memory) {\\n  governedContracts = _addresses;\\n  return governedContracts;\\n}\\n\\n/* Update all contracts from address list */\\nfunction selfManageMe_All() external onlyCurators {\\n  for (uint256 i = 0; i < governedContracts.length; i++) {\\n    _execute_Manage(governedContracts[i]);\\n  }\\n}\\n\\n/* Execute external contract call: selfManageMe() */\\nfunction execute_Manage(address _contractA) external onlyCurators {\\n    _execute_Manage(_contractA);\\n}\\n\\nfunction _execute_Manage(address _contractA) internal {\\n    require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n    IGoverned(_contractA).selfManageMe();\\n}\\n\\n/* Execute external contract call: selfManageMe() */\\nfunction execute_batch_Manage(address[] calldata _contracts) external onlyCurators {\\n  for (uint i; i < _contracts.length; i++) {\\n    _execute_Manage(_contracts[i]);\\n  }\\n}\\n\\n/* Execute external contract calls with any string */\\nfunction execute_ManageBytes(address _contractA, string calldata _call, bytes calldata _data) external onlyCurators {\\n  _execute_ManageBytes(_contractA, _call, _data);\\n}\\n\\nfunction execute_batch_ManageBytes(address[] calldata _contracts, string[] calldata _calls, bytes[] calldata _datas) external onlyCurators {\\n  require(_contracts.length == _calls.length, \\\"Governance: _conracts and _calls length does not match\\\");\\n  require(_calls.length == _datas.length, \\\"Governance: _calls and _datas length does not match\\\");\\n  for (uint i; i < _contracts.length; i++) {\\n    _execute_ManageBytes(_contracts[i], _calls[i], _datas[i]);\\n  }\\n}\\n\\nfunction _execute_ManageBytes(address _contractA, string calldata _call, bytes calldata _data) internal {\\n  require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n  require(bytes(_call).length == 0 || bytes(_call).length >=3, \\\"provide a valid function specification\\\");\\n\\n  for (uint256 i = 0; i < bytes(_call).length; i++) {\\n    require(bytes(_call)[i] != 0x20, \\\"No spaces in fun please\\\");\\n  }\\n\\n  bytes4 signature;\\n  if (bytes(_call).length != 0) {\\n      signature = (bytes4(keccak256(bytes(_call))));\\n  } else {\\n      signature = \\\"\\\";\\n  }\\n\\n  (bool success, bytes memory retData) = _contractA.call(abi.encodePacked(signature, _data));\\n  _evaluateCallReturn(success, retData);\\n}\\n\\n/* Execute external contract calls with address array */\\nfunction execute_ManageList(address _contractA, string calldata _funcName, address[] calldata address_array) external onlyCurators {\\n  require(_contractA != address(this),\\\"You can't call Governance on itself\\\");\\n  (bool success, bytes memory retData) = _contractA.call(abi.encodeWithSignature(_funcName, address_array));\\n  _evaluateCallReturn(success, retData);\\n}\\n\\n/* Update Vault values */\\nfunction execute_Vault_update(address _vaultAddress) external onlyCurators {\\n  IVault(_vaultAddress).selfManageMe();\\n}\\n\\nfunction _evaluateCallReturn(bool success, bytes memory retData) internal pure {\\n    if (!success) {\\n      if (retData.length >= 68) {\\n          bytes memory reason = new bytes(retData.length - 68);\\n          for (uint i = 0; i < reason.length; i++) {\\n              reason[i] = retData[i + 68];\\n          }\\n          revert(string(reason));\\n      } else revert(\\\"Governance: FAILX\\\");\\n  }\\n}\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Governance/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha Governed base contract\\n * @author dlabs.hu\\n * @dev This contract is base for contracts governed by Governance\\n */\\n\\nimport \\\"./Governance.sol\\\";\\nimport \\\"../Interfaces/IGovernance.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\nabstract contract Governed is IGoverned {\\n    GovernanceState internal governanceState;\\n\\n    constructor() {\\n      governanceState.running = true;\\n      governanceState.governanceAddress = address(this);\\n    }\\n\\n    function getGovernanceState() public view returns (GovernanceState memory govState) {\\n      return governanceState;\\n    }\\n\\n    // Modifier responsible for checking if emergency stop was triggered, default is Running == true\\n    modifier Live {\\n        LiveFun();\\n        _;\\n    }\\n\\n    modifier notLive {\\n        notLiveFun();\\n        _;\\n    }\\n\\n\\n    error Governed__EmergencyStopped();\\n    function LiveFun() internal virtual view {\\n        if (!governanceState.running) revert Governed__EmergencyStopped();\\n    }\\n\\n    error Governed__NotStopped();\\n    function notLiveFun() internal virtual view {\\n        if (governanceState.running) revert Governed__NotStopped();\\n    }\\n\\n    modifier onlyManagers() {\\n        onlyManagersFun();\\n        _;\\n    }\\n\\n    error Governed__NotManager(address caller);\\n    function onlyManagersFun() internal virtual view {\\n        if (!isManagerFun(msg.sender)) revert Governed__NotManager(msg.sender);\\n    }\\n\\n\\n    function isManagerFun(address a) internal virtual view returns (bool) {\\n        if (a == governanceState.governanceAddress) {\\n            return true;\\n        }\\n        for (uint i=0; i < governanceState.managers.length; i++) {\\n            if (governanceState.managers[i] == a) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function selfManageMe() external virtual {\\n        onlyManagersFun();\\n        LiveFun();\\n        _selfManageMeBefore();\\n        address governAddress = governanceState.governanceAddress;\\n        bool nextRunning = IGovernance(governAddress).read_core_Running();\\n        if (governanceState.running != nextRunning) _onBeforeEmergencyChange(nextRunning);\\n        governanceState.running = nextRunning;\\n        governanceState.managers = IGovernance(governAddress).read_core_managers();               // List of managers\\n        governanceState.governanceAddress = IGovernance(governAddress).read_core_govAddr();\\n        _selfManageMeAfter();\\n    }\\n\\n    function _selfManageMeBefore() internal virtual;\\n    function _selfManageMeAfter() internal virtual;\\n    function _onBeforeEmergencyChange(bool nextRunning) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/helpers/ISystemRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface ISystemRole {\\n    function checkSystemAdmin(address _account) external view returns (bool);\\n    function checkTrader(address _account) external view returns (bool);\\n    function checkInvestor(address _account) external view returns (bool);\\n    function checkDepositLocker(address _account) external view returns (bool);\\n    function checkAdmin(address _account) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/helpers/SystemRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Mosaic Alpha SystemRole contract\\n * @author dlabs.hu\\n * @dev This contract is base for enumerating roles\\n */\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ISystemRole.sol\\\";\\n\\ncontract SystemRole is AccessControl, Ownable, ISystemRole {\\n    bytes32 public constant SYSTEM_ADMIN_ROLE = keccak256(\\\"SYSTEM_ADMIN_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant TRADER_ROLE = keccak256(\\\"TRADER_ROLE\\\");\\n    bytes32 public constant INVESTOR_ROLE = keccak256(\\\"INVESTOR_ROLE\\\");\\n    bytes32 public constant DEPOSIT_LOCKER_ROLE = keccak256(\\\"DEPOSIT_LOCKER_ROLE\\\");\\n\\n    modifier onlyAdmin() {\\n        require(_isAdmin(_msgSender()), \\\"Ownable: caller is not Admin\\\");\\n        _;\\n    }\\n\\n    modifier onlySystemAdmin() {\\n        require(_isSystemAdmin(_msgSender()), \\\"Ownable: caller is not SysAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyTrader() {\\n        require(_isTrader(_msgSender()), \\\"Ownable: caller is not Trader\\\");\\n        _;\\n    }\\n\\n    modifier onlyInvestor() {\\n        require(_isInvestor(_msgSender()), \\\"Ownable: caller is not Investor\\\");\\n        _;\\n    }\\n\\n    modifier onlyDepositLocker() {\\n        require(_isDepositLocker(_msgSender()), \\\"Ownable: caller is not Deposit Locker\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev contract owner`s address\\n     */\\n    address private _owner;\\n\\n    /**\\n     * @dev sender address is owner of the contract and gets ADMIN role\\n     **/\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev transfer contract ownership\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Adds SYSTEM_ADMIN role to the address\\n     * @param _account The address that should get SYSTEM_ADMIN role\\n     **/\\n    function addSystemAdmin(address _account) public onlyAdmin {\\n        _grantRole(SYSTEM_ADMIN_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Removes SYSTEM_ADMIN role from the address\\n     * @param _account The address that should be revoked from SYSTEM_ADMIN role\\n     **/\\n    function removeSystemAdmin(address _account) public onlyAdmin {\\n        revokeRole(SYSTEM_ADMIN_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Adds TRADER role to the address\\n     * @param _account The address that should get TRADER role\\n     **/\\n    function addTrader(address _account) public onlyAdmin {\\n        _grantRole(TRADER_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Removes TRADER role from the address\\n     * @param _account The address that should be revoked TRADER role\\n     **/\\n    function removeTrader(address _account) public onlyAdmin {\\n        revokeRole(TRADER_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Adds INVESTOR role to the address\\n     * @param _account The address that should get INVESTOR role\\n     **/\\n    function addInvestor(address _account) public onlyAdmin {\\n        _grantRole(INVESTOR_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Removes INVESTOR role from the address\\n     * @param _account The address that should be revoked INVESTOR role\\n     **/\\n    function removeInvestor(address _account) public onlyAdmin {\\n        revokeRole(INVESTOR_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Adds DEPOSIT_LOCKER role to the address\\n     * @param _account The address that should get DEPOSIT_LOCKER role\\n     **/\\n    function addDepositLocker(address _account) public onlyAdmin {\\n        _grantRole(DEPOSIT_LOCKER_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Removes DEPOSIT_LOCKER role from the address\\n     * @param _account The address that should be revoked DEPOSIT_LOCKER role\\n     **/\\n    function removeDepositLocker(address _account) public onlyAdmin {\\n        revokeRole(DEPOSIT_LOCKER_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Adds ADMIN role to the address\\n     * @param _account The address that should get ADMIN role\\n     **/\\n    function addAdmin(address _account) public onlyAdmin {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Function can be called by Admin only.\\n     * Removes ADMIN role from the address\\n     * @param _account The address that should be revoked from ADMIN role\\n     **/\\n    function removeAdmin(address _account) public onlyAdmin {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _account);\\n    }\\n\\n    function _isSystemAdmin(address _account) internal view virtual returns (bool) {\\n        return hasRole(SYSTEM_ADMIN_ROLE, _account);\\n    }\\n\\n    function _isTrader(address _account) internal view virtual returns (bool) {\\n        return hasRole(TRADER_ROLE, _account);\\n    }\\n\\n    function _isInvestor(address _account) internal view virtual returns (bool) {\\n        return hasRole(INVESTOR_ROLE, _account);\\n    }\\n\\n    function _isAdmin(address _account) internal view virtual returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _account);\\n    }\\n\\n    function _isDepositLocker(address _account) internal view virtual returns (bool) {\\n        return hasRole(DEPOSIT_LOCKER_ROLE, _account);\\n    }\\n\\n    function checkSystemAdmin(address _account) external view virtual returns (bool) {\\n        return _isSystemAdmin(_account);\\n    }\\n\\n    function checkTrader(address _account) external view virtual returns (bool) {\\n        return _isTrader(_account);\\n    }\\n\\n    function checkInvestor(address _account) external view virtual returns (bool) {\\n        return _isInvestor(_account);\\n    }\\n\\n    function checkDepositLocker(address _account) external view virtual returns (bool) {\\n        return _isDepositLocker(_account);\\n    }\\n\\n    function checkAdmin(address _account) external view virtual returns (bool) {\\n        return _isAdmin(_account);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IAffiliate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Interfaces/IUserProfile.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IAffiliate is IGoverned {\\n    struct AffiliateLevel {\\n        uint8 rank;\\n        uint8 commissionLevels; // eligibility for how many levels affiliate comission\\n        uint16 referralBuyFeeDiscount; // buy fee disccount for the referrals refistering for the user - 10000 = 100%\\n        uint16 referralCountThreshold; // minimum amount of direct referrals needed for level\\n        uint16 stakingBonus;\\n        uint16 conversionRatio;\\n        uint32 claimLimit; // max comission per month claimable - in usd value, not xe18!\\n        uint256 kdxStakeThreshold; // minimum amount of kdx stake needed\\n        uint256 purchaseThreshold; // minimum amount of self basket purchase needed\\n        uint256 referralPurchaseThreshold; // minimum amount of referral basket purchase needed\\n        uint256 traderPurchaseThreshold; // minimum amount of user basket purchase (for traders) needed\\n\\n        string rankName;\\n    }\\n\\n    struct AffiliateUserData {\\n        uint32 affiliateRevision;\\n        uint32 activeReferralCount;\\n        uint256 userPurchase;\\n        uint256 referralPurchase;\\n        uint256 traderPurchase;\\n        uint256 kdxStake;\\n    }\\n\\n    struct AffiliateConfig {\\n        uint16 level1RewardShare; // 0..10000. 6000 -> 60% of affiliate rewards go to level 1, 40% to level2\\n        uint240 activeReferralPurchaseThreshold; // the min amount of (usdt) purchase in wei to consider a referral active\\n    }\\n\\n    function getCommissionLevelsForRanks(uint8 rank, uint8 rank2) external view returns (uint8 commissionLevels, uint8 commissionLevels2);\\n\\n    function getLevelsAndConversionAndClaimLimitForRank(uint8 rank) external view returns (uint8 commissionLevels, uint16 conversionRatio, uint32 claimLimit);\\n\\n    function getConfig() external view returns (AffiliateConfig memory config);\\n\\n    // get the number of affiliate levels\\n    function getLevelCount() external view returns (uint256 count);\\n\\n    function getLevelDetails(uint256 _idx) external view returns (AffiliateLevel memory level);\\n\\n    function getAllLevelDetails() external view returns (AffiliateLevel[] memory levels);\\n\\n    function getAffiliateUserData(address user) external view returns (AffiliateUserData memory data);\\n\\n    function getUserPurchaseAmount(address user) external view returns (uint256 amount);\\n\\n    function getReferralPurchaseAmount(address user) external view returns (uint256 amount);\\n\\n    function userStakeChanged(address user, address referredBy, uint256 kdxAmount) external;\\n\\n    function registerUserPurchase(address user, address referredBy, address trader, uint256 usdAmount) external;\\n    function registerUserPurchaseAsTokens(address user, address referredBy, address trader, address[] memory tokens, uint256[] memory tokenAmounts) external;\\n\\n    event AffiliateConfigUpdated(AffiliateConfig _newConfig, AffiliateConfig config);\\n\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IFees is IGoverned {\\n    struct MosaicFeeRanges {\\n        uint16 buyFeeMin;          // 10000 = 100%\\n        uint16 buyFeeMax;\\n        uint16 trailingFeeMin;\\n        uint16 trailingFeeMax;\\n        uint16 performanceFeeMin;\\n        uint16 performanceFeeMax;\\n    }\\n\\n    struct MosaicFeeDistribution {\\n        uint16 userBuyFeeDiscountMax;\\n        uint16 userTrailingFeeDiscountMax;\\n        uint16 userPerformanceFeeDiscountMax;\\n        uint16 traderBuyFeeShareMin;          // 10000 = 100%\\n        uint16 traderBuyFeeShareMax;\\n        uint16 traderTrailingFeeShareMin;\\n        uint16 traderTrailingFeeShareMax;\\n        uint16 traderPerformanceFeeShareMin;\\n        uint16 traderPerformanceFeeShareMax;\\n        uint16 affiliateBuyFeeShare;\\n        uint16 affiliateTrailingFeeShare;\\n        uint16 affiliatePerformanceFeeShare;\\n        uint16 affiliateTraderFeeShare;\\n        uint16 affiliateLevel1RewardShare; // 0..10000. 6000 -> 60% of affiliate rewards go to level 1, 40% to level2\\n    }\\n\\n    struct MosaicPlatformFeeShares {\\n        uint8 executorShare;\\n        uint8 traderExecutorShare;\\n        uint8 userExecutorShare;\\n    }\\n\\n    struct MosaicUserFeeLevels {\\n        //slot1\\n        bool parentsCached;\\n        uint8 levels;\\n        uint16 conversionRatio;\\n        uint32 traderRevenueShareLevel; // 10 ** 9 = 100%\\n        uint32 userFeeDiscountLevel; // 10 ** 9 = 100%\\n        address parent;\\n        // slot2\\n        address parent2;\\n        uint32 lastTime;\\n        uint32 level1xTime;\\n        uint32 level2xTime;\\n        // slot3\\n        uint64 userFeeDiscountLevelxTime;\\n        uint32 claimLimit;\\n        uint64 claimLimitxTime;\\n\\n        //uint48 conversionRatioxTime;\\n    }\\n\\n    struct BuyFeeDistribution {\\n        uint userRebateAmount;\\n        uint traderAmount;\\n        uint affiliateAmount;\\n        // remaining is system fee\\n    }\\n\\n    struct TraderFeeDistribution {\\n        uint traderAmount;\\n        uint affiliateAmount;\\n        // remaining is system fee\\n    }\\n\\n    struct MosaicPoolFees {\\n        uint16 buyFee;\\n        uint16 trailingFee;\\n        uint16 performanceFee;\\n    }\\n\\n    struct PoolFeeStatus {\\n        uint256 claimableUserFeePerLp;\\n        uint256 claimableAffiliateL1FeePerLp;\\n        uint256 claimableAffiliateL2FeePerLp;\\n        uint128 claimableTotalFixedTraderFee;\\n        uint128 claimableTotalVariableTraderFee;\\n        uint128 feesContractSelfBalance;\\n    }\\n\\n    struct UserPoolFeeStatus {\\n        uint32 lastClaimTime;\\n        uint32 lastLevel1xTime;\\n        uint32 lastLevel2xTime;\\n        //uint48 lastConversionRatioxTime;\\n        uint64 lastUserFeeDiscountLevelxTime;\\n        uint128 userDirectlyClaimableFee;\\n       // uint128 userAffiliateClaimableFee;\\n        uint128 userClaimableFee;\\n        uint128 userClaimableL1Fee;\\n        uint128 userClaimableL2Fee;\\n        uint128 traderClaimableFee;\\n        // uint128 balance;\\n        uint128 l1Balance;\\n        uint128 l2Balance;\\n        uint256 lastClaimableUserFeePerLp;\\n        uint256 lastClaimableAffiliateL1FeePerLp;\\n        uint256 lastClaimableAffiliateL2FeePerLp;\\n    }\\n\\n    struct OnBeforeTransferPayload {\\n        uint128 feesContractBalanceBefore;\\n        uint128 trailingLpToMint;\\n        uint128 performanceLpToMint;\\n    }\\n\\n    /** HOOKS **/\\n    /** UserProfile **/\\n    function userRankChanged(address _user, uint8 _level) external;\\n\\n    /** Staking **/\\n    function userStakeChanged(address _user, uint256 _amount) external;\\n\\n    /** Pool **/\\n    function allocateBuyFee(address _pool, address _buyer, address _trader, uint _buyFeeAmount) external;\\n    function allocateTrailingFee(address _pool, address _trader, uint _feeAmount, uint _totalSupplyBefore, address _executor) external;\\n    function allocatePerformanceFee(address _pool, address _trader, uint _feeAmount, uint _totalSupplyBefore, address _executor) external;\\n    function onBeforeTransfer(address _pool, address _from, address _to, uint _fromBalanceBefore, uint _toBalanceBefore, uint256 _amount, uint256 _totalSupplyBefore, address _trader, OnBeforeTransferPayload memory payload) external;\\n    function getFeeRanges() external view returns (MosaicFeeRanges memory fees);\\n    function getFeeDistribution() external view returns (MosaicFeeDistribution memory fees);\\n    function getUserFeeLevels(address user) external view returns (MosaicUserFeeLevels memory userFeeLevels);\\n    function isValidFeeRanges(MosaicFeeRanges calldata ranges) external view returns (bool valid);\\n    function isValidFeeDistribution(MosaicFeeDistribution calldata distribution) external view returns (bool valid);\\n    function isValidPoolFees(MosaicPoolFees calldata poolFees) external view returns (bool valid);\\n    function isValidBuyFee(uint16 fee) external view returns (bool valid);\\n    function isValidTrailingFee(uint16 fee) external view returns (bool valid);\\n    function isValidPerformanceFee(uint16 fee) external view returns (bool valid);\\n\\n    function calculateBuyFeeDistribution(address user, address trader, uint feeAmount, uint16 buyFeeDiscount) external view returns (BuyFeeDistribution memory distribution);\\n    function calculateTraderFeeDistribution(uint amount) external view returns (TraderFeeDistribution memory distribution);\\n    function calculateTrailingFeeTraderDistribution(address trader, uint feeAmount) external view returns (uint amount);\\n    /** GETTERS **/\\n    // get the fee reduction percentage the user has achieved. 100% = 10 ** 9\\n    function getUserFeeDiscountLevel(address user) external view returns (uint32 level);\\n\\n    // get the fee reduction percentage the user has achieved. 100% = 10 ** 9\\n    function getTraderRevenueShareLevel(address user) external view returns (uint32 level);\\n\\n    event FeeRangesUpdated(MosaicFeeRanges newRanges, MosaicFeeRanges oldRanges);\\n    event FeeDistributionUpdated(MosaicFeeDistribution newRanges, MosaicFeeDistribution oldRanges);\\n    event PlatformFeeSharesUpdated(MosaicPlatformFeeShares newShares, MosaicPlatformFeeShares oldShares);\\n    event UserFeeLevelsChanged(address indexed user, MosaicUserFeeLevels newLevels);\\n    event PerformanceFeeAllocated(address pool, uint256 performanceExp);\\n    event TrailingFeeAllocated(address pool, uint256 trailingExp);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.17;\\n\\ninterface IGovernance {\\n    function propose_action(uint256 _id, address _trigger_address, bytes memory _calldata) external returns (uint256) ;\\n    function support_actions(uint256 _id) external returns (uint256) ;\\n    function trigger_action(uint256 _id) external returns (bytes memory) ;\\n    function transfer_proportion(address _address, uint256 _amount) external returns (uint256) ;\\n\\n    function read_core_Running() external view returns (bool);\\n    function read_core_govAddr() external view returns (address);\\n    function read_core_managers() external view returns (address[] memory);\\n    function read_core_owners() external view returns (address[] memory);\\n\\n    function read_config_core(string memory _name) external view returns (string memory);\\n    function read_config_emergencyStatus(string memory _name) external view returns (bool);\\n    function read_config_governAddress(string memory _name) external view returns (address);\\n    function read_config_Managers(string memory _name) external view returns (address [] memory);\\n\\n    function read_config_bool_slot(string memory _name) external view returns (bool[] memory);\\n    function read_config_address_slot(string memory _name) external view returns (address[] memory);\\n    function read_config_uint256_slot(string memory _name) external view returns (uint256[] memory);\\n    function read_config_bytes32_slot(string memory _name) external view returns (bytes32[] memory);\\n\\n    function read_invoteConfig_core(string memory _name) external view returns (string memory);\\n    function read_invoteConfig_name(string memory _name) external view returns (string memory);\\n    function read_invoteConfig_emergencyStatus(string memory _name) external view returns (bool);\\n    function read_invoteConfig_governAddress(string memory _name) external view returns (address);\\n    function read_invoteConfig_Managers(string memory _name) external view returns (address[] memory);\\n    function read_invoteConfig_boolslot(string memory _name) external view returns (bool[] memory);\\n    function read_invoteConfig_address_slot(string memory _name) external view returns (address[] memory);\\n    function read_invoteConfig_uint256_slot(string memory _name) external view returns (uint256[] memory);\\n    function read_invoteConfig_bytes32_slot(string memory _name) external view returns (bytes32[] memory);\\n\\n    function propose_config(string memory _name, bool _bool_val, address _address_val, address[] memory _address_list, uint256 _uint256_val, bytes32 _bytes32_val) external returns (uint256);\\n    function support_config_proposal(uint256 _confCount, string memory _name) external returns (string memory);\\n    function generator() external pure returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IGoverned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT LICENSE\\npragma solidity ^0.8.17;\\n\\ninterface IGoverned {\\n    struct GovernanceState {\\n      bool running;\\n      address governanceAddress;\\n      address[] managers;\\n    }\\n\\n    function selfManageMe() external;\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n\\n// trader and pool register + whitelisted user register\\ninterface IRegister {\\n    function isApprovedPool(uint32 _poolId) external view returns (bool approved);\\n    function isApprovedPool(address _poolAddr) external view returns (bool approved);\\n    function isApprovedTrader(address _user) external view returns (bool approved);\\n\\n    function approvePools(address[] memory _poolIds) external;\\n    function approvePoolsById(uint32[] memory _poolIds) external;\\n    function approveTraders(address[] memory _traders) external;\\n\\n    function revokePools(address[] memory _poolAddrs) external;\\n    function revokePoolsById(uint32[] memory _poolIds) external;\\n    function revokeTraders(address[] memory _traders) external;\\n\\n    function removeWhitelist(address _address) external;\\n    function removeBlacklist(address _address) external;\\n    function addWhitelist(address _address) external;\\n    function addBlacklist(address _address) external;\\n    function addWhitelistBulk(address[] calldata _address) external;\\n\\n    function isWhitelisted(address _address) external view returns(bool);\\n    function isBlacklisted(address _address) external view returns(bool);\\n\\n    event PoolApproved(uint32 indexed poolId, address indexed poolAddr);\\n    event PoolRevoked(uint32 indexed poolId, address indexed poolAddr);\\n\\n    event TraderApproved(address indexed trader);\\n    event TraderRevoked(address indexed trader);\\n\\n    event WhitelistAdded(address _address);\\n    event WhitelistRemoved(address _address);\\n    event BlacklistAdded(address _address);\\n    event BlacklistRemoved(address _address);\\n}\\n\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/ISimpleDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface ISimpleDeposit {\\n\\n    struct AccountBalances {\\n        uint256 balance;\\n        uint256 lockedBalance;\\n        uint256 externalLockedBalance;\\n        uint64 lastLockTimestamp;\\n        uint64 unlockTimestamp;\\n    }\\n\\n    function deposit(uint256 _amount) external;\\n    function depositTo(address _recipient, uint256 _amount) external;\\n    function withdraw(uint256 _amount) external;\\n    function userLock(uint256 _amount, address _referredBy) external;\\n    function userUnlock(uint256 _amount) external;\\n    function depositAndLock(uint256 _amount, address _referredBy) external;\\n    function unlockAndWithdraw(uint256 _amount) external;\\n    function externalLock(address _account, uint256 _amount) external;\\n    function externalUnlock(address _account, uint256 _amount) external;\\n\\n\\n    function getLockTime() external view returns (uint256 time);\\n    function getAccountBalances(address _account) external view returns (AccountBalances memory _accountBalance);\\n    function getAccountLockedBalanceUnlockTimestamp(address _account) external view returns (uint256 _timestmap);\\n    function getWithdrawableAccountLockedBalance(address _account) external view returns (uint256 _amount);\\n    function getAccountBalance(address _account) external view returns (uint256 _amount);\\n    function getAccountLockedBalance(address _account) external view returns (uint256 _amount);\\n    function getExternalLockedBalance(address _account) external view returns (uint256 _amount);\\n\\n    function approveExternalAddress(address _locker) external;\\n    function disapproveExternalAddress(address _locker) external;\\n\\n    // /**\\n    //  * @dev Events emitted\\n    //  */\\n    event DepositCreated(\\n        address indexed depositOwner,\\n        uint256 depositAmount,\\n        uint256 depositTime,\\n        uint256 totalBalance,\\n        uint256 clientBalance\\n    );\\n\\n    event DepositWithdrawn(\\n        address indexed depositOwner,\\n        uint256 depositAmount,\\n        uint256 withdrawTime,\\n        uint256 totalBalance,\\n        uint256 clientBalance\\n    );\\n\\n    event DepositLocked(\\n        address indexed depositOwner,\\n        uint256 lockAmount,\\n        uint256 lockTimeStart,\\n        uint256 lockTimeEnd,\\n        uint256 totalLocked,\\n        uint256 clientLocked\\n    );\\n\\n    event DepositUnlocked(\\n        address indexed depositOwner,\\n        uint256 unlockAmount,\\n        uint256 unlockTime,\\n        uint256 totalLocked,\\n        uint256 clientLocked\\n    );\\n\\n    event ExternalLocked(\\n        address indexed locker,\\n        address indexed owner,\\n        uint256 lockAmount,\\n        uint256 lockTimeStart\\n    );\\n\\n    event ExternalUnlocked(\\n        address indexed locker,\\n        address indexed owner,\\n        uint256 unlockAmount,\\n        uint256 unlockTime\\n    );\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IUserProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface IUserProfile {\\n\\n    struct UserProfile {                           /// Storage - We map the affiliated person to the affiliated_by person\\n        bool exists;\\n        uint8 rank;\\n        uint8 referredByRank;                       /// Rank of referrer at transaction time\\n        uint16 buyFeeDiscount;                            /// buy discount - 10000 = 100%\\n        uint32 referralCount;                          /// Number of referred by referee\\n        uint32 activeReferralCount;                    /// Number of active users referred by referee\\n        address referredBy;                            /// Address is referred by this user\\n        address referredByBefore;                     /// We store the 2nd step here to save gas (no interation needed)\\n    }\\n\\n    struct Parent {\\n        uint8 rank;\\n        address user;\\n    }\\n\\n    // returns the parent of the address\\n    function getParent(address _user) external view returns (address parent);\\n    // returns the parent and the parent of the parent of the address\\n    function getParents(address _user) external view returns (address parent, address parentOfParent);\\n\\n\\n    // returns user's parents and ranks of parents in 1 call\\n    function getParentsAndParentRanks(address _user) external view returns (Parent memory parent, Parent memory parent2);\\n    // returns user's parents and ranks of parents and use rbuy fee discount in 1 call\\n    function getParentsAndBuyFeeDiscount(address _user) external view returns (Parent memory parent, Parent memory parent2, uint16 discount);\\n    // returns number of referrals of address\\n    function getReferralCount(address _user) external view returns (uint32 count);\\n    // returns number of active referrals of address\\n    function getActiveReferralCount(address _user) external view returns (uint32 count);\\n\\n    // returns up to _count referrals of _user\\n    function getAllReferrals(address _user) external view returns (address[] memory referrals);\\n\\n    // returns up to _count referrals of _user starting from _index\\n    function getReferrals(address _user, uint256 _index, uint256 _count) external view returns (address[] memory referrals);\\n\\n    function getDefaultReferral() external view returns (address defaultReferral);\\n\\n    // get user information of _user\\n    function getUser(address _user) external view returns (UserProfile memory user);\\n\\n    function getUserRank(address _user) external view returns (uint8 rank);\\n\\n    // returns the total number of registered users\\n    function getUserCount() external view returns (uint256 count);\\n\\n    // return true if user exists\\n    function userExists(address _user) external view returns (bool exists);\\n\\n    function registerUser(address _user) external;\\n\\n    function increaseActiveReferralCount(address _user) external;\\n\\n    function registerUser(address _user, address _referredBy) external;\\n\\n    function registerUserWoBooster(address _user) external;\\n\\n    function setUserRank(address _user, uint8 _rank) external;\\n\\n    // function setDefaultReferral(address _referral) external;\\n\\n    // events\\n    event UserRegistered(address user, address referredBy, uint8 referredByRank, uint16 buyFeeDiscount);\\n}\"\r\n    },\r\n    \"contracts/mosaic-alpha-contracts/Interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Interfaces/IGoverned.sol\\\";\\n\\ninterface IVault is IGoverned {\\n\\n    struct VaultState {\\n        bool userPoolTrackingDisabled;\\n        // bool paused;\\n        bool emergencyMode;\\n        bool whitelistingEnabled;\\n        bool flashEnabled;\\n        uint8 maxPoolTokenCount;\\n        uint8 feeToProtocol;\\n        uint8 bidMultiplier;\\n        uint16 flashFee;\\n        uint16 swapFee;\\n        uint16 bidMinDuration;\\n        uint16 rebalancingMinDuration;\\n        uint32 emergencyModeTimestamp;\\n        address feeTo;\\n    }\\n\\n    struct PoolState {\\n        bool poolInitialized;\\n        bool poolEmergencyMode;\\n        bool feeless;\\n        bool boosted;\\n        uint8 poolTokenCount;\\n        uint32 emergencyModeTime;\\n        uint48 lastTrailingTimestamp;\\n        uint48 lastPerformanceTimestamp;\\n        uint216 emergencyModeLPs;\\n        TotalSupplyBase totalSupplyBase;\\n    }\\n\\n    function getVaultState() external view returns (VaultState memory _vaultState);\\n\\n\\n    /************************************************************************************/\\n    /* Admin functions                                                                  */\\n    /************************************************************************************/\\n    // Check if given address is admin or not\\n    function isAdmin(address _address) external view returns (bool _isAdmin);\\n\\n    // Add or remove vault admin. Only admin can call this function\\n    function AddRemoveAdmin(address _address, bool _ShouldBeAdmin) external;// returns (address, bool);\\n\\n    // Boost or unboost pool. Boosted pools get 100% of their swap fees.\\n    // For non boosted pools, a part of the swap fees go to the platform.\\n    // Only admin can call this function\\n    function AddRemoveBoostedPool(address _address, bool _ShouldBeBoosted) external;// returns (address, bool);\\n\\n\\n    /************************************************************************************/\\n    /* Token whitelist                                                                  */\\n    /************************************************************************************/\\n\\n    // Only admin can call this function. Only the whitelisted tokens can be added to a Pool\\n    // If empty: No whitelist, all tokens are allowed\\n    function setWhitelistedTokens(address[] calldata _tokens, bool[] calldata _whitelisted) external;\\n\\n    function isTokenWhitelisted(address token) external view returns (bool whitelisted);\\n    event TokenWhitelistChanged(address indexed token, bool isWhitelisted);\\n\\n    /************************************************************************************/\\n    /* Internal Balances                                                                */\\n    /************************************************************************************/\\n\\n    // Users can deposit tokens into the Vault to have an internal balance in the Mosaic platform.\\n    // This internal balance can be used to deposit tokens into a Pool (Mint), withdraw tokens from\\n    // a Pool (Burn), or perform a swap. The internal balance can also be transferred or withdrawn.\\n\\n    // Get a specific user's internal balance for one given token\\n    function getInternalBalance(address user, address token) external view returns (uint balance);\\n\\n    // Get a specific user's internal balances for the given token array\\n    function getInternalBalances(address user, address[] memory tokens) external view returns (uint[] memory balances);\\n\\n    // Deposit tokens to the msg.sender's  internal balance\\n    function depositToInternalBalance(address token, uint amount) external;\\n\\n    // Deposit tokens to the recipient internal balance\\n    function depositToInternalBalanceToAddress(address token, address to, uint amount) external;\\n\\n    // ERC20 token transfer from the message sender's internal balance to their address\\n    function withdrawFromInternalBalance(address token, uint amount) external;\\n\\n    // ERC20 token transfer from the message sender's internal balance to the given address\\n    function withdrawFromInternalBalanceToAddress(address token, address to, uint amount) external;\\n\\n    // Transfer tokens from the message sender's internal balance to another user's internal balance\\n    function transferInternalBalance(address token, address to, uint amount) external;\\n\\n    // Event emitted when user's internal balance changes by delta amount. Positive delta means internal balance increase\\n    event InternalBalanceChanged(address indexed user, address indexed token, int256 delta);\\n\\n    /************************************************************************************/\\n    /* Pool ERC20 helper                                                                */\\n    /************************************************************************************/\\n\\n    function transferFromAsTokenContract(address from, address to, uint amount) external returns (bool success);\\n    function mintAsTokenContract(address to, uint amount) external returns (bool success);\\n    function burnAsTokenContract(address from, uint amount) external returns (bool success);\\n\\n    /************************************************************************************/\\n    /* Pool                                                                             */\\n    /************************************************************************************/\\n\\n    struct TotalSupplyBase {\\n        uint32 timestamp;\\n        uint224 amount;\\n    }\\n\\n    event TotalSupplyBaseChanged(address indexed poolAddr, TotalSupplyBase supplyBase);\\n    // Each pool should be one of the following based on poolType:\\n    // 0: REBALANCING: (30% ETH, 30% BTC, 40% MKR). Weight changes gradually in time.\\n    // 1: NON_REBALANCING: (100 ETH, 5 BTC, 200 MKR). Weight changes gradually in time.\\n    // 2: DAYTRADE: Non rebalancing pool. Weight changes immediately.\\n\\n    function tokenInPool(address pool, address token) external view returns (bool inPool);\\n\\n    function poolIdToAddress(uint32 poolId) external view returns (address poolAddr);\\n\\n    function poolAddressToId(address poolAddr) external view returns (uint32 poolId);\\n\\n    // pool calls this to move the pool to zerofee status\\n    function disableFees() external;\\n\\n    // Returns the total pool count\\n    function poolCount() external view returns (uint32 count);\\n\\n    // Returns a list of pool IDs where the user has assets\\n    function userJoinedPools(address user) external view returns (uint32[] memory poolIDs);\\n\\n    // Returns a list of pool the user owns\\n    function userOwnedPools(address user) external view returns (uint32[] memory poolIDs);\\n\\n    //Get pool tokens and their balances\\n    function getPoolTokens(uint32 poolId) external view returns (address[] memory tokens, uint[] memory balances);\\n\\n    function getPoolTokensByAddr(address poolAddr) external view returns (address[] memory tokens, uint[] memory balances);\\n\\n    function getPoolTotalSupplyBase(uint32 poolId) external view returns (TotalSupplyBase memory totalSupplyBase);\\n\\n    function getPoolTotalSupplyBaseByAddr(address poolAddr) external view returns (TotalSupplyBase memory totalSupplyBase);\\n\\n    // Register a new pool. Pool type can not be changed after the creation. Emits a PoolRegistered event.\\n    function registerPool(address _poolAddr, address _user, address _referredBy) external returns (uint32 poolId);\\n    event PoolRegistered(uint32 indexed poolId, address indexed poolAddress);\\n\\n    // Registers tokens for the Pool. Must be called by the Pool's contract. Emits a TokensRegistered event.\\n    function registerTokens(address[] memory _tokenList, bool onlyWhitelisted) external;\\n    event TokensRegistered(uint32 indexed poolId, address[] newTokens);\\n\\n    // Adds initial liquidity to the pool\\n    function addInitialLiquidity(uint32 _poolId, address[] memory _tokens, uint[] memory _liquidity, address tokensTo, bool fromInternalBalance) external;\\n    event InitialLiquidityAdded(uint32 indexed poolId, address user, uint lpTokens, address[] tokens, uint[] amounts);\\n\\n    // Deegisters tokens for the poolId Pool. Must be called by the Pool's contract.\\n    // Tokens to be deregistered should have 0 balance. Emits a TokensDeregistered event.\\n    function deregisterToken(address _tokenAddress, uint _remainingAmount) external;\\n    event TokensDeregistered(uint32 indexed poolId, address tokenAddress);\\n\\n    // This function is called when a liquidity provider adds liquidity to the pool.\\n    // It mints additional liquidity tokens as a reward.\\n    // If fromInternalBalance is true, the amounts will be deducted from user's internal balance\\n    function Mint(uint32 poolId, uint LPTokensRequested, uint[] memory amountsMax, address to, address referredBy, bool fromInternalBalance, uint deadline, uint usdValue) external returns (uint[] memory amountsSpent);\\n    event Minted(uint32 indexed poolId, address txFrom, address user, uint lpTokens, address[] tokens, uint[] amounts, bool fromInternalBalance);\\n\\n    // This function is called when a liquidity provider removes liquidity from the pool.\\n    // It burns the liquidity tokens and sends back the tokens as ERC20 transfer.\\n    // If toInternalBalance is true, the tokens will be deposited to user's internal balance\\n    function Burn(uint32 poolId, uint LPTokensToBurn, uint[] memory amountsMin, bool toInternalBalance, uint deadline, address from) external returns (uint[] memory amountsReceived);\\n    event Burned(uint32 indexed poolId, address txFrom, address user, uint lpTokens, address[] tokens, uint[] amounts, bool fromInternalBalance);\\n\\n    /************************************************************************************/\\n    /* Swap                                                                             */\\n    /************************************************************************************/\\n\\n    // Executes a swap operation on a single Pool. Called by the user\\n    // If the swap is initiated with givenInOrOut == 1 (i.e., the number of tokens to be sent to the Pool is specified),\\n    // it returns the amount of tokens taken from the Pool, which should not be less than limit.\\n    // If the swap is initiated with givenInOrOut == 0 parameter (i.e., the number of tokens to be taken from the Pool is specified),\\n    // it returns the amount of tokens sent to the Pool, which should not exceed limit.\\n    // Emits a Swap event\\n    function swap(address poolAddress, bool givenInOrOut, address tokenIn, address tokenOut, uint amount, bool fromInternalBalance, uint limit, uint64 deadline) external returns (uint calculatedAmount);\\n    event Swap(uint32 indexed poolId, address indexed tokenIn, address indexed tokenOut, uint amountIn, uint amountOut, address user);\\n\\n    // Execute a multi-hop token swap between multiple pairs of tokens on their corresponding pools\\n    // Example: 100 tokenA -> tokenB -> tokenC\\n    // pools = [pool1, pool2], tokens = [tokenA, tokenB, tokenC], amountIn = 100\\n    // The returned amount of tokenC should not be less than limit\\n    function multiSwap(address[] memory pools, address[] memory tokens, uint amountIn, bool fromInternalBalance, uint limit, uint64 deadline) external returns (uint calculatedAmount);\\n\\n    /************************************************************************************/\\n    /* Dutch Auction                                                                    */\\n    /************************************************************************************/\\n    // Non rebalancing pools (where poolId is not 0) can use Dutch auction to change their\\n    // balance sheet. A Dutch auction (also called a descending price auction) refers to a\\n    // type of auction in which an auctioneer starts with a very high price, incrementally\\n    // lowering the price. User can bid for the entire amount, or just a fraction of that.\\n\\n    struct AuctionInfo {\\n        address poolAddress;\\n        uint32 startsAt;\\n        uint32 duration;\\n        uint32 expiration;\\n        address tokenToSell;\\n        address tokenToBuy;\\n        uint startingAmount;\\n        uint remainingAmount;\\n        uint startingPrice;\\n        uint endingPrice;\\n    }\\n\\n    // Get total (lifetime) auction count\\n    function getAuctionCount() external view returns (uint256 auctionCount);\\n\\n    // Get all information of the given auction\\n    function getAuctionInfo(uint auctionId) external view returns (AuctionInfo memory);\\n\\n    // Returns 'true' if the auction is still running and there are tokens available for purchase\\n    // Returns 'false' if the auction has expired or if all tokens have been sold.\\n    function isRunning(uint auctionId) external view returns (bool);\\n\\n    // Called by pool owner. Emits an auctionStarted event\\n    function startAuction(address tokenToSell, uint amountToSell, address tokenToBuy, uint32 duration, uint32 expiration, uint endingPrice) external returns (uint auctionId);\\n    event AuctionStarted(uint32 poolId, uint auctionId, AuctionInfo _info);\\n\\n    // Called by pool owner. Emits an auctionStopped event\\n    function stopAuction(uint auctionId) external;\\n    event AuctionStopped(uint auctionId);\\n\\n    // Get the current price for 'remainingAmount' number of tokens\\n    function getBidPrice(uint auctionId) external view returns (uint currentPrice, uint remainingAmount);\\n\\n    // Place a bid for the specified 'auctionId'. Fractional bids are supported, with the 'amount'\\n    // representing the number of tokens to purchase. The amounts are deducted from and credited to the\\n    // user's internal balance. If there are insufficient tokens in the user's internal balance, the function reverts.\\n    // If there are fewer tokens available for the auction than the specified 'amount' and enableLessAmount == 1,\\n    // the function purchases all remaining tokens (which may be less than the specified amount).\\n    // If enableLessAmount is set to 0, the function reverts. Emits a 'newBid' event\\n    function bid(uint auctionId, uint amount, bool enableLessAmount, bool fromInternalBalance, uint deadline) external returns (uint spent);\\n    event NewBid(uint auctionId, address buyer, uint tokensBought, uint paid, address tokenToBuy, address tokenToSell, uint remainingAmount);\\n\\n    /************************************************************************************/\\n    /* Emergency                                                                        */\\n    /************************************************************************************/\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    // Only an admin can call this function.\\n    function setEmergencyMode() external;\\n\\n    // Activate emergency mode. Once the contract enters emergency mode, it cannot be reverted or cancelled.\\n    function setPoolEmergencyMode(address poolAddress) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Deposit__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Governed__EmergencyStopped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Governed__NotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Governed__NotStopped\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clientBalance\",\"type\":\"uint256\"}],\"name\":\"DepositCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTimeStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTimeEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clientLocked\",\"type\":\"uint256\"}],\"name\":\"DepositLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clientLocked\",\"type\":\"uint256\"}],\"name\":\"DepositUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clientBalance\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTimeStart\",\"type\":\"uint256\"}],\"name\":\"ExternalLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"ExternalUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_LOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVESTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYSTEM_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_affiliateContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feesContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addDepositLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addSystemAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"approveExternalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"changeAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fees\",\"type\":\"address\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_register\",\"type\":\"address\"}],\"name\":\"changeRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkDepositLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkSystemAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositAndLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"depositAndLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"disapproveExternalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_accountBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalLockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lastLockTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct ISimpleDeposit.AccountBalances\",\"name\":\"_accountBalance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_accountBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountLockedBalanceUnlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getExternalLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_accountBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernanceState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"running\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"managers\",\"type\":\"address[]\"}],\"internalType\":\"struct IGoverned.GovernanceState\",\"name\":\"govState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getWithdrawableAccountLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"isApprovedExternalAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeDepositLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeSystemAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfManageMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_time\",\"type\":\"uint64\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setWhitelistingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"userLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"userLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"userUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SimpleDeposit", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000b007549db2a335364dfdce86001ee3b081051f03000000000000000000000000cdf8a94da58bdadf73f2f1f7f07447f318f0850c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}