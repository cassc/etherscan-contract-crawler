{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/root/TONBridge/contracts/Bridge.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BridgeInterface.sol\\\";\\nimport \\\"./SignatureChecker.sol\\\";\\nimport \\\"./WrappedTON.sol\\\";\\n\\n\\ncontract Bridge is SignatureChecker, BridgeInterface, WrappedTON {\\n    address[] public oraclesSet;\\n    mapping(address => bool) public isOracle;\\n    mapping(bytes32 => bool) public finishedVotings;\\n\\n    constructor (string memory name_, string memory symbol_, address[] memory initialSet) ERC20(name_, symbol_) {\\n        updateOracleSet(0, initialSet);\\n    }\\n    \\n    function generalVote(bytes32 digest, Signature[] memory signatures) internal {\\n      require(signatures.length >= 2 * oraclesSet.length / 3, \\\"Not enough signatures\\\");\\n      require(!finishedVotings[digest], \\\"Vote is already finished\\\");\\n      uint signum = signatures.length;\\n      uint last_signer = 0;\\n      for(uint i=0; i<signum; i++) {\\n        address signer = signatures[i].signer;\\n        require(isOracle[signer], \\\"Unauthorized signer\\\");\\n        uint next_signer = uint(signer);\\n        require(next_signer > last_signer, \\\"Signatures are not sorted\\\");\\n        last_signer = next_signer;\\n        checkSignature(digest, signatures[i]);\\n      }\\n      finishedVotings[digest] = true;\\n    }\\n\\n    function voteForMinting(SwapData memory data, Signature[] memory signatures) override public {\\n      bytes32 _id = getSwapDataId(data);\\n      generalVote(_id, signatures);\\n      executeMinting(data);\\n    }\\n\\n    function voteForNewOracleSet(int oracleSetHash, address[] memory newOracles, Signature[] memory signatures) override  public {\\n      bytes32 _id = getNewSetId(oracleSetHash, newOracles);\\n      require(newOracles.length > 2, \\\"New set is too short\\\");\\n      generalVote(_id, signatures);\\n      updateOracleSet(oracleSetHash, newOracles);\\n    }\\n\\n    function voteForSwitchBurn(bool newBurnStatus, int nonce, Signature[] memory signatures) override public {\\n      bytes32 _id = getNewBurnStatusId(newBurnStatus, nonce);\\n      generalVote(_id, signatures);\\n      allowBurn = newBurnStatus;\\n    }\\n\\n    function executeMinting(SwapData memory data) internal {\\n      mint(data);\\n    }\\n\\n    function updateOracleSet(int oracleSetHash, address[] memory newSet) internal {\\n      uint oldSetLen = oraclesSet.length;\\n      for(uint i = 0; i < oldSetLen; i++) {\\n        isOracle[oraclesSet[i]] = false;\\n      }\\n      oraclesSet = newSet;\\n      uint newSetLen = oraclesSet.length;\\n      for(uint i = 0; i < newSetLen; i++) {\\n        require(!isOracle[newSet[i]], \\\"Duplicate oracle in Set\\\");\\n        isOracle[newSet[i]] = true;\\n      }\\n      emit NewOracleSet(oracleSetHash, newSet);\\n    }\\n    function getFullOracleSet() public view returns (address[] memory) {\\n        return oraclesSet;\\n    }\\n}\\n\"\r\n    },\r\n    \"/root/TONBridge/contracts/BridgeInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TonUtils.sol\\\";\\n\\n\\ninterface BridgeInterface is TonUtils {\\n  function voteForMinting(SwapData memory data, Signature[] memory signatures) external;\\n  function voteForNewOracleSet(int oracleSetHash, address[] memory newOracles, Signature[] memory signatures) external;\\n  function voteForSwitchBurn(bool newBurnStatus, int nonce, Signature[] memory signatures) external;\\n  event NewOracleSet(int oracleSetHash, address[] newOracles);\\n}\\n\"\r\n    },\r\n    \"/root/TONBridge/contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.4;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"/root/TONBridge/contracts/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n/* Source: @openzeppelin/contracts */\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/root/TONBridge/contracts/SignatureChecker.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./TonUtils.sol\\\";\\n\\ncontract SignatureChecker is TonUtils {\\n\\n    function checkSignature(bytes32 digest, Signature memory sig) public pure {\\n          if (sig.signature.length != 65) {\\n              revert(\\\"ECDSA: invalid signature length\\\");\\n          }\\n\\n          // Divide the signature in r, s and v variables\\n          bytes32 r;\\n          bytes32 s;\\n          uint8 v;\\n\\n          bytes memory signature = sig.signature;\\n\\n          // ecrecover takes the signature parameters, and the only way to get them\\n          // currently is to use assembly.\\n          // solhint-disable-next-line no-inline-assembly\\n          assembly {\\n              r := mload(add(signature, 0x20))\\n              s := mload(add(signature, 0x40))\\n              v := byte(0, mload(add(signature, 0x60)))\\n          }\\n\\n          if (\\n              uint256(s) >\\n              0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n          ) {\\n              revert(\\\"ECDSA: invalid signature 's' value\\\");\\n          }\\n\\n          if (v != 27 && v != 28) {\\n              revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n          }\\n          bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n          bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, digest));\\n          require(ecrecover(prefixedHash, v, r, s) == sig.signer, \\\"Wrong signature\\\");\\n    }\\n\\n    function getSwapDataId(SwapData memory data)\\n        public\\n        view\\n        returns (bytes32 result)\\n    {\\n        result = \\n            keccak256(\\n                abi.encode(\\n                    0xDA7A,\\n                    address(this),\\n                    data.receiver,\\n                    data.amount,\\n                    data.tx.address_.workchain,\\n                    data.tx.address_.address_hash,\\n                    data.tx.tx_hash,\\n                    data.tx.lt                   \\n                )\\n            );\\n    }\\n\\n    function getNewSetId(int oracleSetHash, address[] memory set)\\n        public\\n        view\\n        returns (bytes32 result)\\n    {\\n        result = \\n            keccak256(\\n                abi.encode(\\n                    0x5e7,\\n                    address(this),\\n                    oracleSetHash,\\n                    set                    \\n                )\\n            );\\n    }\\n\\n    function getNewBurnStatusId(bool newBurnStatus, int nonce)\\n        public\\n        view\\n        returns (bytes32 result)\\n    {\\n        result =\\n            keccak256(\\n                abi.encode(\\n                    0xB012,\\n                    address(this),\\n                    newBurnStatus,\\n                    nonce\\n                )\\n            );\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"/root/TONBridge/contracts/TonUtils.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TonUtils {\\n    struct TonAddress {\\n        int8 workchain;\\n        bytes32 address_hash;\\n    }\\n    struct TonTxID {\\n        TonAddress address_;\\n        bytes32 tx_hash;\\n        uint64 lt;\\n    }\\n\\n  struct SwapData {\\n        address receiver;\\n        uint64 amount;\\n        TonTxID tx;\\n  }\\n  struct Signature {\\n        address signer;\\n        bytes signature;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/root/TONBridge/contracts/WrappedTON.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./TonUtils.sol\\\";\\n\\n\\nabstract contract WrappedTON is ERC20, TonUtils {\\n    bool public allowBurn;\\n\\n    function mint(SwapData memory sd) internal {\\n      _mint(sd.receiver, sd.amount);\\n      emit SwapTonToEth(sd.tx.address_.workchain, sd.tx.address_.address_hash, sd.tx.tx_hash, sd.tx.lt, sd.receiver, sd.amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller and request transfer to `addr` on TON network\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount, TonAddress memory addr) external {\\n      require(allowBurn, \\\"Burn is currently disabled\\\");\\n      _burn(msg.sender, amount);\\n      emit SwapEthToTon(msg.sender, addr.workchain, addr.address_hash, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance and request transder to `addr`\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount, TonAddress memory addr) external {\\n        require(allowBurn, \\\"Burn is currently disabled\\\");\\n        uint256 currentAllowance = allowance(account,msg.sender);\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(account, msg.sender, currentAllowance - amount);\\n        _burn(account, amount);\\n        emit SwapEthToTon(account, addr.workchain, addr.address_hash, amount);\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 9;\\n    }\\n\\n    event SwapEthToTon(address indexed from, int8 to_wc, bytes32 indexed to_addr_hash, uint256 value);\\n    event SwapTonToEth(int8 workchain, bytes32 indexed ton_address_hash, bytes32 indexed ton_tx_hash, uint64 lt, address indexed to, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"initialSet\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"oracleSetHash\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newOracles\",\"type\":\"address[]\"}],\"name\":\"NewOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"to_wc\",\"type\":\"int8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"to_addr_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SwapEthToTon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"workchain\",\"type\":\"int8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ton_address_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ton_tx_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lt\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SwapTonToEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"workchain\",\"type\":\"int8\"},{\"internalType\":\"bytes32\",\"name\":\"address_hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TonUtils.TonAddress\",\"name\":\"addr\",\"type\":\"tuple\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"workchain\",\"type\":\"int8\"},{\"internalType\":\"bytes32\",\"name\":\"address_hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TonUtils.TonAddress\",\"name\":\"addr\",\"type\":\"tuple\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TonUtils.Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"checkSignature\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"finishedVotings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullOracleSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newBurnStatus\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"nonce\",\"type\":\"int256\"}],\"name\":\"getNewBurnStatusId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"oracleSetHash\",\"type\":\"int256\"},{\"internalType\":\"address[]\",\"name\":\"set\",\"type\":\"address[]\"}],\"name\":\"getNewSetId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"workchain\",\"type\":\"int8\"},{\"internalType\":\"bytes32\",\"name\":\"address_hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TonUtils.TonAddress\",\"name\":\"address_\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tx_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"lt\",\"type\":\"uint64\"}],\"internalType\":\"struct TonUtils.TonTxID\",\"name\":\"tx\",\"type\":\"tuple\"}],\"internalType\":\"struct TonUtils.SwapData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"getSwapDataId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oraclesSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"workchain\",\"type\":\"int8\"},{\"internalType\":\"bytes32\",\"name\":\"address_hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct TonUtils.TonAddress\",\"name\":\"address_\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"tx_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"lt\",\"type\":\"uint64\"}],\"internalType\":\"struct TonUtils.TonTxID\",\"name\":\"tx\",\"type\":\"tuple\"}],\"internalType\":\"struct TonUtils.SwapData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TonUtils.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"voteForMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"oracleSetHash\",\"type\":\"int256\"},{\"internalType\":\"address[]\",\"name\":\"newOracles\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TonUtils.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"voteForNewOracleSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newBurnStatus\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"nonce\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct TonUtils.Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"}],\"name\":\"voteForSwitchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000105772617070656420544f4e20436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007544f4e434f494e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000000000000000000000000c4c9bd836ab8b446519736166919e3d62491e041000000000000000000000000cf4a7c26186aa41390e246fa04115a0495085ab900000000000000000000000017dcab1b1481610f6c7a7a98cf0370dc0ec704a600000000000000000000000032162caaed276e77ef63194820586c942009a962000000000000000000000000039f4e886432bd4f3cb5062f9861efef3f6ada28000000000000000000000000ff441f9889aa475d9d3b1c638c59b84c5179846d0000000000000000000000000933738699dc733c46a0d4cbebda2f842e1ac7d90000000000000000000000007f2bbaac14f0f1834e6d0219f8855a5f619fe2c4000000000000000000000000fc5c6a2d01a984ba9eab7cf87a6d169aa9720c0c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}