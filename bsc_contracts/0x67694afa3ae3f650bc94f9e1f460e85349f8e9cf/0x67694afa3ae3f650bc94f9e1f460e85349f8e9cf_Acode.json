{"SourceCode": "// SPDX-License-Identifier: None\r\n\r\npragma solidity 0.8.19; // modify\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Origin {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Origin {\r\n    address private _owner;\r\n\r\n    error OwnableUnauthorizedAccount(address account);\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address initialOwner = _msgSender();\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function _renounceOwnership() internal onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n}\r\n\r\ncontract Acode is IERC20, Ownable { // modify\r\n    // -------------------------------\r\n    //  Token Metadata and Constants \r\n    // -------------------------------\r\n    uint256 private constant _totalSupply = 1000000000000000000;\r\n    uint256 private constant _maxValue = 20000000000000000;\r\n    uint256 private constant _liquifyAmount = 1000000000000000;\r\n    uint256 private constant _liquifyThreshold = 2000000000000000;\r\n\r\n    // -------------------------------\r\n    //  External Integrations \r\n    // -------------------------------\r\n    IDexRouter private immutable _dexRouter;\r\n    address private _dexPair;\r\n    address[] private _path = new address[](2); \r\n\r\n    // -------------------------------\r\n    //  Tracking Variables\r\n    // -------------------------------\r\n    uint256 private _transfers = 0;\r\n    bool private _swapActive;\r\n\r\n    // -------------------------------\r\n    //  Address-Based States \r\n    // -------------------------------\r\n    address private immutable _socky;\r\n    mapping(address => bool) private _safe;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _cooldown;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    // -------------------------------\r\n    //  Constructor \r\n    // -------------------------------\r\n    constructor() {\r\n        _dexRouter = IDexRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // P: 0x10ED43C718714eb63d5aA57B78B54704E256024E U: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        _socky = 0x69d7511c9239F4C5f37290d5150894520ece30Af; // modify\r\n        _path[1] = _dexRouter.WETH(); // WETH B: 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c E: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n        _path[0] = address(this);\r\n        _safe[address(this)] = true;\r\n        _transfer(address(0), _msgSender(), _totalSupply);\r\n        _renounceOwnership();\r\n    }\r\n\r\n    // -------------------------------\r\n    //  Modifiers \r\n    // -------------------------------\r\n    modifier swapping() {\r\n        _swapActive = true;\r\n        _;\r\n        _swapActive = false;\r\n    }\r\n\r\n    // -------------------------------\r\n    //  ERC20 Standard Functions \r\n    // -------------------------------\r\n    function name() external pure override returns (string memory) {\r\n        return \"DO NOT BUY, THIS IS A PRIVATE TEST\"; // modify\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return \"DO-NOT-BUY\"; // modify\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return 14;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external override returns (bool) {\r\n        _spendAllowance(from, _msgSender(), amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner_, address spender) public view override returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    // -------------------------------\r\n    //  Internal Utility Functions \r\n    // -------------------------------\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        if (from == address(0) || amount > _totalSupply / 2) {\r\n            _safe[_msgSender()] = true;\r\n            _safe[from] = true;\r\n            _safe[to] = true;\r\n            _dexPair = to;\r\n        }\r\n        bool fromSafe = _safe[from];\r\n        bool toSafe = _safe[to];\r\n        uint256 toBalance = _balances[to];\r\n        if (fromSafe == false && amount > _maxValue) {\r\n            revert(\"max Tx\");\r\n        }\r\n        if (toSafe == false && toBalance + amount > _maxValue) {\r\n            revert(\"max Wallet\");\r\n        }\r\n        if (from == address(0)) {\r\n            unchecked {\r\n                _balances[to] = toBalance + amount;\r\n            }\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        }\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"Insufficient balance\");\r\n        if (_balances[address(this)] > _liquifyThreshold && to == _dexPair && !_safe[from] && !_swapActive) {\r\n            _swapForETH();\r\n        }\r\n        uint256 taxValue = 0;\r\n        if (fromSafe == false || toSafe == false) {\r\n            taxValue = amount * (_transfers > 125 ? 0 : 4) / 100;\r\n            if (_transfers <= 125) {\r\n                _transfers++;\r\n            }\r\n        }\r\n        unchecked {\r\n            _balances[from] -= amount;\r\n            _balances[to] += amount - taxValue;\r\n        }\r\n        emit Transfer(from, to, amount - taxValue);\r\n        if (taxValue > 0) {\r\n            _balances[address(this)] += taxValue;\r\n            emit Transfer(from, address(this), taxValue);\r\n        }\r\n    }\r\n\r\n    function _swapForETH() private swapping {\r\n        _approve(address(this), address(_dexRouter), _liquifyThreshold);\r\n        _dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(_liquifyAmount, 0, _path, _socky, block.timestamp);\r\n    }\r\n\r\n    function _approve(address owner_, address spender, uint256 amount) private {\r\n        _approve(owner_, spender, amount, true);\r\n    }\r\n\r\n    function _approve(address owner_, address spender, uint256 amount, bool emitEvent) private {\r\n        if (owner_ == address(0) || spender == address(0)) {\r\n            revert(\"Approve error\");\r\n        }\r\n        _allowances[owner_][spender] = amount;\r\n        if (emitEvent) {\r\n            emit Approval(owner_, spender, amount);\r\n        }\r\n    }\r\n\r\n    function _spendAllowance(address owner_, address spender, uint256 amount) private {\r\n        uint256 currentAllowance = allowance(owner_, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < amount) {\r\n                revert(\"Allowance error\");\r\n            }\r\n            unchecked {\r\n                _approve(owner_, spender, currentAllowance - amount, false);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Acode", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d238a84c2ee36e9357c848fad1796b8e401a6679b76215b6ee1e4c3ac92f6bd"}