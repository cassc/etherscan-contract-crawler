{"SourceCode": "{\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    \\n    function symbol() external view returns(string memory);\\n    \\n    function name() external view returns(string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    /**\\n     * @dev Returns the number of decimal places\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Owner\\n * @dev Set \\u0026 change owner\\n */\\ncontract Ownable {\\n\\n    address private owner;\\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    \\n    // modifier to check if caller is owner\\n    modifier onlyOwner() {\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\n        // changes to the state and to Ether balances are reverted.\\n        // This used to consume all gas in old EVM versions, but not anymore.\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\n        // As a second argument, you can also provide an explanation about what went wrong.\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Set contract deployer as owner\\n     */\\n    constructor() {\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\n        emit OwnerSet(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Change owner\\n     * @param newOwner address of new owner\\n     */\\n    function changeOwner(address newOwner) public onlyOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Return owner address \\n     * @return address of owner\\n     */\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"SoakmontStakingContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract SoakmontStakingContract is Ownable, IERC20 {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // lock time in blocks\\r\\n    uint256 public lockTime = 2592000;\\r\\n\\r\\n    // fee for leaving staking early\\r\\n    uint256 public leaveEarlyFee = 10;\\r\\n\\r\\n    // recipient of fee\\r\\n    address public feeRecipient;\\r\\n\\r\\n    // recipient of fee\\r\\n    address public swapper;\\r\\n\\r\\n    // Staking Token\\r\\n    address public immutable token;\\r\\n\\r\\n    // Reward Token\\r\\n    address public immutable reward;\\r\\n\\r\\n    // User Info\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 unlockBlock;\\r\\n        uint256 totalExcluded;\\r\\n    }\\r\\n    // Address =\\u003e UserInfo\\r\\n    mapping ( address =\\u003e UserInfo ) public userInfo;\\r\\n\\r\\n    // Tracks Dividends\\r\\n    uint256 public totalRewards;\\r\\n    uint256 private totalShares;\\r\\n    uint256 private dividendsPerShare;\\r\\n    uint256 private constant precision = 10**18;\\r\\n\\r\\n    // Events\\r\\n    event SetLockTime(uint LockTime);\\r\\n    event SetEarlyFee(uint earlyFee);\\r\\n    event SetFeeRecipient(address FeeRecipient);\\r\\n    event DepositRewards(uint256 tokenAmount);\\r\\n\\r\\n    constructor(address token_, address feeRecipient_, address reward_){\\r\\n        require(\\r\\n            token_ != address(0) \\u0026\\u0026\\r\\n            feeRecipient_ != address(0) \\u0026\\u0026\\r\\n            reward_ != address(0),\\r\\n            \\u0027Zero Address\\u0027\\r\\n        );\\r\\n        token = token_;\\r\\n        feeRecipient = feeRecipient_;\\r\\n        reward = reward_;\\r\\n        swapper = reward_;\\r\\n    }\\r\\n\\r\\n    /** Token Name */\\r\\n    function name() public pure override returns (string memory) {\\r\\n        return \\\"Staked Soakmont V2\\\";\\r\\n    }\\r\\n\\r\\n    /** Token Ticker Symbol */\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return \\\"StakedSKMT\\\";\\r\\n    }\\r\\n\\r\\n    /** Returns the total number of tokens in existence */\\r\\n    function totalSupply() external view override returns (uint256) { \\r\\n        return totalShares; \\r\\n    }\\r\\n\\r\\n    /** Returns the number of tokens owned by `account` */\\r\\n    function balanceOf(address account) public view override returns (uint256) { \\r\\n        return userInfo[account].amount;\\r\\n    }\\r\\n\\r\\n    /** Returns the number of tokens `spender` can transfer from `holder` */\\r\\n    function allowance(address, address) external pure override returns (uint256) { \\r\\n        return 0; \\r\\n    }\\r\\n\\r\\n    /** Tokens decimals */\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /** Approves `spender` to transfer `amount` tokens from caller */\\r\\n    function approve(address spender, uint256) public override returns (bool) {\\r\\n        emit Approval(msg.sender, spender, 0);\\r\\n        return true;\\r\\n    }\\r\\n  \\r\\n    /** Transfer Function */\\r\\n    function transfer(address recipient, uint256) external override returns (bool) {\\r\\n        _claimReward(msg.sender);\\r\\n        emit Transfer(msg.sender, recipient, 0);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** Transfer Function */\\r\\n    function transferFrom(address, address recipient, uint256) external override returns (bool) {\\r\\n        _claimReward(msg.sender);\\r\\n        emit Transfer(msg.sender, recipient, 0);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setLockTime(uint256 newLockTime) external onlyOwner {\\r\\n        require(\\r\\n            newLockTime \\u003c 2592000,\\r\\n            \\u0027Lock Time Too Long\\u0027\\r\\n        );\\r\\n        lockTime = newLockTime;\\r\\n        emit SetLockTime(newLockTime);\\r\\n    }\\r\\n\\r\\n    function setLeaveEarlyFee(uint256 newEarlyFee) external onlyOwner {\\r\\n        require(\\r\\n            newEarlyFee \\u003c 10,\\r\\n            \\u0027Fee Too High\\u0027\\r\\n        );\\r\\n        leaveEarlyFee = newEarlyFee;\\r\\n        emit SetEarlyFee(newEarlyFee);\\r\\n    }\\r\\n\\r\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\r\\n        require(\\r\\n            newFeeRecipient != address(0),\\r\\n            \\u0027Zero Address\\u0027\\r\\n        );\\r\\n        feeRecipient = newFeeRecipient;\\r\\n        emit SetFeeRecipient(newFeeRecipient);\\r\\n    }\\r\\n\\r\\n    function setSwapper(address newSwapper) external onlyOwner {\\r\\n        require(\\r\\n            newSwapper != address(0),\\r\\n            \\u0027Zero Address\\u0027\\r\\n        );\\r\\n        swapper = newSwapper;\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address token_) external onlyOwner {\\r\\n        require(\\r\\n            token != token_,\\r\\n            \\u0027Cannot Withdraw Staked Token\\u0027\\r\\n        );\\r\\n        require(\\r\\n            IERC20(token_).transfer(\\r\\n                msg.sender,\\r\\n                IERC20(token_).balanceOf(address(this))\\r\\n            ),\\r\\n            \\u0027Failure On Token Withdraw\\u0027\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function claimRewards() external {\\r\\n        _claimReward(msg.sender);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 amount) external {\\r\\n        require(\\r\\n            amount \\u003c= userInfo[msg.sender].amount,\\r\\n            \\u0027Insufficient Amount\\u0027\\r\\n        );\\r\\n        require(\\r\\n            amount \\u003e 0,\\r\\n            \\u0027Zero Amount\\u0027\\r\\n        );\\r\\n        if (userInfo[msg.sender].amount \\u003e 0) {\\r\\n            _claimReward(msg.sender);\\r\\n        }\\r\\n\\r\\n        totalShares -= amount;\\r\\n        userInfo[msg.sender].amount -= amount;\\r\\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\\r\\n\\r\\n        uint fee = timeUntilUnlock(msg.sender) == 0 ? 0 : ( amount * leaveEarlyFee ) / 100;\\r\\n        if (fee \\u003e 0) {\\r\\n            require(\\r\\n                IERC20(token).transfer(feeRecipient, fee),\\r\\n                \\u0027Failure On Token Transfer\\u0027\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint sendAmount = amount - fee;\\r\\n        require(\\r\\n            IERC20(token).transfer(msg.sender, sendAmount),\\r\\n            \\u0027Failure On Token Transfer To Sender\\u0027\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function stake(uint256 amount) external {\\r\\n        if (userInfo[msg.sender].amount \\u003e 0) {\\r\\n            _claimReward(msg.sender);\\r\\n        }\\r\\n\\r\\n        // transfer in tokens\\r\\n        uint received = _transferIn(token, amount);\\r\\n        \\r\\n        // update data\\r\\n        totalShares += received;\\r\\n        userInfo[msg.sender].amount += received;\\r\\n        userInfo[msg.sender].unlockBlock = block.number + lockTime;\\r\\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\\r\\n    }\\r\\n\\r\\n    function depositRewards(uint256 amount) external {\\r\\n        uint received = _transferIn(reward, amount);\\r\\n        dividendsPerShare = dividendsPerShare.add(precision.mul(received).div(totalShares));\\r\\n        totalRewards += received;\\r\\n        emit DepositRewards(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _claimReward(address user) internal {\\r\\n\\r\\n        // exit if zero value locked\\r\\n        if (userInfo[user].amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // fetch pending rewards\\r\\n        uint256 amount = pendingRewards(user);\\r\\n        \\r\\n        // exit if zero rewards\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // update total excluded\\r\\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\\r\\n\\r\\n        // transfer reward to user\\r\\n        require(\\r\\n            IERC20(reward).transfer(user, amount),\\r\\n            \\u0027Failure On Token Claim\\u0027\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _transferIn(address _token, uint256 amount) internal returns (uint256) {\\r\\n        uint before = IERC20(_token).balanceOf(address(this));\\r\\n        bool s = IERC20(_token).transferFrom(msg.sender, address(this), amount);\\r\\n        uint received = IERC20(_token).balanceOf(address(this)) - before;\\r\\n        require(\\r\\n            s \\u0026\\u0026 received \\u003e 0 \\u0026\\u0026 received \\u003c= amount,\\r\\n            \\u0027Error On Transfer From\\u0027\\r\\n        );\\r\\n        return received;\\r\\n    }\\r\\n\\r\\n    function timeUntilUnlock(address user) public view returns (uint256) {\\r\\n        return userInfo[user].unlockBlock \\u003c block.number ? 0 : userInfo[user].unlockBlock - block.number;\\r\\n    }\\r\\n\\r\\n    function pendingRewards(address shareholder) public view returns (uint256) {\\r\\n        if(userInfo[shareholder].amount == 0){ return 0; }\\r\\n\\r\\n        uint256 shareholderTotalDividends = getCumulativeDividends(userInfo[shareholder].amount);\\r\\n        uint256 shareholderTotalExcluded = userInfo[shareholder].totalExcluded;\\r\\n\\r\\n        if(shareholderTotalDividends \\u003c= shareholderTotalExcluded){ return 0; }\\r\\n\\r\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\r\\n    }\\r\\n\\r\\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\\r\\n        return share.mul(dividendsPerShare).div(precision);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        uint before = IERC20(reward).balanceOf(address(this));\\r\\n        (bool s,) = payable(swapper).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(s, \\u0027Failure On Reward Purchase\\u0027);\\r\\n        uint received = IERC20(reward).balanceOf(address(this)).sub(before);\\r\\n        dividendsPerShare = dividendsPerShare.add(precision.mul(received).div(totalShares));\\r\\n        totalRewards += received;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earlyFee\",\"type\":\"uint256\"}],\"name\":\"SetEarlyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"FeeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LockTime\",\"type\":\"uint256\"}],\"name\":\"SetLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveEarlyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEarlyFee\",\"type\":\"uint256\"}],\"name\":\"setLeaveEarlyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"timeUntilUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SoakmontStakingContract", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "0000000000000000000000001b2fdb1626285b94782af2fda8e270e95cebc3b400000000000000000000000028e17b0443ae4da9d0cd066678f329217fd7edb40000000000000000000000001b2fdb1626285b94782af2fda8e270e95cebc3b4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3165dc72a6a7076426fc78d473570c91beb200b4bb3c798d2fb287a7234b31fa"}