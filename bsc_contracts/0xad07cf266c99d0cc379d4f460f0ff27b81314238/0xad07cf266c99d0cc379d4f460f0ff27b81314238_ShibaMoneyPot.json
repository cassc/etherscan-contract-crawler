{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/DeployShiba/shibanova1321/contracts/ShibaMoneyPot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./libs/SafeMath.sol\\\";\\r\\nimport \\\"./libs/IBEP20.sol\\\";\\r\\nimport \\\"./libs/SafeBEP20.sol\\\";\\r\\nimport \\\"./libs/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IMoneyPot.sol\\\";\\r\\n\\r\\n/*\\r\\n* This contract is used to collect sNova stacking dividends from fee (like swap, deposit on pools or farms)\\r\\n*/\\r\\ncontract ShibaMoneyPot is Ownable, IMoneyPot {\\r\\n    using SafeBEP20 for IBEP20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n\\r\\n    struct TokenPot {\\r\\n        uint256 tokenAmount; // Total amount distributing over 1 cycle (updateMoneyPotPeriodNbBlocks)\\r\\n        uint256 accTokenPerShare; // Amount of dividends per Share\\r\\n        uint256 lastRewardBlock; // last data update\\r\\n        uint256 lastUpdateTokenPotBlocks; // last cycle update for this token\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 rewardDept;\\r\\n        uint256 pending;\\r\\n    }\\r\\n\\r\\n    IBEP20 public sNova;\\r\\n\\r\\n    uint256 public updateMoneyPotPeriodNbBlocks;\\r\\n    uint256 public lastUpdateMoneyPotBlocks;\\r\\n    uint256 public startBlock; // Start block for dividends distribution (first cycle the current money pot will be empty)\\r\\n\\r\\n    // _token => user => rewardsDebt / pending\\r\\n    mapping(address => mapping (address => UserInfo)) public sNovaHoldersRewardsInfo;\\r\\n    // user => LastSNovaBalanceSaved\\r\\n    mapping (address => uint256) public sNovaHoldersInfo;\\r\\n\\r\\n    address[] public registeredToken; // List of all token that will be distributed as dividends. Should never be too weight !\\r\\n    mapping (address => bool )  public tokenInitialized; // List of token already added to registeredToken\\r\\n\\r\\n    // addressWithoutReward is a map containing each address which are not going to get rewards\\r\\n    // At least, it will include the masterChef address as masterChef minting continuously sNova for rewards on Nova pair pool.\\r\\n    // We can add later LP contract if someone initialized sNova LP\\r\\n    // Those contracts are included as holders on sNova\\r\\n    // All dividends attributed to those addresses are going to be added to the \\\"reserveTokenAmount\\\"\\r\\n    mapping (address => bool) addressWithoutReward;\\r\\n    // address of the feeManager which is allow to add dividends to the pendingTokenPot\\r\\n    address public feeManager;\\r\\n\\r\\n    mapping (address => TokenPot) private _distributedMoneyPot; // Current MoneyPot\\r\\n    mapping (address => uint256 ) public pendingTokenAmount; // Pending amount of each dividends token that will be distributed in next cycle\\r\\n    mapping (address => uint256) public reserveTokenAmount; // Bonus which is used to add more dividends in the pendingTokenAmount\\r\\n\\r\\n    uint256 public lastSNovaSupply; // Cache the last totalSupply of sNova\\r\\n\\r\\n    constructor (IBEP20 _sNova, address _feeManager, address _masterShiba, uint256 _startBlock, uint256 _initialUpdateMoneyPotPeriodNbBlocks) public{\\r\\n        updateMoneyPotPeriodNbBlocks = _initialUpdateMoneyPotPeriodNbBlocks;\\r\\n        startBlock = _startBlock;\\r\\n        lastUpdateMoneyPotBlocks = _startBlock;\\r\\n        sNova = _sNova;\\r\\n        addressWithoutReward[_masterShiba] = true;\\r\\n        feeManager = _feeManager;\\r\\n    }\\r\\n\\r\\n    function getRegisteredToken(uint256 index) external virtual override view returns (address){\\r\\n        return registeredToken[index];\\r\\n    }\\r\\n\\r\\n    function distributedMoneyPot(address _token) external view returns (uint256 tokenAmount, uint256 accTokenPerShare, uint256 lastRewardBlock ){\\r\\n        return (\\r\\n            _distributedMoneyPot[_token].tokenAmount,\\r\\n            _distributedMoneyPot[_token].accTokenPerShare,\\r\\n            _distributedMoneyPot[_token].lastRewardBlock\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function isDividendsToken(address _tokenAddr) external virtual override view returns (bool){\\r\\n        return tokenInitialized[_tokenAddr];\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateAddressWithoutReward(address _contract, bool _unattributeDividends) external onlyOwner {\\r\\n        addressWithoutReward[_contract] = _unattributeDividends;\\r\\n    }\\r\\n\\r\\n    function updateFeeManager(address _feeManager) external onlyOwner{\\r\\n        // Allow us to update the feeManager contract => Can be upgraded if needed\\r\\n        feeManager = _feeManager;\\r\\n    }\\r\\n\\r\\n    function getRegisteredTokenLength() external virtual override view returns (uint256){\\r\\n        return registeredToken.length;\\r\\n    }\\r\\n\\r\\n    function getTokenAmountPotFromMoneyPot(address _token) external view returns (uint256 tokenAmount){\\r\\n        return _distributedMoneyPot[_token].tokenAmount;\\r\\n    }\\r\\n\\r\\n    // Amount of dividends in a specific token distributed at each block during the current cycle (=updateMoneyPotPeriodNbBlocks)\\r\\n    function tokenPerBlock(address _token) external view returns (uint256){\\r\\n        return _distributedMoneyPot[_token].tokenAmount.div(updateMoneyPotPeriodNbBlocks);\\r\\n    }\\r\\n\\r\\n    function massUpdateMoneyPot() public {\\r\\n        uint256 length = registeredToken.length;\\r\\n        for (uint256 index = 0; index < length; ++index) {\\r\\n            _updateTokenPot(registeredToken[index]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateCurrentMoneyPot(address _token) external{\\r\\n        _updateTokenPot(_token);\\r\\n    }\\r\\n\\r\\n    function getMultiplier(uint256 _from, uint256 _to) internal pure returns (uint256){\\r\\n        if(_from >= _to){\\r\\n            return 0;\\r\\n        }\\r\\n        return _to.sub(_from);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Update current dividends for specific token\\r\\n    */\\r\\n    function _updateTokenPot(address _token) internal {\\r\\n        TokenPot storage tokenPot = _distributedMoneyPot[_token];\\r\\n        if (block.number <= tokenPot.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (lastSNovaSupply == 0) {\\r\\n            tokenPot.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (block.number >= tokenPot.lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks)){\\r\\n            if(tokenPot.tokenAmount > 0){\\r\\n                uint256 multiplier = getMultiplier(tokenPot.lastRewardBlock, tokenPot.lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks));\\r\\n                uint256 tokenRewardsPerBlock = tokenPot.tokenAmount.div(updateMoneyPotPeriodNbBlocks);\\r\\n                tokenPot.accTokenPerShare = tokenPot.accTokenPerShare.add(tokenRewardsPerBlock.mul(multiplier).mul(1e12).div(lastSNovaSupply));\\r\\n            }\\r\\n            tokenPot.tokenAmount = pendingTokenAmount[_token];\\r\\n            pendingTokenAmount[_token] = 0;\\r\\n            tokenPot.lastRewardBlock = tokenPot.lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks);\\r\\n            tokenPot.lastUpdateTokenPotBlocks = tokenPot.lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks);\\r\\n            lastUpdateMoneyPotBlocks = tokenPot.lastUpdateTokenPotBlocks;\\r\\n\\r\\n            if (block.number >= tokenPot.lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks)){\\r\\n                // If something bad happen in blockchain and moneyPot aren't able to be updated since\\r\\n                // return here, will allow us to re-call updatePool manually, instead of directly doing it recursively here\\r\\n                // which can cause too much gas error and so break all the MP contract\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        if(tokenPot.tokenAmount > 0){\\r\\n            uint256 multiplier = getMultiplier(tokenPot.lastRewardBlock, block.number);\\r\\n            uint256 tokenRewardsPerBlock = tokenPot.tokenAmount.div(updateMoneyPotPeriodNbBlocks);\\r\\n            tokenPot.accTokenPerShare = tokenPot.accTokenPerShare.add(tokenRewardsPerBlock.mul(multiplier).mul(1e12).div(lastSNovaSupply));\\r\\n        }\\r\\n\\r\\n        tokenPot.lastRewardBlock = block.number;\\r\\n\\r\\n        if (block.number >= tokenPot.lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks)){\\r\\n            lastUpdateMoneyPotBlocks = tokenPot.lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Used by front-end to display user's pending rewards that he can harvest\\r\\n    */\\r\\n    function pendingTokenRewardsAmount(address _token, address _user) external view returns (uint256){\\r\\n\\r\\n        if(lastSNovaSupply == 0){\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 accTokenPerShare = _distributedMoneyPot[_token].accTokenPerShare;\\r\\n        uint256 tokenReward = _distributedMoneyPot[_token].tokenAmount.div(updateMoneyPotPeriodNbBlocks);\\r\\n        uint256 lastRewardBlock = _distributedMoneyPot[_token].lastRewardBlock;\\r\\n        uint256 lastUpdateTokenPotBlocks = _distributedMoneyPot[_token].lastUpdateTokenPotBlocks;\\r\\n        if (block.number >= lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks)){\\r\\n            accTokenPerShare = (accTokenPerShare.add(\\r\\n                    tokenReward.mul(getMultiplier(lastRewardBlock, lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks))\\r\\n                ).mul(1e12).div(lastSNovaSupply)));\\r\\n            lastRewardBlock = lastUpdateTokenPotBlocks.add(updateMoneyPotPeriodNbBlocks);\\r\\n            tokenReward = pendingTokenAmount[_token].div(updateMoneyPotPeriodNbBlocks);\\r\\n        }\\r\\n\\r\\n        if (block.number > lastRewardBlock && lastSNovaSupply != 0 && tokenReward > 0) {\\r\\n            accTokenPerShare = accTokenPerShare.add(\\r\\n                    tokenReward.mul(getMultiplier(lastRewardBlock, block.number)\\r\\n                ).mul(1e12).div(lastSNovaSupply));\\r\\n        }\\r\\n        return (sNova.balanceOf(_user).mul(accTokenPerShare).div(1e12).sub(sNovaHoldersRewardsInfo[_token][_user].rewardDept))\\r\\n                    .add(sNovaHoldersRewardsInfo[_token][_user].pending);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n    Update tokenPot, user's sNova balance (cache) and pending dividends\\r\\n    */\\r\\n    function updateSNovaHolder(address _sNovaHolder) external virtual override {\\r\\n        uint256 holderPreviousSNovaAmount = sNovaHoldersInfo[_sNovaHolder];\\r\\n        uint256 holderBalance = sNova.balanceOf(_sNovaHolder);\\r\\n        uint256 length = registeredToken.length;\\r\\n        for (uint256 index = 0; index < length; ++index) {\\r\\n            _updateTokenPot(registeredToken[index]);\\r\\n            TokenPot storage tokenPot = _distributedMoneyPot[registeredToken[index]];\\r\\n            if(holderPreviousSNovaAmount > 0 && tokenPot.accTokenPerShare > 0){\\r\\n                uint256 pending = holderPreviousSNovaAmount.mul(tokenPot.accTokenPerShare).div(1e12).sub(sNovaHoldersRewardsInfo[registeredToken[index]][_sNovaHolder].rewardDept);\\r\\n                if(pending > 0) {\\r\\n                    if (addressWithoutReward[_sNovaHolder]) {\\r\\n                        if(sNovaHoldersRewardsInfo[registeredToken[index]][_sNovaHolder].pending > 0){\\r\\n                            pending = pending.add(sNovaHoldersRewardsInfo[registeredToken[index]][_sNovaHolder].pending);\\r\\n                            sNovaHoldersRewardsInfo[registeredToken[index]][_sNovaHolder].pending = 0;\\r\\n                        }\\r\\n                        reserveTokenAmount[registeredToken[index]] = reserveTokenAmount[registeredToken[index]].add(pending);\\r\\n                    }\\r\\n                    else {\\r\\n                        sNovaHoldersRewardsInfo[registeredToken[index]][_sNovaHolder].pending = sNovaHoldersRewardsInfo[registeredToken[index]][_sNovaHolder].pending.add(pending);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            sNovaHoldersRewardsInfo[registeredToken[index]][_sNovaHolder].rewardDept = holderBalance.mul(tokenPot.accTokenPerShare).div(1e12);\\r\\n        }\\r\\n        if (holderPreviousSNovaAmount > 0){\\r\\n            lastSNovaSupply = lastSNovaSupply.sub(holderPreviousSNovaAmount);\\r\\n        }\\r\\n        lastSNovaSupply = lastSNovaSupply.add(holderBalance);\\r\\n        sNovaHoldersInfo[_sNovaHolder] = holderBalance;\\r\\n    }\\r\\n\\r\\n    function harvestRewards(address _sNovaHolder) external {\\r\\n        uint256 length = registeredToken.length;\\r\\n\\r\\n        for (uint256 index = 0; index < length; ++index) {\\r\\n            harvestReward(_sNovaHolder, registeredToken[index]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * Allow user to harvest their pending dividends\\r\\n    */\\r\\n    function harvestReward(address _sNovaHolder, address _token) public {\\r\\n        uint256 holderBalance = sNovaHoldersInfo[_sNovaHolder];\\r\\n        _updateTokenPot(_token);\\r\\n        TokenPot storage tokenPot = _distributedMoneyPot[_token];\\r\\n        if(holderBalance > 0 && tokenPot.accTokenPerShare > 0){\\r\\n            uint256 pending = holderBalance.mul(tokenPot.accTokenPerShare).div(1e12).sub(sNovaHoldersRewardsInfo[_token][_sNovaHolder].rewardDept);\\r\\n            if(pending > 0) {\\r\\n                if (addressWithoutReward[_sNovaHolder]) {\\r\\n                        if(sNovaHoldersRewardsInfo[_token][_sNovaHolder].pending > 0){\\r\\n                            pending = pending.add(sNovaHoldersRewardsInfo[_token][_sNovaHolder].pending);\\r\\n                            sNovaHoldersRewardsInfo[_token][_sNovaHolder].pending = 0;\\r\\n                        }\\r\\n                        reserveTokenAmount[_token] = reserveTokenAmount[_token].add(pending);\\r\\n                }\\r\\n                else {\\r\\n                    sNovaHoldersRewardsInfo[_token][_sNovaHolder].pending = sNovaHoldersRewardsInfo[_token][_sNovaHolder].pending.add(pending);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if ( sNovaHoldersRewardsInfo[_token][_sNovaHolder].pending > 0 ){\\r\\n            safeTokenTransfer(_token, _sNovaHolder, sNovaHoldersRewardsInfo[_token][_sNovaHolder].pending);\\r\\n            sNovaHoldersRewardsInfo[_token][_sNovaHolder].pending = 0;\\r\\n        }\\r\\n        sNovaHoldersRewardsInfo[_token][_sNovaHolder].rewardDept = holderBalance.mul(tokenPot.accTokenPerShare).div(1e12);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * Used by feeManager contract to deposit rewards (collected from many sources)\\r\\n    */\\r\\n    function depositRewards(address _token, uint256 _amount) external virtual override{\\r\\n        require(msg.sender == feeManager);\\r\\n        massUpdateMoneyPot();\\r\\n\\r\\n        IBEP20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        if(block.number < startBlock){\\r\\n            reserveTokenAmount[_token] = reserveTokenAmount[_token].add(_amount);\\r\\n        }\\r\\n        else {\\r\\n            pendingTokenAmount[_token] = pendingTokenAmount[_token].add(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * Used by dev to deposit bonus rewards that can be added to pending pot at any time\\r\\n    */\\r\\n    function depositBonusRewards(address _token, uint256 _amount) external onlyOwner{\\r\\n        IBEP20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        reserveTokenAmount[_token] = reserveTokenAmount[_token].add(_amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * Allow token address to be distributed as dividends to sNova holder\\r\\n    */\\r\\n    function addTokenToRewards(address _token) external onlyOwner{\\r\\n        if (!tokenInitialized[_token]){\\r\\n            registeredToken.push(_token);\\r\\n            _distributedMoneyPot[_token].lastRewardBlock = lastUpdateMoneyPotBlocks > block.number ? lastUpdateMoneyPotBlocks : lastUpdateMoneyPotBlocks.add(updateMoneyPotPeriodNbBlocks);\\r\\n            _distributedMoneyPot[_token].accTokenPerShare = 0;\\r\\n            _distributedMoneyPot[_token].tokenAmount = 0;\\r\\n            _distributedMoneyPot[_token].lastUpdateTokenPotBlocks = _distributedMoneyPot[_token].lastRewardBlock;\\r\\n            tokenInitialized[_token] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Remove token address to be distributed as dividends to sNova holder\\r\\n    */\\r\\n    function removeTokenToRewards(address _token) external onlyOwner{\\r\\n        require(_distributedMoneyPot[_token].tokenAmount == 0, \\\"cannot remove before end of distribution\\\");\\r\\n        if (tokenInitialized[_token]){\\r\\n            uint256 length = registeredToken.length;\\r\\n            uint256 indexToRemove = length; // If token not found web do not try to remove bad index\\r\\n            for (uint256 index = 0; index < length; ++index) {\\r\\n                if(registeredToken[index] == _token){\\r\\n                    indexToRemove = index;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            if(indexToRemove < length){ // Should never be false.. Or something wrong happened\\r\\n                registeredToken[indexToRemove] = registeredToken[registeredToken.length-1];\\r\\n                registeredToken.pop();\\r\\n            }\\r\\n            tokenInitialized[_token] = false;\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     Used by front-end to get the next moneyPot cycle update\\r\\n     */\\r\\n    function nextMoneyPotUpdateBlock() external view returns (uint256){\\r\\n        return lastUpdateMoneyPotBlocks.add(updateMoneyPotPeriodNbBlocks);\\r\\n    }\\r\\n\\r\\n    function addToPendingFromReserveTokenAmount(address _token, uint256 _amount) external onlyOwner{\\r\\n        require(_amount <= reserveTokenAmount[_token], \\\"Insufficient amount\\\");\\r\\n        reserveTokenAmount[_token] = reserveTokenAmount[_token].sub(_amount);\\r\\n        pendingTokenAmount[_token] = pendingTokenAmount[_token].add(_amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Safe Token transfer function, just in case if rounding error causes pool to not have enough Tokens.\\r\\n    function safeTokenTransfer(address _token, address _to, uint256 _amount) internal {\\r\\n        IBEP20 token = IBEP20(_token);\\r\\n        uint256 tokenBal = token.balanceOf(address(this));\\r\\n        bool transferSuccess = false;\\r\\n        if (_amount > tokenBal) {\\r\\n            transferSuccess = token.transfer(_to, tokenBal);\\r\\n        } else {\\r\\n            transferSuccess = token.transfer(_to, _amount);\\r\\n        }\\r\\n        require(transferSuccess, \\\"safeSNovaTransfer: Transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/DeployShiba/shibanova1321/contracts/interfaces/IMoneyPot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IMoneyPot {\\r\\n    function isDividendsToken(address _tokenAddr) external view returns (bool);\\r\\n    function getRegisteredTokenLength() external view returns (uint256);\\r\\n    function depositRewards(address _token, uint256 _amount) external;\\r\\n    function getRegisteredToken(uint256 index) external view returns (address);\\r\\n    function updateSNovaHolder(address _sNovaHolder) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/DeployShiba/shibanova1321/contracts/libs/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256('')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            codehash := extcodehash(account)\\r\\n        }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}('');\\r\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, 'Address: low-level call failed');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), 'Address: call to non-contract');\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/DeployShiba/shibanova1321/contracts/libs/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    constructor() internal {}\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/DeployShiba/shibanova1321/contracts/libs/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/DeployShiba/shibanova1321/contracts/libs/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\nimport './Context.sol';\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/DeployShiba/shibanova1321/contracts/libs/SafeBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport './IBEP20.sol';\\r\\nimport './SafeMath.sol';\\r\\nimport './Address.sol';\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IBEP20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IBEP20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IBEP20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\r\\n            value,\\r\\n            'SafeBEP20: decreased allowance below zero'\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/D/DeployShiba/shibanova1321/contracts/libs/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.4.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, 'SafeMath: addition overflow');\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, 'SafeMath: division by zero');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, 'SafeMath: modulo by zero');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_sNova\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterShiba\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialUpdateMoneyPotPeriodNbBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToPendingFromReserveTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addTokenToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositBonusRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"distributedMoneyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRegisteredToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisteredTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenAmountPotFromMoneyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sNovaHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"harvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sNovaHolder\",\"type\":\"address\"}],\"name\":\"harvestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"isDividendsToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSNovaSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateMoneyPotBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdateMoneyPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMoneyPotUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokenRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeTokenToRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sNova\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sNovaHoldersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sNovaHoldersRewardsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDept\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_unattributeDividends\",\"type\":\"bool\"}],\"name\":\"updateAddressWithoutReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateCurrentMoneyPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"updateFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMoneyPotPeriodNbBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sNovaHolder\",\"type\":\"address\"}],\"name\":\"updateSNovaHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShibaMoneyPot", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "0000000000000000000000000c0bf2bd544566a11f59dc70a8f43659ac2fe7c20000000000000000000000002f201597cb20b5e9234ba497ae02f5553b00ef200000000000000000000000000d7ead8b3d90230bf550e2e8b01ead24d1607738000000000000000000000000000000000000000000000000000000000095f13c00000000000000000000000000000000000000000000000000000000000070d0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}