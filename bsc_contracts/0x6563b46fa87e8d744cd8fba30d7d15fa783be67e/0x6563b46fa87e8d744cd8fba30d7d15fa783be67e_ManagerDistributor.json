{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\ncontract ManagerDistributor {\r\n\r\n    address[] private holders;\r\n    uint[] private shares;\r\n    mapping(address => bool) public admins;\r\n\r\n    modifier onlyOwner() {\r\n        require(admins[msg.sender], \"Not allowed\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        admins[msg.sender] = true;\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    event NewDistribution(uint amount);\r\n    event NewHolderAdded(address holder, uint share);\r\n    event NewHolderRemoved(address holder);\r\n\r\n    function distributeFunds() external onlyOwner {\r\n        uint256 contractBal = contractBalance();\r\n        require(contractBal > 0, \"No funds in contract\");\r\n        \r\n        //Check if total share is 100% before proceeding\r\n        uint totalSharePercent = 0;\r\n        for(uint8 i=0; i < shares.length; i++) {\r\n            totalSharePercent += shares[i];\r\n        }\r\n        require(totalSharePercent == 10000, \"All shares do not add up to 100%\");\r\n\r\n        //Distribute\r\n        for(uint8 i=0; i < holders.length; i++) {\r\n            payable(holders[i]).transfer(contractBal*shares[i]/10000);\r\n        }\r\n\r\n        emit NewDistribution(contractBal);\r\n    }\r\n\r\n    //Add holders\r\n    function addHolders(address[] calldata _holders, uint[] calldata _shares) public onlyOwner {\r\n        require(_holders.length == _shares.length, \"Mismatch arrays\");\r\n        \r\n        for(uint8 i=0; i < _holders.length; i++) {\r\n            holders.push(_holders[i]);\r\n            shares.push(_shares[i]);\r\n            emit NewHolderAdded(holders[i], _shares[i]);\r\n        }\r\n\r\n    }\r\n    \r\n    //remove holder\r\n    function removeHolders(uint[] calldata _holderIndex) external onlyOwner {\r\n        for(uint8 i=0; i < _holderIndex.length; i++) {\r\n            require(_holderIndex[i] < holders.length, \"Invalid holder index\");\r\n            emit NewHolderRemoved(holders[_holderIndex[i]]);\r\n            holders[_holderIndex[i]] = holders[holders.length-1];\r\n            holders.pop();\r\n            shares[_holderIndex[i]] = shares[shares.length-1];\r\n            shares.pop();\r\n        }\r\n    }\r\n\r\n    function deleteAllHolders() public onlyOwner {\r\n        holders = new address[](0);\r\n        shares = new uint[](0);\r\n    }\r\n\r\n    function updateAdmin(address _admin, bool _status) external onlyOwner {\r\n        admins[_admin] = _status;\r\n    }\r\n\r\n    function contractBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function showHolders() public view returns (address[] memory) {\r\n        return holders;\r\n    }\r\n\r\n    function showShares() public view returns (uint[] memory) {\r\n        return shares;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"NewHolderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"NewHolderRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"addHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteAllHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_holderIndex\",\"type\":\"uint256[]\"}],\"name\":\"removeHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ManagerDistributor", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d99c00865bc89399396c516b35a43949c947ade50a7cd84ec705762ef5a18f98"}