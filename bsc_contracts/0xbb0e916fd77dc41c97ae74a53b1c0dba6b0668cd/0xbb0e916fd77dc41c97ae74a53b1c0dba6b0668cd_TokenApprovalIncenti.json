{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"TokenApprovalIncentives.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IIncentiveVoting.sol\\\";\\nimport \\\"ITokenLocker.sol\\\";\\nimport \\\"IDotDotVoting.sol\\\";\\n\\n\\ncontract TokenApprovalIncentives {\\n    using SafeERC20 for IERC20;\\n\\n    ITokenLocker public immutable epsLocker;\\n    IIncentiveVoting public immutable epsVoter;\\n\\n    ITokenLocker public immutable dddLocker;\\n    IDotDotVoting public immutable dddVoter;\\n    address public immutable proxy;\\n\\n    uint256 public immutable startTime;\\n\\n    uint256 constant WEEK = 86400 * 7;\\n\\n    // vote ID -> eps/ddd vote ratio\\n    mapping(uint256 => uint256) voteRatio;\\n    // vote ID -> incentive -> rewards/ddd vote ratio\\n    mapping(uint256 => mapping(IERC20 => uint256)) public claimRatio;\\n    // vote ID -> incentive -> user -> deposited amount\\n    mapping(uint256 => mapping(IERC20 => mapping(address => uint256))) public userDeposits;\\n    // vote ID -> incentive -> total deposited\\n    mapping(uint256 => mapping(IERC20 => uint256)) public totalDeposits;\\n    // vote ID -> incentive -> user -> claimed amount\\n    mapping(uint256 => mapping(IERC20 => mapping(address => uint256))) public userClaims;\\n    // vote ID -> incentive -> total claimed\\n    mapping(uint256 => mapping(IERC20 => uint256)) public totalClaims;\\n    // vote ID -> list of incentive tokens\\n    mapping(uint256 => IERC20[]) incentives;\\n\\n    event IncentiveAdded(\\n        uint256 indexed voteId,\\n        address indexed depositor,\\n        IERC20 indexed reward,\\n        uint256 amount\\n    );\\n\\n    event IncentiveClaimed(\\n        uint256 indexed voteId,\\n        address indexed claimer,\\n        IERC20 indexed reward,\\n        uint256 amount\\n    );\\n\\n    event IncentiveWithdrawn(\\n        uint256 indexed voteId,\\n        address indexed depositor,\\n        IERC20 indexed reward,\\n        uint256 amount\\n    );\\n\\n    event VoteRatioSet(\\n        uint256 indexed voteId,\\n        uint256 ratio\\n    );\\n\\n    event ClaimRatioSet(\\n        uint256 indexed voteId,\\n        IERC20 indexed reward,\\n        uint256 ratio\\n    );\\n\\n    struct IncentiveData {\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    constructor(\\n        ITokenLocker _epsLocker,\\n        IIncentiveVoting _epsVoter,\\n        ITokenLocker _dddLocker,\\n        IDotDotVoting _dddVoter,\\n        address _proxy\\n    ) {\\n        epsLocker = _epsLocker;\\n        epsVoter = _epsVoter;\\n\\n        dddLocker = _dddLocker;\\n        dddVoter = _dddVoter;\\n        proxy = _proxy;\\n        startTime = _dddVoter.startTime();\\n    }\\n\\n    function getIncentives(uint256 _voteId) external view returns (IncentiveData[] memory) {\\n        IncentiveData[] memory data = new IncentiveData[](incentives[_voteId].length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            IERC20 token = incentives[_voteId][i];\\n            data[i] = IncentiveData({token: token, amount: totalDeposits[_voteId][token]});\\n        }\\n        return data;\\n    }\\n\\n    function claimableIncentives(uint256 _voteId, address _user) external view returns (IncentiveData[] memory) {\\n        IncentiveData[] memory data = new IncentiveData[](incentives[_voteId].length);\\n        uint256 votes = dddVoter.userTokenApprovalVotes(_voteId, _user);\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            IERC20 token = incentives[_voteId][i];\\n            data[i].token = token;\\n\\n            uint256 deposits = totalDeposits[_voteId][token];\\n            uint256 ratio = claimRatio[_voteId][token];\\n            if (ratio == 0) {\\n                IIncentiveVoting.TokenApprovalVote memory vote = epsVoter.tokenApprovalVotes(_voteId);\\n                if (vote.givenVotes < vote.requiredVotes) continue;\\n                uint256 totalVotes = epsVoter.userTokenApprovalVotes(_voteId, proxy) / voteRatio[_voteId];\\n                ratio = deposits / totalVotes;\\n            }\\n\\n            if (userClaims[_voteId][token][_user] == 0) {\\n                uint256 amount = votes * ratio;\\n                uint256 claims = totalClaims[_voteId][token];\\n                if (claims + amount > deposits) amount = deposits - claims;\\n                data[i].amount = amount;\\n            }\\n        }\\n\\n        return data;\\n    }\\n\\n    function addIncentive(uint256 _voteId, IERC20 _reward, uint256 _amount) external {\\n        require(_amount > 0, \\\"Cannot add zero\\\");\\n        IIncentiveVoting.TokenApprovalVote memory vote = epsVoter.tokenApprovalVotes(_voteId);\\n        require(vote.startTime > block.timestamp - WEEK, \\\"Vote has ended\\\");\\n        require(vote.givenVotes < vote.requiredVotes, \\\"Vote has already passed\\\");\\n\\n        if (voteRatio[_voteId] == 0) {\\n            uint256 epsVotes = epsLocker.weeklyWeightOf(proxy, vote.week) / 1e18;\\n            uint256 week = (vote.startTime - startTime) / WEEK - 1;\\n            uint256 dddVotes = dddLocker.weeklyTotalWeight(week) / 1e18;\\n            voteRatio[_voteId] = epsVotes / dddVotes;\\n            emit VoteRatioSet(_voteId, epsVotes / dddVotes);\\n        }\\n\\n        uint256 amount = _reward.balanceOf(address(this));\\n        _reward.safeTransferFrom(msg.sender, address(this), _amount);\\n        amount = _reward.balanceOf(address(this)) - amount;\\n\\n        userDeposits[_voteId][_reward][msg.sender] += amount;\\n        uint256 deposits = totalDeposits[_voteId][_reward];\\n        totalDeposits[_voteId][_reward] = deposits + amount;\\n        if (deposits == 0) {\\n            incentives[_voteId].push(_reward);\\n        }\\n        emit IncentiveAdded(_voteId, msg.sender, _reward, amount);\\n    }\\n\\n    function claimIncentive(uint256 _voteId, IERC20 _reward) external {\\n        require(userClaims[_voteId][_reward][msg.sender] == 0, \\\"Already claimed\\\");\\n        uint256 deposits = totalDeposits[_voteId][_reward];\\n        require(deposits > 0, \\\"No incentive given\\\");\\n        uint256 votes = dddVoter.userTokenApprovalVotes(_voteId, msg.sender);\\n        require(votes > 0, \\\"Did not vote\\\");\\n\\n        if (claimRatio[_voteId][_reward] == 0) {\\n            IIncentiveVoting.TokenApprovalVote memory vote = epsVoter.tokenApprovalVotes(_voteId);\\n            require(vote.givenVotes >= vote.requiredVotes, \\\"Vote has not passed\\\");\\n            uint256 totalVotes = epsVoter.userTokenApprovalVotes(_voteId, proxy) / voteRatio[_voteId];\\n            claimRatio[_voteId][_reward] = deposits / totalVotes;\\n            emit ClaimRatioSet(_voteId, _reward, deposits / totalVotes);\\n        }\\n\\n        // When a vote is created in one epoch week, but the first DDD vote happens in the\\n        // following week, the reward ratio will be calculated incorrectly. In this case\\n        // we pay out until the rewards run out. The best way to mitigate this is to avoid\\n        // creating a token approval vote in the final hours of the epoch week.\\n        uint256 amount = votes * claimRatio[_voteId][_reward];\\n        uint256 claims = totalClaims[_voteId][_reward];\\n        if (claims == deposits) revert(\\\"Nothing left to claim\\\");\\n        else if (claims + amount > deposits) amount = deposits - claims;\\n\\n        userClaims[_voteId][_reward][msg.sender] = amount;\\n        totalClaims[_voteId][_reward] = claims + amount;\\n        _reward.safeTransfer(msg.sender, amount);\\n        emit IncentiveClaimed(_voteId, msg.sender, _reward, amount);\\n    }\\n\\n    function withdrawIncentive(uint256 _voteId, IERC20 _reward) external {\\n        IIncentiveVoting.TokenApprovalVote memory vote = epsVoter.tokenApprovalVotes(_voteId);\\n        require(vote.givenVotes < vote.requiredVotes, \\\"Vote was successful\\\");\\n        require(vote.startTime < block.timestamp - WEEK, \\\"Vote has not ended\\\");\\n        uint256 amount = userDeposits[_voteId][_reward][msg.sender];\\n        require(amount > 0, \\\"Nothing to withdraw\\\");\\n\\n        userDeposits[_voteId][_reward][msg.sender] = 0;\\n        totalDeposits[_voteId][_reward] -= amount;\\n        _reward.safeTransfer(msg.sender, amount);\\n        emit IncentiveWithdrawn(_voteId, msg.sender, _reward, amount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\n/**\\n * Based on the OpenZeppelin IER20 interface:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n *\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IIncentiveVoting.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IIncentiveVoting {\\n\\n    struct TokenApprovalVote {\\n        address token;\\n        uint40 startTime;\\n        uint16 week;\\n        uint256 requiredVotes;\\n        uint256 givenVotes;\\n    }\\n\\n    function NEW_TOKEN_APPROVAL_VOTE_MIN_WEIGHT() external view returns (uint256);\\n    function startTime() external view returns (uint256);\\n    function availableVotes(address _user) external view returns (uint256);\\n    function availableTokenApprovalVotes(address _user, uint256 _voteIndex) external view returns (uint256);\\n    function isApproved(address _token) external view returns (bool);\\n    function approvedTokensLength() external view returns (uint256);\\n    function approvedTokens(uint256) external view returns (address);\\n    function tokenApprovalVotes(uint256) external view returns (TokenApprovalVote memory);\\n    function userTokenApprovalVotes(uint256 _voteIndex, address _user) external view returns (uint256);\\n\\n    /**\\n        @notice Allocate votes toward LP tokens to receive emissions in the following week\\n        @param _tokens List of addresses of LP tokens to vote for\\n        @param _votes Votes to allocate to `_tokens`\\n     */\\n    function vote(address[] calldata _tokens, uint256[] calldata _votes) external;\\n\\n    /**\\n        @notice Create a new vote to enable protocol emissions on a given token\\n        @param _token Token address to create a vote for\\n        @return _voteIndex uint Index value used to reference the vote\\n     */\\n    function createTokenApprovalVote(address _token) external returns (uint256 _voteIndex);\\n\\n    /**\\n        @notice Vote in favor of approving a new token for protocol emissions\\n        @param _voteIndex Array index referencing the vote\\n     */\\n    function voteForTokenApproval(uint256 _voteIndex, uint256 _yesVotes) external;\\n\\n}\\n\"\r\n    },\r\n    \"ITokenLocker.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\n\\ninterface ITokenLocker {\\n\\n    function MAX_LOCK_WEEKS() external view returns (uint256);\\n    function getWeek() external view returns (uint256);\\n    function userWeight(address _user) external view returns (uint256);\\n    function totalWeight() external view returns (uint256);\\n    function weeklyWeight(address _user, uint256 _week) external view returns (uint256, uint256);\\n    function startTime() external view returns (uint256);\\n    function weeklyTotalWeight(uint256 week) external view returns (uint256);\\n    function weeklyWeightOf(address user, uint256 week) external view returns (uint256);\\n\\n    /**\\n        @notice Get data on a user's active token locks\\n        @param _user Address to query data for\\n        @return lockData dynamic array of [weeks until expiration, balance of lock]\\n     */\\n    function getActiveUserLocks(address _user) external view returns (uint256[2][] memory lockData);\\n\\n    /**\\n        @notice Allow or block third-party calls to deposit, withdraw\\n                or claim rewards on behalf of the caller\\n     */\\n    function setBlockThirdPartyActions(bool _block) external;\\n\\n    /**\\n        @notice Deposit tokens into the contract to create a new lock.\\n        @param _user Address to create a new lock for (does not have to be the caller)\\n        @param _amount Amount of tokens to lock. This balance transfered from the caller.\\n        @param _weeks The number of weeks for the lock.\\n     */\\n    function lock(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _weeks\\n    ) external returns (bool);\\n\\n    /**\\n        @notice Extend the length of an existing lock.\\n        @param _amount Amount of tokens to extend the lock for.\\n        @param _weeks The number of weeks for the lock that is being extended.\\n        @param _newWeeks The number of weeks to extend the lock until.\\n     */\\n    function extendLock(\\n        uint256 _amount,\\n        uint256 _weeks,\\n        uint256 _newWeeks\\n    ) external returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"IDotDotVoting.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n\\ninterface IDotDotVoting {\\n    function startTime() external view returns (uint256);\\n    function weeklyVotes(address _user, address _token, uint256 _week) external view returns (uint256, uint256);\\n    function userTokenApprovalVotes(uint256 _id, address _user) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"TokenApprovalIncentives.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ITokenLocker\",\"name\":\"_epsLocker\",\"type\":\"address\"},{\"internalType\":\"contract IIncentiveVoting\",\"name\":\"_epsVoter\",\"type\":\"address\"},{\"internalType\":\"contract ITokenLocker\",\"name\":\"_dddLocker\",\"type\":\"address\"},{\"internalType\":\"contract IDotDotVoting\",\"name\":\"_dddVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"ClaimRatioSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"voteId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"VoteRatioSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"claimIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableIncentives\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenApprovalIncentives.IncentiveData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dddLocker\",\"outputs\":[{\"internalType\":\"contract ITokenLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dddVoter\",\"outputs\":[{\"internalType\":\"contract IDotDotVoting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epsLocker\",\"outputs\":[{\"internalType\":\"contract ITokenLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epsVoter\",\"outputs\":[{\"internalType\":\"contract IIncentiveVoting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getIncentives\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenApprovalIncentives.IncentiveData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"withdrawIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenApprovalIncentives", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000022a93f53a0a3e6847d05dd504283e8e296a49aae0000000000000000000000004695e50a38e33ea09d1f623ba8a8db24219bb06a00000000000000000000000051133c54b7bb6cc89dac86b73c75b1bf98070e0d0000000000000000000000005e4b853944f54c8cb568b25d269cd297b8cee36d000000000000000000000000d4d01c4367ed2d4ab5c2f734d640f7ffe558e8a8", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}