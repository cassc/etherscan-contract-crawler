{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EGSmartRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.17;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\n\\r\\ncontract EGSmartRouter is Ownable {\\r\\n    using TransferHelper for address;\\r\\n    address public routerAddress;\\r\\n    address public WETH;\\r\\n\\r\\n    address public burnAddress;\\r\\n    uint public burnFee;\\r\\n\\r\\n    address public treasuryAddress;\\r\\n    uint public treasuryFee;\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor(address _routerAddress) {\\r\\n        require(\\r\\n            _routerAddress != address(0),\\r\\n            \\\"EGSwapSmartRouter: zero address\\\"\\r\\n        );\\r\\n        routerAddress = _routerAddress;\\r\\n        WETH = IUniswapV2Router02(routerAddress).WETH();\\r\\n    }\\r\\n\\r\\n    function setBurnAddress(address _burnAddress) external onlyOwner {\\r\\n        require(_burnAddress != address(0), \\\"EGSwapSmartRouter: zero address\\\");\\r\\n        burnAddress = _burnAddress;\\r\\n    }\\r\\n\\r\\n    function setTreasuryAddress(address _treasuryAddress) external onlyOwner {\\r\\n        require(\\r\\n            _treasuryAddress != address(0),\\r\\n            \\\"EGSwapSmartRouter: zero address\\\"\\r\\n        );\\r\\n        treasuryAddress = _treasuryAddress;\\r\\n    }\\r\\n\\r\\n    // range [0 ~ 99999], 125 means 0.125%\\r\\n    function setBurnFee(uint _burnFee) external onlyOwner {\\r\\n        burnFee = _burnFee;\\r\\n    }\\r\\n\\r\\n    // range [0 ~ 99999], 125 means 0.125%\\r\\n    function setTreasuryFee(uint _treasuryFee) external onlyOwner {\\r\\n        treasuryFee = _treasuryFee;\\r\\n    }\\r\\n\\r\\n    function calcBurnFee(uint256 amount) public view returns (uint256) {\\r\\n        return (amount * burnFee) / 100000;\\r\\n    }\\r\\n\\r\\n    function calcTreasuryFee(uint256 amount) public view returns (uint256) {\\r\\n        return (amount * treasuryFee) / 100000;\\r\\n    }\\r\\n\\r\\n    function calcRouterFee(uint256 amount) public view returns (uint256) {\\r\\n        return calcBurnFee(amount) + calcTreasuryFee(amount);\\r\\n    }\\r\\n\\r\\n    function transferToTreasury(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        uint deadline,\\r\\n        bool fee\\r\\n    ) internal {\\r\\n        require(amount > 0, \\\"EGSwapSmartRouter: zero amount\\\");\\r\\n        require(\\r\\n            IERC20(token).balanceOf(address(this)) >= amount,\\r\\n            \\\"EGSwapSmartRouter: insufficient balance to treasury\\\"\\r\\n        );\\r\\n\\r\\n        // if pair(token, WETH) exists, swap to WETH  pancakeswap and transfer to trasury address\\r\\n        if (\\r\\n            IUniswapV2Factory(IUniswapV2Router02(routerAddress).factory())\\r\\n                .getPair(token, WETH) == address(0)\\r\\n        ) {\\r\\n            token.safeTransfer(treasuryAddress, amount);\\r\\n        } else {\\r\\n            token.safeApprove(routerAddress, amount);\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = token;\\r\\n            path[1] = WETH;\\r\\n            if (fee) {\\r\\n                IUniswapV2Router02(routerAddress)\\r\\n                    .swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                        amount,\\r\\n                        0,\\r\\n                        path,\\r\\n                        treasuryAddress,\\r\\n                        deadline\\r\\n                    );\\r\\n            } else {\\r\\n                IUniswapV2Router02(routerAddress).swapExactTokensForETH(\\r\\n                    amount,\\r\\n                    0,\\r\\n                    path,\\r\\n                    treasuryAddress,\\r\\n                    deadline\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferToBurn(address token, uint256 amount) internal {\\r\\n        require(amount > 0, \\\"EGSwapSmartRouter: zero amount\\\");\\r\\n        require(\\r\\n            IERC20(token).balanceOf(address(this)) >= amount,\\r\\n            \\\"EGSwapSmartRouter: insufficient balance to burn\\\"\\r\\n        );\\r\\n\\r\\n        token.safeTransfer(burnAddress, amount);\\r\\n    }\\r\\n\\r\\n    function getAmountsOut(\\r\\n        uint amountIn,\\r\\n        address[] calldata path\\r\\n    ) public view returns (uint[] memory amounts) {\\r\\n        return\\r\\n            IUniswapV2Router02(routerAddress).getAmountsOut(\\r\\n                amountIn - calcRouterFee(amountIn),\\r\\n                path\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, \\\"EGSwapSmartRouter: invalid path\\\");\\r\\n\\r\\n        amounts = getAmountsOut(amountIn, path);\\r\\n        require(\\r\\n            amounts[0] == amountIn - calcRouterFee(amountIn),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        tokenIn.safeApprove(routerAddress, amounts[0]);\\r\\n        IUniswapV2Router02(routerAddress).swapExactTokensForTokens(\\r\\n            amounts[0],\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(tokenIn, calcBurnFee(amountIn));\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(tokenIn, calcTreasuryFee(amountIn), deadline, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2 && path[path.length - 1] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        amounts = getAmountsOut(amountIn, path);\\r\\n        require(\\r\\n            amounts[0] == amountIn - calcRouterFee(amountIn),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        tokenIn.safeApprove(routerAddress, amounts[0]);\\r\\n        IUniswapV2Router02(routerAddress).swapExactTokensForETH(\\r\\n            amounts[0],\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            to,\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(tokenIn, calcBurnFee(amountIn));\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(tokenIn, calcTreasuryFee(amountIn), deadline, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2 && path[0] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        uint amountIn = msg.value;\\r\\n\\r\\n        amounts = getAmountsOut(amountIn, path);\\r\\n        require(\\r\\n            amounts[0] == amountIn - calcRouterFee(amountIn),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        IUniswapV2Router02(routerAddress).swapExactETHForTokens{\\r\\n            value: amounts[0]\\r\\n        }(amountOutMin, path, to, deadline);\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            TransferHelper.safeTransferETH(burnAddress, calcBurnFee(amountIn));\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            TransferHelper.safeTransferETH(\\r\\n                treasuryAddress,\\r\\n                calcTreasuryFee(amountIn)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAmountsIn(\\r\\n        uint amountOut,\\r\\n        address[] calldata path\\r\\n    ) public view returns (uint[] memory amounts) {\\r\\n        return\\r\\n            IUniswapV2Router02(routerAddress).getAmountsIn(\\r\\n                amountOut + calcRouterFee(amountOut),\\r\\n                path\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts) {\\r\\n        require(path.length >= 2, \\\"EGSwapSmartRouter: invalid path\\\");\\r\\n\\r\\n        amounts = getAmountsIn(amountOut, path);\\r\\n        require(\\r\\n            amounts[amounts.length - 1] == amountOut + calcRouterFee(amountOut),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amounts[0]);\\r\\n\\r\\n        tokenIn.safeApprove(routerAddress, amounts[0]);\\r\\n        IUniswapV2Router02(routerAddress).swapTokensForExactTokens(\\r\\n            amounts[amounts.length - 1],\\r\\n            amountInMax,\\r\\n            path,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        address tokenOut = path[path.length - 1];\\r\\n        tokenOut.safeTransfer(to, amountOut);\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(tokenOut, calcBurnFee(amountOut));\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(tokenOut, calcTreasuryFee(amountOut), deadline, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2 && path[0] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        amounts = getAmountsIn(amountOut, path);\\r\\n        require(\\r\\n            amounts[amounts.length - 1] == amountOut + calcRouterFee(amountOut),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        IUniswapV2Router02(routerAddress).swapETHForExactTokens{\\r\\n            value: msg.value\\r\\n        }(amounts[amounts.length - 1], path, address(this), deadline);\\r\\n\\r\\n        address tokenOut = path[path.length - 1];\\r\\n        tokenOut.safeTransfer(to, amountOut);\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(tokenOut, calcBurnFee(amountOut));\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(tokenOut, calcTreasuryFee(amountOut), deadline, false);\\r\\n        }\\r\\n\\r\\n        if (msg.value > amounts[0])\\r\\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]); // refund dust eth, if any\\r\\n    }\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts) {\\r\\n        require(\\r\\n            path.length >= 2 && path[path.length - 1] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        amounts = getAmountsIn(amountOut, path);\\r\\n        require(\\r\\n            amounts[amounts.length - 1] == amountOut + calcRouterFee(amountOut),\\r\\n            \\\"EGSwapSmartRouter: invalid fee calculation\\\"\\r\\n        );\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amounts[0]);\\r\\n\\r\\n        tokenIn.safeApprove(routerAddress, amounts[0]);\\r\\n        IUniswapV2Router02(routerAddress).swapTokensForExactETH(\\r\\n            amounts[amounts.length - 1],\\r\\n            amountInMax,\\r\\n            path,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        TransferHelper.safeTransferETH(to, amountOut);\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            TransferHelper.safeTransferETH(burnAddress, calcBurnFee(amountOut));\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            TransferHelper.safeTransferETH(\\r\\n                treasuryAddress,\\r\\n                calcTreasuryFee(amountOut)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external {\\r\\n        require(path.length >= 2, \\\"EGSwapSmartRouter: invalid path\\\");\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        uint _amountBefore = IERC20(tokenIn).balanceOf(address(this));\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n        uint _amountIn = IERC20(tokenIn).balanceOf(address(this)) -\\r\\n            _amountBefore;\\r\\n\\r\\n        uint _amount = _amountIn - calcRouterFee(_amountIn);\\r\\n        tokenIn.safeApprove(routerAddress, _amount);\\r\\n        IUniswapV2Router02(routerAddress)\\r\\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                _amount,\\r\\n                amountOutMin,\\r\\n                path,\\r\\n                to,\\r\\n                deadline\\r\\n            );\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(tokenIn, calcBurnFee(_amountIn));\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(tokenIn, calcTreasuryFee(_amountIn), deadline, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external {\\r\\n        require(\\r\\n            path.length >= 2 && path[path.length - 1] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        address tokenIn = path[0];\\r\\n        uint _amountBefore = IERC20(tokenIn).balanceOf(address(this));\\r\\n        tokenIn.safeTransferFrom(msg.sender, address(this), amountIn);\\r\\n        uint _amountIn = IERC20(tokenIn).balanceOf(address(this)) -\\r\\n            _amountBefore;\\r\\n\\r\\n        uint _amount = _amountIn - calcRouterFee(_amountIn);\\r\\n        tokenIn.safeApprove(routerAddress, _amount);\\r\\n        IUniswapV2Router02(routerAddress)\\r\\n            .swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                _amount,\\r\\n                amountOutMin,\\r\\n                path,\\r\\n                to,\\r\\n                deadline\\r\\n            );\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            transferToBurn(tokenIn, calcBurnFee(_amountIn));\\r\\n        }\\r\\n\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            transferToTreasury(tokenIn, calcTreasuryFee(_amountIn), deadline, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable {\\r\\n        require(\\r\\n            path.length >= 2 && path[0] == WETH,\\r\\n            \\\"EGSwapSmartRouter: invalid path\\\"\\r\\n        );\\r\\n\\r\\n        uint amountIn = msg.value;\\r\\n        uint _amountIn = amountIn - calcRouterFee(amountIn);\\r\\n\\r\\n        IUniswapV2Router02(routerAddress)\\r\\n            .swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n            value: _amountIn\\r\\n        }(amountOutMin, path, to, deadline);\\r\\n\\r\\n        if (burnFee > 0) {\\r\\n            // transfer to burn address\\r\\n            TransferHelper.safeTransferETH(burnAddress, calcBurnFee(amountIn));\\r\\n        }\\r\\n        if (treasuryFee > 0) {\\r\\n            // transfer to treasury address\\r\\n            TransferHelper.safeTransferETH(\\r\\n                treasuryAddress,\\r\\n                calcTreasuryFee(amountIn)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcRouterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EGSmartRouter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}