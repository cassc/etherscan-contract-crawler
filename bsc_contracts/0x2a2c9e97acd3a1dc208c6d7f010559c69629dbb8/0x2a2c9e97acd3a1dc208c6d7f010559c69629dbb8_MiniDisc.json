{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MiniDisc.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at BscScan.com on 2022-03-22\\r\\n*/\\r\\n\\r\\n/**\\r\\n *Submitted for verification at BscScan.com on 2022-01-26\\r\\n*/\\r\\n\\r\\n/**\\r\\n *Submitted for verification at BscScan.com on 2022-01-24\\r\\n*/\\r\\n\\r\\n/**\\r\\n *Submitted for verification at BscScan.com on 2022-01-17\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    uint256 private _lockTime;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor ()  {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }   \\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract MiniDisc is IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address => uint256) private _tOwned;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping (address => bool) isDividendExempt;\\r\\n    mapping(address => bool) private _isExcludedFromFee;\\r\\n    mapping(address => bool) private _updated;\\r\\n\\r\\n    mapping(address => bool) private _isSenderBlacklist;\\r\\n    mapping(address => bool) private _isRecipientBlacklist;\\r\\n    mapping(address => bool) private _isSupermanlist;\\r\\n   \\r\\n\\r\\n    uint256 private _tFeeTotal;\\r\\n    uint256 private _tMarketTotal;\\r\\n    uint256 private _tUnionTotal;\\r\\n    uint256 private _tLPTotal;\\r\\n\\r\\n    string private _name = \\\"MD\\\";\\r\\n    string private _symbol = \\\"MiniDisc\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n\\r\\n    uint256 public _burnFee = 200;\\r\\n    uint256 private _previousburnFee;\\r\\n\\r\\n    uint256 public _LPFee = 200;\\r\\n    uint256 private _previousLPFee;\\r\\n\\r\\n    uint256 public _tokenFee = 0;\\r\\n    uint256 private _previouTokenFee;\\r\\n\\r\\n    uint256 public _inviterFee = 0;\\r\\n    uint256 private _previousInviterFee;\\r\\n\\r\\n    uint256 public _airDropFee = 0;\\r\\n    uint256 private _previousAirDropFee;\\r\\n\\r\\n    uint256 public _marketFee = 100;\\r\\n    uint256 private _previousMarketFee;\\r\\n\\r\\n    uint256 public _unionFee = 200;\\r\\n    uint256 private _previousUnionFee;\\r\\n\\r\\n    uint256 public _inviterLPFee = 200;\\r\\n\\r\\n\\r\\n    uint256 currentIndex;  \\r\\n    uint256 public _tTotal = 4631 * 10**18; // 1760 + 1936 + 450 + 485\\r\\n    uint256 public _AllTotal = 13149 * 10**18;\\r\\n    uint256 distributorGas = 500000;\\r\\n    uint256 public minPeriod = 30 minutes;\\r\\n    uint256 public minPeriodMint = 24 hours;\\r\\n    // uint256 public minParentPeriodMint = 24 hours;\\r\\n    uint256 public LPFeefenhong;\\r\\n    uint256 public Mintfenhong;\\r\\n    uint256 public MintParentfenhong;\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n    address private fromAddress;\\r\\n    address public airDropAddress;\\r\\n    address public marketAddress;\\r\\n    address public unionAddress;\\r\\n    address private toAddress;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    address _baseToken = address(0x55d398326f99059fF775485246999027B3197955); //bsc\\r\\n    // address public _baseToken = address(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684); //bsctest\\r\\n    address public usdtAddress;\\r\\n    address public wbnbAddress;\\r\\n\\r\\n    address public tokenAddress;\\r\\n    address public busdAddress;\\r\\n\\r\\n    address public mintWallet;\\r\\n\\r\\n    address public pinkSaleAddr =\\r\\n        address(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE);\\r\\n\\r\\n    address public pinkSaleChangeAddr =\\r\\n        address(0xC916f67bec7DdE8E1587cBcDbD3F78C6c4E412D0);\\r\\n\\r\\n    address public parentBuyAddress;\\r\\n\\r\\n    \\r\\n    bool public liquifySwitch = false;\\r\\n    bool public mintLP = true;\\r\\n    bool public mintParentLP = true;\\r\\n    bool public dividendLP = true;\\r\\n    bool public exchangeMETA = true;\\r\\n    bool public exchangeUSDT = true;\\r\\n    bool public exchangeBUSD = true;\\r\\n\\r\\n    bool public amountLimit = false;\\r\\n\\r\\n    mapping(address => address) public inviter;\\r\\n\\r\\n    address[] shareholders;\\r\\n    mapping (address => uint256) shareholderIndexes;\\r\\n\\r\\n    bool inSwapAndLiquify;\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n    \\r\\n\\r\\n    constructor() {\\r\\n        _tOwned[msg.sender] = _tTotal;\\r\\n       \\r\\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n        //     0xD99D1c33F9fC3444f8101754aBC46c52416550D1\\r\\n        // );\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n        );\\r\\n\\r\\n        // Create a uniswap pair for this new token\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), address(_baseToken));\\r\\n        // uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n        //     .createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n        // set the rest of the contract variables\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        airDropAddress = address(0xd7cB2F6176b67738AFE7b891a523CF2b64EeD8fB);\\r\\n        marketAddress = address(0xd7cB2F6176b67738AFE7b891a523CF2b64EeD8fB);\\r\\n        unionAddress = address(0xa092D04B55a28Fa93a4A7216e8CF2A23560AAE34);\\r\\n\\r\\n        usdtAddress = address(0x55d398326f99059fF775485246999027B3197955); //bsc\\r\\n        // usdtAddress = address(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684); //bsctest\\r\\n\\r\\n        // tokenAddress = address(0x94B419eE7336cC60Df495d3897fA479790adDd64); //test\\r\\n        tokenAddress = address(0xB6d0cCC0d2d616272d1C3fBD00527C3f014E7747); //main\\r\\n        busdAddress = address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); //main BUSD\\r\\n\\r\\n        parentBuyAddress = address(0x9e9e6FA1496ea0e4f89b3fe75C023156b83Ef845);\\r\\n\\r\\n        mintWallet = address(0xa01234F4c7387ebf58f8120B7FeADCDB17a4B59E);\\r\\n        _allowances[mintWallet][address(this)] = MAX;\\r\\n        _allowances[address(this)][mintWallet] = MAX;\\r\\n\\r\\n        wbnbAddress = address(_uniswapV2Router.WETH());\\r\\n\\r\\n        _allowances[address(this)][address(_uniswapV2Router)] = MAX;\\r\\n        IERC20(usdtAddress).approve(address(_uniswapV2Router), MAX);\\r\\n        IERC20(_uniswapV2Router.WETH()).approve(address(_uniswapV2Router), MAX);\\r\\n        IERC20(tokenAddress).approve(address(_uniswapV2Router), MAX);\\r\\n        IERC20(busdAddress).approve(address(_uniswapV2Router), MAX);\\r\\n\\r\\n        //exclude owner and this contract from fee\\r\\n        _isExcludedFromFee[msg.sender] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        isDividendExempt[address(this)] = true;\\r\\n        isDividendExempt[address(0)] = true;\\r\\n        \\r\\n        emit Transfer(address(0), msg.sender, _tTotal);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint256) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _tOwned[account];\\r\\n    }\\r\\n\\r\\n    function mint(address account, uint256 amount) internal virtual {\\r\\n         require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n         require(_tTotal <= _AllTotal, \\\"ERC20: can not mint anymore!\\\");\\r\\n         _tTotal += amount;\\r\\n         _tOwned[account] += amount;\\r\\n         emit Transfer(address(0), account, amount);\\r\\n     }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            msg.sender,\\r\\n            _allowances[sender][msg.sender].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowances[msg.sender][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n    function totalLPFees() public view returns (uint256) {\\r\\n        return _tLPTotal;\\r\\n    }\\r\\n    function totalMarketFees() public view returns (uint256) {\\r\\n        return _tMarketTotal;\\r\\n    }\\r\\n    function totalUnionFees() public view returns (uint256) {\\r\\n        return _tUnionTotal;\\r\\n    }\\r\\n\\r\\n   function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n    }\\r\\n    //supermanList\\r\\n    function isSupermanlist(address account) public view returns (bool) {\\r\\n        return _isSupermanlist[account];\\r\\n    }\\r\\n    function includeInSupermanlist(address account) public onlyOwner {\\r\\n        _isSupermanlist[account] = true;\\r\\n    }\\r\\n\\r\\n    function excludeFromSupermanlist(address account) public onlyOwner {\\r\\n        _isSupermanlist[account] = false;\\r\\n    }\\r\\n\\r\\n    //senderBlacklist\\r\\n    function isSenderBlacklist(address account) public view returns (bool) {\\r\\n        return _isSenderBlacklist[account];\\r\\n    }\\r\\n    function includeInSenderBlacklist(address account) public onlyOwner {\\r\\n        _isSenderBlacklist[account] = true;\\r\\n    }\\r\\n\\r\\n    function excludeFromSenderBlacklist(address account) public onlyOwner {\\r\\n        _isSenderBlacklist[account] = false;\\r\\n    }\\r\\n    //recipientBlacklist\\r\\n    function isRecipientBlacklist(address account) public view returns (bool) {\\r\\n        return _isRecipientBlacklist[account];\\r\\n    }\\r\\n    function includeInRecipientBlacklist(address account) public onlyOwner {\\r\\n        _isRecipientBlacklist[account] = true;\\r\\n    }\\r\\n\\r\\n    function excludeFromRecipientBlacklist(address account) public onlyOwner {\\r\\n        _isRecipientBlacklist[account] = false;\\r\\n    }\\r\\n\\r\\n    //to recieve ETH from uniswapV2Router when swaping\\r\\n    receive() external payable {}\\r\\n\\r\\n    function removeAllFee() private {\\r\\n        _previousburnFee = _burnFee;\\r\\n        _previousLPFee = _LPFee;\\r\\n        _previouTokenFee = _tokenFee;\\r\\n        _previousInviterFee = _inviterFee;\\r\\n        _previousAirDropFee = _airDropFee;\\r\\n        _previousMarketFee = _marketFee;\\r\\n        _previousUnionFee = _unionFee;\\r\\n\\r\\n        _burnFee = 0;\\r\\n        _LPFee = 0;\\r\\n        _inviterFee = 0;\\r\\n        _tokenFee = 0;\\r\\n        _airDropFee = 0;\\r\\n        _marketFee = 0;\\r\\n        _unionFee = 0;\\r\\n\\r\\n    }\\r\\n\\r\\n    function restoreAllFee() private {\\r\\n        _burnFee = _previousburnFee;\\r\\n        _LPFee = _previousLPFee;\\r\\n        _inviterFee = _previousInviterFee;\\r\\n        _tokenFee = _previouTokenFee;\\r\\n        _airDropFee = _previousAirDropFee;\\r\\n        _marketFee = _previousMarketFee;\\r\\n        _unionFee = _previousUnionFee;\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n        if (from == uniswapV2Pair) {\\r\\n            require(amount <= 50 * 10**18 || amountLimit, \\\"buy must less than 50!\\\");\\r\\n        }\\r\\n        //indicates if fee should be deducted from transfer\\r\\n\\r\\n        if (_isSupermanlist[from] ||  _isSupermanlist[to]) {\\r\\n            require(_isSupermanlist[from] || _isSupermanlist[to], \\\"you are not the superman\\\");\\r\\n        } else {\\r\\n            //senderBlacklist\\r\\n            if (_isSenderBlacklist[from]) {\\r\\n                require(!_isSenderBlacklist[from], \\\"the sender address is blacklist\\\");\\r\\n            }\\r\\n            //toBlacklist\\r\\n            if (_isRecipientBlacklist[to]) {\\r\\n                require(!_isRecipientBlacklist[to], \\\"the recipient address is blacklist\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bool takeFee = false;\\r\\n\\r\\n        if (from == uniswapV2Pair || to == uniswapV2Pair) {\\r\\n            takeFee = true;\\r\\n        }\\r\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        \\r\\n        bool shouldSetInviter = balanceOf(to) == 0 &&\\r\\n            inviter[to] == address(0) &&\\r\\n            from != uniswapV2Pair;\\r\\n\\r\\n        //transfer amount, it will take tax, burn, liquidity fee\\r\\n        _tokenTransfer(from, to, amount, takeFee);\\r\\n\\r\\n        if (shouldSetInviter) {\\r\\n            inviter[to] = from;\\r\\n        }\\r\\n        if(fromAddress == address(0) )fromAddress = from;\\r\\n        if(toAddress == address(0) )toAddress = to;  \\r\\n        if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair ) setShare(fromAddress);\\r\\n        if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) setShare(toAddress);\\r\\n        \\r\\n        fromAddress = from;\\r\\n        toAddress = to;  \\r\\n        if (dividendLP) {\\r\\n            if(_tLPTotal >= 1 * 10**13 && from !=address(this) && LPFeefenhong.add(minPeriod) <= block.timestamp) {\\r\\n                process(distributorGas) ;\\r\\n                LPFeefenhong = block.timestamp;\\r\\n            }\\r\\n        }\\r\\n        if (mintLP) {\\r\\n            if(from !=address(this) && Mintfenhong.add(minPeriodMint) <= block.timestamp) {\\r\\n                // processMint(distributorGas) ;\\r\\n                mint(mintWallet, 47.8 * 10 ** 18);\\r\\n                Mintfenhong = block.timestamp;\\r\\n            }\\r\\n        }\\r\\n        // if (mintParentLP) {\\r\\n        //     if(from !=address(this) && MintParentfenhong.add(minParentPeriodMint) <= block.timestamp) {\\r\\n        //         mint(mintWallet, 50 * 10 ** 18);\\r\\n        //         MintParentfenhong = block.timestamp;\\r\\n        //     }\\r\\n        // }\\r\\n    }\\r\\n    function processMint(uint256 gas) private {\\r\\n        uint256 shareholderCount = shareholders.length;\\r\\n\\r\\n        if(shareholderCount == 0)return;\\r\\n        if(_tTotal > _AllTotal)return;\\r\\n        // require(_tTotal <= _AllTotal, \\\"ERC20: can not mint anymore!\\\");\\r\\n        // mint(address(this), 47.8 * 10 ** 18);\\r\\n        uint256 nowbanance = 47.8 * 10 ** 18;\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n\\r\\n        uint256 iterations = 0;\\r\\n\\r\\n        while(gasUsed < gas && iterations < shareholderCount) {\\r\\n            if(currentIndex >= shareholderCount){\\r\\n                currentIndex = 0;\\r\\n            }\\r\\n\\r\\n          uint256 amount = nowbanance.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());\\r\\n         if( amount < 1 * 10**8) {\\r\\n             currentIndex++;\\r\\n             iterations++;\\r\\n             return;\\r\\n         }\\r\\n         if(_tOwned[address(this)]  < amount )return;\\r\\n            distributeDividendMint(shareholders[currentIndex],amount);\\r\\n            \\r\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n    }\\r\\n    function distributeDividendMint(address shareholder ,uint256 amount) internal {\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].sub(amount);\\r\\n            if (shareholder == pinkSaleAddr) {\\r\\n                shareholder = pinkSaleChangeAddr;\\r\\n            }\\r\\n            uint256 remainAmount=amount;   \\r\\n            // _tOwned[shareholder] = _tOwned[shareholder].add(remainAmount);\\r\\n            //  emit Transfer(address(this), shareholder, remainAmount);\\r\\n            if (inviter[shareholder] != address(0)) {\\r\\n                address cur=inviter[shareholder];\\r\\n                uint256 inviterAmount = amount.div(1000).mul(_inviterLPFee);\\r\\n                _tOwned[cur] = _tOwned[cur].add(inviterAmount);\\r\\n                remainAmount=remainAmount.sub(inviterAmount);\\r\\n                 emit Transfer(address(this), cur, inviterAmount);\\r\\n            }    \\r\\n            _tOwned[shareholder] = _tOwned[shareholder].add(remainAmount);\\r\\n             emit Transfer(address(this), shareholder, remainAmount);\\r\\n    }\\r\\n    function process(uint256 gas) private {\\r\\n        uint256 shareholderCount = shareholders.length;\\r\\n\\r\\n        if(shareholderCount == 0)return;\\r\\n        uint256 nowbanance = _tLPTotal;\\r\\n        // uint256 initialCAKEBalance = IERC20(usdtAddress).balanceOf(address(this));\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n\\r\\n        uint256 iterations = 0;\\r\\n\\r\\n        while(gasUsed < gas && iterations < shareholderCount) {\\r\\n            if(currentIndex >= shareholderCount){\\r\\n                currentIndex = 0;\\r\\n            }\\r\\n\\r\\n          uint256 amount = nowbanance.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());\\r\\n         if( amount < 1 * 10**8) {\\r\\n             currentIndex++;\\r\\n             iterations++;\\r\\n             return;\\r\\n         }\\r\\n         if(_tOwned[address(this)]  < amount )return;\\r\\n        // if(IERC20(usdtAddress).balanceOf(address(this))  < amount )return;\\r\\n            distributeDividend(shareholders[currentIndex],amount);\\r\\n            \\r\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n    }\\r\\n   \\r\\n\\r\\n    function distributeDividend(address shareholder ,uint256 amount) internal {\\r\\n            if (shareholder == pinkSaleAddr) {\\r\\n                shareholder = pinkSaleChangeAddr;\\r\\n            }\\r\\n            // IERC20(usdtAddress).transfer(shareholder, amount);\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].sub(amount);\\r\\n            uint256 remainAmount=amount;\\r\\n            // if (inviter[shareholder] != address(0)) {\\r\\n            //     address cur=inviter[shareholder];\\r\\n            //     uint256 inviterAmount = amount.div(1000).mul(_inviterLPFee);\\r\\n            //     _tOwned[cur] = _tOwned[cur].add(inviterAmount);\\r\\n            //     remainAmount=remainAmount.sub(inviterAmount);\\r\\n            //      emit Transfer(address(this), cur, inviterAmount);\\r\\n            // }    \\r\\n            _tOwned[shareholder] = _tOwned[shareholder].add(remainAmount);\\r\\n            _tLPTotal = _tLPTotal.sub(remainAmount);\\r\\n             emit Transfer(address(this), shareholder, remainAmount);\\r\\n    }\\r\\n    function setShare(address shareholder) private {\\r\\n           if(_updated[shareholder] ){      \\r\\n                if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);              \\r\\n                return;  \\r\\n           }\\r\\n           if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  \\r\\n            addShareholder(shareholder);\\r\\n            _updated[shareholder] = true;\\r\\n          \\r\\n      }\\r\\n    function addShareholder(address shareholder) internal {\\r\\n        shareholderIndexes[shareholder] = shareholders.length;\\r\\n        shareholders.push(shareholder);\\r\\n    }\\r\\n    function quitShare(address shareholder) private {\\r\\n           removeShareholder(shareholder);   \\r\\n           _updated[shareholder] = false; \\r\\n      }\\r\\n    function removeShareholder(address shareholder) internal {\\r\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\\r\\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\\r\\n        shareholders.pop();\\r\\n    }\\r\\n    //this method is responsible for taking all fee, if takeFee is true\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool takeFee\\r\\n    ) private {\\r\\n        if (takeFee) require(amount <= balanceOf(sender).div(100).mul(99), \\\"Sell more than 99.9%, reduce the selling amount\\\");\\r\\n        if (!takeFee) removeAllFee();\\r\\n\\r\\n        _transferStandard(sender, recipient, amount);\\r\\n\\r\\n        if (!takeFee) restoreAllFee();\\r\\n    }\\r\\n\\r\\n    function _takeburnFee(\\r\\n        address sender,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        if (_burnFee == 0) return;\\r\\n        // if(_tFeeTotal >= 1 * 10**7 * 10**18)_burnFee = 0;\\r\\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n        // if (sender != uniswapV2Pair) {\\r\\n        //     swapTokensForParent(_tFeeTotal, address(this));\\r\\n        //     _tFeeTotal = 0;\\r\\n        // }\\r\\n        // _tOwned[address(0)] = _tOwned[address(0)].add(tAmount);\\r\\n        emit Transfer(sender, address(this), tAmount);\\r\\n    }\\r\\n\\r\\n    function _takeLPFee(address sender,uint256 tAmount) private {\\r\\n        if (_LPFee == 0 && _tokenFee ==0) return;\\r\\n        _tLPTotal = _tLPTotal.add(tAmount);\\r\\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\\r\\n        // if (sender != uniswapV2Pair) {\\r\\n        //     swapTokensForCake(_tLPTotal, address(this));\\r\\n        //     _tLPTotal = 0;\\r\\n        // }\\r\\n        emit Transfer(sender, address(this), tAmount);\\r\\n    }\\r\\n\\r\\n    function _takeAirDropFee(address sender,uint256 tAmount) private {\\r\\n        if (_airDropFee ==0) return;\\r\\n        _tOwned[airDropAddress] = _tOwned[airDropAddress].add(tAmount);\\r\\n        emit Transfer(sender, airDropAddress, tAmount);\\r\\n    }\\r\\n\\r\\n    function _takeMarketFee(address sender,uint256 tAmount) private {\\r\\n        if (_marketFee ==0) return;\\r\\n        // _tOwned[marketAddress] = _tOwned[marketAddress].add(tAmount);\\r\\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\\r\\n        _tMarketTotal = _tMarketTotal.add(tAmount);\\r\\n        if (sender != uniswapV2Pair && _tFeeTotal > 0 && exchangeMETA) {\\r\\n            swapTokensForParent(_tFeeTotal, parentBuyAddress);\\r\\n            _tFeeTotal = 0;\\r\\n        }\\r\\n        if (sender != uniswapV2Pair && _tMarketTotal > 0 && exchangeUSDT) {\\r\\n            swapTokensForCake(_tMarketTotal, address(this));\\r\\n            _tMarketTotal = 0;\\r\\n        }\\r\\n        uint256 wbnbAmount = IERC20(wbnbAddress).balanceOf(address(this));\\r\\n        if (sender == uniswapV2Pair && wbnbAmount > 0) {\\r\\n            swapMetaForUsdt(wbnbAmount, marketAddress);\\r\\n            // _tMarketTotal = 0;\\r\\n        }\\r\\n        emit Transfer(sender, marketAddress, tAmount);\\r\\n    }\\r\\n\\r\\n    function _takeUnionFee(address sender,uint256 tAmount) private {\\r\\n        if (_unionFee ==0) return;\\r\\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\\r\\n        _tUnionTotal = _tUnionTotal.add(tAmount);\\r\\n        if (sender != uniswapV2Pair && _tUnionTotal > 0 && exchangeBUSD) {\\r\\n            swapTokensForBusd(_tUnionTotal, unionAddress);\\r\\n            _tUnionTotal = 0;\\r\\n        }\\r\\n        emit Transfer(sender, unionAddress, tAmount);\\r\\n    }\\r\\n\\r\\n    function _takeInviterFee(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        if (_inviterFee == 0) return;\\r\\n        address cur;\\r\\n        if (sender == uniswapV2Pair) {\\r\\n            cur = recipient;\\r\\n        } else if (recipient == uniswapV2Pair) {\\r\\n            cur = sender;\\r\\n        } else {\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tAmount.div(10000).mul(_inviterFee));\\r\\n            emit Transfer(sender, address(this), tAmount.div(10000).mul(_inviterFee));\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 accurRate;\\r\\n        for (int256 i = 0; i < 11; i++) {\\r\\n            uint256 rate;\\r\\n            if (i == 0) {\\r\\n                rate = 300;\\r\\n            } else if(i == 1 || i == 2){\\r\\n                rate = 100;\\r\\n            } else {\\r\\n                rate = 25;\\r\\n            }\\r\\n            cur = inviter[cur];\\r\\n            if (cur == address(0)) {\\r\\n                break;\\r\\n            }\\r\\n            accurRate = accurRate.add(rate);\\r\\n\\r\\n            uint256 curTAmount = tAmount.div(10000).mul(rate);\\r\\n            _tOwned[cur] = _tOwned[cur].add(curTAmount);\\r\\n            emit Transfer(sender, cur, curTAmount);\\r\\n        }\\r\\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount.div(10000).mul(_inviterFee.sub(accurRate)));\\r\\n        emit Transfer(sender, address(this), tAmount.div(10000).mul(_inviterFee.sub(accurRate)));\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function _transferStandard(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n\\r\\n        _takeburnFee(sender, tAmount.div(10000).mul(_burnFee));\\r\\n\\r\\n        _takeLPFee(sender, tAmount.div(10000).mul(_LPFee.add(_tokenFee)));\\r\\n        \\r\\n        _takeAirDropFee(sender,tAmount.div(10000).mul(_airDropFee));\\r\\n    \\r\\n        _takeMarketFee(sender, tAmount.div(10000).mul(_marketFee));\\r\\n\\r\\n        _takeUnionFee(sender, tAmount.div(10000).mul(_unionFee));\\r\\n\\r\\n        _takeInviterFee(sender, recipient, tAmount);\\r\\n\\r\\n        \\r\\n\\r\\n       \\r\\n        uint256 recipientRate = 10000 -\\r\\n            _burnFee -\\r\\n            _LPFee -\\r\\n            _tokenFee -\\r\\n            _airDropFee - \\r\\n            _marketFee -\\r\\n            _inviterFee -\\r\\n            _unionFee;\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(\\r\\n            tAmount.div(10000).mul(recipientRate)\\r\\n        );\\r\\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate));\\r\\n    }\\r\\n\\r\\n    function addShare(address shareholder) public onlyOwner {\\r\\n        if(_updated[shareholder] ){      \\r\\n            if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);              \\r\\n            return;  \\r\\n        }\\r\\n        if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  \\r\\n        addShareholder(shareholder);\\r\\n        _updated[shareholder] = true;\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    function setAirDrop(address account) public onlyOwner {\\r\\n        airDropAddress = account;\\r\\n    } \\r\\n\\r\\n    function setMarket(address account) public onlyOwner {\\r\\n        marketAddress = account;\\r\\n    }\\r\\n\\r\\n    function setUnion(address account) public onlyOwner {\\r\\n        unionAddress = account;\\r\\n    }\\r\\n\\r\\n    function modifyBurnFee(uint256 fee) public onlyOwner {\\r\\n        _burnFee = fee;\\r\\n    }\\r\\n    function modifyLPFee(uint256 fee) public onlyOwner {\\r\\n        _LPFee = fee;\\r\\n    }\\r\\n    function modifyAirDropFee(uint256 fee) public onlyOwner {\\r\\n        _airDropFee = fee;\\r\\n    }\\r\\n    function modifyMarketFee(uint256 fee) public onlyOwner {\\r\\n        _marketFee = fee;\\r\\n    }\\r\\n    function modifyUnionFee(uint256 fee) public onlyOwner {\\r\\n        _unionFee = fee;\\r\\n    }\\r\\n    function modifyInviterLPFee(uint256 fee) public onlyOwner {\\r\\n        _inviterLPFee = fee;\\r\\n    }\\r\\n    function mintToken(address to, uint256 amount) public onlyOwner {\\r\\n        mint(to, amount);\\r\\n    }\\r\\n    function mintToLP(address to) public onlyOwner {\\r\\n        mint(to, 47.8 * 10 ** 18);\\r\\n    }\\r\\n    function switchMintLP(bool status) public onlyOwner {\\r\\n        mintLP = status;\\r\\n    }\\r\\n    function switchMintParentLP(bool status) public onlyOwner {\\r\\n        mintParentLP = status;\\r\\n    }\\r\\n    function switchDiviendLP(bool status) public onlyOwner {\\r\\n        dividendLP = status;\\r\\n    }\\r\\n    function switchExchangeMETA(bool status) public onlyOwner {\\r\\n        exchangeMETA = status;\\r\\n    }\\r\\n    function switchExchangeUSDT(bool status) public onlyOwner {\\r\\n        exchangeUSDT = status;\\r\\n    }\\r\\n    function switchExchangeBUSD(bool status) public onlyOwner {\\r\\n        exchangeBUSD = status;\\r\\n    }\\r\\n    function setPinkSaleAddr(address newpinkSaleAddr) public onlyOwner {\\r\\n        pinkSaleAddr = newpinkSaleAddr;\\r\\n    }\\r\\n\\r\\n    function setPinkSaleChangeAddr(address newpinkSaleChangeAddr) public onlyOwner {\\r\\n        pinkSaleChangeAddr = newpinkSaleChangeAddr;\\r\\n    }\\r\\n\\r\\n    function setParentBuyAddr(address newParentBuyAddress) public onlyOwner {\\r\\n        parentBuyAddress = newParentBuyAddress;\\r\\n    }\\r\\n\\r\\n    function setAmountLimit(bool boolAmountLimit) public onlyOwner {\\r\\n        amountLimit = boolAmountLimit;\\r\\n    }\\r\\n\\r\\n    function swapTokensForCake(uint256 tokenAmount, address to) private {\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = address(this);\\r\\n        // path[1] = uniswapV2Router.WETH();\\r\\n        path[1] = usdtAddress;\\r\\n        // path[2] = tokenAddress;\\r\\n        path[2] = uniswapV2Router.WETH();\\r\\n        // _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapTokensForParent(uint256 tokenAmount, address to) private {\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = address(this);\\r\\n        path[1] = usdtAddress;\\r\\n        path[2] = tokenAddress;\\r\\n        // path[2] = uniswapV2Router.WETH();\\r\\n        // _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapTokensForBusd(uint256 tokenAmount, address to) private {\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = address(this);\\r\\n        path[1] = usdtAddress;\\r\\n        path[2] = busdAddress;\\r\\n        // _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapMetaForUsdt(uint256 tokenAmount, address to) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = wbnbAddress;\\r\\n        // path[0] = address(this);\\r\\n        path[1] = usdtAddress;\\r\\n        // _approve(tokenAddress, address(uniswapV2Router), tokenAmount);\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferFromParentLP(address[] memory _tos, uint[] memory _values) public { \\r\\n        require(_tos.length > 0);\\r\\n        //Transfer(_from, _to, _value);\\r\\n        for(uint32 i=0;i<_tos.length;i++){\\r\\n            // transferFrom(mintWallet, _tos[i], _values[i]);\\r\\n            // transfer(_tos[i], _values[i]);\\r\\n            // _transfer(mintWallet, _tos[i], _values[i]);\\r\\n            _tOwned[msg.sender] = _tOwned[msg.sender].sub(_values[i]);\\r\\n            _tOwned[_tos[i]] = _tOwned[_tos[i]].add(_values[i]);\\r\\n            emit Transfer(msg.sender, _tos[i], _values[i]);\\r\\n        }\\r\\n\\t\\t// token.transfer(\\t0xafe28867914795bd52e0caa153798b95e1bf95a1, amount);\\r\\n\\t}\\r\\n\\r\\n    function transferFromLP() public { \\r\\n        uint256 shareholderCount = shareholders.length;\\r\\n\\r\\n        if(shareholderCount == 0)return;\\r\\n        uint256 nowbanance = 47.8 * 10 ** 18;\\r\\n\\r\\n        uint256 iterations = 0;\\r\\n\\r\\n        while(iterations < shareholderCount) {\\r\\n          uint256 amount = nowbanance.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[iterations])).div(IERC20(uniswapV2Pair).totalSupply());\\r\\n         if( amount < 1 * 10**8) {\\r\\n             iterations++;\\r\\n             return;\\r\\n         }\\r\\n         if(_tOwned[msg.sender]  < amount )return;\\r\\n            distributeMintLP(shareholders[iterations],amount);\\r\\n            iterations++;\\r\\n        }\\r\\n\\t}  \\r\\n    function distributeMintLP(address shareholder ,uint256 amount) internal {\\r\\n            _tOwned[msg.sender] = _tOwned[msg.sender].sub(amount);\\r\\n            if (shareholder == pinkSaleAddr) {\\r\\n                shareholder = pinkSaleChangeAddr;\\r\\n            }\\r\\n            uint256 remainAmount=amount;   \\r\\n            // _tOwned[shareholder] = _tOwned[shareholder].add(remainAmount);\\r\\n            //  emit Transfer(msg.sender, shareholder, remainAmount);\\r\\n            if (inviter[shareholder] != address(0)) {\\r\\n                address cur=inviter[shareholder];\\r\\n                uint256 inviterAmount = amount.div(1000).mul(_inviterLPFee);\\r\\n                _tOwned[cur] = _tOwned[cur].add(inviterAmount);\\r\\n                remainAmount=remainAmount.sub(inviterAmount);\\r\\n                 emit Transfer(msg.sender, cur, inviterAmount);\\r\\n            }    \\r\\n            _tOwned[shareholder] = _tOwned[shareholder].add(remainAmount);\\r\\n             emit Transfer(msg.sender, shareholder, remainAmount);\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPFeefenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MintParentfenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Mintfenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_AllTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airDropFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_unionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"addShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeBUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeMETA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromRecipientBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromSenderBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromSupermanlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInRecipientBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInSenderBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInSupermanlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRecipientBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSenderBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSupermanlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifySwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriodMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintParentLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintToLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyAirDropFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyInviterLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyMarketFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyUnionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentBuyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkSaleAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkSaleChangeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"boolAmountLimit\",\"type\":\"bool\"}],\"name\":\"setAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newParentBuyAddress\",\"type\":\"address\"}],\"name\":\"setParentBuyAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newpinkSaleAddr\",\"type\":\"address\"}],\"name\":\"setPinkSaleAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newpinkSaleChangeAddr\",\"type\":\"address\"}],\"name\":\"setPinkSaleChangeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setUnion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"switchDiviendLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"switchExchangeBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"switchExchangeMETA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"switchExchangeUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"switchMintLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"switchMintParentLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFromLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferFromParentLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MiniDisc", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}