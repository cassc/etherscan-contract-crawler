{"SourceCode": "{\"ERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.7.4;\\n\\n\\nimport \\\"./IERC20.sol\\\";\\n\\nabstract contract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor(\\n        string memory ERCname,\\n        string memory ERCsymbol,\\n        uint8 ERCdecimals\\n    ) {\\n        _name = ERCname;\\n        _symbol = ERCsymbol;\\n        _decimals = ERCdecimals;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\"},\"IDEXFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.7.4;\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\"},\"IDEXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.7.4;\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.7.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\"},\"InterfaceLP.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.7.4;\\n\\ninterface InterfaceLP {\\n    function sync() external;\\n}\"},\"Mirror.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.7.4;\\n\\nimport \\\"./ERC20Detailed.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeMathInt.sol\\\";\\nimport \\\"./InterfaceLP.sol\\\";\\nimport \\\"./IDEXFactory.sol\\\";\\nimport \\\"./IDEXRouter.sol\\\";\\n\\n\\ncontract Mirror is ERC20Detailed, Ownable {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    address public master;\\n\\n    InterfaceLP public pairContract;\\n\\n    modifier onlyMaster() {\\n        require(msg.sender == master);\\n        _;\\n    }\\n\\n    bool public initialDistributionFinished;\\n\\n    mapping(address =\\u003e bool) allowTransfer;\\n    mapping(address =\\u003e bool) _isFeeExempt;\\n    mapping(address =\\u003e bool) _isMaxWalletExempt;\\n\\n    modifier initialDistributionLock() {\\n        require(\\n            initialDistributionFinished ||\\n                isOwner() ||\\n                allowTransfer[msg.sender]\\n        );\\n        _;\\n    }\\n\\n    modifier validRecipient(address to) {\\n        require(to != address(0x0));\\n        _;\\n    }\\n\\n    uint256 private constant DECIMALS = 9;\\n    uint256 private constant MAX_UINT256 = ~uint256(0);\\n\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**15 * 10**DECIMALS;\\n    uint256 public gonMaxWallet = TOTAL_GONS.div(100).mul(2);\\n\\n    uint256 public ecosystemFee = 2;\\n    uint256 public liquidityFee = 2;\\n    uint256 public marketingFee = 4;\\n    uint256 public buyBackFee = 2;\\n    uint256 public totalFee =\\n        ecosystemFee.add(liquidityFee).add(marketingFee).add(buyBackFee);\\n    uint256 public feeDenominator = 100;\\n\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    address public autoLiquidityReceiver;\\n    address public marketingFeeReceiver;\\n    address public ecosystemFeeReceiver;\\n    address public buyBackFeeReceiver;\\n\\n    uint256 targetLiquidity = 30;\\n    uint256 targetLiquidityDenominator = 100;\\n\\n    IDEXRouter public router;\\n    address public pair;\\n\\n    bool public swapEnabled = true;\\n    uint256 private gonSwapThreshold = (TOTAL_GONS * 10) / 10000;\\n    bool inSwap;\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    // Anti Sniper - Anti Dump\\n    bool public antiDump = true;\\n    bool public antiSniper = true;\\n    uint256 public antiSniperPercentage = 99;\\n    uint256 public antiDumpPercentage = 30;\\n    uint BuyTaxDuration= 60 seconds;\\n    uint SellTaxDuration= 1 days;\\n\\n    //BuyCoolDown\\n    bool public buyCooldownEnabled = true;\\n    uint8 public cooldownTimerInterval = 15;\\n    mapping (address =\\u003e uint) private cooldownTimer;\\n\\n    uint256 private constant TOTAL_GONS =\\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\\n\\n    uint256 private _totalSupply;\\n    uint256 private _gonsPerFragment;\\n    mapping(address =\\u003e uint256) private _gonBalances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowedFragments;\\n\\n    constructor() ERC20Detailed(\\\"Mirror\\\", \\\"NUL\\\", uint8(DECIMALS)) {\\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Sushi 0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506 // Cake 0x10ED43C718714eb63d5aA57B78B54704E256024E\\n\\n        pair = IDEXFactory(router.factory()).createPair(\\n            router.WETH(),\\n            address(this)\\n        );\\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\\n        pairContract = InterfaceLP(pair);\\n\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n        _gonBalances[msg.sender] = TOTAL_GONS;\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\n        initialDistributionFinished = false;\\n        _isFeeExempt[msg.sender] = true;\\n        _isFeeExempt[address(this)] = true;\\n\\n        _isMaxWalletExempt[pair] = true;\\n        _isMaxWalletExempt[DEAD] = true;\\n        _isMaxWalletExempt[address(this)] = true;\\n        _isMaxWalletExempt[msg.sender] = true;\\n        _isMaxWalletExempt[owner()] = true;\\n\\n        autoLiquidityReceiver = 0x000000000000000000000000000000000000dEaD;\\n        marketingFeeReceiver = 0x1E5158434aA5bECA1b06F298113224e29B1193Aa;\\n        ecosystemFeeReceiver = 0xC2F14a535C3Bb5340A3dFd54A1C0938f3E6615B2;\\n        buyBackFeeReceiver = 0xf430305a14e6EA556721c07030570a54D5d83c15;\\n\\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\\n    }\\n\\n    function cooldownEnabled(bool _status, uint8 _interval) public onlyMaster {\\n        require(_interval \\u003c 30);\\n        buyCooldownEnabled = _status;\\n        cooldownTimerInterval = _interval;\\n    }\\n\\n    function changeAntiDumpPercentage(uint256 percentage) public onlyMaster {\\n        require(percentage \\u003e 1 \\u0026\\u0026 percentage \\u003c 100);\\n        antiDumpPercentage = percentage;\\n    }\\n\\n    function changeAntiSniperPercentage(uint256 percentage) public onlyMaster {\\n        require(percentage \\u003e 1 \\u0026\\u0026 percentage \\u003c 100);\\n        antiSniperPercentage = percentage;\\n    }\\n\\n    function setAntiDump(bool enabled) external onlyMaster {\\n        antiDump = enabled;\\n    }\\n\\n     function setAntiSniper(bool enabled) external onlyMaster {\\n        antiSniper = enabled;\\n    }\\n\\n    function setMaster(address _master) external onlyOwner {\\n        master = _master;\\n    }\\n\\n    function setLP(address _address) external onlyOwner {\\n        pairContract = InterfaceLP(_address);\\n        _isFeeExempt[_address];\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address who) external view override returns (uint256) {\\n        return _gonBalances[who].div(_gonsPerFragment);\\n    }\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        override\\n        validRecipient(to)\\n        initialDistributionLock\\n        returns (bool)\\n    {\\n        _transferFrom(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function allowance(address owner_, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowedFragments[owner_][spender];\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override validRecipient(to) returns (bool) {\\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\\n                msg.sender\\n            ].sub(value, \\\"Insufficient Allowance\\\");\\n        }\\n\\n        _transferFrom(from, to, value);\\n        return true;\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (sender == pair \\u0026\\u0026 buyCooldownEnabled)\\n        {\\n            require(cooldownTimer[recipient] \\u003c block.timestamp,\\\"buy Cooldown exists\\\");\\n            cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;\\n        }\\n\\n        if (inSwap) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\\n\\n        if (sender != owner() \\u0026\\u0026 !_isMaxWalletExempt[recipient]) {\\n            uint256 heldGonBalance = _gonBalances[recipient];\\n            require(\\n                (heldGonBalance + gonAmount) \\u003c= gonMaxWallet,\\n                \\\"Total Holding is currently limited, you can not buy that much.\\\"\\n            );\\n        }\\n\\n        bool isSell = false;\\n        if (recipient == pair){\\n            isSell = true;\\n        }\\n\\n        if (shouldSwapBack()) {\\n            swapBack();\\n        }\\n\\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\\n\\n        uint256 gonAmountReceived = shouldTakeFee(sender)\\n            ? takeFee(sender, gonAmount, isSell)\\n            : gonAmount;\\n        _gonBalances[recipient] = _gonBalances[recipient].add(\\n            gonAmountReceived\\n        );\\n\\n        emit Transfer(\\n            sender,\\n            recipient,\\n            gonAmountReceived.div(_gonsPerFragment)\\n        );\\n        return true;\\n    }\\n\\n    function _basicTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\\n        return true;\\n    }\\n\\n    uint public LaunchTimestamp;\\n\\n    function takeFee(address sender, uint256 gonAmount, bool isSell)\\n        internal\\n        returns (uint256)\\n    {\\n\\n        uint256 feeAmount = gonAmount.mul(totalFee).div(feeDenominator);\\n        if(isSell \\u0026\\u0026 antiDump \\u0026\\u0026 block.timestamp\\u003cLaunchTimestamp+SellTaxDuration){\\n            feeAmount = gonAmount.mul(antiDumpPercentage).div(feeDenominator);\\n        }\\n        if(antiSniper \\u0026\\u0026 block.timestamp\\u003cLaunchTimestamp+BuyTaxDuration){\\n            feeAmount = gonAmount.mul(antiSniperPercentage).div(feeDenominator);\\n        }\\n\\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\\n            feeAmount\\n        );\\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\\n\\n        return gonAmount.sub(feeAmount);\\n    }\\n\\n    function swapBack() internal swapping {\\n        uint256 dynamicLiquidityFee = isOverLiquified(\\n            targetLiquidity,\\n            targetLiquidityDenominator\\n        )\\n            ? 0\\n            : liquidityFee;\\n        uint256 contractTokenBalance = _gonBalances[address(this)].div(\\n            _gonsPerFragment\\n        );\\n        uint256 amountToLiquify = contractTokenBalance\\n            .mul(dynamicLiquidityFee)\\n            .div(totalFee)\\n            .div(2);\\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\\n\\n        uint256 totalETHFee = totalFee.sub(dynamicLiquidityFee.div(2));\\n\\n        uint256 amountETHLiquidity = amountETH\\n            .mul(dynamicLiquidityFee)\\n            .div(totalETHFee)\\n            .div(2);\\n        uint256 amountETHBuyBack = amountETH.mul(buyBackFee).div(totalETHFee);\\n        uint256 amountETHMarketing = amountETH.mul(marketingFee).div(\\n            totalETHFee\\n        );\\n        uint256 amountETHEco = amountETH.mul(ecosystemFee).div(totalETHFee);\\n\\n        (bool success, ) = payable(marketingFeeReceiver).call{\\n            value: amountETHMarketing,\\n            gas: 30000\\n        }(\\\"\\\");\\n        (success, ) = payable(buyBackFeeReceiver).call{\\n            value: amountETHBuyBack,\\n            gas: 30000\\n        }(\\\"\\\");\\n        (success, ) = payable(ecosystemFeeReceiver).call{\\n            value: amountETHEco,\\n            gas: 30000\\n        }(\\\"\\\");\\n\\n        success = false;\\n\\n        if (amountToLiquify \\u003e 0) {\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                autoLiquidityReceiver,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    function approve(address spender, uint256 value)\\n        external\\n        override\\n        initialDistributionLock\\n        returns (bool)\\n    {\\n        _allowedFragments[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        initialDistributionLock\\n        returns (bool)\\n    {\\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\\n            spender\\n        ].add(addedValue);\\n        emit Approval(\\n            msg.sender,\\n            spender,\\n            _allowedFragments[msg.sender][spender]\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        initialDistributionLock\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\\n        if (subtractedValue \\u003e= oldValue) {\\n            _allowedFragments[msg.sender][spender] = 0;\\n        } else {\\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\\n                subtractedValue\\n            );\\n        }\\n        emit Approval(\\n            msg.sender,\\n            spender,\\n            _allowedFragments[msg.sender][spender]\\n        );\\n        return true;\\n    }\\n\\n    function setInitialDistributionFinished() external onlyOwner {\\n        LaunchTimestamp=block.timestamp;\\n        initialDistributionFinished = true;\\n    }\\n\\n    function enableTransfer(address _addr) external onlyOwner {\\n        allowTransfer[_addr] = true;\\n    }\\n\\n    function setFeeExempt(address _addr) external onlyOwner {\\n        _isFeeExempt[_addr] = true;\\n    }\\n\\n    function checkFeeExempt(address _addr) external view returns (bool) {\\n        return _isFeeExempt[_addr];\\n    }\\n\\n    function setMaxWalletExempt(address _addr) external onlyOwner {\\n        _isMaxWalletExempt[_addr] = true;\\n    }\\n\\n    function checkMaxWalletExempt(address _addr) external view returns (bool) {\\n        return _isMaxWalletExempt[_addr];\\n    }\\n\\n    function setMaxWalletToken(uint256 _num, uint256 _denom)\\n        external\\n        onlyOwner\\n    {\\n        gonMaxWallet = TOTAL_GONS.div(_denom).mul(_num);\\n    }\\n\\n    function checkMaxWalletToken() external view returns (uint256) {\\n        return gonMaxWallet.div(_gonsPerFragment);\\n    }\\n\\n    function shouldTakeFee(address from) internal view returns (bool) {\\n        return !_isFeeExempt[from];\\n    }\\n\\n    function shouldSwapBack() internal view returns (bool) {\\n        return\\n            msg.sender != pair \\u0026\\u0026\\n            !inSwap \\u0026\\u0026\\n            swapEnabled \\u0026\\u0026\\n            _gonBalances[address(this)] \\u003e= gonSwapThreshold;\\n    }\\n\\n    function setSwapBackSettings(\\n        bool _enabled,\\n        uint256 _num,\\n        uint256 _denom\\n    ) external onlyOwner {\\n        swapEnabled = _enabled;\\n        gonSwapThreshold = TOTAL_GONS.div(_denom).mul(_num);\\n    }\\n\\n    function setTargetLiquidity(uint256 target, uint256 accuracy) external onlyOwner {\\n        targetLiquidity = target;\\n        targetLiquidityDenominator = accuracy;\\n    }\\n\\n    function isNotInSwap() external view returns (bool) {\\n        return !inSwap;\\n    }\\n\\n    function checkSwapThreshold() external view returns (uint256) {\\n        return gonSwapThreshold.div(_gonsPerFragment);\\n    }\\n\\n    function manualSync() external {\\n        InterfaceLP(pair).sync();\\n    }\\n\\n    function setFees(\\n        uint256 _ecosystemFee,\\n        uint256 _liquidityFee,\\n        uint256 _buyBackFee,\\n        uint256 _marketingFee,\\n        uint256 _feeDenominator\\n    ) external onlyOwner {\\n        ecosystemFee = _ecosystemFee;\\n        liquidityFee = _liquidityFee;\\n        buyBackFee = _buyBackFee;\\n        marketingFee = _marketingFee;\\n        totalFee = ecosystemFee.add(liquidityFee).add(marketingFee).add(buyBackFee);\\n        feeDenominator = _feeDenominator;\\n        \\n    }\\n\\n    function setFeeReceivers(\\n        address _autoLiquidityReceiver,\\n        address _ecosystemFeeReceiver,\\n        address _marketingFeeReceiver,\\n        address _buyBackFeeReceiver\\n    ) external onlyOwner {\\n        autoLiquidityReceiver = _autoLiquidityReceiver;\\n        ecosystemFeeReceiver = _ecosystemFeeReceiver;\\n        marketingFeeReceiver = _marketingFeeReceiver;\\n        buyBackFeeReceiver = _buyBackFeeReceiver;\\n    }\\n\\n    function rescueToken(address tokenAddress, uint256 tokens)\\n        public\\n        onlyOwner\\n        returns (bool success)\\n    {\\n        return ERC20Detailed(tokenAddress).transfer(msg.sender, tokens);\\n    }\\n\\n    function clearStuckBalance(uint256 amountPercentage, address adr) external onlyOwner {\\n        uint256 amountETH = address(this).balance;\\n        payable(adr).transfer(\\n            (amountETH * amountPercentage) / 100\\n        );\\n    }\\n\\n    function transferToAddressETH(address payable recipient, uint256 amount)\\n        private\\n    {\\n        recipient.transfer(amount);\\n    }\\n\\n    function getCirculatingSupply() public view returns (uint256) {\\n        return\\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\\n                _gonsPerFragment\\n            );\\n    }\\n\\n    function sendPresale(address[] calldata recipients, uint256[] calldata values)\\n        external\\n        onlyOwner\\n    {\\n      for (uint256 i = 0; i \\u003c recipients.length; i++) {\\n        _transferFrom(msg.sender, recipients[i], values[i]);\\n      }\\n    }\\n\\n    function getLiquidityBacking(uint256 accuracy)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 liquidityBalance = _gonBalances[pair].div(_gonsPerFragment);\\n        return\\n            accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\\n    }\\n\\n    function isOverLiquified(uint256 target, uint256 accuracy)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return getLiquidityBacking(accuracy) \\u003e target;\\n    }\\n\\n    receive() external payable {}\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.7.4;\\n\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipRenounced(address indexed previousOwner);\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipRenounced(_owner);\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.7.4;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\"},\"SafeMathInt.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.7.4;\\n\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) \\u003c\\u003c 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) \\u003c\\u003c 255);\\n\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        require(c != MIN_INT256 || (a \\u0026 MIN_INT256) != (b \\u0026 MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != -1 || a != MIN_INT256);\\n\\n        return a / b;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\n        return c;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\n        return c;\\n    }\\n\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a \\u003c 0 ? -a : a;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LaunchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiDump\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiDumpPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSniperPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"changeAntiDumpPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"changeAntiSniperPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkMaxWalletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMaxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_interval\",\"type\":\"uint8\"}],\"name\":\"cooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"enableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonMaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract InterfaceLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"sendPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAntiDump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAntiSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecosystemFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyBackFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ecosystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInitialDistributionFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMaxWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Mirror", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://52975fa72a7d50412fbe1b1c4a368ecea7cb24850fd3953f9d77405c50a2bf5b"}