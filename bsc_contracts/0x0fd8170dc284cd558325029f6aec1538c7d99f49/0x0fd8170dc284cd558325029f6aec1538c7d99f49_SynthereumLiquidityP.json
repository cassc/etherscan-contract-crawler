{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"deploy/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/oracle/chainlink/interfaces/IChainlinkPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  AggregatorV3Interface\\n} from '../../../../@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport {ISynthereumPriceFeed} from '../../common/interfaces/IPriceFeed.sol';\\n\\ninterface ISynthereumChainlinkPriceFeed is ISynthereumPriceFeed {\\n  struct OracleData {\\n    uint80 roundId;\\n    uint256 answer;\\n    uint256 startedAt;\\n    uint256 updatedAt;\\n    uint80 answeredInRound;\\n    uint8 decimals;\\n  }\\n\\n  /**\\n   * @notice Set the address of aggregator associated to a pricee identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @param aggregator Address of chainlink proxy aggregator\\n   */\\n  function setAggregator(\\n    bytes32 priceIdentifier,\\n    AggregatorV3Interface aggregator\\n  ) external;\\n\\n  /**\\n   * @notice Remove the address of aggregator associated to a price identifier\\n   * @param priceIdentifier Price feed identifier\\n   */\\n  function removeAggregator(bytes32 priceIdentifier) external;\\n\\n  /**\\n   * @notice Returns the address of aggregator if exists, otherwise it reverts\\n   * @param priceIdentifier Price feed identifier\\n   * @return aggregator Aggregator associated with price identifier\\n   */\\n  function getAggregator(bytes32 priceIdentifier)\\n    external\\n    view\\n    returns (AggregatorV3Interface aggregator);\\n\\n  /**\\n   * @notice Get last chainlink oracle data for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @return oracleData Oracle data\\n   */\\n  function getOracleLatestData(bytes32 priceIdentifier)\\n    external\\n    view\\n    returns (OracleData memory oracleData);\\n\\n  /**\\n   * @notice Get chainlink oracle price in a given round for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @param _roundId Round Id\\n   * @return price Oracle price\\n   */\\n  function getRoundPrice(bytes32 priceIdentifier, uint80 _roundId)\\n    external\\n    view\\n    returns (uint256 price);\\n\\n  /**\\n   * @notice Get chainlink oracle data in a given round for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @param _roundId Round Id\\n   * @return oracleData Oracle data\\n   */\\n  function getOracleRoundData(bytes32 priceIdentifier, uint80 _roundId)\\n    external\\n    view\\n    returns (OracleData memory oracleData);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/oracle/common/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface ISynthereumPriceFeed {\\n  /**\\n   * @notice Get last chainlink oracle price for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @return price Oracle price\\n   */\\n  function getLatestPrice(bytes32 priceIdentifier)\\n    external\\n    view\\n    returns (uint256 price);\\n\\n  /**\\n   * @notice Return if price identifier is supported\\n   * @param priceIdentifier Price feed identifier\\n   * @return isSupported True if price is supported otherwise false\\n   */\\n  function isPriceSupported(bytes32 priceIdentifier)\\n    external\\n    view\\n    returns (bool isSupported);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/WrongTypology.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  ISynthereumChainlinkPriceFeed\\n} from '../oracle/chainlink/interfaces/IChainlinkPriceFeed.sol';\\n\\ncontract WrongTypology {\\n  string public constant typology = 'WRONG';\\n  ISynthereumChainlinkPriceFeed public priceFeed;\\n\\n  constructor(address _priceFeed) {\\n    priceFeed = ISynthereumChainlinkPriceFeed(_priceFeed);\\n  }\\n\\n  function getPrice(bytes32 identifier) external view returns (uint256 price) {\\n    price = priceFeed.getLatestPrice(identifier);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/ImportAll.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.4;\\n\\nimport '../base/interfaces/IStandardERC20.sol';\\nimport '../base/utils/StringUtils.sol';\\nimport '../common/interfaces/IEmergencyShutdown.sol';\\nimport '../common/interfaces/IDeployment.sol';\\nimport '../common/FactoryConditions.sol';\\nimport '../common/ERC2771Context.sol';\\nimport '../test/MockAggregator.sol';\\nimport '../test/MockRandomAggregator.sol';\\nimport '../test/TestnetERC20.sol';\\nimport '../test/TestnetSelfMintingERC20.sol';\\nimport '../test/SelfMintingControllerMock.sol';\\nimport '../test/CreditLineControllerMock.sol';\\nimport '../test/MockOnChainOracle.sol';\\nimport '../test/PriceFeedGetter.sol';\\nimport '../test/UtilsMock.sol';\\nimport '../test/DerivativeMock.sol';\\nimport '../test/PoolMock.sol';\\nimport '../test/WrongTypology.sol';\\nimport '../test/PoolRegistryMock.sol';\\nimport '../test/MockContext.sol';\\nimport '../test/MockCreditLineContext.sol';\\nimport '../oracle/common/interfaces/IPriceFeed.sol';\\nimport '../oracle/chainlink/interfaces/IChainlinkPriceFeed.sol';\\nimport '../oracle/chainlink/ChainlinkPriceFeed.sol';\\nimport '../synthereum-pool/v5/interfaces/ILiquidityPoolGeneral.sol';\\nimport '../synthereum-pool/v5/interfaces/ILiquidityPoolInteraction.sol';\\nimport '../synthereum-pool/v5/interfaces/ILiquidityPool.sol';\\nimport '../synthereum-pool/v5/interfaces/ILiquidityPoolStorage.sol';\\nimport '../synthereum-pool/v5/LiquidityPool.sol';\\nimport '../synthereum-pool/v5/LiquidityPoolLib.sol';\\nimport '../synthereum-pool/v5/LiquidityPoolCreator.sol';\\nimport '../synthereum-pool/v5/LiquidityPoolFactory.sol';\\nimport '../core/Manager.sol';\\nimport '../core/FactoryVersioning.sol';\\nimport '../core/Finder.sol';\\nimport '../core/interfaces/IFinder.sol';\\nimport '../core/interfaces/IManager.sol';\\nimport '../core/interfaces/IFactoryVersioning.sol';\\nimport '../core/interfaces/IDeploymentSignature.sol';\\nimport '../core/interfaces/IDeployer.sol';\\nimport '../core/Constants.sol';\\nimport '../core/Deployer.sol';\\nimport '../core/CollateralWhitelist.sol';\\nimport '../core/IdentifierWhitelist.sol';\\nimport '../core/TrustedForwarder.sol';\\nimport '../core/interfaces/ICollateralWhitelist.sol';\\nimport '../core/interfaces/IIdentifierWhitelist.sol';\\nimport '../core/registries/SelfMintingRegistry.sol';\\nimport '../core/registries/interfaces/IRegistry.sol';\\nimport '../core/registries/Registry.sol';\\nimport '../core/registries/PoolRegistry.sol';\\nimport '../self-minting/v2/CreditLineCreator.sol';\\nimport '../self-minting/v2/CreditLineFactory.sol';\\nimport '../self-minting/v2/CreditLineController.sol';\\nimport '../self-minting/v2/interfaces/ICreditLine.sol';\\nimport '../self-minting/v2/interfaces/ICreditLineController.sol';\\nimport '../tokens/MintableBurnableSyntheticToken.sol';\\nimport '../tokens/MintableBurnableSyntheticTokenPermit.sol';\\nimport '../tokens/interfaces/BaseControlledMintableBurnableERC20.sol';\\nimport '../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport '../tokens/factories/interfaces/IMintableBurnableTokenFactory.sol';\\nimport '../tokens/MintableBurnableERC20.sol';\\nimport '../tokens/factories/MintableBurnableTokenFactory.sol';\\nimport '../tokens/factories/SyntheticTokenFactory.sol';\\nimport '../tokens/factories/SyntheticTokenPermitFactory.sol';\\n\"\r\n    },\r\n    \"deploy/contracts/base/interfaces/IStandardERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStandardERC20 is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/base/utils/StringUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Library for strings\\n */\\nlibrary StringUtils {\\n  /**\\n   * @notice Convert string in 32bytes\\n   * @param _string string to convert\\n   * @return result string converted in 32bytes\\n   */\\n  function stringToBytes32(string memory _string)\\n    internal\\n    pure\\n    returns (bytes32 result)\\n  {\\n    bytes memory source = bytes(_string);\\n    if (source.length == 0) {\\n      return 0x0;\\n    } else if (source.length > 32) {\\n      revert('Bytes length bigger than 32');\\n    } else {\\n      assembly {\\n        result := mload(add(source, 32))\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Conevert bytes32 in string\\n   * @param _bytes32 32bytes to convert\\n   * @return 32bytes converted in string\\n   */\\n  function bytes32ToString(bytes32 _bytes32)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    uint8 i = 0;\\n    while (i < 32 && _bytes32[i] != 0) {\\n      i++;\\n    }\\n    bytes memory bytesArray = new bytes(i);\\n    for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n      bytesArray[i] = _bytes32[i];\\n    }\\n    return string(bytesArray);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/interfaces/IEmergencyShutdown.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface IEmergencyShutdown {\\n  /**\\n   * @notice Shutdown the pool or self-minting-derivative in case of emergency\\n   * @notice Only Synthereum manager contract can call this function\\n   * @return timestamp Timestamp of emergency shutdown transaction\\n   * @return price Price of the pair at the moment of shutdown execution\\n   */\\n  function emergencyShutdown()\\n    external\\n    returns (uint256 timestamp, uint256 price);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/interfaces/IDeployment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\n\\n/**\\n * @title Interface that a pool MUST have in order to be included in the deployer\\n */\\ninterface ISynthereumDeployment {\\n  /**\\n   * @notice Get Synthereum finder of the pool/self-minting derivative\\n   * @return finder Returns finder contract\\n   */\\n  function synthereumFinder() external view returns (ISynthereumFinder finder);\\n\\n  /**\\n   * @notice Get Synthereum version\\n   * @return poolVersion Returns the version of this pool/self-minting derivative\\n   */\\n  function version() external view returns (uint8 poolVersion);\\n\\n  /**\\n   * @notice Get the collateral token of this pool/self-minting derivative\\n   * @return collateralCurrency The ERC20 collateral token\\n   */\\n  function collateralToken() external view returns (IERC20 collateralCurrency);\\n\\n  /**\\n   * @notice Get the synthetic token associated to this pool/self-minting derivative\\n   * @return syntheticCurrency The ERC20 synthetic token\\n   */\\n  function syntheticToken() external view returns (IERC20 syntheticCurrency);\\n\\n  /**\\n   * @notice Get the synthetic token symbol associated to this pool/self-minting derivative\\n   * @return symbol The ERC20 synthetic token symbol\\n   */\\n  function syntheticTokenSymbol() external view returns (string memory symbol);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/FactoryConditions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IStandardERC20} from '../base/interfaces/IStandardERC20.sol';\\nimport {ISynthereumFinder} from '../core/interfaces/IFinder.sol';\\nimport {\\n  ISynthereumCollateralWhitelist\\n} from '../core/interfaces/ICollateralWhitelist.sol';\\nimport {\\n  ISynthereumIdentifierWhitelist\\n} from '../core/interfaces/IIdentifierWhitelist.sol';\\nimport {SynthereumInterfaces} from '../core/Constants.sol';\\n\\n/** @title Contract factory of self-minting derivatives\\n */\\ncontract FactoryConditions {\\n  /**\\n   * @notice Check if the sender is the deployer and if identifier and collateral are supported\\n   * @param synthereumFinder Synthereum finder\\n   * @param collateralToken Collateral token to check if it's in the whithelist\\n   * @param priceFeedIdentifier Identifier to check if it's in the whithelist\\n   */\\n  function checkDeploymentConditions(\\n    ISynthereumFinder synthereumFinder,\\n    IStandardERC20 collateralToken,\\n    bytes32 priceFeedIdentifier\\n  ) internal view {\\n    address deployer =\\n      synthereumFinder.getImplementationAddress(SynthereumInterfaces.Deployer);\\n    require(msg.sender == deployer, 'Sender must be Synthereum deployer');\\n    ISynthereumCollateralWhitelist collateralWhitelist =\\n      ISynthereumCollateralWhitelist(\\n        synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.CollateralWhitelist\\n        )\\n      );\\n    require(\\n      collateralWhitelist.isOnWhitelist(address(collateralToken)),\\n      'Collateral not supported'\\n    );\\n    ISynthereumIdentifierWhitelist identifierWhitelist =\\n      ISynthereumIdentifierWhitelist(\\n        synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.IdentifierWhitelist\\n        )\\n      );\\n    require(\\n      identifierWhitelist.isOnWhitelist(priceFeedIdentifier),\\n      'Identifier not supported'\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {Context} from '../../@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n  function isTrustedForwarder(address forwarder)\\n    public\\n    view\\n    virtual\\n    returns (bool);\\n\\n  function _msgSender()\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (address sender)\\n  {\\n    if (isTrustedForwarder(msg.sender)) {\\n      // The assembly code is more direct than the Solidity version using `abi.decode`.\\n      assembly {\\n        sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n    } else {\\n      return super._msgSender();\\n    }\\n  }\\n\\n  function _msgData() internal view virtual override returns (bytes calldata) {\\n    if (isTrustedForwarder(msg.sender)) {\\n      return msg.data[0:msg.data.length - 20];\\n    } else {\\n      return super._msgData();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/MockAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ncontract MockAggregator {\\n  uint256 public constant version = 0;\\n\\n  uint8 public decimals;\\n  int256 public latestAnswer;\\n  uint256 public latestTimestamp;\\n  uint256 public latestRound;\\n\\n  mapping(uint256 => int256) public getAnswer;\\n  mapping(uint256 => uint256) public getTimestamp;\\n  mapping(uint256 => uint256) private getStartedAt;\\n\\n  constructor(uint8 _decimals, int256 _initialAnswer) {\\n    decimals = _decimals;\\n    updateAnswer(_initialAnswer);\\n  }\\n\\n  function updateAnswer(int256 _answer) public virtual {\\n    latestAnswer = _answer;\\n    latestTimestamp = block.timestamp;\\n    latestRound++;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = block.timestamp;\\n    getStartedAt[latestRound] = block.timestamp;\\n  }\\n\\n  function updateRoundData(\\n    uint80 _roundId,\\n    int256 _answer,\\n    uint256 _timestamp,\\n    uint256 _startedAt\\n  ) public virtual {\\n    latestRound = _roundId;\\n    latestAnswer = _answer;\\n    latestTimestamp = _timestamp;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = _timestamp;\\n    getStartedAt[latestRound] = _startedAt;\\n  }\\n\\n  function getRoundData(uint80 _roundId)\\n    public\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return (\\n      _roundId,\\n      getAnswer[_roundId],\\n      getStartedAt[_roundId],\\n      getTimestamp[_roundId],\\n      _roundId\\n    );\\n  }\\n\\n  function latestRoundData()\\n    public\\n    view\\n    virtual\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return (\\n      uint80(latestRound),\\n      getAnswer[latestRound],\\n      getStartedAt[latestRound],\\n      getTimestamp[latestRound],\\n      uint80(latestRound)\\n    );\\n  }\\n\\n  function description() external pure returns (string memory) {\\n    return 'MockAggregator.sol';\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/MockRandomAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {SafeMath} from '../../@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport {\\n  SignedSafeMath\\n} from '../../@openzeppelin/contracts/utils/math/SignedSafeMath.sol';\\nimport {Ownable} from '../../@openzeppelin/contracts/access/Ownable.sol';\\nimport {MockAggregator} from './MockAggregator.sol';\\n\\ncontract MockRandomAggregator is Ownable, MockAggregator {\\n  using SafeMath for uint256;\\n  using SignedSafeMath for int256;\\n\\n  uint256 public maxSpreadForSecond;\\n\\n  constructor(int256 _initialAnswer, uint256 _maxSpreadForSecond)\\n    MockAggregator(18, _initialAnswer)\\n  {\\n    maxSpreadForSecond = _maxSpreadForSecond;\\n  }\\n\\n  function latestRoundData()\\n    public\\n    view\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    uint256 randomNumber = getRandomNumber();\\n    answer = calculateNewPrice(randomNumber);\\n    (roundId, , startedAt, updatedAt, answeredInRound) = super\\n      .latestRoundData();\\n  }\\n\\n  function updateAnswer(int256 _answer) public override onlyOwner {\\n    super.updateAnswer(_answer);\\n  }\\n\\n  function updateRoundData(\\n    uint80 _roundId,\\n    int256 _answer,\\n    uint256 _timestamp,\\n    uint256 _startedAt\\n  ) public override onlyOwner {\\n    super.updateRoundData(_roundId, _answer, _timestamp, _startedAt);\\n  }\\n\\n  function calculateNewPrice(uint256 randomNumber)\\n    internal\\n    view\\n    returns (int256 newPrice)\\n  {\\n    int256 lastPrice = latestAnswer;\\n    int256 difference =\\n      lastPrice\\n        .mul(int256(block.timestamp.sub(latestTimestamp)))\\n        .mul(int256(maxSpreadForSecond))\\n        .div(10**18)\\n        .mul(int256(randomNumber))\\n        .div(10**18);\\n    newPrice = (randomNumber.mod(2) == 0)\\n      ? latestAnswer.sub(difference)\\n      : latestAnswer.add(difference);\\n  }\\n\\n  function getRandomNumber() internal view returns (uint256) {\\n    return uint256(blockhash(block.number - 1)).mod(10**18);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/TestnetERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport '../../@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/**\\n * @title An implementation of ERC20 with the same interface as the Compound project's testnet tokens (mainly DAI)\\n * @dev This contract can be deployed or the interface can be used to communicate with Compound's ERC20 tokens.  Note:\\n * this token should never be used to store real value since it allows permissionless minting.\\n */\\n\\ncontract TestnetERC20 is ERC20 {\\n  uint8 _decimals;\\n\\n  /**\\n   * @notice Constructs the TestnetERC20.\\n   * @param _name The name which describes the new token.\\n   * @param _symbol The ticker abbreviation of the name. Ideally < 5 chars.\\n   * @param _tokenDecimals The number of decimals to define token precision.\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _tokenDecimals\\n  ) ERC20(_name, _symbol) {\\n    _decimals = _tokenDecimals;\\n  }\\n\\n  function decimals() public view virtual override(ERC20) returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  // Sample token information.\\n\\n  /**\\n   * @notice Mints value tokens to the owner address.\\n   * @param ownerAddress the address to mint to.\\n   * @param value the amount of tokens to mint.\\n   */\\n  function allocateTo(address ownerAddress, uint256 value) external {\\n    _mint(ownerAddress, value);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/TestnetSelfMintingERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.4;\\n\\nimport {TestnetERC20} from './TestnetERC20.sol';\\n\\ncontract TestnetSelfMintingERC20 is TestnetERC20 {\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals\\n  ) TestnetERC20(_name, _symbol, _decimals) {}\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/SelfMintingControllerMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ncontract SelfMintingControllerMock {\\n  struct DaoFee {\\n    uint256 feePercentage;\\n    address feeRecipient;\\n  }\\n\\n  mapping(address => uint256) private capMint;\\n\\n  mapping(address => uint256) private capDeposit;\\n\\n  mapping(address => DaoFee) private fee;\\n\\n  function setCapMintAmount(\\n    address selfMintingDerivative,\\n    uint256 capMintAmount\\n  ) external {\\n    _setCapMintAmount(selfMintingDerivative, capMintAmount);\\n  }\\n\\n  function setCapDepositRatio(\\n    address selfMintingDerivative,\\n    uint256 capDepositRatio\\n  ) external {\\n    _setCapDepositRatio(selfMintingDerivative, capDepositRatio);\\n  }\\n\\n  function setDaoFee(address selfMintingDerivative, DaoFee calldata daoFee)\\n    external\\n  {\\n    _setDaoFee(selfMintingDerivative, daoFee);\\n  }\\n\\n  function getCapMintAmount(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256 capMintAmount)\\n  {\\n    capMintAmount = capMint[selfMintingDerivative];\\n  }\\n\\n  function getCapDepositRatio(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256 capDepositRatio)\\n  {\\n    capDepositRatio = capDeposit[selfMintingDerivative];\\n  }\\n\\n  function getDaoFee(address selfMintingDerivative)\\n    external\\n    view\\n    returns (DaoFee memory daoFee)\\n  {\\n    daoFee = fee[selfMintingDerivative];\\n  }\\n\\n  function getDaoFeePercentage(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256 daoFeePercentage)\\n  {\\n    daoFeePercentage = fee[selfMintingDerivative].feePercentage;\\n  }\\n\\n  function getDaoFeeRecipient(address selfMintingDerivative)\\n    external\\n    view\\n    returns (address recipient)\\n  {\\n    recipient = fee[selfMintingDerivative].feeRecipient;\\n  }\\n\\n  function _setCapMintAmount(\\n    address selfMintingDerivative,\\n    uint256 capMintAmount\\n  ) internal {\\n    require(\\n      capMint[selfMintingDerivative] != capMintAmount,\\n      'Cap mint amount is the same'\\n    );\\n    capMint[selfMintingDerivative] = capMintAmount;\\n  }\\n\\n  function _setCapDepositRatio(\\n    address selfMintingDerivative,\\n    uint256 capDepositRatio\\n  ) internal {\\n    require(\\n      capDeposit[selfMintingDerivative] != capDepositRatio,\\n      'Cap deposit ratio is the same'\\n    );\\n    capDeposit[selfMintingDerivative] = capDepositRatio;\\n  }\\n\\n  function _setDaoFee(address selfMintingDerivative, DaoFee calldata daoFee)\\n    internal\\n  {\\n    require(\\n      fee[selfMintingDerivative].feePercentage != daoFee.feePercentage ||\\n        fee[selfMintingDerivative].feeRecipient != daoFee.feeRecipient,\\n      'Dao fee is the same'\\n    );\\n    fee[selfMintingDerivative] = DaoFee(\\n      daoFee.feePercentage,\\n      daoFee.feeRecipient\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/CreditLineControllerMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from '../core/interfaces/IFinder.sol';\\nimport {\\n  ICreditLineStorage\\n} from '../self-minting/v2/interfaces/ICreditLineStorage.sol';\\nimport {\\n  FixedPoint\\n} from '../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\n\\n/**\\n * @title SelfMintingController\\n * Set capMintAmount, and fee recipient, proportions and percentage of each self-minting derivative\\n */\\n\\ncontract CreditLineControllerMock {\\n  using FixedPoint for FixedPoint.Unsigned;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address[] maintainers;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  ISynthereumFinder public synthereumFinder;\\n\\n  mapping(address => uint256) private capMint;\\n\\n  mapping(address => FixedPoint.Unsigned) private liquidationReward;\\n\\n  mapping(address => FixedPoint.Unsigned)\\n    private overCollateralizationPercentage;\\n\\n  mapping(address => ICreditLineStorage.Fee) private fee;\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n  function setCollateralRequirement(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata overcollateralPct\\n  ) external {\\n    require(\\n      selfMintingDerivatives.length > 0,\\n      'No self-minting derivatives passed'\\n    );\\n    require(\\n      selfMintingDerivatives.length == overcollateralPct.length,\\n      'Number of derivatives and overcollaterals must be the same'\\n    );\\n\\n    for (uint256 j; j < selfMintingDerivatives.length; j++) {\\n      _setCollateralRequirement(\\n        selfMintingDerivatives[j],\\n        overcollateralPct[j]\\n      );\\n    }\\n  }\\n\\n  function setCapMintAmount(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata capMintAmounts\\n  ) external {\\n    require(\\n      selfMintingDerivatives.length > 0,\\n      'No self-minting derivatives passed'\\n    );\\n    require(\\n      selfMintingDerivatives.length == capMintAmounts.length,\\n      'Number of derivatives and mint cap amounts must be the same'\\n    );\\n    for (uint256 j; j < selfMintingDerivatives.length; j++) {\\n      _setCapMintAmount(selfMintingDerivatives[j], capMintAmounts[j]);\\n    }\\n  }\\n\\n  function setFeePercentage(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata feePercentages\\n  ) external {\\n    uint256 selfMintingDerCount = selfMintingDerivatives.length;\\n    require(selfMintingDerCount > 0, 'No self-minting derivatives passed');\\n    require(\\n      selfMintingDerCount == feePercentages.length,\\n      'Number of derivatives and  fee percentages must be the same'\\n    );\\n    for (uint256 j; j < selfMintingDerCount; j++) {\\n      _setFeePercentage(selfMintingDerivatives[j], feePercentages[j]);\\n    }\\n  }\\n\\n  function setFeeRecipients(\\n    address[] calldata selfMintingDerivatives,\\n    address[][] calldata feeRecipients,\\n    uint32[][] calldata feeProportions\\n  ) external {\\n    require(\\n      selfMintingDerivatives.length == feeRecipients.length,\\n      'Mismatch between derivatives to update and fee recipients'\\n    );\\n    require(\\n      selfMintingDerivatives.length == feeProportions.length,\\n      'Mismatch between derivatives to update and fee proportions'\\n    );\\n\\n    // update each derivative fee parameters\\n    for (uint256 j; j < selfMintingDerivatives.length; j++) {\\n      _setFeeRecipients(\\n        selfMintingDerivatives[j],\\n        feeRecipients[j],\\n        feeProportions[j]\\n      );\\n    }\\n  }\\n\\n  function setLiquidationRewardPercentage(\\n    address[] calldata selfMintingDerivatives,\\n    FixedPoint.Unsigned[] calldata _liquidationRewards\\n  ) external {\\n    for (uint256 j = 0; j < selfMintingDerivatives.length; j++) {\\n      require(\\n        _liquidationRewards[j].isGreaterThan(0) &&\\n          _liquidationRewards[j].isLessThanOrEqual(\\n            FixedPoint.fromUnscaledUint(1)\\n          ),\\n        'Liquidation reward must be between 0 and 1 (100%)'\\n      );\\n\\n      liquidationReward[selfMintingDerivatives[j]] = _liquidationRewards[j];\\n    }\\n  }\\n\\n  function getCollateralRequirement(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return overCollateralizationPercentage[selfMintingDerivative].rawValue;\\n  }\\n\\n  function getLiquidationRewardPercentage(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return liquidationReward[selfMintingDerivative].rawValue;\\n  }\\n\\n  function getFeeInfo(address selfMintingDerivative)\\n    external\\n    view\\n    returns (ICreditLineStorage.Fee memory)\\n  {\\n    return fee[selfMintingDerivative];\\n  }\\n\\n  function getCapMintAmount(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256 capMintAmount)\\n  {\\n    return capMint[selfMintingDerivative];\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  function _setCollateralRequirement(\\n    address selfMintingDerivative,\\n    uint256 percentage\\n  ) internal {\\n    overCollateralizationPercentage[selfMintingDerivative] = FixedPoint\\n      .Unsigned(percentage);\\n  }\\n\\n  function _setFeeRecipients(\\n    address selfMintingDerivative,\\n    address[] calldata feeRecipients,\\n    uint32[] calldata feeProportions\\n  ) internal {\\n    uint256 totalActualFeeProportions = 0;\\n\\n    // Store the sum of all proportions\\n    for (uint256 i = 0; i < feeProportions.length; i++) {\\n      totalActualFeeProportions += feeProportions[i];\\n\\n      fee[selfMintingDerivative].feeRecipients = feeRecipients;\\n      fee[selfMintingDerivative].feeProportions = feeProportions;\\n      fee[selfMintingDerivative]\\n        .totalFeeProportions = totalActualFeeProportions;\\n    }\\n  }\\n\\n  function _setFeePercentage(\\n    address selfMintingDerivative,\\n    uint256 feePercentage\\n  ) internal {\\n    require(\\n      fee[selfMintingDerivative].feePercentage != feePercentage,\\n      ' fee percentage is the same'\\n    );\\n    fee[selfMintingDerivative].feePercentage = feePercentage;\\n  }\\n\\n  function _setCapMintAmount(\\n    address selfMintingDerivative,\\n    uint256 capMintAmount\\n  ) internal {\\n    require(\\n      capMint[selfMintingDerivative] != capMintAmount,\\n      'Cap mint amount is the same'\\n    );\\n    capMint[selfMintingDerivative] = capMintAmount;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/MockOnChainOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ncontract MockOnChainOracle {\\n  mapping(bytes32 => uint256) idToPrice;\\n\\n  function getLatestPrice(bytes32 identifier)\\n    external\\n    view\\n    returns (uint256 price)\\n  {\\n    price = idToPrice[identifier];\\n  }\\n\\n  function setPrice(bytes32 identifier, uint256 price) external {\\n    idToPrice[identifier] = price;\\n  }\\n\\n  function isPriceSupported(bytes32 identifier) external view returns (bool) {\\n    return idToPrice[identifier] > 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/PriceFeedGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  ISynthereumChainlinkPriceFeed\\n} from '../oracle/chainlink/interfaces/IChainlinkPriceFeed.sol';\\nimport {IERC20} from '../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ncontract PriceFeedGetter {\\n  string public constant typology = 'POOL';\\n  ISynthereumChainlinkPriceFeed public priceFeed;\\n\\n  string private symbol;\\n  IERC20 private token;\\n  uint8 private poolVersion;\\n\\n  constructor(\\n    address _priceFeed,\\n    string memory _symbol,\\n    IERC20 _token,\\n    uint8 _poolVersion\\n  ) {\\n    priceFeed = ISynthereumChainlinkPriceFeed(_priceFeed);\\n    symbol = _symbol;\\n    token = _token;\\n    poolVersion = _poolVersion;\\n  }\\n\\n  function getPrice(bytes32 identifier) external view returns (uint256 price) {\\n    price = priceFeed.getLatestPrice(identifier);\\n  }\\n\\n  function syntheticTokenSymbol() external view returns (string memory) {\\n    return symbol;\\n  }\\n\\n  function collateralToken() external view returns (IERC20) {\\n    return token;\\n  }\\n\\n  function version() external view returns (uint8) {\\n    return poolVersion;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/UtilsMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {StringUtils} from '../base/utils/StringUtils.sol';\\n\\ncontract UtilsMock {\\n  using StringUtils for string;\\n  using StringUtils for bytes32;\\n\\n  function stringToBytes32(string memory _string)\\n    external\\n    pure\\n    returns (bytes32 result)\\n  {\\n    result = _string.stringToBytes32();\\n  }\\n\\n  function bytes32ToString(bytes32 _bytes32)\\n    external\\n    pure\\n    returns (string memory)\\n  {\\n    return _bytes32.bytes32ToString();\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/DerivativeMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ISynthereumFinder} from '../core/interfaces/IFinder.sol';\\nimport {\\n  FixedPoint\\n} from '../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\n\\ncontract DerivativeMock {\\n  IERC20 private collateral;\\n  IERC20 private token;\\n  bytes32 private priceFeedIdentifier;\\n\\n  constructor(\\n    IERC20 _collateral,\\n    IERC20 _token,\\n    bytes32 _priceFeedIdentifier\\n  ) {\\n    collateral = _collateral;\\n    token = _token;\\n    priceFeedIdentifier = _priceFeedIdentifier;\\n  }\\n\\n  function collateralCurrency() external view returns (IERC20) {\\n    return collateral;\\n  }\\n\\n  function tokenCurrency() external view returns (IERC20 syntheticCurrency) {\\n    return token;\\n  }\\n\\n  function priceIdentifier() external view returns (bytes32 priceId) {\\n    priceId = priceFeedIdentifier;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/PoolMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {\\n  ISynthereumChainlinkPriceFeed\\n} from '../oracle/chainlink/interfaces/IChainlinkPriceFeed.sol';\\n\\ncontract PoolMock {\\n  uint8 private poolVersion;\\n  IERC20 private collateralCurrency;\\n  string private tokenSymbol;\\n  IERC20 private token;\\n\\n  constructor(\\n    uint8 _version,\\n    IERC20 _collateralToken,\\n    string memory _syntheticTokenSymbol,\\n    IERC20 _syntheticToken\\n  ) {\\n    poolVersion = _version;\\n    collateralCurrency = _collateralToken;\\n    tokenSymbol = _syntheticTokenSymbol;\\n    token = _syntheticToken;\\n  }\\n\\n  function version() external view returns (uint8) {\\n    return poolVersion;\\n  }\\n\\n  function collateralToken() external view returns (IERC20) {\\n    return collateralCurrency;\\n  }\\n\\n  function syntheticTokenSymbol() external view returns (string memory) {\\n    return tokenSymbol;\\n  }\\n\\n  function syntheticToken() external view returns (IERC20) {\\n    return token;\\n  }\\n\\n  function getRate(address priceFeed, bytes32 identifier)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return ISynthereumChainlinkPriceFeed(priceFeed).getLatestPrice(identifier);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/PoolRegistryMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {\\n  EnumerableSet\\n} from '../../@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\n/**\\n * @title Register and track all the pools deployed\\n */\\ncontract PoolRegistryMock {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(string => mapping(IERC20 => mapping(uint8 => EnumerableSet.AddressSet)))\\n    private symbolToElements;\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Allow the deployer to register an element\\n   * @param syntheticTokenSymbol Symbol of the syntheticToken\\n   * @param collateralToken Collateral ERC20 token of the element deployed\\n   * @param version Version of the element deployed\\n   * @param element Address of the element deployed\\n   */\\n  function register(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version,\\n    address element\\n  ) external {\\n    symbolToElements[syntheticTokenSymbol][collateralToken][version].add(\\n      element\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns if a particular element exists or not\\n   * @param syntheticTokenSymbol Synthetic token symbol of the element\\n   * @param collateralToken ERC20 contract of collateral currency\\n   * @param version Version of the element\\n   * @param element Contract of the element to check\\n   * @return isElementDeployed Returns true if a particular element exists, otherwise false\\n   */\\n  function isDeployed(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version,\\n    address element\\n  ) external view returns (bool isElementDeployed) {\\n    isElementDeployed = symbolToElements[syntheticTokenSymbol][collateralToken][\\n      version\\n    ]\\n      .contains(element);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/MockContext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {SynthereumLiquidityPool} from '../synthereum-pool/v5/LiquidityPool.sol';\\n\\ncontract MockContext is SynthereumLiquidityPool {\\n  constructor(SynthereumLiquidityPool.ConstructorParams memory params)\\n    SynthereumLiquidityPool(params)\\n  {}\\n\\n  function test() public view returns (address, bytes memory) {\\n    return (_msgSender(), _msgData());\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/test/MockCreditLineContext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {CreditLine} from '../self-minting/v2/CreditLine.sol';\\n\\ncontract MockCreditLineContext is CreditLine {\\n  constructor(CreditLine.PositionManagerParams memory params)\\n    CreditLine(params)\\n  {}\\n\\n  function test() public view returns (address, bytes memory) {\\n    return (_msgSender(), _msgData());\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/oracle/chainlink/ChainlinkPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  ISynthereumRegistry\\n} from '../../core/registries/interfaces/IRegistry.sol';\\nimport {ISynthereumDeployment} from '../../common/interfaces/IDeployment.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {\\n  ISynthereumChainlinkPriceFeed\\n} from './interfaces/IChainlinkPriceFeed.sol';\\nimport {ITypology} from '../../common/interfaces/ITypology.sol';\\nimport {\\n  AggregatorV3Interface\\n} from '../../../@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\ncontract SynthereumChainlinkPriceFeed is\\n  ISynthereumChainlinkPriceFeed,\\n  AccessControlEnumerable\\n{\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  ISynthereumFinder public immutable synthereumFinder;\\n  mapping(bytes32 => AggregatorV3Interface) private aggregators;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event SetAggregator(bytes32 indexed priceIdentifier, address aggregator);\\n\\n  event RemoveAggregator(bytes32 indexed priceIdentifier);\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n  /**\\n   * @notice Constructs the SynthereumChainlinkPriceFeed contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   * @param roles Admin and Mainteiner roles\\n   */\\n  constructor(ISynthereumFinder _synthereumFinder, Roles memory roles) {\\n    synthereumFinder = _synthereumFinder;\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyPoolsOrSelfMinting() {\\n    if (msg.sender != tx.origin) {\\n      ISynthereumRegistry registry;\\n      try ITypology(msg.sender).typology() returns (\\n        string memory typologyString\\n      ) {\\n        bytes32 typology = keccak256(abi.encodePacked(typologyString));\\n        if (typology == keccak256(abi.encodePacked('POOL'))) {\\n          registry = ISynthereumRegistry(\\n            synthereumFinder.getImplementationAddress(\\n              SynthereumInterfaces.PoolRegistry\\n            )\\n          );\\n        } else if (typology == keccak256(abi.encodePacked('SELF-MINTING'))) {\\n          registry = ISynthereumRegistry(\\n            synthereumFinder.getImplementationAddress(\\n              SynthereumInterfaces.SelfMintingRegistry\\n            )\\n          );\\n        } else {\\n          revert('Typology not supported');\\n        }\\n      } catch {\\n        registry = ISynthereumRegistry(\\n          synthereumFinder.getImplementationAddress(\\n            SynthereumInterfaces.PoolRegistry\\n          )\\n        );\\n      }\\n      ISynthereumDeployment callingContract = ISynthereumDeployment(msg.sender);\\n      require(\\n        registry.isDeployed(\\n          callingContract.syntheticTokenSymbol(),\\n          callingContract.collateralToken(),\\n          callingContract.version(),\\n          msg.sender\\n        ),\\n        'Calling contract not registered'\\n      );\\n    }\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Set the address of aggregator associated to a price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @param aggregator Address of chainlink proxy aggregator\\n   */\\n  function setAggregator(\\n    bytes32 priceIdentifier,\\n    AggregatorV3Interface aggregator\\n  ) external override onlyMaintainer {\\n    require(\\n      address(aggregators[priceIdentifier]) != address(aggregator),\\n      'Aggregator address is the same'\\n    );\\n    aggregators[priceIdentifier] = aggregator;\\n    emit SetAggregator(priceIdentifier, address(aggregator));\\n  }\\n\\n  /**\\n   * @notice Remove the address of aggregator associated to a price identifier\\n   * @param priceIdentifier Price feed identifier\\n   */\\n  function removeAggregator(bytes32 priceIdentifier)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    require(\\n      address(aggregators[priceIdentifier]) != address(0),\\n      'Price identifier does not exist'\\n    );\\n    delete aggregators[priceIdentifier];\\n    emit RemoveAggregator(priceIdentifier);\\n  }\\n\\n  /**\\n   * @notice Get last chainlink oracle price for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @return price Oracle price\\n   */\\n  function getLatestPrice(bytes32 priceIdentifier)\\n    external\\n    view\\n    override\\n    onlyPoolsOrSelfMinting\\n    returns (uint256 price)\\n  {\\n    OracleData memory oracleData = _getOracleLatestRoundData(priceIdentifier);\\n    price = getScaledValue(oracleData.answer, oracleData.decimals);\\n  }\\n\\n  /**\\n   * @notice Get last chainlink oracle data for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @return oracleData Oracle data\\n   */\\n  function getOracleLatestData(bytes32 priceIdentifier)\\n    external\\n    view\\n    override\\n    onlyPoolsOrSelfMinting\\n    returns (OracleData memory oracleData)\\n  {\\n    oracleData = _getOracleLatestRoundData(priceIdentifier);\\n  }\\n\\n  /**\\n   * @notice Get chainlink oracle price in a given round for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @param _roundId Round Id\\n   * @return price Oracle price\\n   */\\n  function getRoundPrice(bytes32 priceIdentifier, uint80 _roundId)\\n    external\\n    view\\n    override\\n    onlyPoolsOrSelfMinting\\n    returns (uint256 price)\\n  {\\n    OracleData memory oracleData =\\n      _getOracleRoundData(priceIdentifier, _roundId);\\n    price = getScaledValue(oracleData.answer, oracleData.decimals);\\n  }\\n\\n  /**\\n   * @notice Get chainlink oracle data in a given round for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @param _roundId Round Id\\n   * @return oracleData Oracle data\\n   */\\n  function getOracleRoundData(bytes32 priceIdentifier, uint80 _roundId)\\n    external\\n    view\\n    override\\n    onlyPoolsOrSelfMinting\\n    returns (OracleData memory oracleData)\\n  {\\n    oracleData = _getOracleRoundData(priceIdentifier, _roundId);\\n  }\\n\\n  //----------------------------------------\\n  // Public view functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Returns the address of aggregator if exists, otherwise it reverts\\n   * @param priceIdentifier Price feed identifier\\n   * @return aggregator Aggregator associated with price identifier\\n   */\\n  function getAggregator(bytes32 priceIdentifier)\\n    public\\n    view\\n    override\\n    returns (AggregatorV3Interface aggregator)\\n  {\\n    aggregator = aggregators[priceIdentifier];\\n    require(\\n      address(aggregator) != address(0),\\n      'Price identifier does not exist'\\n    );\\n  }\\n\\n  /**\\n   * @notice Return if price identifier is supported\\n   * @param priceIdentifier Price feed identifier\\n   * @return isSupported True if price is supported otherwise false\\n   */\\n  function isPriceSupported(bytes32 priceIdentifier)\\n    external\\n    view\\n    override\\n    returns (bool isSupported)\\n  {\\n    isSupported = address(aggregators[priceIdentifier]) != address(0)\\n      ? true\\n      : false;\\n  }\\n\\n  //----------------------------------------\\n  // Internal view functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Get last chainlink oracle data for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @return oracleData Oracle data\\n   */\\n  function _getOracleLatestRoundData(bytes32 priceIdentifier)\\n    internal\\n    view\\n    returns (OracleData memory oracleData)\\n  {\\n    AggregatorV3Interface aggregator = getAggregator(priceIdentifier);\\n    (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    ) = aggregator.latestRoundData();\\n    uint8 decimals = aggregator.decimals();\\n    oracleData = OracleData(\\n      roundId,\\n      convertPrice(answer),\\n      startedAt,\\n      updatedAt,\\n      answeredInRound,\\n      decimals\\n    );\\n  }\\n\\n  /**\\n   * @notice Get chainlink oracle data in a given round for a given price identifier\\n   * @param priceIdentifier Price feed identifier\\n   * @param _roundId Round Id\\n   * @return oracleData Oracle data\\n   */\\n  function _getOracleRoundData(bytes32 priceIdentifier, uint80 _roundId)\\n    internal\\n    view\\n    returns (OracleData memory oracleData)\\n  {\\n    AggregatorV3Interface aggregator = getAggregator(priceIdentifier);\\n    (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    ) = aggregator.getRoundData(_roundId);\\n    uint8 decimals = aggregator.decimals();\\n    oracleData = OracleData(\\n      roundId,\\n      convertPrice(answer),\\n      startedAt,\\n      updatedAt,\\n      answeredInRound,\\n      decimals\\n    );\\n  }\\n\\n  //----------------------------------------\\n  // Internal pure functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Covert the price from int to uint and it reverts if negative\\n   * @param uncovertedPrice Price before conversion\\n   * @return price Price after conversion\\n   */\\n\\n  function convertPrice(int256 uncovertedPrice)\\n    internal\\n    pure\\n    returns (uint256 price)\\n  {\\n    require(uncovertedPrice >= 0, 'Negative value');\\n    price = uint256(uncovertedPrice);\\n  }\\n\\n  /**\\n   * @notice Covert the price to a integer with 18 decimals\\n   * @param unscaledPrice Price before conversion\\n   * @param decimals Number of decimals of unconverted price\\n   * @return price Price after conversion\\n   */\\n\\n  function getScaledValue(uint256 unscaledPrice, uint8 decimals)\\n    internal\\n    pure\\n    returns (uint256 price)\\n  {\\n    price = unscaledPrice * (10**(18 - decimals));\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/synthereum-pool/v5/interfaces/ILiquidityPoolGeneral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  ISynthereumLiquidityPoolInteraction\\n} from './ILiquidityPoolInteraction.sol';\\nimport {\\n  ISynthereumDeployment\\n} from '../../../common/interfaces/IDeployment.sol';\\n\\ninterface ISynthereumLiquidityPoolGeneral is\\n  ISynthereumDeployment,\\n  ISynthereumLiquidityPoolInteraction\\n{}\\n\"\r\n    },\r\n    \"deploy/contracts/synthereum-pool/v5/interfaces/ILiquidityPoolInteraction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface ISynthereumLiquidityPoolInteraction {\\n  /**\\n   * @notice Called by a source Pool's `exchange` function to mint destination tokens\\n   * @notice This functon can be called only by a pool registered in the PoolRegister contract\\n   * @param collateralAmount The amount of collateral to use from the source Pool\\n   * @param numTokens The number of new tokens to mint\\n   * @param recipient Recipient to which send synthetic token minted\\n   */\\n  function exchangeMint(\\n    uint256 collateralAmount,\\n    uint256 numTokens,\\n    address recipient\\n  ) external;\\n\\n  /**\\n   * @notice Returns price identifier of the pool\\n   * @return identifier Price identifier\\n   */\\n  function getPriceFeedIdentifier() external view returns (bytes32 identifier);\\n\\n  /**\\n   * @notice Return overcollateralization percentage from the storage\\n   * @return Overcollateralization percentage\\n   */\\n  function overCollateralization() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total amount of liquidity deposited in the pool, but nut used as collateral\\n   * @return Total available liquidity\\n   */\\n  function totalAvailableLiquidity() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/synthereum-pool/v5/interfaces/ILiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  IEmergencyShutdown\\n} from '../../../common/interfaces/IEmergencyShutdown.sol';\\nimport {ISynthereumLiquidityPoolGeneral} from './ILiquidityPoolGeneral.sol';\\nimport {ISynthereumLiquidityPoolStorage} from './ILiquidityPoolStorage.sol';\\nimport {ITypology} from '../../../common/interfaces/ITypology.sol';\\n\\n/**\\n * @title Token Issuer Contract Interface\\n */\\ninterface ISynthereumLiquidityPool is\\n  ITypology,\\n  IEmergencyShutdown,\\n  ISynthereumLiquidityPoolGeneral\\n{\\n  struct MintParams {\\n    // Minimum amount of synthetic tokens that a user wants to mint using collateral (anti-slippage)\\n    uint256 minNumTokens;\\n    // Amount of collateral that a user wants to spend for minting\\n    uint256 collateralAmount;\\n    // Expiration time of the transaction\\n    uint256 expiration;\\n    // Address to which send synthetic tokens minted\\n    address recipient;\\n  }\\n\\n  struct RedeemParams {\\n    // Amount of synthetic tokens that user wants to use for redeeming\\n    uint256 numTokens;\\n    // Minimium amount of collateral that user wants to redeem (anti-slippage)\\n    uint256 minCollateral;\\n    // Expiration time of the transaction\\n    uint256 expiration;\\n    // Address to which send collateral tokens redeemed\\n    address recipient;\\n  }\\n\\n  struct ExchangeParams {\\n    // Destination pool\\n    ISynthereumLiquidityPoolGeneral destPool;\\n    // Amount of source synthetic tokens that user wants to use for exchanging\\n    uint256 numTokens;\\n    // Minimum Amount of destination synthetic tokens that user wants to receive (anti-slippage)\\n    uint256 minDestNumTokens;\\n    // Expiration time of the transaction\\n    uint256 expiration;\\n    // Address to which send synthetic tokens exchanged\\n    address recipient;\\n  }\\n\\n  /**\\n   * @notice Mint synthetic tokens using fixed amount of collateral\\n   * @notice This calculate the price using on chain price feed\\n   * @notice User must approve collateral transfer for the mint request to succeed\\n   * @param mintParams Input parameters for minting (see MintParams struct)\\n   * @return syntheticTokensMinted Amount of synthetic tokens minted by a user\\n   * @return feePaid Amount of collateral paid by the user as fee\\n   */\\n  function mint(MintParams calldata mintParams)\\n    external\\n    returns (uint256 syntheticTokensMinted, uint256 feePaid);\\n\\n  /**\\n   * @notice Redeem amount of collateral using fixed number of synthetic token\\n   * @notice This calculate the price using on chain price feed\\n   * @notice User must approve synthetic token transfer for the redeem request to succeed\\n   * @param redeemParams Input parameters for redeeming (see RedeemParams struct)\\n   * @return collateralRedeemed Amount of collateral redeem by user\\n   * @return feePaid Amount of collateral paid by user as fee\\n   */\\n  function redeem(RedeemParams calldata redeemParams)\\n    external\\n    returns (uint256 collateralRedeemed, uint256 feePaid);\\n\\n  /**\\n   * @notice Exchange a fixed amount of synthetic token of this pool, with an amount of synthetic tokens of an another pool\\n   * @notice This calculate the price using on chain price feed\\n   * @notice User must approve synthetic token transfer for the redeem request to succeed\\n   * @param exchangeParams Input parameters for exchanging (see ExchangeParams struct)\\n   * @return destNumTokensMinted Amount of collateral redeem by user\\n   * @return feePaid Amount of collateral paid by user as fee\\n   */\\n  function exchange(ExchangeParams calldata exchangeParams)\\n    external\\n    returns (uint256 destNumTokensMinted, uint256 feePaid);\\n\\n  /**\\n   * @notice Withdraw unused deposited collateral by the LP\\n   * @notice Only a sender with LP role can call this function\\n   * @param collateralAmount Collateral to be withdrawn\\n   * @return remainingLiquidity Remaining unused collateral in the pool\\n   */\\n  function withdrawLiquidity(uint256 collateralAmount)\\n    external\\n    returns (uint256 remainingLiquidity);\\n\\n  /**\\n   * @notice Increase collaterallization of Lp position\\n   * @notice Only a sender with LP role can call this function\\n   * @param collateralToTransfer Collateral to be transferred before increase collateral in the position\\n   * @param collateralToIncrease Collateral to be added to the position\\n   * @return newTotalCollateral New total collateral amount\\n   */\\n  function increaseCollateral(\\n    uint256 collateralToTransfer,\\n    uint256 collateralToIncrease\\n  ) external returns (uint256 newTotalCollateral);\\n\\n  /**\\n   * @notice Decrease collaterallization of Lp position\\n   * @notice Check that final poosition is not undercollateralized\\n   * @notice Only a sender with LP role can call this function\\n   * @param collateralToDecrease Collateral to decreased from the position\\n   * @param collateralToWithdraw Collateral to be transferred to the LP\\n   * @return newTotalCollateral New total collateral amount\\n   */\\n  function decreaseCollateral(\\n    uint256 collateralToDecrease,\\n    uint256 collateralToWithdraw\\n  ) external returns (uint256 newTotalCollateral);\\n\\n  /**\\n   * @notice Withdraw fees gained by the sender\\n   * @return feeClaimed Amount of fee claimed\\n   */\\n  function claimFee() external returns (uint256 feeClaimed);\\n\\n  /**\\n   * @notice Liquidate Lp position for an amount of synthetic tokens undercollateralized\\n   * @notice Revert if position is not undercollateralized\\n   * @param numSynthTokens Number of synthetic tokens that user wants to liquidate\\n   * @return synthTokensLiquidated Amount of synthetic tokens liquidated\\n   * @return collateralReceived Amount of received collateral equal to the value of tokens liquidated\\n   * @return rewardAmount Amount of received collateral as reward for the liquidation\\n   */\\n  function liquidate(uint256 numSynthTokens)\\n    external\\n    returns (\\n      uint256 synthTokensLiquidated,\\n      uint256 collateralReceived,\\n      uint256 rewardAmount\\n    );\\n\\n  /**\\n   * @notice Redeem tokens after emergency shutdown\\n   * @return synthTokensSettled Amount of synthetic tokens liquidated\\n   * @return collateralSettled Amount of collateral withdrawn after emergency shutdown\\n   */\\n  function settleEmergencyShutdown()\\n    external\\n    returns (uint256 synthTokensSettled, uint256 collateralSettled);\\n\\n  /**\\n   * @notice Update the fee percentage, recipients and recipient proportions\\n   * @notice Only the maintainer can call this function\\n   * @param _feeData Fee info (percentage + recipients + weigths)\\n   */\\n  function setFee(ISynthereumLiquidityPoolStorage.FeeData calldata _feeData)\\n    external;\\n\\n  /**\\n   * @notice Update the fee percentage\\n   * @notice Only the maintainer can call this function\\n   * @param _feePercentage The new fee percentage\\n   */\\n  function setFeePercentage(uint256 _feePercentage) external;\\n\\n  /**\\n   * @notice Update the addresses of recipients for generated fees and proportions of fees each address will receive\\n   * @notice Only the maintainer can call this function\\n   * @param feeRecipients An array of the addresses of recipients that will receive generated fees\\n   * @param feeProportions An array of the proportions of fees generated each recipient will receive\\n   */\\n  function setFeeRecipients(\\n    address[] calldata feeRecipients,\\n    uint32[] calldata feeProportions\\n  ) external;\\n\\n  /**\\n   * @notice Update the overcollateralization percentage\\n   * @notice Only the maintainer can call this function\\n   * @param _overCollateralization Overcollateralization percentage\\n   */\\n  function setOverCollateralization(uint256 _overCollateralization) external;\\n\\n  /**\\n   * @notice Update the liquidation reward percentage\\n   * @notice Only the maintainer can call this function\\n   * @param _liquidationReward Percentage of reward for correct liquidation by a liquidator\\n   */\\n  function setLiquidationReward(uint256 _liquidationReward) external;\\n\\n  /**\\n   * @notice Returns fee percentage set by the maintainer\\n   * @return Fee percentage\\n   */\\n  function feePercentage() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns fee recipients info\\n   * @return Addresses, weigths and total of weigths\\n   */\\n  function feeRecipientsInfo()\\n    external\\n    view\\n    returns (\\n      address[] memory,\\n      uint32[] memory,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice Returns total number of synthetic tokens generated by this pool\\n   * @return Number of synthetic tokens\\n   */\\n  function totalSyntheticTokens() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total amount of collateral used for collateralizing tokens (users + LP)\\n   * @return Total collateral amount\\n   */\\n  function totalCollateralAmount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total amount of fees to be withdrawn\\n   * @return Total fee amount\\n   */\\n  function totalFeeAmount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the user's fee to be withdrawn\\n   * @param user User's address\\n   * @return User's fee\\n   */\\n  function userFee(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the percentage of overcollateralization to which a liquidation can triggered\\n   * @return Percentage of overcollateralization\\n   */\\n  function collateralRequirement() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the percentage of reward for correct liquidation by a liquidator\\n   * @return Percentage of reward\\n   */\\n  function liquidationReward() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the price of the pair at the moment of the shutdown\\n   * @return Price of the pair\\n   */\\n  function emergencyShutdownPrice() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp (unix time) at the moment of the shutdown\\n   * @return Timestamp\\n   */\\n  function emergencyShutdownTimestamp() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns if position is overcollateralized and thepercentage of coverage of the collateral according to the last price\\n   * @return True if position is overcollaterlized, otherwise false + percentage of coverage (totalCollateralAmount / (price * tokensCollateralized))\\n   */\\n  function collateralCoverage() external returns (bool, uint256);\\n\\n  /**\\n   * @notice Returns the synthetic tokens will be received and fees will be paid in exchange for an input collateral amount\\n   * @notice This function is only trading-informative, it doesn't check liquidity and collateralization conditions\\n   * @param inputCollateral Input collateral amount to be exchanged\\n   * @return synthTokensReceived Synthetic tokens will be minted\\n   * @return feePaid Collateral fee will be paid\\n   */\\n  function getMintTradeInfo(uint256 inputCollateral)\\n    external\\n    view\\n    returns (uint256 synthTokensReceived, uint256 feePaid);\\n\\n  /**\\n   * @notice Returns the collateral amount will be received and fees will be paid in exchange for an input amount of synthetic tokens\\n   * @notice This function is only trading-informative, it doesn't check liquidity and collateralization conditions\\n   * @param  syntheticTokens Amount of synthetic tokens to be exchanged\\n   * @return collateralAmountReceived Collateral amount will be received by the user\\n   * @return feePaid Collateral fee will be paid\\n   */\\n  function getRedeemTradeInfo(uint256 syntheticTokens)\\n    external\\n    view\\n    returns (uint256 collateralAmountReceived, uint256 feePaid);\\n\\n  /**\\n   * @notice Returns the destination synthetic tokens amount will be received and fees will be paid in exchange for an input amount of synthetic tokens\\n   * @notice This function is only trading-informative, it doesn't check liquidity and collateralization conditions\\n   * @param  syntheticTokens Amount of synthetic tokens to be exchanged\\n   * @param  destinationPool Pool in which mint the destination synthetic token\\n   * @return destSyntheticTokensReceived Synthetic tokens will be received from destination pool\\n   * @return feePaid Collateral fee will be paid\\n   */\\n  function getExchangeTradeInfo(\\n    uint256 syntheticTokens,\\n    ISynthereumLiquidityPoolGeneral destinationPool\\n  )\\n    external\\n    view\\n    returns (uint256 destSyntheticTokensReceived, uint256 feePaid);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/synthereum-pool/v5/interfaces/ILiquidityPoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IStandardERC20} from '../../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {ISynthereumFinder} from '../../../core/interfaces/IFinder.sol';\\nimport {\\n  FixedPoint\\n} from '../../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\n\\ninterface ISynthereumLiquidityPoolStorage {\\n  // Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n    address liquidityProvider;\\n  }\\n\\n  // Describe fee data structure\\n  struct FeeData {\\n    // Fees charged when a user mints, redeem and exchanges tokens\\n    FixedPoint.Unsigned feePercentage;\\n    // Recipient receiving fees\\n    address[] feeRecipients;\\n    // Proportion for each recipient\\n    uint32[] feeProportions;\\n  }\\n\\n  // Describe fee structure\\n  struct Fee {\\n    // Fee data structure\\n    FeeData feeData;\\n    // Used with individual proportions to scale values\\n    uint256 totalFeeProportions;\\n  }\\n\\n  struct Storage {\\n    // Synthereum finder\\n    ISynthereumFinder finder;\\n    // Synthereum version\\n    uint8 version;\\n    // Collateral token\\n    IStandardERC20 collateralToken;\\n    // Synthetic token\\n    IMintableBurnableERC20 syntheticToken;\\n    // Overcollateralization percentage\\n    FixedPoint.Unsigned overCollateralization;\\n    // Fees\\n    Fee fee;\\n    // Price identifier\\n    bytes32 priceIdentifier;\\n  }\\n\\n  struct LPPosition {\\n    // Collateral used for collateralize tokens\\n    FixedPoint.Unsigned totalCollateralAmount;\\n    // Number of tokens collateralized\\n    FixedPoint.Unsigned tokensCollateralized;\\n  }\\n\\n  struct Liquidation {\\n    // Percentage of overcollateralization to which a liquidation can triggered\\n    FixedPoint.Unsigned collateralRequirement;\\n    // Percentage of reward for correct liquidation by a liquidator\\n    FixedPoint.Unsigned liquidationReward;\\n  }\\n\\n  struct FeeStatus {\\n    // Track the fee gained to be withdrawn by an address\\n    mapping(address => FixedPoint.Unsigned) feeGained;\\n    // Total amount of fees to be withdrawn\\n    FixedPoint.Unsigned totalFeeAmount;\\n  }\\n\\n  struct Shutdown {\\n    // Timestamp of execution of shutdown\\n    uint256 timestamp;\\n    // Price of the pair at the moment of the shutdown\\n    FixedPoint.Unsigned price;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/synthereum-pool/v5/LiquidityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {ISynthereumLiquidityPool} from './interfaces/ILiquidityPool.sol';\\nimport {\\n  ISynthereumLiquidityPoolStorage\\n} from './interfaces/ILiquidityPoolStorage.sol';\\nimport {\\n  ISynthereumLiquidityPoolGeneral\\n} from './interfaces/ILiquidityPoolGeneral.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\nimport {SynthereumLiquidityPoolLib} from './LiquidityPoolLib.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport {ERC2771Context} from '../../common/ERC2771Context.sol';\\nimport {\\n  AccessControlEnumerable,\\n  Context\\n} from '../../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title Token Issuer Contract\\n * @notice Collects collateral and issues synthetic assets\\n */\\ncontract SynthereumLiquidityPool is\\n  ISynthereumLiquidityPoolStorage,\\n  ISynthereumLiquidityPool,\\n  AccessControlEnumerable,\\n  ERC2771Context,\\n  ReentrancyGuard\\n{\\n  using SynthereumLiquidityPoolLib for Storage;\\n  using SynthereumLiquidityPoolLib for Liquidation;\\n\\n  struct ConstructorParams {\\n    // Synthereum finder\\n    ISynthereumFinder finder;\\n    // Synthereum pool version\\n    uint8 version;\\n    // ERC20 collateral token\\n    IStandardERC20 collateralToken;\\n    // ERC20 synthetic token\\n    IMintableBurnableERC20 syntheticToken;\\n    // The addresses of admin, maintainer, liquidity provider\\n    Roles roles;\\n    // Overcollateralization percentage\\n    uint256 overCollateralization;\\n    // The feeData structure\\n    FeeData feeData;\\n    // Identifier of price to be used in the price feed\\n    bytes32 priceIdentifier;\\n    // Percentage of overcollateralization to which a liquidation can triggered\\n    uint256 collateralRequirement;\\n    // Percentage of reward for correct liquidation by a liquidator\\n    uint256 liquidationReward;\\n  }\\n\\n  //----------------------------------------\\n  // Constants\\n  //----------------------------------------\\n\\n  string public constant override typology = 'POOL';\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  bytes32 public constant LIQUIDITY_PROVIDER_ROLE =\\n    keccak256('Liquidity Provider');\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  Storage private poolStorage;\\n\\n  LPPosition private lpPosition;\\n\\n  Liquidation private liquidationData;\\n\\n  FeeStatus private feeStatus;\\n\\n  Shutdown private emergencyShutdownData;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event Mint(\\n    address indexed account,\\n    uint256 collateralSent,\\n    uint256 numTokensReceived,\\n    uint256 feePaid,\\n    address recipient\\n  );\\n\\n  event Redeem(\\n    address indexed account,\\n    uint256 numTokensSent,\\n    uint256 collateralReceived,\\n    uint256 feePaid,\\n    address recipient\\n  );\\n\\n  event Exchange(\\n    address indexed account,\\n    address indexed destPool,\\n    uint256 numTokensSent,\\n    uint256 destNumTokensReceived,\\n    uint256 feePaid,\\n    address recipient\\n  );\\n\\n  event WithdrawLiquidity(\\n    address indexed lp,\\n    uint256 liquidityWithdrawn,\\n    uint256 remainingLiquidity\\n  );\\n\\n  event IncreaseCollateral(\\n    address indexed lp,\\n    uint256 collateralAdded,\\n    uint256 newTotalCollateral\\n  );\\n\\n  event DecreaseCollateral(\\n    address indexed lp,\\n    uint256 collateralRemoved,\\n    uint256 newTotalCollateral\\n  );\\n\\n  event ClaimFee(\\n    address indexed claimer,\\n    uint256 feeAmount,\\n    uint256 totalRemainingFees\\n  );\\n\\n  event Liquidate(\\n    address indexed liquidator,\\n    uint256 tokensLiquidated,\\n    uint256 price,\\n    uint256 collateralExpected,\\n    uint256 collateralReceived,\\n    uint256 rewardReceived\\n  );\\n\\n  event EmergencyShutdown(\\n    uint256 timestamp,\\n    uint256 price,\\n    uint256 finalCollateral\\n  );\\n\\n  event Settle(\\n    address indexed account,\\n    uint256 numTokensSettled,\\n    uint256 collateralExpected,\\n    uint256 collateralSettled\\n  );\\n\\n  event SetFeePercentage(uint256 feePercentage);\\n\\n  event SetFeeRecipients(address[] feeRecipients, uint32[] feeProportions);\\n\\n  event SetOverCollateralization(uint256 overCollateralization);\\n\\n  event SetLiquidationReward(uint256 liquidationReward);\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, _msgSender()),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyLiquidityProvider() {\\n    require(\\n      hasRole(LIQUIDITY_PROVIDER_ROLE, _msgSender()),\\n      'Sender must be the liquidity provider'\\n    );\\n    _;\\n  }\\n\\n  modifier notEmergencyShutdown() {\\n    require(emergencyShutdownData.timestamp == 0, 'Pool emergency shutdown');\\n    _;\\n  }\\n\\n  modifier isEmergencyShutdown() {\\n    require(\\n      emergencyShutdownData.timestamp != 0,\\n      'Pool not emergency shutdown'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructor of liquidity pool\\n\\n   */\\n  constructor(ConstructorParams memory params) nonReentrant {\\n    poolStorage.initialize(\\n      liquidationData,\\n      params.finder,\\n      params.version,\\n      params.collateralToken,\\n      params.syntheticToken,\\n      FixedPoint.Unsigned(params.overCollateralization),\\n      params.priceIdentifier,\\n      FixedPoint.Unsigned(params.collateralRequirement),\\n      FixedPoint.Unsigned(params.liquidationReward)\\n    );\\n    poolStorage.setFeePercentage(params.feeData.feePercentage);\\n    poolStorage.setFeeRecipients(\\n      params.feeData.feeRecipients,\\n      params.feeData.feeProportions\\n    );\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(LIQUIDITY_PROVIDER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, params.roles.admin);\\n    _setupRole(MAINTAINER_ROLE, params.roles.maintainer);\\n    _setupRole(LIQUIDITY_PROVIDER_ROLE, params.roles.liquidityProvider);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Mint synthetic tokens using fixed amount of collateral\\n   * @notice This calculate the price using on chain price feed\\n   * @notice User must approve collateral transfer for the mint request to succeed\\n   * @param mintParams Input parameters for minting (see MintParams struct)\\n   * @return syntheticTokensMinted Amount of synthetic tokens minted by a user\\n   * @return feePaid Amount of collateral paid by the user as fee\\n   */\\n  function mint(MintParams calldata mintParams)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 syntheticTokensMinted, uint256 feePaid)\\n  {\\n    (syntheticTokensMinted, feePaid) = poolStorage.mint(\\n      lpPosition,\\n      feeStatus,\\n      mintParams,\\n      _msgSender()\\n    );\\n  }\\n\\n  /**\\n   * @notice Redeem amount of collateral using fixed number of synthetic token\\n   * @notice This calculate the price using on chain price feed\\n   * @notice User must approve synthetic token transfer for the redeem request to succeed\\n   * @param redeemParams Input parameters for redeeming (see RedeemParams struct)\\n   * @return collateralRedeemed Amount of collateral redeem by user\\n   * @return feePaid Amount of collateral paid by user as fee\\n   */\\n  function redeem(RedeemParams calldata redeemParams)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 collateralRedeemed, uint256 feePaid)\\n  {\\n    (collateralRedeemed, feePaid) = poolStorage.redeem(\\n      lpPosition,\\n      feeStatus,\\n      redeemParams,\\n      _msgSender()\\n    );\\n  }\\n\\n  /**\\n   * @notice Exchange a fixed amount of synthetic token of this pool, with an amount of synthetic tokens of an another pool\\n   * @notice This calculate the price using on chain price feed\\n   * @notice User must approve synthetic token transfer for the redeem request to succeed\\n   * @param exchangeParams Input parameters for exchanging (see ExchangeParams struct)\\n   * @return destNumTokensMinted Amount of collateral redeem by user\\n   * @return feePaid Amount of collateral paid by user as fee\\n   */\\n  function exchange(ExchangeParams calldata exchangeParams)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 destNumTokensMinted, uint256 feePaid)\\n  {\\n    (destNumTokensMinted, feePaid) = poolStorage.exchange(\\n      lpPosition,\\n      feeStatus,\\n      exchangeParams,\\n      _msgSender()\\n    );\\n  }\\n\\n  /**\\n   * @notice Called by a source Pool's `exchange` function to mint destination tokens\\n   * @notice This functon can be called only by a pool registered in the PoolRegister contract\\n   * @param collateralAmount The amount of collateral to use from the source Pool\\n   * @param numTokens The number of new tokens to mint\\n   * @param recipient Recipient to which send synthetic token minted\\n   */\\n  function exchangeMint(\\n    uint256 collateralAmount,\\n    uint256 numTokens,\\n    address recipient\\n  ) external override notEmergencyShutdown nonReentrant {\\n    poolStorage.exchangeMint(\\n      lpPosition,\\n      feeStatus,\\n      FixedPoint.Unsigned(collateralAmount),\\n      FixedPoint.Unsigned(numTokens),\\n      recipient\\n    );\\n  }\\n\\n  /**\\n   * @notice Withdraw unused deposited collateral by the LP\\n   * @notice Only a sender with LP role can call this function\\n   * @param collateralAmount Collateral to be withdrawn\\n   * @return remainingLiquidity Remaining unused collateral in the pool\\n   */\\n  function withdrawLiquidity(uint256 collateralAmount)\\n    external\\n    override\\n    onlyLiquidityProvider\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 remainingLiquidity)\\n  {\\n    remainingLiquidity = poolStorage.withdrawLiquidity(\\n      lpPosition,\\n      feeStatus,\\n      FixedPoint.Unsigned(collateralAmount),\\n      _msgSender()\\n    );\\n  }\\n\\n  /**\\n   * @notice Increase collaterallization of Lp position\\n   * @notice Only a sender with LP role can call this function\\n   * @param collateralToTransfer Collateral to be transferred before increase collateral in the position\\n   * @param collateralToIncrease Collateral to be added to the position\\n   * @return newTotalCollateral New total collateral amount\\n   */\\n  function increaseCollateral(\\n    uint256 collateralToTransfer,\\n    uint256 collateralToIncrease\\n  )\\n    external\\n    override\\n    onlyLiquidityProvider\\n    nonReentrant\\n    returns (uint256 newTotalCollateral)\\n  {\\n    newTotalCollateral = poolStorage.increaseCollateral(\\n      lpPosition,\\n      feeStatus,\\n      FixedPoint.Unsigned(collateralToTransfer),\\n      FixedPoint.Unsigned(collateralToIncrease),\\n      _msgSender()\\n    );\\n  }\\n\\n  /**\\n   * @notice Decrease collaterallization of Lp position\\n   * @notice Check that final poosition is not undercollateralized\\n   * @notice Only a sender with LP role can call this function\\n   * @param collateralToDecrease Collateral to decreased from the position\\n   * @param collateralToWithdraw Collateral to be transferred to the LP\\n   * @return newTotalCollateral New total collateral amount\\n   */\\n  function decreaseCollateral(\\n    uint256 collateralToDecrease,\\n    uint256 collateralToWithdraw\\n  )\\n    external\\n    override\\n    onlyLiquidityProvider\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 newTotalCollateral)\\n  {\\n    newTotalCollateral = poolStorage.decreaseCollateral(\\n      lpPosition,\\n      liquidationData,\\n      feeStatus,\\n      FixedPoint.Unsigned(collateralToDecrease),\\n      FixedPoint.Unsigned(collateralToWithdraw),\\n      _msgSender()\\n    );\\n  }\\n\\n  /**\\n   * @notice Withdraw fees gained by the sender\\n   * @return feeClaimed Amount of fee claimed\\n   */\\n  function claimFee()\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 feeClaimed)\\n  {\\n    feeClaimed = poolStorage.claimFee(feeStatus, _msgSender());\\n  }\\n\\n  /**\\n   * @notice Liquidate Lp position for an amount of synthetic tokens undercollateralized\\n   * @notice Revert if position is not undercollateralized\\n   * @param numSynthTokens Number of synthetic tokens that user wants to liquidate\\n   * @return synthTokensLiquidated Amount of synthetic tokens liquidated\\n   * @return collateralReceived Amount of received collateral equal to the value of tokens liquidated\\n   * @return rewardAmount Amount of received collateral as reward for the liquidation\\n   */\\n  function liquidate(uint256 numSynthTokens)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (\\n      uint256 synthTokensLiquidated,\\n      uint256 collateralReceived,\\n      uint256 rewardAmount\\n    )\\n  {\\n    (synthTokensLiquidated, collateralReceived, rewardAmount) = poolStorage\\n      .liquidate(\\n      lpPosition,\\n      liquidationData,\\n      feeStatus,\\n      FixedPoint.Unsigned(numSynthTokens),\\n      _msgSender()\\n    );\\n  }\\n\\n  /**\\n   * @notice Shutdown the pool in case of emergency\\n   * @notice Only Synthereum manager contract can call this function\\n   * @return timestamp Timestamp of emergency shutdown transaction\\n   * @return price Price of the pair at the moment of shutdown execution\\n   */\\n  function emergencyShutdown()\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 timestamp, uint256 price)\\n  {\\n    (timestamp, price) = poolStorage.emergencyShutdown(\\n      lpPosition,\\n      feeStatus,\\n      emergencyShutdownData\\n    );\\n  }\\n\\n  /**\\n   * @notice Redeem tokens after emergency shutdown\\n   * @return synthTokensSettled Amount of synthetic tokens liquidated\\n   * @return collateralSettled Amount of collateral withdrawn after emergency shutdown\\n   */\\n  function settleEmergencyShutdown()\\n    external\\n    override\\n    isEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 synthTokensSettled, uint256 collateralSettled)\\n  {\\n    address msgSender = _msgSender();\\n    bool isLiquidityProvider = hasRole(LIQUIDITY_PROVIDER_ROLE, msgSender);\\n    (synthTokensSettled, collateralSettled) = poolStorage\\n      .settleEmergencyShutdown(\\n      lpPosition,\\n      feeStatus,\\n      emergencyShutdownData,\\n      isLiquidityProvider,\\n      msgSender\\n    );\\n  }\\n\\n  /**\\n   * @notice Update the fee percentage, recipients and recipient proportions\\n   * @notice Only the maintainer can call this function\\n   * @param _feeData Fee info (percentage + recipients + weigths)\\n   */\\n  function setFee(ISynthereumLiquidityPoolStorage.FeeData calldata _feeData)\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n  {\\n    poolStorage.setFeePercentage(_feeData.feePercentage);\\n    poolStorage.setFeeRecipients(\\n      _feeData.feeRecipients,\\n      _feeData.feeProportions\\n    );\\n  }\\n\\n  /**\\n   * @notice Update the fee percentage\\n   * @notice Only the maintainer can call this function\\n   * @param _feePercentage The new fee percentage\\n   */\\n  function setFeePercentage(uint256 _feePercentage)\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n  {\\n    poolStorage.setFeePercentage(FixedPoint.Unsigned(_feePercentage));\\n  }\\n\\n  /**\\n   * @notice Update the addresses of recipients for generated fees and proportions of fees each address will receive\\n   * @notice Only the maintainer can call this function\\n   * @param feeRecipients An array of the addresses of recipients that will receive generated fees\\n   * @param feeProportions An array of the proportions of fees generated each recipient will receive\\n   */\\n  function setFeeRecipients(\\n    address[] calldata feeRecipients,\\n    uint32[] calldata feeProportions\\n  ) external override onlyMaintainer nonReentrant {\\n    poolStorage.setFeeRecipients(feeRecipients, feeProportions);\\n  }\\n\\n  /**\\n   * @notice Update the overcollateralization percentage\\n   * @notice Only the maintainer can call this function\\n   * @param _overCollateralization Overcollateralization percentage\\n   */\\n  function setOverCollateralization(uint256 _overCollateralization)\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n  {\\n    poolStorage.setOverCollateralization(\\n      liquidationData,\\n      FixedPoint.Unsigned(_overCollateralization)\\n    );\\n  }\\n\\n  /**\\n   * @notice Update the liquidation reward percentage\\n   * @notice Only the maintainer can call this function\\n   * @param _liquidationReward Percentage of reward for correct liquidation by a liquidator\\n   */\\n  function setLiquidationReward(uint256 _liquidationReward)\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n  {\\n    liquidationData.setLiquidationReward(\\n      FixedPoint.Unsigned(_liquidationReward)\\n    );\\n  }\\n\\n  //----------------------------------------\\n  // External view functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Get Synthereum finder of the pool\\n   * @return finder Returns finder contract\\n   */\\n  function synthereumFinder()\\n    external\\n    view\\n    override\\n    returns (ISynthereumFinder finder)\\n  {\\n    finder = poolStorage.finder;\\n  }\\n\\n  /**\\n   * @notice Get Synthereum version\\n   * @return poolVersion Returns the version of the Synthereum pool\\n   */\\n  function version() external view override returns (uint8 poolVersion) {\\n    poolVersion = poolStorage.version;\\n  }\\n\\n  /**\\n   * @notice Get the collateral token\\n   * @return collateralCurrency The ERC20 collateral token\\n   */\\n  function collateralToken()\\n    external\\n    view\\n    override\\n    returns (IERC20 collateralCurrency)\\n  {\\n    collateralCurrency = poolStorage.collateralToken;\\n  }\\n\\n  /**\\n   * @notice Get the synthetic token associated to this pool\\n   * @return syntheticCurrency The ERC20 synthetic token\\n   */\\n  function syntheticToken()\\n    external\\n    view\\n    override\\n    returns (IERC20 syntheticCurrency)\\n  {\\n    syntheticCurrency = poolStorage.syntheticToken;\\n  }\\n\\n  /**\\n   * @notice Get the synthetic token symbol associated to this pool\\n   * @return symbol The ERC20 synthetic token symbol\\n   */\\n  function syntheticTokenSymbol()\\n    external\\n    view\\n    override\\n    returns (string memory symbol)\\n  {\\n    symbol = IStandardERC20(address(poolStorage.syntheticToken)).symbol();\\n  }\\n\\n  /**\\n   * @notice Returns price identifier of the pool\\n   * @return identifier Price identifier\\n   */\\n  function getPriceFeedIdentifier()\\n    external\\n    view\\n    override\\n    returns (bytes32 identifier)\\n  {\\n    identifier = poolStorage.priceIdentifier;\\n  }\\n\\n  /**\\n   * @notice Return overcollateralization percentage from the storage\\n   * @return Overcollateralization percentage\\n   */\\n  function overCollateralization() external view override returns (uint256) {\\n    return poolStorage.overCollateralization.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns fee percentage set by the maintainer\\n   * @return Fee percentage\\n   */\\n  function feePercentage() external view override returns (uint256) {\\n    return poolStorage.fee.feeData.feePercentage.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns fee recipients info\\n   * @return Addresses, weigths and total of weigths\\n   */\\n  function feeRecipientsInfo()\\n    external\\n    view\\n    override\\n    returns (\\n      address[] memory,\\n      uint32[] memory,\\n      uint256\\n    )\\n  {\\n    FeeData storage _feeData = poolStorage.fee.feeData;\\n    return (\\n      _feeData.feeRecipients,\\n      _feeData.feeProportions,\\n      poolStorage.fee.totalFeeProportions\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns total number of synthetic tokens generated by this pool\\n   * @return Number of synthetic tokens\\n   */\\n  function totalSyntheticTokens() external view override returns (uint256) {\\n    return lpPosition.tokensCollateralized.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of collateral used for collateralizing tokens (users + LP)\\n   * @return Total collateral amount\\n   */\\n  function totalCollateralAmount() external view override returns (uint256) {\\n    return lpPosition.totalCollateralAmount.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of liquidity deposited in the pool, but nut used as collateral\\n   * @return Total available liquidity\\n   */\\n  function totalAvailableLiquidity() external view override returns (uint256) {\\n    return poolStorage.totalAvailableLiquidity(lpPosition, feeStatus);\\n  }\\n\\n  /**\\n   * @notice Returns the total amount of fees to be withdrawn\\n   * @return Total fee amount\\n   */\\n  function totalFeeAmount() external view override returns (uint256) {\\n    return feeStatus.totalFeeAmount.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns the user's fee to be withdrawn\\n   * @param user User's address\\n   * @return User's fee\\n   */\\n  function userFee(address user) external view override returns (uint256) {\\n    return feeStatus.feeGained[user].rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns the percentage of overcollateralization to which a liquidation can triggered\\n   * @return Percentage of overcollateralization\\n   */\\n  function collateralRequirement() external view override returns (uint256) {\\n    return liquidationData.collateralRequirement.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns the percentage of reward for correct liquidation by a liquidator\\n   * @return Percentage of reward\\n   */\\n  function liquidationReward() external view override returns (uint256) {\\n    return liquidationData.liquidationReward.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns the price of the pair at the moment of the shutdown\\n   * @return Price of the pair\\n   */\\n  function emergencyShutdownPrice() external view override returns (uint256) {\\n    return emergencyShutdownData.price.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns the timestamp (unix time) at the moment of the shutdown\\n   * @return Timestamp\\n   */\\n  function emergencyShutdownTimestamp()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return emergencyShutdownData.timestamp;\\n  }\\n\\n  /**\\n   * @notice Returns if position is overcollateralized and thepercentage of coverage of the collateral according to the last price\\n   * @return True if position is overcollaterlized, otherwise false + percentage of coverage (totalCollateralAmount / (price * tokensCollateralized))\\n   */\\n  function collateralCoverage() external view override returns (bool, uint256) {\\n    return poolStorage.collateralCoverage(lpPosition, liquidationData);\\n  }\\n\\n  /**\\n   * @notice Returns the synthetic tokens will be received and fees will be paid in exchange for an input collateral amount\\n   * @notice This function is only trading-informative, it doesn't check liquidity and collateralization conditions\\n   * @param inputCollateral Input collateral amount to be exchanged\\n   * @return synthTokensReceived Synthetic tokens will be minted\\n   * @return feePaid Collateral fee will be paid\\n   */\\n  function getMintTradeInfo(uint256 inputCollateral)\\n    external\\n    view\\n    override\\n    returns (uint256 synthTokensReceived, uint256 feePaid)\\n  {\\n    (synthTokensReceived, feePaid) = poolStorage.getMintTradeInfo(\\n      lpPosition,\\n      feeStatus,\\n      FixedPoint.Unsigned(inputCollateral)\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the collateral amount will be received and fees will be paid in exchange for an input amount of synthetic tokens\\n   * @notice This function is only trading-informative, it doesn't check liquidity and collateralization conditions\\n   * @param  syntheticTokens Amount of synthetic tokens to be exchanged\\n   * @return collateralAmountReceived Collateral amount will be received by the user\\n   * @return feePaid Collateral fee will be paid\\n   */\\n  function getRedeemTradeInfo(uint256 syntheticTokens)\\n    external\\n    view\\n    override\\n    returns (uint256 collateralAmountReceived, uint256 feePaid)\\n  {\\n    (collateralAmountReceived, feePaid) = poolStorage.getRedeemTradeInfo(\\n      lpPosition,\\n      FixedPoint.Unsigned(syntheticTokens)\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns the destination synthetic tokens amount will be received and fees will be paid in exchange for an input amount of synthetic tokens\\n   * @notice This function is only trading-informative, it doesn't check liquidity and collateralization conditions\\n   * @param  syntheticTokens Amount of synthetic tokens to be exchanged\\n   * @param  destinationPool Pool in which mint the destination synthetic token\\n   * @return destSyntheticTokensReceived Synthetic tokens will be received from destination pool\\n   * @return feePaid Collateral fee will be paid\\n   */\\n  function getExchangeTradeInfo(\\n    uint256 syntheticTokens,\\n    ISynthereumLiquidityPoolGeneral destinationPool\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 destSyntheticTokensReceived, uint256 feePaid)\\n  {\\n    (destSyntheticTokensReceived, feePaid) = poolStorage.getExchangeTradeInfo(\\n      lpPosition,\\n      FixedPoint.Unsigned(syntheticTokens),\\n      destinationPool\\n    );\\n  }\\n\\n  /**\\n   * @notice Check if an address is the trusted forwarder\\n   * @param  forwarder Address to check\\n   * @return True is the input address is the trusted forwarder, otherwise false\\n   */\\n  function isTrustedForwarder(address forwarder)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    try\\n      poolStorage.finder.getImplementationAddress(\\n        SynthereumInterfaces.TrustedForwarder\\n      )\\n    returns (address trustedForwarder) {\\n      if (forwarder == trustedForwarder) {\\n        return true;\\n      } else {\\n        return false;\\n      }\\n    } catch {\\n      return false;\\n    }\\n  }\\n\\n  function _msgSender()\\n    internal\\n    view\\n    override(ERC2771Context, Context)\\n    returns (address sender)\\n  {\\n    return ERC2771Context._msgSender();\\n  }\\n\\n  function _msgData()\\n    internal\\n    view\\n    override(ERC2771Context, Context)\\n    returns (bytes calldata)\\n  {\\n    return ERC2771Context._msgData();\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/synthereum-pool/v5/LiquidityPoolLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  ISynthereumLiquidityPoolStorage\\n} from './interfaces/ILiquidityPoolStorage.sol';\\nimport {ISynthereumLiquidityPool} from './interfaces/ILiquidityPool.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  ISynthereumRegistry\\n} from '../../core/registries/interfaces/IRegistry.sol';\\nimport {\\n  ISynthereumPriceFeed\\n} from '../../oracle/common/interfaces/IPriceFeed.sol';\\nimport {\\n  ISynthereumLiquidityPoolGeneral\\n} from './interfaces/ILiquidityPoolGeneral.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {\\n  SafeERC20\\n} from '../../../@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/**\\n * @notice Pool implementation is stored here to reduce deployment costs\\n */\\n\\nlibrary SynthereumLiquidityPoolLib {\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using FixedPoint for uint256;\\n  using SafeERC20 for IStandardERC20;\\n  using SafeERC20 for IMintableBurnableERC20;\\n  using SynthereumLiquidityPoolLib for ISynthereumLiquidityPoolStorage.Storage;\\n  using SynthereumLiquidityPoolLib for ISynthereumLiquidityPoolStorage.LPPosition;\\n  using SynthereumLiquidityPoolLib for ISynthereumLiquidityPoolStorage.FeeStatus;\\n\\n  struct ExecuteMintParams {\\n    // Amount of synth tokens to mint\\n    FixedPoint.Unsigned numTokens;\\n    // Amount of collateral (excluding fees) needed for mint\\n    FixedPoint.Unsigned collateralAmount;\\n    // Amount of fees of collateral user must pay\\n    FixedPoint.Unsigned feeAmount;\\n    // Amount of collateral equal to collateral minted + fees\\n    FixedPoint.Unsigned totCollateralAmount;\\n    // Recipient address that will receive synthetic tokens\\n    address recipient;\\n    // Sender of the mint transaction\\n    address sender;\\n  }\\n\\n  struct ExecuteRedeemParams {\\n    //Amount of synth tokens needed for redeem\\n    FixedPoint.Unsigned numTokens;\\n    // Amount of collateral that user will receive\\n    FixedPoint.Unsigned collateralAmount;\\n    // Amount of fees of collateral user must pay\\n    FixedPoint.Unsigned feeAmount;\\n    // Amount of collateral equal to collateral redeemed + fees\\n    FixedPoint.Unsigned totCollateralAmount;\\n    // Recipient address that will receive synthetic tokens\\n    address recipient;\\n    // Sender of the redeem transaction\\n    address sender;\\n  }\\n\\n  struct ExecuteExchangeParams {\\n    // Destination pool in which mint new tokens\\n    ISynthereumLiquidityPoolGeneral destPool;\\n    // Amount of tokens to send\\n    FixedPoint.Unsigned numTokens;\\n    // Amount of collateral (excluding fees) equivalent to synthetic token (exluding fees) to send\\n    FixedPoint.Unsigned collateralAmount;\\n    // Amount of fees of collateral user must pay\\n    FixedPoint.Unsigned feeAmount;\\n    // Amount of collateral equal to collateral redemeed + fees\\n    FixedPoint.Unsigned totCollateralAmount;\\n    // Amount of synthetic token to receive\\n    FixedPoint.Unsigned destNumTokens;\\n    // Recipient address that will receive synthetic tokens\\n    address recipient;\\n    // Sender of the exchange transaction\\n    address sender;\\n  }\\n\\n  struct ExecuteSettlement {\\n    // Price of emergency shutdown\\n    FixedPoint.Unsigned emergencyPrice;\\n    // Amount of synthtic tokens to be liquidated\\n    FixedPoint.Unsigned userNumTokens;\\n    // Total amount of collateral (excluding unused and fees) deposited\\n    FixedPoint.Unsigned totalCollateralAmount;\\n    // Total amount of synthetic tokens\\n    FixedPoint.Unsigned tokensCollaterlized;\\n    // Total actual amount of fees to be withdrawn\\n    FixedPoint.Unsigned totalFeeAmount;\\n    // Overcollateral to be withdrawn by Lp (0 if standard user)\\n    FixedPoint.Unsigned overCollateral;\\n    // Amount of collateral which value is equal to the synthetic tokens value according to the emergency price\\n    FixedPoint.Unsigned totalRedeemableCollateral;\\n    // Exepected amount of collateral\\n    FixedPoint.Unsigned redeemableCollateral;\\n    // Collateral deposited but not used to collateralize\\n    FixedPoint.Unsigned unusedCollateral;\\n    // Amount of collateral settled to the sender\\n    FixedPoint.Unsigned transferableCollateral;\\n  }\\n\\n  struct ExecuteLiquidation {\\n    // Total amount of collateral in the Lp position\\n    FixedPoint.Unsigned totalCollateralAmount;\\n    // Total number of tokens collateralized in the Lp position\\n    FixedPoint.Unsigned tokensCollateralized;\\n    // Total number of tokens in liquidation\\n    FixedPoint.Unsigned tokensInLiquidation;\\n    // Amount of collateral used to collateralize user's tokens\\n    FixedPoint.Unsigned userCollateralization;\\n    // Available liquidity in the pool\\n    FixedPoint.Unsigned unusedCollateral;\\n    // Expected collateral received by the user according to the actual price\\n    FixedPoint.Unsigned expectedCollateral;\\n    // Collateral amount receieved by the user\\n    FixedPoint.Unsigned settledCollateral;\\n    // Reward amount received by the user\\n    FixedPoint.Unsigned rewardAmount;\\n    // Price rate at the moment of the liquidation\\n    FixedPoint.Unsigned priceRate;\\n  }\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event Mint(\\n    address indexed account,\\n    uint256 collateralSent,\\n    uint256 numTokensReceived,\\n    uint256 feePaid,\\n    address recipient\\n  );\\n\\n  event Redeem(\\n    address indexed account,\\n    uint256 numTokensSent,\\n    uint256 collateralReceived,\\n    uint256 feePaid,\\n    address recipient\\n  );\\n\\n  event Exchange(\\n    address indexed account,\\n    address indexed destPool,\\n    uint256 numTokensSent,\\n    uint256 destNumTokensReceived,\\n    uint256 feePaid,\\n    address recipient\\n  );\\n\\n  event WithdrawLiquidity(\\n    address indexed lp,\\n    uint256 liquidityWithdrawn,\\n    uint256 remainingLiquidity\\n  );\\n\\n  event IncreaseCollateral(\\n    address indexed lp,\\n    uint256 collateralAdded,\\n    uint256 newTotalCollateral\\n  );\\n\\n  event DecreaseCollateral(\\n    address indexed lp,\\n    uint256 collateralRemoved,\\n    uint256 newTotalCollateral\\n  );\\n\\n  event ClaimFee(\\n    address indexed claimer,\\n    uint256 feeAmount,\\n    uint256 totalRemainingFees\\n  );\\n\\n  event Liquidate(\\n    address indexed liquidator,\\n    uint256 tokensLiquidated,\\n    uint256 price,\\n    uint256 collateralExpected,\\n    uint256 collateralReceived,\\n    uint256 rewardReceived\\n  );\\n\\n  event EmergencyShutdown(\\n    uint256 timestamp,\\n    uint256 price,\\n    uint256 finalCollateral\\n  );\\n\\n  event Settle(\\n    address indexed account,\\n    uint256 numTokensSettled,\\n    uint256 collateralExpected,\\n    uint256 collateralSettled\\n  );\\n\\n  event SetFeePercentage(uint256 feePercentage);\\n\\n  event SetFeeRecipients(address[] feeRecipients, uint32[] feeProportions);\\n\\n  event SetOverCollateralization(uint256 overCollateralization);\\n\\n  event SetLiquidationReward(uint256 liquidationReward);\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Initializes a liquidity pool\\n   * @param self Data type the library is attached to\\n   * @param liquidationData Liquidation info (see LiquidationData struct)\\n   * @param _finder The Synthereum finder\\n   * @param _version Synthereum version\\n   * @param _collateralToken ERC20 collateral token\\n   * @param _syntheticToken ERC20 synthetic token\\n   * @param _overCollateralization Over-collateralization ratio\\n   * @param _priceIdentifier Identifier of price to be used in the price feed\\n   * @param _collateralRequirement Percentage of overcollateralization to which a liquidation can triggered\\n   * @param _liquidationReward Percentage of reward for correct liquidation by a liquidator\\n   */\\n  function initialize(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.Liquidation storage liquidationData,\\n    ISynthereumFinder _finder,\\n    uint8 _version,\\n    IStandardERC20 _collateralToken,\\n    IMintableBurnableERC20 _syntheticToken,\\n    FixedPoint.Unsigned calldata _overCollateralization,\\n    bytes32 _priceIdentifier,\\n    FixedPoint.Unsigned calldata _collateralRequirement,\\n    FixedPoint.Unsigned calldata _liquidationReward\\n  ) external {\\n    require(\\n      _collateralRequirement.isGreaterThan(1),\\n      'Collateral requirement must be bigger than 100%'\\n    );\\n\\n    require(\\n      _overCollateralization.isGreaterThan(_collateralRequirement.sub(1)),\\n      'Overcollateralization must be bigger than the Lp part of the collateral requirement'\\n    );\\n\\n    require(\\n      _liquidationReward.rawValue > 0 &&\\n        _liquidationReward.isLessThanOrEqual(1),\\n      'Liquidation reward must be between 0 and 100%'\\n    );\\n\\n    require(\\n      _collateralToken.decimals() <= 18,\\n      'Collateral has more than 18 decimals'\\n    );\\n\\n    require(\\n      _syntheticToken.decimals() == 18,\\n      'Synthetic token has more or less than 18 decimals'\\n    );\\n\\n    ISynthereumPriceFeed priceFeed =\\n      ISynthereumPriceFeed(\\n        _finder.getImplementationAddress(SynthereumInterfaces.PriceFeed)\\n      );\\n\\n    require(\\n      priceFeed.isPriceSupported(_priceIdentifier),\\n      'Price identifier not supported'\\n    );\\n\\n    self.finder = _finder;\\n    self.version = _version;\\n    self.collateralToken = _collateralToken;\\n    self.syntheticToken = _syntheticToken;\\n    self.overCollateralization = _overCollateralization;\\n    self.priceIdentifier = _priceIdentifier;\\n    liquidationData.collateralRequirement = _collateralRequirement;\\n    liquidationData.liquidationReward = _liquidationReward;\\n  }\\n\\n  /**\\n   * @notice Mint synthetic tokens using fixed amount of collateral\\n   * @notice This calculate the price using on chain price feed\\n   * @notice User must approve collateral transfer for the mint request to succeed\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param mintParams Input parameters for minting (see MintParams struct)\\n   * @param sender Sender of the mint transaction\\n   * @return syntheticTokensMinted Amount of synthetic tokens minted by a user\\n   * @return feePaid Amount of collateral paid by the user as fee\\n   */\\n  function mint(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    ISynthereumLiquidityPool.MintParams calldata mintParams,\\n    address sender\\n  ) external returns (uint256 syntheticTokensMinted, uint256 feePaid) {\\n    FixedPoint.Unsigned memory totCollateralAmount =\\n      FixedPoint.Unsigned(mintParams.collateralAmount);\\n\\n    (\\n      FixedPoint.Unsigned memory collateralAmount,\\n      FixedPoint.Unsigned memory feeAmount,\\n      FixedPoint.Unsigned memory numTokens\\n    ) = self.mintCalculation(totCollateralAmount);\\n\\n    require(\\n      numTokens.rawValue >= mintParams.minNumTokens,\\n      'Number of tokens less than minimum limit'\\n    );\\n\\n    checkExpiration(mintParams.expiration);\\n\\n    self.executeMint(\\n      lpPosition,\\n      feeStatus,\\n      ExecuteMintParams(\\n        numTokens,\\n        collateralAmount,\\n        feeAmount,\\n        totCollateralAmount,\\n        mintParams.recipient,\\n        sender\\n      )\\n    );\\n\\n    syntheticTokensMinted = numTokens.rawValue;\\n    feePaid = feeAmount.rawValue;\\n  }\\n\\n  /**\\n   * @notice Redeem amount of collateral using fixed number of synthetic token\\n   * @notice This calculate the price using on chain price feed\\n   * @notice User must approve synthetic token transfer for the redeem request to succeed\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param redeemParams Input parameters for redeeming (see RedeemParams struct)\\n   * @param sender Sender of the redeem transaction\\n   * @return collateralRedeemed Amount of collateral redeem by user\\n   * @return feePaid Amount of collateral paid by user as fee\\n   */\\n  function redeem(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    ISynthereumLiquidityPool.RedeemParams calldata redeemParams,\\n    address sender\\n  ) external returns (uint256 collateralRedeemed, uint256 feePaid) {\\n    FixedPoint.Unsigned memory numTokens =\\n      FixedPoint.Unsigned(redeemParams.numTokens);\\n\\n    (\\n      FixedPoint.Unsigned memory totCollateralAmount,\\n      FixedPoint.Unsigned memory feeAmount,\\n      FixedPoint.Unsigned memory collateralAmount\\n    ) = self.redeemCalculation(numTokens);\\n\\n    require(\\n      collateralAmount.rawValue >= redeemParams.minCollateral,\\n      'Collateral amount less than minimum limit'\\n    );\\n\\n    checkExpiration(redeemParams.expiration);\\n\\n    self.executeRedeem(\\n      lpPosition,\\n      feeStatus,\\n      ExecuteRedeemParams(\\n        numTokens,\\n        collateralAmount,\\n        feeAmount,\\n        totCollateralAmount,\\n        redeemParams.recipient,\\n        sender\\n      )\\n    );\\n\\n    feePaid = feeAmount.rawValue;\\n    collateralRedeemed = collateralAmount.rawValue;\\n  }\\n\\n  /**\\n   * @notice Exchange a fixed amount of synthetic token of this pool, with an amount of synthetic tokens of an another pool\\n   * @notice This calculate the price using on chain price feed\\n   * @notice User must approve synthetic token transfer for the redeem request to succeed\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param exchangeParams Input parameters for exchanging (see ExchangeParams struct)\\n   * @param sender Sender of the exchange transaction\\n   * @return destNumTokensMinted Amount of synthetic token minted in the destination pool\\n   * @return feePaid Amount of collateral paid by user as fee\\n   */\\n  function exchange(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    ISynthereumLiquidityPool.ExchangeParams calldata exchangeParams,\\n    address sender\\n  ) external returns (uint256 destNumTokensMinted, uint256 feePaid) {\\n    FixedPoint.Unsigned memory numTokens =\\n      FixedPoint.Unsigned(exchangeParams.numTokens);\\n\\n    (\\n      FixedPoint.Unsigned memory totCollateralAmount,\\n      FixedPoint.Unsigned memory feeAmount,\\n      FixedPoint.Unsigned memory collateralAmount,\\n      FixedPoint.Unsigned memory destNumTokens\\n    ) = self.exchangeCalculation(numTokens, exchangeParams.destPool);\\n\\n    require(\\n      destNumTokens.rawValue >= exchangeParams.minDestNumTokens,\\n      'Number of destination tokens less than minimum limit'\\n    );\\n\\n    checkExpiration(exchangeParams.expiration);\\n\\n    self.executeExchange(\\n      lpPosition,\\n      feeStatus,\\n      ExecuteExchangeParams(\\n        exchangeParams.destPool,\\n        numTokens,\\n        collateralAmount,\\n        feeAmount,\\n        totCollateralAmount,\\n        destNumTokens,\\n        exchangeParams.recipient,\\n        sender\\n      )\\n    );\\n\\n    destNumTokensMinted = destNumTokens.rawValue;\\n    feePaid = feeAmount.rawValue;\\n  }\\n\\n  /**\\n   * @notice Called by a source Pool's `exchange` function to mint destination tokens\\n   * @notice This functon can be called only by a pool registered in the deployer\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param collateralAmount The amount of collateral to use from the source Pool\\n   * @param numTokens The number of new tokens to mint\\n   * @param recipient Recipient to which send synthetic token minted\\n   */\\n  function exchangeMint(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    FixedPoint.Unsigned calldata collateralAmount,\\n    FixedPoint.Unsigned calldata numTokens,\\n    address recipient\\n  ) external {\\n    self.checkPool(ISynthereumLiquidityPoolGeneral(msg.sender));\\n\\n    // Sending amount must be different from 0\\n    require(\\n      collateralAmount.rawValue > 0,\\n      'Sending collateral amount is equal to 0'\\n    );\\n\\n    // Collateral available\\n    FixedPoint.Unsigned memory unusedCollateral =\\n      self.calculateUnusedCollateral(\\n        lpPosition.totalCollateralAmount,\\n        feeStatus.totalFeeAmount,\\n        collateralAmount\\n      );\\n\\n    // Update LP's collateralization status\\n    FixedPoint.Unsigned memory overCollateral =\\n      lpPosition.updateLpPositionInMint(\\n        self.overCollateralization,\\n        collateralAmount,\\n        numTokens\\n      );\\n\\n    //Check there is enough liquidity in the pool for overcollateralization\\n    require(\\n      unusedCollateral.isGreaterThanOrEqual(overCollateral),\\n      'No enough liquidity for cover mint operation'\\n    );\\n\\n    // Mint synthetic asset and transfer to the recipient\\n    self.syntheticToken.mint(recipient, numTokens.rawValue);\\n  }\\n\\n  /**\\n   * @notice Withdraw unused deposited collateral by the LP\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param collateralAmount Collateral to be withdrawn\\n   * @param sender Sender of the withdrawLiquidity transaction\\n   * @return remainingLiquidity Remaining unused collateral in the pool\\n   */\\n  function withdrawLiquidity(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    FixedPoint.Unsigned calldata collateralAmount,\\n    address sender\\n  ) external returns (uint256 remainingLiquidity) {\\n    remainingLiquidity = self._withdrawLiquidity(\\n      lpPosition,\\n      feeStatus,\\n      collateralAmount,\\n      sender\\n    );\\n  }\\n\\n  /**\\n   * @notice Increase collaterallization of Lp position\\n   * @notice Only a sender with LP role can call this function\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param collateralToTransfer Collateral to be transferred before increase collateral in the position\\n   * @param collateralToIncrease Collateral to be added to the position\\n   * @param sender Sender of the increaseCollateral transaction\\n   * @return newTotalCollateral New total collateral amount\\n   */\\n  function increaseCollateral(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    FixedPoint.Unsigned calldata collateralToTransfer,\\n    FixedPoint.Unsigned calldata collateralToIncrease,\\n    address sender\\n  ) external returns (uint256 newTotalCollateral) {\\n    // Check the collateral to be increased is not 0\\n    require(collateralToIncrease.rawValue > 0, 'No collateral to be increased');\\n\\n    // Deposit collateral in the pool\\n    if (collateralToTransfer.rawValue > 0) {\\n      self.pullCollateral(sender, collateralToTransfer);\\n    }\\n\\n    // Collateral available\\n    FixedPoint.Unsigned memory unusedCollateral =\\n      self.calculateUnusedCollateral(\\n        lpPosition.totalCollateralAmount,\\n        feeStatus.totalFeeAmount,\\n        FixedPoint.Unsigned(0)\\n      );\\n\\n    // Check that there is enoush availabe collateral deposited in the pool\\n    require(\\n      unusedCollateral.isGreaterThanOrEqual(collateralToIncrease),\\n      'No enough liquidity for increasing collateral'\\n    );\\n\\n    // Update new total collateral amount\\n    FixedPoint.Unsigned memory _newTotalCollateral =\\n      lpPosition.totalCollateralAmount.add(collateralToIncrease);\\n\\n    lpPosition.totalCollateralAmount = _newTotalCollateral;\\n\\n    newTotalCollateral = _newTotalCollateral.rawValue;\\n\\n    emit IncreaseCollateral(\\n      sender,\\n      collateralToIncrease.rawValue,\\n      newTotalCollateral\\n    );\\n  }\\n\\n  /**\\n   * @notice Decrease collaterallization of Lp position\\n   * @notice Check that final position is not undercollateralized\\n   * @notice Only a sender with LP role can call this function\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param liquidationData Liquidation info (see LiquidationData struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param collateralToDecrease Collateral to decreased from the position\\n   * @param collateralToWithdraw Collateral to be transferred to the LP\\n   * @param sender Sender of the decreaseCollateral transaction\\n   * @return newTotalCollateral New total collateral amount\\n   */\\n  function decreaseCollateral(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.Liquidation storage liquidationData,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    FixedPoint.Unsigned calldata collateralToDecrease,\\n    FixedPoint.Unsigned calldata collateralToWithdraw,\\n    address sender\\n  ) external returns (uint256 newTotalCollateral) {\\n    // Check that collateral to be decreased is not 0\\n    require(collateralToDecrease.rawValue > 0, 'No collateral to be decreased');\\n\\n    // Resulting total collateral amount\\n    FixedPoint.Unsigned memory _newTotalCollateral =\\n      lpPosition.totalCollateralAmount.sub(collateralToDecrease);\\n\\n    // Check that position doesn't become undercollateralized\\n    (bool _isOverCollateralized, , ) =\\n      lpPosition.isOverCollateralized(\\n        liquidationData,\\n        getPriceFeedRate(self.finder, self.priceIdentifier),\\n        getCollateralDecimals(self.collateralToken),\\n        _newTotalCollateral\\n      );\\n\\n    require(_isOverCollateralized, 'Position undercollateralized');\\n\\n    // Update new total collateral amount\\n    lpPosition.totalCollateralAmount = _newTotalCollateral;\\n\\n    newTotalCollateral = _newTotalCollateral.rawValue;\\n\\n    emit DecreaseCollateral(\\n      sender,\\n      collateralToDecrease.rawValue,\\n      newTotalCollateral\\n    );\\n\\n    if (collateralToWithdraw.rawValue > 0) {\\n      self._withdrawLiquidity(\\n        lpPosition,\\n        feeStatus,\\n        collateralToWithdraw,\\n        sender\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Withdraw fees gained by the sender\\n   * @param self Data type the library is attached to\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param sender Sender of the claimFee transaction\\n   * @return feeClaimed Amount of fee claimed\\n   */\\n  function claimFee(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    address sender\\n  ) external returns (uint256 feeClaimed) {\\n    // Fee to claim\\n    FixedPoint.Unsigned memory _feeClaimed = feeStatus.feeGained[sender];\\n    feeClaimed = _feeClaimed.rawValue;\\n\\n    // Check that fee is available\\n    require(feeClaimed > 0, 'No fee to claim');\\n\\n    // Update fee status\\n    delete feeStatus.feeGained[sender];\\n\\n    FixedPoint.Unsigned memory _totalRemainingFees =\\n      feeStatus.totalFeeAmount.sub(_feeClaimed);\\n\\n    feeStatus.totalFeeAmount = _totalRemainingFees;\\n\\n    // Transfer amount to the sender\\n    self.collateralToken.safeTransfer(sender, feeClaimed);\\n\\n    emit ClaimFee(sender, feeClaimed, _totalRemainingFees.rawValue);\\n  }\\n\\n  /**\\n   * @notice Liquidate Lp position for an amount of synthetic tokens undercollateralized\\n   * @notice Revert if position is not undercollateralized\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param liquidationData Liquidation info (see LiquidationData struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param numSynthTokens Number of synthetic tokens that user wants to liquidate\\n   * @param sender Sender of the liquidation transaction\\n   * @return synthTokensLiquidated Amount of synthetic tokens liquidated\\n   * @return collateralReceived Amount of received collateral equal to the value of tokens liquidated\\n   * @return rewardAmount Amount of received collateral as reward for the liquidation\\n   */\\n  function liquidate(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.Liquidation storage liquidationData,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    FixedPoint.Unsigned calldata numSynthTokens,\\n    address sender\\n  )\\n    external\\n    returns (\\n      uint256 synthTokensLiquidated,\\n      uint256 collateralReceived,\\n      uint256 rewardAmount\\n    )\\n  {\\n    // Memory struct for saving local varibales\\n    ExecuteLiquidation memory executeLiquidation;\\n\\n    executeLiquidation.totalCollateralAmount = lpPosition.totalCollateralAmount;\\n\\n    executeLiquidation.priceRate = getPriceFeedRate(\\n      self.finder,\\n      self.priceIdentifier\\n    );\\n\\n    uint8 collateralDecimals = getCollateralDecimals(self.collateralToken);\\n\\n    // Collateral value of the synthetic token passed\\n    {\\n      (bool _isOverCollaterlized, , ) =\\n        lpPosition.isOverCollateralized(\\n          liquidationData,\\n          executeLiquidation.priceRate,\\n          collateralDecimals,\\n          executeLiquidation.totalCollateralAmount\\n        );\\n\\n      // Revert if position is not undercollataralized\\n      require(!_isOverCollaterlized, 'Position is overcollateralized');\\n    }\\n\\n    IStandardERC20 _collateralToken = self.collateralToken;\\n\\n    executeLiquidation.tokensCollateralized = lpPosition.tokensCollateralized;\\n\\n    executeLiquidation.tokensInLiquidation = FixedPoint.min(\\n      numSynthTokens,\\n      executeLiquidation.tokensCollateralized\\n    );\\n\\n    executeLiquidation.expectedCollateral = calculateCollateralAmount(\\n      executeLiquidation.priceRate,\\n      collateralDecimals,\\n      executeLiquidation.tokensInLiquidation\\n    );\\n\\n    executeLiquidation.userCollateralization = executeLiquidation\\n      .tokensInLiquidation\\n      .div(executeLiquidation.tokensCollateralized)\\n      .mul(executeLiquidation.totalCollateralAmount);\\n\\n    if (\\n      executeLiquidation.userCollateralization.isGreaterThanOrEqual(\\n        executeLiquidation.expectedCollateral\\n      )\\n    ) {\\n      executeLiquidation.settledCollateral = executeLiquidation\\n        .expectedCollateral;\\n      executeLiquidation.rewardAmount = executeLiquidation\\n        .userCollateralization\\n        .sub(executeLiquidation.expectedCollateral)\\n        .mul(liquidationData.liquidationReward);\\n\\n      // Update Lp position\\n      lpPosition.totalCollateralAmount = executeLiquidation\\n        .totalCollateralAmount\\n        .sub(executeLiquidation.settledCollateral)\\n        .sub(executeLiquidation.rewardAmount);\\n    } else {\\n      executeLiquidation.unusedCollateral = self.calculateUnusedCollateral(\\n        executeLiquidation.totalCollateralAmount,\\n        feeStatus.totalFeeAmount,\\n        FixedPoint.Unsigned(0)\\n      );\\n      executeLiquidation.settledCollateral = FixedPoint.min(\\n        executeLiquidation.expectedCollateral,\\n        executeLiquidation.userCollateralization.add(\\n          executeLiquidation.unusedCollateral\\n        )\\n      );\\n\\n      // Update Lp position untill max 105% coverage using available liquidity\\n      lpPosition.totalCollateralAmount = FixedPoint.min(\\n        executeLiquidation\\n          .totalCollateralAmount\\n          .add(executeLiquidation.unusedCollateral)\\n          .sub(executeLiquidation.settledCollateral),\\n        calculateCollateralAmount(\\n          executeLiquidation\\n            .priceRate,\\n          collateralDecimals,\\n          executeLiquidation.tokensCollateralized.sub(\\n            executeLiquidation.tokensInLiquidation\\n          )\\n        )\\n          .mul(liquidationData.collateralRequirement)\\n      );\\n    }\\n\\n    lpPosition.tokensCollateralized = executeLiquidation\\n      .tokensCollateralized\\n      .sub(executeLiquidation.tokensInLiquidation);\\n\\n    collateralReceived = executeLiquidation.settledCollateral.rawValue;\\n\\n    rewardAmount = executeLiquidation.rewardAmount.rawValue;\\n\\n    synthTokensLiquidated = executeLiquidation.tokensInLiquidation.rawValue;\\n\\n    // Burn synthetic tokens to be liquidated\\n    self.burnSyntheticTokens(synthTokensLiquidated, sender);\\n\\n    // Transfer liquidated collateral and reward to the user\\n    _collateralToken.safeTransfer(sender, collateralReceived + rewardAmount);\\n\\n    emit Liquidate(\\n      sender,\\n      synthTokensLiquidated,\\n      executeLiquidation.priceRate.rawValue,\\n      executeLiquidation.expectedCollateral.rawValue,\\n      collateralReceived,\\n      rewardAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Shutdown the pool in case of emergency\\n   * @notice Only Synthereum manager contract can call this function\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param emergencyShutdownData Emergency shutdown info (see Shutdown struct)\\n   * @return timestamp Timestamp of emergency shutdown transaction\\n   * @return price Price of the pair at the moment of shutdown execution\\n   */\\n  function emergencyShutdown(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    ISynthereumLiquidityPoolStorage.Shutdown storage emergencyShutdownData\\n  ) external returns (uint256 timestamp, uint256 price) {\\n    ISynthereumFinder _finder = self.finder;\\n\\n    require(\\n      msg.sender ==\\n        _finder.getImplementationAddress(SynthereumInterfaces.Manager),\\n      'Caller must be the Synthereum manager'\\n    );\\n\\n    timestamp = block.timestamp;\\n\\n    emergencyShutdownData.timestamp = timestamp;\\n\\n    FixedPoint.Unsigned memory _price =\\n      getPriceFeedRate(_finder, self.priceIdentifier);\\n\\n    emergencyShutdownData.price = _price;\\n\\n    price = _price.rawValue;\\n\\n    // Move available liquidity in the position\\n    FixedPoint.Unsigned memory totalCollateral =\\n      lpPosition.totalCollateralAmount;\\n\\n    FixedPoint.Unsigned memory unusedCollateral =\\n      self.calculateUnusedCollateral(\\n        totalCollateral,\\n        feeStatus.totalFeeAmount,\\n        FixedPoint.Unsigned(0)\\n      );\\n\\n    FixedPoint.Unsigned memory finalCollateral =\\n      totalCollateral.add(unusedCollateral);\\n\\n    lpPosition.totalCollateralAmount = finalCollateral;\\n\\n    emit EmergencyShutdown(timestamp, price, finalCollateral.rawValue);\\n  }\\n\\n  /**\\n   * @notice Redeem tokens after emergency shutdown\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param emergencyShutdownData Emergency shutdown info (see Shutdown struct)\\n   * @param isLiquidityProvider True if the sender is an LP, otherwise false\\n   * @param sender Sender of the settleEmergencyShutdown transaction\\n   * @return synthTokensSettled Amount of synthetic tokens liquidated\\n   * @return collateralSettled Amount of collateral withdrawn after emergency shutdown\\n   */\\n  function settleEmergencyShutdown(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    ISynthereumLiquidityPoolStorage.Shutdown storage emergencyShutdownData,\\n    bool isLiquidityProvider,\\n    address sender\\n  ) external returns (uint256 synthTokensSettled, uint256 collateralSettled) {\\n    // Memory struct for saving local varibales\\n    ExecuteSettlement memory executeSettlement;\\n\\n    IMintableBurnableERC20 syntheticToken = self.syntheticToken;\\n\\n    executeSettlement.emergencyPrice = emergencyShutdownData.price;\\n\\n    executeSettlement.userNumTokens = FixedPoint.Unsigned(\\n      syntheticToken.balanceOf(sender)\\n    );\\n\\n    require(\\n      executeSettlement.userNumTokens.rawValue > 0 || isLiquidityProvider,\\n      'Sender has nothing to settle'\\n    );\\n\\n    if (executeSettlement.userNumTokens.rawValue > 0) {\\n      // Move synthetic tokens from the user to the pool\\n      // - This is because derivative expects the tokens to come from the sponsor address\\n      syntheticToken.safeTransferFrom(\\n        sender,\\n        address(this),\\n        executeSettlement.userNumTokens.rawValue\\n      );\\n    }\\n\\n    executeSettlement.totalCollateralAmount = lpPosition.totalCollateralAmount;\\n    executeSettlement.tokensCollaterlized = lpPosition.tokensCollateralized;\\n    executeSettlement.totalFeeAmount = feeStatus.totalFeeAmount;\\n    executeSettlement.overCollateral;\\n\\n    IStandardERC20 _collateralToken = self.collateralToken;\\n\\n    uint8 collateralDecimals = getCollateralDecimals(_collateralToken);\\n\\n    // Add overcollateral and deposited synthetic tokens if the sender is the LP\\n    if (isLiquidityProvider) {\\n      FixedPoint.Unsigned memory totalRedeemableCollateral =\\n        calculateCollateralAmount(\\n          executeSettlement.emergencyPrice,\\n          collateralDecimals,\\n          executeSettlement.tokensCollaterlized\\n        );\\n\\n      executeSettlement.overCollateral = executeSettlement\\n        .totalCollateralAmount\\n        .isGreaterThan(totalRedeemableCollateral)\\n        ? executeSettlement.totalCollateralAmount.sub(totalRedeemableCollateral)\\n        : FixedPoint.Unsigned(0);\\n\\n      executeSettlement.userNumTokens = FixedPoint.Unsigned(\\n        syntheticToken.balanceOf(address(this))\\n      );\\n    }\\n\\n    // Calculate expected and settled collateral\\n    executeSettlement.redeemableCollateral = calculateCollateralAmount(\\n      executeSettlement\\n        .emergencyPrice,\\n      collateralDecimals,\\n      executeSettlement\\n        .userNumTokens\\n    )\\n      .add(executeSettlement.overCollateral);\\n\\n    executeSettlement.unusedCollateral = self.calculateUnusedCollateral(\\n      executeSettlement.totalCollateralAmount,\\n      executeSettlement.totalFeeAmount,\\n      FixedPoint.Unsigned(0)\\n    );\\n\\n    executeSettlement.transferableCollateral = FixedPoint.min(\\n      executeSettlement.redeemableCollateral,\\n      executeSettlement.totalCollateralAmount\\n    );\\n\\n    // Update Lp position\\n    lpPosition.totalCollateralAmount = executeSettlement\\n      .totalCollateralAmount\\n      .isGreaterThan(executeSettlement.redeemableCollateral)\\n      ? executeSettlement.totalCollateralAmount.sub(\\n        executeSettlement.redeemableCollateral\\n      )\\n      : FixedPoint.Unsigned(0);\\n\\n    lpPosition.tokensCollateralized = executeSettlement.tokensCollaterlized.sub(\\n      executeSettlement.userNumTokens\\n    );\\n\\n    synthTokensSettled = executeSettlement.userNumTokens.rawValue;\\n\\n    collateralSettled = executeSettlement.transferableCollateral.rawValue;\\n\\n    // Burn synthetic tokens\\n    syntheticToken.burn(synthTokensSettled);\\n\\n    // Transfer settled collateral to the user\\n    _collateralToken.safeTransfer(sender, collateralSettled);\\n\\n    emit Settle(\\n      sender,\\n      synthTokensSettled,\\n      executeSettlement.redeemableCollateral.rawValue,\\n      collateralSettled\\n    );\\n  }\\n\\n  /**\\n   * @notice Update the fee percentage\\n   * @param self Data type the library is attached to\\n   * @param _feePercentage The new fee percentage\\n   */\\n  function setFeePercentage(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    FixedPoint.Unsigned calldata _feePercentage\\n  ) external {\\n    require(\\n      _feePercentage.rawValue < 10**(18),\\n      'Fee Percentage must be less than 100%'\\n    );\\n\\n    self.fee.feeData.feePercentage = _feePercentage;\\n\\n    emit SetFeePercentage(_feePercentage.rawValue);\\n  }\\n\\n  /**\\n   * @notice Update the addresses of recipients for generated fees and proportions of fees each address will receive\\n   * @param self Data type the library is attached to\\n   * @param _feeRecipients An array of the addresses of recipients that will receive generated fees\\n   * @param _feeProportions An array of the proportions of fees generated each recipient will receive\\n   */\\n  function setFeeRecipients(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    address[] calldata _feeRecipients,\\n    uint32[] calldata _feeProportions\\n  ) external {\\n    require(\\n      _feeRecipients.length == _feeProportions.length,\\n      'Fee recipients and fee proportions do not match'\\n    );\\n\\n    uint256 totalActualFeeProportions;\\n\\n    // Store the sum of all proportions\\n    for (uint256 i = 0; i < _feeProportions.length; i++) {\\n      totalActualFeeProportions += _feeProportions[i];\\n    }\\n\\n    ISynthereumLiquidityPoolStorage.FeeData storage _feeData = self.fee.feeData;\\n\\n    _feeData.feeRecipients = _feeRecipients;\\n    _feeData.feeProportions = _feeProportions;\\n    self.fee.totalFeeProportions = totalActualFeeProportions;\\n\\n    emit SetFeeRecipients(_feeRecipients, _feeProportions);\\n  }\\n\\n  /**\\n   * @notice Update the overcollateralization percentage\\n   * @param self Data type the library is attached to\\n   * @param liquidationData Liquidation info (see LiquidationData struct)\\n   * @param _overCollateralization Overcollateralization percentage\\n   */\\n  function setOverCollateralization(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.Liquidation storage liquidationData,\\n    FixedPoint.Unsigned calldata _overCollateralization\\n  ) external {\\n    require(\\n      _overCollateralization.isGreaterThan(\\n        liquidationData.collateralRequirement.sub(1)\\n      ),\\n      'Overcollateralization must be bigger than the Lp part of the collateral requirement'\\n    );\\n\\n    self.overCollateralization = _overCollateralization;\\n\\n    emit SetOverCollateralization(_overCollateralization.rawValue);\\n  }\\n\\n  /**\\n   * @notice Update the liquidation reward percentage\\n   * @param liquidationData Liquidation info (see LiquidationData struct)\\n   * @param _liquidationReward Percentage of reward for correct liquidation by a liquidator\\n   */\\n  function setLiquidationReward(\\n    ISynthereumLiquidityPoolStorage.Liquidation storage liquidationData,\\n    FixedPoint.Unsigned calldata _liquidationReward\\n  ) external {\\n    require(\\n      _liquidationReward.rawValue > 0 &&\\n        _liquidationReward.isLessThanOrEqual(1),\\n      'Liquidation reward must be between 0 and 100%'\\n    );\\n\\n    liquidationData.liquidationReward = _liquidationReward;\\n\\n    emit SetLiquidationReward(_liquidationReward.rawValue);\\n  }\\n\\n  //----------------------------------------\\n  // External view functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Returns the total amount of liquidity deposited in the pool, but nut used as collateral\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @return Total available liquidity\\n   */\\n  function totalAvailableLiquidity(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus\\n  ) external view returns (uint256) {\\n    return\\n      self\\n        .calculateUnusedCollateral(\\n        lpPosition\\n          .totalCollateralAmount,\\n        feeStatus\\n          .totalFeeAmount,\\n        FixedPoint.Unsigned(0)\\n      )\\n        .rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns if position is overcollateralized and thepercentage of coverage of the collateral according to the last price\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param liquidationData Liquidation info (see LiquidationData struct)\\n   * @return True if position is overcollaterlized, otherwise false + percentage of coverage (totalCollateralAmount / (price * tokensCollateralized))\\n   */\\n  function collateralCoverage(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.Liquidation storage liquidationData\\n  ) external view returns (bool, uint256) {\\n    FixedPoint.Unsigned memory priceRate =\\n      getPriceFeedRate(self.finder, self.priceIdentifier);\\n\\n    uint8 collateralDecimals = getCollateralDecimals(self.collateralToken);\\n\\n    (\\n      bool _isOverCollateralized,\\n      ,\\n      FixedPoint.Unsigned memory overCollateralValue\\n    ) =\\n      lpPosition.isOverCollateralized(\\n        liquidationData,\\n        priceRate,\\n        collateralDecimals,\\n        lpPosition.totalCollateralAmount\\n      );\\n\\n    FixedPoint.Unsigned memory coverageRatio =\\n      lpPosition.totalCollateralAmount.div(overCollateralValue);\\n\\n    FixedPoint.Unsigned memory _collateralCoverage =\\n      liquidationData.collateralRequirement.mul(coverageRatio);\\n\\n    return (_isOverCollateralized, _collateralCoverage.rawValue);\\n  }\\n\\n  /**\\n   * @notice Returns the synthetic tokens will be received and fees will be paid in exchange for an input collateral amount\\n   * @notice This function is only trading-informative, it doesn't check liquidity and collateralization conditions\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param inputCollateral Input collateral amount to be exchanged\\n   * @return synthTokensReceived Synthetic tokens will be minted\\n   * @return feePaid Collateral fee will be paid\\n   */\\n  function getMintTradeInfo(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    FixedPoint.Unsigned calldata inputCollateral\\n  ) external view returns (uint256 synthTokensReceived, uint256 feePaid) {\\n    (\\n      FixedPoint.Unsigned memory collateralAmount,\\n      FixedPoint.Unsigned memory _feePaid,\\n      FixedPoint.Unsigned memory _synthTokensReceived\\n    ) = self.mintCalculation(inputCollateral);\\n\\n    require(\\n      collateralAmount.rawValue > 0,\\n      'Sending collateral amount is equal to 0'\\n    );\\n\\n    FixedPoint.Unsigned memory overCollateral =\\n      collateralAmount.mul(self.overCollateralization);\\n\\n    FixedPoint.Unsigned memory unusedCollateral =\\n      self.calculateUnusedCollateral(\\n        lpPosition.totalCollateralAmount,\\n        feeStatus.totalFeeAmount,\\n        FixedPoint.Unsigned(0)\\n      );\\n\\n    require(\\n      unusedCollateral.isGreaterThanOrEqual(overCollateral),\\n      'No enough liquidity for covering mint operation'\\n    );\\n\\n    synthTokensReceived = _synthTokensReceived.rawValue;\\n    feePaid = _feePaid.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns the collateral amount will be received and fees will be paid in exchange for an input amount of synthetic tokens\\n   * @notice This function is only trading-informative, it doesn't check liquidity and collateralization conditions\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param  syntheticTokens Amount of synthetic tokens to be exchanged\\n   * @return collateralAmountReceived Collateral amount will be received by the user\\n   * @return feePaid Collateral fee will be paid\\n   */\\n  function getRedeemTradeInfo(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    FixedPoint.Unsigned calldata syntheticTokens\\n  ) external view returns (uint256 collateralAmountReceived, uint256 feePaid) {\\n    FixedPoint.Unsigned memory totalActualTokens =\\n      lpPosition.tokensCollateralized;\\n\\n    require(\\n      syntheticTokens.rawValue > 0,\\n      'Sending tokens amount is equal to 0'\\n    );\\n\\n    require(\\n      syntheticTokens.isLessThanOrEqual(totalActualTokens),\\n      'Sending tokens amount bigger than amount in the position'\\n    );\\n\\n    (\\n      FixedPoint.Unsigned memory totCollateralAmount,\\n      FixedPoint.Unsigned memory _feePaid,\\n      FixedPoint.Unsigned memory _collateralAmountReceived\\n    ) = self.redeemCalculation(syntheticTokens);\\n\\n    FixedPoint.Unsigned memory collateralRedeemed =\\n      syntheticTokens.div(totalActualTokens).mul(\\n        lpPosition.totalCollateralAmount\\n      );\\n\\n    require(\\n      collateralRedeemed.isGreaterThanOrEqual(totCollateralAmount),\\n      'Position undercapitalized'\\n    );\\n\\n    collateralAmountReceived = _collateralAmountReceived.rawValue;\\n    feePaid = _feePaid.rawValue;\\n  }\\n\\n  /**\\n   * @notice Returns the destination synthetic tokens amount will be received and fees will be paid in exchange for an input amount of synthetic tokens\\n   * @notice This function is only trading-informative, it doesn't check liquidity and collateralization conditions\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param  syntheticTokens Amount of synthetic tokens to be exchanged\\n   * @param  destinationPool Pool in which mint the destination synthetic token\\n   * @return destSyntheticTokensReceived Synthetic tokens will be received from destination pool\\n   * @return feePaid Collateral fee will be paid\\n   */\\n  function getExchangeTradeInfo(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    FixedPoint.Unsigned calldata syntheticTokens,\\n    ISynthereumLiquidityPoolGeneral destinationPool\\n  )\\n    external\\n    view\\n    returns (uint256 destSyntheticTokensReceived, uint256 feePaid)\\n  {\\n    self.checkPool(destinationPool);\\n\\n    require(\\n      address(this) != address(destinationPool),\\n      'Same source and destination pool'\\n    );\\n\\n    FixedPoint.Unsigned memory totalActualTokens =\\n      lpPosition.tokensCollateralized;\\n\\n    require(\\n      syntheticTokens.rawValue > 0,\\n      'Sending tokens amount is equal to 0'\\n    );\\n\\n    require(\\n      syntheticTokens.isLessThanOrEqual(totalActualTokens),\\n      'Sending tokens amount bigger than amount in the position'\\n    );\\n\\n    (\\n      FixedPoint.Unsigned memory totCollateralAmount,\\n      FixedPoint.Unsigned memory _feePaid,\\n      FixedPoint.Unsigned memory collateralAmount,\\n      FixedPoint.Unsigned memory _destSyntheticTokensReceived\\n    ) = self.exchangeCalculation(syntheticTokens, destinationPool);\\n\\n    FixedPoint.Unsigned memory collateralRedeemed =\\n      syntheticTokens.div(totalActualTokens).mul(\\n        lpPosition.totalCollateralAmount\\n      );\\n\\n    require(\\n      collateralRedeemed.isGreaterThanOrEqual(totCollateralAmount),\\n      'Position undercapitalized'\\n    );\\n\\n    require(\\n      collateralAmount.rawValue > 0,\\n      'Sending collateral amount is equal to 0'\\n    );\\n\\n    FixedPoint.Unsigned memory destOverCollateral =\\n      collateralAmount.mul(\\n        FixedPoint.Unsigned(destinationPool.overCollateralization())\\n      );\\n\\n    FixedPoint.Unsigned memory destUnusedCollateral =\\n      FixedPoint.Unsigned(destinationPool.totalAvailableLiquidity());\\n\\n    require(\\n      destUnusedCollateral.isGreaterThanOrEqual(destOverCollateral),\\n      'No enough liquidity for covering mint operation'\\n    );\\n\\n    destSyntheticTokensReceived = _destSyntheticTokensReceived.rawValue;\\n    feePaid = _feePaid.rawValue;\\n  }\\n\\n  //----------------------------------------\\n  //  Internal functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Execute mint of synthetic tokens\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param executeMintParams Params for execution of mint (see ExecuteMintParams struct)\\n   */\\n  function executeMint(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    ExecuteMintParams memory executeMintParams\\n  ) internal {\\n    // Sending amount must be different from 0\\n    require(\\n      executeMintParams.collateralAmount.rawValue > 0,\\n      'Sending collateral amount is equal to 0'\\n    );\\n\\n    // Collateral available\\n    FixedPoint.Unsigned memory unusedCollateral =\\n      self.calculateUnusedCollateral(\\n        lpPosition.totalCollateralAmount,\\n        feeStatus.totalFeeAmount,\\n        FixedPoint.Unsigned(0)\\n      );\\n\\n    // Update LP's collateralization status\\n    FixedPoint.Unsigned memory overCollateral =\\n      lpPosition.updateLpPositionInMint(\\n        self.overCollateralization,\\n        executeMintParams.collateralAmount,\\n        executeMintParams.numTokens\\n      );\\n\\n    //Check there is enough liquidity in the pool for overcollateralization\\n    require(\\n      unusedCollateral.isGreaterThanOrEqual(overCollateral),\\n      'No enough liquidity for covering mint operation'\\n    );\\n\\n    // Update fees status\\n    feeStatus.updateFees(self.fee, executeMintParams.feeAmount);\\n\\n    // Pull user's collateral\\n    self.pullCollateral(\\n      executeMintParams.sender,\\n      executeMintParams.totCollateralAmount\\n    );\\n\\n    // Mint synthetic asset and transfer to the recipient\\n    self.syntheticToken.mint(\\n      executeMintParams.recipient,\\n      executeMintParams.numTokens.rawValue\\n    );\\n\\n    emit Mint(\\n      executeMintParams.sender,\\n      executeMintParams.totCollateralAmount.rawValue,\\n      executeMintParams.numTokens.rawValue,\\n      executeMintParams.feeAmount.rawValue,\\n      executeMintParams.recipient\\n    );\\n  }\\n\\n  /**\\n   * @notice Execute redeem of collateral\\n   * @param self Data type the library is attached tfo\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param executeRedeemParams Params for execution of redeem (see ExecuteRedeemParams struct)\\n   */\\n  function executeRedeem(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    ExecuteRedeemParams memory executeRedeemParams\\n  ) internal {\\n    // Sending amount must be different from 0\\n    require(\\n      executeRedeemParams.numTokens.rawValue > 0,\\n      'Sending tokens amount is equal to 0'\\n    );\\n\\n    FixedPoint.Unsigned memory collateralRedeemed =\\n      lpPosition.updateLpPositionInRedeem(executeRedeemParams.numTokens);\\n\\n    // Check that collateral redemeed is enough for cover the value of synthetic tokens\\n    require(\\n      collateralRedeemed.isGreaterThanOrEqual(\\n        executeRedeemParams.totCollateralAmount\\n      ),\\n      'Position undercapitalized'\\n    );\\n\\n    // Update fees status\\n    feeStatus.updateFees(self.fee, executeRedeemParams.feeAmount);\\n\\n    // Burn synthetic tokens\\n    self.burnSyntheticTokens(\\n      executeRedeemParams.numTokens.rawValue,\\n      executeRedeemParams.sender\\n    );\\n\\n    //Send net amount of collateral to the user that submitted the redeem request\\n    self.collateralToken.safeTransfer(\\n      executeRedeemParams.recipient,\\n      executeRedeemParams.collateralAmount.rawValue\\n    );\\n\\n    emit Redeem(\\n      executeRedeemParams.sender,\\n      executeRedeemParams.numTokens.rawValue,\\n      executeRedeemParams.collateralAmount.rawValue,\\n      executeRedeemParams.feeAmount.rawValue,\\n      executeRedeemParams.recipient\\n    );\\n  }\\n\\n  /**\\n   * @notice Execute exchange between synthetic tokens\\n   * @param self Data type the library is attached tfo\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param executeExchangeParams Params for execution of exchange (see ExecuteExchangeParams struct)\\n   */\\n  function executeExchange(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    ExecuteExchangeParams memory executeExchangeParams\\n  ) internal {\\n    // Sending amount must be different from 0\\n    require(\\n      executeExchangeParams.numTokens.rawValue > 0,\\n      'Sending tokens amount is equal to 0'\\n    );\\n\\n    FixedPoint.Unsigned memory collateralRedeemed =\\n      lpPosition.updateLpPositionInRedeem(executeExchangeParams.numTokens);\\n\\n    // Check that collateral redemeed is enough for cover the value of synthetic tokens\\n    require(\\n      collateralRedeemed.isGreaterThanOrEqual(\\n        executeExchangeParams.totCollateralAmount\\n      ),\\n      'Position undercapitalized'\\n    );\\n\\n    // Update fees status\\n    feeStatus.updateFees(self.fee, executeExchangeParams.feeAmount);\\n\\n    // Burn synthetic tokens\\n    self.burnSyntheticTokens(\\n      executeExchangeParams.numTokens.rawValue,\\n      executeExchangeParams.sender\\n    );\\n\\n    ISynthereumLiquidityPoolGeneral destinationPool =\\n      executeExchangeParams.destPool;\\n\\n    // Check that destination pool is different from this pool\\n    require(\\n      address(this) != address(destinationPool),\\n      'Same source and destination pool'\\n    );\\n\\n    self.checkPool(destinationPool);\\n\\n    // Transfer collateral amount (without overcollateralization) to the destination pool\\n    self.collateralToken.safeTransfer(\\n      address(destinationPool),\\n      executeExchangeParams.collateralAmount.rawValue\\n    );\\n\\n    // Mint the destination tokens with the withdrawn collateral\\n    destinationPool.exchangeMint(\\n      executeExchangeParams.collateralAmount.rawValue,\\n      executeExchangeParams.destNumTokens.rawValue,\\n      executeExchangeParams.recipient\\n    );\\n\\n    emit Exchange(\\n      executeExchangeParams.sender,\\n      address(destinationPool),\\n      executeExchangeParams.numTokens.rawValue,\\n      executeExchangeParams.destNumTokens.rawValue,\\n      executeExchangeParams.feeAmount.rawValue,\\n      executeExchangeParams.recipient\\n    );\\n  }\\n\\n  /**\\n   * @notice Withdraw unused deposited collateral by the LP\\n   * @param self Data type the library is attached to\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @param collateralAmount Collateral to be withdrawn\\n   * @param sender Sender that withdraws liquidity\\n   * @return remainingLiquidity Remaining unused collateral in the pool\\n   */\\n  function _withdrawLiquidity(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    address sender\\n  ) internal returns (uint256 remainingLiquidity) {\\n    // Collateral available\\n    FixedPoint.Unsigned memory unusedCollateral =\\n      self.calculateUnusedCollateral(\\n        lpPosition.totalCollateralAmount,\\n        feeStatus.totalFeeAmount,\\n        FixedPoint.Unsigned(0)\\n      );\\n\\n    // Check that available collateral is bigger than collateral to be withdrawn and returns the difference\\n    remainingLiquidity = (unusedCollateral.sub(collateralAmount)).rawValue;\\n\\n    // Transfer amount to the Lp\\n    uint256 _collateralAmount = collateralAmount.rawValue;\\n\\n    self.collateralToken.safeTransfer(sender, _collateralAmount);\\n\\n    emit WithdrawLiquidity(sender, _collateralAmount, remainingLiquidity);\\n  }\\n\\n  /**\\n   * @notice Update LP's collateralization status after a mint\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param overCollateralization Overcollateralization rate\\n   * @param collateralAmount Collateral amount to be added (only user collateral)\\n   * @param numTokens Tokens to be added\\n   * @return overCollateral Amount of collateral to be provided by LP for overcollateralization\\n   */\\n  function updateLpPositionInMint(\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    FixedPoint.Unsigned storage overCollateralization,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FixedPoint.Unsigned memory numTokens\\n  ) internal returns (FixedPoint.Unsigned memory overCollateral) {\\n    overCollateral = collateralAmount.mul(overCollateralization);\\n\\n    lpPosition.totalCollateralAmount = lpPosition\\n      .totalCollateralAmount\\n      .add(collateralAmount)\\n      .add(overCollateral);\\n\\n    lpPosition.tokensCollateralized = lpPosition.tokensCollateralized.add(\\n      numTokens\\n    );\\n  }\\n\\n  /**\\n   * @notice Update LP's collateralization status after a redeem\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param numTokens Tokens to be removed\\n   * @return collateralRedeemed Collateral redeemed\\n   */\\n  function updateLpPositionInRedeem(\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    FixedPoint.Unsigned memory numTokens\\n  ) internal returns (FixedPoint.Unsigned memory collateralRedeemed) {\\n    FixedPoint.Unsigned memory totalActualTokens =\\n      lpPosition.tokensCollateralized;\\n\\n    FixedPoint.Unsigned memory totalActualCollateral =\\n      lpPosition.totalCollateralAmount;\\n\\n    FixedPoint.Unsigned memory fractionRedeemed =\\n      numTokens.div(totalActualTokens);\\n\\n    collateralRedeemed = fractionRedeemed.mul(totalActualCollateral);\\n\\n    lpPosition.tokensCollateralized = totalActualTokens.sub(numTokens);\\n\\n    lpPosition.totalCollateralAmount = totalActualCollateral.sub(\\n      collateralRedeemed\\n    );\\n  }\\n\\n  /**\\n   * @notice Update fee gained by the fee recipients\\n   * @param feeStatus Actual status of fee gained to be withdrawn\\n   * @param feeInfo Actual status of fee recipients and their proportions\\n   * @param feeAmount Collateral fee charged\\n   */\\n  function updateFees(\\n    ISynthereumLiquidityPoolStorage.FeeStatus storage feeStatus,\\n    ISynthereumLiquidityPoolStorage.Fee storage feeInfo,\\n    FixedPoint.Unsigned memory feeAmount\\n  ) internal {\\n    FixedPoint.Unsigned memory feeCharged;\\n\\n    address[] storage feeRecipients = feeInfo.feeData.feeRecipients;\\n\\n    uint32[] storage feeProportions = feeInfo.feeData.feeProportions;\\n\\n    uint256 totalFeeProportions = feeInfo.totalFeeProportions;\\n\\n    uint256 numberOfRecipients = feeRecipients.length;\\n\\n    mapping(address => FixedPoint.Unsigned) storage feeGained =\\n      feeStatus.feeGained;\\n\\n    for (uint256 i = 0; i < numberOfRecipients - 1; i++) {\\n      address feeRecipient = feeRecipients[i];\\n      FixedPoint.Unsigned memory feeReceived =\\n        FixedPoint.Unsigned(\\n          (feeAmount.rawValue * feeProportions[i]) / totalFeeProportions\\n        );\\n      feeGained[feeRecipient] = feeGained[feeRecipient].add(feeReceived);\\n      feeCharged = feeCharged.add(feeReceived);\\n    }\\n\\n    address lastRecipient = feeRecipients[numberOfRecipients - 1];\\n\\n    feeGained[lastRecipient] = feeGained[lastRecipient].add(feeAmount).sub(\\n      feeCharged\\n    );\\n\\n    feeStatus.totalFeeAmount = feeStatus.totalFeeAmount.add(feeAmount);\\n  }\\n\\n  /**\\n   * @notice Pulls collateral tokens from the sender to store in the Pool\\n   * @param self Data type the library is attached to\\n   * @param numTokens The number of tokens to pull\\n   */\\n  function pullCollateral(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    address from,\\n    FixedPoint.Unsigned memory numTokens\\n  ) internal {\\n    self.collateralToken.safeTransferFrom(\\n      from,\\n      address(this),\\n      numTokens.rawValue\\n    );\\n  }\\n\\n  /**\\n   * @notice Pulls synthetic tokens from the sender and burn them\\n   * @param self Data type the library is attached to\\n   * @param numTokens The number of tokens to be burned\\n   * @param sender Sender of synthetic tokens\\n   */\\n  function burnSyntheticTokens(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    uint256 numTokens,\\n    address sender\\n  ) internal {\\n    IMintableBurnableERC20 synthToken = self.syntheticToken;\\n\\n    // Transfer synthetic token from the user to the pool\\n    synthToken.safeTransferFrom(sender, address(this), numTokens);\\n\\n    // Burn synthetic asset\\n    synthToken.burn(numTokens);\\n  }\\n\\n  //----------------------------------------\\n  //  Internal views functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Given a collateral value to be exchanged, returns the fee amount, net collateral and synthetic tokens\\n   * @param self Data type the library is attached tfo\\n   * @param totCollateralAmount Collateral amount to be exchanged\\n   * @return collateralAmount Net collateral amount (totCollateralAmount - feePercentage)\\n   * @return feeAmount Fee to be paid according to the fee percentage\\n   * @return numTokens Number of synthetic tokens will be received according to the actual price in exchange for collateralAmount\\n   */\\n  function mintCalculation(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    FixedPoint.Unsigned memory totCollateralAmount\\n  )\\n    internal\\n    view\\n    returns (\\n      FixedPoint.Unsigned memory collateralAmount,\\n      FixedPoint.Unsigned memory feeAmount,\\n      FixedPoint.Unsigned memory numTokens\\n    )\\n  {\\n    feeAmount = totCollateralAmount.mul(self.fee.feeData.feePercentage);\\n\\n    collateralAmount = totCollateralAmount.sub(feeAmount);\\n\\n    numTokens = calculateNumberOfTokens(\\n      getPriceFeedRate(self.finder, self.priceIdentifier),\\n      getCollateralDecimals(self.collateralToken),\\n      collateralAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Given a an amount of synthetic tokens to be exchanged, returns the fee amount, net collateral and gross collateral\\n   * @param self Data type the library is attached tfo\\n   * @param numTokens Synthetic tokens amount to be exchanged\\n   * @return totCollateralAmount Gross collateral amount (collateralAmount + feeAmount)\\n   * @return feeAmount Fee to be paid according to the fee percentage\\n   * @return collateralAmount Net collateral amount will be received according to the actual price in exchange for numTokens\\n   */\\n  function redeemCalculation(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    FixedPoint.Unsigned memory numTokens\\n  )\\n    internal\\n    view\\n    returns (\\n      FixedPoint.Unsigned memory totCollateralAmount,\\n      FixedPoint.Unsigned memory feeAmount,\\n      FixedPoint.Unsigned memory collateralAmount\\n    )\\n  {\\n    totCollateralAmount = calculateCollateralAmount(\\n      getPriceFeedRate(self.finder, self.priceIdentifier),\\n      getCollateralDecimals(self.collateralToken),\\n      numTokens\\n    );\\n\\n    feeAmount = totCollateralAmount.mul(self.fee.feeData.feePercentage);\\n\\n    collateralAmount = totCollateralAmount.sub(feeAmount);\\n  }\\n\\n  /**\\n   * @notice Given a an amount of synthetic tokens to be exchanged, returns the fee amount, net collateral and gross collateral and number of destination tokens\\n   * @param self Data type the library is attached tfo\\n   * @param numTokens Synthetic tokens amount to be exchanged\\n   * @param destinationPool Pool from which destination tokens will be received\\n   * @return totCollateralAmount Gross collateral amount according to the price\\n   * @return feeAmount Fee to be paid according to the fee percentage\\n   * @return collateralAmount Net collateral amount (totCollateralAmount - feeAmount)\\n   * @return destNumTokens Number of destination synthetic tokens will be received according to the actual price in exchange for synthetic tokens\\n   */\\n  function exchangeCalculation(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    FixedPoint.Unsigned memory numTokens,\\n    ISynthereumLiquidityPoolGeneral destinationPool\\n  )\\n    internal\\n    view\\n    returns (\\n      FixedPoint.Unsigned memory totCollateralAmount,\\n      FixedPoint.Unsigned memory feeAmount,\\n      FixedPoint.Unsigned memory collateralAmount,\\n      FixedPoint.Unsigned memory destNumTokens\\n    )\\n  {\\n    ISynthereumFinder _finder = self.finder;\\n\\n    IStandardERC20 _collateralToken = self.collateralToken;\\n\\n    uint8 collateralDecimals = getCollateralDecimals(_collateralToken);\\n\\n    totCollateralAmount = calculateCollateralAmount(\\n      getPriceFeedRate(_finder, self.priceIdentifier),\\n      collateralDecimals,\\n      numTokens\\n    );\\n\\n    feeAmount = totCollateralAmount.mul(self.fee.feeData.feePercentage);\\n\\n    collateralAmount = totCollateralAmount.sub(feeAmount);\\n\\n    destNumTokens = calculateNumberOfTokens(\\n      getPriceFeedRate(_finder, destinationPool.getPriceFeedIdentifier()),\\n      collateralDecimals,\\n      collateralAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Check expiration of mint, redeem and exchange transaction\\n   * @param expiration Expiration time of the transaction\\n   */\\n  function checkExpiration(uint256 expiration) internal view {\\n    require(block.timestamp <= expiration, 'Transaction expired');\\n  }\\n\\n  /**\\n   * @notice Check if sender or receiver pool is a correct registered pool\\n   * @param self Data type the library is attached to\\n   * @param poolToCheck Pool that should be compared with this pool\\n   */\\n  function checkPool(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    ISynthereumLiquidityPoolGeneral poolToCheck\\n  ) internal view {\\n    IStandardERC20 collateralToken = self.collateralToken;\\n    require(\\n      collateralToken == poolToCheck.collateralToken(),\\n      'Collateral tokens do not match'\\n    );\\n\\n    ISynthereumFinder finder = self.finder;\\n\\n    require(finder == poolToCheck.synthereumFinder(), 'Finders do not match');\\n\\n    ISynthereumRegistry poolRegister =\\n      ISynthereumRegistry(\\n        finder.getImplementationAddress(SynthereumInterfaces.PoolRegistry)\\n      );\\n\\n    require(\\n      poolRegister.isDeployed(\\n        poolToCheck.syntheticTokenSymbol(),\\n        collateralToken,\\n        poolToCheck.version(),\\n        address(poolToCheck)\\n      ),\\n      'Destination pool not registered'\\n    );\\n  }\\n\\n  /**\\n   * @notice Check if an amount of collateral is enough to collateralize the position\\n   * @param lpPosition Position of the LP (see LPPosition struct)\\n   * @param priceRate Price rate of the pair\\n   * @param collateralDecimals Number of decimals of the collateral\\n   * @param liquidationData Liquidation info (see LiquidationData struct)\\n   * @param collateralToCompare collateral used for checking the overcollaterlization\\n   * @return _isOverCollateralized True if position is overcollaterlized, otherwise false\\n   * @return collateralValue Collateral amount equal to the value of tokens\\n   * @return overCollateralValue Collateral amount equal to the value of tokens * collateralRequirement\\n   */\\n  function isOverCollateralized(\\n    ISynthereumLiquidityPoolStorage.LPPosition storage lpPosition,\\n    ISynthereumLiquidityPoolStorage.Liquidation storage liquidationData,\\n    FixedPoint.Unsigned memory priceRate,\\n    uint8 collateralDecimals,\\n    FixedPoint.Unsigned memory collateralToCompare\\n  )\\n    internal\\n    view\\n    returns (\\n      bool _isOverCollateralized,\\n      FixedPoint.Unsigned memory collateralValue,\\n      FixedPoint.Unsigned memory overCollateralValue\\n    )\\n  {\\n    collateralValue = calculateCollateralAmount(\\n      priceRate,\\n      collateralDecimals,\\n      lpPosition.tokensCollateralized\\n    );\\n\\n    overCollateralValue = collateralValue.mul(\\n      liquidationData.collateralRequirement\\n    );\\n\\n    _isOverCollateralized = collateralToCompare.isGreaterThanOrEqual(\\n      overCollateralValue\\n    );\\n  }\\n\\n  /**\\n   * @notice Calculate the unused collateral of this pool\\n   * @param self Data type the library is attached to\\n   * @param totalCollateral Total collateral used\\n   * @param totalFees Total fees gained to be whitdrawn\\n   * @param collateralReceived Collateral sent to the pool by a user or contract to be used for collateralization\\n   * @param unusedCollateral Unused collateral of the pool\\n   */\\n  function calculateUnusedCollateral(\\n    ISynthereumLiquidityPoolStorage.Storage storage self,\\n    FixedPoint.Unsigned memory totalCollateral,\\n    FixedPoint.Unsigned memory totalFees,\\n    FixedPoint.Unsigned memory collateralReceived\\n  ) internal view returns (FixedPoint.Unsigned memory unusedCollateral) {\\n    // Collateral available\\n    FixedPoint.Unsigned memory actualBalance =\\n      FixedPoint.Unsigned(self.collateralToken.balanceOf(address(this)));\\n    unusedCollateral = actualBalance.sub(\\n      totalCollateral.add(totalFees).add(collateralReceived)\\n    );\\n  }\\n\\n  /**\\n   * @notice Retrun the on-chain oracle price for a pair\\n   * @param finder Synthereum finder\\n   * @param priceIdentifier Identifier of price pair\\n   * @return priceRate Latest rate of the pair\\n   */\\n  function getPriceFeedRate(ISynthereumFinder finder, bytes32 priceIdentifier)\\n    internal\\n    view\\n    returns (FixedPoint.Unsigned memory priceRate)\\n  {\\n    ISynthereumPriceFeed priceFeed =\\n      ISynthereumPriceFeed(\\n        finder.getImplementationAddress(SynthereumInterfaces.PriceFeed)\\n      );\\n\\n    priceRate = FixedPoint.Unsigned(priceFeed.getLatestPrice(priceIdentifier));\\n  }\\n\\n  /**\\n   * @notice Retrun the number of decimals of collateral token\\n   * @param collateralToken Collateral token contract\\n   * @return decimals number of decimals\\n   */\\n  function getCollateralDecimals(IStandardERC20 collateralToken)\\n    internal\\n    view\\n    returns (uint8 decimals)\\n  {\\n    decimals = collateralToken.decimals();\\n  }\\n\\n  /**\\n   * @notice Calculate synthetic token amount starting from an amount of collateral\\n   * @param priceRate Price rate of the pair\\n   * @param collateralDecimals Number of decimals of the collateral\\n   * @param numTokens Amount of collateral from which you want to calculate synthetic token amount\\n   * @return numTokens Amount of tokens after on-chain oracle conversion\\n   */\\n  function calculateNumberOfTokens(\\n    FixedPoint.Unsigned memory priceRate,\\n    uint8 collateralDecimals,\\n    FixedPoint.Unsigned memory collateralAmount\\n  ) internal pure returns (FixedPoint.Unsigned memory numTokens) {\\n    numTokens = collateralAmount.mul(10**(18 - collateralDecimals)).div(\\n      priceRate\\n    );\\n  }\\n\\n  /**\\n   * @notice Calculate collateral amount starting from an amount of synthtic token\\n   * @param priceRate Price rate of the pair\\n   * @param collateralDecimals Number of decimals of the collateral\\n   * @param numTokens Amount of synthetic tokens from which you want to calculate collateral amount\\n   * @return collateralAmount Amount of collateral after on-chain oracle conversion\\n   */\\n  function calculateCollateralAmount(\\n    FixedPoint.Unsigned memory priceRate,\\n    uint8 collateralDecimals,\\n    FixedPoint.Unsigned memory numTokens\\n  ) internal pure returns (FixedPoint.Unsigned memory collateralAmount) {\\n    collateralAmount = numTokens.mul(priceRate).div(\\n      10**(18 - collateralDecimals)\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/synthereum-pool/v5/LiquidityPoolCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableTokenFactory\\n} from '../../tokens/factories/interfaces/IMintableBurnableTokenFactory.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  ISynthereumLiquidityPoolStorage\\n} from './interfaces/ILiquidityPoolStorage.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from '../../tokens/interfaces/BaseControlledMintableBurnableERC20.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {SynthereumLiquidityPool} from './LiquidityPool.sol';\\n\\ncontract SynthereumLiquidityPoolCreator {\\n  struct Params {\\n    IStandardERC20 collateralToken;\\n    string syntheticName;\\n    string syntheticSymbol;\\n    address syntheticToken;\\n    ISynthereumLiquidityPoolStorage.Roles roles;\\n    uint256 overCollateralization;\\n    ISynthereumLiquidityPoolStorage.FeeData feeData;\\n    bytes32 priceIdentifier;\\n    uint256 collateralRequirement;\\n    uint256 liquidationReward;\\n    uint8 version;\\n  }\\n\\n  // Address of Synthereum Finder\\n  ISynthereumFinder public immutable synthereumFinder;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n  event CreatedPool(\\n    address indexed poolAddress,\\n    uint8 indexed version,\\n    address indexed deployerAddress\\n  );\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the Pool contract.\\n   * @param _synthereumFinder Synthereum Finder address used to discover other contracts\\n   */\\n  constructor(address _synthereumFinder) {\\n    synthereumFinder = ISynthereumFinder(_synthereumFinder);\\n  }\\n\\n  //----------------------------------------\\n  // Public functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Creates an instance of the pool\\n   * @param params is a `ConstructorParams` object from LiquidityPool.\\n   * @return pool address of the deployed pool contract.\\n   */\\n  function createPool(Params calldata params)\\n    public\\n    virtual\\n    returns (SynthereumLiquidityPool pool)\\n  {\\n    require(bytes(params.syntheticName).length != 0, 'Missing synthetic name');\\n    require(\\n      bytes(params.syntheticSymbol).length != 0,\\n      'Missing synthetic symbol'\\n    );\\n\\n    if (params.syntheticToken == address(0)) {\\n      IMintableBurnableTokenFactory tokenFactory =\\n        IMintableBurnableTokenFactory(\\n          ISynthereumFinder(synthereumFinder).getImplementationAddress(\\n            SynthereumInterfaces.TokenFactory\\n          )\\n        );\\n      BaseControlledMintableBurnableERC20 tokenCurrency =\\n        tokenFactory.createToken(\\n          params.syntheticName,\\n          params.syntheticSymbol,\\n          18\\n        );\\n      pool = new SynthereumLiquidityPool(_convertParams(params, tokenCurrency));\\n      // Give permissions to new pool contract and then hand over ownership.\\n      tokenCurrency.addMinter(address(pool));\\n      tokenCurrency.addBurner(address(pool));\\n      tokenCurrency.addAdmin(\\n        synthereumFinder.getImplementationAddress(SynthereumInterfaces.Manager)\\n      );\\n      tokenCurrency.renounceAdmin();\\n    } else {\\n      BaseControlledMintableBurnableERC20 tokenCurrency =\\n        BaseControlledMintableBurnableERC20(params.syntheticToken);\\n      require(\\n        keccak256(abi.encodePacked(tokenCurrency.name())) ==\\n          keccak256(abi.encodePacked(params.syntheticName)),\\n        'Wrong synthetic token name'\\n      );\\n      require(\\n        keccak256(abi.encodePacked(tokenCurrency.symbol())) ==\\n          keccak256(abi.encodePacked(params.syntheticSymbol)),\\n        'Wrong synthetic token symbol'\\n      );\\n      pool = new SynthereumLiquidityPool(_convertParams(params, tokenCurrency));\\n    }\\n    emit CreatedPool(address(pool), params.version, msg.sender);\\n    return pool;\\n  }\\n\\n  // Converts createPool params to constructor params.\\n  function _convertParams(\\n    Params memory params,\\n    BaseControlledMintableBurnableERC20 tokenCurrency\\n  )\\n    internal\\n    view\\n    returns (SynthereumLiquidityPool.ConstructorParams memory constructorParams)\\n  {\\n    require(params.roles.admin != address(0), 'Admin cannot be 0x00');\\n    constructorParams.finder = synthereumFinder;\\n    constructorParams.version = params.version;\\n    constructorParams.collateralToken = params.collateralToken;\\n    constructorParams.syntheticToken = IMintableBurnableERC20(\\n      address(tokenCurrency)\\n    );\\n    constructorParams.roles = params.roles;\\n    constructorParams.overCollateralization = params.overCollateralization;\\n    constructorParams.feeData = params.feeData;\\n    constructorParams.priceIdentifier = params.priceIdentifier;\\n    constructorParams.collateralRequirement = params.collateralRequirement;\\n    constructorParams.liquidationReward = params.liquidationReward;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/synthereum-pool/v5/LiquidityPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  IDeploymentSignature\\n} from '../../core/interfaces/IDeploymentSignature.sol';\\nimport {\\n  ISynthereumCollateralWhitelist\\n} from '../../core/interfaces/ICollateralWhitelist.sol';\\nimport {\\n  ISynthereumIdentifierWhitelist\\n} from '../../core/interfaces/IIdentifierWhitelist.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {SynthereumLiquidityPoolCreator} from './LiquidityPoolCreator.sol';\\nimport {SynthereumLiquidityPool} from './LiquidityPool.sol';\\nimport {FactoryConditions} from '../../common/FactoryConditions.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\ncontract SynthereumLiquidityPoolFactory is\\n  IDeploymentSignature,\\n  ReentrancyGuard,\\n  FactoryConditions,\\n  SynthereumLiquidityPoolCreator\\n{\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  bytes4 public immutable override deploymentSignature;\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Set synthereum finder\\n   * @param synthereumFinder Synthereum finder contract\\n   */\\n  constructor(address synthereumFinder)\\n    SynthereumLiquidityPoolCreator(synthereumFinder)\\n  {\\n    deploymentSignature = this.createPool.selector;\\n  }\\n\\n  //----------------------------------------\\n  // Public functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Check if the sender is the deployer and deploy a pool\\n   * @param params input parameters of the pool\\n   * @return pool Deployed pool\\n   */\\n  function createPool(Params calldata params)\\n    public\\n    override\\n    nonReentrant\\n    returns (SynthereumLiquidityPool pool)\\n  {\\n    checkDeploymentConditions(\\n      synthereumFinder,\\n      params.collateralToken,\\n      params.priceIdentifier\\n    );\\n    pool = super.createPool(params);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Manager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from './interfaces/IFinder.sol';\\nimport {ISynthereumManager} from './interfaces/IManager.sol';\\nimport {\\n  IAccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/IAccessControlEnumerable.sol';\\nimport {IEmergencyShutdown} from '../common/interfaces/IEmergencyShutdown.sol';\\nimport {SynthereumInterfaces} from './Constants.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\ncontract SynthereumManager is ISynthereumManager, AccessControlEnumerable {\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  ISynthereumFinder public immutable synthereumFinder;\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyMaintainerOrDeployer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender) ||\\n        synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.Deployer\\n        ) ==\\n        msg.sender,\\n      'Sender must be the maintainer or the deployer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the SynthereumManager contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   * @param roles Admin and Mainteiner roles\\n   */\\n  constructor(ISynthereumFinder _synthereumFinder, Roles memory roles) {\\n    synthereumFinder = _synthereumFinder;\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Allow to add roles in derivatives and synthetic tokens contracts\\n   * @param contracts Derivatives or Synthetic role contracts\\n   * @param roles Roles id\\n   * @param accounts Addresses to which give the grant\\n   */\\n  function grantSynthereumRole(\\n    address[] calldata contracts,\\n    bytes32[] calldata roles,\\n    address[] calldata accounts\\n  ) external override onlyMaintainerOrDeployer {\\n    uint256 rolesCount = roles.length;\\n    require(rolesCount > 0, 'No roles paased');\\n    require(\\n      rolesCount == accounts.length,\\n      'Number of roles and accounts must be the same'\\n    );\\n    require(\\n      rolesCount == contracts.length,\\n      'Number of roles and contracts must be the same'\\n    );\\n    for (uint256 i; i < rolesCount; i++) {\\n      IAccessControlEnumerable(contracts[i]).grantRole(roles[i], accounts[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allow to revoke roles in derivatives and synthetic tokens contracts\\n   * @param contracts Derivatives or Synthetic role contracts\\n   * @param roles Roles id\\n   * @param accounts Addresses to which revoke the grant\\n   */\\n  function revokeSynthereumRole(\\n    address[] calldata contracts,\\n    bytes32[] calldata roles,\\n    address[] calldata accounts\\n  ) external override onlyMaintainerOrDeployer {\\n    uint256 rolesCount = roles.length;\\n    require(rolesCount > 0, 'No roles paased');\\n    require(\\n      rolesCount == accounts.length,\\n      'Number of roles and accounts must be the same'\\n    );\\n    require(\\n      rolesCount == contracts.length,\\n      'Number of roles and contracts must be the same'\\n    );\\n    for (uint256 i; i < rolesCount; i++) {\\n      IAccessControlEnumerable(contracts[i]).revokeRole(roles[i], accounts[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allow to renounce roles in derivatives and synthetic tokens contracts\\n   * @param contracts Derivatives or Synthetic role contracts\\n   * @param roles Roles id\\n   */\\n  function renounceSynthereumRole(\\n    address[] calldata contracts,\\n    bytes32[] calldata roles\\n  ) external override onlyMaintainerOrDeployer {\\n    uint256 rolesCount = roles.length;\\n    require(rolesCount > 0, 'No roles paased');\\n    require(\\n      rolesCount == contracts.length,\\n      'Number of roles and contracts must be the same'\\n    );\\n    for (uint256 i; i < rolesCount; i++) {\\n      IAccessControlEnumerable(contracts[i]).renounceRole(\\n        roles[i],\\n        address(this)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Allow to call emergency shutdown in a pool or self-minting derivative\\n   * @param contracts Contracts to shutdown\\n   */\\n  function emergencyShutdown(IEmergencyShutdown[] calldata contracts)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    require(contracts.length > 0, 'No Derivative passed');\\n    for (uint256 i; i < contracts.length; i++) {\\n      contracts[i].emergencyShutdown();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/FactoryVersioning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  ISynthereumFactoryVersioning\\n} from './interfaces/IFactoryVersioning.sol';\\nimport {\\n  EnumerableMap\\n} from '../../@openzeppelin/contracts/utils/structs/EnumerableMap.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title Provides addresses of different versions of pools factory and derivative factory\\n */\\ncontract SynthereumFactoryVersioning is\\n  ISynthereumFactoryVersioning,\\n  AccessControlEnumerable\\n{\\n  using EnumerableMap for EnumerableMap.UintToAddressMap;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => EnumerableMap.UintToAddressMap) private factories;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event AddFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  event SetFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  event RemoveFactory(\\n    bytes32 indexed factoryType,\\n    uint8 indexed version,\\n    address indexed factory\\n  );\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n  constructor(Roles memory roles) {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /** @notice Sets a Factory\\n   * @param factoryType Type of factory\\n   * @param version Version of the factory to be set\\n   * @param factory The pool factory address to be set\\n   */\\n  function setFactory(\\n    bytes32 factoryType,\\n    uint8 version,\\n    address factory\\n  ) external override onlyMaintainer {\\n    require(factory != address(0), 'Factory cannot be address 0');\\n    bool isNewVersion = factories[factoryType].set(version, factory);\\n    if (isNewVersion) {\\n      emit AddFactory(factoryType, version, factory);\\n    } else {\\n      emit SetFactory(factoryType, version, factory);\\n    }\\n  }\\n\\n  /** @notice Removes a factory\\n   * @param factoryType The type of factory to be removed\\n   * @param version Version of the factory to be removed\\n   */\\n  function removeFactory(bytes32 factoryType, uint8 version)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    EnumerableMap.UintToAddressMap storage selectedFactories =\\n      factories[factoryType];\\n    address factoryToRemove = selectedFactories.get(version);\\n    selectedFactories.remove(version);\\n    emit RemoveFactory(factoryType, version, factoryToRemove);\\n  }\\n\\n  //----------------------------------------\\n  // External view functions\\n  //----------------------------------------\\n\\n  /** @notice Gets a factory contract address\\n   * @param factoryType The type of factory to be checked\\n   * @param version Version of the factory to be checked\\n   * @return factory Address of the factory contract\\n   */\\n  function getFactoryVersion(bytes32 factoryType, uint8 version)\\n    external\\n    view\\n    override\\n    returns (address factory)\\n  {\\n    factory = factories[factoryType].get(version);\\n  }\\n\\n  /** @notice Gets the number of factory versions for a specific type\\n   * @param factoryType The type of factory to be checked\\n   * @return numberOfVersions Total number of versions for a specific factory\\n   */\\n  function numberOfFactoryVersions(bytes32 factoryType)\\n    external\\n    view\\n    override\\n    returns (uint8 numberOfVersions)\\n  {\\n    numberOfVersions = uint8(factories[factoryType].length());\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Finder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from './interfaces/IFinder.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title Provides addresses of contracts implementing certain interfaces.\\n */\\ncontract SynthereumFinder is ISynthereumFinder, AccessControlEnumerable {\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  mapping(bytes32 => address) public interfacesImplemented;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event InterfaceImplementationChanged(\\n    bytes32 indexed interfaceName,\\n    address indexed newImplementationAddress\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructors\\n  //----------------------------------------\\n\\n  constructor(Roles memory roles) {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External view\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the implementation contract.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external override onlyMaintainer {\\n    interfacesImplemented[interfaceName] = implementationAddress;\\n\\n    emit InterfaceImplementationChanged(interfaceName, implementationAddress);\\n  }\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the defined interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    address implementationAddress = interfacesImplemented[interfaceName];\\n    require(implementationAddress != address(0x0), 'Implementation not found');\\n    return implementationAddress;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFinder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Provides addresses of the contracts implementing certain interfaces.\\n */\\ninterface ISynthereumFinder {\\n  /**\\n   * @notice Updates the address of the contract that implements `interfaceName`.\\n   * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n   * @param implementationAddress address of the deployed contract that implements the interface.\\n   */\\n  function changeImplementationAddress(\\n    bytes32 interfaceName,\\n    address implementationAddress\\n  ) external;\\n\\n  /**\\n   * @notice Gets the address of the contract that implements the given `interfaceName`.\\n   * @param interfaceName queried interface.\\n   * @return implementationAddress Address of the deployed contract that implements the interface.\\n   */\\n  function getImplementationAddress(bytes32 interfaceName)\\n    external\\n    view\\n    returns (address);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  IEmergencyShutdown\\n} from '../../common/interfaces/IEmergencyShutdown.sol';\\n\\ninterface ISynthereumManager {\\n  /**\\n   * @notice Allow to add roles in derivatives and synthetic tokens contracts\\n   * @param contracts Derivatives or Synthetic role contracts\\n   * @param roles Roles id\\n   * @param accounts Addresses to which give the grant\\n   */\\n  function grantSynthereumRole(\\n    address[] calldata contracts,\\n    bytes32[] calldata roles,\\n    address[] calldata accounts\\n  ) external;\\n\\n  /**\\n   * @notice Allow to revoke roles in derivatives and synthetic tokens contracts\\n   * @param contracts Derivatives or Synthetic role contracts\\n   * @param roles Roles id\\n   * @param accounts Addresses to which revoke the grant\\n   */\\n  function revokeSynthereumRole(\\n    address[] calldata contracts,\\n    bytes32[] calldata roles,\\n    address[] calldata accounts\\n  ) external;\\n\\n  /**\\n   * @notice Allow to renounce roles in derivatives and synthetic tokens contracts\\n   * @param contracts Derivatives or Synthetic role contracts\\n   * @param roles Roles id\\n   */\\n  function renounceSynthereumRole(\\n    address[] calldata contracts,\\n    bytes32[] calldata roles\\n  ) external;\\n\\n  /**\\n   * @notice Allow to call emergency shutdown in a pool or self-minting derivative\\n   * @param contracts Contracts to shutdown\\n   */\\n  function emergencyShutdown(IEmergencyShutdown[] calldata contracts) external;\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IFactoryVersioning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Provides addresses of different versions of pools factory and derivative factory\\n */\\ninterface ISynthereumFactoryVersioning {\\n  /** @notice Sets a Factory\\n   * @param factoryType Type of factory\\n   * @param version Version of the factory to be set\\n   * @param factory The pool factory address to be set\\n   */\\n  function setFactory(\\n    bytes32 factoryType,\\n    uint8 version,\\n    address factory\\n  ) external;\\n\\n  /** @notice Removes a factory\\n   * @param factoryType The type of factory to be removed\\n   * @param version Version of the factory to be removed\\n   */\\n  function removeFactory(bytes32 factoryType, uint8 version) external;\\n\\n  /** @notice Gets a factory contract address\\n   * @param factoryType The type of factory to be checked\\n   * @param version Version of the factory to be checked\\n   * @return factory Address of the factory contract\\n   */\\n  function getFactoryVersion(bytes32 factoryType, uint8 version)\\n    external\\n    view\\n    returns (address factory);\\n\\n  /** @notice Gets the number of factory versions for a specific type\\n   * @param factoryType The type of factory to be checked\\n   * @return numberOfVersions Total number of versions for a specific factory\\n   */\\n  function numberOfFactoryVersions(bytes32 factoryType)\\n    external\\n    view\\n    returns (uint8 numberOfVersions);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IDeploymentSignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Provides signature of function for deployment\\n */\\ninterface IDeploymentSignature {\\n  /**\\n   * @notice Returns the bytes4 signature of the function used for the deployment of a contract in a factory\\n   * @return signature returns signature of the deployment function\\n   */\\n  function deploymentSignature() external view returns (bytes4 signature);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ISynthereumDeployment} from '../../common/interfaces/IDeployment.sol';\\n\\n/**\\n * @title Provides interface with functions of Synthereum deployer\\n */\\ninterface ISynthereumDeployer {\\n  /**\\n   * @notice Deploy a new pool\\n   * @param poolVersion Version of the pool contract\\n   * @param poolParamsData Input params of pool constructor\\n   * @return pool Pool contract deployed\\n   */\\n  function deployPool(uint8 poolVersion, bytes calldata poolParamsData)\\n    external\\n    returns (ISynthereumDeployment pool);\\n\\n  /**\\n   * @notice Deploy a new self minting derivative contract\\n   * @param selfMintingDerVersion Version of the self minting derivative contract\\n   * @param selfMintingDerParamsData Input params of self minting derivative constructor\\n   * @return selfMintingDerivative Self minting derivative contract deployed\\n   */\\n  function deploySelfMintingDerivative(\\n    uint8 selfMintingDerVersion,\\n    bytes calldata selfMintingDerParamsData\\n  ) external returns (ISynthereumDeployment selfMintingDerivative);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Stores common interface names used throughout Synthereum.\\n */\\nlibrary SynthereumInterfaces {\\n  bytes32 public constant Deployer = 'Deployer';\\n  bytes32 public constant FactoryVersioning = 'FactoryVersioning';\\n  bytes32 public constant TokenFactory = 'TokenFactory';\\n  bytes32 public constant PoolRegistry = 'PoolRegistry';\\n  bytes32 public constant SelfMintingRegistry = 'SelfMintingRegistry';\\n  bytes32 public constant PriceFeed = 'PriceFeed';\\n  bytes32 public constant Manager = 'Manager';\\n  bytes32 public constant CreditLineController = 'CreditLineController';\\n  bytes32 public constant CollateralWhitelist = 'CollateralWhitelist';\\n  bytes32 public constant IdentifierWhitelist = 'IdentifierWhitelist';\\n  bytes32 public constant TrustedForwarder = 'TrustedForwarder';\\n}\\n\\nlibrary FactoryInterfaces {\\n  bytes32 public constant PoolFactory = 'PoolFactory';\\n  bytes32 public constant SelfMintingFactory = 'SelfMintingFactory';\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/Deployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from './interfaces/IFinder.sol';\\nimport {ISynthereumDeployer} from './interfaces/IDeployer.sol';\\nimport {\\n  ISynthereumFactoryVersioning\\n} from './interfaces/IFactoryVersioning.sol';\\nimport {ISynthereumRegistry} from './registries/interfaces/IRegistry.sol';\\nimport {ISynthereumManager} from './interfaces/IManager.sol';\\nimport {IERC20} from '../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IDeploymentSignature} from './interfaces/IDeploymentSignature.sol';\\nimport {ISynthereumDeployment} from '../common/interfaces/IDeployment.sol';\\nimport {\\n  IAccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/IAccessControlEnumerable.sol';\\nimport {SynthereumInterfaces, FactoryInterfaces} from './Constants.sol';\\nimport {Address} from '../../@openzeppelin/contracts/utils/Address.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\ncontract SynthereumDeployer is\\n  ISynthereumDeployer,\\n  AccessControlEnumerable,\\n  ReentrancyGuard\\n{\\n  using Address for address;\\n\\n  bytes32 private constant ADMIN_ROLE = 0x00;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  bytes32 private constant MINTER_ROLE = keccak256('Minter');\\n\\n  bytes32 private constant BURNER_ROLE = keccak256('Burner');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // State variables\\n  //----------------------------------------\\n\\n  ISynthereumFinder public immutable synthereumFinder;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event PoolDeployed(uint8 indexed poolVersion, address indexed newPool);\\n\\n  event SelfMintingDerivativeDeployed(\\n    uint8 indexed selfMintingDerivativeVersion,\\n    address indexed selfMintingDerivative\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the SynthereumDeployer contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   * @param roles Admin and Maintainer roles\\n   */\\n  constructor(ISynthereumFinder _synthereumFinder, Roles memory roles) {\\n    synthereumFinder = _synthereumFinder;\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Deploy a new pool\\n   * @param poolVersion Version of the pool contract\\n   * @param poolParamsData Input params of pool constructor\\n   * @return pool Pool contract deployed\\n   */\\n  function deployPool(uint8 poolVersion, bytes calldata poolParamsData)\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n    returns (ISynthereumDeployment pool)\\n  {\\n    pool = _deployPool(getFactoryVersioning(), poolVersion, poolParamsData);\\n    checkDeployment(pool, poolVersion);\\n    setSyntheticTokenRoles(pool);\\n    ISynthereumRegistry poolRegistry = getPoolRegistry();\\n    poolRegistry.register(\\n      pool.syntheticTokenSymbol(),\\n      pool.collateralToken(),\\n      poolVersion,\\n      address(pool)\\n    );\\n    emit PoolDeployed(poolVersion, address(pool));\\n  }\\n\\n  /**\\n   * @notice Deploy a new self minting derivative contract\\n   * @param selfMintingDerVersion Version of the self minting derivative contract\\n   * @param selfMintingDerParamsData Input params of self minting derivative constructor\\n   * @return selfMintingDerivative Self minting derivative contract deployed\\n   */\\n  function deploySelfMintingDerivative(\\n    uint8 selfMintingDerVersion,\\n    bytes calldata selfMintingDerParamsData\\n  )\\n    external\\n    override\\n    onlyMaintainer\\n    nonReentrant\\n    returns (ISynthereumDeployment selfMintingDerivative)\\n  {\\n    ISynthereumFactoryVersioning factoryVersioning = getFactoryVersioning();\\n    selfMintingDerivative = _deploySelfMintingDerivative(\\n      factoryVersioning,\\n      selfMintingDerVersion,\\n      selfMintingDerParamsData\\n    );\\n    checkDeployment(selfMintingDerivative, selfMintingDerVersion);\\n    address tokenCurrency = address(selfMintingDerivative.syntheticToken());\\n    addSyntheticTokenRoles(tokenCurrency, address(selfMintingDerivative));\\n    ISynthereumRegistry selfMintingRegistry = getSelfMintingRegistry();\\n    selfMintingRegistry.register(\\n      selfMintingDerivative.syntheticTokenSymbol(),\\n      selfMintingDerivative.collateralToken(),\\n      selfMintingDerVersion,\\n      address(selfMintingDerivative)\\n    );\\n    emit SelfMintingDerivativeDeployed(\\n      selfMintingDerVersion,\\n      address(selfMintingDerivative)\\n    );\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Deploys a pool contract of a particular version\\n   * @param factoryVersioning factory versioning contract\\n   * @param poolVersion Version of pool contract to deploy\\n   * @param poolParamsData Input parameters of constructor of the pool\\n   * @return pool Pool deployed\\n   */\\n  function _deployPool(\\n    ISynthereumFactoryVersioning factoryVersioning,\\n    uint8 poolVersion,\\n    bytes memory poolParamsData\\n  ) internal returns (ISynthereumDeployment pool) {\\n    address poolFactory =\\n      factoryVersioning.getFactoryVersion(\\n        FactoryInterfaces.PoolFactory,\\n        poolVersion\\n      );\\n    bytes memory poolDeploymentResult =\\n      poolFactory.functionCall(\\n        abi.encodePacked(getDeploymentSignature(poolFactory), poolParamsData),\\n        'Wrong pool deployment'\\n      );\\n    pool = ISynthereumDeployment(abi.decode(poolDeploymentResult, (address)));\\n  }\\n\\n  /**\\n   * @notice Deploys a self minting derivative contract of a particular version\\n   * @param factoryVersioning factory versioning contract\\n   * @param selfMintingDerVersion Version of self minting derivate contract to deploy\\n   * @param selfMintingDerParamsData Input parameters of constructor of self minting derivative\\n   * @return selfMintingDerivative Self minting derivative deployed\\n   */\\n  function _deploySelfMintingDerivative(\\n    ISynthereumFactoryVersioning factoryVersioning,\\n    uint8 selfMintingDerVersion,\\n    bytes calldata selfMintingDerParamsData\\n  ) internal returns (ISynthereumDeployment selfMintingDerivative) {\\n    address selfMintingDerFactory =\\n      factoryVersioning.getFactoryVersion(\\n        FactoryInterfaces.SelfMintingFactory,\\n        selfMintingDerVersion\\n      );\\n    bytes memory selfMintingDerDeploymentResult =\\n      selfMintingDerFactory.functionCall(\\n        abi.encodePacked(\\n          getDeploymentSignature(selfMintingDerFactory),\\n          selfMintingDerParamsData\\n        ),\\n        'Wrong self-minting derivative deployment'\\n      );\\n    selfMintingDerivative = ISynthereumDeployment(\\n      abi.decode(selfMintingDerDeploymentResult, (address))\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets roles of the synthetic token contract to a pool\\n   * @param pool Pool contract\\n   */\\n  function setSyntheticTokenRoles(ISynthereumDeployment pool) internal {\\n    address _pool = address(pool);\\n    IAccessControlEnumerable tokenCurrency =\\n      IAccessControlEnumerable(address(pool.syntheticToken()));\\n    if (\\n      !tokenCurrency.hasRole(MINTER_ROLE, _pool) ||\\n      !tokenCurrency.hasRole(BURNER_ROLE, _pool)\\n    ) {\\n      addSyntheticTokenRoles(address(tokenCurrency), _pool);\\n    }\\n  }\\n\\n  /**\\n   * @notice Grants minter and burner role of syntehtic token to derivative\\n   * @param tokenCurrency Address of the token contract\\n   * @param contractAddr Address of the pool or self-minting derivative\\n   */\\n  function addSyntheticTokenRoles(address tokenCurrency, address contractAddr)\\n    internal\\n  {\\n    ISynthereumManager manager = getManager();\\n    address[] memory contracts = new address[](2);\\n    bytes32[] memory roles = new bytes32[](2);\\n    address[] memory accounts = new address[](2);\\n    contracts[0] = tokenCurrency;\\n    contracts[1] = tokenCurrency;\\n    roles[0] = MINTER_ROLE;\\n    roles[1] = BURNER_ROLE;\\n    accounts[0] = contractAddr;\\n    accounts[1] = contractAddr;\\n    manager.grantSynthereumRole(contracts, roles, accounts);\\n  }\\n\\n  //----------------------------------------\\n  // Internal view functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Get factory versioning contract from the finder\\n   * @return factoryVersioning Factory versioning contract\\n   */\\n  function getFactoryVersioning()\\n    internal\\n    view\\n    returns (ISynthereumFactoryVersioning factoryVersioning)\\n  {\\n    factoryVersioning = ISynthereumFactoryVersioning(\\n      synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.FactoryVersioning\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Get pool registry contract from the finder\\n   * @return poolRegistry Registry of pools\\n   */\\n  function getPoolRegistry()\\n    internal\\n    view\\n    returns (ISynthereumRegistry poolRegistry)\\n  {\\n    poolRegistry = ISynthereumRegistry(\\n      synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.PoolRegistry\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Get self minting registry contract from the finder\\n   * @return selfMintingRegistry Registry of self-minting derivatives\\n   */\\n  function getSelfMintingRegistry()\\n    internal\\n    view\\n    returns (ISynthereumRegistry selfMintingRegistry)\\n  {\\n    selfMintingRegistry = ISynthereumRegistry(\\n      synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.SelfMintingRegistry\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Get manager contract from the finder\\n   * @return manager Synthereum manager\\n   */\\n  function getManager() internal view returns (ISynthereumManager manager) {\\n    manager = ISynthereumManager(\\n      synthereumFinder.getImplementationAddress(SynthereumInterfaces.Manager)\\n    );\\n  }\\n\\n  /**\\n   * @notice Get signature of function to deploy a contract\\n   * @param factory Factory contract\\n   * @return signature Signature of deployment function of the factory\\n   */\\n  function getDeploymentSignature(address factory)\\n    internal\\n    view\\n    returns (bytes4 signature)\\n  {\\n    signature = IDeploymentSignature(factory).deploymentSignature();\\n  }\\n\\n  /**\\n   * @notice Check correct finder and version of the deployed pool or self-minting derivative\\n   * @param poolOrDerivative Contract pool or self-minting derivative to check\\n   * @param version Pool or self-minting derivative version to check\\n   */\\n  function checkDeployment(\\n    ISynthereumDeployment poolOrDerivative,\\n    uint8 version\\n  ) internal view {\\n    require(\\n      poolOrDerivative.synthereumFinder() == synthereumFinder,\\n      'Wrong finder in deployment'\\n    );\\n    require(\\n      poolOrDerivative.version() == version,\\n      'Wrong version in deployment'\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/CollateralWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport {\\n  ISynthereumCollateralWhitelist\\n} from './interfaces/ICollateralWhitelist.sol';\\nimport {\\n  EnumerableSet\\n} from '../../@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title A contract to track a whitelist of addresses.\\n */\\ncontract SynthereumCollateralWhitelist is\\n  ISynthereumCollateralWhitelist,\\n  AccessControlEnumerable\\n{\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  bytes32 private constant ADMIN_ROLE = 0x00;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  EnumerableSet.AddressSet private collaterals;\\n\\n  event AddedToWhitelist(address indexed addedCollateral);\\n  event RemovedFromWhitelist(address indexed removedCollateral);\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Constructs the SynthereumCollateralWhitelist contract\\n   * @param roles Admin and Maintainer roles\\n   */\\n  constructor(Roles memory roles) {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  /**\\n   * @notice Adds an address to the whitelist.\\n   * @param newCollateral the new address to add.\\n   */\\n  function addToWhitelist(address newCollateral)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    require(collaterals.add(newCollateral), 'Collateral already supported');\\n    emit AddedToWhitelist(newCollateral);\\n  }\\n\\n  /**\\n   * @notice Removes an address from the whitelist.\\n   * @param collateralToRemove The existing address to remove.\\n   */\\n  function removeFromWhitelist(address collateralToRemove)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    require(collaterals.remove(collateralToRemove), 'Collateral not supported');\\n    emit RemovedFromWhitelist(collateralToRemove);\\n  }\\n\\n  /**\\n   * @notice Checks whether an address is on the whitelist.\\n   * @param collateralToCheck The address to check.\\n   * @return True if `collateralToCheck` is on the whitelist, or False.\\n   */\\n  function isOnWhitelist(address collateralToCheck)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return collaterals.contains(collateralToCheck);\\n  }\\n\\n  /**\\n   * @notice Gets all addresses that are currently included in the whitelist.\\n   * @return The list of addresses on the whitelist.\\n   */\\n  function getWhitelist() external view override returns (address[] memory) {\\n    uint256 numberOfElements = collaterals.length();\\n    address[] memory activeCollaterals = new address[](numberOfElements);\\n    for (uint256 j = 0; j < numberOfElements; j++) {\\n      activeCollaterals[j] = collaterals.at(j);\\n    }\\n    return activeCollaterals;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/IdentifierWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport {\\n  ISynthereumIdentifierWhitelist\\n} from './interfaces/IIdentifierWhitelist.sol';\\nimport {\\n  EnumerableSet\\n} from '../../@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport {StringUtils} from '../base/utils/StringUtils.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title A contract to track a whitelist of identifiers.\\n */\\ncontract SynthereumIdentifierWhitelist is\\n  ISynthereumIdentifierWhitelist,\\n  AccessControlEnumerable\\n{\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  bytes32 private constant ADMIN_ROLE = 0x00;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  EnumerableSet.Bytes32Set private identifiers;\\n\\n  event AddedToWhitelist(bytes32 indexed addedIdentifier);\\n  event RemovedFromWhitelist(bytes32 indexed removedIdentifier);\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMaintainer() {\\n    require(\\n      hasRole(MAINTAINER_ROLE, msg.sender),\\n      'Sender must be the maintainer'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @notice Constructs the SynthereumIdentifierWhitelist contract\\n   * @param roles Admin and Maintainer roles\\n   */\\n  constructor(Roles memory roles) {\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  /**\\n   * @notice Adds an identifier to the whitelist.\\n   * @param newIdentifier the new identifier to add.\\n   */\\n  function addToWhitelist(bytes32 newIdentifier)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    require(identifiers.add(newIdentifier), 'Identifier already supported');\\n    emit AddedToWhitelist(newIdentifier);\\n  }\\n\\n  /**\\n   * @notice Removes an identifier from the whitelist.\\n   * @param identifierToRemove The existing identifier to remove.\\n   */\\n  function removeFromWhitelist(bytes32 identifierToRemove)\\n    external\\n    override\\n    onlyMaintainer\\n  {\\n    require(identifiers.remove(identifierToRemove), 'Identifier not supported');\\n    emit RemovedFromWhitelist(identifierToRemove);\\n  }\\n\\n  /**\\n   * @notice Checks whether an address is on the whitelist.\\n   * @param identifierToCheck The address to check.\\n   * @return True if `identifierToCheck` is on the whitelist, or False.\\n   */\\n  function isOnWhitelist(bytes32 identifierToCheck)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    return identifiers.contains(identifierToCheck);\\n  }\\n\\n  /**\\n   * @notice Gets all identifiers that are currently included in the whitelist.\\n   * @return The list of identifiers on the whitelist.\\n   */\\n  function getWhitelist() external view override returns (bytes32[] memory) {\\n    uint256 numberOfElements = identifiers.length();\\n    bytes32[] memory activeIdentifiers = new bytes32[](numberOfElements);\\n    for (uint256 j = 0; j < numberOfElements; j++) {\\n      activeIdentifiers[j] = identifiers.at(j);\\n    }\\n    return activeIdentifiers;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/TrustedForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumTrustedForwarder} from './interfaces/ITrustedForwarder.sol';\\nimport {Address} from '../../@openzeppelin/contracts/utils/Address.sol';\\nimport {\\n  MinimalForwarder\\n} from '../../@openzeppelin/contracts/metatx/MinimalForwarder.sol';\\n\\ncontract SynthereumTrustedForwarder is\\n  ISynthereumTrustedForwarder,\\n  MinimalForwarder\\n{\\n  /**\\n   * @notice Check if the execute function reverts or not\\n   */\\n  function safeExecute(ForwardRequest calldata req, bytes calldata signature)\\n    public\\n    payable\\n    override\\n    returns (bytes memory)\\n  {\\n    (bool success, bytes memory returndata) = execute(req, signature);\\n    return\\n      Address.verifyCallResult(\\n        success,\\n        returndata,\\n        'Error in the TrustedForwarder call'\\n      );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/ICollateralWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title An interface to track a whitelist of addresses.\\n */\\ninterface ISynthereumCollateralWhitelist {\\n  /**\\n   * @notice Adds an address to the whitelist.\\n   * @param newCollateral the new address to add.\\n   */\\n  function addToWhitelist(address newCollateral) external;\\n\\n  /**\\n   * @notice Removes an address from the whitelist.\\n   * @param collateralToRemove The existing address to remove.\\n   */\\n  function removeFromWhitelist(address collateralToRemove) external;\\n\\n  /**\\n   * @notice Checks whether an address is on the whitelist.\\n   * @param collateralToCheck The address to check.\\n   * @return True if `collateralToCheck` is on the whitelist, or False.\\n   */\\n  function isOnWhitelist(address collateralToCheck)\\n    external\\n    view\\n    returns (bool);\\n\\n  /**\\n   * @notice Gets all addresses that are currently included in the whitelist.\\n   * @return The list of addresses on the whitelist.\\n   */\\n  function getWhitelist() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/IIdentifierWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title An interface to track a whitelist of identifiers.\\n */\\ninterface ISynthereumIdentifierWhitelist {\\n  /**\\n   * @notice Adds an identifier to the whitelist.\\n   * @param newIdentifier the new identifier to add.\\n   */\\n  function addToWhitelist(bytes32 newIdentifier) external;\\n\\n  /**\\n   * @notice Removes an identifier from the whitelist.\\n   * @param identifierToRemove The existing identifier to remove.\\n   */\\n  function removeFromWhitelist(bytes32 identifierToRemove) external;\\n\\n  /**\\n   * @notice Checks whether an address is on the whitelist.\\n   * @param identifierToCheck The address to check.\\n   * @return True if `identifierToCheck` is on the whitelist, or False.\\n   */\\n  function isOnWhitelist(bytes32 identifierToCheck)\\n    external\\n    view\\n    returns (bool);\\n\\n  /**\\n   * @notice Gets all identifiers that are currently included in the whitelist.\\n   * @return The list of identifiers on the whitelist.\\n   */\\n  function getWhitelist() external view returns (bytes32[] memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/registries/SelfMintingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {SynthereumRegistry} from './Registry.sol';\\nimport {ISynthereumFinder} from '../interfaces/IFinder.sol';\\n\\n/**\\n * @title Register and track all the self-minting derivatives deployed\\n */\\ncontract SelfMintingRegistry is SynthereumRegistry {\\n  /**\\n   * @notice Constructs the SelfMintingRegistry contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   */\\n  constructor(ISynthereumFinder _synthereumFinder)\\n    SynthereumRegistry('SELF MINTING REGISTRY', _synthereumFinder)\\n  {}\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/registries/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title Provides interface with functions of SynthereumRegistry\\n */\\n\\ninterface ISynthereumRegistry {\\n  /**\\n   * @notice Allow the deployer to register an element\\n   * @param syntheticTokenSymbol Symbol of the syntheticToken\\n   * @param collateralToken Collateral ERC20 token of the element deployed\\n   * @param version Version of the element deployed\\n   * @param element Address of the element deployed\\n   */\\n  function register(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version,\\n    address element\\n  ) external;\\n\\n  /**\\n   * @notice Returns if a particular element exists or not\\n   * @param syntheticTokenSymbol Synthetic token symbol of the element\\n   * @param collateralToken ERC20 contract of collateral currency\\n   * @param version Version of the element\\n   * @param element Contract of the element to check\\n   * @return isElementDeployed Returns true if a particular element exists, otherwise false\\n   */\\n  function isDeployed(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version,\\n    address element\\n  ) external view returns (bool isElementDeployed);\\n\\n  /**\\n   * @notice Returns all the elements with partcular symbol, collateral and version\\n   * @param syntheticTokenSymbol Synthetic token symbol of the element\\n   * @param collateralToken ERC20 contract of collateral currency\\n   * @param version Version of the element\\n   * @return List of all elements\\n   */\\n  function getElements(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version\\n  ) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns all the synthetic token symbol used\\n   * @return List of all synthetic token symbol\\n   */\\n  function getSyntheticTokens() external view returns (string[] memory);\\n\\n  /**\\n   * @notice Returns all the versions used\\n   * @return List of all versions\\n   */\\n  function getVersions() external view returns (uint8[] memory);\\n\\n  /**\\n   * @notice Returns all the collaterals used\\n   * @return List of all collaterals\\n   */\\n  function getCollaterals() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/registries/Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumRegistry} from './interfaces/IRegistry.sol';\\nimport {ISynthereumFinder} from '../interfaces/IFinder.sol';\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SynthereumInterfaces} from '../Constants.sol';\\nimport {\\n  EnumerableSet\\n} from '../../../@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport {StringUtils} from '../../base/utils/StringUtils.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n/**\\n * @title Register and track all the pools deployed\\n */\\ncontract SynthereumRegistry is ISynthereumRegistry, ReentrancyGuard {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using StringUtils for string;\\n  using StringUtils for bytes32;\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  ISynthereumFinder public immutable synthereumFinder;\\n\\n  string public registryType;\\n\\n  mapping(string => mapping(IERC20 => mapping(uint8 => EnumerableSet.AddressSet)))\\n    private symbolToElements;\\n\\n  EnumerableSet.Bytes32Set private syntheticTokens;\\n\\n  EnumerableSet.AddressSet private collaterals;\\n\\n  EnumerableSet.UintSet private versions;\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the SynthereumRegistry contract\\n   * @param _registryType Type of registry\\n   * @param _synthereumFinder Synthereum finder contract\\n   */\\n  constructor(string memory _registryType, ISynthereumFinder _synthereumFinder)\\n  {\\n    synthereumFinder = _synthereumFinder;\\n    registryType = _registryType;\\n  }\\n\\n  /**\\n   * @notice Allow the deployer to register an element\\n   * @param syntheticTokenSymbol Symbol of the syntheticToken\\n   * @param collateralToken Collateral ERC20 token of the element deployed\\n   * @param version Version of the element deployed\\n   * @param element Address of the element deployed\\n   */\\n  function register(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version,\\n    address element\\n  ) external override nonReentrant {\\n    address deployer =\\n      ISynthereumFinder(synthereumFinder).getImplementationAddress(\\n        SynthereumInterfaces.Deployer\\n      );\\n    require(msg.sender == deployer, 'Sender must be Synthereum deployer');\\n    symbolToElements[syntheticTokenSymbol][collateralToken][version].add(\\n      element\\n    );\\n    syntheticTokens.add(syntheticTokenSymbol.stringToBytes32());\\n    collaterals.add(address(collateralToken));\\n    versions.add(version);\\n  }\\n\\n  /**\\n   * @notice Returns if a particular element exists or not\\n   * @param syntheticTokenSymbol Synthetic token symbol of the element\\n   * @param collateralToken ERC20 contract of collateral currency\\n   * @param version Version of the element\\n   * @param element Contract of the element to check\\n   * @return isElementDeployed Returns true if a particular element exists, otherwise false\\n   */\\n  function isDeployed(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version,\\n    address element\\n  ) external view override returns (bool isElementDeployed) {\\n    isElementDeployed = symbolToElements[syntheticTokenSymbol][collateralToken][\\n      version\\n    ]\\n      .contains(element);\\n  }\\n\\n  /**\\n   * @notice Returns all the elements with partcular symbol, collateral and version\\n   * @param syntheticTokenSymbol Synthetic token symbol of the element\\n   * @param collateralToken ERC20 contract of collateral currency\\n   * @param version Version of the element\\n   * @return List of all elements\\n   */\\n  function getElements(\\n    string calldata syntheticTokenSymbol,\\n    IERC20 collateralToken,\\n    uint8 version\\n  ) external view override returns (address[] memory) {\\n    EnumerableSet.AddressSet storage elementSet =\\n      symbolToElements[syntheticTokenSymbol][collateralToken][version];\\n    uint256 numberOfElements = elementSet.length();\\n    address[] memory elements = new address[](numberOfElements);\\n    for (uint256 j = 0; j < numberOfElements; j++) {\\n      elements[j] = elementSet.at(j);\\n    }\\n    return elements;\\n  }\\n\\n  /**\\n   * @notice Returns all the synthetic token symbol used\\n   * @return List of all synthetic token symbol\\n   */\\n  function getSyntheticTokens()\\n    external\\n    view\\n    override\\n    returns (string[] memory)\\n  {\\n    uint256 numberOfSynthTokens = syntheticTokens.length();\\n    string[] memory synthTokens = new string[](numberOfSynthTokens);\\n    for (uint256 j = 0; j < numberOfSynthTokens; j++) {\\n      synthTokens[j] = syntheticTokens.at(j).bytes32ToString();\\n    }\\n    return synthTokens;\\n  }\\n\\n  /**\\n   * @notice Returns all the versions used\\n   * @return List of all versions\\n   */\\n  function getVersions() external view override returns (uint8[] memory) {\\n    uint256 numberOfVersions = versions.length();\\n    uint8[] memory actualVersions = new uint8[](numberOfVersions);\\n    for (uint256 j = 0; j < numberOfVersions; j++) {\\n      actualVersions[j] = uint8(versions.at(j));\\n    }\\n    return actualVersions;\\n  }\\n\\n  /**\\n   * @notice Returns all the collaterals used\\n   * @return List of all collaterals\\n   */\\n  function getCollaterals() external view override returns (address[] memory) {\\n    uint256 numberOfCollaterals = collaterals.length();\\n    address[] memory collateralAddresses = new address[](numberOfCollaterals);\\n    for (uint256 j = 0; j < numberOfCollaterals; j++) {\\n      collateralAddresses[j] = collaterals.at(j);\\n    }\\n    return collateralAddresses;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/registries/PoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {SynthereumRegistry} from './Registry.sol';\\nimport {ISynthereumFinder} from '../interfaces/IFinder.sol';\\n\\n/**\\n * @title Register and track all the pools deployed\\n */\\ncontract SynthereumPoolRegistry is SynthereumRegistry {\\n  /**\\n   * @notice Constructs the SynthereumPoolRegistry contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   */\\n  constructor(ISynthereumFinder _synthereumFinder)\\n    SynthereumRegistry('POOL REGISTRY', _synthereumFinder)\\n  {}\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/CreditLineCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {ICreditLineController} from './interfaces/ICreditLineController.sol';\\nimport {ICreditLineStorage} from './interfaces/ICreditLineStorage.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from '../../tokens/interfaces/BaseControlledMintableBurnableERC20.sol';\\nimport {CreditLineLib} from './CreditLineLib.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\nimport {CreditLine} from './CreditLine.sol';\\n\\n/**\\n * @title Self-Minting Contract creator.\\n * @notice Factory contract to create new self-minting derivative\\n */\\ncontract CreditLineCreator {\\n  using FixedPoint for FixedPoint.Unsigned;\\n\\n  struct Params {\\n    IStandardERC20 collateralToken;\\n    bytes32 priceFeedIdentifier;\\n    string syntheticName;\\n    string syntheticSymbol;\\n    address syntheticToken;\\n    ICreditLineStorage.Fee fee;\\n    uint256 liquidationPercentage;\\n    uint256 capMintAmount;\\n    uint256 collateralRequirement;\\n    FixedPoint.Unsigned minSponsorTokens;\\n    address excessTokenBeneficiary;\\n    uint8 version;\\n  }\\n\\n  // Address of Synthereum Finder\\n  ISynthereumFinder public immutable synthereumFinder;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n  event CreatedSelfMintingDerivative(\\n    address indexed selfMintingAddress,\\n    uint8 indexed version,\\n    address indexed deployerAddress\\n  );\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the Perpetual contract.\\n   * @param _synthereumFinder Synthereum Finder address used to discover other contracts\\n   */\\n  constructor(address _synthereumFinder) {\\n    synthereumFinder = ISynthereumFinder(_synthereumFinder);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Creates an instance of creditLine\\n   * @param params is a `ConstructorParams` object from creditLine.\\n   * @return creditLine address of the deployed contract.\\n   */\\n  function createSelfMintingDerivative(Params calldata params)\\n    public\\n    virtual\\n    returns (CreditLine creditLine)\\n  {\\n    // Create a new synthetic token using the params.\\n    require(bytes(params.syntheticName).length != 0, 'Missing synthetic name');\\n    require(\\n      bytes(params.syntheticSymbol).length != 0,\\n      'Missing synthetic symbol'\\n    );\\n    require(\\n      params.syntheticToken != address(0),\\n      'Synthetic token address cannot be 0x00'\\n    );\\n\\n    BaseControlledMintableBurnableERC20 tokenCurrency =\\n      BaseControlledMintableBurnableERC20(params.syntheticToken);\\n    require(\\n      keccak256(abi.encodePacked(tokenCurrency.name())) ==\\n        keccak256(abi.encodePacked(params.syntheticName)),\\n      'Wrong synthetic token name'\\n    );\\n    require(\\n      keccak256(abi.encodePacked(tokenCurrency.symbol())) ==\\n        keccak256(abi.encodePacked(params.syntheticSymbol)),\\n      'Wrong synthetic token symbol'\\n    );\\n\\n    creditLine = new CreditLine(_convertParams(params));\\n\\n    _setControllerValues(\\n      address(creditLine),\\n      params.fee,\\n      params.liquidationPercentage,\\n      params.capMintAmount,\\n      params.collateralRequirement\\n    );\\n\\n    emit CreatedSelfMintingDerivative(\\n      address(creditLine),\\n      params.version,\\n      msg.sender\\n    );\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  // Converts createPerpetual params to constructor params.\\n  function _convertParams(Params calldata params)\\n    internal\\n    view\\n    returns (CreditLine.PositionManagerParams memory constructorParams)\\n  {\\n    constructorParams.synthereumFinder = synthereumFinder;\\n\\n    require(\\n      params.excessTokenBeneficiary != address(0),\\n      'Token Beneficiary cannot be 0x00'\\n    );\\n\\n    constructorParams.syntheticToken = IMintableBurnableERC20(\\n      address(params.syntheticToken)\\n    );\\n    constructorParams.collateralToken = params.collateralToken;\\n    constructorParams.priceFeedIdentifier = params.priceFeedIdentifier;\\n    constructorParams.minSponsorTokens = params.minSponsorTokens;\\n    constructorParams.excessTokenBeneficiary = params.excessTokenBeneficiary;\\n    constructorParams.version = params.version;\\n  }\\n\\n  /** @notice Sets the controller values for a self-minting derivative\\n   * @param derivative Address of the derivative to set controller values\\n   * @param feeStruct The fee config params\\n   * @param capMintAmount Cap on mint amount. How much synthetic tokens can be minted through a self-minting derivative.\\n   * This value is updatable\\n   */\\n  function _setControllerValues(\\n    address derivative,\\n    ICreditLineStorage.Fee memory feeStruct,\\n    uint256 liquidationRewardPercentage,\\n    uint256 capMintAmount,\\n    uint256 collateralRequirement\\n  ) internal {\\n    ICreditLineController creditLineController =\\n      ICreditLineController(\\n        synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.CreditLineController\\n        )\\n      );\\n\\n    // prepare function calls args\\n    address[] memory derivatives = new address[](1);\\n    derivatives[0] = derivative;\\n\\n    uint256[] memory capMintAmounts = new uint256[](1);\\n    capMintAmounts[0] = capMintAmount;\\n\\n    uint256[] memory collateralRequirements = new uint256[](1);\\n    collateralRequirements[0] = collateralRequirement;\\n\\n    uint256[] memory feePercentages = new uint256[](1);\\n    feePercentages[0] = feeStruct.feePercentage;\\n\\n    uint256[] memory liqPercentages = new uint256[](1);\\n    liqPercentages[0] = liquidationRewardPercentage;\\n\\n    address[][] memory feeRecipients = new address[][](1);\\n    feeRecipients[0] = feeStruct.feeRecipients;\\n\\n    uint32[][] memory feeProportions = new uint32[][](1);\\n    feeProportions[0] = feeStruct.feeProportions;\\n\\n    // set the derivative over collateralization percentage\\n    creditLineController.setCollateralRequirement(\\n      derivatives,\\n      collateralRequirements\\n    );\\n\\n    // set the derivative fee configuration\\n    creditLineController.setFeePercentage(derivatives, feePercentages);\\n    creditLineController.setFeeRecipients(\\n      derivatives,\\n      feeRecipients,\\n      feeProportions\\n    );\\n\\n    // set the derivative cap mint amount\\n    creditLineController.setCapMintAmount(derivatives, capMintAmounts);\\n\\n    // set the derivative liquidation reward percentage\\n    creditLineController.setLiquidationRewardPercentage(\\n      derivatives,\\n      liqPercentages\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/CreditLineFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  IDeploymentSignature\\n} from '../../core/interfaces/IDeploymentSignature.sol';\\nimport {\\n  ISynthereumCollateralWhitelist\\n} from '../../core/interfaces/ICollateralWhitelist.sol';\\nimport {\\n  ISynthereumIdentifierWhitelist\\n} from '../../core/interfaces/IIdentifierWhitelist.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {CreditLineCreator} from './CreditLineCreator.sol';\\nimport {CreditLine} from './CreditLine.sol';\\nimport {FactoryConditions} from '../../common/FactoryConditions.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n/** @title Contract factory of self-minting derivatives\\n */\\ncontract CreditLineFactory is\\n  IDeploymentSignature,\\n  ReentrancyGuard,\\n  FactoryConditions,\\n  CreditLineCreator\\n{\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  bytes4 public immutable override deploymentSignature;\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the CreditLineFactory contract\\n   * @param _synthereumFinder Synthereum Finder address used to discover other contracts\\n   */\\n  constructor(address _synthereumFinder) CreditLineCreator(_synthereumFinder) {\\n    deploymentSignature = this.createSelfMintingDerivative.selector;\\n  }\\n\\n  /**\\n   * @notice Check if the sender is the deployer and deploy a new creditLine contract\\n   * @param params is a `ConstructorParams` object from creditLine.\\n   * @return creditLine address of the deployed contract.\\n   */\\n  function createSelfMintingDerivative(Params calldata params)\\n    public\\n    override\\n    nonReentrant\\n    returns (CreditLine creditLine)\\n  {\\n    checkDeploymentConditions(\\n      synthereumFinder,\\n      params.collateralToken,\\n      params.priceFeedIdentifier\\n    );\\n    creditLine = super.createSelfMintingDerivative(params);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/CreditLineController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {ICreditLineController} from './interfaces/ICreditLineController.sol';\\nimport {\\n  ISynthereumRegistry\\n} from '../../core/registries/interfaces/IRegistry.sol';\\nimport {ICreditLine} from './interfaces/ICreditLine.sol';\\nimport {\\n  ISynthereumFactoryVersioning\\n} from '../../core/interfaces/IFactoryVersioning.sol';\\nimport {ICreditLineStorage} from './interfaces/ICreditLineStorage.sol';\\nimport {\\n  SynthereumInterfaces,\\n  FactoryInterfaces\\n} from '../../core/Constants.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title SelfMintingController\\n * Set capMintAmount, and fee recipient, proportions and percentage of each self-minting derivative\\n */\\n\\ncontract CreditLineController is\\n  ICreditLineController,\\n  AccessControlEnumerable\\n{\\n  using FixedPoint for FixedPoint.Unsigned;\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //Describe role structure\\n  struct Roles {\\n    address admin;\\n    address maintainer;\\n  }\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  ISynthereumFinder public immutable synthereumFinder;\\n\\n  uint8 public immutable selfMintingVersion;\\n\\n  mapping(address => uint256) private capMint;\\n\\n  mapping(address => uint256) private liquidationReward;\\n\\n  mapping(address => uint256) private collateralRequirement;\\n\\n  mapping(address => ICreditLineStorage.Fee) private fee;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event SetCapMintAmount(\\n    address indexed selfMintingDerivative,\\n    uint256 capMintAmount\\n  );\\n\\n  event SetFeePercentage(\\n    address indexed selfMintingDerivative,\\n    uint256 feePercentage\\n  );\\n\\n  event SetFeeRecipients(\\n    address indexed selfMintingDerivative,\\n    address[] feeRecipient,\\n    uint32[] feeProportions\\n  );\\n\\n  event SetLiquidationReward(\\n    address indexed selfMintingDerivative,\\n    uint256 liquidationReward\\n  );\\n\\n  event SetCollateralRequirement(\\n    address indexed selfMintingDerivative,\\n    uint256 collateralRequirement\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n  modifier onlyMaintainerOrSelfMintingFactory() {\\n    if (hasRole(MAINTAINER_ROLE, msg.sender)) {\\n      _;\\n    } else {\\n      ISynthereumFactoryVersioning factoryVersioning =\\n        ISynthereumFactoryVersioning(\\n          synthereumFinder.getImplementationAddress(\\n            SynthereumInterfaces.FactoryVersioning\\n          )\\n        );\\n      uint256 numberOfFactories =\\n        factoryVersioning.numberOfFactoryVersions(\\n          FactoryInterfaces.SelfMintingFactory\\n        );\\n      uint256 counter = 0;\\n      for (uint8 i = 0; counter < numberOfFactories; i++) {\\n        try\\n          factoryVersioning.getFactoryVersion(\\n            FactoryInterfaces.SelfMintingFactory,\\n            i\\n          )\\n        returns (address factory) {\\n          if (msg.sender == factory) {\\n            _;\\n            break;\\n          } else {\\n            counter++;\\n          }\\n        } catch {}\\n      }\\n      if (numberOfFactories == counter) {\\n        revert('Sender must be the maintainer or a self-minting factory');\\n      }\\n    }\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the SynthereumManager contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   * @param roles Admin and maintainer roles\\n   * @param version Version of self-minting contracts on which this controller has setting grants\\n   */\\n  constructor(\\n    ISynthereumFinder _synthereumFinder,\\n    Roles memory roles,\\n    uint8 version\\n  ) {\\n    synthereumFinder = _synthereumFinder;\\n    selfMintingVersion = version;\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MAINTAINER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, roles.admin);\\n    _setupRole(MAINTAINER_ROLE, roles.maintainer);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n  function setCollateralRequirement(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata collateralRequirements\\n  ) external override onlyMaintainerOrSelfMintingFactory {\\n    require(\\n      selfMintingDerivatives.length > 0,\\n      'No self-minting derivatives passed'\\n    );\\n    require(\\n      selfMintingDerivatives.length == collateralRequirements.length,\\n      'Number of derivatives and overcollaterals must be the same'\\n    );\\n    bool isMaintainer = hasRole(MAINTAINER_ROLE, msg.sender);\\n    for (uint256 j; j < selfMintingDerivatives.length; j++) {\\n      ICreditLine creditLineDerivative = ICreditLine(selfMintingDerivatives[j]);\\n      uint8 version = creditLineDerivative.version();\\n      require(version == selfMintingVersion, 'Wrong self-minting version');\\n      if (isMaintainer) {\\n        checkSelfMintingDerivativeRegistration(creditLineDerivative, version);\\n      }\\n      _setCollateralRequirement(\\n        address(creditLineDerivative),\\n        collateralRequirements[j]\\n      );\\n    }\\n  }\\n\\n  function setCapMintAmount(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata capMintAmounts\\n  ) external override onlyMaintainerOrSelfMintingFactory {\\n    require(\\n      selfMintingDerivatives.length > 0,\\n      'No self-minting derivatives passed'\\n    );\\n    require(\\n      selfMintingDerivatives.length == capMintAmounts.length,\\n      'Number of derivatives and mint cap amounts must be the same'\\n    );\\n    bool isMaintainer = hasRole(MAINTAINER_ROLE, msg.sender);\\n    for (uint256 j; j < selfMintingDerivatives.length; j++) {\\n      ICreditLine creditLineDerivative = ICreditLine(selfMintingDerivatives[j]);\\n      uint8 version = creditLineDerivative.version();\\n      require(version == selfMintingVersion, 'Wrong self-minting version');\\n      if (isMaintainer) {\\n        checkSelfMintingDerivativeRegistration(creditLineDerivative, version);\\n      }\\n      _setCapMintAmount(address(creditLineDerivative), capMintAmounts[j]);\\n    }\\n  }\\n\\n  function setFeePercentage(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata feePercentages\\n  ) external override onlyMaintainerOrSelfMintingFactory {\\n    uint256 selfMintingDerCount = selfMintingDerivatives.length;\\n    require(selfMintingDerCount > 0, 'No self-minting derivatives passed');\\n    require(\\n      selfMintingDerCount == feePercentages.length,\\n      'Number of derivatives and fee percentages must be the same'\\n    );\\n    bool isMaintainer = hasRole(MAINTAINER_ROLE, msg.sender);\\n    for (uint256 j; j < selfMintingDerCount; j++) {\\n      ICreditLine creditLineDerivative = ICreditLine(selfMintingDerivatives[j]);\\n      uint8 version = creditLineDerivative.version();\\n      require(version == selfMintingVersion, 'Wrong self-minting version');\\n      if (isMaintainer) {\\n        checkSelfMintingDerivativeRegistration(creditLineDerivative, version);\\n      }\\n      _setFeePercentage(address(creditLineDerivative), feePercentages[j]);\\n    }\\n  }\\n\\n  function setFeeRecipients(\\n    address[] calldata selfMintingDerivatives,\\n    address[][] calldata feeRecipients,\\n    uint32[][] calldata feeProportions\\n  ) external override onlyMaintainerOrSelfMintingFactory {\\n    uint256 selfMintingDerCount = selfMintingDerivatives.length;\\n    require(selfMintingDerCount > 0, 'No self-minting derivatives passed');\\n    require(\\n      selfMintingDerCount == feeRecipients.length,\\n      'Mismatch between derivatives to update and fee recipients'\\n    );\\n    require(\\n      selfMintingDerCount == feeProportions.length,\\n      'Mismatch between derivatives to update and fee proportions'\\n    );\\n    bool isMaintainer = hasRole(MAINTAINER_ROLE, msg.sender);\\n    // update each derivative fee parameters\\n    for (uint256 j; j < selfMintingDerCount; j++) {\\n      ICreditLine creditLineDerivative = ICreditLine(selfMintingDerivatives[j]);\\n      uint8 version = creditLineDerivative.version();\\n      require(version == selfMintingVersion, 'Wrong self-minting version');\\n      if (isMaintainer) {\\n        checkSelfMintingDerivativeRegistration(creditLineDerivative, version);\\n      }\\n      _setFeeRecipients(\\n        address(creditLineDerivative),\\n        feeRecipients[j],\\n        feeProportions[j]\\n      );\\n    }\\n  }\\n\\n  function setLiquidationRewardPercentage(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata _liquidationRewards\\n  ) external override onlyMaintainerOrSelfMintingFactory {\\n    uint256 selfMintingDerCount = selfMintingDerivatives.length;\\n    require(selfMintingDerCount > 0, 'No self-minting derivatives passed');\\n    require(\\n      selfMintingDerCount == _liquidationRewards.length,\\n      'Mismatch between derivatives to update and liquidation rewards'\\n    );\\n\\n    bool isMaintainer = hasRole(MAINTAINER_ROLE, msg.sender);\\n    for (uint256 j; j < selfMintingDerCount; j++) {\\n      ICreditLine creditLineDerivative = ICreditLine(selfMintingDerivatives[j]);\\n      uint8 version = creditLineDerivative.version();\\n      require(version == selfMintingVersion, 'Wrong self-minting version');\\n      if (isMaintainer) {\\n        checkSelfMintingDerivativeRegistration(creditLineDerivative, version);\\n      }\\n      _setLiquidationReward(selfMintingDerivatives[j], _liquidationRewards[j]);\\n    }\\n  }\\n\\n  function getCollateralRequirement(address selfMintingDerivative)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return collateralRequirement[selfMintingDerivative];\\n  }\\n\\n  function getLiquidationRewardPercentage(address selfMintingDerivative)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return liquidationReward[selfMintingDerivative];\\n  }\\n\\n  function getFeeInfo(address selfMintingDerivative)\\n    external\\n    view\\n    override\\n    returns (ICreditLineStorage.Fee memory)\\n  {\\n    return fee[selfMintingDerivative];\\n  }\\n\\n  function feePercentage(address selfMintingDerivative)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return fee[selfMintingDerivative].feePercentage;\\n  }\\n\\n  function feeRecipientsInfo(address selfMintingDerivative)\\n    external\\n    view\\n    override\\n    returns (\\n      address[] memory,\\n      uint32[] memory,\\n      uint256\\n    )\\n  {\\n    ICreditLineStorage.Fee storage _feeData = fee[selfMintingDerivative];\\n    return (\\n      _feeData.feeRecipients,\\n      _feeData.feeProportions,\\n      _feeData.totalFeeProportions\\n    );\\n  }\\n\\n  function getCapMintAmount(address selfMintingDerivative)\\n    external\\n    view\\n    override\\n    returns (uint256 capMintAmount)\\n  {\\n    return capMint[selfMintingDerivative];\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n\\n  function _setLiquidationReward(\\n    address selfMintingDerivative,\\n    uint256 liqReward\\n  ) internal {\\n    require(\\n      liquidationReward[selfMintingDerivative] != liqReward,\\n      'Liquidation reward is the same'\\n    );\\n    require(\\n      liqReward > 0 && liqReward < 10**18,\\n      'Liquidation reward must be between 0 and 100%'\\n    );\\n    liquidationReward[selfMintingDerivative] = liqReward;\\n    emit SetLiquidationReward(selfMintingDerivative, liqReward);\\n  }\\n\\n  function _setCollateralRequirement(\\n    address selfMintingDerivative,\\n    uint256 percentage\\n  ) internal {\\n    require(\\n      collateralRequirement[selfMintingDerivative] != percentage,\\n      'Collateral requirement is the same'\\n    );\\n    require(\\n      percentage > 10**18,\\n      'Overcollateralisation must be bigger than 100%'\\n    );\\n    collateralRequirement[selfMintingDerivative] = percentage;\\n    emit SetCollateralRequirement(selfMintingDerivative, percentage);\\n  }\\n\\n  function _setFeeRecipients(\\n    address selfMintingDerivative,\\n    address[] calldata feeRecipients,\\n    uint32[] calldata feeProportions\\n  ) internal {\\n    uint256 totalActualFeeProportions = 0;\\n\\n    // Store the sum of all proportions\\n    for (uint256 i = 0; i < feeProportions.length; i++) {\\n      totalActualFeeProportions += feeProportions[i];\\n\\n      fee[selfMintingDerivative].feeRecipients = feeRecipients;\\n      fee[selfMintingDerivative].feeProportions = feeProportions;\\n      fee[selfMintingDerivative]\\n        .totalFeeProportions = totalActualFeeProportions;\\n\\n      emit SetFeeRecipients(\\n        selfMintingDerivative,\\n        feeRecipients,\\n        feeProportions\\n      );\\n    }\\n  }\\n\\n  function _setFeePercentage(\\n    address selfMintingDerivative,\\n    uint256 _feePercentage\\n  ) internal {\\n    require(\\n      fee[selfMintingDerivative].feePercentage != _feePercentage,\\n      'Fee percentage is the same'\\n    );\\n    require(_feePercentage <= 10**18, 'Fee percentage must be less than 100%');\\n    fee[selfMintingDerivative].feePercentage = _feePercentage;\\n    emit SetFeePercentage(selfMintingDerivative, _feePercentage);\\n  }\\n\\n  function _setCapMintAmount(\\n    address selfMintingDerivative,\\n    uint256 capMintAmount\\n  ) internal {\\n    require(\\n      capMint[selfMintingDerivative] != capMintAmount,\\n      'Cap mint amount is the same'\\n    );\\n    capMint[selfMintingDerivative] = capMintAmount;\\n    emit SetCapMintAmount(selfMintingDerivative, capMintAmount);\\n  }\\n\\n  /**\\n   * @notice Check if a self-minting derivative is registered with the SelfMintingRegistry\\n   * @param selfMintingDerivative Self-minting derivative contract\\n   * @param version version of self-mintinting derivative\\n   */\\n  function checkSelfMintingDerivativeRegistration(\\n    ICreditLine selfMintingDerivative,\\n    uint8 version\\n  ) internal view {\\n    ISynthereumRegistry selfMintingRegistry =\\n      ISynthereumRegistry(\\n        synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.SelfMintingRegistry\\n        )\\n      );\\n    require(\\n      selfMintingRegistry.isDeployed(\\n        selfMintingDerivative.syntheticTokenSymbol(),\\n        selfMintingDerivative.collateralToken(),\\n        version,\\n        address(selfMintingDerivative)\\n      ),\\n      'Self-minting derivative not registred'\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/interfaces/ICreditLine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from '../../../core/interfaces/IFinder.sol';\\nimport {\\n  IStandardERC20,\\n  IERC20\\n} from '../../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  ISynthereumDeployment\\n} from '../../../common/interfaces/IDeployment.sol';\\nimport {\\n  IEmergencyShutdown\\n} from '../../../common/interfaces/IEmergencyShutdown.sol';\\nimport {ICreditLineStorage} from './ICreditLineStorage.sol';\\nimport {ITypology} from '../../../common/interfaces/ITypology.sol';\\nimport {\\n  FixedPoint\\n} from '../../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\n\\ninterface ICreditLine is ITypology, IEmergencyShutdown, ISynthereumDeployment {\\n  /**\\n   * @notice Transfers `collateralAmount` into the caller's position.\\n   * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n   * at least `collateralAmount` of collateral token\\n   * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n   */\\n  function deposit(uint256 collateralAmount) external;\\n\\n  /**\\n   * @notice Transfers `collateralAmount` into the specified sponsor's position.\\n   * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\n   * at least `collateralAmount` of collateralCurrency.\\n   * @param sponsor the sponsor to credit the deposit to.\\n   * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n   */\\n  function depositTo(address sponsor, uint256 collateralAmount) external;\\n\\n  /**\\n   * @notice Transfers `collateralAmount` from the sponsor's position to the sponsor.\\n   * @dev Reverts if the withdrawal puts this position's collateralization ratio below the collateral requirement\\n   * @param collateralAmount is the amount of collateral to withdraw.\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   */\\n  function withdraw(uint256 collateralAmount)\\n    external\\n    returns (uint256 amountWithdrawn);\\n\\n  /**\\n   * @notice Pulls `collateralAmount` into the sponsor's position and mints `numTokens` of `tokenCurrency`.\\n   * Mints new debt tokens by creating a new position or by augmenting an existing position.\\n   * @dev Can only be called by a token sponsor. This contract must be approved to spend at least `collateralAmount` of\\n   * `collateralCurrency`.\\n   * @param collateralAmount is the number of collateral tokens to collateralize the position with\\n   * @param numTokens is the number of debt tokens to mint to sponsor.\\n   */\\n  function create(uint256 collateralAmount, uint256 numTokens)\\n    external\\n    returns (uint256 feeAmount);\\n\\n  /**\\n   * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of collateral\\n   * @dev Can only be called by a token sponsor- This contract must be approved to spend at least `numTokens` of\\n   * `tokenCurrency`.\\n   * @param numTokens is the number of tokens to be burnt.\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   * @return feeAmount incurred fees in collateral token.\\n   */\\n  function redeem(uint256 numTokens)\\n    external\\n    returns (uint256 amountWithdrawn, uint256 feeAmount);\\n\\n  /**\\n   * @notice Burns `numTokens` of `tokenCurrency` to decrease sponsors position size, without sending back collateral.\\n   * This is done by a sponsor to increase position CR.\\n   * @dev Can only be called by token sponsor. This contract must be approved to spend `numTokens` of `tokenCurrency`.\\n   * @param numTokens is the number of tokens to be burnt.\\n   */\\n  function repay(uint256 numTokens) external returns (uint256 daoFeeAmount);\\n\\n  /**\\n   * @notice Liquidate sponsor position for an amount of synthetic tokens undercollateralized\\n   * @notice Revert if position is not undercollateralized\\n   * @param sponsor Address of sponsor to be liquidated.\\n   * @param maxTokensToLiquidate Max number of synthetic tokens to be liquidated\\n   * @return tokensLiquidated Amount of debt tokens burned\\n   * @return collateralLiquidated Amount of received collateral equal to the value of tokens liquidated\\n   * @return collateralReward Amount of received collateral as reward for the liquidation\\n   */\\n  function liquidate(address sponsor, uint256 maxTokensToLiquidate)\\n    external\\n    returns (\\n      uint256 tokensLiquidated,\\n      uint256 collateralLiquidated,\\n      uint256 collateralReward\\n    );\\n\\n  /**\\n   * @notice When in emergency shutdown state all token holders and sponsor can redeem their tokens and\\n   * remaining collateral at the prevailing price defined by the on-chain oracle\\n   * @dev This burns all tokens from the caller of `tokenCurrency` and sends back the resolved settlement value of\\n   * collateral. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.\\n   * @dev This contract must have the Burner role for the `tokenCurrency`.\\n   * @return amountWithdrawn The actual amount of collateral withdrawn.\\n   */\\n  function settleEmergencyShutdown() external returns (uint256 amountWithdrawn);\\n\\n  /**\\n   * @notice Withdraw fees gained by the sender\\n   * @return feeClaimed Amount of fee claimed\\n   */\\n  function claimFee() external returns (uint256 feeClaimed);\\n\\n  /**\\n   * @notice trim any excess funds in the contract to the excessTokenBeneficiary address\\n   * @return amount the amount of tokens trimmed\\n   */\\n  function trimExcess(IERC20 token) external returns (uint256 amount);\\n\\n  /**\\n   * @notice Delete a TokenSponsor position. This function can only be called by the contract itself.\\n   * @param sponsor address of the TokenSponsor.\\n   */\\n  function deleteSponsorPosition(address sponsor) external;\\n\\n  /**\\n   * @notice Returns the minimum amount of tokens a sponsor must mint\\n   * @return amount the value\\n   */\\n  function minSponsorTokens() external view returns (uint256 amount);\\n\\n  /**\\n   * @notice Returns the address of the trim excess tokens receiver\\n   * @return beneficiary the addess\\n   */\\n  function excessTokensBeneficiary()\\n    external\\n    view\\n    returns (address beneficiary);\\n\\n  /**\\n   * @notice Returns the cap mint amount of the derivative contract\\n   * @return capMint cap mint amount\\n   */\\n  function capMintAmount() external view returns (uint256 capMint);\\n\\n  /**\\n   * @notice Returns the fee parameters of the derivative contract\\n   * @return fee Fee struct\\n   */\\n  function feeInfo() external view returns (ICreditLineStorage.Fee memory fee);\\n\\n  /**\\n   * @notice Returns the total fee produced by the contract\\n   * @return totalFee total amount of fees\\n   */\\n  function totalFeeAmount() external view returns (uint256 totalFee);\\n\\n  /**\\n   * @notice Returns the total fee gained by the input address\\n   * @param feeGainer address to check claimable fees\\n   * @return feeGained amount of fess claimable by feeGainer\\n   */\\n  function userFeeGained(address feeGainer)\\n    external\\n    view\\n    returns (uint256 feeGained);\\n\\n  /**\\n   * @notice Returns the liquidation rewrd percentage of the derivative contract\\n   * @return rewardPct liquidator reward percentage\\n   */\\n  function liquidationReward() external view returns (uint256 rewardPct);\\n\\n  /**\\n   * @notice Returns the over collateralization percentage of the derivative contract\\n   * @return collReq percentage of overcollateralization\\n   */\\n  function collateralRequirement() external view returns (uint256 collReq);\\n\\n  /**\\n   * @notice Accessor method for a sponsor's position.\\n   * @param sponsor address whose position data is retrieved.\\n   * @return collateralAmount amount of collateral of the sponsor's position.\\n   * @return tokensAmount amount of outstanding tokens of the sponsor's position.\\n   */\\n  function getPositionData(address sponsor)\\n    external\\n    view\\n    returns (uint256 collateralAmount, uint256 tokensAmount);\\n\\n  /**\\n   * @notice Accessor method for contract's global position (aggregate).\\n   * @return totCollateral total amount of collateral deposited by lps\\n   * @return totTokensOutstanding total amount of outstanding tokens.\\n   */\\n  function getGlobalPositionData()\\n    external\\n    view\\n    returns (uint256 totCollateral, uint256 totTokensOutstanding);\\n\\n  /**\\n   * @notice Returns if sponsor position is overcollateralized and thepercentage of coverage of the collateral according to the last price\\n   * @return True if position is overcollaterlized, otherwise false + percentage of coverage (totalCollateralAmount / (price * tokensCollateralized))\\n   */\\n  function collateralCoverage(address sponsor)\\n    external\\n    view\\n    returns (bool, uint256);\\n\\n  /**\\n   * @notice Get synthetic token price identifier as represented by the oracle interface\\n   * @return identifier Synthetic token price identifier\\n   */\\n  function priceIdentifier() external view returns (bytes32 identifier);\\n\\n  /**\\n   * @notice Get the price of synthetic token set by DVM after emergencyShutdown call\\n   * @return price Price of synthetic token\\n   */\\n  function emergencyShutdownPrice() external view returns (uint256 price);\\n\\n  /**\\n   * @notice Get the block number when the emergency shutdown was called\\n   * @return time Block time\\n   */\\n  function emergencyShutdownTime() external view returns (uint256 time);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/interfaces/ICreditLineController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ICreditLineStorage} from './ICreditLineStorage.sol';\\nimport {\\n  FixedPoint\\n} from '../../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\n\\n/** @title Interface for interacting with the SelfMintingController\\n */\\ninterface ICreditLineController {\\n  /**\\n   * @notice Allow to set collateralRequirement percentage on a list of registered self-minting derivatives\\n   * @param selfMintingDerivatives Self-minting derivatives\\n   * @param collateralRequirements Over collateralization percentage for self-minting derivatives\\n   */\\n  function setCollateralRequirement(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata collateralRequirements\\n  ) external;\\n\\n  /**\\n   * @notice Allow to set capMintAmount on a list of registered self-minting derivatives\\n   * @param selfMintingDerivatives Self-minting derivatives\\n   * @param capMintAmounts Mint cap amounts for self-minting derivatives\\n   */\\n  function setCapMintAmount(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata capMintAmounts\\n  ) external;\\n\\n  /**\\n   * @notice Allow to set fee percentages on a list of registered self-minting derivatives\\n   * @param selfMintingDerivatives Self-minting derivatives\\n   * @param feePercentages fee percentages for self-minting derivatives\\n   */\\n  function setFeePercentage(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata feePercentages\\n  ) external;\\n\\n  /**\\n   * @notice Update the addresses and weight of recipients for generated fees\\n   * @param selfMintingDerivatives Derivatives to update\\n   * @param feeRecipients A two-dimension array containing for each derivative the addresses of fee recipients\\n   * @param feeProportions An array of the proportions of fees generated each recipient will receive\\n   */\\n  function setFeeRecipients(\\n    address[] calldata selfMintingDerivatives,\\n    address[][] calldata feeRecipients,\\n    uint32[][] calldata feeProportions\\n  ) external;\\n\\n  /**\\n   * @notice Update the liquidation reward percentage\\n   * @param selfMintingDerivatives Derivatives to update\\n   * @param _liquidationRewards Percentage of reward for correct liquidation by a liquidator\\n   */\\n  function setLiquidationRewardPercentage(\\n    address[] calldata selfMintingDerivatives,\\n    uint256[] calldata _liquidationRewards\\n  ) external;\\n\\n  /**\\n   * @notice Gets the over collateralization percentage of a self-minting derivative\\n   * @param selfMintingDerivative Derivative to read value of\\n   * @return the collateralRequirement percentage\\n   */\\n  function getCollateralRequirement(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Gets the set liquidtion reward percentage of a self-minting derivative\\n   * @param selfMintingDerivative Self-minting derivative\\n   * @return liquidation Reward percentage\\n   */\\n  function getLiquidationRewardPercentage(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Gets the set CapMintAmount of a self-minting derivative\\n   * @param selfMintingDerivative Self-minting derivative\\n   * @return capMintAmount Limit amount for minting\\n   */\\n  function getCapMintAmount(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256 capMintAmount);\\n\\n  /**\\n   * @notice Gets the fee params of a self-minting derivative\\n   * @param selfMintingDerivative Self-minting derivative\\n   * @return fee fee info (percent + recipient + proportions)\\n   */\\n  function getFeeInfo(address selfMintingDerivative)\\n    external\\n    view\\n    returns (ICreditLineStorage.Fee memory fee);\\n\\n  /**\\n   * @notice Gets the fee percentage of a self-minting derivative\\n   * @param selfMintingDerivative Self-minting derivative\\n   * @return feePercentage value\\n   */\\n  function feePercentage(address selfMintingDerivative)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice Returns fee recipients info\\n   * @return Addresses, weigths and total of weigtht\\n   */\\n  function feeRecipientsInfo(address selfMintingDerivative)\\n    external\\n    view\\n    returns (\\n      address[] memory,\\n      uint32[] memory,\\n      uint256\\n    );\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/MintableBurnableSyntheticToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\nimport {MintableBurnableERC20} from './MintableBurnableERC20.sol';\\n\\n/**\\n * @title Synthetic token contract\\n * Inherits from MintableBurnableERC20\\n */\\ncontract MintableBurnableSyntheticToken is MintableBurnableERC20 {\\n  constructor(\\n    string memory tokenName,\\n    string memory tokenSymbol,\\n    uint8 tokenDecimals\\n  ) MintableBurnableERC20(tokenName, tokenSymbol, tokenDecimals) {}\\n\\n  /**\\n   * @notice Add minter role to account\\n   * @dev The caller must have the admin role\\n   * @param account The address on which minter role is added\\n   */\\n  function addMinter(address account) public override {\\n    super.addMinter(account);\\n  }\\n\\n  /**\\n   * @notice Add burner role to account\\n   * @dev The caller must have the admin role\\n   * @param account The address to which burner role is added\\n   */\\n  function addBurner(address account) public override {\\n    super.addBurner(account);\\n  }\\n\\n  /**\\n   * @notice Add admin role to account.\\n   * @dev The caller must have the admin role.\\n   * @param account The address to which the admin role is added.\\n   */\\n  function addAdmin(address account) public override {\\n    super.addAdmin(account);\\n  }\\n\\n  /**\\n   * @notice Add admin, minter and burner roles to account.\\n   * @dev The caller must have the admin role.\\n   * @param account The address to which the admin, minter and burner roles are added.\\n   */\\n  function addAdminAndMinterAndBurner(address account) public override {\\n    super.addAdminAndMinterAndBurner(account);\\n  }\\n\\n  /**\\n   * @notice Minter renounce to minter role\\n   */\\n  function renounceMinter() public override {\\n    super.renounceMinter();\\n  }\\n\\n  /**\\n   * @notice Burner renounce to burner role\\n   */\\n  function renounceBurner() public override {\\n    super.renounceBurner();\\n  }\\n\\n  /**\\n   * @notice Admin renounce to admin role\\n   */\\n  function renounceAdmin() public override {\\n    super.renounceAdmin();\\n  }\\n\\n  /**\\n   * @notice Admin, minter and murner renounce to admin, minter and burner roles\\n   */\\n  function renounceAdminAndMinterAndBurner() public override {\\n    super.renounceAdminAndMinterAndBurner();\\n  }\\n\\n  /**\\n   * @notice Checks if a given account holds the minter role.\\n   * @param account The address which is checked for the minter role.\\n   * @return bool True if the provided account is a minter.\\n   */\\n  function isMinter(address account) public view returns (bool) {\\n    return hasRole(MINTER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Checks if a given account holds the burner role.\\n   * @param account The address which is checked for the burner role.\\n   * @return bool True if the provided account is a burner.\\n   */\\n  function isBurner(address account) public view returns (bool) {\\n    return hasRole(BURNER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Checks if a given account holds the admin role.\\n   * @param account The address which is checked for the admin role.\\n   * @return bool True if the provided account is an admin.\\n   */\\n  function isAdmin(address account) public view returns (bool) {\\n    return hasRole(DEFAULT_ADMIN_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Accessor method for the list of member with admin role\\n   * @return array of address with admin role\\n   */\\n  function getAdminMembers() external view returns (address[] memory) {\\n    uint256 numberOfMembers = getRoleMemberCount(DEFAULT_ADMIN_ROLE);\\n    address[] memory members = new address[](numberOfMembers);\\n    for (uint256 j = 0; j < numberOfMembers; j++) {\\n      address newMember = getRoleMember(DEFAULT_ADMIN_ROLE, j);\\n      members[j] = newMember;\\n    }\\n    return members;\\n  }\\n\\n  /**\\n   * @notice Accessor method for the list of member with minter role\\n   * @return array of address with minter role\\n   */\\n  function getMinterMembers() external view returns (address[] memory) {\\n    uint256 numberOfMembers = getRoleMemberCount(MINTER_ROLE);\\n    address[] memory members = new address[](numberOfMembers);\\n    for (uint256 j = 0; j < numberOfMembers; j++) {\\n      address newMember = getRoleMember(MINTER_ROLE, j);\\n      members[j] = newMember;\\n    }\\n    return members;\\n  }\\n\\n  /**\\n   * @notice Accessor method for the list of member with burner role\\n   * @return array of address with burner role\\n   */\\n  function getBurnerMembers() external view returns (address[] memory) {\\n    uint256 numberOfMembers = getRoleMemberCount(BURNER_ROLE);\\n    address[] memory members = new address[](numberOfMembers);\\n    for (uint256 j = 0; j < numberOfMembers; j++) {\\n      address newMember = getRoleMember(BURNER_ROLE, j);\\n      members[j] = newMember;\\n    }\\n    return members;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/MintableBurnableSyntheticTokenPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\nimport {\\n  MintableBurnableSyntheticToken\\n} from './MintableBurnableSyntheticToken.sol';\\nimport {\\n  ERC20Permit\\n} from '../../@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\\nimport {ERC20} from '../../@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {MintableBurnableERC20} from './MintableBurnableERC20.sol';\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from './interfaces/BaseControlledMintableBurnableERC20.sol';\\n\\n/**\\n * @title Synthetic token contract\\n * Inherits from ERC20Permit and MintableBurnableSyntheticToken\\n */\\ncontract MintableBurnableSyntheticTokenPermit is\\n  ERC20Permit,\\n  MintableBurnableSyntheticToken\\n{\\n  constructor(\\n    string memory tokenName,\\n    string memory tokenSymbol,\\n    uint8 tokenDecimals\\n  )\\n    MintableBurnableSyntheticToken(tokenName, tokenSymbol, tokenDecimals)\\n    ERC20Permit(tokenName)\\n  {}\\n\\n  /**\\n   * @notice Returns the number of decimals used\\n   */\\n  function decimals()\\n    public\\n    view\\n    virtual\\n    override(ERC20, BaseControlledMintableBurnableERC20)\\n    returns (uint8)\\n  {\\n    return BaseControlledMintableBurnableERC20.decimals();\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/interfaces/BaseControlledMintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ERC20} from '../../../@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {IMintableBurnableERC20} from './IMintableBurnableERC20.sol';\\n\\n/**\\n * @title ERC20 interface that includes burn mint and roles methods.\\n */\\nabstract contract BaseControlledMintableBurnableERC20 is\\n  ERC20,\\n  IMintableBurnableERC20\\n{\\n  uint8 private _decimals;\\n\\n  /**\\n   * @notice Constructs the ERC20 token contract\\n   * @param _tokenName Name of the token\\n   * @param _tokenSymbol Token symbol\\n   * @param _tokenDecimals Number of decimals for token\\n   */\\n  constructor(\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    uint8 _tokenDecimals\\n  ) ERC20(_tokenName, _tokenSymbol) {\\n    _setupDecimals(_tokenDecimals);\\n  }\\n\\n  /**\\n   * @notice Add Minter role to an account\\n   * @param account Address to which Minter role will be added\\n   */\\n  function addMinter(address account) external virtual;\\n\\n  /**\\n   * @notice Add Burner role to an account\\n   * @param account Address to which Burner role will be added\\n   */\\n  function addBurner(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin role to an account\\n   * @param account Address to which Admin role will be added\\n   */\\n  function addAdmin(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin, Minter and Burner roles to an account\\n   * @param account Address to which Admin, Minter and Burner roles will be added\\n   */\\n  function addAdminAndMinterAndBurner(address account) external virtual;\\n\\n  /**\\n   * @notice Add Admin, Minter and Burner roles to an account\\n   * @param account Address to which Admin, Minter and Burner roles will be added\\n   */\\n  /**\\n   * @notice Self renounce the address calling the function from minter role\\n   */\\n  function renounceMinter() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from burner role\\n   */\\n  function renounceBurner() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin role\\n   */\\n  function renounceAdmin() external virtual;\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin, minter and burner role\\n   */\\n  function renounceAdminAndMinterAndBurner() external virtual;\\n\\n  /**\\n   * @notice Returns the number of decimals used to get its user representation.\\n   */\\n  function decimals()\\n    public\\n    view\\n    virtual\\n    override(ERC20, IMintableBurnableERC20)\\n    returns (uint8)\\n  {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev Sets {decimals} to a value other than the default one of 18.\\n   *\\n   * WARNING: This function should only be called from the constructor. Most\\n   * applications that interact with token contracts will not expect\\n   * {decimals} to ever change, and may work incorrectly if it does.\\n   */\\n  function _setupDecimals(uint8 decimals_) internal {\\n    _decimals = decimals_;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/interfaces/IMintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title ERC20 interface that includes burn mint and roles methods.\\n */\\ninterface IMintableBurnableERC20 is IERC20 {\\n  /**\\n   * @notice Burns a specific amount of the caller's tokens.\\n   * @dev This method should be permissioned to only allow designated parties to burn tokens.\\n   */\\n  function burn(uint256 value) external;\\n\\n  /**\\n   * @notice Mints tokens and adds them to the balance of the `to` address.\\n   * @dev This method should be permissioned to only allow designated parties to mint tokens.\\n   */\\n  function mint(address to, uint256 value) external returns (bool);\\n\\n  /**\\n   * @notice Returns the number of decimals used to get its user representation.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/factories/interfaces/IMintableBurnableTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from '../../interfaces/BaseControlledMintableBurnableERC20.sol';\\n\\n/**\\n * @title Interface for interacting with the MintableBurnableTokenFactory contract\\n */\\ninterface IMintableBurnableTokenFactory {\\n  /** @notice Calls the deployment of a new ERC20 token\\n   * @param tokenName The name of the token to be deployed\\n   * @param tokenSymbol The symbol of the token that will be deployed\\n   * @param tokenDecimals Number of decimals for the token to be deployed\\n   */\\n  function createToken(\\n    string memory tokenName,\\n    string memory tokenSymbol,\\n    uint8 tokenDecimals\\n  ) external returns (BaseControlledMintableBurnableERC20 newToken);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/MintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from './interfaces/BaseControlledMintableBurnableERC20.sol';\\nimport {\\n  AccessControlEnumerable\\n} from '../../@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title ERC20 token contract\\n */\\ncontract MintableBurnableERC20 is\\n  BaseControlledMintableBurnableERC20,\\n  AccessControlEnumerable\\n{\\n  bytes32 public constant MINTER_ROLE = keccak256('Minter');\\n\\n  bytes32 public constant BURNER_ROLE = keccak256('Burner');\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyMinter() {\\n    require(hasRole(MINTER_ROLE, msg.sender), 'Sender must be the minter');\\n    _;\\n  }\\n\\n  modifier onlyBurner() {\\n    require(hasRole(BURNER_ROLE, msg.sender), 'Sender must be the burner');\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructors\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs the ERC20 token contract\\n   * @param _tokenName Name of the token\\n   * @param _tokenSymbol Token symbol\\n   * @param _tokenDecimals Number of decimals for token\\n   */\\n  constructor(\\n    string memory _tokenName,\\n    string memory _tokenSymbol,\\n    uint8 _tokenDecimals\\n  )\\n    BaseControlledMintableBurnableERC20(\\n      _tokenName,\\n      _tokenSymbol,\\n      _tokenDecimals\\n    )\\n  {\\n    _setupDecimals(_tokenDecimals);\\n    _setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(MINTER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setRoleAdmin(BURNER_ROLE, DEFAULT_ADMIN_ROLE);\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Mint new ERC20 tokens\\n   * @param recipient Recipient of the minted tokens\\n   * @param value Amount of tokens to be minted\\n   */\\n  function mint(address recipient, uint256 value)\\n    external\\n    override\\n    onlyMinter()\\n    returns (bool)\\n  {\\n    _mint(recipient, value);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Burn ERC20 tokens\\n   * @param value Amount of ERC20 tokens to be burned\\n   */\\n  function burn(uint256 value) external override onlyBurner() {\\n    _burn(msg.sender, value);\\n  }\\n\\n  /**\\n   * @notice Assign a new minting role\\n   * @param account Address of the new minter\\n   */\\n  function addMinter(address account) public virtual override {\\n    grantRole(MINTER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Assign a new burning role\\n   * @param account Address of the new burner\\n   */\\n  function addBurner(address account) public virtual override {\\n    grantRole(BURNER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Assign new admin role\\n   * @param account Address of the new admin\\n   */\\n  function addAdmin(address account) public virtual override {\\n    grantRole(DEFAULT_ADMIN_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Assign admin, minting and burning priviliges to an address\\n   * @param account Address to which roles are assigned\\n   */\\n  function addAdminAndMinterAndBurner(address account) public virtual override {\\n    grantRole(DEFAULT_ADMIN_ROLE, account);\\n    grantRole(MINTER_ROLE, account);\\n    grantRole(BURNER_ROLE, account);\\n  }\\n\\n  /**\\n   * @notice Self renounce the address calling the function from minter role\\n   */\\n  function renounceMinter() public virtual override {\\n    renounceRole(MINTER_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Self renounce the address calling the function from burner role\\n   */\\n  function renounceBurner() public virtual override {\\n    renounceRole(BURNER_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin role\\n   */\\n  function renounceAdmin() public virtual override {\\n    renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Self renounce the address calling the function from admin, minter and burner role\\n   */\\n  function renounceAdminAndMinterAndBurner() public virtual override {\\n    renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    renounceRole(MINTER_ROLE, msg.sender);\\n    renounceRole(BURNER_ROLE, msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/factories/MintableBurnableTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  ISynthereumFactoryVersioning\\n} from '../../core/interfaces/IFactoryVersioning.sol';\\nimport {\\n  SynthereumInterfaces,\\n  FactoryInterfaces\\n} from '../../core/Constants.sol';\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from '../interfaces/BaseControlledMintableBurnableERC20.sol';\\n\\n/**\\n * @title Factory for creating new mintable and burnable tokens.\\n */\\nabstract contract MintableBurnableTokenFactory {\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  ISynthereumFinder public synthereumFinder;\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier onlyPoolFactory() {\\n    ISynthereumFactoryVersioning factoryVersioning =\\n      ISynthereumFactoryVersioning(\\n        synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.FactoryVersioning\\n        )\\n      );\\n    uint8 numberOfFactories =\\n      factoryVersioning.numberOfFactoryVersions(FactoryInterfaces.PoolFactory);\\n    uint8 counter = 0;\\n    for (uint8 i = 0; counter < numberOfFactories; i++) {\\n      try\\n        factoryVersioning.getFactoryVersion(FactoryInterfaces.PoolFactory, i)\\n      returns (address factory) {\\n        if (msg.sender == factory) {\\n          _;\\n          break;\\n        } else {\\n          counter++;\\n        }\\n      } catch {}\\n    }\\n    if (numberOfFactories == counter) {\\n      revert('Sender must be a Pool factory');\\n    }\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs SynthereumSyntheticTokenFactory contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   */\\n  constructor(address _synthereumFinder) {\\n    synthereumFinder = ISynthereumFinder(_synthereumFinder);\\n  }\\n\\n  /**\\n   * @notice Create a new token and return it to the caller.\\n   * @param tokenName used to describe the new token.\\n   * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.\\n   * @param tokenDecimals used to define the precision used in the token's numerical representation.\\n   * @return newToken an instance of the newly created token interface.\\n   */\\n  function createToken(\\n    string memory tokenName,\\n    string memory tokenSymbol,\\n    uint8 tokenDecimals\\n  ) public virtual returns (BaseControlledMintableBurnableERC20 newToken);\\n\\n  /**\\n   * @notice Set admin rol to the token\\n   * @param token Token on which the adim role is set\\n   */\\n  function _setAdminRole(BaseControlledMintableBurnableERC20 token) internal {\\n    token.addAdmin(msg.sender);\\n    token.renounceAdmin();\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/factories/SyntheticTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from '../interfaces/BaseControlledMintableBurnableERC20.sol';\\nimport {MintableBurnableTokenFactory} from './MintableBurnableTokenFactory.sol';\\nimport {\\n  MintableBurnableSyntheticToken\\n} from '../MintableBurnableSyntheticToken.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\ncontract SynthereumSyntheticTokenFactory is\\n  ReentrancyGuard,\\n  MintableBurnableTokenFactory\\n{\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs SynthereumSyntheticTokenFactory contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   */\\n  constructor(address _synthereumFinder)\\n    MintableBurnableTokenFactory(_synthereumFinder)\\n  {}\\n\\n  /**\\n   * @notice Create a new synthetic token and return it to the caller.\\n   * @dev The caller will become the only minter and burner and the new owner capable of assigning the roles.\\n   * @param tokenName used to describe the new token.\\n   * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.\\n   * @param tokenDecimals used to define the precision used in the token's numerical representation.\\n   * @return newToken an instance of the newly created token\\n   */\\n  function createToken(\\n    string calldata tokenName,\\n    string calldata tokenSymbol,\\n    uint8 tokenDecimals\\n  )\\n    public\\n    override\\n    onlyPoolFactory\\n    nonReentrant\\n    returns (BaseControlledMintableBurnableERC20 newToken)\\n  {\\n    MintableBurnableSyntheticToken mintableToken =\\n      new MintableBurnableSyntheticToken(tokenName, tokenSymbol, tokenDecimals);\\n    newToken = BaseControlledMintableBurnableERC20(address(mintableToken));\\n    _setAdminRole(newToken);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/tokens/factories/SyntheticTokenPermitFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {\\n  BaseControlledMintableBurnableERC20\\n} from '../interfaces/BaseControlledMintableBurnableERC20.sol';\\nimport {MintableBurnableTokenFactory} from './MintableBurnableTokenFactory.sol';\\nimport {\\n  MintableBurnableSyntheticTokenPermit\\n} from '../MintableBurnableSyntheticTokenPermit.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\ncontract SynthereumSyntheticTokenPermitFactory is\\n  ReentrancyGuard,\\n  MintableBurnableTokenFactory\\n{\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  /**\\n   * @notice Constructs SynthereumSyntheticTokenPermitFactory contract\\n   * @param _synthereumFinder Synthereum finder contract\\n   */\\n  constructor(address _synthereumFinder)\\n    MintableBurnableTokenFactory(_synthereumFinder)\\n  {}\\n\\n  /**\\n   * @notice Create a new synthetic token with permit function and return it to the caller.\\n   * @dev The caller will become the only minter and burner and the new owner capable of assigning the roles.\\n   * @param tokenName used to describe the new token.\\n   * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.\\n   * @param tokenDecimals used to define the precision used in the token's numerical representation.\\n   * @return newToken an instance of the newly created token\\n   */\\n  function createToken(\\n    string calldata tokenName,\\n    string calldata tokenSymbol,\\n    uint8 tokenDecimals\\n  )\\n    public\\n    override\\n    onlyPoolFactory\\n    nonReentrant\\n    returns (BaseControlledMintableBurnableERC20 newToken)\\n  {\\n    MintableBurnableSyntheticTokenPermit mintableToken =\\n      new MintableBurnableSyntheticTokenPermit(\\n        tokenName,\\n        tokenSymbol,\\n        tokenDecimals\\n      );\\n    newToken = BaseControlledMintableBurnableERC20(address(mintableToken));\\n    _setAdminRole(newToken);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/math/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/interfaces/ICreditLineStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ISynthereumFinder} from '../../../core/interfaces/IFinder.sol';\\nimport {IStandardERC20} from '../../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {\\n  FixedPoint\\n} from '../../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\n\\ninterface ICreditLineStorage {\\n  // Describe fee structure\\n  struct Fee {\\n    // Fees charged when a user mints, redeem and exchanges tokens\\n    uint256 feePercentage;\\n    // Recipient receiving fees\\n    address[] feeRecipients;\\n    // Proportion for each recipient\\n    uint32[] feeProportions;\\n    // Used with individual proportions to scale values\\n    uint256 totalFeeProportions;\\n  }\\n\\n  struct FeeStatus {\\n    // Track the fee gained to be withdrawn by an address\\n    mapping(address => FixedPoint.Unsigned) feeGained;\\n    // Total amount of fees to be withdrawn\\n    FixedPoint.Unsigned totalFeeAmount;\\n  }\\n\\n  // Represents a single sponsor's position. All collateral is held by this contract.\\n  // This struct acts as bookkeeping for how much of that collateral is allocated to each sponsor.\\n  struct PositionData {\\n    FixedPoint.Unsigned tokensOutstanding;\\n    FixedPoint.Unsigned rawCollateral;\\n  }\\n\\n  struct GlobalPositionData {\\n    // Keep track of the total collateral and tokens across all positions\\n    FixedPoint.Unsigned totalTokensOutstanding;\\n    // Similar to the rawCollateral in PositionData, this value should not be used directly.\\n    //_getFeeAdjustedCollateral(), _addCollateral() and _removeCollateral() must be used to access and adjust.\\n    FixedPoint.Unsigned rawTotalPositionCollateral;\\n  }\\n\\n  struct PositionManagerData {\\n    // SynthereumFinder contract\\n    ISynthereumFinder synthereumFinder;\\n    // Collateral token\\n    IStandardERC20 collateralToken;\\n    // Synthetic token created by this contract.\\n    IMintableBurnableERC20 tokenCurrency;\\n    // Unique identifier for DVM price feed ticker.\\n    bytes32 priceIdentifier;\\n    // Minimum number of tokens in a sponsor's position.\\n    FixedPoint.Unsigned minSponsorTokens;\\n    // Expiry price pulled from Chainlink in the case of an emergency shutdown.\\n    FixedPoint.Unsigned emergencyShutdownPrice;\\n    // Timestamp used in case of emergency shutdown.\\n    uint256 emergencyShutdownTimestamp;\\n    // The excessTokenBeneficiary of any excess tokens added to the contract.\\n    address excessTokenBeneficiary;\\n    // Version of the self-minting derivative\\n    uint8 version;\\n  }\\n\\n  /**\\n   * @notice Construct the PerpetualPositionManager.\\n   * @dev Deployer of this contract should consider carefully which parties have ability to mint and burn\\n   * the synthetic tokens referenced by `_tokenAddress`. This contract's security assumes that no external accounts\\n   * can mint new tokens, which could be used to steal all of this contract's locked collateral.\\n   * We recommend to only use synthetic token contracts whose sole Owner role (the role capable of adding & removing roles)\\n   * is assigned to this contract, whose sole Minter role is assigned to this contract, and whose\\n   * total supply is 0 prior to construction of this contract.\\n   * @param collateralAddress ERC20 token used as collateral for all positions.\\n   * @param tokenAddress ERC20 token used as synthetic token.\\n   * @param priceFeedIdentifier registered in the ChainLink Oracle for the synthetic.\\n   * @param minSponsorTokens minimum amount of collateral that must exist at any time in a position.\\n   * @param timerAddress Contract that stores the current time in a testing environment. Set to 0x0 for production.\\n   * @param excessTokenBeneficiary Beneficiary to send all excess token balances that accrue in the contract.\\n   * @param version Version of the self-minting derivative\\n   * @param synthereumFinder The SynthereumFinder contract\\n   */\\n  struct PositionManagerParams {\\n    IStandardERC20 collateralToken;\\n    IMintableBurnableERC20 syntheticToken;\\n    bytes32 priceFeedIdentifier;\\n    FixedPoint.Unsigned minSponsorTokens;\\n    address excessTokenBeneficiary;\\n    uint8 version;\\n    ISynthereumFinder synthereumFinder;\\n  }\\n\\n  struct LiquidationData {\\n    address sponsor;\\n    address liquidator;\\n    uint256 liquidationTime;\\n    uint256 numTokensBurnt;\\n    uint256 liquidatedCollateral;\\n  }\\n\\n  struct ExecuteLiquidationData {\\n    FixedPoint.Unsigned tokensToLiquidate;\\n    FixedPoint.Unsigned collateralValueLiquidatedTokens;\\n    FixedPoint.Unsigned collateralLiquidated;\\n    FixedPoint.Unsigned liquidatorReward;\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@uma/core/contracts/common/implementation/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../../@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../../../../../@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/common/interfaces/ITypology.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\ninterface ITypology {\\n  /**\\n   * @notice Return typology of the contract\\n   */\\n  function typology() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/CreditLine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ICreditLineStorage} from './interfaces/ICreditLineStorage.sol';\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {ICreditLine} from './interfaces/ICreditLine.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {CreditLineLib} from './CreditLineLib.sol';\\nimport {\\n  ReentrancyGuard\\n} from '../../../@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport {\\n  ERC2771Context\\n} from '../../../@jarvis-network/synthereum-contracts/contracts/common/ERC2771Context.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\nimport {\\n  SafeERC20\\n} from '../../../@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/**\\n * @title\\n * @notice\\n */\\ncontract CreditLine is\\n  ICreditLine,\\n  ICreditLineStorage,\\n  ReentrancyGuard,\\n  ERC2771Context\\n{\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for IMintableBurnableERC20;\\n  using CreditLineLib for PositionData;\\n  using CreditLineLib for PositionManagerData;\\n\\n  //----------------------------------------\\n  // Constants\\n  //----------------------------------------\\n\\n  string public constant override typology = 'SELF-MINTING';\\n\\n  bytes32 public constant MAINTAINER_ROLE = keccak256('Maintainer');\\n\\n  //----------------------------------------\\n  // Storage\\n  //----------------------------------------\\n\\n  // Maps sponsor addresses to their positions. Each sponsor can have only one position.\\n  mapping(address => PositionData) private positions;\\n  // uint256 tokenSponsorsCount; // each new token sponsor will be identified with an incremental uint\\n\\n  GlobalPositionData private globalPositionData;\\n\\n  PositionManagerData private positionManagerData;\\n\\n  FeeStatus private feeStatus;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\\n  event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\n  event PositionCreated(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount,\\n    uint256 feeAmount\\n  );\\n  event NewSponsor(address indexed sponsor);\\n  event EndedSponsorPosition(address indexed sponsor);\\n  event Redeem(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount,\\n    uint256 feeAmount\\n  );\\n  event Repay(\\n    address indexed sponsor,\\n    uint256 indexed numTokensRepaid,\\n    uint256 indexed newTokenCount,\\n    uint256 feeAmount\\n  );\\n  event EmergencyShutdown(\\n    address indexed caller,\\n    uint256 settlementPrice,\\n    uint256 shutdowntimestamp\\n  );\\n  event SettleEmergencyShutdown(\\n    address indexed caller,\\n    uint256 indexed collateralReturned,\\n    uint256 indexed tokensBurned\\n  );\\n  event Liquidation(\\n    address indexed sponsor,\\n    address indexed liquidator,\\n    uint256 liquidatedTokens,\\n    uint256 liquidatedCollateral,\\n    uint256 collateralReward,\\n    uint256 liquidationTime\\n  );\\n\\n  //----------------------------------------\\n  // Modifiers\\n  //----------------------------------------\\n\\n  modifier notEmergencyShutdown() {\\n    require(\\n      positionManagerData.emergencyShutdownTimestamp == 0,\\n      'Contract emergency shutdown'\\n    );\\n    _;\\n  }\\n\\n  modifier isEmergencyShutdown() {\\n    require(\\n      positionManagerData.emergencyShutdownTimestamp != 0,\\n      'Contract not emergency shutdown'\\n    );\\n    _;\\n  }\\n\\n  modifier onlyCollateralisedPosition(address sponsor) {\\n    require(\\n      positions[sponsor].rawCollateral.isGreaterThan(0),\\n      'Position has no collateral'\\n    );\\n    _;\\n  }\\n\\n  //----------------------------------------\\n  // Constructor\\n  //----------------------------------------\\n\\n  constructor(PositionManagerParams memory _positionManagerData) nonReentrant {\\n    positionManagerData.initialize(\\n      _positionManagerData.synthereumFinder,\\n      _positionManagerData.collateralToken,\\n      _positionManagerData.syntheticToken,\\n      _positionManagerData.priceFeedIdentifier,\\n      _positionManagerData.minSponsorTokens,\\n      _positionManagerData.excessTokenBeneficiary,\\n      _positionManagerData.version\\n    );\\n  }\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  function deposit(uint256 collateralAmount)\\n    external\\n    override\\n    notEmergencyShutdown\\n  {\\n    PositionData storage positionData = _getPositionData(_msgSender());\\n\\n    positionData.depositTo(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(collateralAmount),\\n      _msgSender(),\\n      _msgSender()\\n    );\\n  }\\n\\n  function depositTo(address sponsor, uint256 collateralAmount)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n  {\\n    PositionData storage positionData = _getPositionData(sponsor);\\n\\n    positionData.depositTo(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(collateralAmount),\\n      sponsor,\\n      _msgSender()\\n    );\\n  }\\n\\n  function withdraw(uint256 collateralAmount)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 amountWithdrawn)\\n  {\\n    PositionData storage positionData = _getPositionData(_msgSender());\\n\\n    amountWithdrawn = positionData\\n      .withdraw(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(collateralAmount),\\n      _msgSender()\\n    )\\n      .rawValue;\\n  }\\n\\n  function create(uint256 collateralAmount, uint256 numTokens)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 feeAmount)\\n  {\\n    PositionData storage positionData = positions[_msgSender()];\\n    feeAmount = positionData\\n      .create(\\n      globalPositionData,\\n      positionManagerData,\\n      FixedPoint.Unsigned(collateralAmount),\\n      FixedPoint.Unsigned(numTokens),\\n      feeStatus,\\n      _msgSender()\\n    )\\n      .rawValue;\\n  }\\n\\n  function redeem(uint256 numTokens)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 amountWithdrawn, uint256 feeAmount)\\n  {\\n    PositionData storage positionData = _getPositionData(_msgSender());\\n\\n    (\\n      FixedPoint.Unsigned memory collateralAmount,\\n      FixedPoint.Unsigned memory uFeeAmount\\n    ) =\\n      positionData.redeem(\\n        globalPositionData,\\n        positionManagerData,\\n        FixedPoint.Unsigned(numTokens),\\n        feeStatus,\\n        _msgSender()\\n      );\\n\\n    amountWithdrawn = collateralAmount.rawValue;\\n    feeAmount = uFeeAmount.rawValue;\\n  }\\n\\n  function repay(uint256 numTokens)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 feeAmount)\\n  {\\n    PositionData storage positionData = _getPositionData(_msgSender());\\n    feeAmount = (\\n      positionData.repay(\\n        globalPositionData,\\n        positionManagerData,\\n        FixedPoint.Unsigned(numTokens),\\n        feeStatus,\\n        _msgSender()\\n      )\\n    )\\n      .rawValue;\\n  }\\n\\n  function liquidate(address sponsor, uint256 maxTokensToLiquidate)\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (\\n      uint256 tokensLiquidated,\\n      uint256 collateralLiquidated,\\n      uint256 collateralReward\\n    )\\n  {\\n    // Retrieve Position data for sponsor\\n    PositionData storage positionToLiquidate = _getPositionData(sponsor);\\n\\n    // try to liquidate it - reverts if is properly collateralised\\n    (\\n      collateralLiquidated,\\n      tokensLiquidated,\\n      collateralReward\\n    ) = positionToLiquidate.liquidate(\\n      positionManagerData,\\n      globalPositionData,\\n      FixedPoint.Unsigned(maxTokensToLiquidate),\\n      _msgSender()\\n    );\\n\\n    emit Liquidation(\\n      sponsor,\\n      _msgSender(),\\n      tokensLiquidated,\\n      collateralLiquidated,\\n      collateralReward,\\n      block.timestamp\\n    );\\n  }\\n\\n  function settleEmergencyShutdown()\\n    external\\n    override\\n    isEmergencyShutdown()\\n    nonReentrant\\n    returns (uint256 amountWithdrawn)\\n  {\\n    PositionData storage positionData = positions[_msgSender()];\\n    amountWithdrawn = positionData\\n      .settleEmergencyShutdown(\\n      globalPositionData,\\n      positionManagerData,\\n      _msgSender()\\n    )\\n      .rawValue;\\n  }\\n\\n  function emergencyShutdown()\\n    external\\n    override\\n    notEmergencyShutdown\\n    nonReentrant\\n    returns (uint256 timestamp, uint256 price)\\n  {\\n    return positionManagerData.emergencyShutdown();\\n  }\\n\\n  function claimFee()\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 feeClaimed)\\n  {\\n    feeClaimed = positionManagerData.claimFee(feeStatus, _msgSender());\\n  }\\n\\n  function trimExcess(IERC20 token)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 amount)\\n  {\\n    amount = positionManagerData\\n      .trimExcess(globalPositionData, feeStatus, token)\\n      .rawValue;\\n  }\\n\\n  function deleteSponsorPosition(address sponsor) external override {\\n    require(\\n      _msgSender() == address(this),\\n      'Only the contract can invoke this function'\\n    );\\n    delete positions[sponsor];\\n  }\\n\\n  function minSponsorTokens() external view override returns (uint256 amount) {\\n    amount = positionManagerData.minSponsorTokens.rawValue;\\n  }\\n\\n  function excessTokensBeneficiary()\\n    external\\n    view\\n    override\\n    returns (address beneficiary)\\n  {\\n    beneficiary = positionManagerData.excessTokenBeneficiary;\\n  }\\n\\n  function capMintAmount() external view override returns (uint256 capMint) {\\n    capMint = positionManagerData.capMintAmount().rawValue;\\n  }\\n\\n  function feeInfo() external view override returns (Fee memory fee) {\\n    fee = positionManagerData.feeInfo();\\n  }\\n\\n  function totalFeeAmount() external view override returns (uint256 totalFee) {\\n    totalFee = feeStatus.totalFeeAmount.rawValue;\\n  }\\n\\n  function userFeeGained(address feeGainer)\\n    external\\n    view\\n    override\\n    returns (uint256 feeGained)\\n  {\\n    feeGained = feeStatus.feeGained[feeGainer].rawValue;\\n  }\\n\\n  function liquidationReward()\\n    external\\n    view\\n    override\\n    returns (uint256 rewardPct)\\n  {\\n    rewardPct = positionManagerData.liquidationRewardPercentage().rawValue;\\n  }\\n\\n  function collateralRequirement()\\n    external\\n    view\\n    override\\n    returns (uint256 collReq)\\n  {\\n    collReq = positionManagerData.collateralRequirement().rawValue;\\n  }\\n\\n  function getPositionData(address sponsor)\\n    external\\n    view\\n    override\\n    returns (uint256 collateralAmount, uint256 tokensAmount)\\n  {\\n    return (\\n      positions[sponsor].rawCollateral.rawValue,\\n      positions[sponsor].tokensOutstanding.rawValue\\n    );\\n  }\\n\\n  function getGlobalPositionData()\\n    external\\n    view\\n    override\\n    returns (uint256 totCollateral, uint256 totTokensOutstanding)\\n  {\\n    totCollateral = globalPositionData.rawTotalPositionCollateral.rawValue;\\n    totTokensOutstanding = globalPositionData.totalTokensOutstanding.rawValue;\\n  }\\n\\n  function collateralCoverage(address sponsor)\\n    external\\n    view\\n    override\\n    returns (bool, uint256)\\n  {\\n    return positionManagerData.collateralCoverage(positions[sponsor]);\\n  }\\n\\n  function synthereumFinder()\\n    external\\n    view\\n    override\\n    returns (ISynthereumFinder finder)\\n  {\\n    finder = positionManagerData.synthereumFinder;\\n  }\\n\\n  function syntheticToken() external view override returns (IERC20 synthToken) {\\n    synthToken = positionManagerData.tokenCurrency;\\n  }\\n\\n  function collateralToken() public view override returns (IERC20 collateral) {\\n    collateral = positionManagerData.collateralToken;\\n  }\\n\\n  function syntheticTokenSymbol()\\n    external\\n    view\\n    override\\n    returns (string memory symbol)\\n  {\\n    symbol = IStandardERC20(address(positionManagerData.tokenCurrency))\\n      .symbol();\\n  }\\n\\n  function version() external view override returns (uint8 contractVersion) {\\n    contractVersion = positionManagerData.version;\\n  }\\n\\n  function priceIdentifier()\\n    external\\n    view\\n    override\\n    returns (bytes32 identifier)\\n  {\\n    identifier = positionManagerData.priceIdentifier;\\n  }\\n\\n  function emergencyShutdownPrice()\\n    external\\n    view\\n    override\\n    isEmergencyShutdown()\\n    returns (uint256 price)\\n  {\\n    price = positionManagerData.emergencyShutdownPrice.rawValue;\\n  }\\n\\n  function emergencyShutdownTime()\\n    external\\n    view\\n    override\\n    isEmergencyShutdown()\\n    returns (uint256 time)\\n  {\\n    time = positionManagerData.emergencyShutdownTimestamp;\\n  }\\n\\n  /**\\n   * @notice Check if an address is the trusted forwarder\\n   * @param  forwarder Address to check\\n   * @return True is the input address is the trusted forwarder, otherwise false\\n   */\\n  function isTrustedForwarder(address forwarder)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    try\\n      positionManagerData.synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.TrustedForwarder\\n      )\\n    returns (address trustedForwarder) {\\n      if (forwarder == trustedForwarder) {\\n        return true;\\n      } else {\\n        return false;\\n      }\\n    } catch {\\n      return false;\\n    }\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n  function _getPositionData(address sponsor)\\n    internal\\n    view\\n    onlyCollateralisedPosition(sponsor)\\n    returns (PositionData storage)\\n  {\\n    return positions[sponsor];\\n  }\\n\\n  function _msgSender()\\n    internal\\n    view\\n    override(ERC2771Context)\\n    returns (address sender)\\n  {\\n    return ERC2771Context._msgSender();\\n  }\\n\\n  function _msgData()\\n    internal\\n    view\\n    override(ERC2771Context)\\n    returns (bytes calldata)\\n  {\\n    return ERC2771Context._msgData();\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/self-minting/v2/CreditLineLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport {ICreditLineStorage} from './interfaces/ICreditLineStorage.sol';\\nimport {IERC20} from '../../../@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IStandardERC20} from '../../base/interfaces/IStandardERC20.sol';\\nimport {\\n  IMintableBurnableERC20\\n} from '../../tokens/interfaces/IMintableBurnableERC20.sol';\\nimport {ICreditLineController} from './interfaces/ICreditLineController.sol';\\nimport {SynthereumInterfaces} from '../../core/Constants.sol';\\nimport {ISynthereumFinder} from '../../core/interfaces/IFinder.sol';\\nimport {\\n  ISynthereumPriceFeed\\n} from '../../oracle/common/interfaces/IPriceFeed.sol';\\nimport {\\n  FixedPoint\\n} from '../../../@uma/core/contracts/common/implementation/FixedPoint.sol';\\nimport {\\n  SafeERC20\\n} from '../../../@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport {CreditLine} from './CreditLine.sol';\\n\\nlibrary CreditLineLib {\\n  using FixedPoint for FixedPoint.Unsigned;\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for IStandardERC20;\\n  using SafeERC20 for IMintableBurnableERC20;\\n  using CreditLineLib for ICreditLineStorage.PositionData;\\n  using CreditLineLib for ICreditLineStorage.PositionManagerData;\\n  using CreditLineLib for ICreditLineStorage.FeeStatus;\\n  using CreditLineLib for FixedPoint.Unsigned;\\n\\n  //----------------------------------------\\n  // Events\\n  //----------------------------------------\\n\\n  event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\\n  event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\n  event PositionCreated(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount,\\n    uint256 feeAmount\\n  );\\n  event NewSponsor(address indexed sponsor);\\n  event EndedSponsorPosition(address indexed sponsor);\\n  event Redeem(\\n    address indexed sponsor,\\n    uint256 indexed collateralAmount,\\n    uint256 indexed tokenAmount,\\n    uint256 feeAmount\\n  );\\n\\n  event ClaimFee(\\n    address indexed claimer,\\n    uint256 feeAmount,\\n    uint256 totalRemainingFees\\n  );\\n\\n  event Repay(\\n    address indexed sponsor,\\n    uint256 indexed numTokensRepaid,\\n    uint256 indexed newTokenCount,\\n    uint256 feeAmount\\n  );\\n  event EmergencyShutdown(\\n    address indexed caller,\\n    uint256 settlementPrice,\\n    uint256 shutdownTimestamp\\n  );\\n  event SettleEmergencyShutdown(\\n    address indexed caller,\\n    uint256 indexed collateralReturned,\\n    uint256 indexed tokensBurned\\n  );\\n\\n  event SetFeePercentage(uint256 feePercentage);\\n  event SetFeeRecipients(address[] feeRecipients, uint32[] feeProportions);\\n\\n  //----------------------------------------\\n  // External functions\\n  //----------------------------------------\\n\\n  function initialize(\\n    ICreditLineStorage.PositionManagerData storage self,\\n    ISynthereumFinder _finder,\\n    IStandardERC20 _collateralToken,\\n    IMintableBurnableERC20 _tokenCurrency,\\n    bytes32 _priceIdentifier,\\n    FixedPoint.Unsigned memory _minSponsorTokens,\\n    address _excessTokenBeneficiary,\\n    uint8 _version\\n  ) external {\\n    ISynthereumPriceFeed priceFeed =\\n      ISynthereumPriceFeed(\\n        _finder.getImplementationAddress(SynthereumInterfaces.PriceFeed)\\n      );\\n\\n    require(\\n      priceFeed.isPriceSupported(_priceIdentifier),\\n      'Price identifier not supported'\\n    );\\n    require(\\n      _collateralToken.decimals() <= 18,\\n      'Collateral has more than 18 decimals'\\n    );\\n    require(\\n      _tokenCurrency.decimals() == 18,\\n      'Synthetic token has more or less than 18 decimals'\\n    );\\n    self.priceIdentifier = _priceIdentifier;\\n    self.synthereumFinder = _finder;\\n    self.collateralToken = _collateralToken;\\n    self.tokenCurrency = _tokenCurrency;\\n    self.minSponsorTokens = _minSponsorTokens;\\n    self.excessTokenBeneficiary = _excessTokenBeneficiary;\\n    self.version = _version;\\n  }\\n\\n  function depositTo(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    address sponsor,\\n    address msgSender\\n  ) external {\\n    require(collateralAmount.rawValue > 0, 'Invalid collateral amount');\\n\\n    // Increase the position and global collateral balance by collateral amount.\\n    positionData._incrementCollateralBalances(\\n      globalPositionData,\\n      collateralAmount\\n    );\\n\\n    emit Deposit(sponsor, collateralAmount.rawValue);\\n\\n    positionManagerData.collateralToken.safeTransferFrom(\\n      msgSender,\\n      address(this),\\n      collateralAmount.rawValue\\n    );\\n  }\\n\\n  function withdraw(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    address msgSender\\n  ) external returns (FixedPoint.Unsigned memory) {\\n    require(collateralAmount.rawValue > 0, 'Invalid collateral amount');\\n\\n    // Decrement the sponsor's collateral and global collateral amounts.\\n    // Reverts if the resulting position is not properly collateralized\\n    _decrementCollateralBalancesCheckCR(\\n      positionData,\\n      globalPositionData,\\n      positionManagerData,\\n      collateralAmount\\n    );\\n\\n    emit Withdrawal(msgSender, collateralAmount.rawValue);\\n\\n    // Move collateral currency from contract to sender.\\n    positionManagerData.collateralToken.safeTransfer(\\n      msgSender,\\n      collateralAmount.rawValue\\n    );\\n\\n    return collateralAmount;\\n  }\\n\\n  function create(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount,\\n    FixedPoint.Unsigned memory numTokens,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    address msgSender\\n  ) external returns (FixedPoint.Unsigned memory feeAmount) {\\n    // Update fees status - percentage is retrieved from Credit Line Controller\\n    FixedPoint.Unsigned memory priceRate = _getOraclePrice(positionManagerData);\\n    uint256 collateralDecimals =\\n      getCollateralDecimals(positionManagerData.collateralToken);\\n    feeAmount = calculateCollateralAmount(\\n      numTokens,\\n      priceRate,\\n      collateralDecimals\\n    )\\n      .mul(\\n      FixedPoint.Unsigned(positionManagerData._getFeeInfo().feePercentage)\\n    );\\n    positionManagerData.updateFees(feeStatus, feeAmount);\\n\\n    if (positionData.tokensOutstanding.isEqual(0)) {\\n      require(\\n        _checkCollateralization(\\n          positionManagerData,\\n          collateralAmount.sub(feeAmount),\\n          numTokens,\\n          priceRate,\\n          collateralDecimals\\n        ),\\n        'Insufficient Collateral'\\n      );\\n      require(\\n        numTokens.isGreaterThanOrEqual(positionManagerData.minSponsorTokens),\\n        'Below minimum sponsor position'\\n      );\\n      emit NewSponsor(msgSender);\\n    } else {\\n      require(\\n        _checkCollateralization(\\n          positionManagerData,\\n          positionData.rawCollateral.add(collateralAmount).sub(feeAmount),\\n          positionData.tokensOutstanding.add(numTokens),\\n          priceRate,\\n          collateralDecimals\\n        ),\\n        'Insufficient Collateral'\\n      );\\n    }\\n\\n    // Increase or decrease the position and global collateral balance by collateral amount or fee amount.\\n    collateralAmount.isGreaterThanOrEqual(feeAmount)\\n      ? positionData._incrementCollateralBalances(\\n        globalPositionData,\\n        collateralAmount.sub(feeAmount)\\n      )\\n      : positionData._decrementCollateralBalances(\\n        globalPositionData,\\n        feeAmount.sub(collateralAmount)\\n      );\\n\\n    // Add the number of tokens created to the position's outstanding tokens and global.\\n    positionData.tokensOutstanding = positionData.tokensOutstanding.add(\\n      numTokens\\n    );\\n\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .add(numTokens);\\n\\n    checkMintLimit(globalPositionData, positionManagerData);\\n\\n    if (collateralAmount.rawValue > 0) {\\n      // pull collateral\\n      IERC20 collateralCurrency = positionManagerData.collateralToken;\\n\\n      // Transfer tokens into the contract from caller\\n      collateralCurrency.safeTransferFrom(\\n        msgSender,\\n        address(this),\\n        (collateralAmount).rawValue\\n      );\\n    }\\n\\n    // mint corresponding synthetic tokens to the caller's address.\\n    positionManagerData.tokenCurrency.mint(msgSender, numTokens.rawValue);\\n\\n    emit PositionCreated(\\n      msgSender,\\n      collateralAmount.rawValue,\\n      numTokens.rawValue,\\n      feeAmount.rawValue\\n    );\\n  }\\n\\n  function redeem(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory numTokens,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    address sponsor\\n  )\\n    external\\n    returns (\\n      FixedPoint.Unsigned memory amountWithdrawn,\\n      FixedPoint.Unsigned memory feeAmount\\n    )\\n  {\\n    require(\\n      numTokens.isLessThanOrEqual(positionData.tokensOutstanding),\\n      'Invalid token amount'\\n    );\\n\\n    FixedPoint.Unsigned memory collateralRedeemed =\\n      positionData.rawCollateral.mul(numTokens).div(\\n        positionData.tokensOutstanding\\n      );\\n\\n    FixedPoint.Unsigned memory priceRate = _getOraclePrice(positionManagerData);\\n\\n    // Update fee status\\n    feeAmount = calculateCollateralAmount(\\n      numTokens,\\n      priceRate,\\n      getCollateralDecimals(positionManagerData.collateralToken)\\n    )\\n      .mul(\\n      FixedPoint.Unsigned(positionManagerData._getFeeInfo().feePercentage)\\n    );\\n    positionManagerData.updateFees(feeStatus, feeAmount);\\n\\n    // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\\n    if (positionData.tokensOutstanding.isEqual(numTokens)) {\\n      positionData._deleteSponsorPosition(globalPositionData, sponsor);\\n    } else {\\n      // Decrement the sponsor's collateral and global collateral amounts.\\n      positionData._decrementCollateralBalances(\\n        globalPositionData,\\n        collateralRedeemed\\n      );\\n\\n      // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n      FixedPoint.Unsigned memory newTokenCount =\\n        positionData.tokensOutstanding.sub(numTokens);\\n      require(\\n        newTokenCount.isGreaterThanOrEqual(\\n          positionManagerData.minSponsorTokens\\n        ),\\n        'Below minimum sponsor position'\\n      );\\n      positionData.tokensOutstanding = newTokenCount;\\n      // Update the totalTokensOutstanding after redemption.\\n      globalPositionData.totalTokensOutstanding = globalPositionData\\n        .totalTokensOutstanding\\n        .sub(numTokens);\\n    }\\n    // adjust the fees from collateral to withdraws\\n    amountWithdrawn = collateralRedeemed.sub(feeAmount);\\n\\n    // transfer collateral to user\\n    IERC20 collateralCurrency = positionManagerData.collateralToken;\\n\\n    {\\n      collateralCurrency.safeTransfer(sponsor, amountWithdrawn.rawValue);\\n\\n      // Pull and burn callers synthetic tokens.\\n      positionManagerData.tokenCurrency.safeTransferFrom(\\n        sponsor,\\n        address(this),\\n        numTokens.rawValue\\n      );\\n      positionManagerData.tokenCurrency.burn(numTokens.rawValue);\\n    }\\n\\n    emit Redeem(\\n      sponsor,\\n      amountWithdrawn.rawValue,\\n      numTokens.rawValue,\\n      feeAmount.rawValue\\n    );\\n  }\\n\\n  function repay(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory numTokens,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    address msgSender\\n  ) external returns (FixedPoint.Unsigned memory feeAmount) {\\n    require(\\n      numTokens.isLessThanOrEqual(positionData.tokensOutstanding),\\n      'Invalid token amount'\\n    );\\n\\n    // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\n    FixedPoint.Unsigned memory newTokenCount =\\n      positionData.tokensOutstanding.sub(numTokens);\\n    require(\\n      newTokenCount.isGreaterThanOrEqual(positionManagerData.minSponsorTokens),\\n      'Below minimum sponsor position'\\n    );\\n\\n    FixedPoint.Unsigned memory priceRate = _getOraclePrice(positionManagerData);\\n\\n    // Update fee status\\n    feeAmount = calculateCollateralAmount(\\n      numTokens,\\n      priceRate,\\n      getCollateralDecimals(positionManagerData.collateralToken)\\n    )\\n      .mul(\\n      FixedPoint.Unsigned(positionManagerData._getFeeInfo().feePercentage)\\n    );\\n    positionManagerData.updateFees(feeStatus, feeAmount);\\n\\n    // update position\\n    positionData.tokensOutstanding = newTokenCount;\\n    _decrementCollateralBalances(positionData, globalPositionData, feeAmount);\\n\\n    // Update the totalTokensOutstanding after redemption.\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(numTokens);\\n\\n    // Transfer the tokens back from the sponsor and burn them.\\n    positionManagerData.tokenCurrency.safeTransferFrom(\\n      msgSender,\\n      address(this),\\n      numTokens.rawValue\\n    );\\n    positionManagerData.tokenCurrency.burn(numTokens.rawValue);\\n\\n    emit Repay(\\n      msgSender,\\n      numTokens.rawValue,\\n      newTokenCount.rawValue,\\n      feeAmount.rawValue\\n    );\\n  }\\n\\n  function liquidate(\\n    ICreditLineStorage.PositionData storage positionToLiquidate,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    FixedPoint.Unsigned calldata numSynthTokens,\\n    address msgSender\\n  )\\n    external\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    // to avoid stack too deep\\n    ICreditLineStorage.ExecuteLiquidationData memory executeLiquidationData;\\n    uint256 collateralDecimals =\\n      getCollateralDecimals(positionManagerData.collateralToken);\\n\\n    FixedPoint.Unsigned memory priceRate = _getOraclePrice(positionManagerData);\\n\\n    // make sure position is undercollateralised\\n    require(\\n      !positionManagerData._checkCollateralization(\\n        positionToLiquidate.rawCollateral,\\n        positionToLiquidate.tokensOutstanding,\\n        priceRate,\\n        collateralDecimals\\n      ),\\n      'Position is properly collateralised'\\n    );\\n\\n    // calculate tokens to liquidate\\n    executeLiquidationData.tokensToLiquidate.rawValue = positionToLiquidate\\n      .tokensOutstanding\\n      .isGreaterThan(numSynthTokens)\\n      ? numSynthTokens.rawValue\\n      : positionToLiquidate.tokensOutstanding.rawValue;\\n\\n    // calculate collateral value of those tokens\\n    executeLiquidationData\\n      .collateralValueLiquidatedTokens = calculateCollateralAmount(\\n      executeLiquidationData.tokensToLiquidate,\\n      priceRate,\\n      collateralDecimals\\n    );\\n\\n    // calculate proportion of collateral liquidated from position\\n    executeLiquidationData.collateralLiquidated = executeLiquidationData\\n      .tokensToLiquidate\\n      .div(positionToLiquidate.tokensOutstanding)\\n      .mul(positionToLiquidate.rawCollateral);\\n\\n    // compute final liquidation outcome\\n    if (\\n      executeLiquidationData.collateralLiquidated.isGreaterThan(\\n        executeLiquidationData.collateralValueLiquidatedTokens\\n      )\\n    ) {\\n      // position is still capitalised - liquidator profits\\n      executeLiquidationData.liquidatorReward = (\\n        executeLiquidationData.collateralLiquidated.sub(\\n          executeLiquidationData.collateralValueLiquidatedTokens\\n        )\\n      )\\n        .mul(positionManagerData._getLiquidationReward());\\n      executeLiquidationData.collateralLiquidated = executeLiquidationData\\n        .collateralValueLiquidatedTokens\\n        .add(executeLiquidationData.liquidatorReward);\\n    }\\n\\n    // reduce position\\n    positionToLiquidate._reducePosition(\\n      globalPositionData,\\n      executeLiquidationData.tokensToLiquidate,\\n      executeLiquidationData.collateralLiquidated\\n    );\\n\\n    // transfer tokens from liquidator to here and burn them\\n    _burnLiquidatedTokens(\\n      positionManagerData,\\n      msgSender,\\n      executeLiquidationData.tokensToLiquidate.rawValue\\n    );\\n\\n    // pay sender with collateral unlocked + rewards\\n    positionManagerData.collateralToken.safeTransfer(\\n      msgSender,\\n      executeLiquidationData.collateralLiquidated.rawValue\\n    );\\n\\n    // return values\\n    return (\\n      executeLiquidationData.collateralLiquidated.rawValue,\\n      executeLiquidationData.tokensToLiquidate.rawValue,\\n      executeLiquidationData.liquidatorReward.rawValue\\n    );\\n  }\\n\\n  function emergencyShutdown(\\n    ICreditLineStorage.PositionManagerData storage self\\n  ) external returns (uint256 timestamp, uint256 price) {\\n    require(\\n      msg.sender ==\\n        self.synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.Manager\\n        ),\\n      'Caller must be a Synthereum manager'\\n    );\\n\\n    timestamp = block.timestamp;\\n    FixedPoint.Unsigned memory _price = self._getOraclePrice();\\n\\n    // store timestamp and last price\\n    self.emergencyShutdownTimestamp = timestamp;\\n    self.emergencyShutdownPrice = _price;\\n\\n    price = _price.rawValue;\\n\\n    emit EmergencyShutdown(msg.sender, price, timestamp);\\n  }\\n\\n  function settleEmergencyShutdown(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    address msgSender\\n  ) external returns (FixedPoint.Unsigned memory amountWithdrawn) {\\n    // copy value\\n    FixedPoint.Unsigned memory emergencyShutdownPrice =\\n      positionManagerData.emergencyShutdownPrice;\\n    IMintableBurnableERC20 tokenCurrency = positionManagerData.tokenCurrency;\\n    FixedPoint.Unsigned memory rawCollateral = positionData.rawCollateral;\\n    FixedPoint.Unsigned memory totalCollateral =\\n      globalPositionData.rawTotalPositionCollateral;\\n\\n    // Get caller's tokens balance\\n    FixedPoint.Unsigned memory tokensToRedeem =\\n      FixedPoint.Unsigned(tokenCurrency.balanceOf(msgSender));\\n\\n    // calculate amount of underlying collateral entitled to them, with oracle emergency price\\n    FixedPoint.Unsigned memory totalRedeemableCollateral =\\n      tokensToRedeem.mul(emergencyShutdownPrice);\\n\\n    // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\\n    if (rawCollateral.rawValue > 0) {\\n      // Calculate the underlying entitled to a token sponsor. This is collateral - debt\\n      FixedPoint.Unsigned memory tokenDebtValueInCollateral =\\n        positionData.tokensOutstanding.mul(emergencyShutdownPrice);\\n\\n      // accrued to withdrawable collateral eventual excess collateral after debt\\n      if (tokenDebtValueInCollateral.isLessThan(rawCollateral)) {\\n        totalRedeemableCollateral = totalRedeemableCollateral.add(\\n          rawCollateral.sub(tokenDebtValueInCollateral)\\n        );\\n      }\\n\\n      CreditLine(address(this)).deleteSponsorPosition(msgSender);\\n      emit EndedSponsorPosition(msgSender);\\n    }\\n\\n    // Take the min of the remaining collateral and the collateral \\\"owed\\\". If the contract is undercapitalized,\\n    // the caller will get as much collateral as the contract can pay out.\\n    amountWithdrawn = FixedPoint.min(\\n      totalCollateral,\\n      totalRedeemableCollateral\\n    );\\n\\n    // Decrement total contract collateral and outstanding debt.\\n    globalPositionData.rawTotalPositionCollateral = totalCollateral.sub(\\n      amountWithdrawn\\n    );\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(tokensToRedeem);\\n\\n    emit SettleEmergencyShutdown(\\n      msgSender,\\n      amountWithdrawn.rawValue,\\n      tokensToRedeem.rawValue\\n    );\\n\\n    // Transfer tokens & collateral and burn the redeemed tokens.\\n    positionManagerData.collateralToken.safeTransfer(\\n      msgSender,\\n      amountWithdrawn.rawValue\\n    );\\n    tokenCurrency.safeTransferFrom(\\n      msgSender,\\n      address(this),\\n      tokensToRedeem.rawValue\\n    );\\n    tokenCurrency.burn(tokensToRedeem.rawValue);\\n  }\\n\\n  /**\\n   * @notice Withdraw fees gained by the sender\\n   * @param self Data type the library is attached to\\n   * @param feeStatus Actual status of fee gained (see FeeStatus struct)\\n   * @return feeClaimed Amount of fee claimed\\n   */\\n  function claimFee(\\n    ICreditLineStorage.PositionManagerData storage self,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    address msgSender\\n  ) external returns (uint256 feeClaimed) {\\n    // Fee to claim\\n    FixedPoint.Unsigned memory _feeClaimed = feeStatus.feeGained[msgSender];\\n\\n    // Check that fee is available\\n    require(_feeClaimed.rawValue > 0, 'No fee to claim');\\n\\n    // Update fee status\\n    delete feeStatus.feeGained[msgSender];\\n\\n    FixedPoint.Unsigned memory _totalRemainingFees =\\n      feeStatus.totalFeeAmount.sub(_feeClaimed);\\n\\n    feeStatus.totalFeeAmount = _totalRemainingFees;\\n\\n    // Transfer amount to the sender\\n    feeClaimed = _feeClaimed.rawValue;\\n\\n    self.collateralToken.safeTransfer(msgSender, _feeClaimed.rawValue);\\n\\n    emit ClaimFee(msgSender, feeClaimed, _totalRemainingFees.rawValue);\\n  }\\n\\n  function trimExcess(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    IERC20 token\\n  ) external returns (FixedPoint.Unsigned memory amount) {\\n    FixedPoint.Unsigned memory balance =\\n      FixedPoint.Unsigned(token.balanceOf(address(this)));\\n    if (address(token) == address(positionManagerData.collateralToken)) {\\n      FixedPoint.Unsigned memory rawTotalPositionCollateral =\\n        globalPositionData.rawTotalPositionCollateral;\\n      FixedPoint.Unsigned memory totalFeeAmount = feeStatus.totalFeeAmount;\\n      // If it is the collateral currency, send only the amount that the contract is not tracking (ie minus fees and positions)\\n      balance.isGreaterThan(rawTotalPositionCollateral.add(totalFeeAmount))\\n        ? amount = balance.sub(rawTotalPositionCollateral).sub(totalFeeAmount)\\n        : amount = FixedPoint.Unsigned(0);\\n    } else {\\n      // If it's not the collateral currency, send the entire balance.\\n      amount = balance;\\n    }\\n    token.safeTransfer(\\n      positionManagerData.excessTokenBeneficiary,\\n      amount.rawValue\\n    );\\n  }\\n\\n  /**\\n   * @notice Returns if position is overcollateralized and thepercentage of coverage of the collateral according to the last price\\n   * @param self Data type the library is attached to\\n   * @param positionData Position of the LP\\n   * @return True if position is overcollaterlized, otherwise false + percentage of coverage (totalCollateralAmount / (price * tokensCollateralized))\\n   */\\n  function collateralCoverage(\\n    ICreditLineStorage.PositionManagerData storage self,\\n    ICreditLineStorage.PositionData storage positionData\\n  ) external view returns (bool, uint256) {\\n    FixedPoint.Unsigned memory priceRate = _getOraclePrice(self);\\n    uint256 collateralDecimals = getCollateralDecimals(self.collateralToken);\\n    FixedPoint.Unsigned memory positionCollateral = positionData.rawCollateral;\\n    FixedPoint.Unsigned memory positionTokens = positionData.tokensOutstanding;\\n    bool _isOverCollateralised =\\n      _checkCollateralization(\\n        self,\\n        positionCollateral,\\n        positionTokens,\\n        priceRate,\\n        collateralDecimals\\n      );\\n\\n    FixedPoint.Unsigned memory collateralRequirementPrc =\\n      self._getCollateralRequirement();\\n\\n    FixedPoint.Unsigned memory overCollateralValue =\\n      getOverCollateralizationLimit(\\n        calculateCollateralAmount(\\n          positionData.tokensOutstanding,\\n          priceRate,\\n          collateralDecimals\\n        ),\\n        collateralRequirementPrc\\n      );\\n\\n    FixedPoint.Unsigned memory coverageRatio =\\n      positionCollateral.div(overCollateralValue);\\n\\n    FixedPoint.Unsigned memory _collateralCoverage =\\n      collateralRequirementPrc.mul(coverageRatio);\\n\\n    return (_isOverCollateralised, _collateralCoverage.rawValue);\\n  }\\n\\n  //Calls to the CreditLine controller\\n  function capMintAmount(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) external view returns (FixedPoint.Unsigned memory capMint) {\\n    capMint = positionManagerData._getCapMintAmount();\\n  }\\n\\n  function liquidationRewardPercentage(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) external view returns (FixedPoint.Unsigned memory liqRewardPercentage) {\\n    liqRewardPercentage = positionManagerData._getLiquidationReward();\\n  }\\n\\n  function feeInfo(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) external view returns (ICreditLineStorage.Fee memory fee) {\\n    fee = positionManagerData._getFeeInfo();\\n  }\\n\\n  function collateralRequirement(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) external view returns (FixedPoint.Unsigned memory) {\\n    return positionManagerData._getCollateralRequirement();\\n  }\\n\\n  //----------------------------------------\\n  // Internal functions\\n  //----------------------------------------\\n  /**\\n   * @notice Update fee gained by the fee recipients\\n   * @param feeStatus Actual status of fee gained to be withdrawn\\n   * @param feeAmount Collateral fee charged\\n   */\\n  function updateFees(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    ICreditLineStorage.FeeStatus storage feeStatus,\\n    FixedPoint.Unsigned memory feeAmount\\n  ) internal {\\n    FixedPoint.Unsigned memory feeCharged;\\n\\n    ICreditLineStorage.Fee memory feeStruct = positionManagerData._getFeeInfo();\\n    address[] memory feeRecipients = feeStruct.feeRecipients;\\n    uint32[] memory feeProportions = feeStruct.feeProportions;\\n    uint256 totalFeeProportions = feeStruct.totalFeeProportions;\\n    uint256 numberOfRecipients = feeRecipients.length;\\n    mapping(address => FixedPoint.Unsigned) storage feeGained =\\n      feeStatus.feeGained;\\n\\n    for (uint256 i = 0; i < numberOfRecipients - 1; i++) {\\n      address feeRecipient = feeRecipients[i];\\n      FixedPoint.Unsigned memory feeReceived =\\n        FixedPoint.Unsigned(\\n          (feeAmount.rawValue * feeProportions[i]) / totalFeeProportions\\n        );\\n      feeGained[feeRecipient] = feeGained[feeRecipient].add(feeReceived);\\n      feeCharged = feeCharged.add(feeReceived);\\n    }\\n\\n    address lastRecipient = feeRecipients[numberOfRecipients - 1];\\n\\n    feeGained[lastRecipient] = feeGained[lastRecipient].add(feeAmount).sub(\\n      feeCharged\\n    );\\n\\n    feeStatus.totalFeeAmount = feeStatus.totalFeeAmount.add(feeAmount);\\n  }\\n\\n  function _burnLiquidatedTokens(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    address liquidator,\\n    uint256 amount\\n  ) internal {\\n    positionManagerData.tokenCurrency.safeTransferFrom(\\n      liquidator,\\n      address(this),\\n      amount\\n    );\\n    positionManagerData.tokenCurrency.burn(amount);\\n  }\\n\\n  function _incrementCollateralBalances(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    FixedPoint.Unsigned memory collateralAmount\\n  ) internal {\\n    positionData.rawCollateral = positionData.rawCollateral.add(\\n      collateralAmount\\n    );\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .add(collateralAmount);\\n  }\\n\\n  function _decrementCollateralBalances(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    FixedPoint.Unsigned memory collateralAmount\\n  ) internal {\\n    positionData.rawCollateral = positionData.rawCollateral.sub(\\n      collateralAmount\\n    );\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .sub(collateralAmount);\\n  }\\n\\n  //remove the withdrawn collateral from the position and then check its CR\\n  function _decrementCollateralBalancesCheckCR(\\n    ICreditLineStorage.PositionData storage positionData,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateralAmount\\n  ) internal {\\n    FixedPoint.Unsigned memory newRawCollateral =\\n      positionData.rawCollateral.sub(collateralAmount);\\n\\n    positionData.rawCollateral = newRawCollateral;\\n\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .sub(collateralAmount);\\n\\n    require(\\n      _checkCollateralization(\\n        positionManagerData,\\n        newRawCollateral,\\n        positionData.tokensOutstanding,\\n        _getOraclePrice(positionManagerData),\\n        getCollateralDecimals(positionManagerData.collateralToken)\\n      ),\\n      'CR is not sufficiently high after the withdraw - try less amount'\\n    );\\n  }\\n\\n  // Deletes a sponsor's position and updates global counters. Does not make any external transfers.\\n  function _deleteSponsorPosition(\\n    ICreditLineStorage.PositionData storage positionToLiquidate,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    address sponsor\\n  ) internal returns (FixedPoint.Unsigned memory) {\\n    // Remove the collateral and outstanding from the overall total position.\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .sub(positionToLiquidate.rawCollateral);\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(positionToLiquidate.tokensOutstanding);\\n\\n    // delete position entry from storage\\n    CreditLine(address(this)).deleteSponsorPosition(sponsor);\\n\\n    emit EndedSponsorPosition(sponsor);\\n\\n    // Return unlocked amount of collateral\\n    return positionToLiquidate.rawCollateral;\\n  }\\n\\n  function _reducePosition(\\n    ICreditLineStorage.PositionData storage positionToLiquidate,\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    FixedPoint.Unsigned memory tokensToLiquidate,\\n    FixedPoint.Unsigned memory collateralToLiquidate\\n  ) internal {\\n    // reduce position\\n    positionToLiquidate.tokensOutstanding = positionToLiquidate\\n      .tokensOutstanding\\n      .sub(tokensToLiquidate);\\n    positionToLiquidate.rawCollateral = positionToLiquidate.rawCollateral.sub(\\n      collateralToLiquidate\\n    );\\n\\n    // update global position data\\n    globalPositionData.totalTokensOutstanding = globalPositionData\\n      .totalTokensOutstanding\\n      .sub(tokensToLiquidate);\\n    globalPositionData.rawTotalPositionCollateral = globalPositionData\\n      .rawTotalPositionCollateral\\n      .sub(collateralToLiquidate);\\n  }\\n\\n  function _checkCollateralization(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData,\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory numTokens,\\n    FixedPoint.Unsigned memory oraclePrice,\\n    uint256 collateralDecimals\\n  ) internal view returns (bool) {\\n    // calculate the min collateral of numTokens with chainlink\\n    FixedPoint.Unsigned memory thresholdValue =\\n      numTokens.mul(oraclePrice).div(10**(18 - collateralDecimals));\\n\\n    thresholdValue = getOverCollateralizationLimit(\\n      thresholdValue,\\n      positionManagerData._getCollateralRequirement()\\n    );\\n\\n    return collateral.isGreaterThanOrEqual(thresholdValue);\\n  }\\n\\n  // Check new total number of tokens does not overcome mint limit\\n  function checkMintLimit(\\n    ICreditLineStorage.GlobalPositionData storage globalPositionData,\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view {\\n    require(\\n      globalPositionData.totalTokensOutstanding.isLessThanOrEqual(\\n        positionManagerData._getCapMintAmount()\\n      ),\\n      'Total amount minted overcomes mint limit'\\n    );\\n  }\\n\\n  /**\\n   * @notice Retrun the on-chain oracle price for a pair\\n   * @return priceRate Latest rate of the pair\\n   */\\n  function _getOraclePrice(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (FixedPoint.Unsigned memory priceRate) {\\n    ISynthereumPriceFeed priceFeed =\\n      ISynthereumPriceFeed(\\n        positionManagerData.synthereumFinder.getImplementationAddress(\\n          SynthereumInterfaces.PriceFeed\\n        )\\n      );\\n    priceRate = FixedPoint.Unsigned(\\n      priceFeed.getLatestPrice(positionManagerData.priceIdentifier)\\n    );\\n  }\\n\\n  /// @notice calls CreditLineController to retrieve liquidation reward percentage\\n  function _getLiquidationReward(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (FixedPoint.Unsigned memory liqRewardPercentage) {\\n    liqRewardPercentage = FixedPoint.Unsigned(\\n      positionManagerData\\n        .getCreditLineController()\\n        .getLiquidationRewardPercentage(address(this))\\n    );\\n  }\\n\\n  function _getFeeInfo(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (ICreditLineStorage.Fee memory fee) {\\n    fee = positionManagerData.getCreditLineController().getFeeInfo(\\n      address(this)\\n    );\\n  }\\n\\n  function _getCollateralRequirement(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (FixedPoint.Unsigned memory) {\\n    return\\n      FixedPoint.Unsigned(\\n        positionManagerData.getCreditLineController().getCollateralRequirement(\\n          address(this)\\n        )\\n      );\\n  }\\n\\n  // Get mint amount limit from CreditLineController\\n  function _getCapMintAmount(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (FixedPoint.Unsigned memory capMint) {\\n    capMint = FixedPoint.Unsigned(\\n      positionManagerData.getCreditLineController().getCapMintAmount(\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  // Get self-minting controller instance\\n  function getCreditLineController(\\n    ICreditLineStorage.PositionManagerData storage positionManagerData\\n  ) internal view returns (ICreditLineController creditLineController) {\\n    creditLineController = ICreditLineController(\\n      positionManagerData.synthereumFinder.getImplementationAddress(\\n        SynthereumInterfaces.CreditLineController\\n      )\\n    );\\n  }\\n\\n  function getCollateralDecimals(IStandardERC20 collateralToken)\\n    internal\\n    view\\n    returns (uint256 decimals)\\n  {\\n    decimals = collateralToken.decimals();\\n  }\\n\\n  /**\\n   * @notice Calculate collateral amount starting from an amount of synthtic token\\n   * @param numTokens Amount of synthetic tokens from which you want to calculate collateral amount\\n   * @param priceRate On-chain price rate\\n   * @return collateralAmount Amount of collateral after on-chain oracle conversion\\n   */\\n  function calculateCollateralAmount(\\n    FixedPoint.Unsigned memory numTokens,\\n    FixedPoint.Unsigned memory priceRate,\\n    uint256 collateraDecimals\\n  ) internal pure returns (FixedPoint.Unsigned memory collateralAmount) {\\n    collateralAmount = numTokens.mul(priceRate).div(\\n      10**(18 - collateraDecimals)\\n    );\\n  }\\n\\n  function getOverCollateralizationLimit(\\n    FixedPoint.Unsigned memory collateral,\\n    FixedPoint.Unsigned memory collateralRequirementPrc\\n  ) internal pure returns (FixedPoint.Unsigned memory) {\\n    return collateral.mul(collateralRequirementPrc);\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@jarvis-network/synthereum-contracts/contracts/common/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.3.2 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {Context} from '../../../../@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n  function isTrustedForwarder(address forwarder)\\n    public\\n    view\\n    virtual\\n    returns (bool);\\n\\n  function _msgSender()\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (address sender)\\n  {\\n    if (isTrustedForwarder(msg.sender)) {\\n      // The assembly code is more direct than the Solidity version using `abi.decode`.\\n      assembly {\\n        sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n    } else {\\n      return super._msgSender();\\n    }\\n  }\\n\\n  function _msgData() internal view virtual override returns (bytes calldata) {\\n    if (isTrustedForwarder(msg.sender)) {\\n      return msg.data[0:msg.data.length - 20];\\n    } else {\\n      return super._msgData();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/structs/EnumerableMap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/contracts/core/interfaces/ITrustedForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\nimport {\\n  MinimalForwarder\\n} from '../../../@openzeppelin/contracts/metatx/MinimalForwarder.sol';\\n\\ninterface ISynthereumTrustedForwarder {\\n  /**\\n   * @notice Check if the execute function reverts or not\\n   */\\n  function safeExecute(\\n    MinimalForwarder.ForwardRequest calldata req,\\n    bytes calldata signature\\n  ) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/metatx/MinimalForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712.sol\\\";\\n\\n/**\\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\\n */\\ncontract MinimalForwarder is EIP712 {\\n    using ECDSA for bytes32;\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\\\");\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    constructor() EIP712(\\\"MinimalForwarder\\\", \\\"0.0.1\\\") {}\\n\\n    function getNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))\\n        ).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n\\n    function execute(ForwardRequest calldata req, bytes calldata signature)\\n        public\\n        payable\\n        returns (bool, bytes memory)\\n    {\\n        require(verify(req, signature), \\\"MinimalForwarder: signature does not match request\\\");\\n        _nonces[req.from] = req.nonce + 1;\\n\\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(\\n            abi.encodePacked(req.data, req.from)\\n        );\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\\n        assert(gasleft() > req.gas / 63);\\n\\n        return (success, returndata);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"deploy/@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"deploy/contracts/synthereum-pool/v5/LiquidityPoolLib.sol\": {\r\n        \"SynthereumLiquidityPoolLib\": \"0xac84c7795157b9410d184d50d1a672607de2894a\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"finder\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"contract IStandardERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IMintableBurnableERC20\",\"name\":\"syntheticToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"internalType\":\"struct ISynthereumLiquidityPoolStorage.Roles\",\"name\":\"roles\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"overCollateralization\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"feePercentage\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"feeRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"feeProportions\",\"type\":\"uint32[]\"}],\"internalType\":\"struct ISynthereumLiquidityPoolStorage.FeeData\",\"name\":\"feeData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"priceIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"collateralRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationReward\",\"type\":\"uint256\"}],\"internalType\":\"struct SynthereumLiquidityPool.ConstructorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRemainingFees\",\"type\":\"uint256\"}],\"name\":\"ClaimFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRemoved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalCollateral\",\"type\":\"uint256\"}],\"name\":\"DecreaseCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalCollateral\",\"type\":\"uint256\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokensSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destNumTokensReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalCollateral\",\"type\":\"uint256\"}],\"name\":\"IncreaseCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensLiquidated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralExpected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardReceived\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokensReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokensSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercentage\",\"type\":\"uint256\"}],\"name\":\"SetFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"feeRecipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"feeProportions\",\"type\":\"uint32[]\"}],\"name\":\"SetFeeRecipients\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationReward\",\"type\":\"uint256\"}],\"name\":\"SetLiquidationReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overCollateralization\",\"type\":\"uint256\"}],\"name\":\"SetOverCollateralization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokensSettled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralExpected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralSettled\",\"type\":\"uint256\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingLiquidity\",\"type\":\"uint256\"}],\"name\":\"WithdrawLiquidity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_PROVIDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralCoverage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralCurrency\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralToDecrease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralToWithdraw\",\"type\":\"uint256\"}],\"name\":\"decreaseCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdownPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdownTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ISynthereumLiquidityPoolGeneral\",\"name\":\"destPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDestNumTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ISynthereumLiquidityPool.ExchangeParams\",\"name\":\"exchangeParams\",\"type\":\"tuple\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"destNumTokensMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"exchangeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipientsInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"syntheticTokens\",\"type\":\"uint256\"},{\"internalType\":\"contract ISynthereumLiquidityPoolGeneral\",\"name\":\"destinationPool\",\"type\":\"address\"}],\"name\":\"getExchangeTradeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"destSyntheticTokensReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputCollateral\",\"type\":\"uint256\"}],\"name\":\"getMintTradeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"synthTokensReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeedIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"syntheticTokens\",\"type\":\"uint256\"}],\"name\":\"getRedeemTradeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmountReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralToTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralToIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numSynthTokens\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"synthTokensLiquidated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minNumTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ISynthereumLiquidityPool.MintParams\",\"name\":\"mintParams\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"syntheticTokensMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ISynthereumLiquidityPool.RedeemParams\",\"name\":\"redeemParams\",\"type\":\"tuple\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralRedeemed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"feePercentage\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"feeRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"feeProportions\",\"type\":\"uint32[]\"}],\"internalType\":\"struct ISynthereumLiquidityPoolStorage.FeeData\",\"name\":\"_feeData\",\"type\":\"tuple\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"feeRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"feeProportions\",\"type\":\"uint32[]\"}],\"name\":\"setFeeRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationReward\",\"type\":\"uint256\"}],\"name\":\"setLiquidationReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_overCollateralization\",\"type\":\"uint256\"}],\"name\":\"setOverCollateralization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleEmergencyShutdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"synthTokensSettled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralSettled\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synthereumFinder\",\"outputs\":[{\"internalType\":\"contract ISynthereumFinder\",\"name\":\"finder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"syntheticCurrency\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSyntheticTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typology\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"poolVersion\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SynthereumLiquidityPool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000008f0bf7dd7d235a5d784dd68f8e14e14964418ee50000000000000000000000000000000000000000000000000000000000000005000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000023b8683ff98f9e4781552dfe6f12aa32814924e8000000000000000000000000c198a2babd2f00e968a296684e238e7b34123b54000000000000000000000000685723b9dc89bdf28ba5f98f9a8c0ac899bd6e77000000000000000000000000c31249ba48763df46388ba5c4e7565d62ed4801c000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000018045555255534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e398811bec6800000000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000005543df729c000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000008ef00583baa186094d9a34a0a4750c1d1bb86831000000000000000000000000c31249ba48763df46388ba5c4e7565d62ed4801c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}